Search.setIndex({"docnames": ["citing", "contributing/build-docs", "contributing/debug", "contributing/dependencies", "contributing/deprecations", "contributing/dev-setup", "contributing/docstring", "contributing/documentation-style-guide", "contributing/index", "contributing/make-a-contribution", "explanation/active-deprecations", "explanation/glossary", "explanation/gotchas", "explanation/index", "explanation/solve_output", "explanation/special_topics/classification", "explanation/special_topics/finite_diff_derivatives", "explanation/special_topics/index", "guides/assumptions", "guides/booleans", "guides/custom-functions", "guides/index", "guides/solving/index", "guides/solving/reduce-inequalities-algebraically", "guides/solving/solve-diophantine-equation", "guides/solving/solve-equation-algebraically", "guides/solving/solve-matrix-equation", "guides/solving/solve-numerically", "guides/solving/solve-system-of-equations-algebraically", "guides/solving/solving-guidance", "index", "install", "modules/abc", "modules/algebras", "modules/assumptions/ask", "modules/assumptions/assume", "modules/assumptions/index", "modules/assumptions/predicates", "modules/assumptions/refine", "modules/calculus/index", "modules/categories", "modules/codegen", "modules/combinatorics/fp_groups", "modules/combinatorics/graycode", "modules/combinatorics/group_constructs", "modules/combinatorics/group_numbers", "modules/combinatorics/index", "modules/combinatorics/named_groups", "modules/combinatorics/partitions", "modules/combinatorics/pc_groups", "modules/combinatorics/perm_groups", "modules/combinatorics/permutations", "modules/combinatorics/polyhedron", "modules/combinatorics/prufer", "modules/combinatorics/subsets", "modules/combinatorics/tensor_can", "modules/combinatorics/testutil", "modules/combinatorics/util", "modules/concrete", "modules/core", "modules/crypto", "modules/diffgeom", "modules/discrete", "modules/evalf", "modules/functions/combinatorial", "modules/functions/elementary", "modules/functions/index", "modules/functions/special", "modules/geometry/curves", "modules/geometry/ellipses", "modules/geometry/entities", "modules/geometry/index", "modules/geometry/lines", "modules/geometry/plane", "modules/geometry/points", "modules/geometry/polygons", "modules/geometry/utils", "modules/holonomic/about", "modules/holonomic/convert", "modules/holonomic/index", "modules/holonomic/internal", "modules/holonomic/operations", "modules/holonomic/represent", "modules/holonomic/uses", "modules/integrals/g-functions", "modules/integrals/index", "modules/integrals/integrals", "modules/interactive", "modules/liealgebras/index", "modules/logic", "modules/matrices/common", "modules/matrices/dense", "modules/matrices/expressions", "modules/matrices/immutablematrices", "modules/matrices/index", "modules/matrices/matrices", "modules/matrices/normalforms", "modules/matrices/sparse", "modules/matrices/sparsetools", "modules/ntheory", "modules/numeric-computation", "modules/parsing", "modules/physics/continuum_mechanics/beam", "modules/physics/continuum_mechanics/beam_problems", "modules/physics/continuum_mechanics/index", "modules/physics/continuum_mechanics/truss", "modules/physics/control/control", "modules/physics/control/control_plots", "modules/physics/control/index", "modules/physics/control/lti", "modules/physics/hep/index", "modules/physics/hydrogen", "modules/physics/matrices", "modules/physics/mechanics/advanced", "modules/physics/mechanics/api/body", "modules/physics/mechanics/api/expr_manip", "modules/physics/mechanics/api/index", "modules/physics/mechanics/api/joint", "modules/physics/mechanics/api/kane_lagrange", "modules/physics/mechanics/api/linearize", "modules/physics/mechanics/api/part_bod", "modules/physics/mechanics/api/printing", "modules/physics/mechanics/api/system", "modules/physics/mechanics/autolev_parser", "modules/physics/mechanics/examples", "modules/physics/mechanics/examples/bicycle_example", "modules/physics/mechanics/examples/four_bar_linkage_example", "modules/physics/mechanics/examples/lin_pend_nonmin_example", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system", "modules/physics/mechanics/examples/rollingdisc_example", "modules/physics/mechanics/examples/rollingdisc_example_kane", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints", "modules/physics/mechanics/examples/rollingdisc_example_lagrange", "modules/physics/mechanics/index", "modules/physics/mechanics/joints", "modules/physics/mechanics/kane", "modules/physics/mechanics/lagrange", "modules/physics/mechanics/linearize", "modules/physics/mechanics/masses", "modules/physics/mechanics/reference", "modules/physics/mechanics/sympy_mechanics_for_autolev_users", "modules/physics/mechanics/symsystem", "modules/physics/optics/gaussopt", "modules/physics/optics/index", "modules/physics/optics/medium", "modules/physics/optics/polarization", "modules/physics/optics/utils", "modules/physics/optics/waves", "modules/physics/paulialgebra", "modules/physics/qho_1d", "modules/physics/quantum/anticommutator", "modules/physics/quantum/cartesian", "modules/physics/quantum/cg", "modules/physics/quantum/circuitplot", "modules/physics/quantum/commutator", "modules/physics/quantum/constants", "modules/physics/quantum/dagger", "modules/physics/quantum/gate", "modules/physics/quantum/grover", "modules/physics/quantum/hilbert", "modules/physics/quantum/index", "modules/physics/quantum/innerproduct", "modules/physics/quantum/operator", "modules/physics/quantum/operatorset", "modules/physics/quantum/piab", "modules/physics/quantum/qapply", "modules/physics/quantum/qft", "modules/physics/quantum/qubit", "modules/physics/quantum/represent", "modules/physics/quantum/shor", "modules/physics/quantum/spin", "modules/physics/quantum/state", "modules/physics/quantum/tensorproduct", "modules/physics/secondquant", "modules/physics/sho", "modules/physics/units/dimensions", "modules/physics/units/examples", "modules/physics/units/index", "modules/physics/units/philosophy", "modules/physics/units/prefixes", "modules/physics/units/quantities", "modules/physics/units/unitsystem", "modules/physics/vector/advanced", "modules/physics/vector/api/classes", "modules/physics/vector/api/fieldfunctions", "modules/physics/vector/api/functions", "modules/physics/vector/api/index", "modules/physics/vector/api/kinematics", "modules/physics/vector/api/printing", "modules/physics/vector/fields", "modules/physics/vector/index", "modules/physics/vector/kinematics", "modules/physics/vector/vectors", "modules/physics/wigner", "modules/plotting", "modules/polys/agca", "modules/polys/basics", "modules/polys/domainmatrix", "modules/polys/domainsintro", "modules/polys/domainsref", "modules/polys/index", "modules/polys/internals", "modules/polys/literature", "modules/polys/numberfields", "modules/polys/reference", "modules/polys/ringseries", "modules/polys/solvers", "modules/polys/wester", "modules/printing", "modules/rewriting", "modules/series/formal", "modules/series/fourier", "modules/series/index", "modules/series/limitseq", "modules/series/sequences", "modules/series/series", "modules/sets", "modules/simplify/fu", "modules/simplify/hyperexpand", "modules/simplify/index", "modules/simplify/simplify", "modules/solvers/diophantine", "modules/solvers/index", "modules/solvers/inequalities", "modules/solvers/ode", "modules/solvers/pde", "modules/solvers/solvers", "modules/solvers/solveset", "modules/stats", "modules/tensor/array", "modules/tensor/array_expressions", "modules/tensor/index", "modules/tensor/index_methods", "modules/tensor/indexed", "modules/tensor/tensor", "modules/tensor/toperators", "modules/testing/index", "modules/testing/pytest", "modules/testing/randtest", "modules/testing/runtests", "modules/utilities/autowrap", "modules/utilities/codegen", "modules/utilities/decorator", "modules/utilities/enumerative", "modules/utilities/exceptions", "modules/utilities/index", "modules/utilities/iterables", "modules/utilities/lambdify", "modules/utilities/memoization", "modules/utilities/misc", "modules/utilities/pkgdata", "modules/utilities/source", "modules/utilities/timeutils", "modules/vector/api/classes", "modules/vector/api/index", "modules/vector/api/orienterclasses", "modules/vector/api/vectorfunctions", "modules/vector/basics", "modules/vector/coordsys", "modules/vector/examples", "modules/vector/fields", "modules/vector/index", "modules/vector/intro", "modules/vector/vector_integration", "reference/index", "reference/public/basics/index", "reference/public/codegeneration/index", "reference/public/logic/index", "reference/public/matrices/index", "reference/public/numbertheory/index", "reference/public/physics/index", "reference/public/topics/index", "reference/public/utilities/index", "tutorials/index", "tutorials/intro-tutorial/basic_operations", "tutorials/intro-tutorial/calculus", "tutorials/intro-tutorial/features", "tutorials/intro-tutorial/gotchas", "tutorials/intro-tutorial/index", "tutorials/intro-tutorial/intro", "tutorials/intro-tutorial/manipulation", "tutorials/intro-tutorial/matrices", "tutorials/intro-tutorial/next", "tutorials/intro-tutorial/preliminaries", "tutorials/intro-tutorial/printing", "tutorials/intro-tutorial/simplification", "tutorials/intro-tutorial/solvers"], "filenames": ["citing.md", "contributing/build-docs.rst", "contributing/debug.rst", "contributing/dependencies.md", "contributing/deprecations.md", "contributing/dev-setup.rst", "contributing/docstring.rst", "contributing/documentation-style-guide.rst", "contributing/index.rst", "contributing/make-a-contribution.rst", "explanation/active-deprecations.md", "explanation/glossary.md", "explanation/gotchas.rst", "explanation/index.rst", "explanation/solve_output.rst", "explanation/special_topics/classification.rst", "explanation/special_topics/finite_diff_derivatives.rst", "explanation/special_topics/index.rst", "guides/assumptions.rst", "guides/booleans.rst", "guides/custom-functions.md", "guides/index.rst", "guides/solving/index.md", "guides/solving/reduce-inequalities-algebraically.md", "guides/solving/solve-diophantine-equation.md", "guides/solving/solve-equation-algebraically.md", "guides/solving/solve-matrix-equation.md", "guides/solving/solve-numerically.md", "guides/solving/solve-system-of-equations-algebraically.md", "guides/solving/solving-guidance.md", "index.rst", "install.md", "modules/abc.rst", "modules/algebras.rst", "modules/assumptions/ask.rst", "modules/assumptions/assume.rst", "modules/assumptions/index.rst", "modules/assumptions/predicates.rst", "modules/assumptions/refine.rst", "modules/calculus/index.rst", "modules/categories.rst", "modules/codegen.rst", "modules/combinatorics/fp_groups.rst", "modules/combinatorics/graycode.rst", "modules/combinatorics/group_constructs.rst", "modules/combinatorics/group_numbers.rst", "modules/combinatorics/index.rst", "modules/combinatorics/named_groups.rst", "modules/combinatorics/partitions.rst", "modules/combinatorics/pc_groups.rst", "modules/combinatorics/perm_groups.rst", "modules/combinatorics/permutations.rst", "modules/combinatorics/polyhedron.rst", "modules/combinatorics/prufer.rst", "modules/combinatorics/subsets.rst", "modules/combinatorics/tensor_can.rst", "modules/combinatorics/testutil.rst", "modules/combinatorics/util.rst", "modules/concrete.rst", "modules/core.rst", "modules/crypto.rst", "modules/diffgeom.rst", "modules/discrete.rst", "modules/evalf.rst", "modules/functions/combinatorial.rst", "modules/functions/elementary.rst", "modules/functions/index.rst", "modules/functions/special.rst", "modules/geometry/curves.rst", "modules/geometry/ellipses.rst", "modules/geometry/entities.rst", "modules/geometry/index.rst", "modules/geometry/lines.rst", "modules/geometry/plane.rst", "modules/geometry/points.rst", "modules/geometry/polygons.rst", "modules/geometry/utils.rst", "modules/holonomic/about.rst", "modules/holonomic/convert.rst", "modules/holonomic/index.rst", "modules/holonomic/internal.rst", "modules/holonomic/operations.rst", "modules/holonomic/represent.rst", "modules/holonomic/uses.rst", "modules/integrals/g-functions.rst", "modules/integrals/index.rst", "modules/integrals/integrals.rst", "modules/interactive.rst", "modules/liealgebras/index.rst", "modules/logic.rst", "modules/matrices/common.rst", "modules/matrices/dense.rst", "modules/matrices/expressions.rst", "modules/matrices/immutablematrices.rst", "modules/matrices/index.rst", "modules/matrices/matrices.rst", "modules/matrices/normalforms.rst", "modules/matrices/sparse.rst", "modules/matrices/sparsetools.rst", "modules/ntheory.rst", "modules/numeric-computation.rst", "modules/parsing.rst", "modules/physics/continuum_mechanics/beam.rst", "modules/physics/continuum_mechanics/beam_problems.rst", "modules/physics/continuum_mechanics/index.rst", "modules/physics/continuum_mechanics/truss.rst", "modules/physics/control/control.rst", "modules/physics/control/control_plots.rst", "modules/physics/control/index.rst", "modules/physics/control/lti.rst", "modules/physics/hep/index.rst", "modules/physics/hydrogen.rst", "modules/physics/matrices.rst", "modules/physics/mechanics/advanced.rst", "modules/physics/mechanics/api/body.rst", "modules/physics/mechanics/api/expr_manip.rst", "modules/physics/mechanics/api/index.rst", "modules/physics/mechanics/api/joint.rst", "modules/physics/mechanics/api/kane_lagrange.rst", "modules/physics/mechanics/api/linearize.rst", "modules/physics/mechanics/api/part_bod.rst", "modules/physics/mechanics/api/printing.rst", "modules/physics/mechanics/api/system.rst", "modules/physics/mechanics/autolev_parser.rst", "modules/physics/mechanics/examples.rst", "modules/physics/mechanics/examples/bicycle_example.rst", "modules/physics/mechanics/examples/four_bar_linkage_example.rst", "modules/physics/mechanics/examples/lin_pend_nonmin_example.rst", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system.rst", "modules/physics/mechanics/examples/rollingdisc_example.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints.rst", "modules/physics/mechanics/examples/rollingdisc_example_lagrange.rst", "modules/physics/mechanics/index.rst", "modules/physics/mechanics/joints.rst", "modules/physics/mechanics/kane.rst", "modules/physics/mechanics/lagrange.rst", "modules/physics/mechanics/linearize.rst", "modules/physics/mechanics/masses.rst", "modules/physics/mechanics/reference.rst", "modules/physics/mechanics/sympy_mechanics_for_autolev_users.rst", "modules/physics/mechanics/symsystem.rst", "modules/physics/optics/gaussopt.rst", "modules/physics/optics/index.rst", "modules/physics/optics/medium.rst", "modules/physics/optics/polarization.rst", "modules/physics/optics/utils.rst", "modules/physics/optics/waves.rst", "modules/physics/paulialgebra.rst", "modules/physics/qho_1d.rst", "modules/physics/quantum/anticommutator.rst", "modules/physics/quantum/cartesian.rst", "modules/physics/quantum/cg.rst", "modules/physics/quantum/circuitplot.rst", "modules/physics/quantum/commutator.rst", "modules/physics/quantum/constants.rst", "modules/physics/quantum/dagger.rst", "modules/physics/quantum/gate.rst", "modules/physics/quantum/grover.rst", "modules/physics/quantum/hilbert.rst", "modules/physics/quantum/index.rst", "modules/physics/quantum/innerproduct.rst", "modules/physics/quantum/operator.rst", "modules/physics/quantum/operatorset.rst", "modules/physics/quantum/piab.rst", "modules/physics/quantum/qapply.rst", "modules/physics/quantum/qft.rst", "modules/physics/quantum/qubit.rst", "modules/physics/quantum/represent.rst", "modules/physics/quantum/shor.rst", "modules/physics/quantum/spin.rst", "modules/physics/quantum/state.rst", "modules/physics/quantum/tensorproduct.rst", "modules/physics/secondquant.rst", "modules/physics/sho.rst", "modules/physics/units/dimensions.rst", "modules/physics/units/examples.rst", "modules/physics/units/index.rst", "modules/physics/units/philosophy.rst", "modules/physics/units/prefixes.rst", "modules/physics/units/quantities.rst", "modules/physics/units/unitsystem.rst", "modules/physics/vector/advanced.rst", "modules/physics/vector/api/classes.rst", "modules/physics/vector/api/fieldfunctions.rst", "modules/physics/vector/api/functions.rst", "modules/physics/vector/api/index.rst", "modules/physics/vector/api/kinematics.rst", "modules/physics/vector/api/printing.rst", "modules/physics/vector/fields.rst", "modules/physics/vector/index.rst", "modules/physics/vector/kinematics.rst", "modules/physics/vector/vectors.rst", "modules/physics/wigner.rst", "modules/plotting.rst", "modules/polys/agca.rst", "modules/polys/basics.rst", "modules/polys/domainmatrix.rst", "modules/polys/domainsintro.rst", "modules/polys/domainsref.rst", "modules/polys/index.rst", "modules/polys/internals.rst", "modules/polys/literature.rst", "modules/polys/numberfields.rst", "modules/polys/reference.rst", "modules/polys/ringseries.rst", "modules/polys/solvers.rst", "modules/polys/wester.rst", "modules/printing.rst", "modules/rewriting.rst", "modules/series/formal.rst", "modules/series/fourier.rst", "modules/series/index.rst", "modules/series/limitseq.rst", "modules/series/sequences.rst", "modules/series/series.rst", "modules/sets.rst", "modules/simplify/fu.rst", "modules/simplify/hyperexpand.rst", "modules/simplify/index.rst", "modules/simplify/simplify.rst", "modules/solvers/diophantine.rst", "modules/solvers/index.rst", "modules/solvers/inequalities.rst", "modules/solvers/ode.rst", "modules/solvers/pde.rst", "modules/solvers/solvers.rst", "modules/solvers/solveset.rst", "modules/stats.rst", "modules/tensor/array.rst", "modules/tensor/array_expressions.rst", "modules/tensor/index.rst", "modules/tensor/index_methods.rst", "modules/tensor/indexed.rst", "modules/tensor/tensor.rst", "modules/tensor/toperators.rst", "modules/testing/index.rst", "modules/testing/pytest.rst", "modules/testing/randtest.rst", "modules/testing/runtests.rst", "modules/utilities/autowrap.rst", "modules/utilities/codegen.rst", "modules/utilities/decorator.rst", "modules/utilities/enumerative.rst", "modules/utilities/exceptions.rst", "modules/utilities/index.rst", "modules/utilities/iterables.rst", "modules/utilities/lambdify.rst", "modules/utilities/memoization.rst", "modules/utilities/misc.rst", "modules/utilities/pkgdata.rst", "modules/utilities/source.rst", "modules/utilities/timeutils.rst", "modules/vector/api/classes.rst", "modules/vector/api/index.rst", "modules/vector/api/orienterclasses.rst", "modules/vector/api/vectorfunctions.rst", "modules/vector/basics.rst", "modules/vector/coordsys.rst", "modules/vector/examples.rst", "modules/vector/fields.rst", "modules/vector/index.rst", "modules/vector/intro.rst", "modules/vector/vector_integration.rst", "reference/index.rst", "reference/public/basics/index.rst", "reference/public/codegeneration/index.rst", "reference/public/logic/index.rst", "reference/public/matrices/index.rst", "reference/public/numbertheory/index.rst", "reference/public/physics/index.rst", "reference/public/topics/index.rst", "reference/public/utilities/index.rst", "tutorials/index.rst", "tutorials/intro-tutorial/basic_operations.rst", "tutorials/intro-tutorial/calculus.rst", "tutorials/intro-tutorial/features.rst", "tutorials/intro-tutorial/gotchas.rst", "tutorials/intro-tutorial/index.rst", "tutorials/intro-tutorial/intro.rst", "tutorials/intro-tutorial/manipulation.rst", "tutorials/intro-tutorial/matrices.rst", "tutorials/intro-tutorial/next.rst", "tutorials/intro-tutorial/preliminaries.rst", "tutorials/intro-tutorial/printing.rst", "tutorials/intro-tutorial/simplification.rst", "tutorials/intro-tutorial/solvers.rst"], "titles": ["Citing SymPy", "Build the Documentation", "Debugging", "Dependencies", "Deprecation Policy", "Development Environment Setup", "SymPy Docstrings Style Guide", "Docstring Style Guide", "Contributing", "Making a Contribution", "List of active deprecations", "Glossary", "Gotchas and Pitfalls", "Explanations", "Solve Output by Type", "Classification of SymPy objects", "Finite Difference Approximations to Derivatives", "SymPy Special Topics", "Assumptions", "Symbolic and fuzzy booleans", "Writing Custom Functions", "How-to Guides", "Solve Equations", "Reduce One or a System of Inequalities for a Single Variable Algebraically", "Solve a Diophantine Equation Algebraically", "Solve an Equation Algebraically", "Solve a Matrix Equation Algebraically", "Solve One or a System of Equations Numerically", "Solve a System of Equations Algebraically", "Solving Guidance", "Welcome to SymPy\u2019s documentation!", "Installation", "abc", "Algebras", "Ask", "Assume", "Assumptions", "Predicates", "Refine", "Calculus", "Category Theory", "Code Generation", "Finitely Presented Groups", "Gray Code", "Group constructors", "Nilpotent, Abelian and Cyclic Numbers", "Combinatorics", "Named Groups", "Partitions", "Polycyclic Groups", "Permutation Groups", "Permutations", "Polyhedron", "Prufer Sequences", "Subsets", "Tensor Canonicalization", "Test Utilities", "Utilities", "Concrete", "Core", "Cryptography", "Differential Geometry", "Discrete", "Numerical Evaluation", "Combinatorial", "Elementary", "Functions", "Special", "Curves", "Ellipses", "Entities", "Geometry", "Lines", "Plane", "Points", "Polygons", "Utils", "About Holonomic Functions", "Converting other representations to holonomic", "Holonomic", "Internal API", "Operations on holonomic functions", "Representation of holonomic functions in SymPy", "Uses and Current limitations", "Computing Integrals using Meijer G-Functions", "Integrals", "Integrals", "Interactive", "Lie Algebra", "Logic", "Common Matrices", "Dense Matrices", "Matrix Expressions", "Immutable Matrices", "Matrices", "Matrices (linear algebra)", "Matrix Normal Forms", "Sparse Matrices", "Sparse Tools", "Number Theory", "Numeric Computation", "Parsing", "Beam (Docstrings)", "Solving Beam Bending Problems using Singularity Functions", "Continuum Mechanics", "Truss (Docstrings)", "Control", "Control System Plots", "Control Module", "Control API", "High energy physics", "Hydrogen Wavefunctions", "Matrices", "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics", "Body (Docstrings)", "Expression Manipulation (Docstrings)", "Mechanics API Reference", "Joints Framework (Docstrings)", "Kane\u2019s Method &amp; Lagrange\u2019s Method (Docstrings)", "Linearization (Docstrings)", "Masses, Inertias &amp; Particles, RigidBodys (Docstrings)", "Printing (Docstrings)", "SymbolicSystem (Docstrings)", "Autolev Parser", "Examples for Physics/Mechanics", "A bicycle", "A four bar linkage", "Nonminimal Coordinates Pendulum", "Multi Degree of Freedom Holonomic System", "A rolling disc", "A rolling disc, with Kane\u2019s method", "A rolling disc, with Kane\u2019s method and constraint forces", "A rolling disc using Lagrange\u2019s Method", "Classical Mechanics", "Joints Framework in Physics/Mechanics", "Kane\u2019s Method in Physics/Mechanics", "Lagrange\u2019s Method in Physics/Mechanics", "Linearization in Physics/Mechanics", "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics", "References for Physics/Mechanics", "SymPy Mechanics for Autolev Users", "Symbolic Systems in Physics/Mechanics", "Gaussian Optics", "Optics Module", "Medium", "Polarization", "Utilities", "Waves", "Pauli Algebra", "Quantum Harmonic Oscillator in 1-D", "Anticommutator", "Cartesian Operators and States", "Clebsch-Gordan Coefficients", "Circuit Plot", "Commutator", "Constants", "Dagger", "Gates", "Grover\u2019s Algorithm", "Hilbert Space", "Quantum Mechanics", "Inner Product", "Operator", "Operator/State Helper Functions", "Particle in a Box", "Qapply", "QFT", "Qubit", "Represent", "Shor\u2019s Algorithm", "Spin", "State", "Tensor Product", "Second Quantization", "Quantum Harmonic Oscillator in 3-D", "Dimensions and dimension systems", "Examples", "Unit systems", "Philosophy behind unit systems", "Unit prefixes", "Physical quantities", "Units and unit systems", "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module", "Essential Classes", "Docstrings for basic field functions", "Essential Functions (Docstrings)", "Physics Vector API", "Kinematics (Docstrings)", "Printing (Docstrings)", "Scalar and Vector Field Functionality", "The Physics Vector Module", "Vector: Kinematics", "Vector &amp; ReferenceFrame", "Wigner Symbols", "Plotting", "AGCA - Algebraic Geometry and Commutative Algebra Module", "Basic functionality of the module", "Introducing the domainmatrix of the poly module", "Introducing the Domains of the poly module", "Reference docs for the Poly Domains", "Polynomial Manipulation", "Internals of the Polynomial Manipulation Module", "Literature", "Number Fields", "Polynomials Manipulation Module Reference", "Series Manipulation using Polynomials", "Poly solvers", "Examples from Wester\u2019s Article", "Printing", "Term Rewriting", "Formal Power Series", "Fourier Series", "Series", "Limits of Sequences", "Sequences", "Series Expansions", "Sets", "Hongguang Fu\u2019s Trigonometric Simplification", "Hypergeometric Expansion", "Simplify", "Simplify", "Diophantine", "Solvers", "Inequality Solvers", "ODE", "PDE", "Solvers", "Solveset", "Stats", "N-dim array", "N-dim array expressions", "Tensor", "Methods", "Indexed Objects", "Tensor", "Tensor Operators", "Testing", "pytest", "Randomised Testing", "Run Tests", "Autowrap Module", "Codegen", "Decorator", "Enumerative", "Exceptions and Warnings", "Utilities", "Iterables", "Lambdify", "Memoization", "Miscellaneous", "PKGDATA", "Source Code Inspection", "Timing Utilities", "Essential Classes in sympy.vector (docstrings)", "Vector API", "Orienter classes (docstrings)", "Essential Functions in sympy.vector (docstrings)", "Basic Implementation details", "More about Coordinate Systems", "General examples of usage", "Scalar and Vector Field Functionality", "Vector", "Introduction", "Applications of Vector Integrals", "API Reference", "Basics", "Code Generation", "Logic", "Matrices", "Number Theory", "Physics", "Topics", "Utilities", "Tutorials", "Basic Operations", "Calculus", "SymPy Features", "Gotchas", "Introductory Tutorial", "Introduction", "Advanced Expression Manipulation", "Matrices", "What\u2019s Next", "Preliminaries", "Printing", "Simplification", "Solvers"], "terms": {"To": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 16, 19, 20, 23, 24, 25, 27, 28, 29, 31, 32, 35, 36, 39, 40, 41, 42, 49, 50, 51, 55, 58, 59, 60, 61, 63, 64, 65, 66, 67, 72, 82, 84, 86, 88, 89, 90, 92, 95, 99, 101, 102, 103, 107, 109, 110, 112, 114, 117, 118, 136, 137, 140, 150, 154, 167, 176, 178, 182, 189, 192, 194, 196, 198, 199, 201, 203, 204, 205, 207, 208, 215, 216, 218, 221, 224, 225, 226, 227, 228, 229, 232, 233, 237, 239, 240, 243, 244, 246, 247, 253, 255, 257, 258, 260, 262, 263, 274, 275, 277, 278, 280, 281, 284, 285, 286], "public": [0, 6, 41, 59, 60, 81, 198, 199, 201, 202, 206, 221, 224, 228, 242, 253], "us": [0, 1, 2, 4, 5, 6, 8, 11, 12, 14, 15, 17, 18, 19, 20, 22, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 79, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 140, 141, 142, 145, 146, 148, 150, 152, 153, 154, 157, 159, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 187, 188, 189, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 228, 229, 230, 232, 233, 234, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 253, 256, 257, 259, 260, 262, 263, 265, 270, 271, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286], "meurer": 0, "A": [0, 3, 4, 6, 7, 10, 11, 12, 14, 15, 17, 18, 19, 20, 23, 25, 26, 27, 28, 29, 30, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 101, 102, 103, 105, 107, 109, 113, 114, 115, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 138, 139, 140, 141, 142, 145, 147, 150, 152, 153, 154, 156, 157, 158, 159, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 175, 178, 179, 181, 182, 183, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 239, 240, 241, 242, 243, 244, 246, 247, 253, 255, 257, 258, 259, 260, 262, 263, 270, 276, 278, 280, 281, 285], "smith": [0, 10, 96, 197], "cp": [0, 51, 100, 196], "paprocki": 0, "m": [0, 1, 10, 12, 16, 18, 20, 33, 37, 41, 42, 47, 48, 50, 51, 55, 58, 59, 60, 61, 62, 64, 67, 69, 71, 75, 76, 84, 86, 88, 90, 91, 92, 93, 95, 96, 98, 99, 101, 102, 103, 105, 109, 111, 112, 114, 117, 118, 119, 120, 122, 123, 127, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 144, 149, 156, 170, 171, 174, 176, 178, 189, 193, 195, 196, 197, 199, 201, 202, 203, 204, 205, 208, 209, 210, 211, 213, 214, 215, 216, 218, 220, 221, 224, 226, 227, 228, 229, 230, 233, 234, 240, 241, 243, 246, 248, 253, 256, 258, 262, 263, 275, 281, 284, 285, 286], "\u010dert\u00edk": 0, "o": [0, 1, 6, 11, 12, 16, 18, 32, 40, 41, 50, 51, 57, 59, 60, 65, 67, 69, 70, 72, 73, 75, 81, 84, 99, 103, 114, 118, 120, 122, 123, 135, 136, 137, 138, 140, 141, 163, 173, 184, 187, 189, 191, 193, 201, 202, 204, 205, 208, 210, 215, 218, 224, 228, 233, 239, 246, 249, 250, 256, 259, 275], "kirpichev": 0, "sb": 0, "rocklin": 0, "kumar": [0, 227], "ivanov": 0, "": [0, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 77, 78, 81, 82, 84, 86, 87, 88, 89, 90, 92, 93, 95, 98, 99, 100, 101, 102, 103, 107, 109, 111, 113, 114, 116, 117, 120, 123, 125, 129, 133, 134, 138, 140, 144, 145, 146, 152, 153, 155, 157, 159, 160, 163, 167, 168, 170, 171, 173, 176, 178, 182, 183, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 214, 215, 216, 218, 219, 220, 221, 223, 224, 225, 228, 234, 239, 240, 241, 242, 243, 244, 246, 247, 249, 253, 255, 259, 260, 262, 265, 270, 271, 273, 274, 275, 277, 278, 279, 280, 281, 285, 286], "moor": [0, 26, 92, 95], "jk": 0, "singh": 0, "rathnayak": 0, "t": [0, 1, 4, 6, 7, 10, 11, 12, 19, 20, 33, 36, 37, 39, 41, 42, 43, 50, 51, 52, 53, 55, 59, 60, 61, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 83, 84, 86, 88, 89, 90, 91, 92, 95, 99, 100, 101, 105, 109, 110, 113, 114, 115, 117, 118, 119, 120, 122, 123, 126, 127, 128, 135, 136, 137, 138, 140, 141, 145, 147, 153, 157, 169, 171, 173, 175, 176, 178, 182, 183, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 211, 215, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 230, 234, 237, 239, 242, 246, 247, 253, 256, 258, 262, 274, 275, 279, 280, 281, 284, 285, 286], "vig": 0, "granger": [0, 159], "BE": 0, "muller": 0, "rp": [0, 75, 145], "bonazzi": 0, "f": [0, 1, 6, 10, 11, 12, 16, 20, 24, 25, 27, 39, 40, 41, 42, 49, 50, 51, 55, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 77, 82, 83, 84, 86, 88, 90, 92, 95, 99, 100, 101, 103, 107, 117, 118, 122, 128, 133, 135, 136, 140, 142, 146, 147, 158, 159, 162, 171, 173, 176, 183, 188, 189, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 207, 208, 210, 211, 214, 215, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 233, 234, 239, 240, 241, 242, 243, 246, 247, 249, 259, 260, 263, 274, 275, 280, 284, 285, 286], "gupta": [0, 227], "h": [0, 12, 16, 39, 40, 41, 42, 43, 50, 55, 58, 59, 60, 64, 67, 81, 84, 86, 90, 91, 95, 96, 101, 109, 117, 120, 138, 142, 145, 157, 159, 162, 167, 171, 178, 193, 194, 195, 196, 197, 201, 202, 203, 204, 207, 208, 216, 220, 224, 226, 227, 228, 229, 234, 241, 263, 275, 284], "vat": 0, "johansson": 0, "pedregosa": 0, "curri": [0, 159], "mj": 0, "terrel": 0, "ar": [0, 1, 3, 4, 5, 7, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 95, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 145, 146, 147, 148, 150, 152, 154, 157, 159, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 191, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 228, 229, 230, 232, 233, 234, 235, 237, 239, 240, 241, 243, 244, 245, 246, 247, 249, 253, 255, 256, 257, 258, 259, 260, 262, 264, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286], "rou\u010dka": 0, "\u0161": 0, "saboo": 0, "fernando": 0, "i": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 153, 154, 156, 157, 159, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 228, 229, 230, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 274, 275, 277, 278, 280, 281, 283, 284, 285, 286], "kulal": 0, "cimrman": 0, "r": [0, 1, 6, 7, 10, 12, 16, 18, 20, 33, 40, 41, 42, 43, 50, 51, 59, 60, 61, 63, 64, 65, 72, 73, 75, 77, 81, 82, 84, 86, 95, 99, 101, 103, 105, 109, 111, 114, 117, 118, 119, 120, 122, 123, 125, 127, 130, 131, 132, 137, 138, 139, 140, 141, 142, 145, 169, 170, 173, 174, 176, 183, 184, 187, 189, 191, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 215, 216, 218, 220, 221, 224, 226, 227, 228, 234, 239, 241, 243, 253, 256, 258, 259, 260, 263, 285], "scopatz": 0, "2017": [0, 193], "symbol": [0, 3, 6, 7, 10, 11, 14, 16, 21, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 49, 51, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 81, 82, 83, 84, 86, 87, 89, 90, 92, 95, 99, 100, 101, 102, 103, 105, 106, 107, 109, 111, 113, 114, 115, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 138, 140, 142, 145, 146, 147, 148, 150, 152, 153, 155, 157, 159, 161, 162, 165, 168, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 218, 220, 221, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 240, 246, 247, 253, 255, 256, 258, 259, 260, 263, 270, 274, 275, 278, 280, 281, 284, 285, 286], "comput": [0, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 25, 26, 27, 31, 33, 39, 41, 42, 43, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 74, 78, 81, 82, 83, 85, 86, 88, 90, 92, 95, 96, 98, 99, 101, 102, 103, 107, 109, 113, 117, 118, 119, 122, 123, 125, 126, 130, 133, 140, 157, 158, 159, 167, 172, 173, 175, 177, 178, 182, 183, 184, 189, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 210, 211, 213, 215, 216, 217, 218, 220, 221, 224, 226, 227, 228, 230, 240, 243, 246, 247, 253, 255, 256, 257, 258, 259, 260, 262, 265, 274, 275, 277, 278, 281, 285], "python": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 15, 18, 19, 20, 22, 25, 26, 29, 30, 31, 34, 35, 36, 39, 51, 59, 60, 63, 65, 71, 87, 89, 90, 92, 95, 99, 100, 101, 102, 113, 123, 140, 183, 194, 195, 196, 198, 199, 205, 207, 208, 216, 220, 224, 227, 229, 239, 240, 241, 242, 243, 246, 247, 249, 253, 277, 278, 279, 280, 281, 283, 284, 285], "peerj": 0, "scienc": [0, 51, 84, 95, 139, 140, 195, 202, 217, 218, 275], "3": [0, 4, 5, 7, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 29, 31, 33, 34, 36, 37, 38, 39, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 82, 83, 84, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 109, 110, 111, 112, 114, 115, 117, 120, 122, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 140, 141, 142, 144, 146, 150, 152, 153, 154, 158, 162, 167, 168, 170, 172, 173, 176, 179, 180, 182, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 239, 240, 242, 243, 244, 246, 247, 249, 251, 253, 255, 256, 257, 258, 260, 262, 263, 270, 274, 275, 277, 279, 280, 281, 284, 285, 286], "e103": 0, "http": [0, 1, 3, 4, 5, 6, 7, 10, 18, 20, 31, 33, 35, 36, 37, 39, 40, 41, 43, 47, 48, 50, 51, 52, 53, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 71, 75, 76, 77, 81, 84, 86, 87, 88, 89, 90, 92, 95, 99, 102, 107, 109, 111, 112, 142, 144, 145, 146, 148, 149, 150, 154, 155, 156, 159, 161, 162, 171, 173, 183, 185, 188, 190, 193, 202, 204, 207, 208, 211, 213, 215, 216, 217, 220, 221, 224, 227, 228, 240, 241, 242, 244, 246, 247, 249, 253, 255, 259, 261, 263, 281, 284], "doi": [0, 6, 39, 51, 95, 202, 217, 220, 228], "org": [0, 3, 6, 7, 12, 18, 20, 33, 35, 36, 37, 39, 40, 41, 47, 48, 50, 51, 58, 59, 60, 61, 62, 64, 65, 67, 69, 71, 75, 76, 77, 86, 87, 88, 89, 90, 92, 95, 99, 107, 109, 111, 112, 142, 144, 145, 146, 148, 149, 150, 154, 155, 156, 159, 161, 162, 171, 173, 183, 185, 188, 190, 202, 204, 208, 211, 215, 216, 217, 220, 221, 224, 227, 228, 240, 241, 242, 244, 246, 253, 255, 259, 261, 263, 281, 284], "10": [0, 3, 6, 12, 20, 27, 29, 31, 33, 39, 41, 48, 50, 51, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 72, 73, 75, 76, 84, 86, 87, 89, 90, 92, 95, 96, 99, 100, 101, 102, 105, 107, 109, 110, 115, 120, 123, 125, 140, 142, 146, 157, 167, 168, 179, 183, 184, 185, 187, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 211, 214, 215, 216, 217, 220, 221, 224, 227, 228, 229, 238, 239, 244, 246, 247, 249, 253, 256, 274, 281, 285], "7717": 0, "c": [0, 1, 3, 11, 12, 16, 18, 20, 22, 24, 26, 32, 33, 39, 40, 43, 44, 48, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 82, 84, 86, 88, 89, 90, 92, 95, 99, 100, 101, 102, 103, 105, 109, 111, 113, 115, 117, 118, 123, 128, 130, 131, 132, 134, 136, 137, 138, 140, 142, 146, 152, 153, 154, 157, 159, 162, 167, 170, 172, 173, 178, 183, 187, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 215, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 233, 234, 240, 241, 243, 246, 249, 250, 253, 255, 256, 257, 258, 259, 260, 263, 275, 277, 284, 285, 286], "103": [0, 50], "bibtex": 0, "entri": [0, 10, 26, 37, 42, 49, 51, 57, 60, 71, 84, 88, 90, 91, 92, 98, 118, 123, 125, 138, 145, 197, 201, 203, 204, 218, 228, 247], "latex": [0, 1, 3, 6, 11, 20, 29, 31, 67, 87, 182, 183, 188, 192, 194, 199, 208, 279, 280], "user": [0, 1, 3, 4, 5, 6, 7, 10, 11, 15, 17, 18, 20, 40, 41, 42, 50, 51, 58, 59, 60, 61, 67, 71, 84, 88, 92, 95, 101, 102, 103, 107, 109, 113, 123, 133, 136, 138, 141, 161, 162, 171, 177, 178, 182, 183, 187, 191, 195, 198, 201, 203, 205, 206, 207, 208, 209, 217, 220, 226, 227, 228, 237, 240, 241, 243, 244, 247, 253, 257, 258, 263, 270, 274, 277, 278, 280, 281, 282], "articl": [0, 59, 60, 92, 95, 200, 202, 203, 208, 217, 253, 271, 279], "titl": [0, 6, 7, 194], "author": [0, 6, 99, 159, 203], "aaron": 0, "christoph": [0, 253], "p": [0, 1, 10, 11, 12, 16, 18, 19, 20, 22, 24, 33, 35, 36, 37, 41, 42, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 72, 73, 74, 75, 76, 81, 82, 84, 86, 90, 92, 95, 99, 101, 102, 103, 105, 109, 110, 114, 117, 118, 119, 120, 122, 123, 127, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 152, 171, 173, 178, 184, 187, 189, 191, 193, 194, 196, 197, 198, 201, 202, 204, 205, 208, 210, 211, 215, 216, 218, 220, 221, 224, 226, 227, 228, 229, 233, 234, 246, 253, 256, 257, 258, 259, 260, 262, 281, 285], "mateusz": 0, "v": [0, 1, 5, 14, 25, 29, 33, 41, 49, 55, 58, 59, 60, 61, 62, 63, 67, 73, 84, 88, 90, 95, 99, 103, 114, 115, 117, 120, 125, 137, 138, 140, 141, 145, 146, 158, 173, 178, 183, 185, 187, 189, 191, 192, 194, 201, 202, 203, 204, 208, 218, 220, 221, 224, 226, 228, 239, 246, 253, 256, 257, 258, 259, 260, 262], "ert": 0, "k": [0, 7, 12, 14, 18, 20, 24, 33, 39, 40, 41, 42, 43, 45, 49, 50, 53, 54, 57, 58, 59, 60, 62, 63, 64, 65, 67, 72, 77, 84, 86, 89, 90, 92, 95, 99, 117, 118, 128, 135, 137, 138, 140, 147, 161, 162, 165, 169, 171, 173, 182, 189, 193, 195, 197, 198, 201, 202, 203, 204, 205, 208, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 224, 226, 228, 229, 230, 232, 233, 234, 235, 239, 243, 246, 253, 255, 256, 257, 258, 259, 260, 262, 263, 284, 285], "ond": 0, "ej": 0, "sergei": 0, "b": [0, 5, 10, 11, 12, 14, 18, 19, 20, 22, 24, 26, 33, 40, 41, 42, 43, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 82, 84, 86, 88, 89, 90, 91, 92, 95, 99, 101, 102, 103, 105, 107, 109, 114, 115, 117, 118, 119, 120, 123, 127, 128, 137, 138, 140, 142, 145, 150, 152, 154, 156, 161, 162, 165, 170, 171, 172, 173, 183, 185, 187, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 208, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 239, 242, 243, 246, 249, 253, 255, 256, 257, 258, 259, 275, 277, 281, 285, 286], "matthew": 0, "amit": [0, 227], "sergiu": 0, "jason": [0, 208], "sartaj": 0, "thilina": 0, "sean": 0, "brian": [0, 159], "e": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 18, 19, 20, 22, 26, 27, 29, 32, 33, 37, 39, 40, 41, 42, 48, 49, 50, 51, 52, 55, 57, 58, 59, 60, 61, 63, 64, 65, 67, 69, 71, 72, 73, 74, 75, 76, 81, 82, 84, 86, 88, 89, 90, 95, 99, 101, 102, 103, 105, 109, 110, 114, 117, 118, 120, 122, 123, 136, 137, 140, 141, 142, 145, 152, 153, 157, 162, 163, 165, 168, 170, 172, 173, 178, 179, 183, 188, 189, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 214, 215, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 253, 257, 260, 262, 263, 274, 275, 279, 280, 285], "richard": [0, 99], "francesco": 0, "harsh": [0, 227], "shivam": 0, "fredrik": 0, "fabian": 0, "j": [0, 7, 10, 12, 33, 37, 39, 41, 42, 45, 49, 50, 51, 55, 57, 58, 60, 61, 63, 64, 67, 81, 84, 86, 88, 90, 92, 95, 99, 107, 110, 117, 138, 139, 140, 145, 152, 153, 170, 173, 178, 182, 189, 193, 195, 197, 199, 201, 202, 203, 204, 205, 207, 208, 210, 216, 218, 220, 221, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 240, 246, 253, 255, 256, 257, 258, 259, 260, 262, 263], "andi": [0, 139], "rou": 0, "ka": 0, "n": [0, 5, 6, 7, 11, 12, 16, 18, 20, 24, 25, 32, 37, 39, 41, 42, 43, 45, 47, 48, 49, 50, 51, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 67, 69, 72, 73, 74, 75, 76, 81, 82, 84, 86, 88, 89, 90, 92, 95, 96, 99, 101, 102, 103, 105, 109, 111, 112, 114, 117, 118, 120, 122, 123, 125, 126, 127, 128, 130, 131, 132, 135, 136, 137, 138, 140, 141, 142, 144, 146, 147, 149, 153, 158, 159, 162, 167, 169, 170, 171, 173, 174, 176, 178, 180, 182, 183, 185, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 224, 226, 227, 228, 231, 233, 234, 237, 240, 246, 248, 249, 253, 255, 256, 257, 258, 262, 268, 275, 281, 284, 285, 286], "ashutosh": 0, "isuru": 0, "sumith": 0, "robert": [0, 228], "anthoni": 0, "year": [0, 4, 6, 10], "month": 0, "jan": [0, 60], "keyword": [0, 4, 6, 11, 14, 20, 40, 41, 42, 50, 51, 59, 60, 63, 64, 72, 74, 75, 76, 90, 95, 99, 102, 107, 109, 118, 135, 136, 167, 173, 188, 194, 196, 198, 199, 201, 203, 204, 207, 208, 209, 215, 220, 221, 226, 233, 239, 240, 242, 244, 247, 249, 258, 281], "algebra": [0, 7, 11, 12, 14, 18, 22, 27, 29, 37, 42, 50, 59, 60, 63, 65, 77, 80, 81, 82, 84, 86, 89, 90, 94, 96, 99, 100, 101, 122, 133, 140, 141, 193, 196, 197, 199, 200, 201, 202, 204, 205, 208, 210, 218, 221, 223, 224, 227, 264, 265, 268, 270, 271, 276, 277, 279, 281], "system": [0, 1, 2, 3, 5, 7, 10, 11, 12, 14, 15, 16, 19, 20, 22, 26, 34, 36, 50, 59, 60, 61, 65, 84, 87, 88, 89, 90, 95, 100, 101, 102, 105, 106, 108, 109, 113, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 130, 132, 133, 134, 135, 136, 137, 138, 140, 151, 152, 167, 170, 171, 173, 176, 180, 183, 187, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 206, 207, 208, 216, 217, 223, 227, 228, 239, 240, 253, 255, 256, 259, 261, 263, 268, 270, 277, 279, 281, 285, 286], "abstract": [0, 10, 39, 40, 48, 59, 61, 65, 67, 72, 77, 92, 117, 123, 157, 159, 168, 171, 172, 173, 195, 203, 227, 228, 230, 234, 241, 262], "an": [0, 1, 3, 4, 6, 7, 9, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 26, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 109, 110, 111, 113, 114, 117, 118, 120, 122, 125, 127, 133, 135, 137, 138, 140, 141, 144, 145, 146, 150, 152, 153, 154, 156, 157, 158, 159, 161, 162, 163, 166, 167, 168, 170, 171, 173, 174, 175, 182, 183, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 220, 221, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 253, 255, 257, 258, 260, 261, 262, 263, 274, 275, 276, 277, 278, 279, 281, 284, 285, 286], "open": [0, 1, 3, 4, 6, 7, 9, 10, 23, 24, 25, 26, 27, 28, 31, 39, 59, 61, 65, 86, 89, 109, 123, 126, 140, 208, 216, 223, 227, 228, 250, 279, 281], "sourc": [0, 1, 5, 6, 7, 11, 20, 26, 27, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 105, 107, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 122, 123, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 179, 180, 181, 183, 184, 185, 187, 188, 189, 193, 194, 195, 197, 198, 199, 201, 203, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 260, 272, 279], "written": [0, 3, 6, 7, 11, 18, 20, 37, 41, 47, 50, 51, 55, 59, 64, 67, 71, 77, 82, 84, 88, 89, 98, 99, 127, 133, 140, 173, 189, 190, 191, 192, 195, 196, 204, 208, 211, 215, 218, 221, 224, 241, 260, 262, 278, 279, 280, 285], "pure": [0, 3, 11, 25, 27, 33, 60, 65, 86, 89, 92, 109, 137, 178, 198, 199, 201, 204, 208, 228, 246], "It": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 16, 18, 19, 20, 24, 25, 27, 28, 31, 33, 34, 35, 36, 39, 40, 41, 47, 50, 51, 53, 54, 55, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 71, 72, 75, 76, 82, 84, 86, 88, 89, 95, 99, 100, 101, 102, 103, 105, 107, 109, 111, 113, 114, 115, 117, 118, 123, 125, 131, 133, 134, 135, 136, 138, 140, 142, 146, 147, 157, 162, 163, 168, 169, 170, 171, 172, 173, 175, 178, 181, 183, 187, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 208, 211, 215, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 239, 240, 241, 242, 243, 244, 247, 253, 256, 257, 258, 260, 262, 263, 274, 275, 277, 278, 279, 280, 281, 283, 284, 285], "built": [0, 1, 3, 6, 7, 11, 12, 15, 34, 36, 42, 59, 65, 86, 95, 123, 140, 196, 199, 208, 209, 213, 224, 227, 228, 234, 243, 246, 247, 279, 280, 284], "focu": [0, 10, 18, 69, 226, 279], "extens": [0, 3, 6, 7, 18, 20, 50, 59, 64, 65, 71, 75, 86, 95, 120, 140, 196, 198, 199, 201, 202, 203, 204, 208, 218, 220, 224, 226, 227, 240, 241, 250, 278, 285], "eas": [0, 123, 192, 194, 208, 211], "through": [0, 1, 4, 6, 11, 12, 18, 20, 25, 26, 29, 31, 39, 41, 50, 51, 53, 58, 59, 60, 63, 64, 67, 69, 70, 71, 72, 73, 75, 84, 88, 89, 95, 99, 102, 103, 107, 114, 118, 123, 125, 133, 138, 144, 145, 183, 194, 195, 201, 203, 208, 214, 218, 220, 224, 226, 227, 228, 229, 240, 246, 253, 255, 260, 263, 276, 277, 278, 283], "both": [0, 3, 4, 6, 7, 10, 11, 12, 15, 18, 19, 20, 23, 24, 25, 32, 33, 39, 40, 41, 51, 54, 55, 57, 58, 59, 60, 64, 65, 67, 74, 83, 84, 86, 89, 90, 95, 99, 101, 102, 103, 109, 114, 117, 118, 125, 127, 128, 134, 137, 145, 146, 157, 163, 170, 173, 178, 183, 187, 191, 192, 194, 195, 196, 198, 199, 201, 203, 204, 206, 207, 208, 210, 215, 216, 217, 218, 220, 221, 224, 226, 227, 229, 233, 239, 241, 246, 247, 253, 255, 275, 278, 279, 280, 285, 286], "interact": [0, 11, 14, 25, 32, 59, 73, 86, 93, 95, 140, 170, 188, 192, 198, 199, 220, 228, 244, 251, 264, 272, 277, 279, 280, 284, 285], "programmat": [0, 11, 14, 15, 28, 29, 227, 258], "applic": [0, 7, 10, 25, 42, 43, 49, 50, 51, 52, 59, 60, 65, 86, 90, 95, 99, 102, 105, 117, 118, 122, 123, 133, 137, 139, 140, 157, 158, 183, 187, 191, 196, 201, 202, 203, 204, 208, 210, 215, 221, 224, 227, 241, 246, 253, 260, 261, 268, 279], "These": [0, 3, 6, 7, 10, 11, 12, 13, 14, 16, 18, 19, 20, 29, 30, 32, 40, 41, 50, 58, 59, 60, 61, 67, 84, 86, 89, 95, 101, 103, 109, 117, 118, 119, 125, 127, 131, 137, 140, 163, 168, 169, 183, 184, 189, 191, 192, 195, 196, 197, 198, 199, 201, 204, 208, 218, 221, 224, 225, 227, 228, 230, 235, 239, 240, 241, 246, 260, 275, 278, 281, 284, 285], "characterist": [0, 61, 77, 95, 191, 197, 199, 201, 202, 224, 226, 281], "have": [0, 1, 4, 5, 6, 7, 11, 12, 15, 16, 18, 19, 20, 23, 24, 26, 27, 29, 31, 33, 35, 36, 37, 39, 40, 41, 42, 43, 49, 50, 51, 52, 55, 57, 58, 59, 60, 61, 63, 64, 65, 67, 69, 70, 74, 75, 77, 82, 83, 84, 86, 88, 89, 90, 91, 92, 95, 98, 99, 100, 101, 102, 103, 107, 109, 110, 112, 113, 117, 118, 120, 123, 124, 125, 131, 133, 137, 140, 157, 159, 162, 166, 168, 170, 171, 172, 173, 175, 176, 177, 178, 181, 182, 183, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 208, 210, 211, 213, 215, 216, 217, 218, 220, 221, 224, 226, 227, 228, 229, 232, 234, 235, 237, 238, 239, 241, 242, 243, 246, 247, 249, 253, 255, 257, 258, 259, 260, 263, 274, 275, 277, 278, 279, 280, 281, 284, 285, 286], "led": 0, "becom": [0, 4, 6, 7, 10, 11, 12, 16, 18, 50, 55, 58, 59, 60, 63, 82, 87, 95, 101, 188, 191, 195, 196, 198, 205, 208, 211, 217, 224, 227, 228, 234, 249, 256, 258, 285], "popular": [0, 3, 60, 100, 140, 279], "librari": [0, 3, 4, 6, 10, 11, 18, 20, 27, 30, 31, 41, 59, 60, 64, 84, 86, 87, 95, 100, 113, 123, 140, 194, 198, 199, 228, 239, 240, 241, 246, 247, 274, 277, 278, 279], "scientif": [0, 11, 31, 59, 140], "ecosystem": 0, "thi": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 144, 145, 146, 147, 148, 150, 152, 153, 154, 156, 157, 159, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 253, 255, 256, 257, 258, 259, 260, 261, 262, 264, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286], "paper": [0, 6, 99, 125, 192, 203, 204, 217, 218, 221, 224, 228], "present": [0, 3, 7, 10, 11, 12, 16, 39, 40, 43, 46, 50, 51, 53, 57, 59, 62, 86, 95, 99, 102, 105, 107, 109, 118, 125, 173, 175, 183, 185, 188, 189, 194, 195, 201, 202, 203, 207, 208, 221, 227, 241, 247, 250, 256, 257, 258, 262, 265, 286], "architectur": [0, 140, 198, 239], "descript": [0, 4, 6, 7, 10, 22, 30, 40, 42, 49, 67, 86, 99, 145, 163, 170, 181, 191, 192, 193, 208, 232, 239, 241, 243, 244, 264, 282], "its": [0, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 29, 33, 35, 36, 37, 40, 41, 42, 43, 47, 49, 50, 51, 58, 59, 60, 61, 64, 65, 67, 69, 71, 75, 77, 84, 86, 87, 89, 90, 92, 95, 99, 101, 102, 103, 105, 109, 113, 114, 117, 118, 120, 123, 125, 126, 127, 133, 134, 137, 138, 140, 141, 146, 152, 158, 159, 161, 162, 167, 168, 171, 173, 178, 180, 183, 184, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 214, 215, 216, 220, 223, 224, 226, 227, 228, 232, 233, 234, 239, 242, 243, 246, 247, 250, 253, 256, 257, 258, 260, 263, 279, 280, 281, 284, 285], "featur": [0, 3, 4, 7, 10, 12, 13, 20, 30, 31, 59, 61, 63, 90, 101, 123, 133, 140, 190, 208, 224, 228, 237, 241, 244, 261, 270, 273, 278, 279, 283, 285], "discuss": [0, 4, 6, 7, 10, 12, 13, 14, 16, 18, 19, 20, 30, 42, 50, 60, 67, 99, 113, 118, 123, 133, 137, 138, 182, 190, 191, 192, 198, 234, 243, 264, 274, 276, 277, 279, 280, 282, 284, 285], "select": [0, 1, 13, 14, 26, 30, 41, 43, 50, 51, 58, 59, 60, 68, 73, 87, 89, 90, 99, 101, 115, 138, 178, 188, 198, 199, 201, 202, 204, 208, 217, 220, 226], "submodul": [0, 3, 4, 6, 11, 41, 113, 195, 199, 201, 203], "The": [0, 1, 3, 5, 6, 7, 8, 11, 12, 14, 16, 17, 19, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 144, 145, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 251, 253, 255, 256, 257, 258, 261, 262, 263, 270, 274, 275, 277, 278, 280, 281, 282, 283, 284, 285, 286], "supplementari": 0, "materi": [0, 102, 144, 283], "provid": [0, 1, 3, 4, 6, 7, 10, 13, 14, 16, 17, 18, 19, 20, 22, 23, 27, 30, 33, 39, 40, 41, 42, 48, 49, 50, 51, 57, 58, 59, 61, 63, 67, 68, 70, 75, 78, 81, 82, 86, 87, 89, 90, 92, 95, 96, 98, 99, 100, 101, 103, 105, 107, 113, 114, 117, 118, 120, 122, 125, 126, 127, 128, 133, 134, 135, 136, 137, 138, 140, 141, 146, 147, 167, 175, 176, 177, 181, 182, 183, 184, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 211, 213, 216, 217, 218, 220, 224, 225, 226, 227, 228, 229, 233, 234, 239, 240, 241, 243, 244, 246, 247, 249, 253, 256, 257, 258, 260, 261, 263, 275, 279, 280, 281, 285], "addit": [0, 3, 4, 7, 10, 11, 12, 14, 16, 31, 41, 49, 50, 51, 58, 59, 65, 67, 71, 77, 79, 83, 84, 86, 87, 89, 92, 95, 101, 106, 107, 109, 113, 114, 118, 137, 138, 141, 159, 171, 172, 175, 188, 191, 192, 193, 194, 195, 196, 197, 198, 201, 203, 204, 208, 214, 217, 218, 220, 221, 224, 225, 226, 227, 228, 239, 240, 241, 243, 244, 246, 247, 249, 257, 277, 279, 280, 281, 284, 285], "exampl": [0, 2, 3, 4, 5, 7, 10, 11, 12, 14, 15, 16, 18, 19, 22, 25, 26, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 81, 82, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 105, 107, 109, 111, 112, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 167, 168, 170, 171, 172, 173, 174, 175, 177, 179, 180, 183, 184, 185, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 209, 210, 211, 213, 214, 216, 217, 220, 221, 223, 224, 225, 226, 227, 232, 234, 235, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 253, 255, 256, 258, 260, 261, 262, 263, 268, 270, 271, 274, 275, 276, 277, 278, 280, 281, 283, 284, 286], "further": [0, 3, 5, 18, 20, 36, 40, 60, 65, 67, 71, 84, 86, 91, 92, 95, 101, 102, 106, 107, 114, 117, 118, 138, 145, 191, 193, 194, 195, 201, 203, 204, 217, 218, 220, 224, 228, 234, 278, 279], "outlin": [0, 3, 4, 18, 20, 57, 86, 195, 224], "detail": [0, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 18, 20, 30, 40, 50, 59, 61, 64, 66, 67, 84, 85, 86, 87, 90, 95, 99, 107, 117, 118, 123, 138, 140, 145, 163, 167, 183, 185, 193, 194, 195, 201, 203, 210, 215, 220, 221, 222, 224, 225, 228, 233, 234, 239, 242, 244, 247, 258, 259, 260, 261, 264, 268, 275, 277, 281, 282, 284], "volum": [0, 6, 41, 58, 67, 84, 193, 202, 218, 221, 224, 243, 253], "page": [0, 1, 3, 4, 6, 7, 10, 11, 12, 18, 19, 22, 23, 24, 25, 26, 27, 28, 30, 41, 42, 58, 64, 84, 99, 100, 117, 118, 140, 178, 194, 197, 198, 199, 202, 208, 218, 221, 244, 262, 285], "journal": [0, 6, 58, 64, 99, 110, 202, 220, 243], "issn": 0, "2376": 0, "5992": 0, "url": [0, 60, 244], "bsd": [0, 1, 3, 279], "licens": [0, 1, 3, 279], "so": [0, 3, 4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 47, 48, 50, 51, 53, 55, 57, 59, 60, 63, 65, 67, 69, 71, 72, 73, 75, 81, 82, 83, 84, 86, 87, 88, 89, 90, 92, 95, 96, 99, 101, 102, 103, 109, 113, 117, 118, 123, 125, 127, 133, 134, 135, 137, 140, 141, 146, 157, 159, 167, 169, 170, 171, 173, 175, 177, 178, 182, 183, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 232, 233, 237, 239, 240, 243, 244, 246, 247, 249, 259, 263, 274, 275, 277, 279, 280, 281, 284, 285, 286], "you": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 15, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 35, 36, 37, 39, 41, 42, 50, 51, 58, 59, 60, 61, 63, 65, 66, 67, 71, 73, 75, 77, 78, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 99, 100, 101, 109, 111, 112, 113, 117, 118, 119, 120, 123, 124, 134, 135, 137, 138, 140, 162, 167, 168, 171, 173, 182, 183, 185, 189, 191, 192, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 208, 209, 211, 215, 216, 220, 221, 224, 225, 226, 227, 228, 232, 233, 234, 237, 239, 240, 241, 242, 244, 246, 247, 250, 257, 258, 259, 260, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286], "free": [0, 10, 11, 26, 27, 31, 39, 40, 41, 49, 50, 55, 59, 71, 86, 90, 92, 95, 99, 102, 103, 107, 110, 117, 133, 142, 162, 180, 183, 190, 194, 195, 199, 201, 203, 204, 208, 210, 216, 218, 220, 221, 224, 226, 227, 234, 246, 279], "howev": [0, 1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 24, 25, 34, 36, 41, 50, 51, 55, 58, 59, 60, 61, 64, 65, 67, 69, 84, 86, 89, 90, 95, 99, 100, 101, 102, 105, 117, 123, 137, 141, 173, 192, 193, 194, 195, 196, 198, 199, 201, 203, 204, 205, 207, 208, 209, 215, 216, 217, 218, 220, 224, 225, 226, 227, 239, 240, 247, 257, 258, 262, 274, 277, 279, 281, 285, 286], "like": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 15, 18, 19, 20, 26, 28, 29, 30, 31, 41, 42, 44, 50, 51, 58, 59, 60, 63, 64, 65, 67, 69, 79, 82, 86, 87, 89, 90, 92, 93, 94, 95, 99, 100, 101, 105, 109, 113, 117, 120, 123, 125, 134, 137, 138, 140, 141, 155, 157, 167, 168, 171, 172, 173, 178, 182, 183, 187, 189, 191, 194, 195, 196, 198, 199, 200, 201, 203, 204, 206, 207, 208, 211, 215, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 232, 234, 235, 237, 239, 240, 241, 242, 246, 247, 249, 250, 257, 258, 260, 262, 274, 275, 277, 278, 279, 280, 281, 285], "academ": [0, 40, 43, 202], "commerci": [0, 279], "creat": [0, 1, 3, 4, 5, 6, 7, 9, 11, 18, 19, 23, 24, 25, 26, 28, 29, 35, 40, 41, 42, 48, 50, 51, 59, 60, 61, 63, 65, 66, 67, 69, 71, 72, 74, 75, 80, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 105, 109, 114, 117, 118, 120, 123, 126, 127, 128, 130, 132, 134, 136, 137, 138, 140, 141, 150, 152, 154, 158, 161, 162, 163, 167, 168, 170, 171, 173, 176, 179, 182, 183, 185, 187, 191, 192, 194, 195, 197, 198, 199, 201, 203, 204, 205, 208, 215, 220, 224, 227, 228, 229, 233, 234, 239, 240, 241, 243, 244, 246, 247, 253, 258, 260, 275, 277, 280, 281, 284, 285, 286], "fork": [0, 5, 7, 10, 125], "deriv": [0, 6, 10, 11, 17, 20, 25, 39, 40, 41, 43, 49, 50, 59, 61, 65, 66, 67, 69, 76, 81, 82, 84, 86, 87, 89, 92, 95, 105, 109, 113, 115, 117, 118, 122, 125, 127, 128, 130, 133, 135, 136, 137, 138, 162, 171, 175, 178, 179, 182, 183, 185, 187, 188, 189, 191, 194, 195, 196, 199, 201, 203, 204, 205, 208, 210, 218, 220, 224, 225, 226, 230, 235, 241, 253, 256, 257, 276, 279, 286], "long": [0, 6, 7, 8, 29, 41, 51, 58, 59, 60, 62, 72, 84, 86, 87, 89, 95, 99, 102, 103, 125, 188, 204, 205, 208, 217, 218, 226, 228, 240, 249, 256, 277, 280], "copi": [0, 1, 5, 10, 12, 18, 42, 51, 52, 59, 75, 95, 99, 100, 197, 199, 201, 203, 207, 208, 215, 226, 239, 246, 249, 284], "statement": [0, 6, 18, 19, 20, 31, 40, 41, 59, 67, 84, 89, 92, 123, 152, 208, 228, 237, 241, 246], "redistribut": [0, 204], "see": [0, 1, 3, 4, 7, 8, 10, 11, 12, 15, 16, 18, 19, 20, 21, 30, 34, 35, 36, 37, 39, 40, 41, 45, 47, 50, 51, 52, 55, 58, 60, 61, 64, 65, 66, 67, 71, 75, 76, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 92, 95, 96, 99, 100, 101, 107, 113, 117, 118, 129, 131, 135, 137, 138, 142, 145, 148, 149, 158, 162, 163, 167, 168, 169, 170, 172, 173, 176, 178, 183, 188, 191, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 210, 211, 214, 215, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 241, 242, 243, 244, 247, 248, 253, 255, 263, 274, 275, 277, 279, 280, 281, 283, 284, 285, 286], "file": [0, 1, 3, 4, 5, 6, 7, 11, 12, 41, 95, 123, 140, 162, 208, 215, 218, 220, 237, 239, 240, 241, 247, 250], "That": [0, 4, 7, 11, 12, 18, 19, 20, 59, 60, 65, 89, 95, 133, 170, 175, 181, 191, 192, 195, 196, 198, 199, 201, 203, 214, 215, 224, 228, 240, 241, 247, 274, 277, 280, 285], "said": [0, 4, 11, 33, 37, 41, 45, 99, 178, 189, 191, 192, 196, 224, 227, 228, 253, 260], "although": [0, 3, 4, 6, 7, 11, 12, 15, 16, 18, 20, 24, 51, 59, 60, 65, 71, 83, 84, 87, 89, 90, 92, 95, 99, 102, 113, 125, 140, 195, 198, 199, 201, 203, 204, 216, 217, 220, 221, 226, 240, 246, 247, 277, 280, 285], "requir": [0, 3, 6, 7, 8, 10, 11, 12, 20, 26, 29, 31, 41, 50, 59, 60, 62, 63, 67, 69, 70, 72, 73, 76, 78, 89, 95, 98, 99, 100, 101, 102, 107, 113, 114, 117, 118, 120, 122, 123, 125, 127, 134, 138, 147, 170, 182, 183, 185, 193, 194, 195, 198, 199, 201, 203, 205, 208, 211, 217, 218, 221, 224, 226, 227, 228, 232, 239, 240, 241, 242, 244, 246, 247, 256, 257, 258, 281, 283], "conveni": [0, 1, 10, 11, 12, 23, 25, 29, 32, 39, 41, 51, 59, 60, 64, 67, 86, 89, 101, 123, 140, 182, 185, 191, 192, 194, 195, 196, 197, 198, 199, 203, 206, 215, 216, 220, 226, 232, 233, 240, 242, 243, 247, 260, 275, 277], "pleas": [0, 4, 6, 7, 9, 10, 23, 24, 25, 26, 27, 28, 31, 37, 39, 59, 67, 71, 84, 99, 113, 118, 123, 133, 137, 138, 145, 146, 167, 182, 192, 193, 194, 195, 201, 202, 216, 220, 221, 226, 227, 247, 253, 258, 282, 286], "when": [0, 1, 3, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 25, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 50, 51, 52, 57, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 83, 86, 87, 89, 90, 91, 95, 99, 100, 101, 105, 107, 109, 110, 113, 117, 123, 125, 131, 133, 134, 135, 136, 137, 138, 141, 146, 147, 152, 157, 158, 162, 165, 167, 175, 176, 177, 182, 188, 191, 192, 194, 195, 196, 198, 199, 201, 203, 204, 205, 207, 208, 209, 210, 214, 215, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 232, 233, 237, 239, 240, 241, 242, 244, 246, 247, 249, 250, 252, 257, 275, 277, 279, 280, 285, 286], "your": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 20, 22, 23, 24, 26, 28, 29, 31, 35, 59, 60, 86, 87, 95, 100, 101, 109, 113, 117, 135, 137, 192, 194, 208, 215, 220, 224, 227, 228, 246, 247, 275, 279, 281, 282, 284, 285], "work": [0, 1, 3, 4, 6, 10, 11, 12, 15, 16, 18, 19, 20, 27, 31, 34, 36, 39, 40, 41, 50, 51, 52, 59, 60, 63, 67, 84, 86, 88, 89, 90, 92, 95, 96, 99, 101, 113, 117, 123, 125, 134, 138, 140, 153, 157, 162, 166, 167, 168, 169, 172, 175, 185, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 208, 215, 216, 217, 218, 220, 221, 224, 226, 227, 228, 234, 239, 240, 241, 243, 246, 247, 248, 249, 257, 258, 277, 278, 279, 280, 281, 284, 285], "also": [0, 1, 3, 4, 7, 8, 10, 11, 12, 14, 16, 18, 19, 20, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 48, 50, 51, 58, 60, 61, 63, 64, 65, 66, 67, 71, 75, 77, 79, 81, 82, 84, 86, 88, 89, 90, 93, 95, 96, 99, 100, 101, 102, 103, 105, 106, 107, 109, 113, 114, 115, 117, 118, 122, 123, 125, 126, 127, 128, 131, 134, 135, 136, 137, 138, 140, 141, 142, 146, 156, 157, 159, 163, 167, 172, 173, 176, 178, 182, 183, 185, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 237, 239, 240, 241, 242, 243, 244, 247, 249, 253, 256, 257, 258, 259, 260, 262, 263, 274, 275, 277, 279, 280, 281, 284, 285, 286], "consid": [0, 4, 7, 10, 11, 12, 15, 18, 19, 20, 25, 29, 37, 40, 41, 48, 51, 54, 58, 59, 60, 62, 63, 64, 65, 67, 69, 71, 75, 83, 84, 86, 87, 88, 89, 90, 92, 95, 99, 109, 113, 114, 120, 124, 135, 141, 163, 170, 173, 178, 184, 188, 189, 191, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 211, 215, 220, 221, 224, 225, 226, 227, 228, 239, 241, 246, 256, 258, 260, 262, 263, 277, 281, 285], "contribut": [0, 3, 4, 5, 6, 7, 31, 75, 99, 118, 128, 131, 198, 201, 203, 224, 263, 282], "all": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 26, 29, 30, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 84, 86, 88, 89, 90, 91, 92, 95, 98, 99, 100, 101, 102, 103, 105, 107, 109, 110, 114, 115, 117, 118, 120, 122, 123, 125, 126, 128, 133, 135, 137, 140, 141, 147, 152, 153, 157, 167, 169, 170, 171, 173, 175, 176, 177, 178, 180, 181, 188, 189, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 234, 235, 237, 239, 240, 241, 242, 244, 246, 247, 249, 253, 255, 257, 259, 260, 261, 262, 264, 274, 275, 277, 279, 280, 281, 284, 285, 286], "chang": [0, 1, 6, 7, 8, 11, 12, 18, 31, 40, 41, 42, 50, 51, 55, 58, 59, 60, 63, 64, 65, 67, 73, 74, 84, 86, 89, 95, 99, 101, 102, 105, 109, 117, 120, 123, 125, 130, 147, 158, 168, 178, 179, 182, 189, 191, 192, 193, 194, 195, 196, 197, 201, 204, 205, 208, 215, 216, 217, 218, 220, 224, 226, 227, 228, 229, 239, 246, 247, 258, 260, 274, 277, 280, 284], "back": [0, 20, 24, 25, 27, 40, 41, 55, 58, 59, 60, 65, 67, 74, 75, 81, 83, 84, 86, 87, 90, 99, 100, 109, 167, 188, 191, 198, 203, 204, 206, 208, 218, 224, 226, 229, 230], "we": [0, 3, 4, 5, 6, 7, 10, 12, 16, 18, 19, 20, 22, 23, 24, 26, 28, 29, 34, 35, 36, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 67, 72, 77, 82, 83, 84, 86, 87, 88, 89, 90, 95, 96, 98, 99, 109, 112, 113, 114, 115, 117, 118, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 145, 148, 156, 159, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 178, 182, 183, 185, 187, 189, 191, 192, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 215, 216, 218, 220, 221, 223, 224, 225, 226, 228, 232, 234, 239, 240, 241, 243, 244, 246, 247, 253, 257, 258, 259, 260, 262, 263, 274, 275, 277, 279, 280, 281, 284, 285, 286], "can": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 26, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 111, 113, 114, 115, 117, 118, 119, 120, 122, 123, 126, 127, 128, 131, 133, 134, 135, 136, 137, 138, 140, 141, 145, 146, 147, 152, 154, 157, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 182, 183, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 239, 240, 241, 243, 244, 246, 247, 249, 256, 257, 258, 259, 260, 262, 263, 274, 275, 277, 279, 280, 281, 283, 284, 285, 286], "incorpor": [0, 3, 16, 196, 220], "u": [0, 12, 16, 18, 19, 20, 25, 33, 39, 40, 41, 50, 55, 58, 59, 60, 62, 73, 76, 81, 84, 86, 92, 95, 99, 114, 117, 118, 119, 122, 123, 125, 127, 130, 133, 134, 135, 137, 138, 140, 141, 145, 146, 157, 162, 168, 178, 187, 189, 191, 193, 194, 195, 196, 197, 201, 203, 204, 207, 208, 215, 218, 220, 221, 224, 225, 226, 227, 228, 233, 247, 260, 277, 279, 280, 281], "benefit": [0, 3, 20, 23, 41, 113, 137, 188], "end": [0, 3, 6, 10, 12, 16, 18, 19, 20, 22, 26, 39, 40, 41, 49, 50, 55, 57, 58, 59, 60, 64, 65, 67, 69, 71, 75, 84, 87, 89, 90, 92, 95, 99, 101, 102, 103, 105, 122, 125, 127, 130, 135, 136, 137, 138, 178, 183, 188, 189, 192, 193, 197, 201, 208, 211, 214, 216, 217, 221, 224, 225, 226, 227, 228, 229, 239, 241, 242, 244, 246, 249, 260, 275, 279, 281, 285], "develop": [0, 4, 6, 7, 8, 9, 11, 16, 18, 20, 30, 31, 39, 42, 57, 101, 140, 177, 194, 195, 198, 201, 226, 227, 279, 282], "team": [0, 4], "member": [0, 6, 10, 18, 40, 48, 50, 60, 82, 105, 195, 216, 233], "list": [0, 3, 4, 6, 7, 13, 18, 24, 25, 26, 27, 28, 29, 31, 33, 36, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 84, 86, 87, 88, 89, 90, 92, 95, 98, 99, 100, 101, 102, 109, 114, 117, 118, 122, 125, 127, 130, 134, 135, 136, 140, 141, 146, 157, 159, 162, 163, 167, 168, 170, 171, 173, 175, 183, 187, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 232, 233, 234, 237, 239, 240, 241, 242, 243, 244, 246, 247, 249, 274, 278, 279, 281, 284, 285, 286], "github": [0, 1, 3, 4, 5, 7, 10, 23, 24, 25, 26, 27, 28, 31, 39, 59, 75, 86, 95, 177, 216, 227, 281], "found": [0, 1, 3, 4, 6, 7, 18, 19, 25, 39, 42, 50, 51, 53, 55, 57, 59, 60, 61, 69, 70, 75, 84, 86, 95, 99, 109, 115, 117, 118, 119, 137, 140, 177, 191, 195, 196, 198, 203, 204, 205, 208, 210, 211, 214, 215, 218, 221, 224, 225, 226, 227, 228, 232, 246, 247, 249, 250, 284], "zotero": 0, "start": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 20, 27, 30, 31, 40, 41, 43, 48, 49, 50, 51, 55, 58, 59, 60, 61, 67, 89, 90, 92, 95, 98, 99, 100, 102, 103, 105, 123, 125, 135, 136, 168, 169, 172, 176, 191, 192, 194, 198, 201, 203, 204, 208, 211, 214, 216, 217, 218, 221, 224, 226, 227, 228, 229, 232, 239, 240, 246, 248, 249, 259, 273, 274, 277, 279], "either": [1, 3, 6, 7, 10, 11, 12, 18, 19, 20, 24, 25, 26, 27, 28, 33, 37, 39, 40, 43, 51, 58, 59, 60, 63, 64, 65, 67, 74, 76, 82, 84, 86, 87, 89, 90, 95, 99, 109, 114, 117, 118, 119, 122, 123, 136, 138, 140, 157, 163, 170, 173, 175, 188, 192, 194, 196, 197, 198, 199, 201, 203, 204, 208, 210, 215, 216, 217, 218, 221, 224, 225, 226, 227, 228, 229, 232, 233, 240, 246, 247, 253, 262, 277, 280, 281], "machin": [1, 3, 5, 6, 209, 220, 224, 274], "imag": [1, 3, 50, 117, 129, 134, 140, 142, 146, 195, 199, 201, 208, 216, 227], "contain": [1, 3, 4, 6, 7, 10, 11, 12, 14, 19, 20, 23, 24, 25, 26, 28, 29, 32, 34, 35, 39, 40, 41, 42, 50, 51, 55, 57, 58, 61, 62, 63, 65, 67, 68, 70, 72, 73, 74, 75, 76, 85, 86, 88, 89, 90, 92, 95, 98, 99, 100, 101, 102, 104, 107, 108, 110, 114, 118, 119, 120, 122, 125, 127, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 160, 163, 165, 168, 170, 173, 182, 192, 193, 194, 195, 196, 197, 198, 199, 201, 204, 208, 209, 210, 215, 216, 218, 220, 221, 222, 224, 225, 226, 227, 228, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 253, 256, 264, 275, 277, 281, 285], "them": [1, 3, 4, 5, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 24, 25, 26, 29, 32, 35, 37, 40, 41, 48, 50, 51, 58, 59, 60, 61, 63, 64, 67, 70, 75, 77, 79, 81, 82, 84, 88, 89, 92, 95, 98, 99, 100, 113, 118, 120, 123, 125, 127, 128, 133, 135, 137, 138, 140, 146, 150, 166, 167, 173, 175, 178, 181, 183, 189, 191, 192, 195, 196, 198, 199, 201, 203, 204, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 224, 226, 227, 229, 230, 239, 241, 243, 246, 256, 274, 275, 277, 279, 280, 285], "If": [1, 3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 48, 50, 51, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 84, 86, 87, 88, 89, 90, 92, 95, 96, 98, 99, 100, 101, 102, 107, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 135, 136, 137, 138, 140, 141, 146, 150, 154, 157, 163, 167, 168, 169, 170, 171, 173, 181, 182, 183, 184, 185, 187, 188, 189, 192, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 246, 247, 249, 253, 256, 258, 260, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286], "instead": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 23, 25, 26, 28, 29, 32, 34, 36, 40, 41, 50, 52, 55, 59, 61, 62, 63, 64, 67, 86, 87, 89, 90, 92, 93, 95, 99, 107, 110, 112, 122, 123, 125, 127, 137, 140, 171, 175, 177, 183, 188, 189, 191, 192, 195, 198, 199, 201, 203, 204, 206, 208, 210, 218, 220, 224, 226, 227, 228, 232, 233, 234, 237, 242, 243, 244, 246, 247, 251, 260, 263, 274, 275, 277, 279, 280, 281, 285, 286], "follow": [1, 3, 4, 6, 7, 10, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 31, 34, 36, 39, 40, 41, 42, 48, 49, 50, 51, 52, 55, 58, 59, 60, 63, 64, 65, 67, 71, 73, 75, 82, 83, 84, 86, 89, 90, 92, 95, 99, 100, 102, 103, 105, 117, 118, 123, 125, 133, 134, 135, 136, 137, 138, 140, 142, 146, 165, 168, 170, 173, 176, 178, 183, 189, 191, 192, 193, 194, 195, 196, 201, 202, 203, 204, 206, 207, 208, 209, 210, 215, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 232, 233, 234, 239, 242, 243, 246, 247, 250, 257, 258, 260, 274, 275, 277, 278, 280, 281, 285, 286], "specif": [1, 5, 6, 7, 10, 11, 18, 20, 21, 24, 30, 50, 51, 59, 60, 61, 67, 71, 86, 88, 90, 95, 114, 117, 118, 122, 123, 133, 140, 142, 178, 192, 194, 195, 199, 201, 203, 204, 207, 208, 209, 214, 220, 221, 224, 225, 226, 228, 234, 239, 240, 241, 246, 281, 285], "instruct": [1, 3, 5, 6, 7, 9, 10, 12, 16, 21, 30, 41, 208, 226, 240, 241], "below": [1, 3, 4, 6, 7, 10, 12, 18, 20, 25, 28, 29, 31, 39, 40, 41, 49, 50, 51, 59, 60, 64, 66, 67, 68, 69, 75, 76, 82, 84, 86, 90, 95, 98, 99, 101, 102, 103, 109, 114, 117, 118, 122, 123, 125, 127, 128, 129, 134, 135, 136, 137, 140, 167, 173, 178, 183, 192, 193, 194, 195, 197, 204, 208, 209, 211, 217, 220, 221, 224, 225, 226, 227, 228, 239, 241, 246, 247, 249, 258, 260, 263, 264, 281, 285], "mai": [1, 3, 4, 5, 6, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 37, 39, 40, 41, 42, 50, 51, 52, 58, 59, 60, 61, 63, 64, 65, 67, 69, 71, 72, 74, 75, 76, 84, 86, 87, 89, 90, 91, 95, 96, 98, 99, 101, 105, 115, 118, 119, 123, 127, 133, 137, 159, 168, 173, 174, 175, 180, 183, 187, 189, 191, 194, 195, 196, 197, 201, 203, 207, 208, 209, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 237, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 260, 262, 274, 275, 277, 280, 281, 285, 286], "choos": [1, 6, 25, 50, 55, 59, 61, 64, 95, 99, 103, 107, 127, 138, 173, 177, 183, 191, 192, 204, 205, 208, 215, 217, 218, 224, 225, 228, 239, 244, 285], "cd": [1, 5, 6, 227, 246], "dockerfil": 1, "htmldoc": 1, "sympy_htmldoc": 1, "option": [1, 4, 5, 6, 7, 8, 12, 20, 23, 34, 36, 39, 41, 50, 57, 58, 59, 60, 61, 62, 63, 65, 68, 69, 72, 73, 75, 76, 78, 86, 87, 90, 92, 95, 96, 99, 100, 101, 102, 107, 109, 113, 114, 115, 117, 118, 119, 122, 140, 146, 157, 162, 163, 165, 168, 170, 175, 182, 183, 188, 194, 195, 196, 197, 198, 199, 203, 204, 205, 207, 208, 209, 210, 211, 213, 215, 216, 217, 220, 221, 224, 225, 226, 227, 228, 233, 234, 239, 240, 241, 244, 246, 247, 253, 278, 284, 285], "now": [1, 2, 3, 5, 7, 10, 12, 16, 18, 19, 20, 31, 40, 41, 51, 59, 60, 64, 67, 70, 75, 76, 81, 83, 84, 88, 95, 99, 109, 114, 117, 122, 123, 126, 128, 131, 133, 140, 141, 176, 178, 183, 188, 191, 192, 195, 196, 198, 201, 204, 205, 209, 216, 217, 218, 220, 221, 224, 226, 227, 228, 229, 234, 239, 240, 247, 258, 259, 277, 279, 280, 285, 286], "skip": [1, 3, 4, 6, 12, 40, 43, 59, 90, 95, 99, 183, 203, 207, 208, 210, 224, 226, 237, 239, 275, 283, 284], "down": [1, 4, 6, 18, 64, 92, 111, 125, 127, 191, 192, 194, 199, 210, 216, 218, 220, 224, 243, 281, 285], "section": [1, 4, 7, 8, 11, 18, 20, 21, 33, 40, 42, 50, 51, 58, 59, 60, 62, 66, 67, 69, 75, 84, 89, 90, 95, 102, 103, 117, 123, 138, 176, 178, 182, 189, 192, 195, 198, 201, 203, 208, 211, 215, 218, 224, 234, 243, 244, 246, 257, 258, 259, 260, 264, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286], "For": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 15, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 55, 58, 59, 60, 61, 62, 63, 64, 65, 67, 71, 73, 74, 77, 80, 82, 83, 84, 88, 89, 90, 95, 99, 100, 101, 102, 103, 109, 111, 115, 117, 118, 119, 123, 127, 133, 134, 135, 136, 137, 138, 140, 142, 156, 157, 162, 166, 168, 170, 171, 172, 173, 175, 178, 179, 183, 187, 188, 189, 191, 192, 194, 195, 196, 198, 199, 201, 203, 204, 205, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 220, 221, 223, 224, 226, 227, 228, 229, 232, 233, 234, 235, 239, 240, 241, 243, 244, 246, 247, 250, 251, 253, 255, 258, 260, 262, 263, 274, 275, 277, 280, 281, 285, 286], "apt": [1, 5], "get": [1, 2, 4, 6, 7, 8, 10, 15, 16, 18, 19, 20, 25, 27, 28, 31, 32, 35, 36, 39, 40, 41, 43, 48, 49, 51, 52, 54, 55, 58, 59, 60, 61, 63, 64, 65, 67, 72, 82, 84, 86, 88, 92, 95, 99, 101, 102, 107, 109, 112, 118, 123, 126, 127, 135, 136, 137, 140, 145, 146, 153, 157, 162, 167, 168, 169, 170, 175, 178, 192, 196, 198, 199, 201, 203, 204, 205, 206, 207, 208, 210, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 230, 234, 235, 240, 246, 247, 248, 250, 253, 257, 274, 277, 279, 280, 281, 284, 285, 286], "python3": [1, 3, 41, 101, 208], "sphinx": [1, 4, 7, 8, 65, 224, 239, 244], "texliv": [1, 3, 208], "recommend": [1, 5, 6, 10, 11, 12, 13, 18, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 40, 41, 59, 60, 63, 90, 113, 135, 140, 167, 183, 191, 196, 197, 198, 199, 205, 221, 224, 227, 233, 237, 244, 257, 258, 283, 286], "dvipng": 1, "librsvg2": 1, "bin": [1, 2, 3, 5, 6, 87, 208, 239, 246], "imagemagick": 1, "docbook2x": 1, "graphviz": [1, 7, 280, 284], "pip": [1, 3, 31, 101], "sudo": 1, "virtual": [1, 4, 8, 31, 59, 75, 192, 278], "environ": [1, 3, 8, 9, 10, 11, 59, 87, 188, 208, 228, 239, 249, 277, 279, 284], "venv": 1, "path": [1, 5, 6, 10, 50, 75, 81, 109, 131, 189, 191, 217, 220, 224, 227, 239, 240, 243, 244, 246, 249, 250, 251, 260], "my": [1, 208, 274], "Then": [1, 5, 11, 16, 18, 50, 55, 58, 59, 84, 88, 95, 99, 115, 118, 120, 130, 132, 133, 138, 142, 170, 178, 191, 195, 196, 198, 201, 203, 205, 208, 215, 218, 220, 221, 224, 226, 247], "activ": [1, 4, 5, 13, 125, 194, 237, 242, 244], "need": [1, 3, 4, 6, 7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 39, 40, 41, 44, 50, 51, 55, 57, 58, 59, 60, 61, 65, 67, 70, 74, 75, 82, 83, 84, 86, 87, 89, 90, 95, 99, 100, 101, 102, 103, 105, 109, 113, 118, 120, 122, 123, 125, 126, 127, 128, 130, 131, 132, 134, 135, 136, 137, 138, 141, 142, 153, 157, 165, 171, 176, 182, 183, 188, 191, 192, 195, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 215, 216, 218, 220, 221, 223, 224, 226, 227, 228, 232, 233, 234, 235, 237, 240, 241, 242, 243, 244, 246, 249, 253, 257, 259, 260, 263, 274, 275, 277, 280, 281, 283, 285], "rerun": [1, 204, 239], "each": [1, 3, 4, 10, 11, 12, 14, 18, 20, 23, 24, 25, 26, 30, 36, 37, 39, 40, 41, 42, 43, 50, 51, 55, 59, 60, 61, 62, 63, 64, 65, 67, 69, 74, 75, 76, 81, 82, 84, 86, 88, 89, 90, 92, 95, 99, 102, 105, 107, 109, 115, 117, 118, 123, 125, 127, 130, 132, 134, 135, 138, 157, 170, 173, 182, 183, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 206, 208, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 232, 233, 234, 237, 239, 241, 243, 246, 247, 249, 253, 255, 256, 258, 260, 262, 275, 278, 280, 285, 286], "time": [1, 3, 4, 7, 10, 11, 12, 16, 18, 19, 29, 32, 36, 37, 41, 50, 51, 55, 59, 60, 64, 67, 82, 84, 89, 90, 95, 96, 98, 99, 100, 101, 106, 107, 109, 113, 118, 119, 122, 123, 125, 127, 130, 131, 133, 135, 136, 137, 138, 140, 141, 147, 157, 162, 170, 171, 175, 176, 178, 179, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 201, 202, 203, 204, 205, 207, 208, 215, 216, 217, 218, 220, 224, 226, 228, 237, 239, 240, 245, 246, 247, 260, 262, 272, 275, 279, 280, 281], "new": [1, 3, 4, 5, 7, 11, 18, 20, 24, 30, 35, 36, 40, 41, 42, 50, 51, 58, 59, 60, 61, 67, 72, 75, 84, 86, 87, 90, 95, 99, 102, 105, 109, 114, 117, 123, 130, 132, 138, 139, 140, 142, 163, 169, 170, 173, 175, 178, 179, 181, 183, 187, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 208, 215, 218, 220, 221, 224, 226, 227, 228, 229, 239, 240, 244, 247, 253, 255, 257, 273, 274, 277, 280, 281, 283], "termin": [1, 50, 59, 65, 87, 99, 188, 208, 215, 239, 284], "after": [1, 4, 5, 6, 7, 10, 12, 31, 33, 35, 36, 40, 42, 47, 50, 51, 55, 57, 58, 59, 60, 61, 65, 74, 76, 81, 86, 90, 95, 99, 101, 102, 109, 134, 135, 137, 140, 142, 146, 158, 170, 178, 182, 189, 192, 197, 201, 203, 204, 205, 206, 208, 209, 214, 221, 224, 225, 226, 227, 229, 239, 242, 247, 249, 253, 256, 260, 274, 275, 277, 281, 285], "two": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 25, 28, 33, 39, 40, 41, 42, 44, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 82, 84, 86, 88, 89, 90, 92, 95, 99, 100, 102, 103, 105, 106, 109, 110, 113, 114, 117, 118, 126, 131, 133, 134, 135, 137, 138, 145, 146, 147, 152, 153, 157, 159, 162, 163, 168, 169, 170, 171, 172, 173, 175, 178, 182, 183, 184, 185, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 209, 210, 215, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 230, 233, 243, 246, 247, 253, 256, 258, 259, 260, 262, 274, 275, 278, 280, 281, 285], "method": [1, 3, 4, 6, 7, 11, 12, 17, 18, 23, 24, 25, 27, 28, 35, 36, 37, 39, 40, 41, 42, 43, 50, 51, 52, 58, 59, 60, 61, 62, 63, 65, 66, 67, 70, 71, 72, 73, 75, 78, 81, 83, 84, 86, 88, 90, 91, 92, 95, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 113, 116, 117, 122, 123, 126, 128, 129, 133, 134, 139, 140, 147, 150, 152, 154, 162, 163, 168, 170, 173, 175, 180, 181, 182, 183, 185, 189, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 209, 210, 211, 213, 214, 215, 216, 220, 221, 224, 226, 228, 229, 231, 233, 234, 235, 239, 241, 243, 246, 247, 253, 257, 260, 263, 264, 268, 270, 274, 275, 276, 277, 280, 285], "given": [1, 3, 4, 7, 10, 11, 12, 14, 16, 18, 20, 23, 26, 33, 35, 36, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 82, 83, 84, 86, 88, 89, 90, 92, 95, 98, 99, 101, 102, 105, 107, 110, 114, 115, 117, 118, 120, 122, 123, 127, 138, 146, 163, 168, 170, 178, 179, 181, 183, 184, 185, 187, 189, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 211, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 233, 234, 237, 239, 241, 243, 246, 247, 249, 250, 251, 253, 256, 258, 260, 262, 274, 280, 283, 285, 286], "abov": [1, 3, 4, 6, 7, 10, 12, 14, 16, 19, 20, 23, 27, 29, 39, 40, 41, 42, 43, 49, 50, 51, 55, 58, 59, 63, 64, 67, 69, 72, 75, 76, 84, 86, 89, 90, 95, 99, 100, 101, 103, 109, 113, 117, 118, 120, 122, 123, 125, 126, 127, 128, 133, 134, 136, 137, 138, 141, 168, 170, 173, 183, 189, 191, 192, 194, 195, 196, 198, 199, 201, 203, 204, 205, 207, 208, 209, 215, 218, 220, 221, 224, 226, 227, 228, 232, 233, 240, 241, 247, 257, 258, 259, 260, 263, 277, 279, 280, 281, 285], "run": [1, 4, 6, 7, 8, 11, 12, 16, 18, 20, 42, 50, 51, 53, 59, 60, 84, 95, 100, 101, 118, 125, 140, 173, 188, 194, 195, 208, 218, 220, 224, 225, 226, 236, 240, 242, 243, 246, 247, 272, 277, 284], "txt": [1, 208], "mpmath": [1, 3, 5, 11, 20, 26, 27, 41, 64, 67, 95, 100, 140, 198, 199, 208, 216, 226, 242, 247], "error": [1, 3, 4, 6, 7, 10, 14, 18, 19, 23, 24, 25, 26, 27, 29, 32, 39, 41, 48, 51, 58, 59, 60, 65, 69, 74, 84, 86, 95, 98, 99, 101, 123, 192, 193, 196, 198, 199, 201, 205, 208, 210, 216, 224, 225, 226, 227, 228, 239, 240, 241, 244, 246, 249, 253, 274], "packag": [1, 3, 22, 26, 27, 31, 87, 100, 101, 106, 133, 140, 188, 208, 239, 250, 259, 260, 279], "matplotlib": [1, 3, 6, 7, 10, 31, 82, 87, 107, 140, 153, 188, 194, 284], "mayb": [1, 19, 23], "other": [1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 19, 21, 23, 24, 25, 26, 28, 29, 33, 37, 40, 41, 42, 50, 51, 52, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 79, 84, 86, 89, 90, 92, 95, 99, 100, 101, 102, 103, 109, 113, 114, 117, 118, 123, 124, 127, 128, 133, 134, 137, 138, 140, 142, 145, 146, 147, 157, 168, 170, 171, 172, 173, 176, 178, 179, 180, 182, 183, 185, 187, 191, 192, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 208, 209, 210, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 237, 240, 241, 242, 243, 246, 247, 253, 256, 257, 260, 262, 264, 271, 274, 275, 277, 279, 280, 281, 285], "rpm": 1, "base": [1, 3, 4, 5, 6, 7, 9, 11, 12, 18, 20, 31, 35, 36, 39, 41, 42, 48, 49, 50, 55, 56, 57, 59, 60, 62, 64, 65, 66, 67, 70, 72, 75, 82, 86, 87, 88, 89, 91, 92, 99, 100, 106, 114, 117, 123, 125, 140, 141, 142, 151, 153, 157, 158, 162, 168, 169, 171, 173, 175, 178, 179, 181, 183, 185, 188, 189, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 208, 210, 215, 216, 217, 218, 220, 221, 224, 226, 228, 232, 233, 234, 239, 240, 241, 242, 243, 244, 246, 247, 248, 253, 256, 257, 260, 280, 285], "distribut": [1, 3, 31, 50, 57, 59, 67, 75, 86, 102, 103, 172, 196, 199, 204, 208, 234], "prerequisit": 1, "dnf": [1, 89], "scheme": [1, 4, 18, 51, 58, 63, 193, 194, 201, 204, 233], "medium": [1, 20, 142, 143, 146, 147, 157, 201, 270], "tool": [1, 7, 11, 20, 50, 87, 94, 95, 100, 109, 140, 192, 195, 200, 201, 208, 240, 246, 252, 261, 268], "first": [1, 3, 5, 6, 7, 8, 11, 12, 16, 18, 19, 20, 25, 28, 31, 40, 41, 42, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 72, 73, 75, 76, 83, 84, 86, 88, 89, 90, 95, 98, 99, 102, 103, 109, 110, 115, 117, 118, 122, 123, 125, 126, 127, 128, 133, 134, 137, 138, 141, 145, 146, 150, 154, 157, 162, 163, 166, 167, 168, 169, 170, 172, 173, 176, 178, 183, 187, 191, 192, 194, 195, 197, 199, 201, 202, 203, 204, 205, 208, 209, 210, 211, 214, 215, 217, 218, 220, 221, 224, 225, 226, 227, 228, 232, 234, 237, 239, 240, 241, 242, 246, 247, 249, 258, 263, 274, 275, 277, 279, 280, 281, 283, 285, 286], "homebrew": 1, "brew": 1, "sh": 1, "docbook": 1, "librsvg": 1, "conda": [1, 3, 5, 31, 101], "Or": [1, 7, 10, 12, 19, 23, 25, 50, 59, 60, 61, 67, 84, 89, 99, 120, 195, 205, 207, 208, 220, 227, 228, 239, 247, 260, 280, 283], "forg": [1, 3, 101], "make": [1, 3, 4, 6, 7, 8, 10, 11, 12, 14, 16, 18, 19, 20, 26, 27, 28, 32, 35, 36, 37, 39, 41, 42, 49, 50, 58, 59, 60, 61, 62, 63, 64, 65, 67, 71, 75, 86, 87, 89, 95, 98, 99, 100, 101, 102, 103, 105, 118, 122, 123, 125, 126, 130, 131, 135, 137, 138, 140, 153, 170, 175, 188, 191, 194, 197, 198, 199, 201, 203, 204, 205, 207, 208, 211, 216, 217, 218, 220, 224, 225, 226, 227, 232, 234, 237, 239, 240, 241, 242, 244, 246, 247, 257, 262, 263, 277, 278, 279, 280, 281, 285], "success": [1, 7, 40, 50, 59, 67, 84, 86, 99, 117, 125, 183, 195, 201, 203, 216, 217, 224, 227, 228, 246, 253, 255], "tricki": [1, 59, 84], "becaus": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 24, 25, 26, 27, 28, 29, 31, 32, 37, 41, 51, 58, 59, 60, 65, 71, 75, 76, 84, 86, 89, 93, 95, 99, 101, 117, 123, 127, 153, 161, 173, 175, 178, 191, 194, 195, 197, 198, 199, 201, 203, 204, 205, 207, 208, 211, 215, 218, 220, 221, 224, 225, 226, 227, 237, 239, 240, 242, 246, 247, 249, 257, 275, 277, 279, 280, 281, 284, 285, 286], "some": [1, 3, 4, 6, 11, 12, 16, 18, 19, 20, 24, 25, 26, 27, 28, 29, 31, 32, 37, 40, 41, 42, 47, 50, 51, 57, 58, 59, 60, 63, 64, 65, 67, 69, 70, 71, 75, 84, 86, 88, 89, 90, 92, 95, 99, 100, 101, 107, 110, 113, 114, 117, 120, 122, 123, 124, 125, 126, 127, 128, 134, 135, 137, 138, 141, 153, 158, 162, 170, 173, 178, 179, 182, 184, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 208, 210, 214, 215, 216, 217, 218, 220, 221, 224, 225, 226, 228, 234, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 253, 255, 256, 258, 260, 264, 274, 275, 277, 279, 280, 281, 283, 284, 285], "avail": [1, 3, 5, 7, 10, 11, 12, 18, 27, 29, 30, 31, 40, 41, 50, 51, 58, 59, 64, 67, 86, 95, 100, 101, 123, 137, 140, 198, 199, 201, 204, 208, 209, 214, 216, 218, 220, 221, 226, 227, 228, 229, 233, 234, 239, 246, 247, 252, 253, 277, 284], "subsystem": [1, 208], "linux": [1, 31], "possibl": [1, 6, 10, 11, 14, 18, 19, 20, 24, 28, 31, 39, 41, 42, 43, 48, 50, 51, 53, 54, 55, 59, 60, 64, 65, 67, 69, 71, 73, 74, 76, 81, 83, 84, 86, 88, 89, 90, 92, 95, 99, 110, 111, 113, 125, 136, 138, 167, 169, 173, 175, 178, 187, 189, 193, 194, 195, 196, 198, 199, 201, 203, 204, 205, 207, 208, 209, 210, 214, 215, 216, 217, 220, 221, 224, 225, 226, 227, 228, 229, 234, 239, 241, 242, 243, 244, 246, 247, 257, 258, 260, 276, 277, 280, 285], "workaround": [1, 247], "solut": [1, 10, 11, 12, 14, 16, 19, 20, 22, 23, 41, 55, 59, 60, 65, 67, 69, 77, 81, 82, 83, 86, 95, 99, 102, 106, 113, 118, 123, 127, 133, 137, 142, 178, 182, 195, 201, 202, 203, 204, 205, 206, 207, 216, 221, 223, 224, 225, 226, 286], "shell": [1, 12, 87, 140, 207], "tutori": [1, 7, 11, 12, 16, 17, 31, 75, 123, 140, 196, 207, 208, 224, 247, 277, 280, 282, 283, 284, 285, 286], "com": [1, 3, 4, 5, 6, 7, 10, 20, 31, 33, 37, 39, 50, 52, 53, 59, 60, 62, 63, 64, 65, 67, 69, 75, 76, 84, 86, 90, 95, 99, 107, 193, 202, 211, 213, 216, 217, 220, 221, 224, 227, 228, 246, 249, 281], "microsoftdoc": 1, "wsl": 1, "blob": [1, 86], "win10": 1, "md": [1, 4, 7, 237, 244], "In": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 25, 29, 31, 37, 39, 40, 41, 42, 43, 48, 49, 50, 51, 58, 59, 60, 61, 63, 64, 65, 67, 72, 74, 75, 76, 77, 84, 86, 87, 88, 89, 90, 92, 95, 96, 99, 101, 103, 105, 109, 113, 117, 118, 123, 126, 127, 128, 133, 134, 135, 136, 137, 138, 140, 141, 159, 161, 162, 163, 168, 172, 173, 176, 178, 187, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 215, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 232, 234, 237, 239, 241, 243, 244, 246, 247, 250, 253, 257, 258, 260, 262, 274, 277, 278, 279, 280, 281, 284, 285, 286], "command": [1, 3, 5, 6, 11, 12, 24, 31, 41, 63, 87, 123, 135, 140, 188, 194, 208, 239, 240, 284], "prompt": [1, 6, 11], "transfer": [1, 106, 107, 109, 142, 227], "html": [1, 3, 4, 6, 7, 37, 41, 43, 51, 52, 53, 59, 60, 62, 64, 65, 67, 69, 75, 76, 86, 87, 95, 99, 107, 202, 208, 211, 213, 216, 217, 221, 224, 228, 240, 242, 244, 246, 247, 281], "note": [1, 3, 6, 7, 10, 11, 12, 14, 16, 18, 19, 22, 23, 24, 26, 27, 28, 33, 34, 36, 37, 38, 39, 40, 41, 42, 49, 50, 51, 52, 55, 57, 58, 60, 63, 64, 65, 66, 67, 69, 70, 72, 73, 74, 75, 76, 84, 86, 87, 89, 90, 92, 95, 99, 101, 109, 110, 114, 115, 117, 118, 119, 122, 123, 125, 127, 130, 138, 140, 146, 149, 157, 167, 168, 170, 172, 173, 174, 176, 182, 183, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 209, 210, 211, 214, 216, 218, 220, 221, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 258, 260, 262, 274, 275, 276, 278, 279, 280, 281, 285], "via": [1, 3, 11, 16, 20, 26, 29, 31, 34, 35, 36, 50, 51, 59, 64, 67, 84, 86, 89, 95, 99, 100, 101, 102, 183, 193, 195, 199, 201, 203, 204, 207, 208, 227, 237, 240, 241, 253, 262, 280], "want": [1, 3, 4, 5, 6, 10, 11, 12, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 29, 31, 37, 39, 41, 42, 43, 51, 59, 60, 66, 71, 73, 75, 78, 84, 86, 90, 92, 95, 96, 99, 100, 107, 109, 112, 119, 123, 140, 156, 166, 167, 170, 173, 176, 178, 185, 187, 191, 192, 194, 196, 197, 198, 201, 203, 204, 205, 207, 208, 209, 215, 216, 218, 220, 221, 224, 225, 226, 227, 228, 234, 237, 239, 241, 243, 246, 247, 258, 260, 263, 274, 275, 277, 279, 280, 281, 282, 284, 285], "directori": [1, 3, 6, 7, 31, 36, 41, 224, 239, 240, 249], "folder": 1, "prepend": [1, 40, 50, 95, 109, 180, 208, 234], "mnt": 1, "navig": 1, "better": [1, 3, 4, 6, 10, 11, 12, 18, 19, 20, 40, 41, 51, 59, 63, 67, 86, 89, 109, 123, 153, 177, 181, 194, 197, 198, 199, 211, 215, 216, 217, 218, 224, 225, 226, 227, 228, 240, 246, 247, 279, 285], "compat": [1, 3, 4, 15, 41, 59, 67, 87, 90, 95, 100, 113, 175, 180, 188, 194, 197, 199, 203, 204, 208, 228, 232, 235, 239, 241, 247], "than": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 17, 18, 19, 20, 23, 25, 26, 27, 28, 29, 32, 37, 41, 42, 44, 50, 51, 52, 58, 59, 60, 63, 64, 65, 67, 68, 73, 74, 75, 77, 81, 84, 86, 88, 89, 90, 92, 95, 96, 98, 99, 100, 101, 105, 107, 109, 113, 118, 122, 123, 127, 130, 147, 153, 167, 170, 171, 173, 182, 192, 193, 196, 197, 198, 199, 201, 204, 205, 206, 208, 211, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 235, 240, 241, 243, 246, 247, 249, 250, 274, 275, 277, 278, 279, 280, 281, 283, 285], "cygwin": 1, "msys2": 1, "more": [1, 3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 31, 32, 36, 37, 39, 40, 41, 42, 45, 49, 50, 51, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 81, 84, 86, 89, 90, 92, 93, 95, 96, 98, 99, 100, 101, 107, 109, 113, 117, 118, 119, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 140, 142, 145, 157, 161, 162, 167, 170, 171, 172, 173, 178, 182, 183, 187, 188, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 217, 218, 220, 221, 224, 225, 226, 227, 228, 239, 241, 242, 243, 246, 247, 249, 253, 257, 261, 268, 274, 275, 277, 278, 280, 281, 283, 284, 285, 286], "partial": [1, 11, 39, 50, 57, 58, 59, 61, 63, 64, 65, 99, 101, 140, 167, 183, 187, 189, 199, 202, 205, 208, 210, 217, 220, 224, 225, 229, 235, 253, 260, 275, 285], "workflow": [1, 3, 5, 8, 9, 27, 30, 140, 198, 241, 247, 282], "onli": [1, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 45, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 72, 73, 75, 76, 77, 82, 84, 86, 87, 88, 89, 90, 95, 96, 99, 100, 101, 105, 107, 109, 115, 117, 123, 125, 126, 127, 129, 130, 132, 134, 135, 137, 138, 141, 146, 148, 167, 168, 172, 173, 175, 177, 178, 182, 183, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 220, 221, 224, 225, 226, 228, 229, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 253, 256, 258, 260, 262, 263, 274, 275, 277, 278, 280, 281, 285, 286], "viabl": [1, 60], "64": [1, 44, 50, 99, 139, 193, 207, 217, 226, 228, 239, 246, 249, 284], "bit": [1, 16, 20, 40, 41, 43, 59, 60, 62, 89, 90, 95, 99, 167, 178, 195, 204, 218, 221, 227, 239, 246, 257, 258, 284], "chocolatei": 1, "choco": 1, "rsvg": 1, "convert": [1, 3, 4, 10, 11, 12, 14, 18, 19, 20, 24, 26, 27, 33, 37, 41, 43, 51, 55, 59, 60, 63, 64, 65, 73, 74, 76, 79, 80, 83, 87, 89, 90, 95, 98, 99, 101, 109, 167, 170, 176, 177, 178, 180, 187, 194, 195, 197, 199, 201, 203, 204, 205, 206, 208, 209, 210, 216, 217, 218, 220, 221, 224, 225, 227, 228, 229, 230, 233, 239, 240, 246, 247, 249, 251, 256, 271, 276, 277, 280, 285], "chose": [1, 60], "rm": [1, 41], "absolut": [1, 10, 37, 38, 41, 58, 59, 65, 67, 74, 84, 86, 90, 95, 111, 171, 199, 203, 204, 218, 220, 223, 228, 239, 262, 263, 264], "Be": [1, 4, 6, 20, 39, 59, 89, 95, 201, 224, 227, 235, 247], "sure": [1, 4, 6, 7, 20, 41, 50, 59, 71, 122, 123, 153, 178, 204, 205, 215, 224, 226, 227, 240, 246, 277, 280, 285], "substitut": [1, 10, 11, 12, 16, 19, 24, 29, 41, 59, 60, 65, 67, 84, 86, 95, 100, 101, 109, 118, 119, 123, 125, 127, 137, 162, 171, 173, 176, 183, 185, 187, 205, 206, 209, 210, 215, 218, 220, 221, 224, 225, 226, 227, 247, 256, 276, 277], "actual": [1, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 40, 41, 42, 48, 50, 57, 59, 60, 67, 71, 84, 86, 88, 92, 95, 99, 109, 113, 123, 125, 135, 136, 137, 188, 195, 198, 203, 208, 216, 218, 220, 221, 224, 227, 235, 239, 240, 243, 244, 246, 247, 279], "filesystem": 1, "from": [1, 3, 4, 5, 6, 7, 11, 14, 15, 16, 18, 19, 20, 23, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 251, 253, 255, 256, 257, 258, 259, 260, 262, 263, 271, 274, 275, 277, 279, 280, 281, 284, 285, 286], "ani": [1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 18, 19, 20, 23, 24, 25, 31, 34, 36, 37, 38, 39, 40, 41, 42, 48, 49, 50, 51, 57, 58, 59, 60, 61, 63, 64, 65, 67, 69, 70, 71, 74, 75, 76, 84, 86, 87, 89, 90, 93, 95, 96, 99, 101, 102, 103, 105, 109, 111, 114, 117, 118, 119, 120, 122, 123, 133, 136, 137, 138, 141, 142, 146, 159, 162, 167, 168, 171, 173, 175, 178, 182, 183, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 208, 209, 214, 215, 216, 217, 218, 220, 221, 224, 225, 226, 228, 230, 233, 234, 239, 240, 242, 243, 244, 246, 247, 253, 257, 258, 259, 260, 262, 263, 274, 275, 277, 280, 281, 284, 285, 286], "makefil": 1, "subdirectori": 1, "ha": [1, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 37, 39, 40, 41, 42, 43, 48, 49, 50, 51, 53, 55, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 71, 72, 74, 75, 76, 82, 84, 86, 88, 89, 90, 92, 95, 96, 98, 99, 100, 102, 103, 105, 109, 110, 114, 117, 118, 123, 125, 127, 133, 138, 140, 146, 147, 157, 158, 167, 170, 175, 178, 182, 183, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 213, 215, 216, 218, 220, 221, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 239, 240, 241, 242, 243, 244, 246, 249, 253, 255, 257, 258, 260, 262, 263, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286], "collect": [1, 3, 7, 17, 40, 41, 50, 59, 76, 86, 99, 102, 109, 122, 131, 140, 173, 180, 193, 199, 204, 217, 218, 220, 224, 228, 239, 246], "offici": [1, 12, 31, 59, 113, 140, 182, 192, 227, 247, 283], "which": [1, 2, 3, 4, 6, 7, 10, 11, 12, 16, 17, 18, 19, 20, 22, 24, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 48, 49, 50, 51, 52, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 72, 73, 74, 75, 78, 81, 82, 83, 84, 86, 87, 88, 89, 90, 92, 93, 95, 98, 99, 101, 102, 103, 105, 106, 107, 109, 110, 111, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 128, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 144, 146, 147, 159, 162, 168, 169, 170, 171, 173, 177, 178, 179, 182, 183, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 209, 210, 211, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 232, 234, 239, 240, 241, 242, 243, 244, 246, 247, 249, 253, 255, 258, 262, 263, 274, 275, 277, 278, 279, 280, 281, 282, 284, 285, 286], "gener": [1, 4, 8, 10, 11, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 31, 35, 37, 38, 39, 40, 42, 43, 44, 47, 48, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 73, 75, 77, 82, 84, 86, 87, 88, 89, 92, 95, 99, 100, 101, 109, 113, 114, 117, 118, 119, 122, 123, 125, 126, 127, 128, 130, 132, 133, 134, 136, 137, 138, 140, 141, 145, 156, 157, 158, 159, 162, 167, 168, 171, 172, 173, 178, 180, 182, 183, 184, 187, 188, 189, 191, 193, 194, 195, 196, 197, 199, 201, 204, 205, 206, 207, 208, 209, 210, 214, 217, 218, 220, 221, 223, 224, 225, 226, 228, 233, 234, 240, 241, 243, 244, 245, 246, 247, 253, 257, 258, 260, 261, 262, 268, 275, 277, 278, 279, 280, 281, 285, 286], "svg": [1, 87, 188], "store": [1, 5, 10, 12, 18, 40, 41, 49, 50, 59, 81, 83, 92, 95, 99, 101, 114, 118, 120, 122, 123, 138, 167, 173, 187, 191, 192, 194, 195, 198, 203, 204, 205, 215, 218, 229, 232, 233, 241, 242, 243, 246, 258, 260, 280], "_build": [1, 6], "same": [1, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 23, 25, 33, 34, 35, 36, 37, 39, 40, 41, 48, 49, 50, 51, 55, 58, 59, 60, 61, 64, 66, 67, 69, 72, 73, 74, 75, 76, 81, 82, 84, 86, 88, 89, 90, 92, 95, 99, 101, 102, 103, 109, 110, 113, 114, 117, 121, 123, 127, 130, 131, 134, 137, 138, 157, 159, 167, 170, 171, 173, 175, 176, 178, 180, 181, 182, 183, 185, 188, 189, 191, 192, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 215, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 233, 234, 235, 237, 239, 241, 242, 243, 244, 246, 247, 249, 253, 255, 257, 258, 262, 275, 277, 280, 281, 284, 285], "inform": [1, 3, 4, 6, 7, 11, 12, 15, 18, 19, 29, 30, 36, 37, 40, 41, 42, 45, 50, 51, 57, 59, 60, 64, 67, 71, 84, 86, 88, 92, 95, 100, 103, 114, 115, 117, 118, 122, 123, 125, 133, 134, 135, 137, 138, 140, 141, 168, 173, 178, 182, 183, 188, 192, 194, 198, 203, 204, 208, 209, 215, 218, 220, 221, 226, 227, 228, 232, 233, 234, 239, 240, 241, 242, 243, 253, 258, 260, 285], "onc": [1, 4, 11, 12, 18, 19, 20, 41, 43, 50, 55, 59, 60, 64, 67, 75, 84, 86, 100, 103, 115, 117, 133, 137, 178, 183, 185, 192, 194, 196, 198, 204, 208, 209, 217, 218, 220, 224, 227, 234, 246, 257, 274, 275, 285, 286], "under": [1, 3, 4, 6, 11, 12, 18, 19, 35, 36, 38, 39, 41, 42, 49, 50, 55, 57, 67, 77, 84, 86, 88, 89, 95, 99, 101, 102, 103, 142, 168, 193, 195, 196, 203, 204, 208, 215, 216, 218, 221, 224, 226, 227, 228, 234, 237, 279, 285], "prefer": [1, 3, 6, 10, 11, 18, 20, 26, 27, 41, 51, 58, 59, 67, 99, 101, 117, 123, 173, 178, 183, 194, 197, 199, 201, 203, 208, 216, 220, 224, 226, 233, 239, 241, 244, 247, 279, 281], "web": [1, 7, 60, 71, 140, 190, 202, 221], "browser": 1, "drop": [1, 65, 86, 100, 130, 199, 201], "menu": 1, "index": [1, 3, 10, 12, 20, 28, 29, 33, 41, 48, 50, 51, 55, 58, 59, 60, 61, 64, 65, 67, 70, 75, 84, 86, 89, 90, 92, 95, 98, 99, 109, 122, 123, 140, 141, 142, 144, 146, 147, 157, 166, 168, 170, 173, 178, 183, 194, 195, 199, 203, 204, 205, 208, 213, 214, 218, 226, 228, 229, 231, 232, 234, 235, 240, 268], "told": 1, "how": [1, 3, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 40, 41, 50, 51, 58, 59, 65, 66, 67, 71, 82, 86, 89, 90, 92, 95, 99, 101, 102, 113, 117, 118, 123, 124, 130, 135, 136, 138, 140, 144, 145, 161, 165, 168, 169, 170, 175, 176, 183, 191, 194, 195, 198, 199, 201, 203, 207, 208, 211, 215, 216, 218, 220, 221, 224, 225, 226, 228, 234, 239, 240, 241, 242, 244, 246, 247, 258, 275, 277, 279, 280, 281, 282, 284, 285], "load": [1, 41, 59, 87, 102, 103, 105, 114, 117, 118, 122, 126, 128, 141, 153, 188], "ll": [1, 40, 57, 95, 127, 191, 192, 237], "manual": [1, 3, 4, 7, 10, 11, 20, 24, 41, 42, 50, 63, 69, 86, 87, 101, 109, 122, 123, 126, 137, 141, 194, 201, 208, 224, 226, 227, 242, 275, 285], "repeat": [1, 11, 12, 50, 53, 58, 59, 65, 67, 86, 88, 90, 95, 99, 101, 157, 159, 173, 194, 195, 196, 201, 203, 204, 208, 214, 224, 228, 232, 233, 240, 242, 246, 285], "step": [1, 4, 5, 20, 21, 30, 39, 41, 50, 54, 55, 58, 59, 60, 67, 83, 84, 86, 95, 99, 100, 118, 130, 133, 135, 140, 141, 175, 187, 192, 193, 194, 198, 199, 201, 204, 208, 209, 210, 213, 216, 217, 218, 220, 221, 224, 226, 228, 233, 240, 246, 247, 275], "reload": 1, "There": [1, 3, 4, 5, 6, 7, 10, 11, 12, 15, 18, 19, 20, 24, 25, 28, 41, 42, 50, 51, 52, 53, 56, 58, 59, 60, 63, 64, 67, 83, 84, 86, 87, 88, 89, 92, 95, 99, 102, 103, 105, 109, 113, 122, 133, 135, 137, 146, 163, 168, 182, 183, 188, 191, 192, 194, 198, 199, 200, 201, 203, 204, 205, 208, 209, 210, 216, 217, 218, 220, 221, 224, 226, 227, 228, 233, 242, 243, 246, 247, 249, 258, 274, 275, 277, 279, 280, 284, 285], "altern": [1, 4, 6, 10, 11, 12, 19, 20, 25, 31, 41, 47, 50, 51, 58, 59, 63, 64, 65, 66, 67, 90, 92, 96, 100, 123, 135, 137, 183, 191, 193, 194, 196, 197, 198, 203, 204, 208, 213, 215, 217, 226, 227, 229, 246, 277, 279, 281], "approach": [1, 16, 24, 25, 26, 28, 29, 40, 58, 59, 86, 109, 127, 133, 198, 201, 202, 205, 216, 225, 226, 228, 240, 243, 246, 275, 281], "set": [1, 2, 3, 4, 6, 7, 11, 12, 14, 16, 17, 18, 19, 23, 24, 29, 32, 35, 39, 40, 41, 42, 47, 48, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 72, 74, 76, 77, 78, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 101, 102, 103, 109, 113, 117, 118, 122, 123, 125, 126, 127, 132, 134, 135, 136, 137, 140, 141, 157, 163, 168, 173, 175, 178, 180, 181, 182, 183, 185, 187, 188, 189, 191, 194, 195, 196, 197, 198, 201, 203, 204, 207, 208, 209, 210, 215, 217, 218, 220, 221, 223, 224, 225, 226, 228, 232, 233, 234, 237, 239, 240, 241, 242, 246, 247, 253, 256, 258, 264, 267, 274, 276, 285], "up": [1, 3, 4, 10, 11, 16, 18, 19, 20, 31, 36, 39, 41, 50, 51, 53, 59, 60, 61, 63, 64, 65, 67, 68, 75, 76, 80, 84, 86, 87, 89, 90, 95, 99, 100, 102, 111, 113, 120, 122, 125, 126, 130, 132, 137, 138, 140, 141, 153, 168, 170, 187, 193, 194, 195, 198, 199, 203, 205, 208, 209, 210, 215, 217, 218, 220, 221, 224, 225, 226, 227, 240, 241, 242, 243, 244, 247, 276, 277, 280, 281, 283], "monitor": 1, "automat": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 24, 25, 29, 40, 41, 42, 51, 59, 61, 62, 63, 64, 65, 67, 72, 74, 78, 84, 87, 89, 99, 101, 102, 118, 123, 125, 131, 159, 161, 162, 171, 173, 187, 191, 194, 195, 198, 199, 203, 204, 205, 208, 211, 214, 215, 217, 218, 220, 221, 224, 226, 227, 233, 234, 239, 240, 241, 244, 258, 263, 275, 277, 279, 280, 284, 285, 286], "detect": [1, 3, 32, 39, 92, 95, 99, 194, 198, 208, 224, 225, 227, 229, 246, 284], "procedur": [1, 24, 26, 42, 44, 50, 56, 57, 58, 86, 95, 118, 138, 201, 203, 220, 221, 226, 227, 253, 281], "again": [1, 4, 12, 16, 19, 51, 59, 74, 99, 123, 125, 138, 168, 169, 183, 191, 195, 196, 203, 211, 218, 224, 237, 257, 277, 285], "whether": [1, 4, 10, 11, 18, 19, 20, 26, 28, 29, 39, 40, 41, 45, 50, 58, 59, 60, 66, 67, 71, 74, 86, 87, 89, 90, 95, 99, 105, 113, 118, 119, 122, 123, 161, 180, 185, 192, 194, 197, 198, 199, 203, 204, 208, 211, 215, 216, 220, 221, 224, 226, 227, 228, 229, 239, 241, 246, 247, 253, 256, 277, 281], "8000": [1, 102], "80": [1, 4, 6, 12, 20, 39, 50, 59, 62, 86, 95, 99, 102, 103, 107, 204, 207, 224, 228, 244, 246], "localhost": 1, "differ": [1, 4, 6, 7, 10, 11, 12, 14, 15, 17, 19, 20, 23, 24, 25, 26, 27, 28, 32, 40, 41, 42, 48, 49, 50, 51, 55, 58, 59, 60, 61, 63, 64, 65, 67, 70, 72, 74, 75, 79, 81, 83, 84, 86, 87, 88, 89, 92, 95, 99, 100, 101, 102, 107, 113, 114, 120, 123, 125, 129, 137, 138, 141, 145, 146, 158, 159, 167, 168, 171, 173, 175, 178, 182, 183, 184, 187, 188, 189, 192, 194, 195, 196, 197, 199, 201, 203, 204, 205, 207, 208, 209, 210, 211, 213, 215, 216, 217, 220, 221, 224, 225, 226, 227, 228, 229, 232, 234, 237, 239, 240, 241, 242, 243, 244, 246, 247, 253, 256, 260, 262, 276, 277, 279, 280, 281, 284, 285], "port": [1, 101, 125, 145], "finish": [1, 41, 42, 167, 242, 282], "stop": [1, 4, 41, 42, 51, 59, 95, 99, 194, 214, 216, 224, 228], "ctrl": 1, "detach": 1, "mode": [1, 2, 59, 87, 101, 145, 168, 188, 204, 208, 239, 250], "d": [1, 6, 7, 10, 11, 12, 16, 20, 22, 24, 26, 33, 40, 43, 48, 50, 51, 52, 54, 55, 57, 58, 59, 60, 61, 64, 67, 69, 73, 77, 82, 84, 86, 88, 89, 90, 91, 92, 95, 96, 98, 99, 101, 102, 105, 117, 118, 140, 142, 145, 146, 152, 162, 170, 172, 173, 178, 182, 183, 185, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 208, 210, 214, 218, 220, 221, 224, 225, 226, 227, 228, 229, 230, 232, 234, 246, 249, 253, 255, 256, 257, 258, 262, 270, 281, 286], "name": [1, 3, 4, 5, 6, 7, 10, 11, 12, 18, 20, 28, 32, 35, 36, 40, 41, 42, 46, 49, 52, 55, 58, 59, 60, 61, 64, 65, 66, 67, 69, 72, 84, 86, 87, 88, 92, 95, 99, 101, 102, 105, 114, 117, 120, 122, 123, 125, 140, 144, 153, 168, 175, 177, 178, 179, 180, 181, 182, 183, 185, 187, 189, 192, 194, 195, 196, 198, 199, 201, 203, 205, 208, 214, 218, 220, 221, 224, 225, 227, 228, 233, 234, 237, 239, 240, 241, 242, 247, 249, 250, 251, 253, 257, 260, 265, 274, 277, 280, 281, 285], "livehtml": 1, "simpli": [1, 3, 4, 7, 18, 19, 23, 24, 37, 42, 58, 59, 61, 65, 69, 90, 92, 95, 99, 101, 102, 105, 110, 114, 123, 125, 137, 163, 168, 178, 189, 192, 198, 204, 205, 216, 217, 218, 224, 227, 244, 246, 247, 260], "should": [1, 3, 5, 6, 7, 8, 10, 11, 12, 15, 18, 19, 20, 29, 32, 34, 36, 39, 40, 41, 42, 50, 51, 52, 53, 55, 58, 59, 60, 62, 63, 65, 67, 69, 70, 71, 72, 73, 74, 76, 81, 82, 83, 84, 86, 87, 88, 89, 90, 92, 95, 99, 101, 102, 107, 109, 113, 118, 123, 125, 127, 135, 137, 138, 140, 141, 142, 153, 157, 161, 163, 165, 167, 168, 171, 173, 175, 176, 178, 179, 183, 188, 191, 192, 194, 195, 196, 197, 198, 199, 201, 203, 204, 207, 208, 210, 211, 214, 215, 216, 217, 218, 220, 221, 223, 224, 226, 227, 228, 232, 233, 237, 239, 240, 241, 242, 243, 244, 246, 247, 249, 253, 257, 274, 275, 277, 278, 281], "tab": [1, 10, 12, 55, 140], "show": [1, 3, 4, 6, 7, 12, 15, 16, 17, 18, 19, 20, 41, 51, 58, 59, 63, 65, 82, 84, 86, 95, 99, 102, 103, 107, 113, 123, 129, 134, 138, 140, 168, 172, 176, 178, 183, 191, 192, 194, 195, 198, 199, 201, 203, 204, 208, 209, 211, 215, 216, 217, 218, 220, 221, 224, 226, 228, 229, 237, 240, 241, 244, 246, 247, 277, 279, 281, 284], "necessari": [1, 3, 4, 6, 8, 10, 12, 18, 20, 30, 39, 40, 50, 51, 59, 69, 84, 86, 89, 95, 99, 118, 125, 133, 194, 196, 198, 203, 204, 208, 211, 217, 220, 224, 225, 226, 227, 228, 229, 234, 239, 241, 246, 247, 253, 278, 283], "major": [1, 3, 4, 7, 10, 29, 69, 113, 233, 279, 285], "contributor": [1, 3, 7, 10, 20], "action": [1, 3, 7, 50, 88, 165, 168, 178, 204, 220, 227], "pull": [1, 3, 4, 5, 6, 7, 9, 10, 20, 31, 41, 59, 64, 67, 172, 209, 220, 224, 227, 281, 285], "request": [1, 3, 4, 6, 7, 9, 10, 18, 31, 39, 59, 63, 75, 84, 99, 123, 173, 201, 204, 232, 240], "releas": [1, 7, 10, 59, 86, 90, 101, 137, 194, 233, 244, 247, 280], "includ": [1, 3, 4, 6, 7, 9, 10, 11, 12, 18, 20, 24, 25, 28, 31, 36, 37, 39, 40, 41, 51, 55, 58, 59, 60, 61, 63, 64, 65, 67, 71, 77, 84, 86, 89, 90, 92, 94, 95, 99, 100, 101, 111, 113, 122, 123, 125, 127, 128, 133, 135, 137, 140, 153, 157, 162, 167, 170, 171, 181, 189, 192, 196, 199, 200, 201, 203, 204, 207, 208, 209, 214, 215, 216, 218, 220, 223, 224, 225, 226, 228, 231, 234, 237, 239, 241, 242, 243, 244, 246, 253, 255, 257, 262, 264, 275, 279, 280, 281, 285, 286], "fail": [1, 3, 4, 6, 7, 10, 18, 19, 20, 41, 50, 51, 55, 58, 59, 63, 65, 83, 84, 86, 87, 95, 96, 99, 101, 125, 163, 168, 188, 194, 197, 198, 199, 201, 203, 204, 208, 215, 218, 224, 226, 228, 237, 239, 246, 247, 281], "99": [1, 41, 59, 60, 95, 99, 201, 202], "due": [1, 6, 10, 16, 20, 27, 39, 41, 49, 50, 59, 61, 76, 95, 99, 102, 105, 123, 125, 137, 146, 173, 189, 192, 198, 204, 208, 211, 221, 223, 225, 228, 244, 256, 262, 285], "bad": [1, 10, 58, 99, 175, 208], "math": [1, 3, 6, 20, 29, 33, 37, 40, 42, 50, 59, 64, 67, 69, 86, 95, 99, 100, 123, 133, 189, 194, 199, 202, 207, 208, 224, 225, 228, 240, 241, 247, 258, 259, 260, 261, 262, 274, 275, 279], "format": [1, 4, 8, 11, 14, 16, 25, 28, 40, 51, 60, 81, 82, 86, 89, 95, 98, 99, 102, 122, 141, 146, 157, 167, 194, 197, 198, 203, 204, 206, 208, 218, 224, 227, 239, 249, 253, 257, 278, 281, 284], "doubl": [1, 6, 7, 39, 41, 55, 59, 60, 64, 95, 101, 117, 132, 133, 191, 198, 208, 217, 218, 241, 285], "check": [1, 3, 4, 6, 7, 11, 12, 14, 15, 16, 18, 19, 20, 24, 29, 35, 36, 39, 40, 41, 45, 48, 50, 51, 52, 57, 58, 59, 60, 64, 67, 71, 82, 84, 88, 89, 90, 92, 95, 96, 99, 109, 114, 115, 123, 137, 140, 153, 161, 173, 175, 176, 181, 189, 194, 195, 197, 198, 199, 201, 203, 204, 210, 216, 218, 220, 224, 225, 226, 227, 228, 232, 233, 237, 239, 241, 244, 246, 256, 260, 277, 285], "ad": [1, 6, 7, 10, 18, 23, 25, 33, 40, 41, 43, 49, 50, 59, 60, 70, 74, 81, 84, 88, 99, 101, 105, 113, 114, 117, 123, 124, 140, 147, 175, 178, 184, 193, 194, 203, 205, 207, 208, 210, 218, 221, 224, 227, 228, 230, 233, 234, 239, 256, 277], "correctli": [1, 3, 4, 6, 7, 10, 19, 20, 39, 63, 84, 87, 95, 123, 125, 137, 208, 215, 221, 224], "backtick": [1, 6, 7], "code": [1, 6, 8, 9, 11, 12, 16, 18, 19, 20, 24, 27, 28, 29, 31, 32, 42, 46, 50, 53, 54, 59, 60, 61, 63, 67, 71, 84, 86, 87, 95, 99, 100, 101, 114, 117, 123, 125, 131, 133, 134, 138, 140, 141, 167, 173, 182, 188, 191, 193, 194, 195, 196, 198, 201, 207, 218, 220, 224, 226, 227, 228, 233, 236, 237, 239, 240, 241, 244, 245, 246, 247, 257, 265, 272, 277, 279, 282, 284], "singl": [1, 4, 7, 10, 11, 16, 18, 20, 22, 32, 40, 41, 43, 50, 59, 60, 64, 65, 67, 72, 73, 75, 76, 77, 84, 86, 89, 90, 95, 98, 101, 109, 110, 115, 117, 127, 134, 153, 157, 159, 167, 170, 173, 180, 183, 187, 194, 195, 197, 198, 199, 201, 203, 204, 208, 209, 210, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 233, 239, 241, 243, 246, 247, 249, 275, 277, 280, 281, 286], "render": [1, 3, 6, 7, 41, 59, 87, 188, 194, 208, 284], "resourc": [1, 6, 7, 20, 95, 202, 224, 240, 250], "style": [1, 8, 40, 59, 87, 167, 188, 194, 208, 227, 284], "guid": [1, 3, 8, 9, 11, 13, 20, 22, 26, 31, 40, 59, 66, 123, 137, 208, 221, 223, 226, 227, 234, 278, 282, 283, 286], "tip": [1, 6, 59, 137, 224, 225, 285], "few": [1, 3, 4, 10, 11, 18, 24, 29, 37, 49, 51, 59, 60, 86, 87, 99, 100, 125, 133, 176, 182, 188, 191, 192, 195, 203, 208, 216, 217, 218, 224, 227, 228, 241, 246, 285], "extra": [1, 10, 41, 59, 60, 99, 100, 131, 178, 189, 201, 208, 218, 224, 239, 240, 241, 260], "xelatex": 1, "latexmk": 1, "chrome": 1, "chromium": 1, "On": [1, 10, 18, 36, 52, 59, 61, 67, 86, 89, 99, 123, 178, 189, 198, 201, 202, 203, 204, 224, 226, 243, 247, 260, 262], "xetex": 1, "font": [1, 87, 188, 208], "lmodern": 1, "cask": 1, "tap": 1, "dejavu": 1, "strawberryperl": 1, "miktex": [1, 3], "dejavufont": 1, "appdata": 1, "microsoft": 1, "right": [1, 4, 6, 7, 10, 12, 16, 20, 22, 23, 26, 39, 41, 42, 50, 51, 55, 59, 60, 62, 64, 65, 67, 75, 76, 84, 86, 89, 90, 95, 98, 99, 101, 102, 103, 109, 118, 122, 123, 137, 138, 140, 141, 145, 152, 157, 159, 161, 162, 167, 170, 173, 183, 189, 192, 193, 194, 195, 197, 203, 204, 205, 206, 208, 210, 211, 215, 216, 218, 224, 225, 227, 228, 239, 241, 243, 246, 260, 275, 279, 281, 285], "click": 1, "result": [1, 3, 6, 10, 11, 12, 14, 15, 16, 18, 19, 20, 29, 33, 34, 35, 36, 37, 39, 40, 41, 49, 50, 51, 55, 58, 59, 60, 61, 63, 65, 67, 71, 76, 77, 81, 83, 84, 86, 88, 89, 90, 92, 95, 98, 99, 100, 101, 102, 109, 110, 113, 114, 115, 119, 123, 127, 133, 137, 140, 158, 165, 167, 168, 170, 172, 173, 175, 176, 178, 182, 183, 192, 194, 195, 198, 199, 201, 202, 203, 204, 205, 206, 208, 210, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 235, 239, 240, 241, 243, 244, 246, 247, 249, 253, 256, 258, 277, 279, 280, 281, 285], "version": [1, 3, 4, 5, 6, 7, 12, 18, 19, 20, 29, 30, 31, 34, 40, 41, 50, 51, 57, 59, 60, 64, 65, 67, 72, 86, 89, 90, 91, 93, 95, 97, 99, 112, 114, 117, 123, 157, 171, 175, 183, 193, 194, 195, 198, 199, 201, 203, 204, 208, 211, 220, 226, 228, 238, 239, 241, 242, 243, 244, 246, 247, 251, 253, 259, 277, 280, 281], "where": [1, 4, 5, 6, 7, 10, 11, 12, 16, 18, 19, 20, 24, 25, 26, 29, 32, 33, 37, 39, 40, 41, 42, 48, 49, 50, 51, 53, 55, 57, 58, 59, 60, 61, 63, 64, 65, 67, 69, 72, 74, 75, 76, 77, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 95, 99, 102, 105, 106, 109, 113, 117, 118, 119, 120, 122, 123, 125, 136, 137, 138, 140, 141, 147, 157, 162, 168, 170, 172, 173, 174, 175, 176, 183, 187, 189, 191, 192, 193, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 218, 220, 221, 224, 225, 226, 228, 229, 232, 234, 239, 240, 241, 242, 246, 247, 249, 253, 260, 262, 275, 277, 279, 281, 285, 286], "g": [1, 3, 4, 5, 7, 10, 12, 18, 19, 20, 27, 29, 39, 40, 41, 42, 44, 47, 49, 50, 51, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 71, 75, 76, 77, 82, 85, 86, 88, 89, 90, 95, 99, 101, 102, 109, 110, 114, 117, 120, 122, 123, 125, 127, 128, 130, 131, 132, 137, 138, 140, 141, 153, 157, 162, 168, 170, 171, 173, 176, 178, 179, 183, 189, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 220, 221, 224, 225, 226, 227, 228, 229, 232, 233, 234, 239, 240, 241, 242, 244, 246, 247, 248, 249, 262, 265, 275, 280, 284, 285, 286], "1": [1, 3, 4, 7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 138, 140, 141, 142, 144, 145, 146, 147, 148, 152, 155, 156, 157, 158, 159, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 249, 251, 253, 256, 257, 258, 260, 263, 270, 274, 275, 277, 279, 280, 281, 284, 285, 286], "dev": [1, 3, 4, 5, 244], "sympi": [2, 3, 4, 7, 8, 9, 11, 13, 14, 18, 19, 20, 21, 22, 24, 26, 27, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 258, 259, 261, 262, 263, 264, 268, 270, 271, 273, 275, 277, 278, 280, 281, 282, 283, 284, 285, 286], "sympy_debug": [2, 86, 249], "variabl": [2, 3, 6, 7, 10, 11, 14, 16, 19, 20, 22, 24, 25, 27, 28, 32, 33, 34, 36, 37, 39, 41, 42, 54, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 76, 78, 84, 86, 87, 89, 90, 95, 101, 102, 103, 105, 107, 109, 122, 123, 130, 132, 140, 141, 147, 162, 167, 171, 173, 176, 182, 183, 185, 189, 196, 198, 199, 201, 203, 204, 205, 208, 209, 214, 215, 220, 221, 223, 224, 225, 226, 227, 235, 239, 241, 242, 243, 247, 253, 256, 257, 259, 260, 262, 275, 277, 279, 281, 286], "instanc": [2, 4, 6, 7, 10, 11, 15, 18, 19, 20, 34, 35, 36, 38, 40, 41, 50, 52, 54, 59, 61, 63, 64, 65, 67, 72, 75, 76, 77, 82, 83, 86, 87, 90, 92, 95, 99, 101, 102, 110, 114, 118, 122, 123, 141, 146, 153, 157, 163, 167, 168, 170, 172, 173, 183, 185, 188, 189, 194, 198, 199, 203, 204, 205, 206, 208, 216, 218, 220, 224, 226, 227, 228, 232, 233, 234, 239, 240, 241, 243, 246, 247, 253, 255, 256, 257, 258, 260, 262, 274, 275, 280, 285, 286], "unix": [2, 239, 240], "would": [2, 4, 5, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 25, 27, 31, 40, 41, 42, 48, 50, 51, 58, 59, 60, 64, 65, 71, 75, 84, 86, 90, 95, 99, 101, 102, 109, 110, 111, 113, 115, 117, 123, 127, 137, 140, 168, 170, 173, 178, 182, 183, 189, 191, 194, 197, 198, 199, 201, 204, 205, 207, 208, 209, 211, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 232, 233, 239, 241, 243, 246, 247, 249, 250, 258, 259, 260, 262, 274, 275, 277, 279, 280, 281, 284, 285, 286], "do": [2, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 21, 24, 25, 26, 27, 28, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 51, 55, 58, 59, 60, 61, 62, 65, 67, 69, 71, 74, 75, 78, 84, 86, 87, 89, 90, 92, 93, 95, 96, 99, 100, 106, 109, 113, 117, 118, 120, 122, 123, 124, 126, 127, 131, 134, 135, 140, 145, 148, 153, 157, 162, 165, 167, 169, 175, 177, 178, 181, 182, 184, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 209, 211, 215, 216, 217, 218, 220, 221, 224, 225, 226, 230, 233, 234, 237, 239, 240, 242, 244, 246, 247, 249, 256, 258, 259, 260, 262, 274, 275, 277, 278, 279, 280, 281, 283, 285], "true": [2, 3, 6, 10, 11, 12, 14, 15, 18, 19, 20, 23, 24, 25, 26, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 80, 81, 84, 86, 87, 89, 90, 91, 92, 95, 96, 99, 101, 102, 103, 107, 109, 110, 111, 112, 113, 115, 117, 118, 119, 123, 125, 127, 140, 144, 145, 154, 157, 158, 165, 167, 168, 171, 172, 173, 176, 182, 183, 184, 185, 188, 189, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 237, 239, 240, 241, 242, 244, 246, 247, 249, 253, 256, 257, 258, 259, 260, 263, 274, 275, 277, 279, 280, 281, 284, 285, 286], "isympi": [2, 3, 11, 12, 87], "window": [2, 249], "just": [2, 4, 6, 7, 10, 11, 12, 18, 19, 20, 23, 25, 31, 37, 40, 41, 50, 57, 59, 60, 61, 65, 82, 84, 86, 87, 88, 89, 95, 99, 100, 111, 113, 114, 120, 123, 127, 131, 137, 138, 140, 153, 158, 163, 173, 178, 182, 188, 189, 191, 195, 197, 198, 199, 201, 203, 207, 208, 215, 216, 217, 218, 220, 224, 227, 237, 239, 241, 242, 244, 259, 260, 262, 274, 275, 277, 278, 279, 280, 281, 285, 286], "limit": [2, 4, 10, 12, 25, 26, 29, 31, 37, 39, 41, 58, 59, 61, 63, 64, 65, 67, 68, 71, 79, 81, 86, 87, 89, 95, 99, 107, 138, 162, 168, 171, 188, 194, 199, 201, 204, 205, 208, 211, 212, 214, 216, 220, 221, 223, 224, 225, 226, 228, 233, 240, 243, 246, 247, 249, 252, 253, 263, 265, 271, 276, 277, 279, 281], "function": [2, 3, 4, 7, 8, 11, 14, 15, 16, 18, 19, 21, 22, 24, 25, 26, 28, 30, 34, 35, 36, 38, 39, 40, 42, 50, 51, 54, 55, 57, 60, 61, 62, 63, 64, 68, 69, 70, 71, 76, 79, 80, 83, 85, 86, 87, 88, 90, 92, 94, 98, 100, 102, 104, 106, 107, 109, 110, 111, 115, 117, 120, 121, 122, 123, 126, 127, 128, 129, 133, 135, 136, 140, 145, 146, 147, 148, 152, 157, 158, 159, 162, 167, 168, 169, 170, 171, 172, 173, 176, 182, 183, 186, 187, 188, 190, 192, 193, 195, 200, 201, 202, 203, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 222, 223, 226, 227, 228, 230, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 258, 259, 261, 262, 263, 264, 265, 268, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 283, 286], "nice": [2, 4, 6, 31, 59, 71, 95, 99, 123, 137, 140, 194, 208, 218, 249, 280], "print": [2, 4, 6, 7, 11, 12, 16, 18, 19, 24, 25, 27, 31, 34, 35, 36, 37, 39, 40, 42, 43, 48, 50, 51, 58, 59, 60, 63, 64, 65, 67, 86, 88, 89, 92, 95, 96, 99, 100, 101, 102, 103, 109, 116, 118, 123, 125, 133, 139, 145, 153, 166, 167, 171, 173, 183, 186, 190, 192, 194, 197, 198, 199, 203, 204, 214, 215, 217, 218, 220, 224, 226, 233, 235, 239, 241, 246, 247, 249, 251, 253, 257, 264, 270, 272, 275, 276, 277, 278, 279, 280, 281, 285], "tree": [2, 10, 11, 15, 50, 53, 59, 101, 115, 123, 165, 168, 183, 204, 215, 217, 220, 227, 230, 232, 243, 246, 249, 276], "veri": [2, 3, 4, 6, 10, 11, 12, 14, 15, 18, 20, 41, 55, 59, 60, 63, 64, 69, 71, 77, 81, 84, 86, 89, 95, 99, 109, 113, 123, 127, 140, 145, 178, 191, 192, 195, 198, 201, 203, 204, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 224, 226, 227, 228, 239, 240, 241, 247, 274, 277, 280, 285], "sever": [3, 4, 5, 6, 10, 11, 15, 18, 20, 25, 31, 41, 44, 50, 51, 58, 59, 63, 64, 66, 67, 71, 84, 86, 99, 115, 134, 178, 180, 194, 196, 198, 201, 203, 207, 208, 209, 215, 216, 224, 228, 239, 241, 251, 264, 277, 281, 284], "instal": [3, 5, 7, 11, 12, 63, 100, 198, 199, 208, 240, 247, 278, 284], "enabl": [3, 7, 11, 20, 31, 59, 86, 87, 99, 103, 123, 125, 173, 183, 188, 208, 224, 228, 239, 244, 247, 281, 284, 285], "certain": [3, 7, 11, 20, 29, 31, 38, 40, 41, 50, 57, 59, 63, 67, 75, 84, 86, 99, 101, 137, 183, 184, 195, 198, 201, 203, 208, 209, 215, 218, 220, 221, 224, 226, 227, 228, 230, 241, 242, 247, 253, 256, 262, 285], "most": [3, 4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 23, 25, 26, 27, 28, 29, 31, 34, 35, 36, 39, 40, 41, 42, 50, 51, 58, 59, 60, 63, 65, 69, 71, 86, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 109, 113, 117, 118, 123, 131, 134, 137, 138, 141, 175, 182, 183, 187, 193, 194, 195, 196, 198, 199, 201, 203, 204, 205, 206, 207, 208, 215, 216, 218, 221, 224, 225, 226, 227, 228, 237, 240, 241, 242, 243, 244, 246, 247, 249, 256, 258, 274, 277, 279, 280, 281, 283, 284, 285], "mention": [3, 4, 6, 20, 50, 84, 86, 109, 125, 141, 142, 189, 218, 221, 224, 228, 257, 258, 259, 260, 281], "except": [3, 4, 6, 10, 11, 12, 16, 18, 19, 20, 26, 29, 39, 41, 50, 51, 59, 60, 63, 64, 65, 67, 84, 86, 99, 131, 179, 193, 195, 198, 199, 203, 204, 205, 206, 208, 217, 220, 221, 224, 225, 227, 232, 237, 239, 241, 242, 245, 246, 247, 257, 260, 272, 274, 277, 280, 281], "unless": [3, 6, 11, 18, 20, 34, 36, 39, 41, 50, 58, 59, 60, 64, 67, 74, 75, 84, 95, 98, 146, 191, 192, 196, 198, 203, 204, 208, 213, 216, 217, 224, 226, 239, 243, 246, 247, 249, 253, 262, 275, 281, 285], "thei": [3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 26, 28, 29, 31, 37, 40, 41, 42, 47, 49, 50, 51, 57, 58, 59, 60, 61, 64, 65, 67, 69, 72, 73, 74, 75, 76, 81, 84, 86, 87, 89, 90, 92, 93, 95, 98, 99, 101, 113, 117, 118, 120, 122, 123, 125, 131, 133, 135, 136, 137, 140, 141, 147, 152, 157, 162, 165, 170, 175, 176, 178, 179, 183, 187, 188, 189, 192, 193, 194, 195, 196, 198, 199, 201, 203, 204, 205, 206, 208, 209, 214, 215, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 230, 234, 237, 239, 241, 243, 246, 247, 249, 253, 260, 262, 275, 277, 278, 279, 280, 281, 285], "intend": [3, 4, 6, 10, 14, 18, 59, 60, 70, 79, 84, 99, 101, 115, 168, 198, 199, 203, 206, 221, 224, 225, 237, 242, 274], "part": [3, 4, 6, 7, 10, 11, 18, 19, 20, 33, 38, 50, 51, 58, 59, 60, 64, 65, 67, 75, 82, 84, 86, 89, 90, 92, 99, 109, 113, 114, 117, 118, 122, 123, 125, 131, 133, 134, 138, 140, 157, 169, 173, 182, 192, 196, 198, 199, 201, 203, 204, 205, 207, 208, 209, 216, 218, 220, 221, 224, 226, 239, 241, 243, 246, 275, 280, 285], "those": [3, 6, 10, 11, 12, 14, 18, 19, 25, 28, 29, 32, 37, 40, 41, 42, 50, 51, 57, 58, 59, 60, 63, 72, 73, 84, 86, 89, 95, 98, 99, 113, 117, 118, 125, 131, 134, 146, 170, 182, 185, 188, 191, 192, 194, 198, 199, 201, 203, 204, 206, 207, 208, 214, 216, 220, 224, 225, 226, 227, 228, 234, 237, 239, 243, 246, 253, 256, 277, 279, 285], "everi": [3, 4, 6, 11, 18, 20, 25, 30, 35, 36, 37, 40, 45, 47, 50, 51, 59, 60, 74, 88, 90, 95, 99, 109, 138, 189, 191, 192, 194, 195, 196, 198, 199, 201, 203, 208, 213, 216, 218, 220, 221, 224, 227, 228, 230, 257, 260, 262, 278, 280, 281, 285], "doe": [3, 6, 7, 8, 10, 11, 15, 18, 19, 20, 28, 29, 30, 31, 32, 35, 36, 39, 40, 41, 42, 50, 51, 55, 57, 58, 59, 60, 61, 63, 65, 67, 69, 70, 72, 73, 75, 84, 86, 89, 90, 95, 98, 99, 101, 111, 113, 115, 123, 125, 130, 134, 153, 157, 163, 167, 169, 172, 182, 191, 192, 194, 196, 197, 198, 199, 201, 203, 204, 205, 208, 215, 216, 217, 218, 220, 221, 223, 224, 226, 233, 234, 237, 239, 241, 243, 246, 247, 249, 253, 255, 258, 274, 275, 277, 280, 281, 284, 285, 286], "themselv": [3, 7, 10, 20, 37, 40, 51, 55, 57, 59, 86, 99, 133, 134, 177, 198, 199, 203, 214, 228, 234, 243, 246, 249, 285], "incomplet": [3, 6, 7, 59, 64, 67, 196, 198, 204, 208, 210, 226, 227], "main": [3, 5, 6, 7, 10, 12, 27, 36, 37, 41, 59, 65, 84, 90, 95, 98, 123, 131, 171, 177, 188, 192, 194, 195, 199, 208, 215, 224, 227, 233, 240, 285, 286], "webpag": [3, 7], "complet": [3, 4, 6, 10, 11, 12, 18, 25, 36, 41, 59, 60, 61, 63, 65, 66, 67, 75, 84, 86, 95, 99, 113, 118, 119, 127, 133, 140, 159, 162, 163, 192, 201, 204, 205, 209, 215, 220, 221, 224, 227, 228, 239, 241, 249, 279, 280, 285], "io": [3, 7, 87, 208, 247], "one": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 30, 32, 33, 36, 37, 39, 40, 41, 43, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 65, 67, 69, 70, 71, 72, 73, 75, 76, 81, 82, 83, 84, 86, 87, 88, 89, 90, 92, 94, 95, 98, 99, 100, 101, 102, 103, 106, 107, 109, 110, 113, 114, 117, 118, 123, 124, 127, 137, 138, 140, 142, 145, 146, 147, 153, 158, 167, 171, 173, 175, 176, 178, 181, 182, 183, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 215, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 232, 234, 235, 239, 240, 241, 243, 246, 247, 249, 253, 258, 260, 262, 273, 274, 275, 277, 279, 280, 281, 283, 284, 285], "arbitrari": [3, 6, 10, 11, 12, 18, 20, 25, 27, 28, 29, 39, 44, 51, 52, 58, 59, 60, 63, 64, 67, 70, 71, 73, 89, 90, 95, 103, 134, 138, 159, 162, 192, 194, 195, 198, 199, 201, 203, 205, 220, 224, 225, 226, 234, 244, 247, 253, 255, 274, 275, 280, 285, 286], "precis": [3, 4, 6, 11, 12, 18, 19, 20, 25, 41, 50, 59, 62, 63, 64, 67, 75, 86, 95, 99, 107, 138, 193, 195, 198, 199, 203, 204, 205, 208, 215, 220, 221, 226, 227, 240, 241, 249, 274, 285], "arithmet": [3, 41, 59, 60, 63, 90, 95, 99, 162, 169, 193, 194, 195, 197, 198, 199, 201, 202, 206, 209], "hood": [3, 11], "whenev": [3, 4, 10, 11, 12, 20, 57, 84, 86, 95, 180, 194, 195, 196, 210, 215, 218, 228, 275, 277, 280], "calcul": [3, 12, 16, 18, 27, 33, 39, 42, 51, 57, 59, 60, 61, 62, 63, 65, 67, 69, 71, 72, 73, 75, 76, 86, 90, 92, 95, 99, 102, 103, 111, 113, 114, 117, 118, 122, 125, 126, 127, 142, 145, 146, 149, 152, 168, 169, 170, 171, 173, 174, 182, 183, 184, 185, 187, 189, 191, 192, 193, 194, 195, 198, 199, 201, 203, 204, 205, 210, 215, 224, 228, 232, 240, 241, 247, 253, 256, 260, 262, 281, 284], "float": [3, 11, 18, 20, 23, 41, 50, 59, 65, 67, 74, 76, 86, 87, 90, 95, 99, 101, 107, 109, 140, 146, 188, 194, 198, 199, 208, 220, 226, 228, 239, 247, 249, 274, 277], "point": [3, 4, 6, 7, 11, 12, 16, 18, 25, 27, 31, 33, 39, 41, 42, 50, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 78, 81, 82, 83, 84, 86, 95, 99, 102, 103, 105, 107, 114, 117, 118, 119, 120, 122, 123, 125, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 153, 175, 178, 184, 187, 189, 192, 194, 195, 198, 199, 201, 203, 204, 208, 210, 214, 215, 216, 224, 226, 227, 228, 240, 243, 246, 247, 249, 253, 256, 258, 259, 260, 262, 263, 271, 274, 275, 277, 280], "valu": [3, 4, 6, 7, 10, 11, 12, 16, 18, 20, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 55, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 84, 86, 87, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 109, 111, 114, 117, 118, 119, 120, 122, 123, 125, 137, 140, 142, 146, 149, 152, 157, 159, 162, 165, 167, 168, 169, 170, 173, 174, 176, 177, 178, 183, 184, 187, 189, 191, 192, 193, 194, 196, 197, 198, 199, 201, 203, 204, 205, 206, 208, 209, 214, 215, 216, 217, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 239, 241, 242, 246, 247, 249, 256, 258, 260, 263, 275, 277, 280], "evalf": [3, 6, 11, 12, 18, 27, 29, 41, 58, 63, 64, 65, 67, 78, 81, 82, 90, 95, 101, 123, 125, 140, 155, 199, 204, 208, 215, 216, 220, 228, 240, 247, 276], "cannot": [3, 4, 6, 7, 10, 11, 12, 15, 19, 20, 24, 26, 27, 31, 34, 35, 36, 37, 38, 39, 41, 51, 56, 58, 59, 61, 63, 65, 69, 71, 72, 74, 76, 81, 86, 88, 91, 93, 95, 97, 99, 109, 168, 176, 178, 191, 192, 194, 199, 201, 203, 204, 205, 208, 215, 216, 220, 221, 223, 224, 226, 227, 228, 229, 237, 239, 240, 241, 246, 250, 253, 255, 279, 280, 281, 285, 286], "without": [3, 4, 6, 7, 10, 11, 12, 18, 20, 31, 35, 37, 38, 41, 58, 59, 60, 61, 63, 67, 84, 86, 87, 90, 92, 95, 109, 110, 117, 123, 129, 131, 136, 137, 173, 178, 182, 183, 184, 191, 194, 197, 198, 201, 204, 208, 210, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 230, 233, 234, 237, 239, 240, 241, 244, 246, 247, 249, 256, 259, 281, 285], "import": [3, 4, 8, 11, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 180, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 263, 274, 275, 277, 279, 280, 281, 283, 284, 285, 286], "importerror": 3, "extern": [3, 31, 87, 101, 105, 107, 125, 133, 188, 198, 199, 209, 216, 220, 228, 239, 240], "doc": [3, 4, 6, 7, 8, 12, 30, 41, 50, 58, 59, 75, 87, 138, 175, 198, 200, 221, 224, 239, 240, 242, 244, 246, 253, 258, 271], "latest": [3, 5, 31, 40, 242, 244, 247], "mean": [3, 4, 6, 7, 10, 11, 12, 18, 19, 20, 28, 37, 42, 51, 58, 59, 60, 61, 77, 84, 86, 87, 89, 90, 93, 95, 99, 102, 113, 134, 173, 175, 178, 183, 188, 191, 194, 195, 196, 198, 201, 203, 207, 208, 218, 220, 221, 224, 226, 227, 228, 229, 230, 232, 233, 239, 246, 258, 274, 275, 277, 279, 280, 281, 285, 286], "did": [3, 7, 19, 59, 86, 99, 113, 130, 178, 201, 205, 216, 226, 237, 247, 277, 279, 285], "explain": [3, 4, 6, 7, 18, 29, 40, 55, 59, 67, 77, 82, 195, 198, 201, 203, 205, 215], "ones": [3, 4, 10, 20, 31, 41, 50, 55, 59, 84, 86, 89, 90, 92, 95, 98, 99, 123, 146, 167, 173, 197, 201, 211, 221, 224, 229, 235, 241, 249, 253, 258, 281, 284], "typic": [3, 4, 10, 11, 20, 55, 65, 84, 99, 109, 114, 120, 124, 182, 192, 194, 196, 201, 205, 218, 240, 241, 258], "directli": [3, 4, 6, 10, 11, 12, 16, 18, 19, 20, 31, 35, 36, 39, 40, 41, 50, 58, 59, 61, 65, 70, 90, 92, 95, 99, 123, 159, 171, 176, 183, 187, 194, 195, 197, 198, 199, 203, 204, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 239, 240, 241, 242, 243, 244, 275, 286], "git": [3, 8], "repositori": [3, 5, 7, 31, 221], "vast": [3, 29, 86, 200], "wrap": [3, 4, 6, 34, 35, 36, 37, 41, 48, 59, 65, 87, 100, 188, 192, 194, 197, 198, 201, 208, 211, 227, 233, 240, 244, 247, 249, 280], "addition": [3, 6, 10, 59, 135, 171, 192, 201, 208, 228, 237, 244, 257], "ci": [3, 7, 67, 84, 208, 284], "wish": [3, 6, 12, 20, 31, 41, 59, 60, 63, 84, 99, 168, 182, 192, 243, 247, 275, 279, 281, 286], "local": [3, 32, 34, 35, 36, 59, 61, 84, 101, 130, 132, 185, 195, 201, 226, 239], "improv": [3, 4, 10, 19, 20, 59, 84, 194, 198, 201, 202, 204, 205, 207, 209, 224, 227, 233, 275, 281], "perform": [3, 10, 11, 12, 15, 16, 18, 20, 38, 40, 41, 42, 50, 51, 54, 58, 59, 60, 62, 63, 65, 72, 76, 83, 86, 93, 95, 99, 100, 115, 118, 125, 127, 133, 137, 138, 140, 157, 158, 167, 170, 173, 189, 192, 196, 197, 198, 201, 203, 204, 209, 210, 211, 215, 220, 221, 224, 226, 227, 228, 229, 240, 246, 253, 255, 257, 260, 274, 275, 279, 280, 285], "gmpy2": [3, 198, 199], "wrapper": [3, 10, 11, 20, 35, 37, 41, 51, 59, 67, 95, 137, 185, 188, 197, 198, 201, 208, 215, 224, 227, 228, 240, 244, 246], "gmp": 3, "multipl": [3, 4, 6, 10, 11, 12, 14, 18, 20, 23, 25, 28, 29, 35, 36, 37, 39, 40, 41, 42, 48, 50, 51, 55, 58, 59, 60, 64, 65, 67, 69, 74, 77, 79, 84, 86, 88, 89, 90, 92, 95, 96, 99, 101, 106, 109, 113, 125, 133, 140, 141, 157, 158, 159, 163, 170, 172, 175, 178, 179, 180, 183, 187, 191, 194, 195, 196, 197, 198, 199, 201, 202, 204, 205, 208, 213, 214, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 232, 234, 237, 241, 242, 243, 244, 246, 247, 249, 253, 258, 274, 275, 277, 278, 280, 281, 286], "larg": [3, 4, 6, 12, 18, 26, 50, 51, 59, 60, 69, 84, 86, 98, 99, 113, 119, 137, 140, 153, 178, 182, 193, 198, 199, 201, 204, 207, 208, 209, 215, 218, 220, 228, 233, 240, 247, 249, 256, 274, 279, 285], "integ": [3, 6, 7, 10, 11, 12, 18, 20, 22, 23, 24, 25, 34, 35, 36, 37, 39, 41, 42, 48, 50, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 64, 67, 69, 72, 83, 84, 86, 87, 88, 89, 90, 92, 95, 96, 99, 101, 102, 109, 111, 117, 162, 167, 169, 170, 171, 173, 175, 183, 185, 188, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 207, 208, 210, 213, 214, 215, 216, 217, 218, 220, 221, 224, 226, 227, 228, 232, 233, 234, 240, 241, 243, 246, 249, 275, 277, 280, 284, 285], "faster": [3, 18, 26, 27, 41, 44, 59, 67, 90, 99, 100, 113, 115, 118, 119, 137, 197, 198, 199, 201, 203, 204, 205, 209, 211, 215, 220, 221, 224, 225, 227, 240, 243], "int": [3, 6, 7, 10, 11, 12, 18, 19, 20, 33, 39, 41, 51, 59, 60, 61, 64, 65, 67, 68, 75, 84, 86, 87, 89, 90, 95, 96, 99, 101, 107, 109, 117, 153, 157, 158, 167, 183, 185, 187, 188, 193, 194, 198, 199, 203, 204, 205, 208, 210, 211, 213, 224, 225, 228, 240, 244, 246, 249, 277, 279, 280, 284, 285], "core": [3, 4, 5, 6, 11, 12, 15, 18, 19, 20, 23, 37, 39, 41, 50, 60, 65, 66, 68, 76, 90, 99, 101, 171, 172, 196, 198, 199, 200, 201, 203, 204, 205, 208, 215, 216, 220, 221, 224, 228, 238, 239, 240, 246, 247, 251, 264, 265, 277, 280], "oper": [3, 5, 6, 11, 18, 19, 20, 26, 27, 29, 33, 37, 41, 50, 51, 52, 58, 59, 60, 61, 62, 63, 65, 67, 69, 77, 79, 82, 84, 89, 90, 92, 99, 101, 109, 110, 113, 118, 119, 127, 131, 137, 140, 145, 149, 150, 154, 156, 157, 158, 159, 164, 165, 168, 170, 171, 172, 173, 182, 183, 185, 190, 195, 196, 197, 198, 199, 201, 203, 204, 205, 208, 211, 213, 216, 217, 220, 223, 224, 226, 227, 230, 231, 232, 233, 239, 240, 243, 246, 247, 253, 264, 268, 270, 271, 276, 277, 278, 280, 285], "poli": [3, 11, 12, 58, 59, 60, 64, 65, 67, 68, 75, 81, 86, 90, 92, 95, 99, 140, 195, 196, 200, 201, 203, 204, 205, 207, 210, 223, 224, 226, 227, 239, 271], "refer": [3, 4, 5, 7, 10, 11, 12, 16, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 35, 36, 37, 39, 41, 43, 45, 47, 48, 50, 51, 52, 53, 57, 60, 62, 64, 65, 67, 69, 74, 75, 76, 81, 87, 88, 89, 90, 96, 100, 102, 107, 109, 110, 112, 114, 117, 118, 120, 122, 123, 125, 133, 135, 138, 140, 141, 142, 144, 146, 150, 152, 154, 155, 156, 159, 161, 162, 170, 171, 173, 182, 183, 184, 185, 187, 189, 191, 197, 198, 200, 208, 210, 211, 213, 216, 220, 223, 224, 225, 226, 228, 234, 243, 246, 247, 249, 253, 257, 258, 262, 270, 271, 277, 281, 282, 285, 286], "domain": [3, 6, 10, 11, 16, 20, 26, 39, 40, 59, 60, 62, 64, 65, 67, 78, 80, 81, 84, 86, 92, 95, 96, 99, 106, 109, 123, 140, 195, 197, 200, 201, 203, 205, 206, 223, 224, 226, 228, 271, 281, 286], "No": [3, 6, 7, 12, 29, 40, 59, 67, 74, 89, 99, 102, 110, 123, 168, 194, 204, 210, 211, 220, 221, 226, 227, 228, 233, 237, 243, 244, 246, 274, 286], "mani": [3, 4, 6, 11, 12, 14, 16, 18, 19, 20, 22, 23, 25, 27, 29, 31, 39, 40, 41, 42, 47, 50, 55, 59, 60, 61, 63, 65, 67, 71, 84, 86, 89, 90, 95, 99, 100, 118, 119, 123, 125, 133, 136, 137, 140, 157, 173, 181, 192, 195, 197, 198, 199, 201, 203, 212, 215, 216, 218, 220, 221, 224, 225, 226, 227, 228, 232, 241, 246, 274, 275, 277, 278, 279, 280, 284, 285, 286], "algorithm": [3, 6, 11, 12, 18, 25, 27, 28, 29, 39, 43, 44, 49, 50, 51, 53, 55, 57, 58, 59, 60, 63, 64, 65, 71, 76, 84, 86, 89, 92, 95, 96, 99, 102, 110, 117, 137, 160, 178, 183, 193, 194, 195, 196, 197, 198, 199, 202, 203, 205, 209, 213, 216, 217, 220, 221, 224, 226, 227, 228, 234, 243, 246, 270, 275, 280, 281, 285], "simplif": [3, 11, 12, 18, 34, 36, 38, 39, 41, 59, 61, 64, 65, 84, 90, 95, 101, 115, 123, 137, 140, 157, 173, 183, 204, 209, 219, 220, 224, 226, 227, 264, 265, 274, 276, 278, 279], "factor": [3, 10, 11, 12, 42, 50, 51, 58, 59, 60, 63, 64, 65, 67, 84, 86, 95, 99, 102, 109, 140, 142, 150, 154, 157, 169, 173, 178, 179, 180, 195, 198, 199, 200, 202, 203, 204, 211, 217, 218, 220, 221, 224, 226, 228, 232, 243, 257, 260, 279, 281], "matric": [3, 6, 11, 17, 18, 37, 41, 59, 60, 86, 96, 98, 109, 117, 118, 119, 123, 127, 137, 140, 142, 145, 146, 148, 156, 157, 167, 172, 183, 192, 193, 197, 203, 208, 209, 216, 218, 220, 221, 224, 226, 227, 229, 241, 242, 270, 276, 278, 279], "thu": [3, 4, 10, 11, 12, 16, 23, 25, 26, 37, 44, 50, 51, 59, 60, 61, 65, 67, 82, 84, 86, 90, 93, 95, 98, 99, 110, 122, 127, 133, 137, 178, 183, 196, 201, 203, 205, 209, 215, 218, 220, 241, 246, 247, 258, 259, 277, 280, 285, 286], "speed": [3, 6, 10, 36, 41, 50, 59, 60, 63, 90, 99, 100, 111, 117, 118, 119, 122, 123, 125, 126, 127, 128, 130, 131, 132, 134, 135, 136, 140, 141, 144, 147, 182, 183, 187, 192, 193, 205, 208, 209, 215, 220, 224, 240, 243, 246, 280, 281], "non": [3, 4, 11, 12, 18, 20, 27, 29, 32, 37, 39, 42, 49, 52, 58, 59, 60, 64, 65, 66, 67, 68, 69, 72, 73, 74, 86, 88, 89, 90, 91, 92, 95, 96, 98, 113, 118, 120, 125, 127, 131, 135, 136, 140, 157, 162, 172, 173, 175, 189, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 211, 215, 216, 218, 220, 221, 223, 224, 226, 227, 228, 229, 232, 233, 234, 239, 241, 246, 249, 260, 280, 285, 286], "who": [3, 4, 6, 16, 20, 60, 61, 140, 192, 201, 208, 278], "abl": [3, 4, 6, 11, 16, 18, 20, 24, 40, 41, 50, 55, 59, 60, 61, 70, 78, 86, 92, 95, 99, 106, 123, 135, 137, 138, 140, 141, 195, 198, 205, 224, 227, 239, 257, 279, 284, 286], "experi": [3, 125, 227, 228], "design": [3, 4, 6, 10, 11, 13, 15, 19, 20, 22, 27, 30, 37, 42, 49, 59, 95, 98, 101, 140, 141, 198, 202, 208, 213, 218, 224, 227, 279, 280, 284], "interfac": [3, 7, 11, 25, 39, 59, 87, 117, 142, 168, 188, 192, 198, 201, 206, 227, 240, 241], "ipython": [3, 6, 10, 11, 12, 31, 87, 140, 188, 247, 251, 252, 283, 284], "jupyt": [3, 10, 11, 20, 247, 251], "notebook": [3, 11, 20, 31, 87, 188, 247, 283, 284], "init_sess": [3, 87, 284], "usual": [3, 10, 11, 12, 16, 18, 40, 42, 50, 58, 59, 60, 77, 84, 86, 95, 133, 159, 171, 178, 189, 191, 192, 195, 196, 198, 199, 201, 207, 208, 209, 215, 218, 224, 227, 228, 229, 233, 234, 241, 243, 247, 253, 262, 274, 277, 280, 284, 285], "flag": [3, 4, 14, 20, 39, 41, 50, 51, 55, 57, 59, 72, 74, 86, 89, 90, 91, 95, 99, 117, 123, 157, 194, 199, 201, 204, 205, 208, 209, 210, 216, 220, 221, 224, 226, 227, 234, 239, 240, 246, 249, 274, 285], "auto_symbol": [3, 87, 101], "auto_int_to_integ": [3, 87], "qt": 3, "consol": [3, 4, 12, 59, 87, 188, 194, 284], "express": [3, 4, 6, 7, 11, 14, 15, 18, 19, 20, 22, 23, 26, 29, 34, 35, 36, 37, 38, 39, 51, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 72, 74, 75, 82, 83, 84, 86, 87, 90, 93, 94, 95, 98, 99, 100, 102, 109, 110, 112, 113, 114, 116, 117, 119, 120, 123, 127, 133, 134, 135, 136, 137, 138, 140, 141, 148, 152, 156, 157, 161, 162, 165, 168, 170, 171, 172, 173, 175, 176, 178, 180, 182, 183, 185, 187, 188, 189, 192, 193, 194, 195, 196, 199, 201, 203, 204, 205, 208, 209, 211, 213, 214, 215, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 240, 241, 242, 243, 244, 247, 249, 253, 255, 256, 257, 259, 260, 262, 268, 270, 275, 276, 277, 278, 279, 281, 284, 285, 286], "mathjax": [3, 7, 87, 188, 284], "preview": [3, 40, 242], "save": [3, 11, 39, 59, 95, 99, 194, 207, 226, 243], "viewer": [3, 7, 40, 208, 242], "parser": [3, 92, 101, 133, 140, 239, 270], "modul": [3, 4, 5, 6, 7, 11, 12, 15, 18, 24, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 49, 51, 59, 60, 62, 64, 65, 67, 71, 75, 79, 82, 85, 86, 87, 89, 92, 93, 94, 95, 100, 101, 102, 104, 105, 107, 110, 113, 123, 124, 129, 133, 135, 136, 140, 142, 145, 147, 148, 160, 163, 176, 177, 178, 179, 189, 192, 194, 199, 200, 202, 205, 206, 208, 212, 215, 218, 222, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 256, 258, 260, 261, 262, 263, 264, 270, 271, 272, 274, 277, 279, 285, 286], "parse_expr": [3, 10, 18, 29, 101], "mathematca": 3, "parse_mathematica": [3, 10, 101], "maxima": [3, 25, 101, 227], "parse_maxima": [3, 101], "antlr": [3, 101, 123], "runtim": [3, 11, 41, 59, 119], "autolev": [3, 125, 133, 270], "call": [3, 4, 6, 7, 11, 12, 15, 16, 18, 19, 20, 22, 25, 26, 27, 28, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 48, 49, 50, 51, 57, 59, 60, 62, 63, 64, 66, 67, 69, 74, 75, 77, 82, 84, 86, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 101, 102, 103, 109, 113, 117, 123, 125, 127, 134, 137, 138, 163, 165, 168, 173, 178, 183, 189, 191, 192, 193, 194, 195, 196, 198, 199, 201, 203, 204, 205, 206, 207, 208, 210, 215, 216, 218, 220, 221, 223, 224, 226, 227, 228, 230, 232, 234, 235, 237, 239, 240, 241, 242, 243, 244, 246, 247, 249, 253, 256, 257, 260, 262, 275, 277, 279, 280, 281, 284, 285, 286], "antlr4": [3, 101], "awar": [3, 4, 6, 11, 12, 19, 39, 59, 63, 89, 95, 218, 228, 247], "must": [3, 4, 5, 6, 10, 11, 12, 18, 19, 33, 34, 35, 36, 41, 50, 51, 53, 55, 57, 58, 59, 60, 61, 64, 65, 67, 69, 72, 75, 78, 81, 82, 84, 86, 89, 90, 91, 92, 95, 98, 99, 102, 103, 105, 107, 109, 110, 117, 118, 119, 123, 125, 133, 135, 136, 137, 138, 140, 153, 168, 170, 173, 182, 183, 192, 193, 194, 195, 196, 199, 201, 203, 204, 208, 209, 216, 217, 218, 220, 221, 224, 226, 227, 228, 232, 233, 239, 240, 241, 242, 243, 244, 246, 247, 250, 277, 279, 280, 284, 285], "match": [3, 4, 6, 10, 12, 18, 20, 50, 51, 58, 59, 67, 72, 84, 86, 90, 95, 117, 122, 149, 174, 182, 183, 197, 204, 220, 221, 224, 225, 226, 228, 237, 239, 241, 246, 247, 259, 275], "wa": [3, 4, 10, 12, 14, 18, 20, 48, 50, 51, 53, 59, 60, 61, 67, 72, 95, 99, 101, 113, 114, 123, 125, 127, 137, 138, 168, 178, 191, 192, 193, 195, 201, 203, 204, 205, 207, 208, 217, 218, 220, 224, 226, 228, 237, 239, 242, 244, 246, 247, 275, 277, 279, 280, 283], "compil": [3, 41, 87, 100, 113, 140, 188, 208, 220, 233, 239, 240, 241, 264, 279], "4": [3, 7, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 81, 82, 84, 86, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 101, 102, 105, 107, 109, 110, 111, 115, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 140, 141, 142, 145, 149, 152, 157, 167, 168, 170, 171, 172, 173, 174, 176, 182, 183, 184, 187, 189, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 239, 240, 243, 246, 247, 253, 256, 257, 258, 260, 262, 263, 274, 275, 277, 279, 280, 281, 285, 286], "clang": [3, 101], "bind": [3, 41, 208, 240], "parse_c": 3, "lfortran": [3, 101], "fortran": [3, 11, 16, 20, 39, 100, 101, 113, 140, 193, 241, 284], "satisfi": [3, 7, 10, 18, 24, 25, 28, 36, 37, 39, 42, 47, 50, 55, 59, 60, 64, 67, 69, 82, 84, 88, 89, 95, 99, 119, 137, 157, 162, 195, 196, 201, 203, 204, 208, 214, 215, 216, 221, 224, 225, 226, 227, 228, 234, 280, 285], "implement": [3, 6, 7, 10, 11, 13, 15, 19, 20, 25, 27, 28, 29, 30, 33, 34, 35, 36, 39, 40, 41, 42, 44, 49, 50, 51, 56, 59, 60, 62, 64, 65, 67, 70, 72, 79, 80, 82, 83, 86, 89, 90, 91, 95, 99, 100, 101, 113, 123, 133, 142, 144, 145, 148, 157, 158, 166, 167, 169, 177, 182, 184, 191, 192, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 212, 215, 216, 217, 220, 221, 224, 225, 226, 227, 228, 232, 233, 243, 246, 247, 250, 261, 264, 268, 275, 279, 285], "dpll": 3, "But": [3, 4, 7, 10, 11, 12, 20, 29, 58, 59, 67, 73, 83, 90, 95, 99, 161, 162, 173, 178, 183, 195, 196, 201, 205, 215, 217, 218, 220, 221, 224, 226, 227, 233, 243, 246, 247, 256, 275, 277, 279, 280, 285], "sat": [3, 35], "solver": [3, 6, 11, 24, 27, 35, 67, 95, 99, 122, 133, 140, 141, 197, 200, 208, 220, 221, 225, 239, 264, 265, 271, 276, 278], "ask": [3, 6, 11, 12, 15, 18, 19, 35, 36, 37, 38, 59, 71, 84, 123, 178, 195, 214, 220, 227, 246, 265, 277], "pycosat": 3, "forc": [3, 12, 16, 19, 20, 59, 63, 65, 69, 75, 84, 86, 89, 102, 103, 105, 114, 117, 118, 122, 125, 127, 128, 129, 130, 133, 135, 136, 137, 140, 161, 162, 176, 189, 192, 194, 196, 198, 217, 220, 221, 226, 239, 260, 262, 270, 284, 285], "pysat": 3, "minisat": 3, "minisat22": 3, "heavi": [3, 228, 280], "primarili": [3, 11, 18, 41, 59, 65, 99, 102, 172, 204, 206, 240, 243, 249, 257], "support": [3, 4, 5, 6, 7, 10, 11, 12, 20, 27, 31, 33, 34, 35, 36, 39, 40, 41, 51, 59, 63, 66, 67, 69, 83, 86, 92, 95, 99, 100, 101, 102, 103, 105, 106, 109, 113, 117, 123, 140, 168, 183, 191, 194, 196, 197, 198, 199, 201, 203, 204, 205, 208, 213, 214, 215, 216, 220, 224, 225, 226, 227, 228, 229, 233, 237, 239, 240, 241, 247, 258, 260, 275, 277, 280, 284], "give": [3, 4, 6, 12, 14, 18, 19, 20, 23, 25, 26, 27, 28, 29, 34, 36, 41, 42, 48, 50, 51, 52, 53, 58, 59, 60, 61, 64, 65, 67, 69, 71, 72, 74, 75, 83, 84, 86, 87, 89, 92, 95, 98, 99, 100, 102, 105, 109, 117, 123, 140, 152, 167, 168, 170, 171, 175, 176, 178, 179, 181, 183, 187, 189, 191, 192, 193, 194, 195, 196, 198, 199, 201, 203, 204, 205, 208, 209, 210, 211, 215, 216, 217, 218, 220, 221, 224, 226, 227, 228, 239, 240, 241, 246, 257, 262, 277, 278, 280, 285, 286], "rudimentari": [3, 20, 201], "text": [3, 4, 6, 7, 11, 20, 31, 41, 50, 60, 64, 65, 67, 77, 84, 87, 90, 95, 99, 138, 178, 188, 193, 194, 195, 208, 215, 221, 224, 227, 228, 239], "pyglet": [3, 208], "pygletplot": [3, 194], "2d": [3, 10, 72, 73, 75, 102, 103, 105, 151, 183, 194, 208, 221, 233, 279], "3d": [3, 10, 33, 43, 72, 73, 102, 151, 174, 189, 194, 257, 259, 260, 261, 262], "evalu": [3, 6, 11, 16, 18, 19, 22, 29, 34, 35, 36, 39, 41, 59, 61, 64, 65, 67, 70, 74, 75, 84, 86, 89, 92, 95, 99, 100, 101, 109, 113, 115, 123, 137, 138, 148, 150, 152, 154, 159, 162, 170, 173, 193, 194, 198, 199, 201, 202, 204, 208, 209, 214, 215, 216, 218, 220, 221, 224, 226, 227, 228, 230, 240, 241, 242, 247, 260, 265, 274, 275, 276, 277, 279, 281], "numer": [3, 6, 10, 11, 12, 14, 16, 18, 22, 23, 24, 25, 26, 28, 37, 39, 41, 58, 59, 64, 67, 71, 75, 82, 95, 99, 101, 105, 106, 107, 109, 117, 118, 119, 123, 125, 133, 137, 141, 145, 152, 155, 170, 177, 182, 192, 194, 198, 199, 201, 202, 203, 204, 207, 208, 217, 218, 220, 224, 226, 227, 233, 239, 240, 246, 247, 265, 274, 277, 281, 285], "variou": [3, 6, 7, 11, 16, 20, 24, 39, 41, 43, 50, 58, 59, 64, 79, 84, 86, 89, 95, 120, 152, 156, 157, 168, 170, 182, 195, 196, 199, 200, 201, 203, 209, 215, 218, 221, 224, 225, 227, 241, 285], "primari": [3, 4, 6, 7, 18, 20, 59, 71, 89, 192, 195, 241, 247], "vehicl": 3, "between": [3, 4, 11, 15, 19, 20, 25, 40, 41, 49, 50, 51, 53, 57, 59, 61, 64, 67, 69, 71, 72, 73, 74, 75, 76, 86, 88, 89, 92, 93, 95, 99, 100, 101, 105, 106, 107, 109, 117, 120, 122, 123, 126, 130, 132, 134, 137, 138, 140, 141, 142, 145, 146, 152, 159, 161, 162, 163, 167, 170, 171, 172, 173, 176, 178, 183, 184, 185, 187, 189, 191, 192, 194, 195, 197, 201, 203, 204, 208, 210, 220, 224, 225, 226, 227, 228, 229, 242, 247, 253, 256, 257, 260, 262, 277], "standard": [3, 7, 10, 11, 12, 18, 20, 25, 26, 29, 41, 59, 63, 65, 67, 82, 84, 86, 87, 88, 89, 93, 95, 99, 100, 101, 112, 150, 154, 183, 189, 193, 195, 198, 199, 201, 208, 211, 216, 220, 221, 224, 227, 228, 241, 247, 250, 257, 262, 274, 277, 285], "wai": [3, 4, 5, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 20, 23, 25, 32, 40, 42, 43, 48, 50, 51, 52, 55, 59, 61, 64, 67, 75, 79, 83, 84, 86, 88, 92, 95, 98, 99, 101, 102, 105, 113, 118, 120, 122, 123, 127, 129, 130, 133, 137, 153, 167, 170, 171, 176, 178, 181, 182, 183, 185, 187, 189, 191, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 215, 218, 220, 221, 224, 225, 227, 229, 230, 233, 234, 237, 241, 243, 246, 247, 250, 253, 257, 258, 259, 260, 262, 274, 275, 277, 278, 279, 280, 285, 286], "principl": [3, 60, 90, 99, 144, 193, 195, 196, 201, 217, 226], "pass": [3, 4, 5, 6, 11, 12, 14, 15, 18, 19, 20, 23, 24, 27, 29, 32, 33, 36, 39, 40, 41, 50, 51, 59, 60, 61, 63, 65, 66, 67, 69, 72, 73, 75, 86, 87, 89, 90, 92, 95, 96, 99, 101, 102, 107, 109, 114, 122, 123, 127, 140, 141, 145, 162, 163, 167, 168, 170, 171, 183, 188, 194, 195, 197, 198, 199, 201, 203, 204, 206, 208, 209, 215, 216, 220, 221, 224, 225, 226, 227, 228, 229, 232, 233, 234, 237, 239, 240, 241, 242, 244, 246, 247, 249, 252, 253, 274, 275, 280, 284, 285, 286], "appropri": [3, 6, 7, 12, 16, 25, 28, 50, 59, 65, 74, 95, 113, 125, 162, 163, 173, 183, 191, 197, 198, 204, 205, 208, 214, 215, 220, 221, 226, 228, 233, 241, 258, 284], "namespac": [3, 6, 10, 32, 41, 42, 59, 199, 221, 224, 225, 239, 241, 242, 247], "dictionari": [3, 10, 11, 24, 29, 40, 41, 48, 50, 51, 57, 59, 64, 73, 75, 88, 90, 95, 98, 99, 101, 102, 115, 118, 119, 122, 123, 125, 127, 130, 135, 137, 163, 173, 183, 192, 194, 196, 199, 201, 203, 204, 206, 208, 215, 220, 221, 224, 225, 226, 227, 228, 232, 234, 239, 243, 246, 247, 253, 274, 281], "third": [3, 4, 14, 41, 50, 51, 59, 67, 69, 73, 109, 117, 170, 176, 191, 196, 204, 218, 224, 227, 228, 244, 246, 275, 280], "argument": [3, 4, 5, 6, 11, 15, 18, 19, 20, 23, 27, 28, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 50, 51, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 72, 75, 76, 84, 86, 87, 89, 90, 92, 95, 98, 99, 101, 102, 107, 109, 117, 118, 122, 123, 135, 136, 140, 147, 150, 154, 156, 159, 162, 167, 168, 170, 171, 172, 173, 181, 188, 189, 193, 194, 195, 196, 198, 199, 201, 203, 204, 207, 208, 209, 210, 214, 215, 216, 217, 218, 220, 221, 224, 225, 226, 228, 232, 233, 239, 240, 241, 242, 243, 244, 246, 247, 249, 257, 258, 260, 274, 275, 280, 281, 285], "default": [3, 4, 6, 7, 11, 12, 18, 20, 25, 26, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 49, 50, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 81, 86, 87, 89, 90, 92, 95, 96, 99, 100, 101, 102, 103, 105, 107, 109, 111, 113, 114, 115, 117, 118, 119, 123, 137, 146, 163, 165, 168, 170, 171, 173, 179, 182, 183, 185, 187, 188, 193, 194, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 209, 210, 211, 215, 216, 217, 220, 221, 224, 225, 226, 227, 228, 233, 234, 239, 240, 241, 243, 244, 246, 247, 249, 253, 274, 275, 279, 281, 284, 285], "translat": [3, 10, 41, 50, 59, 68, 70, 74, 76, 100, 101, 109, 112, 117, 118, 130, 132, 134, 138, 191, 194, 208, 224, 226, 240, 241, 247, 249, 258], "numpi": [3, 6, 10, 11, 20, 26, 27, 31, 41, 59, 82, 87, 100, 107, 123, 140, 157, 167, 197, 208, 228, 233, 240, 241, 247, 274, 277], "By": [3, 12, 18, 20, 25, 26, 34, 36, 41, 49, 58, 59, 61, 63, 64, 67, 73, 74, 78, 82, 84, 89, 90, 95, 98, 99, 100, 101, 102, 103, 107, 114, 168, 173, 194, 196, 198, 199, 201, 203, 204, 205, 207, 208, 210, 215, 217, 220, 221, 224, 226, 227, 228, 232, 234, 235, 239, 242, 246, 247, 260, 274, 279, 280, 285], "produc": [3, 6, 7, 11, 19, 20, 24, 26, 27, 29, 40, 50, 59, 60, 72, 86, 89, 95, 183, 198, 203, 204, 208, 215, 224, 225, 226, 228, 237, 239, 243, 244, 246, 284], "behavior": [3, 4, 10, 11, 12, 20, 50, 59, 64, 67, 86, 101, 112, 113, 133, 137, 168, 195, 196, 203, 204, 208, 209, 213, 215, 217, 220, 237, 240, 242, 246, 247, 277], "backward": [3, 8, 16, 39, 59, 90, 95, 208, 246, 285], "scipi": [3, 11, 23, 26, 41, 59, 67, 113, 140, 167, 208, 228, 240, 247, 274, 283], "special": [3, 6, 11, 13, 18, 20, 26, 29, 32, 33, 51, 59, 60, 62, 63, 64, 66, 74, 77, 84, 86, 90, 95, 140, 157, 162, 189, 195, 198, 201, 202, 203, 208, 217, 218, 220, 223, 224, 225, 226, 228, 239, 240, 241, 244, 246, 247, 257, 260, 262, 265, 275, 276, 280], "cupi": [3, 100], "cuda": [3, 100], "gpu": [3, 100, 140], "jax": [3, 100, 247], "xla": [3, 100], "program": [3, 7, 12, 18, 41, 43, 51, 140, 178, 193, 241, 243, 277, 279, 283, 285], "tpu": [3, 100], "compatibli": 3, "tensorflow": [3, 247], "learn": [3, 5, 7, 22, 29, 95, 138, 192, 217, 227, 274, 277, 278, 279, 283], "numexpr": [3, 247], "fast": [3, 18, 41, 59, 86, 94, 95, 99, 145, 199, 200, 201, 202, 203, 204, 205, 211, 215, 224, 226, 243, 246, 247], "alreadi": [3, 4, 10, 12, 18, 20, 24, 25, 29, 31, 50, 51, 59, 60, 68, 69, 72, 73, 75, 84, 86, 90, 96, 99, 105, 110, 114, 123, 137, 142, 168, 170, 173, 189, 191, 192, 194, 197, 198, 201, 203, 207, 211, 217, 218, 220, 224, 227, 228, 234, 258, 260, 275, 277, 278, 279, 283, 284, 285, 286], "number": [3, 4, 5, 6, 7, 10, 11, 14, 15, 18, 20, 24, 25, 26, 28, 29, 33, 35, 36, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 64, 65, 67, 69, 72, 73, 74, 75, 76, 78, 86, 87, 88, 89, 90, 92, 95, 96, 98, 100, 101, 103, 105, 107, 109, 110, 111, 113, 118, 119, 122, 123, 127, 137, 138, 140, 146, 149, 152, 153, 156, 157, 158, 159, 161, 162, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 181, 182, 183, 187, 188, 189, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 204, 205, 208, 210, 214, 215, 216, 217, 218, 220, 221, 224, 226, 227, 228, 229, 233, 234, 239, 241, 243, 246, 249, 253, 256, 257, 259, 260, 262, 265, 271, 274, 275, 277, 279, 280, 281, 285], "languag": [3, 7, 11, 12, 16, 20, 41, 65, 95, 101, 113, 123, 140, 208, 213, 228, 240, 241, 277, 279, 281, 283, 285], "valid": [3, 6, 7, 10, 18, 19, 20, 24, 34, 36, 38, 39, 40, 41, 52, 58, 59, 64, 65, 75, 95, 99, 115, 117, 118, 123, 125, 138, 142, 146, 165, 170, 180, 183, 188, 192, 198, 201, 204, 207, 208, 216, 220, 221, 224, 226, 227, 228, 247, 281, 285], "rather": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 25, 28, 29, 32, 37, 41, 42, 50, 51, 52, 59, 63, 65, 70, 75, 77, 84, 89, 90, 92, 95, 99, 101, 122, 130, 140, 153, 167, 171, 173, 182, 191, 195, 198, 201, 204, 206, 211, 218, 221, 223, 224, 227, 228, 243, 246, 247, 250, 262, 277, 279, 280], "string": [3, 4, 6, 7, 11, 12, 20, 34, 40, 41, 43, 48, 59, 60, 61, 62, 63, 66, 72, 82, 87, 88, 89, 92, 95, 99, 101, 102, 105, 107, 113, 114, 117, 120, 144, 153, 157, 167, 171, 175, 181, 182, 183, 187, 188, 189, 194, 197, 199, 203, 208, 209, 215, 220, 224, 228, 229, 232, 233, 234, 239, 240, 241, 246, 247, 249, 251, 253, 255, 257, 276, 277, 280, 284], "repres": [3, 10, 11, 12, 15, 18, 19, 20, 24, 26, 33, 35, 37, 40, 41, 42, 43, 48, 49, 50, 51, 52, 54, 55, 58, 59, 60, 61, 64, 65, 67, 69, 70, 72, 74, 75, 76, 81, 82, 86, 88, 89, 90, 92, 95, 99, 101, 102, 103, 106, 107, 109, 114, 117, 118, 120, 122, 123, 125, 126, 127, 128, 131, 133, 135, 136, 137, 138, 140, 142, 144, 145, 147, 159, 160, 162, 166, 167, 170, 171, 173, 175, 178, 179, 180, 181, 182, 183, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 199, 201, 204, 206, 208, 210, 211, 214, 215, 216, 218, 220, 221, 224, 226, 227, 228, 230, 232, 233, 234, 241, 243, 246, 247, 253, 256, 260, 262, 270, 275, 277, 279, 280, 285, 286], "take": [3, 4, 5, 7, 10, 11, 12, 16, 18, 19, 20, 23, 24, 25, 26, 36, 39, 41, 42, 44, 49, 50, 54, 58, 59, 60, 61, 65, 67, 71, 72, 82, 86, 88, 89, 90, 95, 99, 100, 101, 102, 105, 109, 113, 117, 118, 120, 122, 123, 125, 137, 138, 140, 142, 156, 159, 162, 163, 167, 169, 170, 171, 172, 173, 175, 178, 181, 182, 183, 184, 185, 188, 191, 192, 194, 195, 196, 197, 198, 199, 201, 204, 205, 208, 211, 214, 215, 216, 217, 218, 220, 221, 224, 226, 227, 228, 230, 233, 239, 240, 242, 243, 246, 247, 253, 255, 256, 274, 275, 277, 279, 280, 281, 285], "within": [3, 7, 10, 11, 18, 27, 39, 40, 41, 59, 65, 72, 75, 89, 90, 92, 99, 100, 102, 130, 168, 182, 183, 191, 192, 196, 198, 204, 206, 216, 224, 226, 227, 228, 239, 240, 249], "case": [3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 24, 25, 26, 27, 28, 29, 39, 40, 41, 42, 44, 47, 50, 51, 55, 58, 59, 60, 61, 63, 64, 65, 67, 71, 74, 75, 76, 77, 81, 84, 86, 89, 90, 92, 95, 96, 99, 100, 101, 103, 109, 113, 117, 118, 123, 125, 126, 127, 128, 134, 136, 138, 140, 146, 157, 163, 168, 170, 172, 173, 178, 179, 187, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 213, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 228, 229, 232, 234, 237, 239, 241, 242, 244, 246, 247, 248, 249, 250, 253, 256, 257, 275, 279, 280, 281, 284, 285, 286], "subpackag": [3, 264], "f2py": [3, 41, 100, 240, 241], "ufuncifi": [3, 41, 240], "cython": [3, 41, 100, 140, 240], "codegen": [3, 20, 100, 208, 240, 245, 272], "relat": [3, 4, 6, 7, 11, 19, 34, 36, 37, 39, 42, 43, 49, 50, 57, 61, 64, 65, 75, 81, 84, 86, 90, 95, 99, 105, 112, 118, 127, 130, 133, 134, 140, 142, 147, 155, 157, 183, 187, 191, 193, 194, 195, 201, 203, 204, 205, 207, 208, 212, 214, 215, 218, 220, 221, 223, 224, 226, 227, 228, 246, 285], "reli": [3, 10, 12, 41, 95, 100, 106, 201, 207, 208, 215, 220, 227, 242, 247, 281], "llvm": 3, "gcc": [3, 241], "ifort": 3, "therefor": [3, 4, 6, 20, 25, 42, 50, 55, 59, 63, 67, 75, 88, 99, 109, 117, 189, 192, 193, 194, 198, 201, 204, 208, 224, 227, 228, 229, 234, 253, 255, 257, 258, 260, 262], "aesara": [3, 10, 41, 140], "aesaracod": [3, 10, 41, 100, 208], "aeseara": 3, "previous": [3, 4, 10, 58, 117, 131, 134, 189, 207, 220, 228, 260], "theano": [3, 10, 140, 284], "return": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 24, 25, 27, 28, 29, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 84, 86, 88, 89, 90, 91, 92, 95, 96, 98, 99, 101, 102, 105, 107, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 122, 123, 125, 127, 131, 135, 137, 138, 140, 142, 144, 145, 146, 147, 149, 150, 154, 157, 158, 159, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 179, 180, 181, 182, 183, 184, 185, 187, 189, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 220, 221, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 251, 253, 256, 258, 260, 274, 275, 280, 281, 284, 285, 286], "graph": [3, 6, 11, 51, 67, 88, 95, 100, 197, 208, 227, 246, 280, 284], "object": [3, 4, 6, 7, 11, 12, 17, 18, 19, 20, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 49, 50, 51, 52, 53, 54, 58, 59, 61, 64, 65, 67, 69, 70, 71, 72, 74, 75, 76, 84, 86, 89, 90, 92, 93, 95, 100, 101, 102, 103, 107, 109, 110, 113, 114, 117, 118, 119, 120, 122, 123, 127, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 146, 147, 148, 156, 157, 159, 167, 168, 172, 173, 175, 176, 179, 180, 182, 183, 187, 188, 191, 192, 194, 195, 196, 197, 198, 199, 201, 203, 204, 208, 210, 211, 214, 215, 216, 217, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 239, 240, 241, 242, 243, 246, 247, 250, 251, 256, 257, 258, 263, 264, 268, 274, 275, 277, 279, 280, 281, 284, 285], "llvmlite": 3, "llvmjitcod": 3, "jit": [3, 217], "around": [3, 4, 6, 7, 10, 11, 12, 19, 20, 31, 39, 48, 51, 59, 60, 61, 63, 65, 68, 75, 79, 98, 99, 105, 114, 117, 133, 137, 141, 192, 198, 201, 203, 208, 210, 215, 221, 224, 227, 228, 239, 253, 255, 275, 277, 279], "llvm_callabl": 3, "callabl": [3, 12, 41, 50, 95, 101, 158, 203, 208, 209, 220, 237, 240, 241, 246, 247, 248], "unlik": [3, 6, 11, 12, 18, 19, 38, 60, 86, 95, 99, 101, 123, 191, 201, 208, 221, 224, 227, 243, 244, 277, 279, 280, 281, 284], "tensorflow_cod": 3, "order": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 23, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 72, 75, 76, 78, 81, 84, 86, 87, 88, 89, 90, 95, 96, 99, 100, 101, 102, 103, 109, 110, 113, 117, 118, 122, 123, 124, 125, 126, 134, 135, 136, 137, 138, 146, 150, 154, 157, 167, 168, 169, 170, 171, 172, 173, 178, 182, 183, 185, 187, 188, 191, 192, 194, 195, 196, 197, 198, 199, 201, 203, 205, 207, 208, 209, 210, 211, 214, 216, 220, 221, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 239, 240, 241, 243, 246, 247, 249, 253, 255, 257, 258, 263, 275, 277, 278, 280, 284, 285, 286], "assum": [3, 6, 11, 12, 15, 18, 20, 25, 28, 36, 41, 42, 43, 48, 50, 58, 59, 60, 61, 64, 65, 67, 69, 76, 77, 84, 86, 95, 99, 102, 105, 109, 122, 123, 129, 135, 136, 137, 138, 140, 146, 168, 172, 173, 183, 187, 189, 195, 196, 198, 201, 204, 206, 208, 215, 216, 218, 220, 221, 224, 225, 227, 228, 232, 233, 234, 241, 246, 249, 256, 258, 262, 265, 278, 280, 283, 285, 286], "wurlitz": 3, "allow": [3, 4, 7, 10, 11, 12, 18, 20, 37, 40, 41, 42, 43, 50, 52, 55, 58, 59, 60, 63, 65, 67, 69, 70, 71, 84, 87, 89, 90, 92, 93, 95, 99, 100, 101, 103, 117, 118, 123, 125, 133, 137, 138, 140, 145, 157, 173, 177, 178, 179, 192, 194, 195, 198, 199, 201, 203, 204, 205, 208, 213, 215, 216, 217, 220, 221, 224, 226, 227, 228, 229, 233, 239, 242, 244, 246, 247, 258, 277, 280], "captur": [3, 59, 246], "output": [3, 6, 7, 10, 12, 13, 16, 18, 20, 25, 29, 40, 41, 59, 60, 67, 83, 86, 87, 89, 90, 92, 95, 99, 100, 101, 106, 109, 118, 122, 123, 131, 137, 140, 141, 145, 146, 157, 169, 173, 182, 183, 187, 188, 189, 192, 198, 201, 204, 208, 209, 218, 220, 221, 223, 224, 226, 228, 233, 239, 240, 241, 243, 246, 247, 253, 277, 279, 280, 281, 284, 285, 286], "suit": [3, 4, 7, 18, 20, 25, 26, 40, 194, 204, 237, 239], "stat": [3, 264, 271], "sampl": [3, 8, 16, 50, 62, 107, 157, 194, 208, 228, 275, 279], "At": [3, 10, 18, 20, 25, 39, 55, 65, 67, 86, 99, 102, 103, 113, 178, 182, 192, 203, 218, 247], "least": [3, 4, 7, 10, 14, 18, 37, 39, 41, 50, 59, 65, 71, 83, 84, 86, 95, 99, 100, 118, 153, 167, 175, 195, 196, 198, 199, 201, 203, 204, 215, 217, 220, 224, 226, 227, 228, 241, 285], "random": [3, 6, 10, 43, 48, 50, 51, 57, 60, 69, 72, 73, 94, 95, 99, 157, 169, 194, 201, 208, 238, 239, 242, 246, 277, 281, 285], "pymc": [3, 228], "manipul": [3, 11, 15, 16, 18, 24, 26, 40, 41, 42, 50, 59, 65, 67, 84, 99, 100, 116, 123, 133, 138, 171, 191, 197, 198, 199, 202, 207, 208, 210, 217, 220, 231, 246, 264, 270, 271, 274, 275, 276, 277, 278, 279, 281, 284, 285], "use_symengin": 3, "physic": [3, 6, 16, 41, 52, 95, 99, 102, 103, 105, 106, 107, 108, 109, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 187, 188, 193, 202, 228, 243, 246, 260, 279, 285], "mechan": [3, 20, 59, 82, 86, 102, 114, 115, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 130, 131, 132, 155, 159, 162, 168, 170, 171, 172, 175, 182, 183, 190, 193, 270], "liealgebra": [3, 88], "thing": [3, 4, 6, 7, 10, 11, 12, 13, 18, 19, 20, 23, 30, 37, 41, 49, 50, 51, 59, 61, 71, 87, 88, 89, 90, 95, 100, 113, 120, 123, 137, 140, 157, 173, 178, 191, 192, 205, 207, 215, 216, 217, 220, 224, 227, 232, 242, 244, 246, 274, 275, 277, 279, 280, 281, 284, 285], "configur": [3, 4, 5, 10, 51, 89, 109, 117, 118, 126, 127, 130, 132, 133, 135, 137, 208], "otherwis": [3, 4, 14, 18, 19, 20, 39, 40, 41, 50, 51, 55, 58, 59, 60, 63, 65, 67, 68, 69, 72, 73, 74, 75, 84, 86, 88, 89, 91, 95, 98, 99, 101, 107, 109, 111, 114, 122, 123, 158, 163, 169, 187, 190, 191, 195, 199, 201, 203, 204, 206, 208, 210, 211, 213, 214, 216, 220, 221, 224, 225, 226, 227, 228, 229, 237, 239, 241, 246, 247, 274, 275, 284], "ordinari": [3, 18, 19, 22, 39, 41, 50, 59, 63, 64, 65, 67, 77, 81, 82, 86, 96, 109, 133, 195, 197, 198, 207, 214, 224, 229, 243, 279, 285], "x": [3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 48, 50, 51, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 95, 98, 99, 100, 101, 102, 103, 105, 107, 109, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 145, 147, 148, 149, 150, 151, 153, 154, 157, 162, 163, 168, 170, 171, 172, 173, 174, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 239, 240, 241, 242, 244, 246, 247, 249, 253, 256, 257, 258, 259, 260, 262, 263, 274, 275, 277, 279, 280, 281, 284, 285, 286], "still": [3, 4, 6, 7, 10, 11, 12, 18, 20, 31, 32, 40, 51, 58, 59, 60, 67, 71, 86, 90, 95, 123, 173, 192, 194, 195, 196, 201, 203, 208, 215, 217, 218, 220, 224, 226, 227, 233, 239, 246, 260, 281], "matchpi": 3, "pattern": [3, 10, 11, 12, 18, 20, 59, 84, 86, 89, 90, 101, 167, 198, 218, 220, 224, 226, 275, 280], "anywher": [3, 4, 6, 10, 18, 41, 59, 67, 73, 173, 249, 279], "els": [3, 4, 10, 11, 12, 18, 19, 20, 23, 41, 49, 51, 55, 59, 60, 67, 69, 73, 75, 76, 84, 86, 89, 95, 99, 109, 173, 183, 194, 199, 203, 204, 208, 209, 216, 220, 224, 226, 227, 232, 234, 239, 246, 249, 253, 256, 274, 280], "mathemat": [3, 4, 7, 8, 10, 11, 15, 18, 20, 23, 25, 27, 29, 30, 35, 36, 39, 41, 42, 45, 49, 51, 58, 59, 60, 61, 64, 65, 66, 67, 72, 73, 84, 86, 89, 92, 95, 99, 100, 101, 109, 110, 113, 127, 139, 178, 189, 191, 192, 195, 196, 198, 199, 202, 207, 208, 216, 217, 221, 224, 227, 228, 233, 240, 241, 247, 253, 257, 260, 262, 274, 277, 278, 279, 280, 283, 285], "softwar": [3, 7, 86, 202, 279], "itself": [3, 4, 6, 7, 10, 11, 20, 37, 48, 50, 51, 57, 59, 61, 64, 65, 72, 76, 81, 99, 118, 122, 123, 138, 163, 170, 189, 191, 194, 195, 198, 201, 203, 204, 208, 216, 217, 220, 227, 232, 233, 234, 241, 243, 246, 262, 279], "_sage_": 3, "basic": [3, 4, 5, 6, 7, 10, 11, 18, 20, 29, 33, 35, 40, 41, 42, 47, 50, 54, 57, 58, 62, 65, 75, 77, 82, 83, 84, 89, 90, 93, 96, 109, 117, 123, 135, 136, 138, 140, 141, 147, 157, 171, 178, 181, 186, 189, 190, 192, 194, 195, 197, 199, 200, 201, 203, 205, 206, 208, 209, 215, 220, 221, 224, 225, 226, 227, 228, 239, 241, 246, 247, 251, 259, 260, 261, 268, 270, 271, 275, 276, 277, 278, 283], "beyond": [3, 18, 23, 53, 75, 99, 137, 195, 198, 217, 220, 281], "control": [3, 5, 10, 12, 14, 18, 20, 40, 42, 59, 60, 63, 84, 89, 90, 137, 140, 153, 157, 168, 169, 173, 177, 204, 205, 209, 216, 221, 227, 246, 270, 274], "pytest": [3, 4, 10, 236, 242, 244, 247, 272], "entir": [3, 4, 18, 50, 59, 60, 63, 64, 67, 73, 75, 84, 98, 115, 134, 138, 183, 195, 197, 203, 216, 233, 242, 244, 279, 285], "import_modul": 3, "own": [3, 5, 6, 12, 20, 35, 43, 50, 51, 59, 75, 103, 117, 123, 140, 203, 208, 215, 220, 224, 243, 246, 247, 279], "runner": [3, 239], "access": [3, 6, 7, 11, 12, 18, 20, 34, 35, 36, 41, 59, 67, 88, 89, 92, 95, 100, 103, 109, 110, 117, 118, 122, 123, 141, 182, 183, 189, 192, 194, 198, 199, 201, 203, 220, 224, 228, 229, 232, 240, 241, 257, 260, 280, 284], "script": [3, 5, 6, 11, 32, 67, 188, 240], "cloudpickl": 3, "effect": [3, 6, 10, 20, 27, 31, 50, 52, 59, 76, 84, 86, 90, 95, 102, 123, 125, 137, 145, 173, 183, 194, 198, 201, 205, 207, 224, 277], "pickl": 3, "util": [3, 4, 5, 6, 7, 23, 25, 39, 46, 48, 50, 51, 64, 65, 70, 71, 72, 75, 89, 90, 99, 100, 143, 177, 180, 197, 201, 205, 208, 220, 221, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 265, 270, 271], "test_pickl": 3, "py": [3, 4, 5, 6, 12, 18, 31, 40, 59, 70, 84, 86, 95, 151, 153, 194, 197, 199, 205, 208, 215, 218, 224, 225, 234, 237, 239, 244, 247], "pdf": [3, 7, 8, 30, 39, 40, 50, 60, 62, 64, 81, 86, 95, 99, 102, 103, 107, 194, 202, 207, 208, 211, 217, 220, 221, 224, 228, 246, 253], "view": [3, 6, 8, 11, 29, 41, 42, 59, 95, 102, 175, 178, 192, 194, 201, 208, 224, 227, 241, 243, 246], "host": [3, 7], "onlin": [3, 6, 118, 221, 246], "sympy_benchmark": 3, "readm": 3, "yourself": [3, 20, 29, 41, 125, 242, 275], "reproduc": [3, 204, 239, 285], "add": [3, 4, 5, 6, 10, 11, 12, 15, 18, 33, 35, 39, 41, 48, 50, 55, 60, 63, 66, 74, 76, 84, 88, 92, 95, 99, 102, 105, 114, 123, 140, 151, 157, 167, 172, 173, 176, 191, 192, 194, 197, 198, 199, 201, 203, 204, 205, 208, 209, 218, 220, 221, 224, 225, 227, 228, 230, 232, 233, 234, 242, 247, 251, 275, 277, 280, 284, 285], "asv": 3, "airspe": 3, "veloc": [3, 113, 114, 117, 118, 120, 125, 126, 127, 130, 131, 132, 134, 137, 138, 140, 147, 175, 178, 182, 183, 187, 189, 192, 260, 262], "describ": [4, 6, 7, 10, 12, 18, 19, 20, 40, 42, 49, 50, 51, 53, 54, 57, 58, 59, 60, 64, 67, 69, 74, 75, 84, 86, 90, 95, 98, 99, 109, 113, 117, 118, 120, 122, 123, 126, 127, 128, 130, 132, 133, 134, 135, 136, 137, 138, 152, 173, 177, 178, 182, 183, 189, 191, 192, 195, 198, 201, 203, 209, 215, 218, 220, 221, 224, 227, 228, 232, 241, 246, 247, 253, 255, 260, 275], "properli": [4, 11, 20, 40, 59, 65, 71, 84, 95, 119, 123, 135, 150, 154, 157, 171, 196, 198, 208, 224, 227, 237, 241, 247, 281, 286], "current": [4, 7, 10, 12, 18, 23, 24, 33, 36, 39, 40, 41, 42, 43, 50, 53, 54, 56, 57, 58, 59, 61, 65, 67, 69, 71, 74, 79, 82, 84, 86, 88, 90, 95, 99, 101, 102, 106, 113, 117, 123, 133, 167, 172, 173, 177, 181, 192, 194, 195, 196, 197, 199, 201, 204, 205, 207, 208, 209, 215, 218, 220, 221, 223, 224, 225, 226, 227, 228, 234, 239, 240, 241, 243, 257, 271, 281, 286], "updat": [4, 10, 12, 31, 59, 127, 153, 163, 166, 167, 169, 193, 201, 204, 208, 221, 234, 244], "continu": [4, 6, 7, 10, 16, 19, 20, 39, 41, 49, 51, 53, 59, 64, 65, 67, 84, 87, 90, 99, 106, 107, 168, 171, 188, 199, 201, 204, 221, 223, 224, 232, 276], "someon": [4, 224, 243, 278], "warn": [4, 6, 12, 20, 59, 60, 74, 101, 183, 192, 196, 208, 224, 226, 237, 239, 241, 245, 246, 272, 281], "screen": [4, 11, 87, 188, 192, 239, 284], "indic": [4, 6, 12, 15, 18, 25, 28, 39, 40, 41, 42, 43, 48, 50, 51, 52, 54, 55, 57, 58, 59, 62, 63, 64, 67, 69, 74, 75, 84, 86, 89, 90, 92, 95, 98, 99, 110, 122, 127, 157, 168, 170, 171, 173, 178, 182, 183, 193, 197, 198, 199, 203, 204, 205, 208, 215, 216, 217, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 239, 240, 241, 246, 281], "remov": [4, 10, 18, 23, 34, 35, 50, 53, 57, 59, 63, 65, 74, 75, 84, 89, 90, 95, 99, 102, 105, 114, 117, 130, 132, 137, 157, 173, 199, 201, 204, 206, 207, 208, 220, 221, 224, 226, 227, 229, 230, 240, 241, 242, 244, 246, 247, 274, 285], "futur": [4, 12, 18, 19, 41, 42, 59, 84, 86, 90, 95, 101, 117, 122, 125, 133, 137, 173, 177, 190, 194, 196, 207, 208, 220, 224, 233, 239, 242, 244, 247, 270, 280, 286], "chanc": [4, 12, 19, 59, 87, 218, 228, 280], "break": [4, 6, 10, 20, 40, 41, 51, 59, 60, 99, 191, 205, 208, 216, 246], "opportun": [4, 6, 220], "messag": [4, 10, 60, 87, 242, 244], "wrong": [4, 7, 10, 50, 59, 60, 67, 69, 95, 183, 198, 224, 242, 277, 281], "answer": [4, 18, 20, 50, 59, 63, 81, 84, 86, 89, 95, 99, 178, 201, 205, 217, 218, 220, 226, 228, 243, 249, 279, 281, 285], "made": [4, 7, 10, 11, 12, 18, 20, 28, 53, 55, 59, 60, 65, 68, 69, 72, 75, 76, 86, 89, 95, 99, 101, 123, 134, 137, 140, 192, 195, 199, 201, 203, 204, 208, 209, 215, 216, 217, 220, 224, 226, 227, 228, 241, 246, 249, 262, 280], "lightli": 4, "fix": [4, 6, 9, 10, 41, 50, 52, 55, 57, 60, 64, 67, 71, 88, 102, 103, 105, 114, 117, 120, 125, 134, 140, 157, 162, 166, 169, 173, 178, 183, 187, 191, 192, 194, 198, 201, 203, 204, 205, 208, 214, 218, 226, 228, 246, 253, 255], "worth": [4, 18, 20, 183, 258, 260], "pain": 4, "frustrat": 4, "go": [4, 5, 6, 7, 20, 31, 40, 41, 50, 60, 64, 65, 84, 118, 123, 125, 138, 140, 141, 167, 178, 187, 194, 203, 204, 215, 218, 224, 277, 279, 280, 283, 285], "seek": [4, 226], "stabl": [4, 6, 20, 59, 87, 95, 101, 105, 109, 274], "done": [4, 6, 10, 11, 12, 16, 20, 35, 36, 38, 39, 40, 41, 50, 52, 57, 59, 60, 61, 64, 67, 70, 71, 84, 86, 90, 95, 99, 117, 123, 125, 131, 138, 140, 159, 168, 169, 170, 173, 175, 176, 183, 189, 191, 192, 194, 195, 197, 201, 204, 205, 207, 208, 209, 217, 220, 221, 224, 226, 227, 228, 233, 234, 239, 240, 243, 247, 257, 258, 274, 277, 279, 280, 281], "exist": [4, 10, 11, 16, 18, 20, 27, 29, 39, 40, 43, 50, 59, 63, 69, 71, 74, 75, 76, 77, 86, 89, 95, 99, 105, 163, 189, 192, 194, 195, 196, 197, 201, 203, 208, 215, 216, 218, 221, 224, 226, 227, 239, 247, 258, 279, 281, 286], "necessarili": [4, 6, 18, 37, 59, 60, 61, 84, 86, 89, 118, 195, 196, 203, 204, 206, 220, 224, 226, 227], "supplant": 4, "old": [4, 10, 11, 12, 59, 60, 61, 87, 137, 142, 177, 178, 188, 194, 195, 199, 208, 209, 220, 224, 227, 229, 274], "sometim": [4, 6, 7, 11, 12, 18, 20, 40, 41, 59, 64, 67, 83, 84, 109, 133, 137, 165, 173, 192, 195, 198, 203, 208, 210, 215, 217, 221, 224, 226, 237, 246, 274, 281], "alongsid": [4, 10, 20, 92], "newer": [4, 11, 191, 226], "solveset": [4, 20, 27, 29, 140, 206, 222, 223, 226, 265, 286], "superior": [4, 208], "replac": [4, 6, 10, 11, 12, 18, 39, 41, 50, 58, 59, 60, 63, 64, 65, 67, 69, 73, 86, 89, 90, 95, 99, 100, 101, 113, 115, 117, 140, 162, 168, 183, 195, 201, 204, 205, 209, 215, 217, 218, 220, 224, 226, 227, 234, 235, 246, 247, 249, 274, 283], "older": [4, 7, 11, 82, 123, 198, 208, 226], "solv": [4, 6, 10, 11, 12, 13, 16, 18, 20, 21, 41, 43, 55, 58, 59, 67, 72, 84, 86, 90, 91, 95, 102, 104, 105, 117, 118, 119, 123, 126, 127, 130, 132, 133, 135, 137, 140, 176, 197, 201, 205, 206, 207, 208, 210, 220, 221, 223, 224, 225, 228, 270, 275, 276, 279, 281, 284], "remain": [4, 10, 11, 20, 35, 36, 41, 50, 51, 53, 55, 59, 60, 65, 84, 90, 99, 101, 110, 123, 172, 189, 191, 192, 203, 204, 205, 214, 217, 218, 224, 225, 226, 228, 230, 234, 243, 246, 247, 257, 262, 274, 277, 279, 280, 281], "intact": [4, 10, 41, 240], "cogniz": 4, "properti": [4, 11, 15, 20, 26, 35, 36, 39, 40, 41, 42, 43, 47, 48, 50, 51, 52, 53, 54, 58, 59, 60, 61, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 82, 84, 86, 90, 92, 95, 99, 102, 103, 105, 106, 109, 114, 117, 118, 120, 122, 138, 140, 142, 144, 147, 148, 151, 152, 157, 158, 159, 161, 162, 169, 171, 173, 175, 178, 180, 181, 183, 184, 185, 189, 192, 193, 194, 196, 197, 198, 199, 201, 203, 204, 207, 210, 211, 214, 215, 216, 218, 221, 224, 227, 228, 233, 234, 239, 241, 242, 253, 256, 257, 258, 260, 262, 281], "attr": [4, 41], "imposs": [4, 6, 10, 11, 20, 59, 198, 217, 224, 225, 237, 277, 285], "later": [4, 10, 16, 41, 50, 84, 89, 90, 113, 119, 120, 125, 127, 128, 135, 137, 138, 140, 147, 182, 191, 198, 201, 207, 208, 209, 218, 220, 224, 243, 257, 274, 275, 277, 279, 280, 285], "unsur": [4, 6], "about": [4, 5, 6, 7, 10, 11, 12, 13, 16, 18, 19, 20, 26, 29, 30, 31, 33, 34, 36, 37, 40, 41, 50, 51, 52, 53, 59, 63, 65, 67, 69, 70, 71, 73, 74, 75, 79, 81, 85, 86, 88, 95, 99, 102, 103, 109, 113, 114, 115, 117, 118, 119, 120, 122, 123, 127, 137, 138, 168, 170, 171, 173, 177, 182, 183, 191, 192, 193, 195, 197, 198, 203, 205, 208, 210, 215, 220, 221, 222, 224, 228, 232, 233, 239, 240, 241, 242, 243, 244, 253, 255, 257, 260, 261, 268, 271, 274, 276, 277, 279, 280, 281, 285], "mark": [4, 6, 7, 107, 146, 158, 221, 237, 242, 244], "explicitli": [4, 10, 11, 18, 20, 41, 50, 51, 59, 60, 62, 65, 67, 72, 76, 92, 95, 100, 109, 123, 182, 183, 194, 196, 198, 199, 201, 204, 208, 220, 224, 226, 244, 277, 281, 284, 286], "privat": [4, 6, 59, 60, 123, 194, 241], "experiment": [4, 220], "With": [4, 12, 19, 31, 41, 58, 59, 63, 84, 99, 126, 127, 128, 134, 136, 137, 146, 170, 173, 192, 194, 195, 196, 198, 199, 206, 207, 208, 215, 220, 229, 246, 279, 280], "being": [4, 7, 10, 11, 12, 14, 18, 19, 37, 39, 41, 50, 51, 57, 58, 59, 60, 64, 65, 67, 69, 71, 72, 75, 76, 84, 89, 90, 95, 96, 99, 102, 103, 105, 113, 122, 123, 125, 137, 138, 140, 141, 169, 178, 185, 189, 191, 192, 193, 194, 195, 197, 198, 203, 204, 205, 207, 208, 217, 218, 220, 221, 224, 225, 226, 227, 228, 234, 237, 239, 243, 244, 246, 247, 249, 253, 258, 262, 279, 281], "decid": [4, 6, 16, 18, 19, 20, 40, 58, 90, 113, 137, 166, 177, 198, 201, 203, 204, 208, 224, 227, 241, 281], "reason": [4, 7, 10, 11, 14, 18, 19, 20, 27, 41, 51, 57, 59, 63, 67, 84, 87, 93, 95, 118, 119, 123, 125, 130, 133, 137, 144, 178, 188, 192, 198, 201, 202, 205, 208, 216, 218, 220, 224, 227, 237, 243, 244, 246, 247, 274, 275, 279, 280, 281], "confus": [4, 7, 10, 11, 18, 24, 59, 64, 89, 146, 192, 196, 204, 227, 274, 275, 277], "unnecessari": [4, 6, 7, 37, 41, 204, 207, 228, 239, 278], "redund": [4, 18, 50, 57, 89, 95, 224, 241], "usabl": [4, 198, 199, 208, 227, 279], "breakag": 4, "serious": 4, "taken": [4, 11, 41, 42, 47, 50, 57, 58, 59, 64, 65, 67, 76, 90, 99, 109, 111, 113, 114, 137, 140, 170, 176, 183, 187, 193, 194, 198, 203, 204, 208, 211, 215, 217, 218, 227, 228, 233, 241, 246, 253], "commun": [4, 7, 31, 193, 224, 226, 228, 281], "inde": [4, 16, 20, 47, 50, 58, 84, 195, 218, 224, 235, 239, 279], "second": [4, 7, 10, 11, 12, 16, 18, 19, 20, 23, 25, 26, 29, 32, 36, 39, 41, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 67, 69, 72, 73, 75, 86, 95, 99, 100, 102, 103, 107, 109, 110, 113, 114, 117, 118, 123, 127, 130, 132, 133, 134, 136, 138, 144, 146, 147, 150, 154, 159, 162, 167, 168, 170, 171, 176, 178, 180, 182, 183, 184, 191, 192, 194, 197, 198, 201, 202, 203, 204, 208, 210, 218, 220, 221, 224, 226, 227, 228, 229, 230, 246, 247, 253, 256, 257, 258, 270, 274, 279, 280, 281], "know": [4, 6, 7, 10, 11, 12, 18, 19, 20, 26, 28, 29, 34, 36, 40, 51, 59, 60, 63, 71, 76, 84, 86, 95, 99, 120, 123, 141, 167, 171, 175, 176, 178, 182, 183, 191, 192, 194, 204, 205, 207, 208, 218, 220, 224, 226, 227, 228, 242, 246, 247, 258, 274, 275, 277, 278, 279, 280, 283, 285], "count": [4, 7, 11, 51, 58, 59, 60, 64, 69, 89, 95, 98, 99, 168, 204, 216, 217, 220, 227, 228, 234, 243, 246], "basi": [4, 59, 61, 88, 92, 95, 114, 130, 132, 158, 167, 168, 170, 173, 175, 178, 181, 182, 183, 189, 191, 193, 195, 197, 199, 204, 207, 218, 220, 226, 227, 229, 234, 256, 257, 260, 283], "exact": [4, 10, 11, 12, 18, 20, 27, 37, 58, 59, 60, 63, 69, 74, 81, 84, 86, 90, 95, 102, 140, 167, 198, 199, 201, 204, 215, 220, 224, 226, 239, 249, 277, 279, 284], "rule": [4, 7, 10, 16, 18, 20, 41, 50, 51, 58, 59, 67, 82, 84, 86, 89, 90, 95, 102, 123, 154, 157, 178, 183, 189, 192, 193, 205, 207, 208, 209, 214, 218, 220, 224, 234, 246, 247, 260, 277, 280], "doesn": [4, 6, 10, 12, 20, 41, 83, 123, 127, 137, 140, 192, 196, 205, 207, 217, 220, 227, 286], "constitut": [4, 7, 11, 86, 99, 208], "yet": [4, 5, 12, 18, 20, 34, 36, 39, 40, 63, 86, 137, 153, 195, 198, 199, 203, 205, 207, 216, 224, 227, 275], "fulli": [4, 6, 10, 18, 50, 59, 76, 86, 89, 101, 102, 103, 117, 123, 140, 173, 191, 198, 199, 205, 215, 228, 234, 250], "codifi": 4, "clean": [4, 239], "distinct": [4, 7, 11, 14, 18, 20, 28, 41, 50, 51, 59, 60, 64, 72, 84, 89, 95, 99, 122, 191, 198, 203, 204, 208, 216, 218, 285], "well": [4, 6, 7, 10, 11, 12, 14, 16, 18, 20, 31, 37, 39, 40, 41, 42, 43, 51, 58, 59, 64, 65, 67, 86, 90, 93, 95, 105, 110, 113, 117, 123, 125, 127, 128, 137, 163, 172, 175, 176, 182, 191, 193, 194, 195, 197, 198, 199, 201, 203, 208, 215, 216, 217, 218, 220, 224, 226, 227, 239, 240, 257, 258, 262, 277, 279, 280, 285], "categor": [4, 95, 195], "issu": [4, 7, 9, 10, 11, 12, 19, 20, 23, 24, 25, 26, 27, 28, 31, 32, 39, 58, 59, 76, 86, 89, 95, 100, 119, 133, 153, 190, 193, 202, 203, 205, 208, 216, 217, 226, 227, 239, 241, 243, 244, 246, 249, 270, 276, 277, 280, 285], "here": [4, 6, 7, 10, 11, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 30, 31, 35, 36, 41, 42, 43, 48, 49, 50, 51, 57, 58, 59, 60, 61, 63, 64, 65, 67, 75, 76, 77, 81, 82, 84, 86, 89, 90, 95, 98, 99, 100, 101, 102, 105, 109, 113, 118, 123, 124, 125, 130, 131, 132, 135, 137, 138, 140, 141, 163, 168, 173, 182, 188, 189, 191, 192, 194, 195, 198, 199, 201, 203, 204, 205, 208, 209, 215, 217, 218, 220, 221, 224, 226, 227, 228, 232, 233, 240, 241, 243, 244, 246, 247, 258, 260, 262, 273, 274, 275, 277, 279, 280, 281, 283, 284, 285], "guidelin": [4, 8, 29, 224], "exhaust": [4, 18, 218, 246, 278], "alwai": [4, 6, 7, 10, 11, 12, 18, 19, 20, 26, 31, 33, 40, 50, 51, 58, 59, 60, 61, 63, 65, 67, 69, 71, 74, 75, 83, 84, 86, 89, 90, 95, 98, 99, 105, 109, 110, 122, 123, 125, 127, 131, 141, 173, 175, 178, 179, 189, 191, 195, 196, 198, 199, 201, 203, 204, 208, 209, 210, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 235, 239, 241, 246, 247, 253, 255, 260, 275, 277, 278, 279, 280, 285], "posit": [4, 10, 11, 12, 18, 19, 20, 25, 34, 35, 36, 37, 38, 40, 41, 42, 43, 48, 50, 51, 52, 54, 55, 58, 59, 60, 61, 63, 64, 65, 67, 69, 71, 72, 75, 84, 86, 88, 89, 90, 91, 95, 96, 98, 99, 102, 103, 105, 109, 111, 117, 120, 123, 125, 127, 130, 132, 134, 137, 138, 140, 142, 145, 147, 151, 168, 171, 173, 184, 185, 187, 189, 191, 192, 195, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 213, 214, 216, 217, 218, 220, 221, 224, 226, 227, 228, 229, 234, 246, 253, 256, 257, 258, 260, 262, 263, 281, 285, 286], "convent": [4, 6, 7, 9, 20, 50, 51, 55, 58, 59, 60, 64, 65, 67, 69, 74, 84, 86, 89, 101, 102, 103, 105, 109, 112, 125, 140, 142, 146, 167, 168, 170, 175, 176, 189, 194, 208, 224, 225, 227, 228, 234, 262, 277, 285], "defin": [4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 29, 32, 33, 35, 36, 39, 41, 42, 43, 49, 50, 51, 54, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 82, 84, 86, 87, 90, 92, 95, 99, 102, 103, 107, 113, 114, 117, 120, 122, 123, 125, 126, 130, 132, 133, 134, 138, 140, 141, 144, 150, 152, 154, 159, 162, 168, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 210, 211, 214, 215, 216, 218, 220, 221, 224, 226, 227, 228, 229, 233, 234, 240, 241, 242, 247, 248, 249, 253, 255, 256, 257, 258, 259, 260, 262, 263, 277, 279, 285], "And": [4, 10, 12, 19, 20, 22, 23, 35, 50, 51, 58, 59, 60, 67, 84, 89, 90, 95, 98, 117, 145, 192, 194, 196, 204, 205, 208, 216, 220, 221, 226, 227, 228, 246, 247, 258, 285], "aren": [4, 10, 11, 20, 41, 59, 123, 207, 227], "don": [4, 10, 12, 19, 20, 36, 41, 84, 89, 95, 100, 101, 113, 123, 182, 191, 192, 198, 208, 218, 227, 237, 242, 262, 274, 275, 279, 280, 285], "form": [4, 7, 10, 11, 16, 18, 20, 26, 27, 33, 36, 37, 38, 39, 41, 42, 49, 50, 51, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 72, 75, 79, 81, 82, 84, 86, 88, 90, 92, 94, 95, 99, 101, 102, 103, 105, 106, 109, 113, 114, 117, 118, 119, 122, 123, 125, 127, 130, 132, 133, 134, 135, 136, 138, 140, 141, 150, 153, 154, 155, 157, 167, 168, 171, 173, 175, 178, 181, 182, 183, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 233, 234, 239, 240, 246, 253, 256, 257, 259, 260, 262, 268, 275, 279, 280, 281, 284, 285, 286], "equival": [4, 10, 11, 12, 14, 18, 19, 20, 26, 33, 37, 41, 42, 49, 50, 55, 59, 60, 63, 65, 67, 84, 86, 95, 99, 101, 106, 107, 109, 117, 123, 156, 167, 170, 173, 176, 183, 188, 192, 194, 195, 196, 198, 199, 203, 204, 208, 215, 216, 220, 221, 224, 226, 227, 229, 230, 233, 234, 243, 247, 249, 250], "intern": [4, 10, 11, 12, 18, 19, 23, 39, 41, 42, 50, 59, 62, 63, 64, 67, 75, 76, 79, 91, 95, 99, 103, 105, 107, 125, 137, 146, 167, 168, 178, 195, 197, 199, 200, 202, 204, 206, 208, 218, 220, 223, 224, 225, 226, 227, 228, 232, 234, 237, 241, 243, 246, 271, 280, 284], "Such": [4, 6, 18, 41, 59, 75, 127, 195, 196, 203, 209, 217, 218, 220, 274, 280], "prefix": [4, 41, 59, 95, 99, 177, 180, 181, 198, 201, 205, 208, 221, 224, 240, 241, 246, 270], "underscor": [4, 6, 10, 59, 95, 224, 234, 242], "_": [4, 6, 7, 10, 12, 14, 16, 20, 35, 36, 40, 47, 48, 50, 51, 52, 55, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 84, 86, 89, 90, 91, 92, 93, 95, 97, 99, 101, 109, 135, 138, 140, 152, 173, 178, 182, 188, 191, 193, 199, 204, 207, 208, 209, 211, 215, 216, 217, 218, 220, 221, 224, 225, 226, 229, 246, 256, 258, 284], "univers": [4, 11, 41, 193, 202, 216, 221, 226, 227], "adher": [4, 7, 84], "codebas": [4, 10, 18, 198, 237], "anyth": [4, 6, 7, 10, 12, 20, 39, 41, 59, 60, 70, 74, 95, 123, 147, 157, 205, 208, 214, 216, 220, 224, 226, 240, 246, 249, 277], "were": [4, 7, 10, 11, 12, 14, 18, 20, 40, 51, 53, 59, 60, 65, 76, 84, 90, 95, 99, 100, 101, 113, 122, 137, 182, 189, 192, 195, 201, 202, 203, 204, 207, 208, 209, 217, 220, 226, 246, 247, 249, 277, 279, 280, 284, 285], "incorrect": [4, 7, 10, 19, 20, 27, 50, 59, 69, 99, 107, 187, 199, 224, 227, 240, 243, 244], "bug": [4, 6, 18, 20, 25, 28, 31, 39, 60, 198, 216, 224, 227, 277], "despit": [4, 29, 59, 285], "sai": [4, 7, 11, 12, 16, 18, 42, 49, 58, 59, 60, 88, 113, 118, 123, 133, 140, 178, 191, 192, 195, 196, 197, 201, 203, 207, 208, 215, 218, 221, 224, 226, 227, 228, 247, 274, 279, 285], "befor": [4, 6, 10, 11, 12, 18, 19, 20, 29, 31, 41, 50, 51, 53, 55, 59, 60, 61, 67, 87, 90, 95, 99, 101, 102, 103, 113, 119, 123, 125, 126, 127, 130, 131, 137, 140, 142, 173, 182, 188, 192, 196, 198, 203, 204, 208, 209, 215, 216, 220, 221, 224, 226, 227, 228, 235, 239, 242, 246, 247, 257, 278, 279, 280, 285], "recent": [4, 10, 12, 15, 18, 19, 20, 23, 25, 26, 27, 28, 29, 34, 35, 36, 41, 42, 51, 59, 60, 63, 67, 69, 86, 89, 90, 91, 92, 93, 95, 97, 98, 101, 109, 193, 195, 198, 199, 201, 204, 207, 215, 216, 224, 226, 227, 237, 240, 242, 244, 246, 247, 249, 277, 281], "best": [4, 8, 12, 25, 27, 30, 31, 41, 59, 67, 84, 86, 100, 172, 194, 205, 208, 217, 218, 220, 224, 227, 232, 240, 273, 277, 278, 284, 285], "determin": [4, 7, 10, 11, 12, 14, 16, 18, 19, 20, 24, 25, 26, 28, 34, 36, 37, 38, 39, 41, 42, 43, 50, 59, 60, 61, 62, 63, 65, 69, 70, 72, 74, 75, 86, 87, 88, 92, 95, 99, 101, 102, 103, 109, 115, 117, 119, 120, 122, 132, 138, 141, 152, 165, 167, 169, 170, 173, 176, 178, 183, 189, 194, 195, 196, 197, 201, 203, 208, 214, 215, 216, 218, 220, 221, 223, 224, 226, 227, 228, 232, 244, 246, 253, 260, 263, 277, 285], "someth": [4, 6, 7, 10, 11, 12, 18, 19, 20, 29, 39, 41, 59, 60, 63, 69, 84, 89, 90, 95, 99, 113, 123, 124, 140, 166, 179, 182, 194, 198, 199, 207, 215, 216, 220, 224, 227, 239, 241, 247, 274, 277, 279, 280, 283], "re": [4, 12, 20, 38, 39, 41, 50, 51, 59, 60, 63, 65, 67, 84, 86, 95, 183, 185, 189, 195, 201, 208, 209, 210, 216, 217, 218, 224, 226, 239, 256, 258, 275, 277, 280], "harm": 4, "even": [4, 6, 7, 11, 12, 15, 18, 20, 24, 27, 28, 29, 34, 35, 36, 37, 38, 41, 42, 47, 50, 51, 58, 59, 60, 63, 64, 65, 67, 71, 75, 84, 86, 89, 90, 95, 98, 99, 110, 123, 133, 158, 169, 176, 178, 183, 193, 196, 197, 198, 199, 201, 203, 204, 205, 208, 209, 216, 217, 218, 220, 221, 224, 226, 227, 235, 239, 262, 274, 275, 277, 279, 280, 285, 286], "might": [4, 6, 10, 11, 12, 14, 18, 19, 20, 23, 27, 39, 59, 63, 65, 72, 81, 84, 92, 95, 99, 101, 113, 123, 124, 140, 153, 183, 191, 194, 198, 199, 204, 205, 208, 209, 216, 217, 218, 220, 221, 226, 227, 228, 240, 241, 244, 246, 249, 274, 277, 279, 280, 282, 285], "while": [4, 6, 10, 11, 12, 18, 20, 22, 23, 29, 40, 41, 42, 50, 51, 52, 55, 58, 59, 60, 61, 63, 64, 65, 69, 73, 75, 83, 89, 90, 95, 99, 100, 101, 102, 105, 114, 117, 119, 123, 127, 137, 157, 178, 183, 189, 195, 203, 206, 208, 224, 227, 239, 241, 243, 246, 262, 274, 280, 281], "peopl": [4, 6, 62, 67, 86, 95, 178, 228], "upgrad": [4, 32], "immedi": [4, 18, 26, 50, 59, 84, 89, 173, 195, 198, 240, 247], "fire": 4, "uncondition": 4, "correct": [4, 6, 7, 10, 12, 19, 20, 24, 26, 41, 48, 50, 56, 58, 59, 63, 65, 83, 84, 86, 95, 99, 109, 123, 137, 191, 192, 201, 204, 215, 221, 224, 226, 227, 232, 240, 246, 277, 284], "question": [4, 6, 7, 16, 18, 58, 61, 69, 76, 84, 86, 89, 99, 113, 175, 178, 182, 195, 198, 203, 218, 227, 246, 249], "read": [4, 6, 7, 9, 10, 20, 29, 51, 65, 84, 99, 103, 140, 191, 192, 197, 198, 199, 205, 208, 221, 234, 235, 243, 250, 278, 284, 285], "previou": [4, 6, 10, 20, 43, 48, 49, 50, 51, 54, 59, 64, 65, 86, 89, 90, 98, 114, 137, 175, 191, 192, 201, 214, 221, 225, 229, 246, 278, 280, 285], "unchang": [4, 10, 11, 20, 50, 51, 59, 86, 95, 109, 204, 208, 214, 217, 220, 227, 274], "dure": [4, 10, 12, 32, 41, 59, 60, 90, 95, 99, 101, 114, 118, 140, 141, 191, 203, 208, 217, 226, 227, 244, 246], "period": [4, 6, 10, 25, 39, 59, 60, 65, 84, 99, 137, 147, 169, 176, 203, 208, 211, 214, 223, 227, 228, 246], "silenc": [4, 237, 244], "filterwarn": [4, 10], "caus": [4, 7, 10, 11, 20, 31, 59, 60, 63, 65, 95, 123, 131, 137, 191, 208, 217, 224, 225, 226, 243, 244, 281], "anoth": [4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 23, 25, 26, 27, 28, 37, 40, 41, 51, 56, 58, 59, 60, 61, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 84, 86, 92, 95, 99, 102, 103, 114, 120, 134, 162, 178, 180, 183, 187, 191, 192, 194, 196, 198, 199, 201, 203, 204, 205, 208, 209, 215, 216, 218, 224, 226, 227, 228, 240, 241, 247, 253, 257, 258, 262, 274, 277, 279, 280, 285, 286], "over": [4, 7, 8, 10, 12, 15, 20, 24, 30, 33, 39, 40, 41, 42, 50, 51, 54, 58, 59, 60, 61, 62, 63, 64, 73, 75, 82, 84, 88, 89, 92, 95, 96, 99, 102, 103, 111, 117, 123, 140, 141, 152, 168, 171, 173, 177, 178, 189, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 211, 213, 215, 220, 221, 223, 224, 226, 227, 228, 229, 232, 233, 242, 246, 247, 253, 256, 260, 263, 279, 283, 285], "defeat": [4, 224], "three": [4, 11, 12, 14, 16, 18, 20, 28, 33, 37, 41, 50, 51, 52, 55, 59, 60, 64, 67, 69, 73, 74, 75, 84, 88, 89, 90, 102, 103, 117, 122, 126, 129, 130, 131, 146, 168, 170, 175, 183, 187, 191, 192, 193, 194, 195, 196, 199, 201, 204, 208, 218, 220, 221, 226, 227, 228, 239, 253, 255, 260, 263, 277, 280, 285], "natur": [4, 10, 12, 18, 26, 33, 37, 41, 42, 50, 59, 60, 64, 65, 93, 99, 123, 175, 177, 178, 195, 198, 199, 201, 203, 205, 208, 216, 217, 221, 227, 228, 246, 263, 280, 285], "heavili": [4, 215, 225], "consider": [4, 19, 59, 100, 113, 198, 207, 216, 221, 224, 257], "easi": [4, 11, 47, 51, 59, 67, 84, 100, 120, 127, 133, 191, 195, 198, 203, 208, 215, 218, 221, 224, 227, 232, 233, 234, 274, 275, 277, 278, 279, 280, 281, 284], "account": [4, 11, 65, 95, 211, 220, 224], "nonetheless": [4, 60, 175, 220, 224], "deprecat": 4, "won": [4, 12, 20, 41, 220, 227, 280], "until": [4, 16, 18, 23, 24, 25, 26, 27, 28, 32, 51, 53, 59, 60, 69, 86, 95, 99, 137, 192, 201, 204, 217, 224, 277], "come": [4, 26, 31, 50, 55, 57, 58, 59, 65, 67, 84, 86, 95, 100, 113, 123, 125, 135, 176, 192, 195, 198, 201, 203, 204, 218, 221, 224, 227, 237, 239, 244, 247, 277, 279, 280, 283, 285], "minimum": [4, 10, 25, 39, 41, 50, 51, 53, 55, 59, 60, 63, 65, 95, 113, 118, 125, 157, 182, 194, 196, 201, 227, 228, 242, 275], "longer": [4, 6, 12, 17, 59, 69, 99, 127, 137, 196, 201, 208, 217, 220, 246, 249, 277, 285], "especi": [4, 6, 20, 29, 58, 95, 113, 123, 140, 167, 182, 192, 220, 224, 226, 239, 274, 275], "hard": [4, 8, 11, 18, 51, 60, 95, 99, 123, 173, 198, 208, 215, 224, 227, 277, 279], "migrat": 4, "lengthen": 4, "impos": [4, 103], "signific": [4, 12, 18, 41, 59, 60, 63, 86, 95, 113, 138, 167, 198, 227, 247, 280], "mainten": [4, 36], "burden": [4, 208], "keep": [4, 6, 12, 15, 20, 55, 59, 60, 63, 64, 67, 84, 95, 118, 126, 134, 138, 157, 173, 194, 197, 198, 199, 204, 215, 216, 218, 220, 224, 226, 234, 262, 275, 280], "firstli": [4, 10, 18, 20, 218], "regular": [4, 10, 12, 18, 19, 42, 47, 59, 60, 63, 67, 75, 81, 82, 86, 99, 123, 167, 198, 205, 224, 234, 239, 284, 285], "schedul": 4, "Being": [4, 55, 69, 75, 198], "assur": [4, 99, 204], "suffici": [4, 6, 18, 40, 41, 50, 51, 55, 59, 95, 178, 211, 215, 224, 228, 243, 285], "regardless": [4, 6, 10, 20, 51, 59, 86, 99, 201, 216, 220, 246, 257, 262, 285], "often": [4, 6, 11, 18, 19, 20, 27, 40, 41, 42, 49, 59, 67, 69, 71, 84, 86, 95, 99, 100, 109, 133, 137, 182, 191, 192, 195, 196, 198, 201, 204, 209, 215, 216, 221, 224, 228, 246, 274, 279, 280, 281, 285], "happen": [4, 6, 10, 11, 16, 18, 19, 20, 25, 33, 41, 51, 58, 59, 63, 71, 74, 83, 117, 168, 172, 178, 195, 201, 203, 204, 207, 216, 220, 224, 228, 247, 258, 277, 284, 285], "secondli": [4, 20, 218], "rigor": [4, 67, 192, 241], "semant": [4, 11, 18, 92, 226], "surfac": [4, 65, 67, 73, 84, 103, 117, 142, 146, 173, 194, 220, 253], "enough": [4, 6, 23, 25, 50, 59, 63, 86, 95, 98, 99, 109, 123, 140, 199, 201, 208, 224, 275, 277], "encod": [4, 10, 43, 51, 57, 60, 89, 208, 239, 243, 246], "backport": 4, "prior": [4, 10, 31, 187, 204, 220, 281], "extrem": [4, 26, 50, 63, 69, 75, 86, 92, 105, 137, 192, 220, 228], "accur": [4, 10, 12, 16, 20, 39, 50, 59, 63, 64, 81, 86, 106, 194, 215, 274, 281], "model": [4, 11, 63, 89, 99, 109, 119, 125, 127, 128, 129, 145, 204, 217, 228], "final": [4, 6, 7, 10, 18, 20, 40, 51, 58, 59, 65, 67, 84, 86, 89, 95, 99, 103, 107, 117, 118, 125, 130, 132, 133, 135, 138, 153, 165, 168, 170, 171, 173, 175, 176, 178, 183, 191, 192, 195, 198, 201, 203, 210, 216, 217, 218, 220, 221, 224, 226, 227, 234, 246, 247, 278, 279, 280], "temptat": [4, 217, 285], "fudg": 4, "earli": [4, 59, 99, 162, 221], "acceler": [4, 100, 120, 125, 130, 132, 137, 138, 140, 176, 183, 187, 189, 243, 262], "myst": [4, 7], "checkbox": 4, "tag": [4, 208, 226], "nest": [4, 24, 59, 61, 65, 67, 86, 90, 109, 196, 198, 201, 208, 218, 220, 223, 227, 228, 229, 230, 232, 235, 246, 247, 280], "ensur": [4, 12, 20, 23, 24, 25, 26, 28, 31, 59, 60, 63, 91, 95, 117, 138, 203, 204, 208, 239, 244, 247], "realli": [4, 10, 11, 16, 18, 19, 20, 59, 71, 99, 125, 175, 198, 207, 209, 215, 217, 218, 220, 224, 240, 249, 277, 279], "per": [4, 60, 95, 100, 105, 147, 183, 189, 194, 199, 204, 205, 253, 257, 259, 262], "everywher": [4, 11, 12, 59, 67, 84, 109, 189, 262], "doctest": [4, 6, 7, 12, 20, 52, 67, 95, 99, 125, 162, 173, 198, 204, 224, 239, 242, 244, 284], "sympy_deprecation_warn": [4, 237, 242, 244], "write": [4, 8, 10, 11, 16, 18, 19, 21, 32, 41, 48, 59, 60, 66, 67, 84, 86, 92, 140, 153, 191, 192, 196, 201, 203, 208, 217, 218, 221, 224, 227, 233, 239, 240, 241, 247, 278, 279, 280, 285], "multilin": [4, 208], "deprecated_since_vers": [4, 237, 242, 244], "active_deprecations_target": [4, 237, 242, 244], "target": [4, 6, 11, 39, 40, 41, 59, 99, 115, 153, 157, 158, 217, 220, 223, 226, 227, 237, 240, 241, 244, 285], "stacklevel": [4, 237, 242, 244], "line": [4, 6, 10, 11, 12, 16, 18, 31, 40, 41, 50, 51, 55, 60, 69, 70, 71, 73, 74, 75, 76, 81, 84, 86, 87, 88, 95, 99, 102, 107, 110, 123, 125, 131, 153, 183, 188, 189, 191, 193, 194, 208, 211, 218, 220, 224, 228, 229, 237, 239, 240, 241, 244, 247, 249, 260, 263, 271, 277], "visual": [4, 59, 99, 103, 109, 207, 220], "confirm": [4, 10, 50, 99, 224], "look": [4, 6, 7, 10, 12, 18, 19, 20, 32, 40, 41, 50, 59, 64, 65, 67, 80, 95, 99, 118, 123, 125, 133, 157, 167, 168, 171, 187, 194, 198, 199, 203, 208, 210, 211, 215, 218, 220, 221, 224, 225, 239, 243, 247, 249, 258, 275, 280, 283, 284], "good": [4, 7, 11, 18, 20, 24, 29, 41, 59, 60, 63, 71, 84, 95, 99, 125, 137, 140, 195, 198, 199, 208, 215, 217, 218, 220, 224, 246, 274, 278, 281], "top": [4, 6, 7, 10, 11, 23, 41, 58, 59, 60, 75, 76, 86, 89, 95, 102, 103, 117, 122, 168, 175, 198, 208, 218, 224, 241, 242, 247, 263, 280], "relev": [4, 6, 7, 18, 41, 57, 72, 87, 88, 114, 118, 120, 125, 178, 188, 192, 198, 218, 224, 225, 234, 239, 261], "docstr": [4, 8, 10, 12, 20, 23, 40, 41, 52, 59, 81, 84, 86, 95, 99, 104, 108, 110, 116, 133, 138, 143, 160, 166, 167, 169, 186, 190, 204, 211, 214, 215, 217, 220, 224, 225, 226, 227, 233, 234, 239, 242, 247, 249, 254, 261, 264, 268, 270], "src": [4, 6, 7, 101, 224, 239, 244], "explan": [4, 7, 12, 14, 18, 21, 33, 34, 35, 36, 37, 38, 40, 41, 44, 47, 48, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 65, 67, 71, 81, 82, 84, 86, 90, 95, 99, 109, 112, 114, 115, 117, 118, 120, 131, 142, 144, 147, 150, 152, 154, 156, 168, 173, 193, 194, 195, 197, 199, 203, 204, 206, 210, 211, 213, 214, 215, 216, 218, 220, 221, 224, 226, 228, 229, 233, 234, 239, 242, 244, 247, 282], "cross": [4, 7, 8, 11, 59, 69, 75, 90, 95, 102, 103, 117, 131, 138, 140, 153, 183, 185, 191, 192, 221, 227, 253, 257, 259, 260], "xyz": [4, 71, 101, 102, 183, 192, 253, 255, 258], "header": [4, 41, 240, 241], "why": [4, 10, 12, 18, 41, 59, 192, 199, 205, 215, 218, 247, 278, 280, 281], "test": [4, 6, 7, 8, 11, 12, 17, 19, 20, 23, 24, 36, 37, 39, 40, 41, 46, 50, 51, 58, 59, 60, 66, 69, 74, 84, 90, 92, 95, 99, 153, 162, 166, 167, 168, 176, 192, 198, 199, 201, 203, 205, 216, 218, 221, 224, 225, 226, 227, 237, 240, 241, 242, 243, 244, 246, 247, 249, 264, 265, 272, 277, 279, 280], "warns_deprecated_sympi": [4, 237, 242, 244], "pr": [4, 10, 58, 117, 199, 201, 202, 204, 227], "merg": [4, 41, 50, 51, 59, 181, 208, 216, 228, 239, 246, 247], "wiki": [4, 5, 6, 7, 8, 12, 18, 20, 30, 33, 35, 36, 37, 39, 40, 41, 47, 48, 50, 51, 58, 59, 60, 61, 62, 64, 65, 67, 69, 71, 75, 76, 77, 86, 87, 88, 89, 90, 92, 95, 99, 107, 109, 112, 142, 144, 145, 146, 148, 149, 150, 154, 155, 156, 159, 161, 162, 171, 173, 177, 183, 185, 190, 194, 204, 211, 215, 216, 217, 221, 224, 227, 228, 241, 246, 253, 255, 259, 261, 263, 281, 282], "decor": [4, 20, 50, 59, 67, 237, 239, 244, 245, 248, 249, 272], "sympydeprecationwarn": [4, 10, 237, 239, 242, 244], "class": [4, 7, 8, 10, 11, 12, 17, 18, 19, 20, 25, 26, 29, 30, 33, 34, 35, 36, 37, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 101, 102, 105, 106, 107, 109, 114, 117, 118, 119, 120, 122, 123, 127, 128, 133, 134, 138, 140, 141, 142, 144, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 178, 179, 180, 181, 182, 186, 187, 188, 190, 195, 197, 198, 199, 201, 204, 205, 206, 207, 209, 210, 211, 214, 215, 216, 218, 220, 224, 225, 226, 227, 228, 233, 234, 235, 239, 240, 241, 242, 243, 244, 246, 247, 251, 254, 257, 258, 260, 261, 263, 264, 268, 270, 275, 277, 280, 285], "context": [4, 6, 7, 10, 14, 18, 20, 27, 34, 35, 36, 59, 61, 67, 86, 89, 123, 178, 198, 201, 203, 216, 237, 239, 244, 253], "manag": [4, 10, 31, 35, 36, 101, 153, 201, 220, 234, 237, 239, 244], "filter": [4, 10, 15, 25, 59, 60, 84, 145, 204, 237, 239, 244, 246], "emit": [4, 208, 237, 244], "assert": [4, 40, 48, 49, 50, 51, 59, 69, 71, 101, 137, 208, 216, 224, 225, 237, 244, 246], "separ": [4, 6, 10, 11, 12, 16, 19, 20, 23, 28, 40, 47, 59, 60, 65, 67, 84, 86, 95, 110, 117, 122, 137, 138, 141, 146, 170, 173, 182, 183, 194, 196, 199, 201, 204, 205, 208, 217, 220, 221, 224, 225, 227, 232, 237, 239, 243, 247, 249, 253, 277], "block": [4, 6, 10, 29, 41, 48, 50, 60, 90, 95, 117, 122, 123, 125, 128, 183, 192, 197, 221, 247, 257], "behavior1": 4, "behavior2": 4, "everyth": [4, 7, 12, 20, 41, 59, 61, 67, 86, 93, 111, 137, 169, 170, 194, 208, 280, 284], "ignore_warn": [4, 237, 242, 244, 247], "prevent": [4, 12, 25, 29, 41, 59, 65, 96, 99, 113, 197, 199, 204, 208, 220, 228, 237, 244, 276], "trigger": [4, 20, 51, 101, 173, 237], "twice": [4, 12, 41, 59, 61, 73, 99, 183, 185, 191, 204, 208, 243, 244, 253, 255, 275], "similar": [4, 5, 10, 12, 16, 18, 20, 51, 58, 59, 60, 63, 64, 65, 67, 70, 75, 76, 80, 89, 95, 100, 109, 123, 125, 127, 137, 138, 171, 189, 191, 192, 196, 198, 199, 201, 205, 215, 217, 218, 220, 224, 226, 229, 234, 237, 240, 243, 244, 253, 255, 257, 258, 262, 274, 279, 280, 281, 283, 285], "somewher": [4, 6, 7, 11, 41], "sign": [4, 6, 7, 11, 25, 29, 33, 38, 41, 55, 59, 60, 64, 65, 69, 75, 84, 86, 95, 99, 102, 103, 105, 109, 125, 146, 158, 183, 189, 191, 193, 201, 208, 213, 215, 220, 221, 226, 246, 260, 263, 278], "readi": [4, 18, 122, 198, 208, 224], "paragraph": [4, 6, 7, 20, 40], "metadata": [4, 40, 242, 244], "link": [4, 6, 7, 11, 12, 22, 26, 41, 60, 69, 75, 86, 110, 117, 126, 134, 240, 243, 244, 283], "rememb": [4, 6, 12, 20, 89, 95, 110, 113, 140, 191, 192, 208, 220, 226, 229, 247, 280, 285], "shown": [4, 6, 10, 11, 18, 19, 20, 48, 51, 58, 59, 63, 65, 67, 84, 101, 103, 107, 109, 113, 118, 120, 126, 127, 128, 134, 135, 136, 138, 182, 183, 191, 192, 194, 197, 198, 199, 204, 208, 224, 228, 244, 246, 257, 258, 278], "plain": [4, 6, 18, 67, 87, 188, 204, 208], "rst": [4, 6, 7, 11, 42, 224, 239], "markdown": [4, 8, 11], "markup": [4, 208], "clearli": [4, 6, 20, 99, 192, 198, 218, 281], "delin": 4, "newlin": [4, 95, 249], "charact": [4, 6, 7, 59, 60, 84, 87, 101, 153, 183, 188, 208, 224, 239, 241, 244, 249, 277, 279, 284], "full": [4, 6, 7, 8, 9, 10, 12, 14, 18, 20, 24, 30, 37, 39, 41, 50, 51, 59, 63, 67, 71, 72, 86, 92, 95, 101, 135, 136, 183, 198, 201, 202, 204, 208, 210, 220, 221, 279, 282, 285], "abc": [4, 6, 12, 14, 15, 20, 23, 25, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 41, 48, 50, 52, 58, 59, 60, 61, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 82, 83, 84, 86, 87, 89, 90, 92, 95, 98, 100, 107, 109, 111, 144, 146, 148, 149, 154, 171, 173, 174, 195, 197, 199, 201, 203, 204, 205, 208, 209, 210, 211, 213, 214, 215, 216, 217, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 233, 235, 240, 241, 242, 243, 244, 246, 247, 249, 253, 256, 257, 258, 263, 265, 277, 280, 284], "func": [4, 6, 11, 17, 20, 35, 39, 41, 59, 61, 64, 67, 78, 80, 86, 99, 162, 183, 201, 204, 208, 209, 220, 224, 225, 226, 237, 242, 244, 246, 247, 249, 252], "larger": [4, 7, 11, 20, 26, 41, 50, 51, 58, 59, 60, 67, 84, 92, 95, 99, 127, 131, 199, 205, 209, 215, 220, 226, 241, 243, 277, 285], "easier": [4, 11, 19, 28, 59, 103, 123, 125, 191, 199, 203, 205, 218, 224, 227, 241, 247, 257, 279, 285, 286], "exactli": [4, 6, 7, 10, 11, 12, 20, 29, 37, 43, 50, 59, 62, 63, 95, 101, 138, 193, 218, 220, 224, 227, 229, 243, 246, 247, 275, 277, 279, 284, 285], "direct": [4, 6, 7, 10, 11, 17, 33, 35, 36, 40, 44, 47, 50, 55, 58, 59, 61, 63, 65, 68, 72, 73, 74, 75, 89, 90, 95, 102, 103, 105, 113, 114, 117, 125, 127, 131, 140, 159, 183, 189, 191, 192, 195, 197, 198, 201, 205, 215, 218, 234, 237, 246, 253, 258, 259, 262], "syntax": [4, 6, 7, 10, 11, 12, 20, 34, 36, 51, 59, 86, 101, 123, 140, 170, 194, 198, 207, 208, 220, 226, 230, 249, 275, 277, 279, 284, 286], "paramet": [4, 7, 10, 11, 12, 27, 28, 33, 34, 36, 39, 41, 42, 50, 51, 55, 57, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 82, 84, 86, 87, 89, 90, 92, 95, 96, 98, 99, 101, 102, 105, 107, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 122, 123, 125, 140, 142, 144, 145, 146, 148, 149, 150, 152, 153, 154, 156, 157, 158, 161, 162, 163, 165, 167, 168, 170, 171, 172, 173, 174, 175, 183, 184, 185, 187, 188, 189, 192, 193, 194, 196, 197, 199, 201, 203, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 220, 221, 223, 224, 225, 226, 228, 229, 230, 233, 234, 237, 239, 240, 241, 243, 244, 246, 247, 253, 255, 256, 257, 258, 263, 275, 280], "short": [4, 7, 12, 32, 42, 49, 51, 55, 59, 60, 61, 62, 65, 93, 99, 113, 159, 178, 182, 192, 195, 202, 229, 239, 249, 280, 284], "renam": [4, 41, 86], "rest": [4, 10, 84, 87, 89, 93, 103, 111, 123, 127, 133, 178, 195, 198, 228, 246, 277, 278, 285], "left": [4, 7, 10, 16, 18, 20, 22, 23, 26, 39, 41, 42, 50, 51, 55, 59, 60, 61, 64, 65, 67, 75, 76, 82, 84, 86, 87, 89, 90, 95, 98, 99, 109, 114, 122, 138, 145, 152, 157, 161, 162, 165, 170, 183, 189, 193, 194, 195, 197, 204, 205, 206, 207, 208, 210, 211, 215, 216, 217, 218, 220, 224, 225, 226, 227, 228, 239, 240, 241, 243, 246, 260, 275, 279, 281, 285], "imaginari": [4, 6, 12, 18, 20, 25, 27, 33, 37, 38, 59, 63, 65, 67, 90, 140, 198, 199, 204, 208, 209, 216, 220, 227], "simplify_thi": [4, 6, 242], "expr": [4, 6, 11, 12, 18, 20, 25, 27, 29, 35, 36, 38, 39, 41, 51, 58, 61, 63, 65, 67, 69, 81, 84, 86, 89, 92, 95, 100, 101, 109, 113, 115, 123, 137, 150, 154, 156, 158, 162, 165, 168, 170, 171, 173, 180, 183, 185, 188, 194, 196, 197, 198, 199, 201, 203, 204, 205, 206, 208, 209, 210, 211, 213, 215, 217, 220, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 240, 241, 242, 244, 247, 253, 255, 256, 257, 258, 260, 274, 275, 277, 279, 280, 284, 285, 286], "simplifi": [4, 6, 11, 12, 16, 18, 19, 20, 26, 27, 34, 36, 38, 39, 58, 59, 61, 63, 64, 65, 67, 71, 76, 81, 84, 86, 89, 90, 91, 92, 95, 102, 109, 110, 115, 117, 119, 126, 127, 130, 131, 132, 137, 145, 152, 157, 172, 173, 180, 183, 189, 195, 203, 205, 207, 209, 214, 216, 217, 218, 221, 224, 225, 226, 227, 228, 242, 244, 247, 257, 259, 265, 274, 276, 277, 279, 280, 281], "def": [4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 35, 36, 40, 59, 64, 71, 89, 95, 99, 101, 131, 168, 198, 204, 208, 217, 220, 227, 242, 244, 246, 247, 250, 274, 277, 280, 281, 285], "ref": [4, 50, 65, 95, 107, 140, 213, 228, 242, 281], "is_this_zero": [4, 244], "y": [4, 6, 10, 11, 12, 14, 15, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 41, 42, 50, 51, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 82, 84, 86, 87, 88, 89, 90, 91, 92, 95, 99, 100, 101, 102, 103, 105, 107, 109, 114, 115, 117, 120, 123, 125, 126, 127, 128, 130, 131, 132, 134, 138, 140, 141, 150, 151, 154, 157, 162, 168, 170, 171, 173, 174, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 240, 241, 244, 246, 247, 249, 253, 256, 257, 258, 259, 260, 262, 263, 274, 275, 277, 279, 280, 284, 285, 286], "0": [4, 6, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 109, 110, 111, 112, 114, 115, 117, 118, 120, 123, 125, 126, 127, 128, 130, 132, 135, 136, 137, 138, 140, 141, 142, 145, 146, 147, 149, 152, 157, 158, 159, 162, 167, 168, 169, 170, 171, 172, 173, 174, 178, 180, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 239, 240, 242, 243, 244, 246, 247, 248, 253, 255, 256, 257, 258, 259, 260, 263, 274, 275, 277, 279, 280, 281, 284, 285, 286], "zero": [4, 11, 12, 14, 18, 19, 20, 26, 27, 33, 37, 38, 41, 49, 50, 51, 55, 58, 59, 62, 63, 64, 65, 67, 69, 73, 74, 75, 84, 86, 88, 89, 90, 92, 94, 95, 98, 99, 101, 102, 109, 117, 120, 123, 125, 128, 131, 134, 135, 136, 140, 145, 167, 171, 173, 175, 187, 189, 191, 192, 193, 195, 196, 197, 198, 199, 203, 204, 206, 208, 211, 215, 216, 218, 220, 221, 224, 225, 226, 227, 228, 229, 244, 246, 247, 257, 259, 260, 280, 286], "is_zero": [4, 18, 20, 74, 95, 195, 199, 204, 244, 281], "mail": [4, 10, 23, 24, 25, 26, 27, 28, 31, 208, 278], "summar": [4, 239, 285], "idea": [4, 11, 18, 19, 20, 44, 50, 57, 59, 60, 71, 77, 84, 86, 99, 110, 123, 173, 177, 178, 195, 197, 198, 217, 220, 221, 224, 227, 241, 247, 285], "fit": [4, 11, 40, 84, 95, 98, 99, 192, 208, 224, 249, 280], "put": [4, 6, 10, 11, 12, 16, 20, 23, 41, 55, 56, 59, 60, 61, 65, 89, 90, 95, 145, 150, 154, 169, 170, 204, 208, 209, 217, 218, 220, 224, 229, 235, 240, 281, 285], "word": [4, 7, 11, 20, 37, 55, 58, 59, 60, 65, 67, 89, 109, 118, 123, 138, 195, 198, 203, 220, 221, 224, 226, 241, 253, 258, 277], "global": [4, 6, 10, 34, 35, 36, 39, 41, 42, 59, 71, 84, 101, 157, 163, 183, 185, 194, 195, 198, 199, 201, 208, 221, 224, 225, 228, 239, 241, 242, 247, 256], "uniqu": [4, 10, 11, 39, 40, 42, 50, 53, 55, 59, 60, 61, 64, 67, 74, 77, 82, 86, 88, 89, 95, 99, 117, 162, 171, 183, 192, 195, 196, 198, 201, 203, 204, 209, 213, 220, 221, 224, 226, 227, 228, 232, 241, 246, 249, 257, 262, 277, 280], "across": [4, 7, 50, 57, 59, 70, 86, 103, 172, 173, 180, 194, 208, 243, 245, 246, 247, 283], "level": [4, 6, 7, 10, 11, 12, 18, 19, 23, 25, 41, 50, 57, 59, 65, 67, 86, 89, 95, 99, 113, 127, 140, 168, 173, 178, 182, 185, 192, 194, 197, 198, 206, 208, 217, 221, 227, 228, 232, 240, 241, 246, 280, 281, 283], "correspond": [4, 6, 7, 10, 16, 18, 19, 20, 24, 39, 40, 41, 42, 49, 50, 51, 53, 54, 55, 58, 59, 60, 61, 62, 65, 69, 70, 72, 73, 74, 75, 82, 84, 88, 89, 90, 95, 98, 99, 102, 103, 109, 115, 117, 118, 122, 123, 125, 127, 141, 145, 149, 163, 167, 168, 170, 174, 175, 178, 183, 187, 189, 193, 194, 196, 197, 198, 199, 201, 203, 204, 208, 214, 215, 218, 220, 221, 224, 225, 226, 227, 228, 230, 232, 233, 234, 241, 242, 243, 244, 246, 247, 249, 253, 255, 257, 258, 260, 262, 280, 286], "share": [4, 18, 20, 60, 99, 199, 203, 208, 228, 241], "__init__": [4, 6, 20, 59, 118, 203, 253, 255, 280], "func_nam": [4, 41, 65, 90, 249], "help": [4, 5, 6, 7, 18, 25, 32, 41, 49, 59, 67, 84, 86, 95, 99, 100, 102, 107, 123, 140, 148, 158, 192, 194, 203, 205, 208, 217, 218, 221, 224, 225, 228, 239, 240, 241, 247, 270, 278, 281], "rais": [4, 10, 12, 14, 18, 19, 20, 34, 36, 39, 41, 48, 51, 59, 60, 61, 63, 65, 68, 69, 72, 74, 75, 76, 84, 86, 90, 92, 95, 96, 98, 99, 107, 109, 147, 159, 189, 192, 195, 196, 197, 198, 199, 201, 203, 204, 205, 208, 210, 216, 220, 223, 224, 225, 226, 227, 228, 232, 234, 237, 239, 241, 244, 246, 247, 249, 250, 260, 281], "been": [4, 12, 18, 20, 39, 41, 42, 50, 51, 52, 55, 58, 59, 60, 65, 71, 84, 86, 95, 99, 100, 101, 117, 118, 123, 125, 133, 137, 138, 146, 158, 168, 170, 178, 182, 189, 190, 191, 192, 195, 198, 199, 203, 205, 206, 208, 210, 215, 218, 220, 225, 226, 227, 229, 238, 239, 241, 242, 244, 246, 249, 257, 260, 277, 278, 280, 281, 285], "simplfiy_thi": 4, "ident": [4, 11, 12, 20, 37, 40, 42, 49, 50, 51, 57, 59, 60, 64, 65, 75, 82, 88, 90, 92, 95, 110, 112, 117, 118, 138, 157, 159, 162, 178, 195, 196, 197, 201, 202, 203, 204, 208, 217, 220, 224, 227, 232, 234, 239, 246, 247, 249, 258, 277, 281, 285], "much": [4, 6, 10, 16, 18, 19, 20, 27, 40, 41, 44, 55, 63, 67, 81, 84, 86, 137, 181, 182, 191, 192, 193, 195, 198, 201, 204, 215, 218, 220, 224, 225, 226, 227, 241, 243, 277, 279, 285], "trivial": [4, 42, 50, 55, 58, 59, 60, 65, 74, 89, 92, 95, 99, 135, 173, 195, 196, 201, 204, 218, 221, 224, 227, 232], "furthermor": [4, 10, 20, 37, 59, 60, 89, 203, 217, 277, 279, 280], "particular": [4, 6, 10, 11, 12, 18, 19, 22, 24, 37, 42, 50, 59, 60, 63, 67, 70, 84, 86, 89, 92, 95, 99, 102, 105, 133, 157, 168, 196, 197, 198, 199, 201, 203, 204, 214, 216, 218, 220, 221, 224, 226, 227, 239, 241, 243, 281, 283, 285], "expr1": [4, 18, 109, 194, 226, 280], "expr2": [4, 18, 109, 194, 280], "dozen": [4, 11, 20, 285], "search": [4, 6, 39, 50, 51, 55, 57, 59, 65, 95, 99, 123, 195, 203, 204, 208, 217, 218, 220, 225, 228, 240], "upcom": 4, "bot": 4, "push": [5, 84], "respect": [5, 6, 10, 11, 12, 20, 34, 36, 37, 39, 40, 41, 42, 49, 50, 51, 54, 55, 57, 58, 59, 61, 64, 65, 67, 69, 71, 75, 76, 81, 82, 84, 86, 89, 90, 92, 95, 99, 101, 102, 103, 105, 109, 114, 115, 117, 120, 127, 134, 136, 138, 140, 147, 162, 175, 176, 177, 182, 183, 187, 189, 192, 193, 194, 195, 198, 201, 203, 204, 205, 208, 210, 211, 214, 216, 220, 224, 225, 226, 227, 228, 229, 233, 234, 239, 241, 253, 255, 256, 257, 258, 259, 260, 261, 262, 275, 285], "handbook": [5, 6, 42, 49, 50, 57, 67, 99], "internet": 5, "practic": [5, 8, 16, 18, 24, 27, 29, 48, 50, 60, 69, 134, 137, 140, 194, 195, 196, 198, 203, 205, 232, 277, 278], "project": [5, 7, 10, 41, 72, 73, 74, 88, 95, 139, 240, 241, 253], "purpos": [5, 6, 7, 8, 10, 11, 17, 18, 20, 40, 41, 50, 56, 59, 60, 86, 95, 123, 140, 178, 182, 192, 198, 201, 205, 207, 208, 215, 224, 227, 233, 243, 245, 247, 257, 258, 275, 285], "nn": 5, "brows": 5, "clone": [5, 31, 201], "download": [5, 7, 31, 40, 81, 202, 217, 224, 228, 253, 279], "origin": [5, 11, 12, 16, 18, 24, 31, 33, 50, 51, 52, 55, 58, 59, 60, 63, 64, 65, 67, 68, 70, 72, 74, 84, 86, 90, 95, 99, 107, 109, 110, 117, 127, 137, 140, 165, 168, 178, 184, 189, 194, 195, 199, 203, 204, 207, 208, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 234, 239, 246, 247, 253, 256, 257, 258, 259, 260, 262, 263, 285], "77": [5, 48, 67, 95, 99, 207, 208, 241], "mib": 5, "remot": [5, 59], "collabor": 5, "upstream": 5, "fetch": 5, "branch": [5, 19, 39, 59, 64, 65, 66, 67, 205, 218, 227, 280, 285], "checkout": [5, 40], "advantag": [5, 10, 14, 18, 20, 36, 39, 41, 59, 60, 64, 86, 89, 95, 99, 106, 177, 197, 198, 205, 216, 221, 224, 227, 243, 277, 279, 281, 285], "isol": [5, 39, 65, 199, 203, 204, 205, 226, 241], "wide": [5, 18, 87, 95, 140, 188, 198, 204, 208, 228], "flake8": 5, "usernam": 5, "easiest": [5, 7, 10, 11, 12, 59, 195, 198, 221, 247, 258, 274, 280, 285], "consult": [5, 42], "kwarg": [5, 12, 35, 36, 37, 41, 50, 51, 58, 59, 60, 61, 65, 67, 69, 70, 72, 73, 74, 75, 76, 81, 84, 86, 90, 91, 92, 93, 95, 97, 98, 107, 109, 115, 118, 127, 142, 151, 153, 157, 158, 162, 164, 166, 167, 169, 170, 171, 183, 187, 188, 194, 197, 199, 204, 208, 210, 214, 215, 216, 220, 224, 225, 226, 228, 229, 234, 239, 240, 242, 249, 258], "test_bas": [5, 239], "similari": 5, "qualiti": [5, 100, 208], "code_qu": 5, "liter": [6, 12, 20, 41, 49, 59, 87, 89, 101, 173, 180, 220], "occur": [6, 10, 11, 12, 50, 51, 59, 63, 67, 76, 84, 90, 101, 113, 117, 137, 182, 183, 191, 203, 211, 220, 225, 226, 229, 239, 246, 280], "definit": [6, 10, 11, 12, 19, 33, 37, 41, 42, 50, 51, 56, 58, 59, 61, 62, 64, 65, 67, 72, 75, 82, 84, 86, 90, 91, 92, 95, 99, 101, 117, 125, 130, 131, 138, 175, 178, 181, 183, 191, 192, 195, 196, 199, 204, 205, 208, 215, 228, 229, 240, 241, 242, 246, 247, 253, 257, 258, 259, 260, 275, 285], "__doc__": [6, 12], "attribut": [6, 11, 15, 18, 20, 35, 36, 40, 41, 50, 51, 59, 67, 68, 69, 72, 73, 74, 75, 92, 95, 101, 103, 109, 114, 117, 118, 119, 120, 122, 130, 138, 141, 162, 167, 171, 178, 182, 183, 189, 192, 194, 195, 198, 199, 203, 208, 216, 220, 221, 233, 234, 240, 242, 246, 247, 250, 257, 280], "fdiff": [6, 20, 41, 59, 65, 66, 67], "self": [6, 18, 20, 26, 33, 35, 36, 40, 41, 50, 51, 56, 58, 59, 61, 65, 68, 69, 70, 72, 73, 74, 75, 86, 90, 95, 99, 114, 125, 168, 173, 183, 185, 187, 195, 197, 199, 201, 203, 204, 208, 210, 215, 216, 234, 253], "argindex": [6, 20, 41, 59, 65, 66, 67], "heavisid": [6, 67, 84, 86, 208], "diff": [6, 10, 11, 16, 20, 25, 39, 41, 59, 64, 65, 66, 67, 76, 81, 92, 95, 113, 115, 126, 127, 140, 171, 183, 185, 188, 189, 192, 194, 199, 204, 207, 208, 218, 224, 225, 226, 229, 230, 235, 257, 260, 275, 279, 286], "diracdelta": [6, 67, 86, 168, 173, 208], "what": [6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 30, 39, 41, 51, 53, 58, 59, 60, 61, 65, 66, 69, 70, 74, 84, 86, 88, 95, 99, 101, 114, 117, 118, 120, 123, 127, 134, 140, 172, 173, 176, 178, 183, 191, 192, 199, 201, 204, 207, 208, 209, 215, 217, 218, 220, 221, 224, 226, 233, 237, 239, 241, 242, 247, 257, 258, 263, 275, 277, 278, 280, 284, 285], "scope": [6, 41, 133, 137, 237, 285], "high": [6, 7, 12, 16, 18, 25, 41, 59, 63, 64, 87, 99, 140, 188, 198, 203, 206, 208, 221, 226, 270, 281], "od": [6, 11, 20, 82, 118, 122, 133, 140, 222, 225, 265, 286], "seen": [6, 16, 18, 33, 51, 84, 86, 101, 105, 117, 122, 134, 178, 191, 195, 198, 201, 204, 224, 227, 244, 246, 257, 277, 280, 284], "hand": [6, 10, 16, 18, 20, 23, 40, 41, 51, 52, 59, 65, 67, 86, 89, 90, 95, 99, 102, 118, 122, 123, 137, 141, 145, 162, 165, 183, 189, 192, 193, 195, 198, 199, 201, 203, 206, 218, 227, 239, 241, 243, 247, 250, 260, 262, 279], "less": [6, 7, 10, 11, 16, 24, 26, 37, 41, 42, 50, 51, 58, 59, 60, 63, 64, 65, 67, 73, 74, 75, 90, 95, 99, 107, 109, 123, 125, 173, 198, 201, 203, 204, 217, 218, 220, 221, 224, 226, 227, 228, 239, 241], "understand": [6, 12, 18, 19, 20, 29, 59, 60, 84, 123, 133, 135, 136, 140, 178, 191, 194, 197, 198, 203, 208, 218, 221, 240, 247, 276, 277, 284, 285], "clear": [6, 10, 18, 35, 49, 59, 84, 88, 114, 191, 192, 194, 199, 201, 204, 218, 226, 227, 234, 239, 243, 262, 277], "begin": [6, 10, 12, 18, 20, 22, 26, 59, 60, 64, 65, 67, 84, 90, 92, 95, 99, 127, 135, 136, 137, 138, 169, 178, 183, 192, 193, 197, 208, 218, 221, 224, 225, 227, 228, 239, 249, 277, 279, 281, 285], "convers": [6, 7, 10, 18, 24, 41, 59, 79, 101, 137, 177, 196, 197, 198, 199, 201, 203, 205, 208, 221, 233, 240, 253], "aim": [6, 7, 77, 84, 178, 195, 218, 224, 227, 278, 279], "comment": [6, 7, 41, 50, 123, 125, 205, 208, 241, 246], "distract": 6, "input": [6, 7, 10, 11, 12, 20, 25, 33, 39, 42, 55, 59, 60, 62, 63, 64, 65, 73, 86, 88, 89, 95, 99, 101, 106, 107, 109, 113, 117, 119, 122, 123, 125, 126, 127, 137, 140, 141, 146, 169, 183, 185, 187, 198, 199, 201, 204, 205, 206, 207, 208, 209, 216, 220, 221, 224, 226, 228, 230, 240, 241, 243, 244, 246, 247, 249, 274, 280, 281, 285], "consum": [6, 41, 67, 119, 137], "human": [6, 14, 84, 175, 204, 208], "beings": 6, "english": [6, 60], "likewis": [6, 18, 40, 102, 126, 127], "reader": [6, 7, 20, 40, 42, 138, 195, 208, 243, 278, 283], "machineri": [6, 59, 203, 247], "mind": [6, 12, 15, 18, 25, 59, 95, 138, 194, 215, 216, 262, 280], "platform": [6, 59, 173, 192, 224, 240], "anyon": [6, 7, 10, 30, 204, 208, 273, 283, 284], "restructuredtext": [6, 7], "extend": [6, 7, 18, 20, 24, 37, 41, 50, 51, 59, 60, 64, 71, 84, 86, 95, 99, 140, 181, 188, 194, 196, 199, 201, 203, 204, 205, 208, 215, 217, 221, 223, 224, 227, 228, 229, 241, 243, 277, 279], "concis": [6, 140], "quick": [6, 7, 20, 59, 95, 99, 220, 226, 247], "depth": [6, 7, 9, 12, 13, 30, 50, 59, 125, 194, 195, 208], "tripl": [6, 24, 76, 95, 192, 193, 195, 203, 249], "quot": [6, 12, 41, 89, 208, 249], "raw": [6, 7, 41, 59, 60, 65, 100, 101, 167, 172, 198, 199, 204, 216, 220, 284], "backslash": [6, 59, 208], "blank": [6, 101, 119, 194], "close": [6, 11, 27, 41, 58, 59, 63, 64, 67, 75, 77, 84, 86, 88, 109, 126, 194, 195, 196, 202, 203, 216, 226, 227, 241, 275, 285], "rare": [6, 20, 59, 224, 228, 237, 277], "underlin": [6, 7], "numpydoc": [6, 7], "build": [6, 7, 8, 15, 35, 36, 41, 59, 61, 67, 89, 140, 167, 178, 183, 192, 195, 200, 203, 204, 205, 215, 228, 257, 274, 277, 280], "consist": [6, 7, 10, 11, 16, 18, 23, 25, 28, 40, 50, 51, 55, 59, 60, 64, 65, 67, 69, 75, 77, 84, 89, 102, 105, 117, 134, 138, 147, 167, 173, 178, 181, 187, 194, 196, 198, 199, 201, 216, 224, 226, 227, 228, 232, 237, 240, 241, 246, 278, 280], "review": [6, 7, 139], "head": [6, 15, 40, 59, 226, 228, 234, 249, 280], "plural": [6, 7], "length": [6, 10, 41, 43, 49, 50, 51, 53, 57, 59, 60, 62, 64, 65, 67, 68, 72, 74, 75, 76, 89, 90, 95, 98, 99, 102, 103, 113, 118, 122, 126, 127, 128, 138, 142, 146, 170, 175, 176, 178, 183, 187, 192, 203, 204, 208, 214, 218, 220, 224, 228, 239, 240, 246, 249, 253, 255, 263], "equal": [6, 10, 11, 14, 18, 19, 20, 29, 33, 37, 40, 41, 42, 48, 49, 50, 51, 55, 57, 58, 59, 60, 61, 63, 64, 65, 67, 72, 73, 74, 75, 76, 78, 84, 89, 90, 92, 95, 99, 102, 105, 109, 110, 114, 118, 120, 125, 135, 136, 157, 158, 173, 178, 183, 187, 192, 195, 196, 197, 198, 199, 201, 203, 204, 206, 208, 214, 216, 218, 221, 224, 225, 226, 227, 228, 234, 239, 240, 241, 246, 249, 253, 258, 263, 275, 278, 286], "clutter": 6, "harder": [6, 10, 18, 59, 84, 198, 239], "minim": [6, 18, 20, 39, 50, 51, 55, 58, 59, 60, 84, 86, 89, 99, 114, 127, 142, 197, 198, 199, 201, 204, 207, 217, 220, 221, 226, 246, 250], "amount": [6, 40, 59, 60, 71, 117, 133, 183, 189, 192, 201, 211, 239, 253, 255], "deprec": [6, 8, 13, 23, 34, 51, 59, 72, 86, 90, 112, 117, 137, 204, 208, 228, 234, 237, 238, 242, 244, 247, 251], "notifi": 6, "awai": [6, 40, 42, 60, 102, 103, 105, 125, 203, 208], "encourag": [6, 10, 40, 135, 136, 203], "label": [6, 40, 41, 53, 59, 69, 82, 86, 105, 146, 153, 157, 162, 171, 173, 194, 208, 209, 211, 220, 233, 234, 284], "elabor": [6, 21, 189, 260], "suffic": [6, 196, 226], "clarifi": 6, "complic": [6, 12, 14, 18, 20, 27, 41, 50, 58, 60, 61, 63, 64, 65, 67, 84, 86, 92, 133, 135, 173, 192, 198, 201, 205, 207, 218, 220, 227, 228, 232, 233, 241, 243, 247, 249, 275, 277, 280, 281], "demonstr": [6, 7, 12, 18, 20, 25, 26, 27, 50, 51, 59, 86, 99, 114, 117, 123, 127, 128, 137, 195, 198, 259, 285], "api": [6, 7, 10, 18, 21, 24, 26, 41, 59, 71, 79, 100, 101, 108, 133, 140, 169, 182, 190, 194, 201, 221, 223, 247, 250, 257, 258, 261, 268, 270, 271, 278, 279, 282], "simpl": [6, 11, 12, 16, 18, 20, 27, 31, 40, 41, 50, 58, 59, 63, 67, 71, 75, 77, 84, 86, 88, 95, 99, 100, 102, 103, 109, 110, 113, 117, 118, 120, 122, 125, 127, 128, 130, 132, 133, 137, 141, 147, 161, 162, 170, 171, 172, 183, 191, 192, 198, 199, 200, 204, 205, 208, 210, 215, 217, 218, 220, 221, 224, 227, 234, 240, 241, 246, 250, 252, 253, 255, 256, 260, 274, 277, 280, 281, 285], "too": [6, 12, 20, 29, 50, 51, 59, 65, 67, 69, 72, 74, 84, 89, 98, 99, 100, 135, 142, 215, 216, 220, 221, 224, 226, 227, 228, 239, 240, 256, 257], "thought": [6, 11, 59, 215, 224, 277, 280], "perfect": [6, 20, 50, 59, 99, 221, 227, 279, 280], "tell": [6, 7, 18, 19, 25, 41, 51, 60, 63, 67, 90, 101, 122, 178, 198, 203, 207, 215, 218, 224, 240, 277], "think": [6, 10, 11, 18, 19, 20, 25, 31, 39, 50, 125, 178, 243, 247, 277, 285], "test_": [6, 239], "coverage_doctest": 6, "coverag": 6, "6868680200532414": 6, "dsolv": [6, 11, 224, 225, 226, 275, 279, 286], "co": [6, 10, 12, 20, 22, 23, 25, 27, 28, 29, 33, 39, 41, 58, 59, 61, 63, 64, 65, 67, 68, 69, 72, 73, 75, 77, 81, 82, 83, 84, 86, 90, 95, 99, 101, 114, 115, 117, 123, 125, 126, 128, 130, 131, 132, 137, 140, 145, 147, 183, 185, 187, 189, 191, 192, 193, 194, 198, 201, 204, 205, 207, 208, 209, 210, 211, 215, 216, 217, 218, 220, 224, 226, 227, 228, 229, 235, 247, 253, 255, 256, 257, 258, 263, 274, 275, 277, 279, 285, 286], "sin": [6, 7, 10, 11, 12, 18, 20, 22, 25, 27, 29, 31, 33, 39, 41, 58, 59, 61, 63, 64, 65, 67, 68, 69, 73, 77, 78, 81, 82, 83, 84, 86, 87, 90, 95, 100, 101, 111, 114, 115, 117, 122, 123, 125, 126, 128, 130, 131, 132, 137, 140, 145, 147, 171, 183, 185, 187, 189, 191, 192, 193, 194, 196, 198, 204, 205, 207, 208, 209, 210, 211, 215, 216, 217, 218, 220, 223, 224, 226, 227, 229, 235, 241, 247, 253, 255, 256, 257, 258, 263, 274, 275, 277, 279, 280, 285, 286], "hint": [6, 20, 40, 43, 50, 59, 62, 65, 86, 90, 95, 99, 109, 140, 150, 154, 170, 172, 173, 183, 204, 215, 218, 226, 285], "1st_exact": [6, 224], "eq": [6, 11, 12, 14, 18, 20, 23, 24, 29, 37, 39, 41, 59, 64, 65, 67, 69, 72, 76, 84, 89, 176, 194, 195, 199, 204, 206, 208, 210, 214, 216, 217, 220, 221, 223, 224, 225, 226, 227, 228, 240, 241, 247, 253, 277, 279, 286], "c1": [6, 16, 60, 69, 76, 90, 92, 117, 159, 173, 216, 221, 224, 226, 259, 286], "comma": [6, 7, 12, 41, 59, 208, 247, 277], "readabl": [6, 32, 40, 87, 113, 204, 207, 208, 215, 217, 250], "accept": [6, 11, 20, 23, 29, 40, 41, 50, 59, 65, 73, 86, 89, 90, 92, 95, 98, 101, 123, 167, 183, 188, 194, 203, 204, 207, 208, 209, 216, 218, 220, 226, 240, 247, 253, 255, 258, 281], "rang": [6, 10, 11, 16, 20, 24, 25, 39, 41, 48, 49, 50, 51, 53, 55, 59, 60, 64, 65, 67, 73, 90, 95, 99, 103, 107, 111, 142, 173, 194, 198, 199, 200, 201, 203, 204, 205, 210, 211, 214, 216, 217, 220, 224, 227, 228, 229, 233, 239, 246, 274, 285], "30": [6, 33, 39, 41, 45, 59, 60, 62, 63, 64, 67, 73, 75, 86, 90, 95, 96, 99, 102, 103, 123, 146, 197, 199, 203, 204, 208, 214, 217, 220, 228, 229, 285], "7": [6, 12, 18, 20, 24, 33, 35, 36, 39, 41, 43, 45, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 69, 72, 73, 74, 75, 81, 84, 86, 89, 90, 92, 93, 95, 99, 101, 102, 107, 109, 125, 132, 135, 136, 140, 173, 178, 180, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 210, 211, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 233, 234, 239, 240, 243, 246, 247, 253, 263, 275, 280, 281, 284], "8": [6, 16, 27, 31, 33, 34, 39, 41, 43, 50, 51, 52, 55, 57, 59, 60, 62, 63, 64, 65, 67, 69, 72, 73, 75, 81, 84, 86, 88, 89, 90, 92, 93, 95, 96, 98, 99, 101, 102, 107, 109, 111, 125, 140, 145, 146, 157, 193, 194, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 210, 211, 214, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 233, 239, 241, 243, 246, 253, 256, 257, 263, 274, 275, 279, 281, 285], "9": [6, 14, 29, 31, 39, 41, 47, 49, 50, 51, 55, 57, 58, 59, 60, 62, 64, 65, 67, 68, 69, 72, 73, 75, 81, 84, 86, 90, 91, 92, 93, 95, 96, 98, 99, 101, 102, 107, 109, 110, 111, 112, 114, 123, 125, 128, 134, 140, 142, 146, 178, 193, 194, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 214, 216, 217, 218, 220, 221, 224, 226, 227, 228, 229, 239, 243, 246, 253, 256, 279, 281, 286], "11": [6, 18, 35, 36, 41, 50, 53, 55, 57, 59, 60, 62, 64, 67, 71, 72, 73, 75, 76, 84, 86, 89, 90, 91, 95, 99, 101, 109, 123, 125, 138, 157, 167, 193, 194, 196, 197, 199, 201, 202, 203, 204, 205, 207, 208, 215, 217, 221, 224, 226, 227, 228, 229, 240, 246, 257], "12": [6, 12, 20, 33, 39, 40, 41, 45, 47, 48, 50, 51, 52, 55, 57, 58, 59, 60, 62, 64, 65, 67, 69, 72, 73, 75, 84, 86, 90, 95, 96, 99, 102, 103, 107, 109, 111, 117, 125, 126, 138, 170, 183, 193, 196, 197, 198, 201, 203, 204, 205, 207, 208, 214, 216, 217, 221, 223, 224, 228, 229, 240, 243, 246, 256, 281, 285], "13": [6, 33, 41, 48, 50, 55, 59, 60, 62, 64, 67, 71, 72, 73, 74, 84, 89, 95, 99, 103, 107, 109, 123, 138, 194, 201, 203, 204, 205, 207, 208, 214, 221, 223, 225, 226, 228, 229, 240, 263], "14": [6, 41, 48, 50, 54, 55, 57, 59, 60, 64, 65, 67, 84, 95, 96, 99, 100, 102, 107, 123, 193, 194, 197, 199, 201, 202, 203, 204, 205, 207, 208, 217, 220, 221, 224, 226, 228, 229, 275], "15": [6, 12, 20, 39, 45, 48, 50, 55, 57, 59, 60, 62, 63, 64, 67, 69, 72, 73, 75, 76, 84, 86, 89, 90, 91, 95, 96, 99, 102, 114, 146, 193, 194, 196, 197, 198, 199, 203, 204, 205, 207, 208, 210, 214, 215, 217, 220, 221, 225, 226, 227, 228, 229, 246, 274, 275, 280, 281], "16": [6, 29, 33, 39, 41, 50, 51, 54, 58, 59, 60, 64, 67, 68, 69, 73, 84, 86, 89, 95, 96, 98, 99, 103, 189, 196, 197, 198, 201, 202, 203, 204, 207, 208, 214, 216, 217, 218, 221, 228, 229, 246, 253, 262, 281], "17": [6, 10, 27, 29, 48, 50, 51, 59, 60, 63, 64, 65, 69, 72, 75, 84, 95, 99, 109, 198, 199, 203, 204, 207, 208, 215, 217, 221, 224, 229, 243, 247, 279], "18": [6, 27, 50, 51, 62, 64, 67, 69, 72, 75, 91, 95, 99, 102, 103, 107, 109, 111, 184, 193, 201, 202, 207, 208, 216, 217, 221, 224, 226, 227, 228, 229, 256], "19": [6, 27, 50, 59, 62, 67, 69, 72, 75, 95, 99, 101, 102, 193, 199, 203, 204, 207, 217, 221, 223, 226, 240, 274], "20": [6, 12, 27, 29, 37, 41, 48, 50, 51, 58, 59, 60, 63, 64, 67, 75, 76, 86, 95, 99, 102, 103, 105, 109, 120, 178, 180, 193, 194, 198, 202, 203, 204, 205, 207, 208, 214, 215, 216, 217, 220, 221, 224, 227, 228, 253, 275], "21": [6, 10, 45, 50, 59, 62, 64, 72, 73, 81, 95, 99, 101, 102, 138, 194, 199, 201, 202, 203, 205, 207, 208, 214, 224, 228, 229, 285], "22": [6, 12, 50, 59, 62, 63, 64, 67, 95, 99, 102, 103, 138, 202, 207, 220, 221, 226, 228], "23": [6, 39, 50, 51, 59, 62, 65, 67, 73, 75, 95, 99, 102, 138, 199, 204, 207, 214, 221, 246], "24": [6, 24, 26, 27, 33, 39, 47, 51, 52, 59, 62, 64, 67, 73, 81, 86, 95, 99, 102, 103, 107, 109, 170, 180, 193, 199, 201, 203, 204, 205, 207, 210, 215, 221, 224, 228, 243, 246, 263, 275, 281], "25": [6, 12, 24, 27, 50, 51, 60, 62, 64, 67, 69, 72, 74, 91, 95, 98, 99, 102, 103, 109, 114, 120, 187, 193, 201, 203, 204, 207, 208, 214, 215, 217, 221, 223, 224, 225, 228, 240], "26": [6, 48, 59, 60, 62, 67, 71, 95, 99, 102, 103, 204, 221, 228], "27": [6, 25, 41, 42, 50, 54, 64, 69, 95, 99, 102, 103, 109, 111, 201, 204, 226], "28": [6, 41, 50, 58, 62, 63, 67, 95, 99, 102, 125, 217, 221, 224, 280], "29": [6, 33, 48, 50, 51, 59, 60, 62, 64, 65, 72, 73, 95, 99, 109, 162, 198, 216, 228], "assumpt": [6, 11, 12, 17, 19, 21, 24, 25, 26, 34, 35, 37, 38, 40, 41, 50, 51, 53, 58, 61, 63, 65, 66, 86, 89, 90, 95, 96, 102, 109, 113, 140, 180, 185, 197, 207, 208, 216, 217, 220, 224, 226, 227, 233, 241, 246, 264, 265, 285], "parenthes": [6, 12, 59, 101, 113, 161, 162, 192, 208, 232, 249], "type": [6, 8, 10, 11, 12, 13, 15, 18, 19, 20, 22, 24, 25, 29, 35, 36, 39, 50, 51, 55, 58, 59, 60, 61, 62, 63, 65, 69, 70, 71, 72, 73, 74, 77, 84, 86, 87, 88, 89, 90, 91, 92, 95, 99, 100, 101, 102, 103, 105, 107, 109, 113, 117, 118, 123, 134, 140, 145, 159, 167, 168, 169, 171, 183, 187, 188, 192, 194, 195, 198, 199, 202, 203, 204, 205, 206, 208, 209, 210, 216, 217, 218, 220, 221, 223, 224, 226, 232, 233, 234, 237, 239, 240, 241, 246, 247, 249, 257, 260, 263, 275, 277, 279, 280, 281, 284, 285, 286], "enclos": [6, 69, 70, 75, 98, 110, 208, 218, 247], "colon": [6, 59], "preced": [6, 7, 12, 42, 51, 59, 60, 63, 64, 153, 220, 247], "space": [6, 12, 20, 39, 40, 41, 59, 60, 61, 68, 69, 70, 72, 74, 75, 88, 95, 101, 102, 111, 117, 118, 119, 120, 142, 144, 147, 157, 160, 162, 168, 170, 177, 183, 187, 189, 192, 193, 194, 195, 203, 227, 228, 239, 243, 253, 255, 257, 258, 259, 260, 262, 263, 270, 277, 280], "omit": [6, 10, 18, 20, 41, 51, 58, 59, 60, 64, 84, 86, 89, 95, 175, 208, 209, 216, 218, 226, 232, 241, 246, 275], "absent": [6, 43, 226], "specifi": [6, 7, 10, 14, 18, 20, 26, 27, 28, 29, 40, 41, 42, 54, 58, 59, 60, 61, 62, 65, 67, 68, 72, 75, 84, 86, 88, 89, 90, 92, 95, 99, 101, 102, 103, 109, 114, 117, 118, 122, 123, 125, 127, 128, 130, 133, 135, 136, 137, 138, 140, 141, 157, 162, 167, 168, 170, 171, 176, 182, 183, 185, 187, 189, 191, 192, 195, 196, 197, 198, 199, 201, 203, 204, 205, 208, 210, 211, 214, 215, 216, 218, 220, 224, 225, 226, 227, 228, 229, 233, 234, 235, 239, 240, 241, 246, 247, 253, 255, 256, 259, 262, 281], "displai": [6, 7, 12, 18, 19, 59, 60, 63, 84, 88, 102, 103, 107, 144, 177, 183, 187, 188, 194, 198, 199, 208, 216, 232, 239], "signatur": [6, 20, 35, 36, 51, 59, 95, 241, 242, 246, 247], "brace": [6, 64, 123, 208], "appear": [6, 7, 11, 12, 14, 40, 41, 43, 48, 50, 59, 60, 64, 65, 68, 69, 72, 75, 78, 82, 84, 86, 90, 95, 99, 101, 123, 127, 157, 173, 175, 178, 194, 196, 198, 201, 203, 204, 208, 217, 220, 224, 225, 226, 228, 232, 234, 239, 246, 247, 253, 258], "shape": [6, 10, 41, 75, 90, 92, 95, 97, 98, 107, 109, 117, 122, 123, 183, 194, 195, 197, 208, 211, 218, 228, 229, 230, 232, 233, 234, 247, 284], "combin": [6, 10, 12, 20, 28, 40, 59, 63, 64, 67, 86, 88, 89, 90, 99, 103, 109, 117, 122, 126, 133, 141, 152, 159, 167, 168, 170, 171, 172, 176, 178, 179, 195, 196, 198, 199, 201, 203, 204, 208, 209, 217, 218, 220, 221, 224, 226, 228, 229, 243, 246, 274, 277, 280], "incorrectli": [6, 10, 20, 68, 69, 95, 196], "opt_cs": [6, 220], "canon": [6, 11, 18, 23, 41, 43, 48, 50, 51, 55, 59, 60, 61, 65, 75, 84, 89, 95, 99, 101, 118, 150, 154, 173, 175, 178, 180, 201, 209, 216, 217, 220, 224, 226, 228, 234, 246, 285], "find": [6, 11, 12, 14, 16, 17, 20, 22, 24, 25, 26, 28, 29, 33, 36, 39, 41, 42, 50, 53, 54, 55, 58, 59, 63, 65, 67, 69, 71, 72, 73, 76, 81, 84, 86, 88, 95, 99, 101, 115, 124, 131, 138, 140, 142, 158, 165, 167, 168, 169, 173, 176, 178, 191, 194, 195, 196, 197, 198, 199, 201, 205, 207, 208, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 226, 227, 228, 234, 243, 246, 247, 249, 253, 263, 275, 277, 279, 281, 286], "optim": [6, 11, 27, 41, 43, 50, 63, 89, 99, 113, 140, 153, 157, 204, 208, 209, 217, 220, 228, 240], "mul": [6, 10, 11, 12, 15, 20, 33, 84, 86, 90, 99, 153, 157, 167, 168, 197, 198, 199, 203, 204, 208, 209, 210, 217, 220, 224, 225, 226, 227, 232, 280], "pow": [6, 10, 11, 12, 33, 38, 41, 59, 60, 65, 84, 90, 99, 172, 197, 198, 199, 204, 208, 210, 217, 220, 226, 227, 280, 284], "neg": [6, 11, 12, 18, 19, 25, 37, 38, 41, 42, 54, 58, 59, 64, 65, 67, 69, 71, 72, 75, 84, 86, 88, 89, 90, 95, 98, 99, 102, 103, 105, 106, 107, 109, 117, 173, 183, 193, 196, 197, 199, 201, 203, 204, 205, 208, 214, 216, 217, 218, 220, 221, 224, 226, 227, 228], "coeffici": [6, 14, 16, 18, 24, 26, 36, 39, 41, 58, 59, 61, 63, 64, 67, 72, 77, 78, 81, 82, 84, 88, 89, 92, 95, 96, 99, 110, 118, 123, 146, 160, 170, 178, 193, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 210, 211, 214, 215, 218, 220, 221, 223, 224, 225, 226, 227, 228, 234, 240, 257, 260, 270, 280, 285], "none": [6, 7, 10, 11, 18, 19, 20, 33, 34, 35, 36, 37, 39, 40, 41, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 80, 81, 82, 84, 86, 87, 89, 90, 92, 95, 96, 99, 100, 101, 102, 109, 114, 115, 117, 118, 119, 120, 122, 123, 142, 144, 146, 147, 153, 158, 163, 168, 170, 173, 175, 179, 180, 181, 183, 185, 187, 188, 192, 193, 194, 195, 197, 198, 199, 201, 203, 204, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 220, 221, 224, 225, 226, 227, 228, 229, 232, 233, 234, 237, 239, 240, 241, 242, 246, 247, 249, 252, 253, 256, 281, 285, 286], "process": [6, 7, 10, 11, 12, 18, 38, 41, 50, 51, 57, 59, 60, 65, 67, 75, 84, 86, 95, 99, 109, 119, 123, 125, 131, 134, 135, 137, 140, 194, 195, 201, 208, 209, 216, 220, 224, 226, 239, 243, 285], "concern": [6, 11, 18, 39, 42, 58, 63, 99, 189, 194, 196, 197, 198, 207, 208, 209, 220, 221, 226, 240, 241, 243, 249], "item": [6, 7, 11, 12, 14, 41, 48, 49, 51, 59, 64, 70, 76, 90, 95, 99, 118, 194, 198, 201, 204, 208, 216, 224, 225, 228, 239, 240, 243, 246, 247, 285], "fragment": [6, 60], "desir": [6, 10, 12, 16, 20, 23, 29, 32, 50, 51, 59, 60, 62, 63, 64, 65, 69, 73, 75, 89, 90, 95, 98, 99, 100, 118, 119, 120, 122, 133, 137, 158, 183, 191, 192, 197, 199, 201, 203, 204, 205, 208, 209, 211, 216, 220, 224, 226, 227, 240, 242, 243, 246, 260, 274], "span": [6, 10, 88, 95, 102, 103, 117, 203, 208, 244, 281], "subsequ": [6, 12, 59, 65, 183, 199, 201, 204, 243, 246, 257, 260], "indent": [6, 12, 249], "embed": [6, 7, 39, 51, 59, 87, 203], "hyperlink": 6, "classnam": 6, "erf": [6, 67, 84, 86, 208, 218, 228], "gauss": [6, 26, 67, 86, 95, 142, 196, 203, 206, 226, 227], "erfc": [6, 67, 84, 208, 228], "complementari": [6, 67, 109], "erfi": [6, 67, 84, 208], "erf2": [6, 67, 208], "erfinv": [6, 67, 208, 228], "invers": [6, 26, 33, 50, 51, 59, 60, 61, 67, 86, 92, 95, 99, 117, 118, 162, 166, 167, 170, 175, 178, 195, 196, 197, 199, 201, 204, 205, 208, 210, 218, 220, 224, 226, 227, 228, 246, 281, 285], "erfcinv": [6, 67, 208], "erf2inv": [6, 67, 208], "besselj": [6, 67, 81, 208, 220, 224, 279], "besselbas": [6, 67], "bessel": [6, 7, 65, 77, 86, 204, 220, 224, 228, 279], "kind": [6, 7, 10, 11, 17, 18, 19, 20, 40, 41, 61, 64, 67, 79, 86, 90, 102, 105, 118, 123, 136, 189, 196, 198, 199, 204, 209, 210, 216, 224, 225, 228, 246, 260, 262, 275, 285], "bess": [6, 67, 208, 220, 224, 228], "besselk": [6, 67, 208, 228], "cite": [6, 21], "citat": [6, 58, 202], "meant": [6, 7, 10, 12, 18, 20, 41, 59, 67, 72, 86, 99, 123, 140, 194, 199, 216, 220, 225, 258, 280], "augment": [6, 41, 95, 118, 135, 136, 140, 206, 226, 227, 244, 247, 286], "freeli": [6, 32, 93, 117, 195], "wikipedia": [6, 11, 18, 20, 33, 35, 36, 37, 39, 40, 41, 47, 48, 50, 51, 58, 59, 60, 61, 62, 64, 65, 67, 69, 71, 75, 76, 77, 86, 88, 89, 90, 92, 95, 99, 107, 109, 112, 142, 144, 145, 146, 148, 149, 150, 154, 155, 156, 159, 161, 162, 171, 173, 176, 183, 185, 190, 204, 211, 215, 216, 217, 224, 227, 228, 241, 246, 253, 255, 259, 261, 263, 279, 281, 283], "wolfram": [6, 37, 52, 53, 59, 60, 62, 64, 65, 67, 69, 75, 86, 95, 99, 101, 202, 208, 210, 211, 213, 216, 221, 228, 246, 281], "mathworld": [6, 11, 37, 52, 53, 59, 60, 62, 64, 65, 67, 69, 75, 86, 95, 99, 202, 211, 216, 221, 228, 246], "nist": [6, 65, 67, 178], "digit": [6, 11, 12, 27, 41, 59, 60, 62, 63, 69, 86, 89, 99, 133, 183, 198, 204, 215, 220, 246, 274], "dlmf": [6, 65, 67], "suffer": 6, "rot": [6, 75, 170], "publish": [6, 84, 218], "identifi": [6, 10, 18, 19, 39, 52, 59, 62, 63, 86, 95, 105, 135, 161, 162, 195, 198, 199, 209, 217, 220, 224, 225, 227, 228, 247, 250], "clickabl": 6, "kozen89": [6, 201, 202], "kozen": [6, 202], "landau": [6, 202, 275], "polynomi": [6, 7, 11, 16, 18, 22, 24, 29, 37, 50, 58, 59, 60, 63, 64, 77, 78, 80, 82, 86, 89, 90, 92, 95, 99, 103, 109, 138, 140, 195, 197, 202, 206, 210, 215, 217, 218, 220, 221, 223, 224, 227, 239, 264, 271, 276, 281, 286], "decomposit": [6, 26, 50, 57, 91, 92, 95, 197, 199, 201, 202, 210, 285], "1989": [6, 202, 226], "pp": [6, 50, 51, 57, 58, 59, 60, 64, 65, 86, 90, 95, 127, 137, 193, 196, 201, 202, 224, 225, 228], "445": [6, 202], "456": [6, 59, 202], "abramowitz": [6, 67], "milton": [6, 67], "stegun": [6, 67], "iren": [6, 67], "chapter": [6, 50, 67, 99, 123, 202], "formula": [6, 16, 39, 53, 58, 59, 63, 64, 65, 67, 72, 89, 95, 99, 193, 195, 201, 204, 208, 210, 214, 217, 220, 221, 224, 279, 285], "tabl": [6, 18, 42, 50, 59, 64, 67, 80, 86, 95, 99, 117, 140, 193, 203, 230], "ed": [6, 51, 67, 95, 202, 226, 228], "1965": [6, 67, 90], "luke": [6, 67, 84, 218], "l": [6, 10, 12, 39, 40, 41, 42, 48, 50, 51, 58, 60, 67, 70, 71, 72, 73, 74, 76, 77, 82, 84, 86, 88, 91, 92, 95, 99, 102, 103, 109, 111, 117, 118, 120, 122, 123, 126, 127, 128, 130, 131, 132, 136, 137, 138, 139, 140, 141, 142, 145, 171, 174, 175, 176, 178, 191, 192, 193, 195, 197, 199, 201, 202, 208, 210, 211, 217, 218, 221, 224, 226, 228, 232, 233, 234, 235, 239, 241, 246, 263, 285], "Their": [6, 59, 67, 84, 193, 194, 198, 201, 218], "approxim": [6, 12, 17, 29, 39, 50, 58, 59, 60, 63, 67, 69, 75, 84, 86, 95, 99, 103, 106, 142, 176, 194, 198, 199, 204, 211, 215, 218, 228, 275, 279], "1969": [6, 60, 67, 84, 202, 218], "en": [6, 7, 18, 20, 33, 35, 36, 37, 39, 40, 41, 47, 48, 50, 51, 58, 59, 60, 61, 62, 64, 65, 67, 69, 71, 75, 76, 77, 86, 87, 88, 89, 90, 92, 95, 99, 107, 109, 112, 142, 144, 145, 146, 148, 149, 150, 154, 155, 156, 159, 161, 162, 171, 173, 183, 185, 190, 204, 205, 211, 215, 216, 217, 224, 227, 228, 241, 246, 247, 253, 255, 259, 261, 263, 281], "bessel_funct": [6, 67], "typefunct": [6, 67], "gamma": [6, 7, 12, 20, 58, 59, 61, 63, 64, 84, 86, 112, 140, 170, 192, 193, 208, 218, 220, 224, 228, 285], "infti": [6, 11, 18, 37, 58, 59, 60, 64, 65, 67, 84, 86, 195, 204, 211, 215, 218, 224, 227, 228, 275, 279, 285], "mathrm": [6, 31, 49, 58, 59, 60, 67, 84, 86, 95, 199, 201, 208, 216, 218, 224, 227, 228, 275, 279], "factori": [6, 16, 20, 26, 58, 59, 63, 64, 67, 95, 99, 101, 193, 199, 201, 203, 204, 208, 210, 220, 226, 228, 241, 242, 246, 247, 285], "z": [6, 10, 11, 12, 14, 18, 20, 24, 27, 28, 37, 38, 41, 42, 50, 51, 58, 59, 60, 61, 62, 64, 65, 67, 71, 72, 73, 74, 75, 84, 86, 89, 90, 92, 95, 101, 102, 103, 111, 114, 115, 117, 120, 123, 125, 126, 127, 128, 130, 131, 132, 134, 137, 138, 140, 141, 142, 151, 153, 157, 167, 168, 170, 174, 178, 182, 183, 184, 185, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 207, 208, 209, 215, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 232, 233, 234, 240, 241, 247, 253, 256, 257, 258, 259, 260, 262, 263, 274, 275, 277, 279, 280, 284, 285, 286], "whole": [6, 10, 18, 59, 61, 67, 86, 103, 111, 194, 195, 203, 204, 208, 211, 216, 218, 224, 227, 246], "complex": [6, 10, 11, 12, 15, 18, 20, 24, 25, 26, 29, 33, 37, 38, 39, 41, 50, 59, 60, 62, 63, 64, 67, 71, 81, 84, 90, 91, 95, 99, 100, 101, 107, 109, 113, 123, 140, 142, 146, 156, 159, 161, 162, 173, 182, 183, 192, 196, 197, 199, 203, 204, 208, 209, 213, 216, 218, 220, 224, 226, 227, 228, 241, 249, 285, 286], "plane": [6, 33, 59, 67, 69, 71, 72, 74, 75, 86, 107, 117, 125, 145, 146, 191, 192, 216, 227, 263, 271, 285], "pole": [6, 11, 67, 84, 109, 117, 146, 215, 218, 224], "pi": [6, 10, 11, 12, 15, 18, 20, 22, 23, 25, 29, 32, 33, 34, 36, 37, 38, 39, 41, 51, 58, 59, 61, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 78, 84, 86, 95, 99, 111, 117, 125, 140, 142, 144, 145, 146, 147, 149, 157, 168, 170, 171, 174, 176, 183, 193, 194, 196, 198, 199, 204, 208, 211, 215, 216, 217, 218, 220, 223, 224, 226, 227, 228, 246, 253, 256, 263, 274, 279, 285], "oo": [6, 11, 14, 18, 19, 23, 37, 39, 58, 59, 63, 64, 65, 67, 72, 84, 86, 89, 95, 109, 111, 159, 171, 174, 199, 201, 204, 213, 214, 215, 216, 220, 223, 224, 226, 227, 228, 233, 246, 249, 275, 279], "known": [6, 11, 18, 19, 20, 36, 40, 41, 42, 48, 50, 51, 59, 60, 63, 64, 67, 69, 72, 77, 84, 86, 87, 96, 99, 107, 109, 110, 112, 114, 120, 137, 176, 183, 191, 197, 198, 199, 203, 204, 208, 211, 214, 216, 217, 218, 220, 223, 224, 225, 226, 228, 246, 247, 253, 260, 262, 285], "sqrt": [6, 10, 11, 14, 18, 20, 22, 23, 24, 25, 28, 29, 33, 37, 38, 39, 41, 59, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 82, 83, 84, 86, 87, 90, 91, 95, 99, 101, 102, 105, 109, 111, 125, 142, 144, 146, 147, 152, 157, 167, 168, 170, 171, 173, 174, 176, 183, 189, 192, 193, 196, 198, 199, 201, 203, 204, 207, 208, 209, 214, 217, 218, 220, 221, 223, 224, 226, 227, 228, 246, 247, 249, 253, 262, 263, 274, 279, 284, 285, 286], "obei": [6, 67, 193, 208, 218], "mirror": [6, 67, 86, 146], "symmetri": [6, 10, 47, 52, 55, 67, 90, 152, 193, 224, 232, 234, 274, 285], "conjug": [6, 37, 48, 49, 50, 59, 65, 67, 90, 95, 111, 142, 156, 159, 173, 204, 208, 224, 234], "differenti": [6, 7, 10, 11, 22, 39, 59, 64, 65, 67, 76, 77, 79, 82, 109, 117, 118, 122, 123, 125, 127, 130, 133, 134, 135, 136, 137, 140, 141, 162, 168, 182, 183, 185, 187, 189, 192, 195, 201, 205, 207, 208, 213, 218, 220, 224, 225, 253, 260, 261, 264, 271, 275, 276, 279], "polygamma": [6, 64, 67, 208], "seri": [6, 16, 39, 40, 41, 42, 49, 50, 58, 59, 61, 63, 64, 65, 67, 82, 83, 84, 88, 99, 106, 109, 123, 130, 132, 140, 187, 191, 200, 201, 208, 213, 214, 218, 224, 227, 265, 271, 276], "expans": [6, 16, 20, 41, 59, 61, 64, 65, 67, 86, 95, 99, 137, 152, 154, 204, 205, 210, 211, 212, 217, 219, 220, 224, 226, 227, 265, 276, 285], "eulergamma": [6, 59, 63, 64, 67], "zeta": [6, 11, 12, 58, 59, 63, 64, 199, 203, 208, 215, 228], "40": [6, 29, 41, 62, 64, 67, 69, 76, 90, 95, 99, 102, 194, 205, 207, 208, 228, 249, 274], "288037795340032417959588909060233922890": [6, 67], "49801566811835604271": [6, 67], "15494982830181068512": [6, 67], "lowergamma": [6, 67, 228], "lower": [6, 10, 11, 18, 23, 37, 39, 41, 50, 51, 58, 59, 61, 67, 68, 70, 75, 76, 86, 90, 91, 92, 95, 107, 112, 117, 173, 187, 193, 195, 197, 199, 201, 204, 208, 217, 218, 220, 224, 233, 234, 243, 253, 275, 283], "uppergamma": [6, 64, 67, 208, 228], "upper": [6, 37, 58, 60, 63, 67, 68, 75, 76, 90, 91, 92, 95, 98, 99, 107, 117, 166, 173, 193, 197, 199, 201, 203, 204, 208, 218, 226, 233, 253], "loggamma": [6, 7, 67, 208], "log": [6, 7, 12, 20, 31, 33, 39, 41, 50, 58, 59, 63, 64, 65, 67, 77, 81, 83, 84, 86, 90, 95, 99, 194, 199, 208, 210, 215, 218, 220, 224, 227, 228, 235, 275, 285, 286], "digamma": [6, 64, 67, 208], "trigamma": [6, 67, 208], "beta": [6, 12, 41, 50, 59, 86, 170, 183, 193, 203, 205, 208, 224, 228], "euler": [6, 39, 40, 58, 59, 60, 63, 64, 67, 75, 81, 87, 99, 117, 170, 183, 188, 192, 193, 204, 208, 224, 228, 253, 255], "gamma_funct": [6, 67], "gov": [6, 65, 67], "gammafunct": [6, 67], "gammabetaerf": [6, 64, 67], "unusu": [6, 18, 125, 239], "inlin": [6, 87, 188, 208, 241], "pretti": [6, 11, 20, 40, 41, 67, 86, 87, 95, 99, 103, 109, 125, 188, 218, 220, 227, 262, 276, 279, 281, 285], "As": [6, 10, 15, 16, 19, 20, 26, 27, 32, 41, 50, 51, 59, 60, 63, 64, 65, 67, 83, 84, 89, 95, 98, 99, 101, 117, 122, 123, 125, 127, 134, 137, 138, 173, 178, 191, 195, 196, 198, 199, 201, 204, 205, 207, 208, 215, 216, 218, 224, 227, 228, 246, 247, 257, 258, 274, 275, 277, 279, 280, 281, 284, 285], "literatur": [6, 11, 84, 200, 271], "fact": [6, 10, 11, 18, 19, 20, 25, 36, 37, 59, 64, 67, 77, 84, 99, 105, 125, 137, 178, 195, 196, 198, 201, 203, 205, 207, 218, 220, 224, 227, 239, 247, 262, 274, 277, 278, 279, 280, 285], "eval": [6, 10, 18, 35, 36, 41, 59, 65, 67, 159, 173, 199, 204, 208, 241, 274], "illumin": 6, "tone": 6, "narr": [6, 8, 278], "excerpt": 6, "geometri": [6, 68, 69, 70, 72, 73, 74, 75, 76, 86, 133, 146, 200, 256, 263, 264, 271, 279], "autofunct": 6, "intersect": [6, 18, 25, 39, 40, 50, 69, 70, 72, 73, 74, 75, 76, 146, 195, 204, 208, 214, 215, 216, 227], "convex_hul": [6, 71, 75, 76], "are_similar": [6, 70, 71, 76], "autoclass": 6, "linearent": [6, 69, 72, 73, 74, 75], "rai": [6, 69, 71, 72, 73, 75, 76, 142, 146], "segment": [6, 10, 50, 69, 71, 72, 73, 74, 75, 76, 191, 194, 224, 239], "curv": [6, 40, 61, 71, 86, 99, 102, 142, 194, 195, 224, 253, 263, 271, 275], "ellips": [6, 70, 71, 75, 145, 194, 208, 271, 284], "circl": [6, 20, 59, 69, 70, 71, 73, 74, 75, 76, 84, 146, 153, 194, 227, 253, 256, 263], "polygon": [6, 69, 70, 71, 76, 194, 263, 271], "regularpolygon": [6, 70, 71, 75, 194], "triangl": [6, 20, 40, 64, 70, 71, 75, 76, 86, 90, 99, 193, 194, 256, 263], "rel": [6, 7, 10, 24, 40, 41, 49, 50, 51, 52, 56, 57, 58, 59, 60, 63, 70, 84, 99, 114, 117, 120, 128, 137, 138, 145, 172, 183, 187, 191, 192, 195, 197, 198, 201, 203, 216, 218, 223, 226, 228, 239, 246, 257, 258, 262, 279], "cumbersom": [6, 29], "viewcod": 6, "aco": [6, 12, 33, 65, 72, 75, 125, 140, 146, 183, 208, 224, 253, 285], "obj": [6, 10, 18, 59, 199, 204, 208, 242], "qualifi": [6, 250], "elementari": [6, 18, 19, 20, 50, 59, 60, 63, 66, 67, 81, 84, 86, 90, 95, 99, 138, 166, 169, 204, 205, 246, 247, 257, 265], "trigonometr": [6, 20, 23, 29, 59, 86, 205, 211, 219, 220, 223, 224, 227, 247, 265, 276, 286], "trail": [6, 51, 99, 199, 201, 204, 244, 249], "pair": [6, 12, 16, 24, 40, 41, 50, 51, 59, 60, 65, 71, 76, 83, 95, 99, 123, 127, 163, 165, 167, 168, 173, 182, 193, 195, 198, 201, 203, 204, 209, 214, 215, 217, 218, 220, 221, 224, 227, 228, 241, 246, 257, 274, 281], "www": [6, 7, 33, 39, 50, 51, 60, 62, 64, 67, 81, 86, 87, 99, 107, 188, 202, 207, 208, 217, 220, 221, 224, 228, 246, 281, 284], "master": [6, 7, 31, 86, 239], "usag": [6, 7, 11, 12, 18, 19, 20, 32, 35, 61, 65, 86, 170, 189, 194, 195, 201, 208, 216, 218, 221, 224, 225, 229, 243, 247, 248, 260, 261, 268, 280], "expect": [6, 7, 12, 18, 20, 40, 42, 44, 59, 65, 67, 71, 89, 99, 100, 109, 117, 123, 167, 198, 201, 203, 205, 206, 215, 220, 223, 226, 227, 228, 237, 239, 240, 243, 246, 247, 279, 280], "vector": [6, 16, 33, 37, 41, 43, 50, 51, 59, 61, 67, 72, 73, 74, 81, 82, 88, 90, 95, 100, 102, 105, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 127, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 145, 146, 159, 168, 170, 175, 178, 183, 185, 187, 188, 195, 203, 208, 218, 224, 226, 228, 233, 234, 239, 240, 255, 259, 264, 268, 270, 281], "dynamicsymbol": [6, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 183, 185, 187, 188, 189, 191, 192], "custom": [6, 10, 21, 41, 51, 59, 63, 66, 87, 90, 95, 115, 117, 182, 188, 189, 210, 214, 221, 228, 234, 240, 247, 253, 262, 279, 281], "sine": [6, 20, 59, 65, 67, 84, 86, 147, 205, 211, 217, 274], "expand": [6, 10, 11, 12, 16, 18, 41, 59, 61, 63, 64, 65, 67, 84, 86, 90, 109, 123, 125, 140, 154, 162, 165, 172, 173, 196, 198, 201, 203, 204, 205, 208, 211, 215, 217, 218, 220, 224, 227, 228, 232, 240, 247, 259, 274, 279], "troubleshoot": [6, 137], "spell": [6, 10, 11, 224], "try": [6, 7, 8, 10, 11, 12, 18, 19, 20, 23, 24, 26, 27, 29, 51, 58, 59, 63, 67, 69, 74, 84, 86, 89, 92, 95, 98, 99, 163, 165, 172, 173, 194, 198, 203, 208, 213, 215, 216, 217, 218, 220, 221, 224, 226, 247, 249, 274, 277, 280, 281, 285], "referencefram": [6, 10, 114, 115, 117, 118, 120, 123, 125, 126, 127, 130, 131, 132, 135, 136, 137, 138, 140, 141, 183, 184, 185, 187, 188, 189, 190, 191, 270], "though": [6, 11, 12, 18, 19, 20, 27, 28, 29, 32, 42, 59, 60, 61, 71, 75, 84, 86, 90, 95, 99, 113, 118, 125, 135, 137, 168, 182, 183, 191, 192, 196, 198, 199, 204, 205, 217, 218, 220, 224, 225, 226, 227, 239, 260, 275, 280, 285], "frame": [6, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 128, 130, 132, 134, 135, 136, 137, 138, 140, 141, 182, 183, 184, 185, 187, 189, 191, 243, 253, 260], "notimplementederror": [6, 23, 25, 28, 29, 39, 58, 69, 72, 76, 86, 95, 107, 197, 203, 207, 216, 223, 224, 225, 226, 227], "outsid": [6, 25, 37, 50, 59, 67, 70, 75, 90, 99, 113, 178, 192, 204, 220, 275, 280], "plot": [6, 20, 31, 68, 69, 71, 72, 75, 82, 87, 95, 102, 103, 108, 140, 157, 160, 166, 211, 264, 270, 271, 279, 284], "ahead": [6, 99], "submit": 6, "sub": [6, 10, 11, 12, 14, 18, 19, 20, 24, 25, 27, 41, 58, 59, 65, 67, 68, 69, 70, 71, 72, 73, 75, 86, 89, 90, 92, 95, 99, 101, 102, 103, 109, 113, 115, 123, 125, 126, 127, 130, 131, 137, 140, 170, 171, 176, 183, 193, 195, 197, 198, 199, 204, 208, 215, 216, 220, 221, 224, 225, 226, 228, 239, 240, 242, 274, 275, 277], "common": [6, 7, 10, 11, 12, 18, 19, 20, 22, 23, 24, 25, 39, 41, 50, 51, 59, 60, 65, 70, 73, 76, 86, 92, 94, 95, 99, 100, 107, 109, 114, 117, 119, 126, 133, 138, 140, 145, 178, 183, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 206, 210, 216, 217, 218, 220, 221, 224, 226, 227, 228, 240, 241, 244, 246, 247, 260, 262, 268, 274, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286], "matrixcommon": [6, 90, 92, 95], "dyadic": [6, 62, 114, 120, 123, 125, 130, 132, 140, 183, 185, 188, 190, 253, 256, 261], "shorten": 6, "highli": [7, 59, 63, 106, 198, 204, 213, 241], "aspect": [7, 18, 95, 198], "teach": [7, 51, 60, 228], "conduct": 7, "accord": [7, 12, 41, 47, 50, 51, 55, 58, 59, 60, 67, 89, 92, 95, 99, 101, 117, 124, 133, 167, 173, 194, 199, 201, 203, 205, 221, 226, 227, 234, 239, 241, 246, 262], "survei": 7, "commonli": [7, 11, 51, 64, 67, 86, 95, 113, 191, 196, 224, 260], "encount": [7, 12, 16, 23, 59, 86, 95, 165, 196, 201, 204, 226, 227, 241, 253, 281], "problem": [7, 10, 11, 12, 16, 18, 19, 20, 22, 25, 29, 43, 53, 55, 59, 60, 71, 84, 86, 90, 95, 99, 102, 104, 105, 110, 113, 123, 127, 128, 131, 133, 135, 182, 191, 192, 195, 196, 201, 218, 220, 221, 224, 227, 243, 246, 270, 275, 277, 281], "offer": [7, 40, 41, 50, 59, 100, 113, 140, 182, 192, 198, 203, 243, 261], "bring": [7, 84, 118, 131, 197, 211, 220, 281], "greater": [7, 37, 51, 59, 64, 65, 67, 84, 88, 99, 109, 201, 204, 207, 215, 220, 224, 226, 228, 243, 246, 260, 275], "clariti": [7, 50, 187], "mission": [7, 40, 93], "ca": [7, 31, 60, 67, 86, 207, 208, 246], "dedic": [7, 41, 200, 223, 241, 258, 260], "essenti": [7, 43, 54, 59, 63, 65, 66, 67, 84, 120, 125, 186, 189, 190, 192, 195, 196, 199, 203, 215, 218, 254, 257, 260, 261, 262, 268, 270], "element": [7, 10, 11, 12, 15, 18, 24, 33, 37, 40, 41, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 75, 82, 84, 86, 88, 89, 90, 91, 92, 95, 98, 99, 100, 102, 103, 109, 110, 120, 140, 142, 145, 159, 170, 178, 187, 190, 192, 194, 195, 196, 197, 199, 201, 204, 206, 207, 208, 214, 215, 216, 218, 220, 221, 224, 226, 227, 228, 229, 233, 240, 242, 243, 246, 247, 248, 256, 275, 280, 281, 284, 285], "deviat": [7, 146, 228], "advanc": [7, 15, 17, 20, 35, 50, 59, 63, 64, 95, 96, 133, 138, 190, 194, 197, 198, 200, 202, 203, 210, 217, 224, 239, 240, 241, 246, 270, 274, 276, 278, 282, 283, 284, 285], "docutil": 7, "sourceforg": [7, 40], "net": [7, 40, 75, 202, 224, 228, 246], "ext": [7, 195, 199], "autodoc": 7, "associ": [7, 10, 11, 18, 24, 40, 42, 57, 59, 60, 66, 67, 81, 82, 84, 88, 138, 140, 163, 171, 182, 183, 191, 192, 196, 197, 198, 199, 201, 203, 208, 216, 218, 221, 234, 248], "graphic": [7, 107], "info": [7, 12, 109, 208, 224, 225], "bear": [7, 18], "linkcod": 7, "readthedoc": [7, 87, 247], "subset": [7, 16, 18, 20, 39, 40, 43, 46, 50, 51, 57, 64, 65, 71, 82, 84, 86, 88, 99, 195, 197, 201, 203, 208, 216, 246, 265], "modifi": [7, 11, 12, 40, 41, 50, 59, 65, 67, 99, 101, 136, 145, 194, 201, 203, 204, 205, 208, 220, 226, 227, 228, 239, 242, 243, 246, 247, 274, 279, 281], "sphinx_math_dollar": 7, "delimit": [7, 59, 208], "dollar": [7, 279], "2": [7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 101, 102, 105, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 125, 126, 127, 128, 130, 131, 132, 134, 135, 136, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 182, 183, 184, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 237, 239, 240, 241, 242, 243, 246, 247, 249, 253, 255, 256, 257, 258, 259, 260, 262, 263, 274, 275, 277, 279, 280, 281, 284, 285, 286], "sphinxext": 7, "plot_direct": 7, "figur": [7, 59, 60, 69, 70, 72, 74, 75, 86, 103, 123, 168, 191, 192, 193, 194, 205, 208, 263, 285], "devel": [7, 193], "supersed": [7, 123, 140], "pep": [7, 41, 59, 89], "257": [7, 99, 226], "our": [7, 9, 10, 16, 20, 31, 41, 59, 67, 84, 95, 99, 126, 178, 191, 192, 194, 195, 197, 203, 204, 205, 208, 215, 218, 221, 224, 227, 239, 274, 277, 278, 280, 285], "introduct": [7, 10, 17, 50, 51, 64, 67, 199, 201, 202, 204, 208, 221, 224, 227, 261, 268, 278, 284], "four": [7, 26, 41, 51, 59, 63, 67, 89, 92, 99, 105, 110, 124, 133, 138, 146, 183, 194, 195, 201, 204, 208, 216, 221, 224, 226, 228, 229, 253, 255, 258, 270], "locat": [7, 10, 51, 59, 73, 95, 99, 102, 103, 105, 117, 127, 134, 137, 141, 187, 189, 203, 204, 208, 220, 228, 242, 251, 253, 257, 259, 262], "websit": [7, 283], "advertis": 7, "serv": [7, 11, 16, 20, 35, 36, 41, 56, 59, 66, 82, 203, 224, 225, 249, 278], "initi": [7, 11, 18, 27, 35, 50, 54, 59, 60, 61, 64, 67, 75, 77, 78, 81, 82, 83, 84, 87, 99, 101, 103, 105, 107, 109, 114, 118, 120, 122, 123, 125, 127, 132, 135, 136, 137, 140, 141, 145, 153, 162, 184, 185, 188, 192, 193, 201, 203, 204, 208, 214, 218, 220, 224, 226, 227, 233, 241, 248, 249, 253, 255, 256, 257, 258], "obtain": [7, 11, 12, 14, 16, 24, 25, 29, 35, 36, 40, 42, 43, 50, 51, 52, 55, 59, 60, 62, 63, 64, 65, 67, 69, 70, 72, 73, 75, 81, 84, 86, 88, 90, 95, 98, 99, 106, 109, 133, 136, 138, 146, 168, 173, 178, 195, 196, 199, 201, 203, 204, 207, 209, 216, 217, 218, 220, 221, 224, 225, 226, 227, 246, 249, 257, 258], "technic": [7, 10, 13, 20, 30, 40, 59, 140, 159, 195, 224, 241, 246, 260, 277, 280], "place": [7, 8, 10, 11, 12, 18, 20, 25, 30, 40, 51, 52, 59, 60, 65, 75, 91, 95, 98, 99, 101, 109, 140, 141, 202, 203, 208, 209, 215, 217, 220, 224, 243, 246, 273, 274, 281, 285], "site": [7, 99, 242], "upload": [7, 99], "belong": [7, 18, 37, 40, 50, 55, 59, 82, 95, 173, 183, 191, 194, 195, 197, 198, 201, 203, 204, 215, 216, 220, 221, 227, 234], "insid": [7, 10, 11, 12, 20, 50, 51, 56, 59, 69, 70, 75, 102, 113, 115, 127, 137, 172, 173, 178, 188, 192, 204, 208, 216, 218, 221, 226, 227, 228, 230, 232, 243, 280, 281], "spars": [7, 11, 92, 94, 95, 167, 197, 203, 204, 205, 228, 229, 268, 280], "substanti": [7, 100], "edit": [7, 86, 95, 99, 201, 202, 204], "arg": [7, 11, 18, 20, 23, 25, 33, 35, 36, 37, 38, 39, 40, 41, 43, 50, 51, 53, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 72, 74, 75, 76, 81, 84, 86, 89, 90, 91, 92, 93, 95, 97, 99, 101, 109, 142, 148, 151, 153, 156, 157, 158, 159, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 183, 188, 192, 194, 197, 199, 201, 203, 204, 205, 208, 210, 211, 214, 215, 216, 217, 220, 224, 226, 227, 228, 229, 233, 234, 239, 240, 241, 242, 246, 247, 249, 253, 255], "invari": [7, 10, 20, 50, 55, 106, 109, 193, 199, 203, 204, 218, 224], "polici": [7, 8, 10, 242, 244], "5": [7, 12, 14, 18, 20, 23, 25, 27, 29, 33, 35, 36, 37, 39, 41, 42, 43, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 101, 102, 105, 107, 109, 111, 112, 114, 120, 123, 125, 126, 130, 131, 132, 133, 135, 142, 146, 167, 168, 171, 173, 180, 182, 184, 187, 189, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 233, 234, 239, 240, 246, 247, 253, 256, 258, 260, 262, 263, 274, 275, 277, 280, 281, 284, 285], "center": [7, 10, 16, 39, 50, 58, 59, 69, 73, 75, 76, 86, 95, 114, 117, 120, 123, 125, 130, 132, 134, 138, 140, 146, 191, 194, 203, 208, 216, 263], "resid": 7, "standalon": [7, 140], "restructur": 7, "appli": [7, 10, 11, 19, 20, 26, 29, 33, 34, 35, 36, 37, 41, 50, 51, 52, 57, 58, 59, 60, 61, 62, 65, 66, 69, 74, 75, 77, 86, 89, 90, 91, 95, 99, 101, 102, 103, 105, 109, 110, 114, 115, 125, 128, 135, 137, 139, 150, 154, 157, 158, 162, 165, 166, 170, 173, 183, 192, 194, 196, 198, 199, 201, 203, 204, 205, 207, 208, 209, 210, 214, 215, 216, 217, 220, 224, 225, 226, 227, 228, 229, 232, 239, 242, 246, 253, 255, 258, 281, 284, 285], "surround": [7, 59, 76, 146, 216, 249], "nu": [7, 12, 67, 86, 99, 174, 196, 208, 220, 228, 234, 279], "equat": [7, 11, 12, 14, 16, 21, 23, 39, 41, 55, 58, 59, 61, 65, 67, 69, 72, 73, 77, 81, 82, 83, 84, 87, 90, 95, 102, 105, 109, 111, 113, 117, 118, 119, 122, 123, 125, 126, 127, 128, 130, 132, 133, 134, 139, 140, 141, 142, 146, 182, 187, 188, 191, 192, 193, 194, 195, 201, 202, 203, 206, 207, 208, 214, 218, 220, 223, 224, 225, 233, 253, 258, 259, 263, 275, 276, 279], "strip": [7, 60, 86, 99, 201, 244, 249], "out": [7, 12, 18, 19, 20, 24, 40, 41, 50, 51, 59, 60, 61, 64, 67, 75, 84, 86, 92, 95, 99, 102, 109, 110, 123, 125, 127, 130, 140, 150, 154, 165, 168, 170, 172, 173, 195, 196, 198, 199, 203, 204, 205, 206, 208, 209, 215, 218, 220, 224, 229, 239, 241, 246, 247, 277, 279, 280, 284, 285], "unimport": 7, "bullet": 7, "avoid": [7, 8, 10, 11, 19, 20, 24, 41, 42, 59, 60, 65, 84, 86, 89, 95, 98, 101, 127, 137, 167, 191, 192, 196, 198, 204, 208, 209, 216, 220, 224, 226, 228, 232, 241, 244, 247, 277, 278], "whitespac": [7, 59, 244], "invalid": [7, 12, 29, 59, 60, 101, 125, 198, 201, 216], "dx": [7, 10, 11, 16, 20, 24, 39, 41, 55, 59, 61, 63, 67, 76, 78, 81, 82, 83, 84, 86, 95, 102, 112, 118, 119, 162, 192, 204, 205, 211, 221, 224, 225, 229, 275, 279, 284, 286], "meta": [7, 59, 224, 225], "stackexchang": [7, 69], "5020": 7, "wikibook": [7, 86, 87], "overleaf": 7, "mathematical_express": 7, "verbatim": [7, 208], "_rewrit": 7, "_expand": 7, "difficult": [7, 18, 29, 59, 95, 123, 205, 218, 224, 225, 227, 240, 263, 279, 285], "sentenc": [7, 89], "thumb": [7, 89, 246], "greek": [7, 11, 32, 59, 99, 101, 195, 208], "letter": [7, 11, 12, 32, 52, 59, 60, 99, 173, 208, 246, 275, 277], "\u03b1": [7, 193, 207], "alpha": [7, 12, 50, 59, 67, 86, 88, 145, 149, 152, 170, 187, 191, 192, 193, 199, 201, 203, 204, 207, 208, 220, 224, 228], "logarithm": [7, 12, 33, 39, 41, 59, 60, 65, 84, 86, 95, 99, 199, 201, 205, 208, 218, 220, 227, 228, 276], "italic": 7, "emphasi": [7, 198], "asterisk": 7, "stirl": [7, 51, 64, 246], "fals": [7, 11, 12, 18, 19, 20, 23, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 84, 86, 87, 89, 90, 91, 92, 95, 96, 99, 101, 102, 103, 107, 109, 111, 112, 115, 118, 119, 120, 123, 125, 126, 130, 131, 132, 134, 135, 136, 137, 138, 141, 145, 157, 158, 162, 165, 170, 171, 172, 173, 176, 180, 183, 184, 185, 187, 188, 191, 192, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 220, 221, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 241, 242, 246, 247, 249, 253, 256, 277, 280, 281, 284], "permut": [7, 42, 44, 46, 47, 49, 52, 55, 56, 57, 60, 64, 67, 90, 92, 95, 119, 173, 193, 197, 199, 204, 221, 229, 230, 234, 246, 265, 285], "cycl": [7, 10, 41, 47, 50, 51, 57, 59, 62, 64, 90, 99, 147, 216, 246], "partit": [7, 46, 50, 64, 99, 127, 137, 139, 221, 228, 243, 265], "reduc": [7, 12, 19, 22, 28, 34, 36, 38, 42, 55, 59, 60, 62, 64, 65, 67, 74, 75, 84, 86, 95, 99, 109, 110, 137, 155, 173, 195, 197, 198, 199, 201, 202, 203, 204, 205, 209, 214, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 246, 281], "ge": [7, 18, 59, 64, 65, 67, 84, 90, 95, 99, 193, 196, 201, 204, 218, 246], "consecut": [7, 41, 50, 55, 58, 60, 64, 75, 220, 226], "group": [7, 40, 45, 46, 51, 52, 55, 56, 57, 59, 62, 64, 88, 89, 99, 152, 161, 162, 173, 193, 194, 195, 203, 204, 220, 224, 226, 227, 234, 246, 265], "pairwis": [7, 37, 40, 59, 64, 76, 95, 99, 221, 226], "ital": [7, 208], "last": [7, 8, 10, 12, 14, 15, 16, 18, 19, 20, 23, 25, 26, 27, 28, 29, 34, 35, 36, 40, 41, 42, 49, 50, 51, 55, 58, 59, 60, 63, 69, 86, 89, 90, 91, 92, 93, 95, 97, 98, 99, 101, 109, 122, 145, 178, 193, 194, 195, 196, 198, 199, 201, 204, 207, 208, 215, 216, 221, 224, 226, 227, 228, 229, 234, 237, 239, 240, 241, 242, 244, 246, 247, 249, 275, 277, 280, 281], "talk": [7, 13, 30, 60, 195, 203, 257], "handl": [7, 16, 18, 19, 20, 39, 47, 51, 59, 65, 86, 87, 89, 94, 99, 100, 101, 102, 110, 113, 123, 137, 153, 156, 162, 163, 168, 198, 204, 205, 214, 220, 224, 226, 229, 232, 240, 246, 247, 249, 280, 285], "referenc": [7, 8, 43, 48, 99, 122, 125, 170, 203], "overlin": [7, 18, 67], "normal": [7, 10, 12, 18, 19, 20, 29, 33, 37, 41, 50, 58, 59, 63, 65, 69, 72, 73, 74, 86, 87, 89, 93, 94, 95, 99, 101, 111, 113, 117, 123, 125, 131, 140, 146, 157, 167, 170, 171, 172, 173, 174, 178, 181, 183, 192, 195, 197, 198, 199, 201, 203, 204, 208, 209, 211, 216, 217, 221, 224, 228, 233, 239, 244, 246, 253, 268], "assign": [7, 18, 40, 41, 42, 55, 59, 64, 75, 86, 88, 89, 95, 101, 118, 123, 130, 140, 178, 189, 192, 194, 196, 201, 208, 226, 227, 234, 241, 257, 260, 277], "structur": [7, 10, 11, 15, 18, 20, 38, 40, 41, 47, 50, 51, 57, 59, 84, 86, 89, 90, 95, 102, 103, 105, 122, 171, 173, 194, 195, 198, 201, 203, 204, 205, 220, 224, 226, 227, 228, 232, 233, 241, 243, 246, 247, 277, 285], "suggest": [7, 10, 22, 26, 42, 50, 86, 95, 99, 123, 206, 281], "american": [7, 45, 60], "color": [7, 87, 107, 188, 208, 239, 246, 284], "colour": 7, "quotat": 7, "line_color": [7, 194, 211], "aesthet": [7, 11, 194], "ariti": [7, 194], "term": [7, 10, 11, 12, 16, 18, 20, 24, 26, 29, 41, 50, 59, 60, 61, 63, 64, 65, 67, 78, 82, 83, 84, 86, 89, 90, 95, 99, 103, 107, 109, 115, 118, 125, 127, 130, 133, 135, 137, 138, 152, 157, 169, 170, 173, 175, 178, 183, 185, 189, 191, 193, 195, 196, 197, 198, 199, 201, 203, 204, 205, 208, 210, 211, 213, 214, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 232, 233, 246, 253, 256, 260, 265, 275, 277, 279, 280, 285], "unrestrict": [7, 48, 246], "necklac": [7, 246], "bracelet": [7, 246], "impli": [7, 11, 12, 18, 33, 37, 41, 50, 89, 105, 173, 194, 199, 201, 208, 216, 218, 224, 226, 229, 232, 233, 246, 260], "turn": [7, 10, 11, 18, 29, 41, 59, 65, 67, 74, 84, 93, 117, 131, 135, 189, 195, 203, 205, 208, 215, 216, 218, 220, 221, 224, 239, 246, 262, 277, 279], "sequenc": [7, 12, 39, 41, 43, 46, 49, 50, 51, 55, 57, 58, 59, 60, 62, 64, 67, 69, 72, 73, 74, 75, 76, 83, 89, 90, 92, 95, 98, 99, 140, 146, 172, 173, 199, 202, 208, 210, 212, 215, 217, 218, 220, 221, 224, 225, 227, 234, 237, 240, 241, 246, 248, 249, 265], "revers": [7, 43, 48, 51, 58, 59, 60, 65, 86, 87, 89, 95, 99, 109, 172, 183, 188, 195, 197, 201, 204, 205, 208, 209, 216, 220, 224, 246, 285], "ambigu": [7, 10, 12, 14, 59, 161, 167, 220, 232, 237], "person": [7, 11], "chebyshev": [7, 39, 59, 86, 201, 204], "pafnuti": 7, "lvovich": 7, "tchebychev": 7, "whose": [7, 10, 11, 18, 20, 40, 42, 43, 48, 51, 58, 59, 60, 65, 69, 73, 75, 76, 82, 86, 89, 95, 99, 120, 135, 145, 168, 178, 184, 185, 189, 192, 196, 197, 199, 203, 204, 215, 216, 220, 224, 225, 226, 228, 234, 239, 243, 246, 247, 253, 256, 258, 260], "transliter": 7, "russian": 7, "chebyshevt": [7, 67, 208], "orthogonalpolynomi": 7, "t_n": [7, 64, 67, 86, 201, 204, 258], "tens": 7, "inclus": [7, 58, 105, 166, 195, 214, 215, 216, 227], "pronoun": 7, "gender": 7, "neutral": 7, "he": [7, 64, 84, 201], "she": [7, 227], "extran": [7, 224], "belittl": 7, "obvious": [7, 42, 50, 176, 191, 198, 218], "easili": [7, 10, 18, 20, 31, 59, 60, 82, 84, 95, 99, 100, 117, 135, 171, 191, 204, 207, 208, 213, 220, 221, 224, 226, 227, 240, 279], "straightforward": [7, 20, 50, 60, 95, 218], "unwelcom": 7, "judgement": 7, "phrase": [7, 11, 60], "friendli": [7, 41, 84, 221, 223, 226, 227, 241, 286], "mistak": [7, 12, 24, 50, 247], "goe": [8, 20, 30, 95, 215, 218, 227, 277, 280], "content": [8, 13, 41, 59, 60, 94, 196, 199, 201, 204, 207, 208, 236, 241, 244, 245, 265, 266, 267, 268, 269, 270, 271, 272, 276, 278], "setup": [8, 10, 41, 59, 126, 127, 128, 142, 183, 201, 204, 206, 207, 218, 239, 240, 242, 252, 284], "depend": [8, 10, 11, 12, 14, 18, 20, 26, 27, 31, 39, 41, 42, 50, 51, 58, 59, 60, 61, 64, 65, 67, 71, 76, 83, 84, 86, 87, 88, 95, 99, 100, 101, 107, 111, 114, 118, 119, 122, 123, 125, 127, 133, 135, 145, 146, 147, 162, 171, 173, 175, 178, 188, 189, 194, 196, 199, 201, 203, 204, 205, 207, 208, 209, 214, 218, 220, 221, 224, 225, 226, 227, 228, 239, 240, 241, 242, 246, 247, 260, 262, 263, 277, 279], "document": [8, 10, 11, 17, 20, 35, 36, 37, 50, 55, 59, 60, 65, 66, 67, 71, 81, 84, 85, 87, 92, 95, 100, 103, 113, 118, 133, 135, 136, 138, 140, 148, 162, 168, 182, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 201, 204, 208, 218, 222, 224, 226, 227, 237, 239, 241, 242, 244, 246, 253, 260, 261, 264, 275, 277, 278, 284, 285], "auto": [8, 10, 12, 24, 39, 59, 60, 87, 194, 201, 204, 208, 220, 224, 228], "rebuild": [8, 11, 20, 59, 204, 280], "live": [8, 32, 42, 140, 203, 221], "server": 8, "debug": [8, 41, 59, 86, 125, 162, 239, 240, 249], "incompat": [8, 23], "pick": [9, 18, 60, 64, 137, 167, 169, 285], "ignor": [10, 12, 14, 20, 41, 50, 59, 60, 64, 65, 69, 74, 84, 89, 95, 99, 109, 115, 125, 170, 173, 183, 194, 204, 208, 209, 220, 226, 227, 240, 285], "regex": 10, "categori": [10, 195, 264, 271], "lead": [10, 11, 18, 19, 20, 29, 58, 59, 65, 69, 86, 89, 95, 99, 111, 119, 157, 183, 192, 196, 199, 201, 203, 204, 205, 208, 215, 217, 220, 224, 227, 241, 244, 249, 278, 285], "against": [10, 18, 20, 29, 60, 102, 123, 240], "unrel": [10, 26, 59, 66, 196, 277], "capabl": [10, 11, 18, 27, 39, 41, 59, 63, 71, 84, 99, 102, 103, 133, 140, 194, 205, 208, 227, 278, 279, 285, 286], "w": [10, 12, 29, 41, 43, 49, 58, 59, 60, 61, 62, 65, 67, 84, 86, 89, 95, 96, 117, 120, 131, 138, 139, 142, 147, 158, 162, 171, 187, 189, 190, 193, 194, 196, 197, 201, 202, 203, 204, 205, 209, 215, 216, 218, 220, 221, 224, 225, 227, 228, 239, 247, 249, 260, 286], "pythonwarn": 10, "NOT": [10, 89, 109, 153, 157, 172, 175, 237, 240], "blog": [10, 20, 41, 64, 90, 221, 227], "post": [10, 18, 23, 24, 25, 26, 27, 28, 41, 53, 59, 208, 209, 220, 239, 280], "ned": 10, "batcheld": 10, "kanesmethod": [10, 117, 118, 123, 125, 126, 127, 128, 130, 131, 134, 135, 137, 140], "pinjoint": [10, 117, 126, 128, 134], "prismaticjoint": [10, 117, 128, 134], "q_": [10, 59, 117, 188, 221, 224], "u_": [10, 95, 117], "had": [10, 20, 25, 26, 51, 59, 60, 95, 99, 123, 137, 203, 204, 205, 208, 216, 218, 224, 226, 227, 242, 247, 274, 277, 280, 281], "templat": [10, 246], "axi": [10, 33, 52, 64, 65, 69, 70, 72, 73, 75, 81, 84, 86, 92, 95, 102, 107, 112, 117, 123, 125, 127, 130, 131, 132, 134, 137, 140, 141, 142, 145, 146, 170, 183, 185, 187, 189, 191, 192, 194, 199, 227, 253, 255, 258, 260, 263], "parent_axi": [10, 117], "child_axi": [10, 117], "parent": [10, 50, 59, 82, 117, 134, 183, 187, 194, 198, 199, 203, 239, 243, 253, 257, 258], "child": [10, 11, 117, 134, 183, 198, 243], "bodi": [10, 12, 41, 84, 101, 112, 113, 116, 117, 118, 120, 122, 123, 125, 126, 127, 128, 130, 133, 134, 135, 140, 141, 176, 182, 183, 187, 191, 192, 253, 255, 270], "parent_interfram": [10, 117, 134], "child_interfram": [10, 117, 134], "rotat": [10, 33, 47, 50, 52, 59, 68, 69, 70, 72, 74, 75, 90, 95, 102, 103, 117, 125, 128, 130, 132, 134, 138, 141, 157, 170, 183, 187, 189, 191, 192, 193, 194, 246, 253, 255, 258, 260, 262], "joint_axi": [10, 117, 126, 128, 134], "transform": [10, 11, 29, 33, 38, 41, 55, 58, 59, 60, 61, 63, 64, 67, 74, 92, 95, 107, 109, 117, 125, 134, 145, 166, 168, 170, 175, 193, 196, 199, 201, 203, 204, 210, 215, 216, 217, 220, 221, 224, 225, 226, 227, 228, 233, 241, 247, 253, 260, 279], "suppos": [10, 19, 20, 51, 58, 59, 60, 84, 195, 197, 201, 203, 204, 208, 215, 218, 224, 226, 237, 246, 258, 263, 277, 279, 285], "pin": [10, 33, 102, 103, 105, 117], "dcm": [10, 114, 117, 123, 125, 140, 183, 191, 192, 253], "q_pin": 10, "inspect": [10, 18, 95, 203, 214, 245, 247, 272], "notic": [10, 12, 20, 50, 51, 57, 59, 95, 161, 182, 198, 218, 234, 235, 246, 247, 277, 279, 280, 285], "theta_pin": 10, "rad": [10, 60, 107, 123, 203], "int_fram": 10, "orient_axi": [10, 114, 117, 183, 185], "align": [10, 41, 69, 95, 117, 192, 193, 208, 226, 239], "orient": [10, 33, 71, 75, 90, 117, 123, 125, 127, 130, 134, 138, 140, 183, 187, 189, 191, 192, 201, 246, 253, 254, 261, 262, 268], "parent_joint_po": [10, 117], "child_joint_po": [10, 117], "parent_point": [10, 117, 126, 128, 134], "child_point": [10, 117, 126, 128, 134], "mass": [10, 76, 111, 112, 113, 114, 116, 117, 118, 122, 123, 125, 126, 127, 128, 130, 132, 133, 134, 135, 136, 140, 141, 149, 174, 176, 177, 178, 189, 191, 239, 262, 270], "pos_from": [10, 117, 123, 125, 126, 127, 134, 140, 187, 191], "masscent": [10, 114, 117, 120, 126, 134, 138, 140], "parent_fram": [10, 134], "child_fram": [10, 134], "locatenew": [10, 114, 120, 125, 127, 130, 131, 132, 137, 138, 140, 141, 184, 187, 189, 191], "pars": [10, 51, 59, 92, 123, 134, 205, 207, 264, 272], "comprehens": [10, 18, 25, 26, 202, 216, 228, 274], "additional_transl": 10, "recogn": [10, 12, 26, 59, 60, 64, 74, 99, 102, 110, 196, 199, 207, 216, 217, 226, 233, 277], "logic": [10, 11, 18, 20, 34, 35, 36, 37, 40, 59, 61, 84, 86, 99, 165, 167, 168, 172, 208, 210, 216, 224, 228, 246, 277, 278, 279, 281], "node": [10, 11, 39, 53, 59, 86, 101, 105, 115, 149, 174, 183, 193, 198, 208, 215, 227, 232, 243, 280, 284], "maximum": [10, 12, 25, 26, 39, 41, 42, 50, 51, 59, 65, 86, 95, 99, 102, 125, 170, 178, 194, 199, 201, 204, 208, 215, 216, 220, 221, 224, 227, 228, 243, 246], "multipli": [10, 12, 26, 33, 37, 41, 50, 59, 70, 74, 81, 88, 90, 95, 99, 118, 127, 136, 137, 138, 150, 159, 173, 178, 179, 195, 196, 197, 199, 201, 203, 204, 208, 210, 217, 218, 221, 224, 229, 246, 257, 277, 280], "max": [10, 41, 50, 51, 59, 65, 67, 69, 86, 95, 99, 101, 102, 193, 194, 203, 204, 208, 215, 217, 218, 247], "min": [10, 51, 55, 59, 64, 65, 95, 101, 193, 194, 203, 208, 214, 224], "is_perfect_squar": 10, "ntheori": [10, 37, 50, 59, 60, 201, 204, 221, 246], "primetest": [10, 59, 99], "is_squar": [10, 59, 90, 99], "is_prim": [10, 18, 59, 195], "isprim": [10, 37, 60, 99], "divid": [10, 11, 50, 58, 59, 60, 75, 95, 99, 177, 178, 196, 198, 199, 201, 203, 204, 208, 224, 243, 280], "bottom_up": [10, 59], "interactive_travers": 10, "postorder_travers": [10, 59, 280], "preorder_travers": [10, 59, 280], "refactor": [10, 224, 232, 243], "tr": [10, 42, 50, 208, 217], "quantum": [10, 111, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 193, 270], "ever": [10, 11, 20, 65, 192, 195, 204, 218, 224, 241, 244, 280], "helper": [10, 24, 39, 41, 50, 54, 57, 59, 84, 87, 88, 158, 160, 169, 205, 215, 218, 221, 224, 225, 227, 240, 270], "default_sort_kei": [10, 40, 48, 59, 232], "matrixel": [10, 41], "matrixsymbol": [10, 15, 18, 26, 37, 38, 41, 59, 90, 92, 95, 208, 228, 230], "layer": [10, 109, 201, 247], "imprecis": 10, "free_symbol": [10, 11, 24, 41, 59, 68, 86, 90, 162, 180, 183, 204, 214, 221], "sinc": [10, 11, 12, 14, 15, 16, 18, 19, 20, 34, 39, 41, 42, 50, 51, 52, 55, 56, 57, 59, 60, 62, 64, 65, 67, 68, 69, 71, 72, 75, 77, 83, 84, 86, 88, 89, 90, 95, 99, 112, 117, 125, 138, 140, 149, 173, 174, 178, 182, 189, 192, 195, 196, 198, 199, 201, 203, 204, 208, 211, 216, 217, 218, 220, 221, 224, 226, 227, 228, 234, 238, 242, 243, 244, 246, 247, 251, 257, 259, 260, 262, 274, 279, 281, 284, 285, 286], "atomicexpr": [10, 59], "concept": [10, 11, 18, 50, 125, 192, 198, 200, 203, 208, 227, 232, 262, 278, 283], "misappli": 10, "noth": [10, 40, 50, 59, 72, 86, 157, 173, 195, 199, 207, 208, 220, 224, 226, 237, 239, 247, 249, 277], "introduc": [10, 19, 24, 55, 58, 59, 67, 84, 95, 100, 103, 123, 125, 130, 131, 132, 136, 173, 178, 192, 199, 200, 204, 205, 208, 215, 218, 221, 228, 244, 271, 278, 281, 283, 285], "21494": 10, "size": [10, 16, 26, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 59, 60, 62, 64, 87, 90, 92, 95, 98, 99, 107, 125, 135, 136, 137, 146, 168, 169, 188, 194, 197, 201, 208, 220, 221, 224, 228, 246, 275], "die": [10, 203, 228], "histor": [10, 11, 14, 20, 60, 224, 228], "21563": 10, "revert": [10, 199, 204], "sample_it": [10, 228], "consequ": [10, 20, 37, 59, 196, 198, 277, 285], "subclass": [10, 11, 18, 20, 35, 36, 41, 59, 66, 70, 72, 86, 89, 142, 148, 157, 161, 162, 163, 168, 170, 171, 194, 195, 197, 198, 199, 203, 204, 208, 228, 239, 240, 241, 244, 247, 253, 257, 280], "kei": [10, 11, 12, 14, 23, 34, 37, 40, 48, 50, 51, 59, 60, 61, 64, 75, 88, 90, 95, 98, 99, 102, 122, 123, 165, 168, 173, 192, 194, 196, 198, 199, 200, 201, 203, 204, 205, 206, 208, 220, 224, 225, 226, 228, 232, 243, 246, 247, 249, 281, 282, 285], "domainmatrix": [10, 26, 91, 95, 200, 203, 206, 271], "switch": [10, 50, 57, 86, 99, 109, 201, 204], "21402": 10, "earlier": [10, 113, 205, 209, 218, 220, 247, 258, 260, 280], "could": [10, 11, 12, 16, 18, 20, 25, 27, 28, 36, 41, 52, 59, 71, 84, 86, 89, 117, 120, 123, 133, 137, 173, 176, 178, 195, 198, 201, 203, 205, 208, 216, 218, 220, 224, 225, 226, 227, 228, 229, 232, 233, 240, 244, 258, 259, 277, 280, 285], "traceback": [10, 12, 15, 18, 19, 20, 23, 25, 26, 27, 28, 29, 34, 35, 36, 41, 42, 51, 59, 60, 63, 69, 86, 89, 90, 91, 92, 93, 95, 97, 98, 101, 109, 193, 195, 198, 199, 201, 204, 207, 215, 216, 224, 226, 227, 237, 239, 240, 242, 244, 246, 247, 249, 277, 281], "typeerror": [10, 12, 19, 20, 25, 34, 35, 36, 51, 59, 69, 74, 89, 91, 93, 97, 109, 147, 215, 216, 240, 247], "unsupport": [10, 12, 15, 109, 208], "operand": [10, 12, 51, 59, 184, 203, 256], "dict": [10, 12, 14, 18, 24, 25, 28, 29, 41, 51, 59, 60, 61, 75, 76, 89, 90, 95, 99, 101, 118, 119, 153, 165, 168, 179, 181, 183, 194, 197, 198, 199, 201, 203, 204, 205, 206, 208, 220, 221, 224, 225, 226, 227, 228, 232, 239, 240, 246, 253, 286], "solve_lin_si": [10, 206], "heurisch": [10, 86], "smith_normal_form": [10, 96, 197], "newmatrix": 10, "holonom": [10, 80, 83, 124, 125, 126, 127, 133, 135, 136, 264, 270, 271], "polymatrix": 10, "risch": [10, 86, 275], "broken": [10, 48, 59, 191, 208, 224, 249], "20780": 10, "20759": 10, "20621": 10, "19882": 10, "18844": 10, "21441": 10, "21427": 10, "21496": 10, "potenti": [10, 18, 71, 92, 95, 99, 118, 119, 120, 122, 132, 133, 184, 190, 198, 203, 208, 215, 218, 220, 224, 242, 243, 256, 262, 270], "impact": 10, "downstream": [10, 18], "goal": [10, 11, 40, 113, 141, 203, 205, 239, 240, 242, 278, 279], "perhap": [10, 14, 41, 59, 89, 99, 158, 198, 226, 241, 274], "tableform": [10, 226, 249], "isn": [10, 20, 86, 113, 123, 227, 279], "advis": [10, 18, 29, 40, 117, 123], "usecas": 10, "unclear": [10, 18, 113], "line2dbaseseri": [10, 194], "linecollect": [10, 194], "bokeh": 10, "plotli": 10, "mayavi": 10, "k3d": 10, "matplotlibbackend": [10, 194], "get_point": [10, 194], "uniformli": [10, 16, 50, 75, 76, 102, 107, 194, 242], "adapt": [10, 107, 194, 214, 226, 246, 252], "get_data": [10, 194, 250], "dft": [10, 62, 112], "fourier": [10, 59, 67, 86, 112, 166, 212, 265], "as_explicit": [10, 26, 92, 95, 112, 230], "exp": [10, 11, 12, 14, 18, 20, 27, 29, 33, 39, 41, 49, 58, 59, 61, 63, 64, 65, 67, 77, 78, 81, 84, 86, 90, 92, 95, 99, 111, 149, 152, 168, 174, 193, 198, 199, 204, 205, 208, 210, 215, 218, 220, 224, 225, 226, 227, 228, 229, 246, 263, 275, 279, 281, 286], "discret": [10, 39, 41, 42, 49, 51, 59, 60, 67, 99, 173, 178, 210, 213, 224, 226, 227, 265, 274], "unevalu": [10, 11, 18, 19, 20, 35, 36, 39, 51, 58, 59, 65, 67, 76, 86, 99, 109, 150, 154, 161, 162, 173, 204, 207, 215, 216, 220, 224, 226, 227, 228, 275, 279, 280, 286], "represent": [10, 11, 20, 25, 33, 40, 41, 42, 50, 53, 59, 60, 65, 67, 71, 79, 81, 83, 84, 86, 88, 89, 90, 91, 92, 98, 99, 106, 107, 112, 113, 114, 122, 133, 137, 138, 142, 162, 167, 168, 170, 171, 173, 175, 182, 188, 189, 191, 194, 195, 197, 199, 201, 203, 204, 205, 206, 207, 208, 210, 218, 220, 221, 224, 227, 228, 233, 234, 249, 253, 256, 263, 271, 275, 277, 280], "21626": 10, "expos": [10, 40, 228], "mutat": [10, 109, 197, 199, 228], "flat": [10, 73, 90, 240], "todok": [10, 90], "ey": [10, 26, 90, 91, 92, 93, 94, 95, 97, 197, 203, 229, 249, 281], "converg": [10, 41, 58, 63, 67, 86, 99, 142, 204, 211, 215, 218, 275], "legacy_matrix": [10, 86], "discontinu": [10, 39, 63, 65, 86, 102, 211, 226], "theano_cod": 10, "aesara_cod": [10, 208], "theanoprint": 10, "aesaraprint": [10, 208], "predic": [10, 11, 34, 35, 39, 101, 204, 220, 246, 265], "experienc": [10, 42], "big": [10, 12, 16, 18, 43, 59, 61, 99, 140, 153, 193, 207, 208, 215, 249, 275, 277], "registr": 10, "add_handl": 10, "remove_handl": [10, 34], "multipledispatch": [10, 34], "regist": [10, 34, 35, 36, 60, 169], "register_mani": [10, 35, 36], "askprimehandl": 10, "staticmethod": [10, 239], "register_handl": [10, 34], "prime": [10, 18, 34, 35, 36, 37, 50, 57, 58, 59, 60, 62, 64, 67, 99, 144, 195, 196, 198, 199, 201, 204, 218, 220, 221, 228, 243], "Not": [10, 11, 19, 20, 26, 59, 64, 89, 109, 208, 227, 228, 246, 279, 286], "primepred": [10, 37], "q": [10, 11, 12, 15, 18, 22, 24, 32, 33, 34, 35, 36, 37, 38, 41, 51, 55, 58, 59, 60, 67, 76, 81, 82, 84, 86, 88, 90, 95, 101, 102, 109, 110, 117, 118, 119, 122, 123, 125, 127, 132, 134, 135, 136, 137, 140, 141, 142, 153, 167, 173, 176, 183, 184, 185, 187, 188, 189, 191, 194, 195, 196, 198, 199, 201, 203, 204, 205, 207, 208, 210, 218, 221, 224, 226, 228, 233, 234, 249, 253, 256, 257, 259, 262, 281, 285], "20209": 10, "stochast": 10, "timestamp": 10, "wienerprocess": [10, 228], "normaldistribut": [10, 228], "20078": 10, "misspel": 10, "absorbing_prob": [10, 228], "absorb": [10, 11, 84, 224, 228, 275], "probabilit": [10, 228], "shutil": 10, "power": [10, 12, 23, 33, 38, 41, 49, 50, 51, 60, 62, 63, 65, 81, 82, 84, 86, 88, 90, 92, 99, 100, 109, 123, 140, 145, 156, 159, 172, 175, 178, 179, 183, 195, 196, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 212, 215, 217, 220, 221, 224, 226, 227, 228, 232, 241, 246, 265, 274, 275, 276, 277, 278, 280, 281, 284], "immut": [10, 11, 59, 91, 94, 97, 192, 199, 224, 229, 268, 274, 281], "coordsystem": [10, 61], "explicit": [10, 11, 18, 20, 24, 25, 51, 58, 59, 63, 75, 76, 86, 98, 99, 118, 122, 123, 127, 137, 141, 192, 195, 204, 207, 208, 210, 216, 218, 224, 225, 226, 227, 243], "appropi": 10, "patch": [10, 61, 208], "real": [10, 11, 12, 15, 16, 18, 19, 20, 24, 25, 33, 35, 37, 38, 39, 41, 51, 59, 60, 61, 63, 64, 65, 66, 67, 71, 75, 76, 81, 84, 86, 89, 90, 92, 95, 99, 101, 105, 111, 123, 140, 142, 145, 146, 153, 171, 185, 193, 196, 199, 203, 204, 205, 208, 209, 211, 215, 216, 218, 220, 223, 224, 226, 227, 228, 233, 237, 241, 250, 279, 285, 286], "similarli": [10, 18, 55, 59, 60, 67, 71, 95, 102, 103, 109, 118, 138, 194, 195, 198, 203, 205, 215, 216, 218, 224, 239, 247, 258, 259, 281], "manifold": [10, 61], "track": [10, 12, 50, 59, 63, 67, 122, 134, 138, 157, 192, 215, 234, 275], "coord_system": 10, "connect_to": 10, "coord_tuple_transform_to": [10, 61], "constructor": [10, 11, 20, 35, 36, 40, 41, 46, 50, 51, 52, 59, 66, 67, 88, 93, 95, 127, 166, 167, 171, 175, 194, 195, 197, 198, 199, 208, 216, 224, 233, 241, 257, 265, 276, 280], "str": [10, 11, 20, 35, 40, 41, 42, 51, 59, 60, 61, 63, 68, 69, 72, 75, 76, 87, 89, 92, 99, 101, 107, 117, 118, 120, 140, 157, 167, 173, 183, 185, 187, 194, 199, 203, 208, 220, 224, 228, 244, 246, 247, 249, 253], "unord": [10, 12, 59, 99, 199, 227, 246, 247], "lambidfi": 10, "guess": [10, 14, 40, 60, 63, 84, 87, 188, 201, 204, 218, 221, 280], "construct": [10, 16, 23, 35, 36, 40, 41, 59, 61, 65, 67, 69, 73, 75, 87, 92, 95, 100, 103, 113, 114, 118, 120, 123, 125, 158, 162, 171, 172, 175, 179, 195, 198, 199, 201, 203, 204, 208, 221, 226, 228, 229, 233, 241, 243, 244, 257, 259, 260, 277, 280, 281, 285], "superclass": [10, 11, 18, 58, 59, 86, 92, 199], "scalar": [10, 27, 33, 59, 61, 74, 88, 90, 92, 95, 100, 120, 123, 172, 183, 184, 185, 190, 192, 195, 197, 201, 208, 224, 229, 241, 247, 253, 255, 256, 257, 258, 259, 261, 263, 268, 270], "boolean": [10, 11, 20, 21, 23, 34, 35, 36, 37, 38, 39, 41, 59, 65, 69, 73, 74, 75, 76, 87, 90, 95, 96, 99, 102, 107, 109, 118, 158, 183, 185, 188, 194, 197, 199, 201, 203, 205, 208, 220, 224, 226, 228, 246, 256, 281], "sens": [10, 11, 16, 18, 20, 33, 37, 39, 40, 59, 61, 64, 67, 84, 89, 118, 125, 178, 183, 192, 195, 201, 203, 217, 218, 220, 227, 228, 240, 241, 246, 262, 285], "exponenti": [10, 12, 18, 33, 41, 50, 55, 59, 60, 64, 86, 89, 90, 95, 99, 101, 159, 175, 205, 220, 224, 227, 228, 276, 277, 281], "trick": [10, 11, 12, 55, 218, 234], "treat": [10, 11, 18, 19, 20, 24, 28, 49, 50, 57, 59, 64, 67, 74, 75, 95, 101, 120, 123, 146, 183, 189, 196, 198, 199, 201, 203, 204, 205, 207, 208, 215, 216, 218, 220, 221, 224, 226, 232, 240, 243, 260, 277, 281], "cdot": [10, 18, 42, 58, 64, 67, 77, 81, 82, 84, 90, 92, 95, 99, 110, 112, 138, 178, 189, 191, 192, 193, 195, 196, 204, 211, 215, 218, 224, 226, 229, 230, 259, 260, 279, 280, 285], "attributeerror": [10, 18, 59, 95, 227, 247, 281], "as_coeff_mul": [10, 59, 84, 92], "tri": [10, 11, 12, 18, 23, 25, 40, 59, 67, 75, 84, 86, 125, 137, 168, 195, 196, 203, 208, 210, 220, 224, 225, 227, 239, 277, 285], "benchmark": [10, 125, 139], "runtest": [10, 239], "tmpfile": 10, "random_complex_numb": [10, 59], "verify_numer": [10, 59], "test_derivative_numer": [10, 59], "_randrang": [10, 59, 60], "_randint": [10, 59, 201], "as_poli": [10, 59, 196, 204], "as_expr": [10, 59, 95, 198, 203, 204, 205, 281], "combintor": 10, "perm_cycl": [10, 51, 208], "printer": [10, 11, 20, 51, 59, 67, 87, 95, 100, 188, 233, 240, 241, 247, 276, 280], "init_print": [10, 26, 31, 41, 51, 63, 86, 87, 95, 103, 188, 195, 196, 207, 275, 279, 281, 284, 285, 286], "problemat": [10, 20, 198], "affect": [10, 18, 20, 58, 59, 95, 182, 204, 226, 227, 258], "18056": 10, "15416": 10, "100x": 10, "slowdown": [10, 63], "significantli": [10, 26, 41, 63, 113, 135, 199, 210, 240, 243], "slower": [10, 20, 26, 55, 95, 198, 203, 247, 274], "_sympifi": [10, 59, 92, 280], "strict": [10, 11, 50, 51, 59, 63, 64, 90, 95, 201, 204, 226, 227, 246, 249, 285], "lot": [10, 50, 59, 77, 84, 86, 95, 123, 140, 194, 207, 211, 221, 227, 239, 285], "secur": 10, "whatev": [10, 12, 20, 50, 59, 60, 220, 224, 225, 227, 247], "__repr__": [10, 208], "12524": 10, "repr": [10, 41, 86, 167, 198, 203, 208, 239, 284], "plenti": 10, "_sympy_": [10, 59], "disabl": [10, 11, 59, 60, 84, 86, 99, 201, 204, 208, 216, 224, 226, 237, 239, 242, 246], "constant": [10, 11, 23, 24, 26, 28, 39, 41, 58, 59, 63, 65, 67, 83, 84, 86, 102, 103, 109, 122, 123, 125, 140, 141, 150, 154, 160, 176, 177, 179, 180, 181, 184, 187, 189, 194, 196, 199, 201, 203, 204, 205, 208, 210, 215, 218, 220, 221, 224, 225, 226, 227, 228, 239, 241, 246, 247, 256, 260, 263, 270, 275, 281, 286], "lh": [10, 14, 23, 41, 49, 59, 206, 208, 224, 226, 227, 259], "tensexpr": [10, 110, 234], "substitute_indic": 10, "danger": [10, 196], "tensor_head": [10, 110, 234], "shorter": [10, 29, 59, 69, 113, 135, 182, 195, 199, 208, 241, 249], "creation": [10, 12, 20, 59, 61, 95, 114, 120, 130, 133, 134, 135, 136, 137, 147, 157, 161, 162, 163, 173, 191, 192, 208, 228, 233, 241, 247], "_dummy_fmt": 10, "l_": [10, 86, 95, 193], "obsolet": 10, "dummy_nam": [10, 234], "clearer": [10, 257], "metric_symmetri": [10, 234], "set_metr": [10, 234], "delta": [10, 12, 41, 43, 53, 64, 82, 84, 88, 107, 137, 145, 173, 193, 208, 215, 221, 224, 228, 229, 234], "epsilon": [10, 12, 58, 60, 67, 84, 86, 144, 208, 234], "latter": [10, 15, 20, 41, 50, 59, 64, 67, 84, 99, 195, 199, 203, 208, 218, 221, 234, 241, 246, 247, 277], "involv": [10, 12, 16, 18, 23, 25, 36, 38, 50, 58, 59, 60, 64, 71, 72, 84, 86, 99, 109, 114, 118, 123, 152, 162, 168, 170, 180, 191, 192, 195, 196, 199, 201, 203, 204, 205, 209, 210, 215, 216, 217, 218, 220, 221, 224, 226, 229, 247, 285], "obscur": [10, 18], "young": [10, 102, 234], "tableau": 10, "favor": 10, "tensorindex": [10, 234], "tensor_indic": [10, 110, 234], "denot": [10, 11, 12, 16, 50, 51, 59, 61, 67, 81, 82, 84, 86, 88, 89, 90, 95, 99, 101, 109, 178, 183, 189, 194, 195, 196, 201, 203, 211, 215, 216, 218, 224, 228, 233, 234, 253, 255, 257, 258, 260, 262], "set_dimens": 10, "unit_system": [10, 180], "set_quantity_dimens": [10, 176], "set_global_dimens": 10, "set_scale_factor": 10, "set_quantity_scale_factor": [10, 176], "set_global_relative_scale_factor": [10, 180], "get_dimensional_expr": 10, "unitsystem": [10, 181], "dimension": [10, 26, 39, 41, 43, 61, 71, 72, 73, 74, 75, 92, 95, 103, 110, 140, 147, 149, 159, 175, 189, 190, 194, 195, 201, 203, 204, 207, 208, 226, 227, 229, 230, 234, 240, 262, 286], "_collect_factor_and_dimens": 10, "motiv": [10, 13, 20, 30, 204], "emptyset": [10, 18, 25, 39, 40, 89, 208, 216, 227, 253, 286], "is_empti": [10, 18, 51], "unknown": [10, 11, 15, 18, 19, 20, 26, 28, 33, 59, 60, 103, 158, 206, 223, 224, 225, 226, 227, 246, 286], "empti": [10, 11, 18, 24, 25, 28, 35, 39, 40, 41, 42, 50, 54, 58, 59, 71, 74, 75, 76, 89, 90, 95, 99, 118, 137, 168, 181, 199, 203, 204, 208, 214, 215, 216, 218, 224, 226, 227, 239, 241, 246, 249, 280], "individu": [10, 18, 20, 23, 26, 59, 65, 70, 75, 76, 88, 90, 92, 95, 109, 138, 145, 163, 167, 193, 216, 224, 239, 281], "denest": [10, 59, 204, 220, 226, 246], "particl": [10, 114, 116, 117, 118, 123, 127, 128, 133, 135, 137, 140, 141, 149, 152, 159, 160, 171, 173, 176, 178, 191, 234, 270], "rigidbodi": [10, 114, 116, 118, 122, 125, 130, 131, 132, 133, 138, 140, 270], "potential_energi": [10, 117, 118, 120, 132, 138], "energi": [10, 111, 114, 118, 120, 123, 132, 149, 174, 178, 189, 234, 260, 270], "setter": [10, 123, 140], "getter": [10, 59, 123, 140], "set_": 10, "set_condit": 10, "17749": 10, "side": [10, 12, 16, 18, 23, 25, 41, 50, 51, 59, 71, 75, 86, 95, 99, 102, 109, 118, 122, 137, 138, 141, 161, 162, 178, 183, 193, 195, 201, 203, 206, 208, 225, 227, 228, 232, 239, 241, 263, 275], "unpack": [10, 59, 90, 95, 246, 247], "emul": [10, 220, 227, 229, 247], "is_deriv": [10, 59], "as_finite_differ": [10, 39, 59, 275], "17881": 10, "get_matrix": [10, 234], "__getitem__": [10, 59, 90, 233], "__iter__": [10, 51, 59, 220], "_components_data_full_destroi": 10, "__pow__": [10, 90, 199, 205], "flaw": 10, "replace_with_arrai": [10, 234, 235], "cach": [10, 18, 64, 84, 195, 204, 208, 237, 242, 243], "safe": [10, 59, 99, 198, 204, 226, 232, 275], "squar": [10, 12, 18, 24, 25, 29, 33, 37, 41, 50, 59, 60, 65, 75, 76, 84, 86, 90, 91, 95, 98, 99, 102, 109, 111, 135, 136, 159, 175, 183, 193, 197, 199, 201, 203, 204, 205, 208, 216, 220, 221, 224, 227, 228, 279], "jordan": [10, 26, 84, 90, 95, 206, 224, 226, 227], "band": [10, 90, 98], "eigenvalu": [10, 90, 95, 123, 125, 167, 170, 279], "elif": [10, 18, 19, 20, 65], "getsourc": [10, 247, 251], "sum": [10, 16, 18, 24, 41, 48, 51, 58, 59, 62, 64, 67, 72, 74, 82, 84, 86, 88, 89, 90, 92, 95, 99, 105, 120, 135, 152, 156, 159, 167, 170, 172, 173, 193, 195, 196, 198, 199, 203, 204, 205, 208, 210, 211, 213, 215, 217, 218, 220, 221, 224, 226, 227, 228, 229, 230, 232, 234, 243, 246, 285], "meter": [10, 102, 103, 144, 147, 176, 178, 179, 180], "si": [10, 20, 67, 83, 84, 146, 175, 176, 178, 179, 180, 208], "cg": [10, 152, 170], "aris": [10, 18, 19, 59, 64, 84, 86, 170, 192, 198, 203], "scale": [10, 68, 69, 70, 74, 75, 76, 87, 102, 153, 174, 176, 178, 180, 181, 188, 192, 194, 204, 211, 228, 260, 262], "kilomet": [10, 179, 180], "1000": [10, 12, 41, 43, 59, 60, 63, 92, 99, 140, 178, 179, 180, 193, 207, 208, 217], "dimensionsystem": [10, 175], "14318": 10, "duplic": [10, 12, 50, 53, 60, 65, 67, 95, 99, 216, 224, 246, 278], "flatten": [10, 40, 59, 198, 230, 235, 246, 247], "neither": [10, 18, 19, 37, 59, 147, 168, 194, 204, 215, 216, 217, 224, 234, 247, 253, 262, 285], "polymorph": 10, "anymor": [10, 194], "temporarili": [10, 59], "point3d": [10, 72, 73, 74, 146], "p1": [10, 42, 50, 51, 55, 58, 69, 71, 72, 73, 74, 75, 102, 109, 114, 117, 127, 140, 142, 187, 194, 198, 199, 201, 205, 217, 228, 229], "p2": [10, 19, 50, 51, 58, 69, 71, 72, 73, 74, 75, 102, 109, 114, 117, 140, 187, 194, 198, 199, 201, 205, 217, 228], "conflict": [10, 65, 99, 109, 123, 241], "throughout": [11, 84, 89, 201, 211, 227, 277], "elsewher": [11, 18, 64, 88, 125, 197, 239], "termnam": 11, "antideriv": [11, 65, 67, 86, 224, 275], "frac": [11, 16, 18, 20, 22, 26, 39, 58, 59, 60, 61, 64, 65, 67, 84, 86, 95, 99, 101, 109, 127, 138, 176, 188, 189, 191, 192, 193, 197, 201, 204, 208, 210, 211, 215, 218, 221, 224, 225, 227, 228, 229, 246, 260, 262, 275, 279, 280, 284, 285], "indefinit": [11, 33, 65, 83, 84, 86, 95, 199, 201, 202, 204, 213, 275], "integr": [11, 12, 15, 22, 31, 33, 39, 51, 58, 59, 61, 64, 65, 77, 78, 79, 82, 88, 90, 95, 98, 99, 109, 111, 118, 123, 133, 140, 159, 168, 171, 174, 177, 182, 184, 189, 193, 195, 198, 199, 201, 204, 205, 208, 210, 211, 218, 224, 225, 228, 241, 249, 253, 256, 257, 260, 261, 265, 268, 276, 279, 284], "primit": [11, 50, 59, 60, 67, 99, 167, 171, 195, 196, 198, 199, 201, 203, 204, 207, 208, 221, 275], "terminologi": [11, 22, 234], "tupl": [11, 20, 24, 27, 28, 33, 35, 36, 39, 40, 41, 42, 50, 51, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 81, 84, 86, 90, 95, 98, 99, 101, 102, 103, 107, 114, 117, 118, 120, 122, 135, 136, 138, 140, 142, 157, 158, 159, 162, 167, 170, 171, 172, 173, 183, 187, 192, 194, 195, 197, 198, 199, 201, 205, 206, 208, 209, 210, 214, 216, 220, 221, 224, 225, 226, 227, 228, 229, 233, 234, 239, 240, 241, 242, 246, 247, 249, 253, 257, 275, 280, 281, 284], "subexpress": [11, 20, 41, 59, 65, 90, 113, 115, 203, 204, 208, 215, 220, 227, 241, 247, 274], "togeth": [11, 12, 16, 41, 50, 59, 63, 88, 95, 99, 133, 159, 170, 178, 192, 195, 199, 201, 203, 204, 207, 208, 220, 224, 226, 228, 239, 240, 246, 279, 285], "walk": [11, 41, 43, 59, 165, 168, 218], "extract": [11, 25, 28, 29, 39, 59, 86, 90, 92, 95, 99, 110, 125, 133, 182, 192, 201, 203, 204, 226, 227, 228, 239, 241, 246], "rebuilt": [11, 280], "atom": [11, 23, 41, 51, 59, 86, 89, 90, 111, 174, 198, 205, 208, 226, 227, 233], "queri": [11, 18, 19, 20, 34, 37, 38, 39, 41, 59, 71, 204, 220, 228], "is_real": [11, 18, 20, 25, 59, 61, 65, 66, 95, 185, 208, 233], "restrict": [11, 18, 20, 23, 41, 48, 59, 60, 67, 95, 102, 103, 173, 195, 198, 203, 205, 223], "never": [11, 18, 20, 59, 65, 86, 175, 204, 205, 208, 216, 226, 228, 237, 257, 277, 278], "is_": [11, 20, 59], "leav": [11, 18, 20, 27, 28, 41, 59, 86, 95, 99, 119, 133, 157, 173, 215, 243, 274, 280, 285], "recurs": [11, 12, 15, 18, 20, 39, 59, 64, 84, 86, 89, 90, 99, 125, 194, 201, 204, 205, 208, 209, 213, 215, 220, 226, 227, 232, 237, 239, 243, 244, 246, 276, 285], "canonic": [11, 46, 59, 217, 234, 265], "excess": 11, "discourag": [11, 18, 59, 220], "expens": [11, 20, 59, 137, 217, 224, 225, 226, 242, 281], "matrix": [11, 15, 16, 18, 22, 27, 28, 33, 41, 48, 51, 59, 60, 61, 67, 74, 84, 86, 88, 90, 91, 93, 94, 97, 98, 100, 101, 109, 110, 112, 114, 117, 118, 119, 122, 123, 125, 126, 127, 128, 130, 131, 132, 134, 135, 136, 140, 141, 142, 145, 146, 148, 156, 157, 162, 167, 168, 170, 172, 173, 175, 178, 182, 183, 192, 193, 195, 197, 201, 203, 206, 208, 209, 216, 218, 220, 221, 224, 226, 227, 229, 230, 232, 233, 234, 235, 240, 241, 246, 247, 249, 253, 255, 256, 258, 262, 268, 276, 279, 280, 285, 286], "sympifi": [11, 12, 18, 19, 41, 63, 69, 89, 138, 146, 171, 173, 183, 184, 198, 199, 274, 280], "bound": [11, 23, 37, 41, 42, 58, 59, 68, 69, 70, 72, 74, 75, 86, 99, 171, 199, 201, 203, 204, 208, 214, 224, 226, 227, 228, 233, 243, 249, 253], "dummi": [11, 41, 55, 58, 59, 65, 84, 86, 95, 123, 140, 168, 173, 198, 199, 203, 204, 205, 214, 215, 216, 218, 220, 224, 227, 232, 234, 237, 241, 246, 247], "ration": [11, 18, 20, 34, 36, 37, 39, 41, 58, 59, 63, 64, 65, 67, 69, 72, 74, 76, 80, 84, 86, 87, 92, 95, 99, 101, 109, 142, 175, 193, 196, 201, 202, 203, 205, 208, 213, 216, 217, 218, 220, 221, 223, 226, 227, 228, 246, 253, 276, 277, 280, 284], "unequ": [11, 12, 14, 59, 102, 208], "accident": 11, "clash": [11, 32, 59, 95], "contrast": [11, 20, 58, 59, 127, 198, 218, 224, 279], "_eval_": 11, "_eval_deriv": [11, 20, 59, 67], "overrid": [11, 12, 41, 59, 68, 69, 75, 101, 171, 208, 233, 240, 241, 246, 247], "pre": [11, 40, 41, 59, 193, 194, 209, 217, 220, 226, 227, 239, 258, 262, 280], "dispatch": [11, 35, 36, 37, 59, 60, 168, 208, 227, 243], "shorthand": [11, 12, 18, 20, 59, 89, 167, 203, 216, 237], "stand": [11, 58, 59, 140, 196, 198, 199, 205], "reserv": [11, 18, 123, 234, 241, 281], "smaller": [11, 41, 50, 51, 59, 60, 64, 67, 75, 86, 92, 99, 135, 196, 198, 201, 204, 211, 217, 218, 226, 246, 274, 285], "children": [11, 59, 60, 198, 243], "leaf": [11, 198, 208, 217, 280], "strictli": [11, 12, 15, 17, 18, 37, 39, 59, 67, 95, 99, 109, 201, 220, 226], "dag": 11, "map": [11, 18, 20, 39, 40, 41, 49, 50, 51, 59, 60, 71, 75, 82, 84, 86, 89, 90, 99, 107, 118, 127, 151, 162, 163, 168, 183, 192, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 215, 220, 224, 225, 226, 227, 228, 232, 233, 240, 243, 246, 247, 249, 253], "colloqui": [11, 22], "lambda": [11, 12, 20, 23, 27, 35, 36, 39, 41, 50, 51, 59, 60, 61, 65, 86, 90, 91, 92, 95, 98, 99, 101, 123, 136, 137, 140, 141, 158, 194, 201, 203, 204, 208, 209, 216, 217, 220, 224, 226, 227, 228, 229, 237, 246, 247, 253, 255, 258, 274, 281], "hyper": [11, 59, 64, 67, 78, 81, 208, 210, 218, 220, 226, 228, 285], "primepi": [11, 20, 99], "divisor_sigma": [11, 99], "undefin": [11, 20, 25, 35, 36, 39, 59, 65, 66, 67, 86, 92, 101, 114, 192, 203, 214, 215, 218, 247, 275, 286], "interchang": [11, 55, 58, 84, 224], "memori": [11, 41, 59, 99, 204, 229, 240, 243], "maintain": [11, 12, 59, 60, 99, 103, 208, 216, 217, 224, 227, 243], "mental": 11, "hidden": [11, 182], "state": [11, 16, 18, 50, 57, 59, 67, 99, 102, 109, 111, 117, 118, 119, 122, 125, 127, 141, 145, 149, 150, 152, 153, 154, 156, 157, 158, 162, 165, 167, 168, 169, 170, 172, 173, 204, 208, 217, 218, 220, 228, 243, 270, 281], "hashabl": [11, 56, 84, 246], "repl": [11, 234], "intermedi": [11, 41, 42, 82, 90, 117, 123, 125, 130, 134, 157, 167, 175, 176, 183, 187, 191, 227, 241, 282], "execut": [11, 18, 31, 41, 87, 90, 140, 194, 208, 224, 227, 237, 239, 241, 242, 247, 249, 252, 264, 279, 284], "idiom": [11, 250, 277, 278], "anti": [11, 33, 37, 55, 65, 86, 90, 145, 150, 234], "frown": 11, "upon": [11, 18, 41, 59, 99, 122, 125, 135, 136, 137, 140, 167, 173, 189, 191, 192, 216, 224, 233, 240, 260, 285], "lowercas": [11, 12, 224, 239, 275], "is_integ": [11, 18, 20, 59, 185, 208, 233], "capit": [11, 58, 60, 109, 224], "wherea": [11, 16, 18, 26, 37, 41, 60, 69, 75, 84, 89, 109, 178, 195, 198, 204, 208, 226, 227, 246, 285], "is_capit": 11, "unneed": 11, "achiev": [11, 12, 20, 59, 63, 67, 92, 99, 123, 140, 207, 215, 218, 220, 227, 242, 258], "isinst": [11, 15, 18, 20, 41, 59, 90, 92, 109, 198, 199, 208, 209, 220, 229, 232, 241, 280], "ship": [11, 100], "session": [11, 32, 41, 59, 71, 86, 188, 192, 198, 244, 277, 284], "sort": [11, 23, 35, 36, 40, 41, 48, 51, 55, 84, 86, 89, 95, 98, 99, 110, 113, 118, 157, 173, 178, 182, 194, 201, 204, 205, 215, 220, 221, 224, 225, 226, 232, 234, 239, 241, 246, 257, 277, 279, 280], "numberkind": [11, 15, 59, 90, 216], "matrixkind": [11, 15, 59, 90, 216], "booleankind": [11, 59], "ring": [11, 62, 82, 95, 96, 191, 196, 197, 201, 203, 204, 205, 206, 207, 208, 246], "classif": [11, 17, 59, 224, 225], "lamda": [11, 92, 208, 216, 228, 281], "\u03bb": [11, 281], "lambdifi": [11, 20, 27, 41, 67, 125, 208, 226, 240, 245, 272, 276], "matrixexpr": [11, 20, 90, 92, 93], "mutabl": [11, 12, 42, 59, 91, 92, 93, 102, 199, 208, 209, 220, 229, 281], "dens": [11, 90, 92, 94, 95, 197, 203, 204, 229, 268, 280], "underli": [11, 41, 51, 57, 59, 88, 95, 107, 123, 168, 181, 226, 227, 228], "quit": [11, 16, 20, 67, 95, 99, 125, 191, 194, 205, 207, 218, 226, 246, 262, 277, 280], "rung": [11, 39, 81], "kutta": [11, 81], "condit": [11, 18, 19, 23, 41, 50, 59, 61, 65, 67, 77, 78, 81, 82, 83, 86, 89, 95, 99, 101, 102, 103, 105, 109, 115, 119, 125, 133, 137, 140, 142, 187, 193, 205, 208, 211, 218, 221, 223, 224, 226, 227, 228, 233, 285], "loss": [11, 41, 84, 173, 240, 259], "stabil": [11, 50, 55, 57, 63, 109, 137, 232], "focus": [11, 27, 201, 221, 223, 226, 227, 286], "is_numb": [11, 18, 59, 67, 86], "infin": [11, 18, 23, 37, 58, 59, 64, 65, 67, 72, 84, 86, 95, 146, 199, 201, 204, 208, 213, 214, 215, 216, 220, 223, 224, 228], "resembl": [11, 61, 67, 86, 233], "zoo": [11, 14, 18, 37, 59, 64, 65, 67, 86, 215, 217, 220], "data": [11, 16, 41, 50, 59, 60, 67, 86, 95, 100, 107, 118, 152, 194, 195, 198, 199, 201, 204, 205, 208, 220, 233, 234, 239, 241, 243, 246, 250], "effici": [11, 16, 18, 26, 39, 41, 43, 50, 55, 59, 62, 63, 64, 75, 76, 92, 95, 99, 100, 109, 117, 118, 140, 193, 196, 197, 198, 199, 201, 204, 205, 206, 207, 220, 221, 226, 240, 247, 274, 280, 281, 285], "act": [11, 40, 49, 50, 51, 55, 59, 67, 75, 88, 89, 95, 102, 105, 114, 117, 122, 123, 128, 136, 145, 157, 162, 165, 166, 216, 227, 229, 258, 262, 274], "pprint": [11, 12, 20, 25, 39, 40, 61, 67, 86, 95, 99, 109, 145, 193, 208, 209, 216, 220, 224, 225, 227, 228, 246, 284], "inequ": [11, 18, 19, 20, 22, 59, 194, 201, 216, 218, 222, 265], "neq": [11, 20, 59, 65, 67, 84, 86, 90, 178, 192, 193, 201, 204, 221, 224, 226, 285], "ne": [11, 14, 18, 59, 60, 64, 65, 72, 84, 99, 196, 198, 201, 218, 224, 228], "hold": [11, 12, 20, 36, 40, 50, 55, 59, 60, 61, 65, 67, 81, 84, 95, 98, 101, 109, 111, 117, 119, 120, 138, 169, 204, 218, 220, 224, 228, 241, 285], "singleton": [11, 51, 89, 227, 280], "gotcha": [11, 13, 59, 192, 247, 278, 286], "somehow": [11, 20], "simpler": [11, 19, 20, 59, 63, 67, 83, 84, 130, 192, 201, 217, 218, 220, 224, 226, 227, 285], "adject": [11, 228], "heurist": [11, 18, 51, 84, 86, 90, 201, 202, 215, 217, 220, 226, 227, 239, 275, 285], "appar": [11, 12, 59, 249, 285], "commut": [11, 18, 33, 37, 40, 50, 51, 55, 59, 61, 82, 86, 95, 150, 157, 160, 161, 162, 172, 173, 178, 185, 192, 196, 199, 200, 201, 202, 204, 208, 215, 216, 218, 224, 234, 270, 271, 280], "law": [11, 40, 133, 176, 192, 196], "xreplac": [11, 59, 90, 95, 183], "knowledg": [11, 58, 59, 60, 203, 224, 280, 283], "round": [11, 20, 27, 39, 41, 59, 63, 64, 65, 95, 146, 203, 204, 215, 217, 228], "analyt": [11, 31, 64, 67, 84, 95, 133, 224, 275], "implicitli": [11, 18, 19, 20, 51, 59, 86, 195, 198, 226], "independ": [11, 12, 20, 26, 37, 39, 41, 50, 58, 59, 61, 67, 76, 84, 86, 88, 95, 109, 118, 119, 123, 125, 127, 135, 137, 171, 178, 189, 194, 196, 198, 203, 204, 210, 211, 218, 220, 221, 224, 225, 226, 227, 228, 234, 239, 240, 260, 279, 280], "nativ": [11, 59, 109, 199, 204, 239], "parsabl": 11, "iter": [11, 24, 25, 26, 29, 39, 41, 48, 50, 51, 54, 55, 59, 60, 61, 62, 64, 67, 75, 89, 99, 114, 115, 117, 118, 119, 122, 137, 141, 158, 173, 187, 194, 195, 196, 197, 199, 201, 204, 208, 209, 210, 211, 214, 220, 221, 224, 226, 227, 228, 229, 232, 240, 241, 242, 243, 245, 247, 253, 258, 272], "fuzzi": [11, 18, 20, 21], "noncomput": 11, "philosoph": 11, "OR": [11, 39, 62, 89, 201], "One": [11, 12, 15, 18, 20, 39, 40, 41, 49, 51, 58, 59, 64, 65, 67, 78, 81, 83, 84, 86, 89, 95, 99, 102, 103, 123, 138, 140, 149, 178, 199, 201, 202, 204, 207, 210, 216, 220, 223, 226, 227, 228, 229, 234, 247, 260, 274, 275, 277, 280, 281, 285], "care": [11, 12, 19, 20, 50, 59, 67, 86, 89, 95, 102, 113, 123, 137, 183, 192, 198, 203, 220, 221, 224, 226, 227, 232, 235, 240, 274, 277, 279], "falsi": 11, "is_posit": [11, 18, 19, 20, 59, 185, 199], "unevaluatedexpr": [11, 59, 208, 280], "surpris": [11, 18, 227], "north": 11, "riemann": [11, 61, 64, 65, 84, 195, 220, 234], "sphere": [11, 145, 253, 263], "behav": [12, 37, 39, 59, 60, 65, 67, 99, 204, 216, 220, 226, 229, 235, 281], "mapl": [12, 86, 224, 279], "mathematica": [12, 41, 51, 101, 279, 281], "faq": 12, "introductori": [12, 16, 30, 31, 140, 198, 199, 204], "remaind": [12, 58, 59, 60, 99, 196, 198, 199, 202, 204, 224], "familiar": [12, 20, 86, 123, 138, 157, 205, 275, 277, 283], "java": 12, "minut": [12, 26, 113, 125, 182], "subtract": [12, 25, 41, 51, 59, 63, 74, 99, 109, 117, 175, 196, 197, 198, 199, 201, 203, 204, 280, 285], "proper": [12, 50, 59, 86, 99, 113, 123, 182, 198, 199, 203, 208, 216, 224, 229, 240, 241, 260, 281], "trigsimp": [12, 33, 59, 95, 117, 123, 131, 183, 217, 220, 257], "fill": [12, 17, 50, 60, 90, 92, 95, 98, 173, 194, 239, 242, 246, 249, 281], "alter": [12, 42, 50, 59, 183, 198, 208, 210, 227], "afterward": [12, 41, 59, 120, 127], "quantiti": [12, 51, 59, 64, 67, 71, 76, 103, 113, 118, 131, 138, 152, 175, 177, 181, 189, 191, 192, 203, 220, 228, 257, 262, 270], "simultan": [12, 59, 65, 72, 90, 99, 194, 217], "var": [12, 24, 39, 41, 58, 59, 63, 64, 82, 86, 89, 95, 109, 183, 194, 203, 207, 208, 220, 221, 247, 286], "rate": [12, 125, 191, 228, 260, 275], "short_lif": 12, "haven": 12, "160": [12, 102, 202], "ctimesd": 12, "circular": [12, 18, 107, 145, 201], "relationship": [12, 14, 18, 41, 59, 64, 66, 86, 99, 134, 157, 183, 189, 192, 198, 226], "runtimeerror": [12, 39, 216, 227, 246], "compileflag": [12, 239], "glob": [12, 239], "exceed": [12, 125], "stdin": [12, 242, 244], "nameerror": [12, 87, 242, 277], "__future__": [12, 16, 277, 284], "divis": [12, 20, 59, 95, 99, 175, 195, 198, 199, 200, 201, 204, 206, 208, 221, 224, 226, 239, 247, 277, 280, 284], "cl": [12, 18, 20, 41, 50, 59, 86, 90, 173, 187, 199, 203, 224, 233, 242, 246, 259, 275, 284, 286], "dir": [12, 59, 102, 210, 215, 246], "__builtins__": 12, "__file__": [12, 250], "__name__": [12, 208, 250], "__package__": 12, "_greek": 12, "_latin": 12, "chi": [12, 67, 84, 145, 208, 218, 224, 228, 234], "eta": [12, 67, 84, 203, 208, 224, 225, 228], "iota": [12, 208], "kappa": [12, 193, 208, 228], "mu": [12, 67, 84, 99, 110, 112, 144, 208, 228, 234], "omega": [12, 41, 42, 50, 84, 99, 114, 120, 122, 138, 141, 147, 149, 174, 183, 187, 188, 191, 193, 208, 215, 228], "omicron": [12, 208], "phi": [12, 50, 59, 60, 64, 67, 84, 88, 95, 99, 111, 140, 147, 156, 158, 193, 195, 203, 208, 224, 253, 263], "psi": [12, 64, 67, 84, 145, 156, 157, 163, 171, 203, 208, 234], "rho": [12, 61, 84, 95, 99, 126, 167, 208, 228, 234, 263], "sigma": [12, 51, 82, 84, 90, 95, 208, 211, 228], "tau": [12, 41, 84, 86, 95, 203, 208, 224], "theta": [12, 59, 61, 65, 67, 84, 87, 95, 101, 111, 122, 141, 145, 183, 192, 193, 199, 203, 208, 211, 216, 227, 228, 253, 255, 258, 260, 263], "upsilon": [12, 208], "xi": [12, 20, 61, 84, 208, 224, 225, 226], "lastli": [12, 86, 103, 141, 224], "unit": [12, 20, 33, 37, 40, 59, 60, 64, 72, 73, 74, 86, 95, 99, 102, 107, 109, 111, 112, 117, 123, 138, 140, 149, 174, 175, 176, 180, 182, 183, 189, 192, 194, 196, 199, 201, 203, 204, 206, 208, 216, 218, 221, 227, 229, 253, 255, 257, 262, 263, 270], "mnemon": [12, 217, 246], "osineq": 12, "reimport": 12, "restor": [12, 198, 220], "__": [12, 67, 86, 208, 228, 233], "press": [12, 40, 42, 43, 51, 60, 86, 90, 193, 202, 221, 226], "autocomplet": 12, "lose": [12, 195], "abil": [12, 18, 39, 95, 133, 203, 207, 224, 227, 279, 285], "past": [12, 65, 99, 207, 208, 284], "f1": [12, 27, 50, 84, 86, 95, 109, 114, 123, 131, 140, 194, 199, 201, 204, 208, 210, 226], "f2": [12, 27, 59, 84, 95, 109, 114, 123, 131, 140, 176, 194, 201, 204, 208, 210, 226], "6": [12, 14, 16, 28, 29, 33, 35, 36, 39, 41, 42, 43, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 71, 72, 73, 74, 75, 81, 82, 84, 86, 88, 89, 90, 92, 93, 95, 96, 98, 99, 101, 102, 105, 107, 109, 110, 111, 125, 126, 130, 131, 132, 142, 146, 152, 170, 182, 183, 192, 193, 194, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 210, 213, 214, 215, 216, 217, 220, 221, 224, 225, 226, 227, 228, 229, 239, 240, 243, 246, 247, 253, 256, 258, 263, 275, 281, 285, 286], "accuraci": [12, 16, 39, 59, 204, 281], "2000000000000002": 12, "py3k": 12, "20000000000000": 12, "sympyifi": 12, "worri": [12, 59, 280], "reus": [12, 20, 41, 173, 279], "142857142857143": 12, "receiv": [12, 29, 59, 60, 99, 114, 168, 203, 233], "fraction": [12, 59, 60, 63, 65, 75, 86, 95, 99, 115, 179, 198, 199, 201, 202, 205, 208, 210, 220, 221, 224, 226, 276], "interpret": [12, 19, 29, 41, 50, 58, 59, 64, 65, 67, 72, 75, 86, 90, 92, 95, 99, 101, 113, 178, 194, 196, 203, 204, 208, 215, 221, 226, 227, 228, 233, 239, 240, 243, 249, 281], "100": [12, 20, 41, 43, 48, 58, 59, 60, 63, 67, 75, 82, 89, 90, 95, 99, 102, 194, 198, 203, 205, 207, 208, 215, 226, 227, 246, 274], "000000000000": 12, "00": [12, 59, 99, 157, 167, 221, 246], "null": [12, 59, 95], "34": [12, 41, 51, 64, 72, 95, 99, 114, 155, 202, 207, 214, 220, 221], "3400000000000": 12, "250": [12, 99, 221], "143": [12, 152, 193], "next": [12, 16, 18, 20, 32, 41, 42, 43, 48, 50, 51, 53, 54, 59, 60, 65, 84, 86, 89, 95, 99, 113, 114, 117, 118, 126, 127, 128, 130, 132, 133, 134, 141, 191, 192, 195, 199, 203, 204, 208, 216, 218, 221, 224, 243, 244, 246, 278, 279, 280], "binari": [12, 19, 20, 24, 37, 41, 43, 54, 59, 60, 86, 89, 99, 100, 167, 179, 195, 198, 204, 221, 240, 243, 246], "decim": [12, 20, 41, 59, 62, 63, 99, 101, 107, 198, 204, 279], "far": [12, 40, 59, 73, 86, 193, 195, 198, 208, 218, 247, 274, 275, 277], "142857": 12, "25000000000000000000": 12, "14285278320312500000": 12, "realiz": [12, 44, 50, 61, 89, 99, 127, 195, 196, 201, 228], "pad": [12, 41, 60, 61, 62, 74, 99], "inexact": [12, 29, 59, 199], "low": [12, 18, 19, 41, 59, 60, 67, 99, 198, 201, 206, 208, 220, 240, 241, 246], "higher": [12, 16, 39, 41, 59, 61, 63, 67, 70, 95, 187, 193, 195, 198, 201, 204, 210, 211, 215, 217, 220, 224, 226, 229, 247, 275], "engin": [12, 105, 139, 140, 190, 224, 284], "increas": [12, 26, 39, 40, 51, 57, 58, 59, 62, 63, 67, 90, 99, 100, 113, 124, 157, 182, 183, 185, 191, 192, 198, 201, 203, 204, 210, 213, 217, 224, 228, 244, 246], "2000061035": 12, "highest": [12, 41, 53, 88, 113, 195, 204, 211, 221, 224], "hopefulli": [12, 17, 84], "unsimplifi": [12, 217], "12345678901234567890": 12, "big_trig_ident": 12, "ab": [12, 38, 41, 42, 58, 59, 60, 63, 64, 65, 67, 71, 82, 84, 89, 90, 95, 105, 111, 140, 173, 196, 199, 203, 204, 208, 221, 223, 226, 227, 228, 234, 243, 246, 249, 259, 285], "gave": [12, 59, 246], "gain": [12, 60, 109, 135, 136, 140], "impress": 12, "91": [12, 42, 202, 207, 214, 228], "compar": [12, 18, 29, 39, 41, 51, 56, 59, 64, 65, 76, 89, 95, 99, 100, 125, 152, 176, 180, 198, 201, 204, 205, 208, 213, 215, 220, 224, 227, 229, 233, 239, 246, 277, 280, 285], "4e": [12, 226], "nearli": [12, 99, 217], "snippet": [12, 41], "expr_modifi": 12, "__main__": [12, 41, 281], "declar": [12, 18, 25, 41, 72, 84, 95, 101, 110, 123, 125, 140, 152, 197, 208, 215, 218, 223, 224, 225, 228, 241], "asid": [12, 89, 224, 225, 279], "2x": [12, 24, 59, 67, 84, 101, 220, 221, 227, 228, 274, 277, 285], "syntaxerror": [12, 101], "asin": [12, 65, 67, 73, 205, 208, 218, 220, 224, 228, 285], "arcsin": [12, 65, 205, 208, 228], "arcco": [12, 65, 208], "root": [12, 18, 20, 22, 25, 29, 39, 41, 58, 59, 60, 65, 67, 81, 82, 83, 84, 86, 88, 91, 95, 99, 140, 178, 193, 195, 196, 199, 203, 205, 207, 208, 218, 220, 224, 226, 227, 228, 239, 243, 246, 279, 281, 284, 286], "expon": [12, 29, 38, 41, 59, 60, 65, 66, 67, 84, 86, 92, 99, 107, 109, 179, 196, 197, 198, 204, 205, 208, 217, 220, 224, 227, 232, 243, 285], "half": [12, 20, 41, 59, 60, 64, 65, 67, 69, 75, 86, 88, 95, 99, 101, 102, 142, 145, 170, 193, 199, 201, 203, 204, 216, 217, 218, 220, 228, 239, 246], "denomin": [12, 59, 63, 67, 86, 99, 109, 115, 196, 198, 199, 201, 203, 204, 207, 208, 217, 218, 220, 221, 224, 226, 285], "wild": [12, 59, 220, 246], "interest": [12, 14, 20, 24, 29, 55, 59, 61, 64, 65, 75, 84, 86, 95, 99, 124, 125, 173, 178, 192, 195, 199, 203, 204, 205, 207, 215, 218, 220, 221, 226, 227, 240, 241, 258, 275, 278, 280, 281, 282, 285], "sq": [12, 221], "is_pow": [12, 41, 59, 65], "is_rat": [12, 18, 203, 246], "bracket": [12, 20, 27, 28, 51, 59, 67, 171, 173, 183, 208], "notat": [12, 16, 25, 29, 47, 51, 52, 58, 59, 60, 64, 67, 84, 92, 95, 101, 109, 171, 182, 183, 188, 192, 195, 208, 215, 220, 227, 233, 234, 246, 260, 275], "curli": [12, 123, 208], "suppli": [12, 27, 39, 40, 41, 50, 51, 59, 61, 69, 73, 95, 99, 114, 117, 118, 120, 125, 127, 130, 135, 136, 146, 173, 182, 187, 192, 194, 203, 205, 210, 217, 224, 240, 246, 247, 253, 255, 258], "powsimp": [12, 59, 65, 217, 220], "deep": [12, 20, 59, 65, 89, 90, 204, 215, 220, 228, 280], "measur": [12, 33, 65, 67, 75, 91, 113, 153, 162, 167, 175, 178, 180, 182, 183, 187, 189, 192, 204, 216, 217, 220, 228, 252, 253, 256, 257, 259, 260, 262], "count_op": [12, 59, 217, 220], "radic": [12, 59, 60, 95, 195, 203, 204, 220, 226, 227], "join": [12, 23, 51, 59, 60, 72, 90, 102, 103, 208, 220, 224, 226, 229, 246, 250], "autoexpand": [12, 220], "violat": [12, 123, 193, 205, 220], "naiv": [12, 15, 50, 56, 59, 84, 90, 95, 178, 218, 226, 227, 234], "strategi": [12, 42, 59, 86, 201, 202, 215, 218, 220, 225], "radsimp": [12, 59, 220], "logcombin": [12, 220, 224, 227], "robust": [12, 56, 59, 63, 200, 220, 224], "cancel": [12, 16, 20, 41, 59, 63, 67, 75, 84, 86, 95, 99, 109, 110, 198, 199, 201, 204, 207, 220, 226, 279], "topic": [13, 21, 30, 41, 133, 138, 190, 191, 192, 193, 195, 197, 198, 203, 227, 270, 277, 282], "behind": [13, 30, 110, 123, 137, 177, 197, 217, 220, 224, 227, 270, 277], "decis": [13, 30, 59, 65, 86, 217, 226, 241], "opinion": [13, 30], "pitfal": [13, 20, 192, 198, 277, 282, 285], "glossari": 13, "seem": [14, 18, 20, 83, 84, 123, 178, 195, 220, 224, 285], "unwieldi": 14, "arbitrarili": [14, 39, 59, 72, 99, 201, 203, 215, 218, 224, 225, 228], "six": [14, 103, 208, 221, 227, 228], "bias": 14, "toward": [14, 41, 59, 67, 195, 215, 227], "enter": [14, 51, 59, 60, 64, 72, 99, 101, 102, 118, 122, 125, 135, 208, 218, 226, 239, 280, 284], "attempt": [14, 16, 19, 20, 24, 29, 41, 50, 55, 57, 59, 63, 64, 71, 84, 86, 95, 99, 113, 115, 168, 198, 203, 208, 210, 217, 220, 221, 224, 226, 227, 228, 239, 277, 285], "unambigu": [14, 208, 224, 249], "univari": [14, 29, 39, 58, 59, 65, 82, 86, 195, 196, 198, 199, 202, 203, 204, 205, 210, 221, 223, 226, 228], "linear": [14, 20, 22, 24, 26, 27, 29, 40, 41, 51, 58, 59, 60, 62, 63, 67, 72, 82, 84, 86, 88, 90, 92, 94, 102, 106, 109, 116, 117, 118, 120, 125, 127, 128, 133, 135, 139, 140, 145, 167, 170, 171, 187, 194, 195, 199, 201, 203, 204, 206, 214, 216, 218, 221, 224, 225, 226, 227, 246, 268, 270, 286], "undetermin": [14, 59, 95, 204, 210, 224, 226], "nonlinear": [14, 22, 29, 58, 140, 204, 224, 226, 227], "sol": [14, 27, 95, 221, 224, 225, 226], "insuffici": [14, 90], "elimin": [14, 16, 26, 41, 55, 59, 89, 91, 95, 113, 199, 206, 207, 209, 211, 220, 224, 226, 227, 234, 241, 281], "nsolv": [14, 27, 28, 29, 140, 226], "z_eq": 14, "zsol": 14, "906425478894557": 14, "sol0": 14, "90642547889456": 14, "reduce_inequ": [14, 23, 223, 226], "rh": [14, 23, 26, 41, 49, 51, 59, 90, 91, 95, 117, 118, 123, 130, 131, 132, 197, 206, 208, 210, 224, 226, 227, 259], "classifi": [15, 95, 198, 224, 225, 227, 228], "distinguish": [15, 18, 19, 40, 50, 63, 88, 123, 172, 178, 195], "former": [15, 41, 59, 64, 123, 201, 203, 204, 221, 246], "retriev": [15, 57, 90, 204, 220, 234], "guarante": [15, 18, 27, 41, 50, 51, 59, 71, 84, 86, 95, 198, 201, 203, 204, 224, 226, 227, 244, 249, 281, 285], "catch": [15, 59, 224, 239, 281], "theori": [15, 20, 42, 48, 49, 50, 51, 57, 59, 60, 64, 67, 88, 96, 118, 123, 137, 139, 152, 170, 173, 183, 187, 197, 201, 202, 203, 207, 221, 243, 253, 271, 279], "is_subset": [15, 216], "valueerror": [15, 18, 27, 34, 36, 39, 41, 42, 51, 59, 60, 68, 69, 72, 74, 75, 86, 90, 92, 95, 98, 99, 102, 107, 109, 147, 187, 189, 193, 195, 197, 201, 203, 216, 224, 226, 227, 246, 249, 260], "odd": [15, 18, 24, 34, 36, 37, 38, 47, 51, 59, 60, 64, 65, 67, 89, 98, 99, 110, 193, 203, 204, 208, 226], "appliedpred": [15, 34, 35, 36], "analysi": [16, 41, 42, 50, 59, 60, 65, 106, 125, 137, 138, 141, 195, 204, 218, 221, 228], "vari": [16, 39, 41, 59, 73, 75, 102, 107, 113, 118, 138, 171, 192, 215, 226, 246, 260], "hope": [16, 50, 113, 195], "research": [16, 51, 205, 220], "establish": [16, 55, 84, 117, 128, 218], "envis": 16, "along": [16, 20, 41, 50, 59, 60, 61, 65, 67, 68, 69, 73, 74, 77, 79, 82, 84, 90, 92, 95, 102, 103, 105, 112, 113, 117, 118, 125, 127, 130, 131, 132, 135, 136, 137, 140, 142, 170, 182, 183, 189, 192, 194, 197, 198, 203, 204, 224, 227, 256, 260, 262], "small": [16, 24, 41, 42, 50, 51, 59, 63, 64, 86, 89, 95, 99, 109, 127, 131, 140, 170, 193, 194, 201, 202, 203, 220, 221, 226, 246, 274, 277, 279], "x_": [16, 24, 41, 49, 59, 60, 64, 101, 199, 201, 204, 210, 221, 224, 229], "taylor": [16, 59, 65, 123, 137, 140, 199, 201, 204, 205, 215, 224], "let": [16, 18, 19, 20, 39, 41, 50, 55, 59, 60, 69, 77, 82, 84, 88, 92, 95, 96, 99, 101, 114, 123, 140, 178, 183, 191, 195, 196, 197, 201, 203, 204, 205, 208, 215, 218, 220, 221, 224, 226, 227, 234, 237, 240, 244, 247, 258, 259, 263, 274, 277, 279, 280, 285], "df": [16, 61, 224], "c_": [16, 22, 60, 82, 84, 192, 196, 224], "grid": [16, 39, 40, 107, 194], "f_": [16, 59, 64, 67, 86, 135, 136, 137, 201, 207, 208, 218, 224], "constraint": [16, 23, 95, 103, 109, 117, 118, 119, 122, 123, 125, 126, 127, 129, 133, 135, 136, 137, 140, 205, 270], "formul": [16, 26, 117, 126, 127, 133, 135, 136, 173, 192], "assess": 16, "brute": [16, 217, 221], "frequent": [16, 50, 203, 215, 227], "cover": [16, 65, 99, 101, 113, 123, 182, 191, 234, 241, 275, 277], "treatment": [16, 84, 204], "shall": [16, 50, 84, 123, 140, 215, 218, 280], "job": [16, 20, 51, 153, 205, 208], "truncat": [16, 51, 59, 95, 99, 103, 178, 194, 205, 207, 210, 211], "approx": [16, 22, 27, 59, 86], "lowest": [16, 41, 50, 55, 99, 195, 210, 227], "2h": 16, "print_funct": 16, "x0": [16, 39, 41, 49, 59, 67, 78, 80, 82, 83, 99, 145, 198, 209, 210, 215, 220, 224, 226, 228, 246, 275], "x_0": [16, 49, 50, 60, 81, 82, 83, 201, 210, 221, 224, 228, 275], "fi": 16, "fip1": 16, "fip2": 16, "c_0": [16, 60, 82], "c_1": [16, 60, 82, 84, 215, 218, 224], "c_2": [16, 84, 215, 224], "2f": [16, 286], "c_i": [16, 84, 215, 218, 224], "nth": [16, 59, 64, 67, 88, 99, 199, 204, 205, 214, 220, 224, 228], "degre": [16, 42, 50, 57, 58, 64, 67, 75, 86, 90, 95, 102, 105, 107, 109, 117, 118, 123, 124, 127, 133, 141, 145, 192, 195, 196, 199, 201, 203, 204, 207, 211, 214, 217, 218, 220, 221, 224, 226, 228, 253, 270], "x_i": [16, 20, 49, 67, 86, 95, 196, 199, 201, 204, 205, 208, 227], "m11": [16, 228], "m12": [16, 228], "m13": 16, "m21": [16, 228], "m22": [16, 228], "m23": 16, "m31": 16, "m32": 16, "m33": [16, 99], "3x3": [16, 26, 74, 95, 258], "invert": [16, 26, 29, 37, 59, 60, 90, 92, 95, 109, 127, 175, 196, 198, 199, 203, 204, 224, 226, 227, 234, 281], "inv": [16, 26, 51, 91, 95, 117, 118, 125, 130, 131, 140, 162, 197, 224], "fim1": 16, "eight": [16, 29, 208], "dfdxcheck": 16, "c3": [16, 62, 88, 90, 92, 99, 224, 228, 259, 286], "c5": [16, 224], "120": [16, 58, 59, 64, 65, 81, 99, 102, 103, 205, 207, 208, 210, 224, 275], "c7": [16, 50], "5040": [16, 64, 81, 204, 205], "quickli": [16, 20, 50, 51, 59, 60, 63, 99, 201, 204, 217, 227, 243], "tediou": [16, 86], "certainli": [16, 71, 101, 243], "fine": [16, 20, 24, 59, 63, 87, 188, 198, 208, 220], "devis": 16, "xn": [16, 20, 199], "x_n": [16, 20, 42, 49, 60, 81, 95, 196, 199, 201, 204, 221, 227], "fn": [16, 86, 95, 195, 204], "fnm1": 16, "fnm2": 16, "dth": 16, "Of": [16, 18, 58, 84, 95, 224, 227, 246, 285], "cours": [16, 18, 43, 50, 58, 67, 84, 86, 95, 96, 99, 189, 197, 198, 202, 203, 215, 217, 218, 260, 285], "etc": [16, 18, 19, 36, 39, 41, 55, 59, 60, 64, 65, 77, 88, 89, 94, 99, 123, 144, 153, 157, 170, 173, 177, 185, 189, 191, 192, 194, 195, 196, 198, 201, 203, 208, 209, 216, 217, 218, 220, 224, 227, 228, 232, 240, 241, 246, 258, 262], "discrit": 16, "bengt": [16, 39], "fornberg": [16, 39], "weight": [16, 59, 67, 74, 76, 86, 88, 95, 157, 220, 275], "gap": [17, 50, 99, 123, 205], "matur": [17, 18, 226, 227], "finit": [17, 18, 25, 37, 41, 45, 46, 47, 50, 58, 59, 60, 62, 63, 86, 88, 89, 159, 183, 193, 196, 199, 202, 204, 205, 208, 210, 211, 214, 216, 221, 223, 224, 227, 246, 253, 255, 265, 276, 279, 285], "concret": [18, 40, 51, 59, 64, 65, 86, 88, 95, 99, 123, 178, 199, 203, 208, 265], "obviou": [18, 19, 20, 26, 50, 58, 195, 198, 207, 221, 279], "situat": [18, 29, 63, 84, 192, 224, 226, 228, 244, 277], "refus": [18, 285], "roughli": [18, 59, 60, 100, 124, 224, 247], "possibli": [18, 41, 51, 57, 59, 84, 86, 99, 176, 177, 201, 215, 216, 226, 241, 275, 281], "infinit": [18, 20, 23, 24, 37, 58, 59, 60, 63, 64, 65, 72, 73, 86, 95, 99, 109, 129, 159, 178, 195, 203, 208, 209, 210, 213, 214, 215, 216, 220, 221, 223, 226, 233, 246, 285, 286], "is_neg": [18, 20, 199], "interprett": 18, "unknow": 18, "resolv": [18, 19, 23, 24, 25, 26, 27, 28, 59, 217, 220, 226], "undecid": [18, 20, 25, 95, 198, 227, 281], "conclud": [18, 67, 82, 125, 189, 215, 226, 262], "particularli": [18, 63, 86, 198, 199, 218, 285, 286], "mix": [18, 32, 58, 65, 90, 95, 101, 182, 198, 199, 204, 208, 227, 230, 232, 234, 247], "ideal": [18, 41, 96, 120, 123, 133, 183, 191, 197, 199, 201, 202, 203, 204, 205, 220, 227, 253], "slow": [18, 20, 26, 55, 59, 63, 86, 100, 113, 125, 145, 182, 192, 198, 199, 208, 209, 210, 211, 220, 224, 226, 227, 239, 240, 285], "indetermin": [18, 19, 59, 95, 201, 213, 226], "contradict": 18, "infer": [18, 35, 36, 51, 59, 86, 198, 207, 208, 213, 218, 224, 240], "prepar": [18, 118, 206], "presum": [18, 84, 198, 218, 241], "singletonregistri": [18, 59], "x1": [18, 20, 27, 49, 59, 64, 140, 145, 198, 199, 209, 210, 220, 224, 226, 228, 246], "x2": [18, 27, 49, 59, 64, 140, 145, 198, 210, 224, 226, 228], "posifi": [18, 220], "_x": [18, 20, 95, 134, 138, 188, 191, 192, 199, 205, 220, 224, 240], "rep": [18, 50, 55, 59, 157, 195, 197, 198, 199, 202, 203, 204, 217, 220, 249], "feel": [18, 31, 140, 141, 220, 224, 226], "among": [18, 40, 41, 42, 43, 50, 51, 60, 87, 100, 204, 224, 229, 232, 234, 257], "behaviour": [18, 84, 89, 114, 201, 205, 211, 214], "symbolc": 18, "implicit": [18, 41, 57, 59, 101, 118, 122, 141, 194, 224, 226, 230, 233, 240, 241, 253, 256, 263, 277], "tailor": 18, "assumptions0": [18, 59], "extended_neg": [18, 59], "extended_nonneg": [18, 59], "extended_nonposit": [18, 59], "extended_nonzero": [18, 59, 208], "extended_posit": [18, 59], "extended_r": [18, 37, 59, 208, 223, 227], "hermitian": [18, 26, 37, 59, 90, 91, 95, 156, 162, 173, 208], "irrat": [18, 37, 39, 59, 99, 198, 204, 208, 216, 279], "noninteg": [18, 37, 59, 198, 208], "nonneg": [18, 20, 37, 59, 60, 61, 64, 67, 92, 140, 196, 198, 204, 221, 228, 285], "nonposit": [18, 37, 59, 64, 67, 140], "nonzero": [18, 20, 37, 38, 58, 59, 74, 95, 111, 196, 197, 198, 199, 208, 211, 227], "transcendent": [18, 25, 28, 29, 37, 59, 67, 86, 198, 203, 208, 226, 227, 281, 286], "field": [18, 33, 37, 41, 59, 60, 61, 67, 77, 86, 145, 146, 185, 186, 190, 195, 196, 197, 199, 200, 202, 204, 205, 206, 221, 226, 239, 253, 256, 258, 259, 261, 263, 268, 270, 271], "antihermitian": [18, 37, 59], "mathbb": [18, 20, 24, 37, 42, 50, 58, 59, 60, 65, 67, 84, 90, 95, 137, 193, 195, 196, 198, 199, 201, 203, 204, 207, 215, 216, 218, 221, 227, 228, 285], "ii": [18, 65, 84, 86, 99, 204, 208, 216, 224, 227], "cup": [18, 204, 216, 227], "pm": [18, 24, 58, 84, 86, 196, 207, 215, 221, 224], "yi": 18, "composit": [18, 37, 40, 48, 50, 51, 59, 60, 77, 79, 86, 99, 102, 199, 201, 204, 207, 220, 227, 242], "2k": [18, 59, 64, 84, 99, 221], "pariti": [18, 51, 204], "product": [18, 33, 44, 47, 50, 51, 55, 57, 58, 59, 60, 61, 63, 64, 67, 69, 72, 74, 75, 82, 84, 86, 88, 89, 90, 92, 95, 99, 100, 109, 110, 111, 113, 117, 125, 138, 140, 148, 152, 153, 156, 158, 159, 160, 162, 165, 167, 168, 170, 171, 173, 178, 179, 182, 183, 185, 190, 191, 192, 193, 195, 196, 197, 199, 201, 203, 204, 205, 208, 209, 210, 213, 216, 217, 220, 221, 224, 225, 226, 227, 228, 230, 232, 233, 234, 240, 243, 246, 253, 257, 270], "le": [18, 42, 55, 59, 67, 84, 90, 99, 132, 201, 218, 228], "commutative_properti": [18, 59], "skew": [18, 82, 99, 228], "hermitian_matrix": 18, "complex_numb": [18, 37, 59], "algebraic_numb": [18, 37, 59], "transcendental_numb": [18, 59], "extended_real_number_lin": 18, "real_numb": [18, 37], "imaginary_numb": [18, 37, 59], "rational_numb": [18, 37], "irrational_numb": [18, 37, 59], "parity_": [18, 59], "prime_numb": [18, 59, 99], "composite_numb": [18, 59], "positive_real_numb": 18, "negative_numb": [18, 59], "inconsist": [18, 20, 34, 36, 58, 178, 183, 187, 191, 220, 224, 227], "inconsistentassumpt": 18, "deal": [18, 41, 58, 59, 63, 71, 79, 84, 86, 106, 113, 118, 119, 123, 189, 191, 192, 196, 201, 204, 221, 226, 237, 247, 249, 257, 262, 277, 279, 285], "is_zero_matrix": [18, 90, 197], "generalis": [18, 67, 84, 195], "gaussian": [18, 67, 86, 95, 99, 143, 201, 204, 221, 226, 228, 270, 281], "notion": [18, 40, 178, 181, 195, 227, 257, 262], "chain": [18, 20, 41, 50, 55, 59, 67, 76, 100, 191, 203, 228], "superset": [18, 39, 48, 54, 62, 140, 198, 216, 226], "vanilla": 18, "attach": [18, 53, 84, 100, 102, 117, 118, 134, 192, 240, 242, 247], "is_commut": [18, 86, 162, 171, 246], "is_complex": [18, 59], "is_finit": [18, 59], "permit": [18, 51, 61, 65, 89, 99, 194], "formal": [18, 24, 40, 58, 59, 67, 84, 89, 142, 178, 198, 201, 212, 215, 265], "littl": [18, 20, 40, 51, 69, 95, 99, 100, 125, 178, 202, 204, 208, 218, 220, 228, 243, 257], "n1": [18, 41, 50, 59, 60, 123, 140, 142, 146, 182, 221, 228, 253], "n2": [18, 41, 50, 59, 60, 140, 142, 146, 221, 228], "misunderstand": 18, "is_nonneg": [18, 20, 199], "intent": [18, 41, 58, 59, 101, 241], "meaning": [18, 34, 36, 40, 60], "alon": [18, 60, 87, 201, 224, 226, 233, 246, 279, 280], "tempt": [18, 20, 59, 99], "meet": [18, 60, 215], "criteria": [18, 59, 280], "noncommut": [18, 59, 82, 280], "finiteset": [18, 25, 39, 40, 216, 227, 228, 286], "s1": [18, 50, 58, 72, 75, 82, 109, 184, 195, 204, 211, 221, 246, 256], "s2": [18, 50, 51, 58, 72, 75, 109, 184, 195, 204, 211, 215, 221, 246, 256], "bool": [18, 39, 41, 55, 57, 59, 60, 62, 65, 86, 87, 89, 90, 92, 95, 99, 101, 118, 119, 157, 185, 188, 194, 203, 204, 206, 208, 209, 210, 215, 216, 220, 223, 228, 240, 241, 246, 247, 253, 256, 277], "plai": [18, 58, 125, 135, 221, 277, 279, 280], "role": [18, 65, 206], "connect": [18, 53, 60, 61, 74, 75, 95, 100, 102, 105, 114, 117, 125, 128, 134, 195, 196, 197, 206, 224, 228, 246, 253], "is_finite_set": 18, "zero_matrix": 18, "setsymbol": 18, "is_compar": [18, 59], "capitalis": 18, "4142135623731": [18, 27, 208, 226], "predict": [18, 173, 220, 246], "expreal": 18, "fuzzy_and": [18, 19, 20], "fuzzy_or": [18, 19], "is_extended_nonneg": 18, "classmethod": [18, 20, 33, 35, 36, 41, 43, 48, 50, 51, 53, 54, 59, 65, 66, 67, 74, 90, 95, 109, 159, 170, 171, 173, 197, 199, 203, 204, 208, 216, 234, 239], "is_extended_r": 18, "is_infinit": 18, "is_extended_neg": 18, "is_extended_posit": [18, 19], "_eval_is_finit": 18, "is_extended_nonposit": 18, "_eval_is_algebra": 18, "is_nonzero": [18, 74], "_eval_is_integ": 18, "_eval_is_zero": [18, 20], "__new__": [18, 20, 41, 50, 59, 280], "verifi": [18, 26, 31, 39, 50, 56, 60, 61, 123, 195, 201, 207, 224, 226, 227, 229, 230, 285], "importantli": [18, 20, 205, 243], "reject": [18, 19, 99, 221, 249], "_eval_is_": 18, "is_algebra": [18, 59, 199], "interfer": [18, 208], "determinist": [18, 50, 86, 99, 201, 202], "reach": [18, 99, 109, 203, 204, 224], "claus": [18, 89], "flow": [18, 203], "inner": [18, 58, 84, 95, 156, 159, 160, 165, 167, 168, 171, 173, 183, 187, 197, 203, 210, 253, 270], "optimis": [18, 224], "stage": [18, 40, 58, 99, 215, 285], "briefli": [18, 196, 201], "managedproperti": [18, 59], "metaclass": [18, 59], "default_assumpt": 18, "_ask": 18, "_eval_i": 18, "enumer": [18, 30, 43, 48, 51, 54, 62, 66, 84, 89, 99, 203, 204, 218, 243, 246, 265], "randomis": [18, 236, 272], "unresolv": 18, "factrul": 18, "_assume_rul": 18, "preprocess": [18, 86, 206], "defined_fact": 18, "full_impl": 18, "defaultdict": [18, 59, 246], "precomput": [18, 64, 99, 247], "static": [18, 33, 41, 50, 51, 53, 59, 65, 72, 73, 74, 75, 92, 103, 125, 133, 194, 208, 214, 216, 228, 240], "knowabl": 18, "stdfactkb": 18, "_eval_is_r": [18, 20, 204], "_assumpt": [18, 59], "amongst": [18, 226], "indirectli": 18, "manifest": [18, 196], "jointli": 18, "fundament": [18, 20, 39, 42, 49, 77, 84, 86, 95, 178, 198, 203, 221, 224, 228, 281], "theoret": [18, 40, 42, 50, 60, 64, 202, 203, 218, 277], "isposit": 19, "xpo": 19, "xneg": 19, "strictgreaterthan": [19, 59, 208], "analogu": [19, 37, 58, 73, 198, 199], "piecewis": [19, 20, 41, 58, 64, 67, 86, 89, 102, 171, 208, 210, 211, 226, 227, 228, 247, 275], "nonetyp": [19, 41], "quirk": 19, "both_posit": 19, "falsei": 19, "both_positive_bett": 19, "negat": [19, 20, 37, 59, 65, 89, 109, 183, 197, 199, 201, 204], "fuzzy_not": [19, 20], "both_positive_best": 19, "silent": [19, 63, 99, 240], "carefulli": [19, 59, 183, 201, 210], "truth": [19, 34, 35, 36, 37, 38, 59, 90, 220], "bitwis": [19, 62, 89], "footnot": [19, 178, 280, 281, 284], "combinatori": [20, 43, 51, 58, 59, 66, 67, 204, 210, 220, 246, 248, 265, 285], "dig": [20, 41, 280], "th": [20, 33, 42, 50, 51, 57, 60, 61, 63, 64, 65, 67, 88, 89, 95, 99, 118, 199, 201, 203, 204, 210, 213, 218, 221, 224, 226, 228, 229, 234], "handler": [20, 34, 35, 36, 37, 38, 59, 66, 95], "spectrum": 20, "matter": [20, 39, 48, 51, 58, 59, 64, 84, 86, 138, 215, 246, 279, 280], "use_unicod": [20, 26, 39, 40, 41, 63, 67, 86, 87, 95, 103, 109, 145, 188, 193, 195, 196, 207, 208, 209, 227, 228, 275, 279, 281, 284, 285, 286], "np": [20, 64, 82, 99, 123, 240, 247], "arang": [20, 240, 274], "arrai": [20, 22, 26, 27, 41, 50, 51, 55, 56, 60, 67, 86, 90, 92, 95, 99, 100, 107, 140, 170, 194, 197, 199, 204, 208, 227, 228, 231, 233, 234, 235, 240, 241, 243, 247, 268, 281], "ultim": [20, 65, 178], "cosin": [20, 59, 65, 67, 74, 86, 114, 117, 183, 192, 204, 205, 211, 217, 228, 253, 285], "todai": [20, 195], "operatornam": [20, 64, 65, 67, 84, 86, 193, 196, 204, 208, 211, 216, 218, 226], "modern": [20, 41, 195, 202, 208], "recal": [20, 59, 95, 201, 203, 218, 277, 279, 280, 286], "redefin": [20, 51, 59, 135, 137, 196, 247], "antipattern": [20, 278], "stai": [20, 203], "trig": [20, 59, 86, 204, 208, 217, 220, 285], "wouldn": 20, "cheap": [20, 59, 99], "as_two_term": [20, 59], "split": [20, 41, 59, 60, 63, 84, 86, 101, 201, 203, 206, 207, 208, 226, 228, 234, 239, 246, 251, 280, 285], "hadn": 20, "wors": [20, 89, 220], "expand_trig": [20, 59, 274], "mid": [20, 42, 60, 63, 103, 216, 221], "troubl": [20, 67], "bigger": [20, 41, 59, 64, 218, 224, 285], "deduc": [20, 41, 84, 89, 218, 279], "disallow": [20, 59, 204, 209, 220, 242], "great": [20, 142, 205, 208, 221, 247], "simplest": [20, 40, 89, 95, 99, 100, 193, 194, 205, 209, 217, 220, 224, 275, 285], "\u03c0": [20, 63, 145, 208, 227, 275, 279, 285, 286], "as_independ": [20, 59, 227], "coeff": [20, 59, 61, 89, 140, 199, 203, 204, 214, 220, 224, 226, 234, 285], "apart": [20, 33, 50, 55, 59, 63, 65, 86, 189, 196, 199, 201, 204, 207, 210, 221, 227, 234, 258, 260, 280], "is_even": [20, 47, 50, 51], "nonreal": [20, 27, 226], "cosh": [20, 59, 65, 67, 78, 84, 205, 208, 209, 218, 220, 226, 281, 285], "5919532755215": 20, "_eval_is_nonneg": 20, "exercis": [20, 50, 243, 278, 285], "_eval_is_posit": 20, "as_add": [20, 59], "pi_": 20, "fuzzy_": 20, "deduct": [20, 41], "subtl": [20, 217], "nontrivi": [20, 50, 59, 99], "_eval_evalf": [20, 204], "prec": [20, 27, 59, 69, 75, 99, 107, 193, 199, 204, 205, 220, 226], "dp": [20, 41, 59, 62, 67, 99, 198, 199, 226, 242], "53": [20, 60, 62, 95, 142, 196, 198, 199], "459697694131860": 20, "hook": [20, 100, 208], "_eval_rewrit": [20, 59], "rewritten": [20, 59, 64, 65, 67, 86, 123, 170, 215, 220, 224, 226, 285], "caller": 20, "ve": [20, 125], "nonintegr": 20, "iff": [20, 37, 51, 60, 89, 95, 192, 195, 203, 218, 221, 239], "isint": 20, "xy": [20, 39, 40, 73, 95, 120, 192, 194, 195, 201, 208, 220, 227, 263, 280, 285], "happi": 20, "demand": [20, 32], "_eval_expand_": 20, "expand_": 20, "predefin": [20, 61, 140, 198, 208, 209, 220, 227, 234, 253, 258], "expand_log": [20, 41, 59, 220], "_eval_expand_trig": 20, "sophist": [20, 100, 226], "x_1": [20, 42, 49, 50, 60, 64, 81, 95, 168, 196, 199, 201, 204, 210, 221, 227], "ldot": [20, 24, 42, 49, 50, 58, 59, 60, 64, 67, 84, 99, 103, 178, 193, 195, 196, 199, 201, 203, 208, 211, 215, 218, 221, 226, 229, 285], "x_k": [20, 60, 201], "dy": [20, 41, 61, 76, 95, 102, 112, 140, 204, 208, 221, 224, 225, 275], "dz": [20, 102, 112, 218], "argumentindexerror": 20, "varion": 20, "middl": [20, 67, 75, 84, 95, 103, 153, 194, 218, 285], "iverson": 20, "printmethod": [20, 208], "latexprint": 20, "_latex": [20, 208], "_print": [20, 208], "_m": [20, 67], "_n": [20, 60, 64, 67, 86, 204, 218, 227], "arcversin": 20, "aversin": 20, "im": [20, 38, 59, 65, 84, 93, 195, 208, 209, 216, 224, 281], "sinh": [20, 39, 59, 63, 65, 67, 78, 84, 205, 208, 209, 218, 285], "expand_complex": [20, 59], "analog": [20, 26, 52, 58, 60, 64, 138, 191, 192, 195, 196, 197, 201, 213, 229, 246], "vers": 20, "geometr": [20, 61, 68, 69, 70, 71, 72, 73, 74, 75, 76, 95, 142, 192, 195, 202, 228, 281], "angl": [20, 33, 65, 67, 68, 69, 70, 72, 73, 74, 75, 105, 111, 117, 122, 123, 125, 126, 127, 128, 134, 137, 142, 145, 146, 147, 170, 178, 183, 191, 192, 193, 208, 217, 227, 253, 255, 258, 285], "horizont": [20, 29, 40, 69, 72, 74, 90, 105, 145, 194, 197, 208], "distanc": [20, 40, 43, 51, 69, 72, 73, 74, 75, 102, 103, 112, 113, 117, 127, 128, 142, 146, 176, 187, 189, 262], "rightmost": [20, 173], "scientificamerican": 20, "uniti": [20, 65, 67, 84, 168, 203], "secret": [20, 60], "teacher": 20, "taught": [20, 86], "nr": 20, "sake": [20, 64, 221], "simplic": [20, 218, 220, 224], "divisor": [20, 37, 50, 59, 60, 95, 99, 195, 196, 198, 199, 201, 202, 203, 204, 207], "hardwar": [20, 41], "regard": [20, 42, 60, 67, 87, 141, 173, 195, 196, 210, 226, 227], "c99codeprint": [20, 41, 208], "cxx11codeprint": [20, 208], "cfunction": 20, "e2": [20, 39, 59, 62, 69, 76, 86, 95, 99, 107, 123, 198, 203, 215, 224, 227, 228, 246], "93accumulate_oper": 20, "fused_multipli": 20, "93add": 20, "ccode": [20, 41, 208, 233, 241], "cxxcode": [20, 41, 208], "_ccode": [20, 208], "_y": [20, 23, 134, 138, 188, 191, 192], "_z": [20, 86, 134, 138, 191, 192, 228], "_cxxcode": [20, 208], "std": [20, 208, 228], "28318530717959": 20, "trigonometricfunct": 20, "inversetrigonometricfunct": 20, "reciprocaltrigonometricfunct": 20, "bypass": [20, 224], "fragil": 20, "tend": [20, 32, 41, 59, 64, 201, 203, 213, 215, 218, 278, 285], "prone": [20, 24, 41, 59], "move": [20, 50, 51, 59, 60, 73, 75, 102, 117, 125, 127, 133, 161, 187, 191, 192, 220, 229, 238, 260], "task": [21, 22, 30, 65, 133, 134, 140, 198, 203, 275, 282], "deeper": [21, 232, 280], "explor": [21, 135, 136, 194, 203, 243, 285], "diophantin": [22, 99, 201, 222, 265], "2z": [22, 28, 67, 227, 228], "4z": [22, 28, 227], "6z": [22, 28], "739085133215161": [22, 27, 28, 29, 226], "9y": 22, "3x": [22, 59, 101, 201, 227, 277], "cc": [22, 26, 60, 75, 193, 196, 198, 204, 281], "2e": [22, 26, 59], "ce": [22, 26], "2pq": [22, 24], "yield": [23, 24, 25, 26, 28, 39, 41, 50, 59, 60, 64, 67, 83, 84, 99, 102, 109, 115, 167, 193, 196, 201, 203, 204, 209, 210, 215, 216, 217, 220, 221, 226, 243, 246, 281], "linprog": 23, "as_set": [23, 89], "accomplish": [23, 86, 137, 140, 260], "exclud": [23, 29, 41, 58, 59, 86, 95, 115, 140, 196, 199, 201, 204, 214, 224, 226, 239, 242, 246], "rel_op": [23, 59], "relations_sort": 23, "append": [23, 50, 59, 60, 95, 103, 140, 168, 194, 199, 208, 226, 229, 241, 242, 246, 285], "x_y_reduc": 23, "insight": [23, 278], "x_reduc": 23, "y_reduc": 23, "solve_univariate_inequ": [23, 223, 227], "interv": [23, 25, 37, 39, 50, 59, 63, 65, 67, 68, 69, 72, 75, 84, 86, 89, 99, 159, 168, 199, 201, 203, 204, 211, 214, 216, 223, 227, 228, 286], "calculu": [23, 25, 59, 64, 86, 95, 140, 189, 217, 228, 259, 260, 261, 264, 265, 276, 278, 283], "reflect": [23, 29, 43, 47, 51, 59, 69, 70, 75, 88, 105, 142, 145, 146, 183], "parameter": [24, 61, 68, 69, 72, 75, 221], "pythagorean": [24, 221], "sage": [24, 59, 99, 193, 279], "ellipticcurv": 24, "loop": [24, 40, 41, 99, 109, 126, 183, 194, 205, 208, 224, 243, 246, 280], "ineffici": [24, 59, 95, 198], "reveal": [24, 26, 41, 99, 227, 280], "my_sym": 24, "pythag_eq": 24, "sym": [24, 39, 49, 50, 55, 59, 64, 183, 208, 211, 216, 220, 221, 226, 228, 234, 246, 285], "pythag": 24, "five": [24, 40, 48, 84, 105, 208, 221], "a_1x_1": [24, 221], "a_2x_2": [24, 221], "a_nx_n": [24, 221], "quadrat": [24, 59, 60, 86, 99, 195, 199, 203, 204, 221, 226, 228], "ax": [24, 26, 33, 60, 63, 69, 72, 84, 91, 95, 102, 107, 117, 145, 170, 183, 192, 193, 194, 197, 205, 221, 224, 227, 229, 230, 233, 253, 255, 257, 260, 262, 285], "bxy": [24, 221], "cy": [24, 221], "ei": [24, 67, 84, 203, 208, 218, 221, 224, 234], "homogen": [24, 82, 86, 95, 109, 199, 201, 204, 221, 224, 225, 228], "ternari": [24, 41, 59, 208, 221], "cz": [24, 62, 221], "dxy": [24, 221], "eyz": [24, 221], "fzx": [24, 221], "a_": [24, 55, 59, 60, 67, 84, 88, 90, 92, 109, 110, 138, 210, 218, 221, 224, 226, 228, 229], "pythogorean": 24, "subscript": [24, 26, 51, 199, 208, 218, 221, 246], "solution_dict": 24, "zip": [24, 39, 49, 60, 89, 99, 204, 214, 221, 224, 243, 246], "elegantli": 24, "forget": [24, 40, 285], "solution_list": [24, 25], "solution_first": 24, "solution_p4q3": 24, "p_val": 24, "q_val": 24, "pythag_v": 24, "union": [24, 32, 37, 39, 41, 48, 50, 57, 89, 101, 195, 203, 208, 214, 215, 216, 223, 227, 228, 246], "4y": [24, 201, 227, 274], "rearrang": [25, 110, 118, 135, 136, 157, 224], "eqn": [25, 39, 227], "solutions_set": 25, "solution_set": 25, "256": [25, 41, 50, 99, 204, 208], "techniqu": [25, 26, 42, 54, 84, 86, 208, 210, 220, 224, 227, 281], "solution_outside_2_3": 25, "critic": [25, 39, 146, 191, 203, 227], "minima": [25, 227], "critical_point": 25, "point1": [25, 184, 256], "point2": [25, 184, 256], "curvatur": [25, 142, 146], "membership": [25, 57, 203, 216], "candid": [25, 59, 95, 99, 201, 220], "solution_set_arg": 25, "linalg": [26, 27, 41], "lu_solv": [26, 95, 197], "linear_eq_to_matrix": [26, 224, 227], "matrixbas": [26, 90, 91, 92, 95, 197], "column": [26, 37, 40, 41, 42, 87, 89, 90, 92, 95, 96, 98, 109, 118, 122, 125, 138, 168, 175, 183, 188, 193, 197, 203, 208, 224, 227, 233, 253], "row": [26, 37, 40, 41, 42, 48, 51, 59, 64, 90, 91, 92, 95, 96, 98, 99, 109, 122, 123, 125, 138, 140, 141, 168, 183, 192, 197, 203, 208, 218, 227, 228, 233, 247, 253, 255], "shapeerror": [26, 90, 92, 95], "penros": [26, 92, 95], "pseudoinvers": [26, 95], "lu": [26, 92, 95, 197, 202], "lusolv": [26, 91, 95, 117, 119, 137, 141, 226, 281], "repeatedli": [26, 99, 110, 240], "b2": [26, 67, 99, 102, 103, 114, 123, 140, 183, 197, 199, 208, 218, 221, 224, 259], "solution2": 26, "almost": [26, 84, 93, 101, 175, 194, 195, 199, 204, 205, 224, 228, 242, 243, 246, 279], "prioriti": [26, 41, 82, 113, 123, 192, 247], "computation": [26, 55, 65, 117, 118, 119], "tractabl": [26, 227], "rapidli": [26, 59, 63, 84, 215], "dimens": [26, 41, 43, 60, 61, 67, 68, 70, 72, 73, 74, 76, 88, 90, 92, 95, 98, 102, 110, 127, 147, 157, 159, 162, 167, 176, 177, 180, 181, 183, 194, 197, 208, 221, 224, 226, 228, 229, 233, 234, 241, 253, 256, 258, 270], "4x4": [26, 74, 98, 145, 228], "a\u2080\u2080": 26, "a\u2080\u2081": 26, "a\u2080\u2082": 26, "a\u2080\u2083": 26, "a\u2081\u2080": 26, "a\u2081\u2081": 26, "a\u2081\u2082": 26, "a\u2081\u2083": 26, "a\u2082\u2080": 26, "a\u2082\u2081": 26, "a\u2082\u2082": 26, "a\u2082\u2083": 26, "a\u2083\u2080": 26, "a\u2083\u2081": 26, "a\u2083\u2082": 26, "a\u2083\u2083": 26, "det": [26, 33, 95, 96, 140, 192, 197, 281], "a\u2081": [26, 103, 285], "\u2083": [26, 208], "slowest": [26, 86, 100], "symmetr": [26, 37, 38, 42, 47, 50, 51, 55, 75, 90, 91, 92, 95, 99, 182, 193, 199, 201, 204, 207, 216, 218, 234, 246], "triangular": [26, 37, 90, 91, 95, 197, 203, 226, 228, 263], "prove": [26, 59, 84, 86, 95, 195, 215, 224, 259], "noninvertiblematrixerror": [26, 92, 281], "overli": 27, "float64": [27, 41, 100, 228], "fsolv": 27, "findroot": [27, 67, 226], "overdetermin": [27, 226, 227], "toler": [27, 41, 59, 63, 199, 220, 226], "18466446988997098217": 27, "16840434497100886801e": 27, "tweak": [27, 208, 226], "closest": [27, 59, 72], "closer": [27, 125, 227, 280], "00000000000000": [27, 59, 63, 174, 208, 228], "bisect": [27, 99, 204, 226], "multidimension": [27, 202, 239], "19287309935246": [27, 226], "27844411169911": [27, 226], "192873099352460791205211": 27, "278444111699106966687122": 27, "root_scalar": 27, "lam_f": [27, 247], "3416277185114782": 27, "slightli": [27, 32, 41, 55, 99, 101, 125, 194, 195, 199, 201, 204, 208, 218, 220], "x_valu": 27, "12757857962640e": 27, "73908513321516": 27, "4877893607115270300540019e": 27, "6543612251060553497428174e": 27, "interrog": 28, "overconstrain": 28, "solvabl": [29, 50, 105, 221, 224, 227, 286], "abel": [29, 95], "ruffini": [29, 95], "theorem": [29, 47, 60, 67, 69, 75, 86, 90, 95, 99, 112, 113, 125, 173, 182, 191, 195, 198, 201, 215, 218, 221, 227], "groebnerbasi": [29, 196, 204, 207], "lambert": [29, 65, 86, 205], "decompos": [29, 50, 51, 57, 59, 61, 65, 70, 95, 99, 157, 166, 167, 169, 199, 204, 207, 228], "lack": [29, 41, 61, 63, 120, 208, 275], "crootof": [29, 59, 204, 224, 226], "765": 29, "352": 29, "181": 29, "08": [29, 125], "total": [29, 42, 48, 50, 59, 64, 75, 88, 89, 90, 92, 125, 127, 135, 142, 146, 152, 157, 170, 179, 193, 199, 201, 204, 217, 220, 224, 232, 234, 263], "scroll": 29, "56": [29, 62, 86, 99, 204], "1307": 29, "432": [29, 72, 203], "434607": 29, "144": [29, 64, 86, 193], "0509758447494279": 29, "313552108895239": 29, "14751999969868": 29, "estim": [29, 39, 58, 59, 63, 84, 275], "preserv": [29, 40, 41, 50, 59, 95, 171, 199, 204, 209, 210, 220], "77245385090552": 29, "4142135623730951": 29, "varieti": [29, 41, 42, 51, 59, 100, 103, 138, 195, 202, 204, 228, 246], "risk": 29, "parse_latex": [29, 101], "central": [30, 50, 56, 67, 69, 75, 114, 120, 138, 194, 203, 204, 221, 228], "pypi": 31, "continuum": [31, 270], "qtconsol": [31, 284], "nicer": [31, 59, 131], "setupegg": 31, "enthought": 31, "canopi": 31, "activepython": 31, "spack": 31, "freshli": 31, "starter": 31, "sy": [31, 41, 61, 123, 140, 208, 239, 250, 259, 277], "wherev": [31, 123, 220, 227, 257], "visit": [31, 43, 50, 59, 64, 282], "chat": 31, "gitter": [31, 281], "excel": [31, 63, 203, 283], "ticket": 31, "export": [32, 208], "latin": 32, "clunki": 32, "collid": [32, 234], "win": 32, "throwawai": 32, "surviv": 32, "foo": [32, 39, 41, 59, 168, 188, 246, 249], "report": [32, 39, 50, 59, 72, 90, 99, 205, 216, 227, 239, 281, 286], "stick": 32, "_clash1": [32, 59], "_clash2": [32, 59], "multi": [32, 59, 60, 124, 133, 140, 153, 157, 167, 194, 208, 227, 270], "_clash": [32, 59], "sympif": [32, 59], "real_field": 33, "instanti": [33, 40, 41, 51, 59, 67, 72, 74, 75, 92, 95, 163, 171, 183, 194, 195, 199, 203, 228, 253, 257], "q1": [33, 95, 102, 113, 123, 125, 126, 127, 128, 130, 131, 132, 135, 136, 137, 141, 182, 183, 185, 187, 188, 191, 192, 198, 253, 255], "q2": [33, 102, 113, 123, 125, 126, 127, 128, 130, 131, 132, 135, 136, 141, 182, 183, 185, 187, 188, 191, 192, 198, 253, 255], "r1": [33, 69, 72, 88, 102, 103, 146, 183, 189, 204, 253], "euclideanspac": 33, "realnormedalgebra": 33, "r2": [33, 61, 72, 88, 90, 102, 103, 146, 183, 204, 208, 220, 253], "q3": [33, 113, 125, 126, 128, 130, 131, 132, 135, 183, 185, 187, 192, 253, 255], "bi": [33, 59, 65, 67, 86, 192, 215, 224], "cj": 33, "dk": [33, 102, 203], "atan2": [33, 38, 61, 65, 147, 208, 253], "atan": [33, 38, 61, 63, 65, 70, 75, 83, 86, 127, 141, 142, 205, 208, 210], "arc_coplanar": 33, "arc": [33, 65, 285], "coplanar": [33, 73, 192], "parallel": [33, 69, 72, 73, 75, 86, 106, 109, 112, 191, 192, 201, 259, 263], "vector_coplanar": 33, "is_pur": 33, "mathbf": [33, 92, 118, 133, 135, 136, 138, 178, 182, 183, 188, 189, 191, 192, 208, 218, 229, 257, 258, 260, 262, 263], "versor": 33, "0i": 33, "0j": [33, 198], "0k": 33, "vector_part": 33, "from_axis_angl": 33, "radian": [33, 65, 68, 69, 70, 72, 73, 74, 95, 107, 123, 146, 147, 183], "from_rotation_matrix": 33, "orthogon": [33, 37, 74, 88, 95, 171, 183, 192, 253, 255], "index_vector": 33, "mod": [33, 60, 65, 89, 95, 96, 99, 169, 195, 197, 198, 199, 201, 203, 204, 208, 210, 218, 221], "magnitud": [33, 41, 58, 59, 63, 67, 100, 102, 103, 105, 107, 127, 140, 171, 180, 183, 189, 192, 194, 253, 260, 262], "norm": [33, 95, 171, 183, 199, 201, 203, 204], "scalar_part": 33, "is_zero_quaternion": 33, "mensor": 33, "60": [33, 45, 50, 52, 58, 59, 64, 67, 86, 95, 99, 102, 103, 207, 208, 221, 224, 246], "pth": 33, "668": 33, "224": [33, 176, 202], "336": 33, "448": 33, "pow_cos_sin": 33, "900": 33, "1800": [33, 60], "2700": [33, 102], "3600": [33, 64], "rotate_point": 33, "coordin": [33, 41, 60, 61, 65, 67, 68, 70, 74, 76, 92, 95, 102, 105, 107, 111, 117, 118, 119, 122, 123, 124, 125, 126, 128, 130, 133, 134, 135, 136, 139, 141, 149, 151, 170, 171, 174, 182, 183, 184, 185, 187, 189, 192, 195, 203, 204, 216, 224, 253, 255, 256, 259, 261, 263, 268, 270], "to_axis_angl": 33, "to_rotation_matrix": 33, "assumptionkei": 34, "proposit": [34, 36, 89], "is_tru": [34, 36, 37], "assumptionscontext": [34, 35, 36], "global_assumpt": [34, 35, 36], "discern": [34, 36], "refin": [34, 36, 59, 90, 195, 199, 203, 204, 220, 241, 265], "progress": [34, 36, 99, 241], "inherit": [34, 59, 66, 89, 92, 93, 117, 162, 171, 193, 208, 228, 233, 241, 242], "askhandl": 34, "mere": [35, 36, 41, 63, 168], "thin": [35, 95, 129, 142], "undefinedpred": [35, 36], "sexi": [35, 36], "sexyprimepred": [35, 36], "sexyprim": [35, 36], "int1": [35, 36], "int2": [35, 36], "assump": [35, 36], "r3": [35, 88, 102, 103, 220], "predicate_": [35, 36], "mathematical_log": [35, 36], "r4": [35, 88, 102], "sexy_prim": [35, 36], "resolut": [35, 36, 221], "askpredicatehandl": [35, 36], "r5": [36, 220], "r6": 36, "notabl": [36, 41, 62, 67, 84, 100, 198], "truth_maintenance_system": 36, "istruepred": 37, "gt": [37, 41, 59, 228, 246], "istruehandl": 37, "commutativepred": 37, "commutativehandl": 37, "finitepred": 37, "nor": [37, 39, 59, 89, 99, 147, 194, 204, 215, 217, 224, 234, 253], "nan": [37, 38, 59, 65, 67, 115, 220, 228, 275], "finitehandl": 37, "r7": 37, "infinitepred": 37, "infinitehandl": 37, "symmetricpred": 37, "transpos": [37, 40, 90, 92, 95, 109, 140, 156, 183, 192, 197, 203, 221, 229, 234, 235, 281], "diagon": [37, 64, 90, 91, 92, 95, 98, 122, 145, 197, 230], "symmetrichandl": 37, "r8": 37, "symmetric_matrix": 37, "invertiblepred": 37, "fullrank": [37, 41], "invertiblehandl": 37, "r9": 37, "invertible_matrix": 37, "orthogonalpred": 37, "tm": [37, 146], "mm": [37, 40, 99, 118, 125, 130, 131, 171, 197], "orthogonalhandl": 37, "r10": 37, "orthogonal_matrix": 37, "unitarypred": 37, "unitari": [37, 86, 99, 157, 162, 193], "unitaryhandl": 37, "r11": 37, "unitary_matrix": 37, "positivedefinitepred": 37, "tmz": 37, "positive_definit": 37, "positivedefinitehandl": 37, "r12": 37, "definite_matrix": 37, "uppertriangularpred": 37, "m_": [37, 136, 193, 201], "ij": [37, 173, 178, 193, 228], "zeromatrix": [37, 92], "upper_triangular": [37, 90], "uppertriangularhandl": 37, "r13": 37, "uppertriangularmatrix": 37, "lowertriangularpred": 37, "lower_triangular": [37, 90], "lowertriangularhandl": 37, "r14": 37, "lowertriangularmatrix": 37, "diagonalpred": 37, "diagonalhandl": 37, "r15": 37, "diagonal_matrix": 37, "fullrankpred": 37, "rank": [37, 41, 42, 43, 48, 50, 51, 53, 54, 55, 74, 88, 95, 96, 183, 185, 195, 197, 199, 201, 203, 229, 233, 234, 281], "linearli": [37, 41, 67, 83, 95, 201, 224, 226, 234], "fullrankhandl": 37, "squarepred": 37, "squarehandl": 37, "r16": 37, "square_matrix": 37, "integerelementspred": 37, "integer_el": 37, "integerelementshandl": 37, "realelementspred": 37, "real_el": 37, "realelementshandl": 37, "complexelementspred": 37, "complex_el": 37, "complexelementshandl": 37, "singularpred": 37, "singular": [37, 41, 51, 59, 63, 65, 66, 67, 81, 82, 84, 86, 95, 102, 104, 137, 183, 195, 202, 215, 224, 227, 253, 270, 275], "singularhandl": 37, "fore": 37, "r17": 37, "singularmatrix": 37, "normalpred": 37, "normalhandl": 37, "r18": 37, "normal_matrix": 37, "triangularpred": 37, "triangularhandl": 37, "r19": 37, "triangular_matrix": 37, "unittriangularpred": 37, "unit_triangular": 37, "unittriangularhandl": 37, "evenpred": 37, "evenhandl": 37, "oddpred": 37, "oddhandl": 37, "primehandl": 37, "subject": [37, 69, 75, 103, 113, 141, 203], "compositepred": 37, "compositehandl": 37, "positivepred": 37, "positivehandl": 37, "negativepred": 37, "negativehandl": 37, "zeropred": 37, "zerohandl": 37, "nonzeropred": 37, "nonzerohandl": 37, "nonpositivepred": 37, "nonpositivehandl": 37, "nonnegativepred": 37, "nonnegativehandl": 37, "integerpred": 37, "integerhandl": 37, "r20": 37, "rationalpred": 37, "rationalhandl": 37, "r21": 37, "irrationalpred": 37, "ratio": [37, 49, 50, 58, 59, 63, 64, 67, 69, 72, 73, 74, 75, 91, 99, 109, 146, 178, 208, 217, 220, 226], "irrationalhandl": 37, "r22": 37, "realpred": 37, "disjoint": [37, 40, 48, 51, 204, 216, 246], "realhandl": 37, "r23": 37, "extendedrealpred": 37, "extendedrealhandl": 37, "hermitianpred": 37, "hermitianhandl": 37, "r24": 37, "hermitianoper": [37, 162], "complexpred": 37, "complexhandl": 37, "r25": 37, "imaginarypred": 37, "imaginaryhandl": 37, "r26": 37, "antihermitianpred": 37, "antihermitianhandl": 37, "r27": 37, "algebraicpred": 37, "askalgebraicpredicatehandl": 37, "r28": 37, "algebraichandl": 37, "transcendentalpred": 37, "transcedent": 37, "refine_pow": 38, "refine_ab": 38, "refine_arg": 38, "refine_atan2": 38, "refine_im": 38, "refine_matrixel": 38, "refine_r": 38, "refine_sign": 38, "lagrang": [39, 59, 116, 117, 129, 133, 204, 221, 270], "lagrangian": [39, 118, 120, 127, 132, 136, 137], "euler_equ": 39, "r29": 39, "93lagrange_equ": 39, "decreas": [39, 41, 51, 201], "monoton": [39, 41, 76], "is_decreas": 39, "lopen": [39, 59, 216, 223, 228], "ropen": [39, 65, 216, 228], "is_increas": 39, "72": [39, 59, 72, 95, 99, 102, 193, 207], "is_monoton": 39, "is_strictly_decreas": 39, "is_strictly_increas": 39, "monotonicity_help": 39, "held": [39, 60, 137, 232, 285], "r30": 39, "mathematical_singular": 39, "interpol": [39, 64, 68, 140, 201, 204], "finite_diff_weight": [39, 59, 275], "apply_finite_diff": [39, 59, 275], "differentiate_finit": [39, 59, 275], "finite_diff": [39, 59], "x_list": [39, 275], "y_list": [39, 275], "cube": [39, 41, 43, 50, 52, 65, 86, 201, 202, 221, 227, 263], "xlist": 39, "55271367880050e": 39, "indexedbas": [39, 41, 58, 59, 208, 226, 232, 233, 240], "idx": [39, 41, 208, 232, 233, 240], "region": [39, 67, 76, 86, 194, 216, 224, 227, 228, 253, 256, 263], "bewar": [39, 67], "phenomenon": [39, 178, 201, 211, 280], "90": [39, 50, 57, 67, 90, 95, 101, 102, 105, 113, 123, 141, 208, 210, 220, 228, 241], "finitediff": 39, "wrt": [39, 41, 59, 61, 67, 76, 95, 123, 140, 183, 184, 201, 204, 253, 255, 256, 260], "len": [39, 47, 48, 49, 50, 51, 55, 57, 59, 60, 64, 67, 74, 84, 89, 127, 142, 146, 157, 167, 204, 220, 224, 233, 246], "nearest": [39, 203], "furthest": [39, 60], "sublist": [39, 55, 60, 86, 170, 275], "fd": [39, 41, 173], "0th": [39, 51, 60, 67], "1st": [39, 51, 99, 109, 224, 225, 249, 275], "classic": [39, 65, 67, 95, 159, 175, 183, 192, 195, 270], "forward": [39, 41, 90, 109, 125, 133, 166, 191, 220, 239], "pai": 39, "attent": [39, 50, 65], "gridpoint": 39, "plan": [39, 113, 199, 284], "mycoeff": 39, "3rd": [39, 51, 65, 99, 140, 204, 226, 229, 246], "2nd": [39, 51, 60, 99, 109, 140, 224, 229, 246], "cost": [39, 41, 99, 127, 227, 279], "poorer": 39, "grand": 39, "r31": 39, "51": [39, 95, 99], "184": [39, 224], "1988": [39, 152, 170, 201, 202], "699": 39, "706": [39, 95], "1090": [39, 204], "s0025": [39, 99], "5718": [39, 99], "0935077": 39, "continuous_domain": [39, 223], "tan": [39, 59, 64, 65, 86, 101, 115, 130, 131, 132, 137, 205, 207, 208, 215, 217, 224, 227, 285], "function_rang": 39, "is_convex": [39, 75], "convex": [39, 75, 76, 86], "unspecifi": [39, 59, 74, 275], "multivari": [39, 59, 67, 195, 196, 198, 199, 200, 202, 204, 205, 215, 220, 226, 227, 228, 285], "concav": [39, 142], "r32": 39, "convex_funct": 39, "r33": 39, "ifp": 39, "illinoi": 39, "edu": [39, 43, 50, 51, 60, 62, 64, 86, 95, 99, 202, 207, 217, 221, 224, 228, 253], "angelia": 39, "l3_convfunc": 39, "r34": 39, "logarithmically_convex_funct": 39, "r35": 39, "logarithmically_concave_funct": 39, "r36": 39, "concave_funct": 39, "lcim": 39, "mixtur": [39, 41, 76, 195, 241], "incommensur": 39, "not_empty_in": [39, 227], "finset_intersect": 39, "finite_set": [39, 216], "tracker": [39, 216, 227, 281], "aperiod": 39, "smallest": [39, 53, 65, 72, 74, 81, 89, 95, 99, 170, 183, 199, 244, 246], "verif": [39, 197, 226], "reliabl": [39, 59, 224, 244, 275], "henc": [39, 41, 49, 50, 59, 61, 65, 67, 71, 84, 87, 89, 99, 105, 189, 194, 195, 196, 201, 208, 218, 221, 225, 227, 239, 243, 258, 259, 260, 280, 285], "stationary_point": 39, "stationari": [39, 228], "tikz": 40, "joyofcat": 40, "adamek": 40, "herrlich": 40, "strecker": 40, "joi": 40, "cat": [40, 182], "book": [40, 50, 60, 65, 118, 123, 126, 134, 138, 139, 158, 202, 207, 208, 278], "katmat": 40, "uni": [40, 86, 246], "bremen": 40, "de": [40, 60, 64, 99, 178, 193, 194, 205, 210, 221, 224, 246], "acc": [40, 140, 187, 191], "embryon": 40, "morphism": [40, 195], "codomain": [40, 195, 203], "arrow": [40, 88, 102, 194, 208], "namedmorph": 40, "prohibit": [40, 51, 52, 183], "identitymorph": 40, "compositemorph": 40, "compos": [40, 59, 60, 127, 137, 175, 177, 178, 191, 195, 199, 203, 204, 205, 208, 210, 220], "circ": [40, 59, 70, 76, 84, 92], "compon": [40, 41, 55, 59, 61, 74, 86, 92, 95, 110, 117, 120, 133, 134, 138, 145, 170, 175, 182, 183, 189, 190, 191, 192, 193, 194, 195, 196, 197, 204, 206, 228, 230, 233, 234, 243, 246, 253, 256, 259, 260], "new_nam": 40, "id_a": 40, "id_b": 40, "commutative_diagram": 40, "quadrupl": [40, 204], "mbox": 40, "hom": 40, "id": [40, 55, 65], "rightarrow": [40, 51, 55, 60, 64, 65, 67, 81, 82, 84, 86, 89, 90, 99, 194, 203, 215, 227, 246, 275], "monoid": 40, "pare1970": 40, "accompani": 40, "premis": 40, "conclus": [40, 59], "carri": [40, 41, 59, 165, 171, 178, 195, 198, 201, 203, 205, 206, 247], "premises_kei": 40, "et": [40, 86, 152, 201, 204, 205, 217, 220], "pareigi": 40, "functor": 40, "1970": [40, 95], "is_subdiagram": 40, "subdiagram": 40, "d1": [40, 55, 183, 195, 215, 228, 253], "subdiagram_from_object": 40, "veryuniqu": 40, "diagram_draw": 40, "diagramgrid": 40, "analys": [40, 107, 109, 140, 228], "drawn": [40, 50, 88, 194, 198, 206], "moprhism": 40, "strive": 40, "nevertheless": 40, "laid": [40, 123, 170], "width": [40, 41, 87, 188, 194, 204, 208, 239], "height": [40, 41, 75, 92, 142, 194, 195, 208, 215, 263], "emploi": [40, 58, 63, 86, 99, 204, 207, 224, 228], "lai": 40, "layout": 40, "sequenti": [40, 43, 60, 65, 253, 255], "test_draw": 40, "lemma": [40, 50, 84, 196], "fivelemma": 40, "five_lemma": 40, "arrowstringdescript": 40, "curving_amount": 40, "looping_start": 40, "looping_end": 40, "horizontal_direct": 40, "vertical_direct": 40, "label_posit": 40, "pic": 40, "princip": [40, 60, 65, 67, 84, 86, 96, 111, 125, 146, 195, 196, 197, 198, 199, 201, 203, 204, 205], "offset": [40, 41, 59, 64, 67, 233], "cell": 40, "vertic": [40, 43, 52, 53, 69, 70, 72, 74, 75, 76, 86, 88, 90, 95, 103, 122, 128, 145, 153, 193, 194, 197, 203, 208, 216, 246, 263], "disregard": 40, "unexplain": 40, "astr": 40, "dr": [40, 61, 208, 224], "12mm": 40, "correspondingli": 40, "label_displac": 40, "arrow_styl": 40, "dash": 40, "xypicdiagramdraw": 40, "formatt": 40, "utilis": 40, "xypic": 40, "drawer": 40, "xymatrix": 40, "ld": 40, "arrow_formatt": 40, "therebi": 40, "default_arrow_formatt": 40, "farther": 40, "centr": [40, 56, 194], "default_formatt": 40, "45": [40, 59, 64, 75, 95, 99, 105, 204, 205, 221], "_3mm": 40, "default_curving_amount": 40, "cm": [40, 140, 228], "_1cm": 40, "default_curving_step": 40, "h1": [40, 120], "1cm": 40, "rr": [40, 59, 77, 197, 198, 204, 205], "h_": [40, 50, 55, 64, 67, 86], "_2cm": 40, "mask": [40, 208], "diagram_format": 40, "proceed": [40, 42, 84, 86, 139, 202, 218], "xypic_draw_diagram": 40, "shortcut": [40, 59, 91, 192, 208, 216, 220, 285], "insert": [40, 42, 90, 101, 102, 168, 173, 208, 228, 249], "preview_diagram": 40, "png": [40, 87, 95, 102, 103, 107, 188, 194, 208, 211], "brief": [41, 227, 239, 262], "fab": [41, 208], "cse_main": [41, 209, 220], "cse": [41, 100, 113, 162, 209, 220, 241, 247], "meat": 41, "lightweight": [41, 203, 279], "pycod": [41, 208], "lambdarepr": [41, 208, 247], "aesara_funct": [41, 100, 208], "float80": [41, 208], "assign_to": [41, 208], "type_alias": [41, 208], "0l": [41, 208], "powl": [41, 208], "c99": [41, 208, 241], "expm1": [41, 208], "thrown": [41, 208], "fcode": [41, 208], "contract": [41, 61, 110, 173, 208, 217, 230, 232, 233, 234, 235], "len_i": [41, 208], "mat_1": 41, "mat_2": 41, "jscode": [41, 208], "user_funct": [41, 208], "argument_test": [41, 208], "cfunction_str": [41, 208], "octav": [41, 140, 241], "custom_funct": [41, 208], "existing_octave_fcn": [41, 208], "is_matrix": [41, 208], "my_mat_fcn": [41, 208], "my_fcn": [41, 208], "mat": [41, 92, 142, 167, 208], "octave_cod": [41, 208], "summat": [41, 58, 59, 63, 64, 67, 173, 202, 204, 208, 211, 220, 228, 229, 232, 233, 234, 240], "mathematica_cod": [41, 208], "g1": [41, 44, 49, 50, 84, 95, 109], "g2": [41, 44, 49, 50, 84, 88, 95, 109], "gamma_1": [41, 112], "gamma_2": [41, 112], "\u03b3\u2081": 41, "\u03b3\u2082": 41, "\u03b2": [41, 193], "h_i": [41, 55], "c89": [41, 208, 241], "julia_cod": [41, 208], "rust_cod": [41, 208], "powi": [41, 208], "make_routin": [41, 241], "f95": [41, 240, 241], "matlab": [41, 113, 140, 241, 281], "breadth": [41, 59, 228], "c_name": [41, 241], "c_code": [41, 241], "h_name": [41, 241], "c_header": [41, 241], "volume_result": 41, "ifndef": [41, 241], "project__test__h": [41, 241], "endif": [41, 241], "preprocessor": [41, 209, 220, 241], "global_var": [41, 241], "insensit": [41, 95, 140, 208, 239, 241], "argument_sequ": [41, 241], "routin": [41, 48, 58, 59, 60, 61, 84, 89, 90, 95, 99, 145, 173, 197, 201, 204, 207, 208, 209, 220, 221, 224, 225, 226, 227, 240, 246, 260], "name_expr": [41, 241], "to_fil": [41, 241], "f_name": [41, 241], "f_code": [41, 241], "choic": [41, 51, 64, 67, 84, 86, 100, 137, 169, 178, 182, 183, 191, 199, 201, 204, 208, 220, 224, 246, 279], "hydrogen": [41, 270], "r_nl": [41, 111, 174], "my_routin": 41, "result_var": [41, 241], "result\u2085\u2081\u2084\u2082\u2083\u2084\u2081\u2086\u2088\u2081\u2083\u2089\u2087\u2087\u2081\u2089\u2084\u2082\u2088": 41, "__________": [41, 196], "\u212f": [41, 145, 193, 208, 275, 279, 281, 285, 286], "assoc_laguerr": [41, 67, 208], "fcn": [41, 241], "result_5397460570204848505": [41, 241], "out_8598435338387848786": [41, 241], "examin": [41, 60, 162, 239, 241, 285], "inputargu": [41, 241], "outputargu": [41, 241], "inoutargu": [41, 241], "disk": [41, 60, 216, 227, 247], "binary_funct": [41, 100, 240], "tensor": [41, 46, 61, 95, 110, 120, 138, 152, 158, 159, 160, 170, 173, 182, 183, 208, 229, 230, 232, 233, 240, 247, 257, 258, 264, 265, 268, 270], "binary_func": [41, 240], "servic": [41, 228], "tempdir": [41, 240], "qho_1d": [41, 149], "psi_n": [41, 149], "y_": [41, 67, 84, 111, 193], "qho": 41, "tmp": 41, "subroutin": [41, 50, 169, 201], "autofunc": 41, "hbar": [41, 149, 155, 168, 174, 178, 180, 193], "05457162d": 41, "14159265358979d0": 41, "0d0": [41, 208], "74126166983329d": 41, "33": [41, 59, 62, 95, 138, 146, 201, 205, 208, 228], "verbos": [41, 59, 90, 99, 208, 239, 240, 284], "mute": [41, 240], "backend": [41, 87, 100, 101, 107, 126, 128, 134, 188, 205, 240, 247], "auxiliari": [41, 86, 118, 123, 135, 224, 240], "function_nam": [41, 240], "sympy_express": [41, 240], "mandatori": [41, 208, 240], "illustr": [41, 95, 124, 127, 178, 198, 211, 215], "psi_nl": 41, "766": 41, "incur": [41, 100], "get_numpy_arrai": 41, "tight": 41, "temp": [41, 125], "alloc": [41, 65], "fuse": 41, "wise": [41, 42, 65, 90, 197, 201, 208, 214, 240], "unabl": [41, 72, 76, 101, 226, 253, 274, 275], "fortun": [41, 100, 127, 204, 205], "reconnect": 41, "autom": [41, 65, 100, 217, 240, 279], "ideologi": [41, 227], "fashion": [41, 59, 65, 92, 125, 135, 136, 138, 192, 195, 246], "broadcast": [41, 100, 208, 233, 240], "outperform": 41, "jensen": 41, "quantit": [41, 175], "leverag": [41, 100, 208], "ufunc": [41, 100, 240, 247], "fn_numpi": 41, "fn_fortran": 41, "linspac": [41, 82, 100, 123, 140], "xx": [41, 95, 120, 192, 246], "21306132": 41, "98101184": 41, "44626032": 41, "timeit": [41, 205], "10000": [41, 63, 99, 100, 102, 226], "18891601900395472": 41, "004707066000264604": 41, "facil": 41, "comparison": [41, 58, 59, 89, 95, 123, 195, 203, 207, 226, 239, 246], "thereof": [41, 59, 195, 201, 203], "optims_c99": 41, "log1p": [41, 208], "expm1_opt": 41, "log1p_opt": 41, "exp2_opt": 41, "log2_opt": 41, "log2const_opt": 41, "funcminusoneoptim": 41, "func_m_1": 41, "opportunist": 41, "replaceoptim": 41, "catastroph": 41, "replace_in_add": 41, "cost_funct": 41, "__call__": [41, 51, 59, 203], "exp2": [41, 208], "create_expand_pow_optim": 41, "base_req": 41, "is_symbol": [41, 90], "expand_opt": 41, "opt2": 41, "is_funct": 41, "log2": [41, 67, 208], "matin_opt": 41, "matinv_opt": 41, "matrixsolv": [41, 208], "matrix_nod": 41, "numpyprint": 41, "doprint": [41, 208], "seriesapprox": 41, "reltol": 41, "max_ord": 41, "n_point_check": 41, "threshold": [41, 99], "largest": [41, 51, 53, 59, 65, 67, 95, 98, 99, 153, 195, 199, 226, 246], "series_approx2": 41, "1e": [41, 59, 63, 95, 107, 142, 204, 226], "series_approx3": 41, "series_approx8": 41, "sumapprox": 41, "neglect": 41, "2000": [41, 45, 86, 99, 202], "sum_approx3": 41, "sum_approx2": 41, "sum_approx1": 41, "token": [41, 84, 87, 101], "diagram": [41, 48, 88, 102, 126, 127, 128, 133, 153, 233, 258, 280], "codegenast": 41, "assignmentbas": 41, "augmentedassign": 41, "addaugmentedassign": 41, "subaugmentedassign": 41, "mulaugmentedassign": 41, "divaugmentedassign": 41, "modaugmentedassign": 41, "codeblock": [41, 101], "quotedstr": 41, "intbasetyp": 41, "_sizedinttyp": 41, "signedinttyp": 41, "unsignedinttyp": 41, "floatbasetyp": 41, "floattyp": 41, "complexbasetyp": 41, "complextyp": 41, "pointer": [41, 241, 242], "functionprototyp": 41, "functiondefinit": [41, 101], "stream": [41, 60, 209, 220, 246], "functioncal": 41, "breaktoken": 41, "continuetoken": 41, "nonetoken": 41, "float32": [41, 100, 101, 247], "codeprint": 41, "complex_": 41, "bool_": 41, "intc": [41, 101], "intp": 41, "unsign": [41, 64, 220], "int8": 41, "int16": 41, "int32": 41, "int64": [41, 228], "uint8": 41, "uint16": 41, "uint32": 41, "uint64": 41, "x86": 41, "amd64": 41, "complex64": 41, "complex128": 41, "newton": [41, 67, 133, 176, 180, 201, 205], "aug_assign": 41, "tol": [41, 59, 199], "val": [41, 59, 71, 199, 203, 247], "whl": 41, "py_str": 41, "inf": [41, 51, 59, 95, 199, 204, 216, 224, 228], "exec": [41, 59, 87, 247], "1121416371": 41, "909672693737": 41, "867263818209": 41, "865477135298": 41, "865474033111": 41, "1g": 41, "3e": 41, "2003": [41, 193, 202, 208, 221], "source_format": [41, 208], "op": [41, 59, 95, 162, 173, 187, 191, 217, 246, 247], "parametr": [41, 67, 68, 72, 95, 194, 221, 227, 253, 256, 263], "volatil": 41, "binop": 41, "exit": [41, 99, 239], "premad": 41, "break_": 41, "lift": [41, 55, 65, 67, 84, 199, 201, 204], "left_hand_sid": 41, "topological_sort": [41, 246], "postprocess": [41, 204, 209, 220], "topolog": [41, 59, 61, 197, 246], "continue_": 41, "untyp": 41, "compliant": 41, "ok": [41, 51, 208, 224], "elem": [41, 50, 195], "ijk": [41, 233], "stride": [41, 233], "lmn": 41, "cast_nocheck": 41, "alia": [41, 52, 59, 69, 75, 90, 91, 93, 97, 157, 166, 173, 195, 198, 199, 203, 207, 216, 239, 249, 285], "nbit": 41, "storag": [41, 59, 95, 167, 193, 201], "nmant": 41, "mantissa": 41, "nexp": 41, "half_precis": 41, "f16": 41, "65504": 41, "tini": [41, 59], "ep": [41, 50, 58, 199, 203, 204], "decimal_dig": 41, "cast_check": 41, "1e5": 41, "cast": [41, 92, 277], "subnorm": [41, 50], "idempot": 41, "loos": [41, 59], "overflow": [41, 243], "max_expon": 41, "min_expon": 41, "for_i": 41, "for_ji": 41, "for_kji": 41, "function_arg": [41, 239], "fcall": 41, "bar": [41, 67, 124, 133, 162, 168, 249, 270], "baz": 41, "return_typ": 41, "fp": [41, 42, 59, 204, 210], "from_functionprototyp": 41, "prototyp": [41, 100, 241], "value_const": 41, "pointer_const": 41, "attr_param": 41, "looking_for": 41, "as_declar": 41, "formatstr": 41, "5g": 41, "stdout": [41, 239], "stderr": 41, "oppos": [41, 247, 275], "_field": 41, "_construct_": 41, "not_in_arg": 41, "float16": 41, "inttyp": 41, "super": [41, 67, 199, 208, 253, 255], "from_expr": [41, 204], "42": [41, 48, 59, 62, 64, 72, 73, 75, 90, 91, 93, 95, 97, 99, 199, 204, 221, 239], "v6": 41, "123456": [41, 59, 99], "v10": 41, "12345": [41, 63], "67894": 41, "boost_mp50": 41, "boost": 41, "multiprecis": [41, 198], "cpp_dec_float_50": 41, "r37": 41, "rtol": 41, "atol": 41, "precision_target": 41, "v18": 41, "123456789012345646": 41, "123456789012345649": 41, "Will": [41, 95, 101, 203, 208, 239], "decl1": 41, "decl2": 41, "alt": 41, "secondarili": [41, 204], "mathcin": 41, "cbrt": [41, 65, 208], "minu": [41, 58, 59, 189, 201, 208, 260], "0e": [41, 59], "fma": [41, 208], "cpu": [41, 100, 140], "hypot": [41, 208], "hypotenus": [41, 75], "log10": [41, 208], "ten": [41, 100], "plu": [41, 58, 95, 101, 140, 153, 204, 208, 218, 247], "famili": [41, 43, 77, 86, 196], "commaoper": 41, "goto": 41, "preincrement": 41, "postdecr": 41, "decrement": [41, 243], "postincr": 41, "increment": [41, 50, 51, 52, 58, 75, 99, 228], "predecr": 41, "alignof": 41, "sizeof": 41, "struct": [41, 193], "dsign": 41, "arrayconstructor": 41, "ac": [41, 51, 71, 105, 120, 138, 150, 228, 246, 249], "95": [41, 57, 99, 201, 208, 224, 226, 241], "do1": 41, "1d0": 41, "do2": 41, "extent": 41, "intent_out": 41, "dim": [41, 61, 74, 100, 175, 181, 208, 231, 234, 268], "arr": 41, "fortranreturn": 41, "aid": [41, 125], "implieddoloop": 41, "idl": 41, "signallib": 41, "prog": [41, 152], "myprogram": 41, "mysub": 41, "subroutinecal": 41, "passs": 41, "inout": 41, "bind_c": 41, "sum_": [41, 58, 59, 60, 64, 67, 84, 86, 90, 92, 99, 193, 204, 205, 210, 211, 218, 224, 228], "cmplx": [41, 208], "intent_in": 41, "intrins": 41, "isign": 41, "lbound": 41, "lb": [41, 81, 243], "literal_dp": 41, "num": [41, 50, 59, 99, 109, 199, 220, 224, 243, 249], "literal_sp": 41, "reshap": [41, 90, 123, 140, 229, 235, 246], "arrayexpr": 41, "shp": 41, "metric": [41, 51, 55, 61, 110, 220, 224, 227, 234], "snr": 41, "convolution2d": 41, "use_renam": 41, "ren": 41, "thingi": 41, "newtons_method": 41, "itermax": 41, "counter": [41, 59, 65, 71, 90, 103, 105], "raphson": 41, "criterion": [41, 50, 139, 196, 201], "netwon": 41, "algo": [41, 51], "r38": 41, "27s_method": 41, "newtons_method_funct": 41, "param": [41, 61, 95, 221], "render_as_modul": 41, "py_mod": 41, "865474033102": 41, "render_as_source_fil": 41, "printer_set": 41, "fcodeprint": [41, 208], "fpgroup": [42, 50], "studi": [42, 49, 58, 61, 95, 192, 195, 201, 204, 221, 228], "combinator": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 64, 92, 99, 210, 229, 234, 243, 246, 265, 279, 285], "free_group": [42, 49, 50], "vfree_group": 42, "xfree_group": 42, "fp_group": [42, 50], "coset_enumeration_r": 42, "fall": [42, 58, 59, 64, 87, 188, 203, 208, 221, 225, 228], "famou": [42, 67, 86, 99, 221], "langl": [42, 50, 152, 193], "rangl": [42, 50, 152, 170, 193], "gen0": 42, "gen1": 42, "gen_": 42, "freegroup": 42, "x_2": [42, 49, 64, 81, 168, 196, 201, 204, 210, 221, 227], "x_3": [42, 49, 81, 168], "s_1": 42, "r_1": [42, 195, 205], "s_2": 42, "r_2": 42, "s_k": 42, "r_k": [42, 166], "s_i": [42, 55, 86, 88], "r_i": [42, 205], "reduct": [42, 95, 119, 201, 203, 221], "ho05": [42, 49], "cdhw73": 42, "hav91": 42, "coset_enumeration_c": 42, "coset_enumer": 42, "relator_bas": 42, "coset_table_bas": 42, "influenc": [42, 102, 195, 196], "coset_table_max_limit": 42, "4096000": 42, "safeti": [42, 51, 93], "max_coset": 42, "cox": [42, 202, 204], "c_r": [42, 218], "50": [42, 50, 62, 63, 64, 67, 75, 95, 99, 102, 103, 146, 204, 208, 217, 226], "max_stack_s": 42, "500": [42, 63, 120], "deduction_stack": 42, "stack": [42, 76, 90, 140, 197, 203, 208, 237, 243, 281], "occurr": [42, 59, 99, 123, 183, 220, 228], "exce": [42, 99, 234], "modest": 42, "low_index_subgroup": 42, "conjugaci": [42, 50], "coset_t": [42, 50], "reidemeister_present": 42, "y_1": [42, 221, 228], "y_2": [42, 221, 228], "john": [42, 50, 67, 204, 221, 224], "cannon": 42, "lucien": 42, "dimino": [42, 50], "georg": [42, 195, 224, 246], "hava": 42, "jane": 42, "watson": [42, 220], "comp": [42, 224], "463": [42, 139], "490": [42, 51], "1973": [42, 60, 190], "derek": [42, 49], "holt": [42, 49, 50, 57], "chapman": [42, 49], "hall": [42, 49, 228], "crc": [42, 49, 51], "2005": [42, 49, 86, 99, 204], "xvi": [42, 49], "514": [42, 49, 202], "symposium": [42, 84, 201, 202, 218], "issac": [42, 86, 202, 226], "bonn": 42, "1991": [42, 202], "191": [42, 227], "199": 42, "acm": [42, 58, 84, 86, 202, 218, 220, 224, 226], "graycod": 43, "kw_arg": [43, 53, 173, 233, 234], "hamiltonian": [43, 164], "edg": [43, 52, 53, 88, 197, 208, 227, 246, 284], "hamilton": [43, 90], "vertex": [43, 53, 70, 75, 86, 197], "000": [43, 63, 86, 89, 167, 246], "110": [43, 89, 224, 226, 240, 246], "010": [43, 89, 246], "011": [43, 89, 167, 246], "111": [43, 62, 69, 89, 99, 246], "101": [43, 67, 89, 99, 167, 246], "001": [43, 63, 89, 142, 246], "delet": [43, 88, 90, 95, 205, 249, 285], "statist": [43, 60, 67, 228, 239, 279], "manner": [43, 60, 67, 137, 171, 189, 221, 224, 229, 246, 262], "generate_grai": 43, "0000": 43, "0001": [43, 63], "0011": [43, 54], "0010": 43, "0110": 43, "0111": [43, 167], "0101": [43, 167], "0100": 43, "1100": 43, "1101": 43, "1111": 43, "1110": 43, "1010": 43, "1011": 43, "1001": 43, "r39": 43, "nijenhui": 43, "wilf": [43, 58, 226], "1978": [43, 50, 178, 202], "r40": 43, "knuth": [43, 51, 243], "2011": [43, 51, 84, 99, 190, 217], "art": [43, 51, 195, 208, 210, 243], "vol": [43, 51, 60, 64, 67, 84, 95, 110, 203, 204, 218, 243, 246], "addison": [43, 51, 99, 202], "weslei": [43, 51, 99, 202], "r41": 43, "brgc": 43, "6th": [43, 99], "unrank": [43, 48, 50, 51, 53], "r42": 43, "statweb": 43, "stanford": 43, "susan": 43, "s208": 43, "node12": 43, "tail": [43, 58, 59, 199, 228], "00010": 43, "random_bitstr": 43, "bitlist": [43, 54], "gray_to_bin": 43, "endian": 43, "bin_to_grai": 43, "get_subset_from_bitstr": 43, "bitstr": 43, "graycode_subset": 43, "group_construct": 44, "directproduct": [44, 47], "__mul__": [44, 50, 90, 95, 199, 203], "shift": [44, 50, 51, 53, 60, 67, 70, 74, 76, 89, 194, 199, 201, 204, 211, 218, 226, 228], "gn": 44, "named_group": [44, 47, 49, 50, 56, 57], "cyclicgroup": [44, 47, 50], "perm_group": [44, 49, 50, 51, 56, 57], "permutationgroup": [44, 47, 49, 50, 51, 56, 57], "group_numb": 45, "is_nilpotent_numb": 45, "r43": 45, "randprim": [45, 99], "pakianathan": 45, "shankar": 45, "monthli": [45, 60, 95], "107": [45, 202], "631": 45, "634": 45, "is_abelian_numb": 45, "r44": 45, "is_cyclic_numb": 45, "r45": 45, "polyhedron": [46, 50, 86, 246, 265], "prufer": [46, 265], "grai": [46, 54, 87, 142, 188, 194, 265], "nilpot": [46, 50, 95, 265], "abelian": [46, 47, 50, 88, 178, 195, 265], "cyclic": [46, 47, 50, 51, 52, 62, 90, 99, 234, 246, 265], "polycycl": [46, 50, 265], "symmetricgroup": [47, 49, 50, 56, 57], "transposit": [47, 50, 51, 60, 90, 92, 230], "is_group": [47, 50], "generate_schreier_sim": [47, 50], "af": [47, 50, 56, 140], "dihedralgroup": [47, 50, 57], "alternatinggroup": [47, 50, 56], "r46": 47, "symmetric_group": 47, "generators_and_rel": 47, "dihedr": [47, 51], "d_n": [47, 88, 204], "gon": 47, "bab": 47, "generate_dimino": [47, 50], "perm": [47, 49, 50, 51, 52, 57, 64, 90, 92, 95, 229], "cyclic_form": [47, 51, 52], "r47": 47, "dihedral_group": 47, "31": [47, 59, 62, 63, 75, 99, 138, 193, 204, 221], "ex": [47, 86, 110, 122, 198, 203, 204, 234, 242], "r48": 47, "armstrong": 47, "abeliangroup": [47, 50], "cyclic_ord": 47, "r49": 47, "groupprop": [47, 50], "subwiki": [47, 50], "structure_theorem_for_finitely_generated_abelian_group": 47, "multiset_partit": [48, 64, 84, 243, 246], "rg": 48, "growth": [48, 99, 201, 275], "from_rg": 48, "abcd": [48, 52, 173, 246, 249], "cbead": 48, "sort_kei": [48, 59, 224], "ti": [48, 51, 59, 99], "integerpartit": [48, 246], "summand": [48, 203], "r50": 48, "partition_": [48, 64], "28number_theori": 48, "as_dict": [48, 198, 204], "as_ferr": 48, "char": 48, "ferrer": 48, "next_lex": [48, 51], "lexic": [48, 153, 246], "prev_lex": 48, "random_integer_partit": 48, "seed": [48, 50, 59, 60, 69, 72, 73, 95, 99, 201, 228, 239, 246], "85": [48, 63, 64, 95, 99, 125, 171, 193, 228], "rgs_gener": 48, "37": [48, 60, 65, 69, 95, 99, 103, 193, 208, 221], "52": [48, 64, 99, 102, 103, 193, 207, 221, 224, 246, 275], "151": 48, "203": [48, 64], "rgs_enum": 48, "rgs_unrank": 48, "rgs_rank": 48, "pcgroup": 49, "pcg": 49, "pc_seri": [49, 50], "polycyl": 49, "pc_present": 49, "pc_sequenc": [49, 50], "miss": [49, 50, 76, 208, 226, 241, 285], "adjac": [49, 50, 51, 59, 64, 109, 145, 197, 246], "der": [49, 50], "relative_ord": [49, 50], "polycyclic_group": [49, 50], "gen": [49, 50, 55, 56, 57, 59, 95, 195, 198, 199, 201, 203, 204, 205, 206, 214, 220, 223, 226], "is_ident": [49, 51, 59], "poss": [49, 125, 192], "pc_group": 49, "a_j": [49, 67, 84, 178, 201, 210, 218], "notin": [49, 84, 216], "_order": 49, "minimal_uncollected_subword": 49, "subword_index": 49, "i_1": [49, 173, 204, 229], "a_1": [49, 50, 60, 67, 81, 84, 90, 95, 110, 173, 178, 196, 201, 218, 221, 224, 228, 285], "i_r": 49, "a_r": [49, 218], "i_2": [49, 173, 204], "s_": [49, 55, 123, 201], "s_j": [49, 88, 201], "x3": [49, 59, 64, 198, 224, 228], "collected_word": 49, "free_to_perm": 49, "bottom": [49, 50, 59, 60, 75, 90, 95, 98, 122, 203, 208, 217, 263], "pictur": [49, 208], "x_3x_2": 49, "x_3x_1": 49, "x_2x_1": 49, "x_3x_0": 49, "x_2x_0": 49, "x_1x_0": 49, "varii": 49, "derived_seri": [49, 50], "pc_resent": 49, "k_arrai": 49, "array_form": [49, 51, 52], "v_arrai": 49, "e_1": [49, 95, 195, 201, 204], "e_n": [49, 64, 88, 95, 149, 195, 204], "exponent_vector": 49, "leading_expon": 49, "dup": [50, 199], "pn": [50, 127, 137], "motion": [50, 113, 117, 118, 119, 122, 125, 126, 127, 128, 130, 132, 133, 134, 135, 136, 137, 140, 141, 187, 188, 191, 192, 228], "front": [50, 59, 125, 126, 142, 172, 199, 201, 204, 208, 220, 285], "face": [50, 52, 72, 86, 123, 201, 205, 208, 221, 263, 281], "rubik": 50, "3674160": 50, "pgroup": [50, 52], "corner": [50, 52, 90, 204, 224, 227, 247], "reset": [50, 52, 194, 201, 204, 239, 242, 244], "p10": 50, "make_perm": 50, "r51": 50, "eick": [50, 57], "brien": [50, 57], "r52": 50, "seress": 50, "r53": 50, "schreier_vector": 50, "r54": 50, "nielsen_transform": 50, "product_replacement_algorithm": 50, "r55": 50, "frank": [50, 51, 95], "celler": 50, "charl": 50, "leedham": 50, "green": [50, 134, 194], "scott": 50, "murrai": 50, "alic": [50, 60], "niemey": 50, "r56": 50, "block_": 50, "28permutation_group_theori": 50, "r57": 50, "algorithmist": 50, "php": [50, 67, 99, 221, 228], "union_find": 50, "r58": 50, "multiply_transitive_group": 50, "r59": 50, "center_": 50, "28group_theori": 50, "centralizer_and_norm": 50, "derived_subgroup": 50, "nilpotent_group": 50, "colost": 50, "hulpk": 50, "cgt": 50, "cgtnote": 50, "__contains__": 50, "__weakref__": [50, 90], "weak": [50, 59, 90, 198, 201], "_coset_repres": 50, "hg": 50, "transvers": [50, 55, 57, 146, 147], "coset_transvers": 50, "_distinct_primes_lemma": 50, "_element": 50, "_eval_is_alt_sym_monte_carlo": 50, "05": [50, 81, 107, 190, 193], "mont": 50, "carlo": 50, "candidat": 50, "randomli": [50, 59, 60, 99, 167], "n_ep": 50, "_check_cycles_alt_sym": [50, 57], "_eval_is_alt_sym_na": 50, "only_sym": 50, "only_alt": 50, "_p_elements_group": 50, "subgroup": [50, 51, 55, 57, 88, 99], "_random_pr_init": 50, "_random_prec_n": 50, "modif": [50, 65, 95, 227, 228, 243], "69": [50, 95, 226, 243], "71": [50, 75, 95, 176], "_random_gen": 50, "accumul": [50, 239, 243], "random_pr": 50, "chosen": [50, 51, 60, 61, 72, 73, 95, 99, 102, 141, 175, 178, 194, 195, 199, 201, 203, 208, 215, 218, 224, 228, 239, 253], "gh": [50, 196, 227, 234], "eventu": [50, 67, 86, 194, 195, 215, 241, 246], "_sylow_alt_sym": 50, "sylow": 50, "p_1": [50, 55, 60, 77, 99, 191, 218, 221], "p_2": [50, 60, 77, 99, 191, 218], "p_p": 50, "sylow_subgroup": 50, "is_alt_sym": [50, 57], "_union_find_merg": 50, "not_rep": 50, "atkinson": 50, "83": [50, 207], "87": [50, 65, 95, 99], "minimal_block": 50, "_union_find_rep": 50, "r60": 50, "r66": 50, "compress": [50, 95, 98, 105], "r62": 50, "r68": [50, 51], "_verifi": 50, "_h": [50, 227], "gens_k": 50, "rels_k": 50, "gens_h": 50, "inject": [50, 59, 195, 199, 204, 281], "homomorph": 50, "rels_h": 50, "strong_present": 50, "abelian_invari": 50, "isomorph": [50, 53, 195, 198, 201, 203], "t_1": [50, 64, 221], "t_2": [50, 64, 221], "t_r": [50, 138, 234], "542": 50, "adopt": [50, 234], "schreier": [50, 55, 57], "sim": [50, 55, 57, 84], "b_1": [50, 57, 67, 81, 84, 195, 218, 221, 224, 285], "b_2": [50, 57, 67, 81, 218, 224], "dot": [50, 51, 55, 57, 60, 72, 74, 81, 90, 95, 109, 118, 125, 126, 127, 130, 131, 132, 135, 136, 137, 138, 140, 157, 183, 185, 188, 191, 192, 193, 195, 196, 201, 204, 208, 227, 228, 246, 253, 257, 259, 260], "b_k": [50, 57, 60, 64, 67, 210, 211], "strong": [50, 55, 56, 57, 99, 100], "89": [50, 57, 86], "55": [50, 62, 64, 95, 193, 194, 204, 221], "57": [50, 95, 99, 228], "coset": [50, 55, 203], "strong_gen": [50, 56, 57], "basic_transvers": [50, 57], "basic_orbit": [50, 57], "basic_stabil": 50, "baseswap": 50, "po": [50, 84, 89, 90, 120, 138, 140, 199, 226], "strong_gens_distr": [50, 57], "swap": [50, 51, 52, 90, 95, 153, 157, 166, 228, 246], "orbit": [50, 57, 173, 174, 176], "b_": [50, 55, 57, 59, 64, 67, 84, 92, 109, 210, 218, 221, 229], "b_i": [50, 55, 57, 84, 195, 218], "la": [50, 140, 178], "vega": 50, "testutil": [50, 56, 57], "_verify_bsg": [50, 56, 57], "schreier_sim": [50, 56, 57], "bsg": [50, 55, 57, 234], "102": [50, 95], "98": [50, 60, 139, 204, 224], "pseudocod": 50, "beta_": 50, "g_": [50, 57, 58, 67, 84, 221], "foral": [50, 58, 61, 178], "zg": 50, "gz": 50, "c_g": 50, "sg": [50, 228, 234], "is_subgroup": 50, "subgroup_search": 50, "hgh": 50, "closur": [50, 56, 82, 153, 203, 216], "composition_seri": 50, "h_0": [50, 55], "h_1": [50, 55, 227], "h_2": [50, 227], "1024": [50, 208, 228], "512": [50, 67], "128": [50, 64, 67, 69, 99, 202, 208], "32": [50, 62, 65, 67, 69, 95, 99, 102, 107, 138, 202, 204, 205, 217, 218, 221, 228, 239], "243": [50, 67, 226], "81": [50, 64, 69, 90, 95, 99, 123, 125, 193, 207], "conjugacy_class": 50, "xax": 50, "s_3": 50, "s3": [50, 58, 109, 211, 221], "feasibl": [50, 109], "resiz": [50, 51, 90, 92], "coset_factor": 50, "factor_index": 50, "_basic_orbit": 50, "u1": [50, 99, 123, 125, 126, 127, 128, 130, 131, 135, 137, 140, 183, 185, 187, 188, 191, 224], "u2": [50, 98, 99, 123, 125, 126, 127, 128, 130, 131, 135, 140, 183, 187, 191, 224], "_strip": [50, 57], "coset_rank": 50, "lexicograph": [50, 51, 54, 55, 59, 201, 204, 246], "coset_unrank": 50, "standardis": [50, 198], "subsect": [50, 260], "compris": [50, 60, 92, 120, 138, 141, 204, 246], "g_0": [50, 221], "g_1": [50, 204, 215, 221, 224], "g_2": [50, 88, 215, 224], "g_i": [50, 215], "g_k": 50, "tetrahedron": [50, 52], "r64": 50, "axiom": [50, 195], "doy": 50, "sc": [50, 86], "thesi": [50, 59, 215, 253], "generator_product": 50, "sn": [50, 51, 58, 81], "is_abelian": 50, "_random_prec": 50, "probabl": [50, 59, 64, 67, 71, 99, 123, 167, 171, 218, 224, 227, 228, 240, 277, 283], "transit": [50, 140, 201, 228], "82": [50, 86, 95, 228], "proport": [50, 60, 215], "226": 50, "227": 50, "is_altern": 50, "quicker": [50, 99], "taxonomi": 50, "is_cycl": 50, "p_": [50, 55, 59, 86, 178, 221, 224, 229], "p_i": [50, 55, 99], "equiv": [50, 60, 64, 99, 203, 218, 221], "pmod": [50, 59, 60, 64, 95, 218], "p_j": [50, 55], "r65": 50, "35": [50, 53, 62, 64, 72, 73, 86, 95, 99, 125, 203, 208, 221, 224, 228], "rose": 50, "is_elementari": 50, "is_nilpot": [50, 95], "lower_central_seri": 50, "is_solv": 50, "is_norm": [50, 171], "gr": 50, "is_perfect": [50, 99], "is_polycycl": 50, "is_primit": [50, 199, 204], "cardin": [50, 51, 54, 195, 216], "badli": 50, "random_stab": 50, "g3": [50, 109], "s5": 50, "is_symmetr": [50, 90], "is_transit": 50, "is_trivi": 50, "cba": [50, 229, 246], "mainli": [50, 67, 95, 100, 178, 188, 201, 218, 221, 224], "max_div": 50, "siev": [50, 99], "nonempti": 50, "gb": 50, "moreov": [50, 60, 84, 177, 189, 195, 196, 201, 209, 258], "congruenc": [50, 59, 99, 218, 221], "p_0": [50, 55, 77, 218, 221], "maxim": [50, 60, 88, 195, 199, 203, 215, 217], "intransit": 50, "normal_closur": 50, "adjoin": [50, 196], "yx": [50, 192], "73": [50, 58, 59, 72, 99, 224], "74": [50, 64, 99], "orb": 50, "78": [50, 73, 95, 99, 103, 178, 224, 228], "orbit_transvers": 50, "orbit_rep": 50, "send": [50, 59, 60, 65, 99, 195, 224, 226], "proof": [50, 53, 84, 86, 227], "79": [50, 51, 103], "pointwise_stabil": 50, "pointwis": [50, 57], "p_k": [50, 99], "p20": 50, "stab": 50, "schreier_sims_increment": [50, 57], "polycyclicgroup": 50, "eliminate_gen": 50, "gen_count": 50, "b1": [50, 55, 67, 99, 102, 103, 114, 123, 140, 183, 199, 208, 218, 221, 224, 259], "b_r": 50, "slp_dict": 50, "seq": [50, 59, 62, 95, 199, 201, 204, 214, 226, 246], "93": [50, 202], "schreier_sims_random": [50, 57], "consec_succ": 50, "consec": 50, "_succ": 50, "97": [50, 60, 99, 201], "sift": [50, 57, 246], "amend": 50, "unsuccess": [50, 57], "accordingli": [50, 196, 203], "halt": 50, "signifi": [50, 59, 102, 204, 228], "g_t": 50, "leq": [50, 58, 60, 67, 84, 95, 99, 193, 201, 203, 214, 215, 221, 228], "prop": [50, 203], "init_subgroup": 50, "supergroup": 50, "sought": [50, 99, 158, 168, 220, 226, 227], "prune": 50, "prop_even": 50, "lengthi": 50, "114": [50, 99], "117": [50, 67], "terribl": 50, "crucial": [50, 58, 198], "len1": 50, "len2": 50, "len3": 50, "transitivity_degre": 50, "fold": [50, 59, 65, 208, 215, 220], "a_2": [50, 60, 81, 95, 201, 218, 221, 224, 228, 285], "a_k": [50, 60, 205, 211], "arrang": [51, 109, 118, 138, 140, 217, 221, 234], "r69": 51, "reorder": [51, 58, 65, 173, 204, 224, 228, 246], "pretty_print": [51, 87, 120, 125, 126, 130, 131, 132, 134, 135, 136, 138, 141, 183, 185, 187, 188, 191, 192, 208], "understood": [51, 99, 178, 195, 199], "economi": 51, "caution": [51, 59, 65, 208, 220], "indexerror": [51, 95, 204], "autos": [51, 98], "watch": 51, "print_cycl": 51, "econom": [51, 86, 246], "retain": [51, 59, 65, 67, 86, 101, 204, 209, 217, 220], "biject": [51, 53, 60, 90, 195], "full_cyclic_form": 51, "rmul": 51, "unrank_lex": 51, "r73": 51, "zo42": 51, "from_sequ": 51, "a1": [51, 55, 59, 87, 90, 99, 103, 123, 140, 147, 224, 228, 229, 259, 285], "a2": [51, 55, 59, 88, 90, 99, 103, 123, 140, 147, 197, 228, 229, 259, 285], "a3": [51, 55, 59, 88, 90, 140, 259, 285], "perfectli": [51, 58, 59, 60, 201, 204, 207], "skiena": 51, "ma": [51, 58, 128], "1990": [51, 84, 218, 253], "r70": 51, "wendi": 51, "myrvold": 51, "ruskei": 51, "2001": [51, 99, 202], "lett": 51, "septemb": [51, 243], "281": 51, "284": [51, 99], "1016": 51, "s0020": 51, "0190": 51, "01": [51, 59, 63, 123, 167, 202, 220, 246], "00141": 51, "r71": 51, "kreher": 51, "stinson": 51, "1999": [51, 95, 202, 207, 224], "r72": 51, "graham": [51, 64, 65, 99], "patashnik": 51, "foundat": [51, 202, 203], "1994": [51, 201, 202, 204], "product_and_invers": 51, "r74": 51, "lehmer_cod": 51, "appliedpermut": 51, "magic": [51, 220, 239, 277], "attatch": 51, "_array_form": 51, "ascent": 51, "ie": [51, 221], "descent": [51, 221], "fg": [51, 61, 224, 227], "gf": [51, 60, 195, 197, 198, 201, 203], "r75": 51, "commutes_with": [51, 234], "cycle_structur": 51, "from_inversion_vector": 51, "get_adjacency_dist": 51, "n_adj": 51, "reev": 51, "colin": 51, "landscap": 51, "annal": 51, "86": [51, 95, 139, 207, 217], "473": 51, "josephu": 51, "get_precedence_matrix": 51, "get_precedence_dist": 51, "get_adjacency_matrix": 51, "get_positional_dist": 51, "inversion_vector": 51, "lesser": [51, 105, 204], "lie": [51, 61, 73, 74, 75, 204, 228, 264, 271], "lehmer": 51, "ith": [51, 88, 99, 199, 205, 227, 228], "variat": [51, 59, 201, 215, 224], "r76": 51, "eng": 51, "chula": 51, "piak": 51, "algo2008": 51, "htm": [51, 67, 86, 221], "is_singleton": 51, "is_odd": 51, "shuffl": [51, 95, 285], "012345": 51, "345": 51, "253": 51, "2531": 51, "25314": 51, "253140": 51, "r77": 51, "flavius_josephu": 51, "r78": 51, "josephus_problem": 51, "r79": 51, "wou": 51, "burtonl": 51, "trim": [51, 137], "unmov": 51, "mul_inv": 51, "next_nonlex": 51, "nonlex": 51, "rank_nonlex": 51, "unrank_nonlex": 51, "next_trotterjohnson": [51, 246], "trotter": 51, "johnson": [51, 95], "generate_bel": [51, 246], "rank_trotterjohnson": 51, "unrank_trotterjohnson": 51, "_af_par": 51, "pseudo": [51, 95, 99, 199, 201, 204], "inv_perm": 51, "enforc": [51, 125], "rmul_with_af": 51, "ascend": [51, 246], "r80": 51, "transposition_": 51, "28mathemat": [51, 59, 216], "flexibl": [51, 59, 123, 140, 191, 194, 198, 227, 275], "investig": [51, 84, 193, 195, 218, 246, 277], "cn": [51, 208, 284], "2n": [51, 58, 64, 67, 86, 90, 105, 110, 136, 193, 211, 218], "dn": [51, 228], "klein": 51, "s4": [51, 109], "polyhedr": 52, "psg": 52, "platon": 52, "solid": [52, 73, 117, 194, 263], "tetrahedr": 52, "octahedr": 52, "icosahedr": 52, "r81": 52, "polyhedralgroup": 52, "polyhedra": 52, "shadow": 52, "h5": 52, "heinz": 53, "caylei": [53, 90], "r82": 53, "labeledtre": 53, "tree_repr": 53, "prufer_rank": 53, "prev": [53, 59], "36": [53, 60, 64, 75, 86, 90, 95, 99, 103, 204, 208, 221, 224, 228, 263], "prufer_repr": 53, "record": [53, 59, 203, 208, 239], "to_pruf": 53, "778": 53, "779": 53, "777": [53, 62], "1296": 53, "to_tre": 53, "r83": 53, "hamberg": 53, "erlend": 53, "2010": [53, 225, 246], "06": [53, 59, 125, 193, 228], "compact": [53, 59, 106, 118, 140, 171, 188, 204, 208, 226, 243], "next_binari": 54, "prev_binari": 54, "bitlist_from_subset": 54, "subset_from_bitlist": 54, "superset_s": 54, "iterate_binari": 54, "iterate_graycod": 54, "prev_grai": 54, "next_grai": 54, "next_lexicograph": 54, "prev_lexicograph": 54, "rank_binari": 54, "unrank_binari": 54, "rank_grai": 54, "unrank_grai": 54, "rank_lexicograph": 54, "43": [54, 95, 99, 102, 103, 228, 285], "super_set": 54, "subset_indic": 54, "ksubset": 54, "itertool": [54, 246], "tensor_can": [55, 234], "msym": 55, "contravari": [55, 95, 234, 235], "covari": [55, 61, 95, 228, 234, 235], "d0": 55, "base_i": 55, "gens_i": 55, "n_i": [55, 201, 226], "sym_i": 55, "failur": [55, 63, 76, 84, 99, 228, 239, 285], "canonicalize_na": 55, "exchang": [55, 60, 95, 193, 197, 246], "anticommut": [55, 160, 162, 172, 173, 234, 270], "canonical_fre": 55, "slot": [55, 157, 229, 233, 234, 280], "residu": [55, 60, 99, 201, 218], "tensor_gen": 55, "list_free_indic": 55, "double_coset_can_rep": 55, "reintroduc": 55, "antisymmetr": [55, 61, 90, 173, 234], "d2": [55, 183, 195, 215, 228, 246, 253], "ord": [55, 60, 95], "t_c": 55, "get_symmetric_group_sg": [55, 234], "bsgs_direct_product": 55, "base2a": 55, "gens2a": 55, "t0": 55, "t1": [55, 75, 76, 99, 114, 120, 221, 228], "a_m": [55, 224], "a_n": [55, 60, 67, 84, 88, 178, 196, 201, 211, 221, 224, 285], "_a": [55, 67, 173, 204], "_b": [55, 67, 173], "base_f": 55, "gens_f": 55, "base1": 55, "gens1": 55, "base_a": 55, "gens_a": 55, "sgen": 55, "s_transvers": 55, "butler": [55, 234], "portug": [55, 234], "grow": [55, 59, 84, 95, 99, 198, 201], "absenc": [55, 89], "observ": [55, 81, 84, 162, 192, 195, 218, 221, 224, 228, 262, 285], "opposit": [55, 75, 89, 90, 114, 196, 199, 216, 220, 227, 235, 246, 253, 255, 285], "ind": [55, 210, 234], "d3": [55, 215], "a0": [55, 224, 285], "a4": [55, 59, 88, 140, 285], "a5": [55, 59], "leftrightarrow": 55, "_af_rmul": 55, "t_": [55, 64], "b0": [55, 67, 199, 218, 224], "d_": [55, 218], "p0": [55, 69, 203, 224], "dbase": 55, "recomput": [55, 204], "d_i": [55, 84, 178], "s_0": 55, "d_0": [55, 60], "b_0": [55, 60, 64, 218, 221, 224], "b_j": [55, 57, 67, 84, 218], "sx": 55, "trace": [55, 90, 92, 110, 140, 201, 208, 228, 229, 230, 232, 246, 281], "h_n": [55, 67, 86, 204, 227], "tab1": 55, "get_transvers": 55, "antisym": 55, "base2": 55, "gens2": 55, "_cmp_perm_list": 56, "ls1": 56, "ls2": 56, "_naive_list_centr": 56, "_verify_centr": 56, "_verify_normal_closur": 56, "_base_ord": 57, "base_ord": 57, "backtrack": 57, "108": [57, 99, 103], "132": [57, 64, 183], "r84": 57, "_distribute_gens_by_bas": 57, "_strong_gens_from_distr": 57, "_orbits_transversals_from_bsg": 57, "_handle_precomputed_bsg": 57, "transversals_onli": 57, "slp": 57, "_remove_gen": 57, "new_gen": 57, "r85": 57, "r86": 57, "recurr": [58, 64, 81, 95, 203, 214, 220, 224, 228, 248], "annihil": [58, 77, 78, 82, 149, 173, 226], "is_hypergeometr": 58, "binomi": [58, 63, 64, 67, 99, 204, 208, 213, 220, 224, 228, 246, 285], "rf": [58, 64, 204], "ff": [58, 60, 64, 193, 196, 197, 198, 203, 204], "speci": [58, 59], "rise": [58, 64, 67, 193, 220, 224, 228, 257], "hypersimp": [58, 220], "quotient": [58, 59, 62, 65, 99, 195, 196, 198, 201, 204, 218, 220, 224], "dummy_vari": 58, "karr": 58, "quad": [58, 59, 61, 63, 67, 86, 90], "exclus": [58, 59, 65, 89, 95, 201, 277], "emphas": 58, "typeset": [58, 208], "doit": [58, 59, 61, 64, 65, 67, 86, 92, 109, 150, 152, 154, 165, 167, 170, 171, 173, 183, 193, 204, 210, 215, 220, 224, 225, 228, 230, 253, 256, 257, 259, 260, 275, 280], "seemingli": [58, 227], "nonsens": [58, 67], "r87": 58, "michael": [58, 202, 207], "april": 58, "1981": [58, 202], "305": 58, "350": [58, 120], "dl": [58, 192, 202, 220], "cfm": [58, 202], "doid": [58, 202], "322248": 58, "322255": 58, "r88": 58, "sigma_not": 58, "r89": 58, "empty_sum": 58, "euler_maclaurin": [58, 63], "eval_integr": 58, "maclaurin": [58, 63], "endpoint": [58, 59, 63, 189, 216, 260], "28333333333333": 58, "sstr": [58, 188, 208], "full_prec": [58, 208], "26629073187415": 58, "0175000000000000": 58, "soon": [58, 59, 123, 178, 205], "eval_zeta_funct": 58, "is_absolutely_converg": 58, "sequence_term": 58, "is_converg": 58, "r90": 58, "absolute_converg": 58, "analogi": [58, 201], "prod_": [58, 64, 67, 84, 99, 178, 218], "respons": [58, 59, 109, 123, 194, 241], "diverg": [58, 67, 142, 184, 253, 256], "dirichlet": [58, 67, 228], "r91": 58, "convergence_test": 58, "reverse_ord": 58, "selector": [58, 90, 220, 246], "handi": [58, 59, 95, 208, 280], "s0": [58, 82, 84, 145], "expr_with_intlimit": [58, 86], "exprwithintlimit": [58, 86], "reorder_limit": 58, "r92": 58, "walli": 58, "w2": [58, 147], "w2e": 58, "risingfactori": [58, 64, 67, 208, 210], "combsimp": [58, 59, 64, 220], "pe": 58, "gammasimp": [58, 59, 220], "rewrit": [58, 59, 61, 64, 65, 67, 84, 86, 89, 102, 109, 170, 204, 215, 216, 217, 220, 224, 225, 226, 227, 228, 265, 279, 281], "r93": 58, "r94": 58, "capital_pi_not": 58, "r95": 58, "empty_product": 58, "r96": 58, "infinite_product": 58, "r97": 58, "expr_with_limit": [58, 86], "exprwithlimit": [58, 86], "change_index": 58, "trafo": 58, "newvar": 58, "mapsto": [58, 84, 90, 203], "p3": [58, 69, 71, 72, 74, 75, 109, 194, 198, 217, 228], "has_empty_sequ": [58, 86], "has_reversed_limit": [58, 86], "has_finite_limit": [58, 86], "____": [58, 63, 86, 145, 196, 209, 228, 246, 286], "___": [58, 63, 86, 87, 95, 196, 220, 228, 233, 246, 284], "rubric": [58, 59], "_____": [58, 228], "gosper": 58, "gosper_norm": 58, "monic": [58, 67, 195, 196, 199, 201, 203, 204, 207], "gcd": [58, 59, 60, 95, 99, 169, 198, 199, 202, 203, 204, 208, 220, 221], "gosper_term": 58, "s_n": [58, 204], "f_k": [58, 118, 135, 201], "g_n": [58, 64, 204], "f_n": [58, 64, 67, 195, 201, 204, 224], "gosper_sum": 58, "r98": 58, "marko": 58, "petkovsek": [58, 226], "herbert": 58, "doron": 58, "zeilberg": [58, 226], "ak": [58, 210], "peter": [58, 64, 67, 99, 139, 190, 204, 246], "ltd": 58, "welleslei": 58, "usa": [58, 202], "1997": [58, 84, 99, 202, 218], "convert_xor": [59, 101], "09": [59, 107, 193], "xor": [59, 62, 89, 101, 208, 277], "sympifyerror": 59, "coerc": [59, 137, 201], "cooper": 59, "shouldn": [59, 205], "unsanit": [59, 247, 274], "bitcount": 59, "improperli": 59, "unbound": [59, 233], "23903": 59, "fallback": [59, 87, 173, 188, 198, 208, 226], "ast": [59, 208], "mylist1": 59, "mylist": 59, "mylist2": 59, "xxx": [59, 86, 95, 246, 248], "autosimplif": [59, 217, 220], "kern": 59, "r101": 59, "7649": 59, "r100": 59, "r104": 59, "r102": 59, "r103": 59, "r105": 59, "r106": 59, "r107": 59, "r99": 59, "imaginaryunit": [59, 208], "negativeinfin": [59, 208], "complexinfin": [59, 109], "recreat": [59, 117], "isfinit": 59, "__cacheit": 59, "maxsiz": 59, "cacheit": 59, "noqa": [59, 87, 199, 242], "f811": 59, "sympy_use_cach": 59, "cot": [59, 65, 67, 101, 205, 208, 217], "_arg": [59, 65], "as_mut": [59, 91, 92], "as_content_primit": [59, 95, 196, 204], "stub": 59, "as_dummi": [59, 86], "_0": [59, 64, 84, 90, 95, 204, 247], "_r": [59, 173, 218, 227], "bound_symbol": [59, 86], "besid": [59, 201, 226], "typeinfo": 59, "truli": [59, 67, 178], "piec": [59, 63, 218, 241], "numbersymbol": [59, 208], "scan": 59, "appliedundef": 59, "canonical_vari": 59, "class_kei": 59, "sorted_class": 59, "dummy_eq": 59, "eg": [59, 123, 180, 227], "fromit": 59, "has_fre": 59, "has_xfre": 59, "exp_polar": [59, 65, 67, 218], "dif": 59, "_prec": 59, "r_": [59, 111, 174, 205], "repl_dict": 59, "rcall": [59, 61], "simul": [59, 123, 140, 207], "abus": [59, 234], "succe": [59, 84, 89, 99, 163, 203, 226], "newtyp": 59, "intuit": [59, 178, 224], "is_mul": 59, "is_add": [59, 227], "mysin": [59, 247, 274], "_eval_rewrite_as_": 59, "_eval_rewrite_as_co": 59, "tie": [59, 246], "delai": [59, 107, 137, 217, 239, 275], "unsort": [59, 113, 182], "333333333333333333333": 59, "333333333333333314830": 59, "wildcard": [59, 220], "evalfmixin": 59, "registri": 59, "metaprogram": 59, "address": [59, 208, 227], "mostli": [59, 65, 86, 95, 140, 168, 191, 195, 207, 208, 218, 226, 284], "__truediv__": [59, 199], "class_nam": 59, "mysingleton": 59, "_eval_is_g": 59, "_eval_is_eq": 59, "args_cnc": 59, "cset": 59, "split_1": 59, "suppress": [59, 101, 237, 244], "as_coeff_add": 59, "dep": [59, 224], "as_coeff_expon": 59, "as_coeffici": 59, "zz": [59, 64, 81, 82, 86, 92, 95, 96, 99, 120, 192, 195, 196, 197, 198, 201, 203, 204, 205, 206, 223], "coeff_monomi": [59, 204], "polytool": [59, 204, 227], "monomi": [59, 86, 89, 99, 196, 198, 199, 201, 207, 208, 285], "as_coefficients_dict": 59, "inquiri": 59, "expand_mul": [59, 84], "121": [59, 64, 99, 109, 183, 226], "84": [59, 63, 99], "separatevar": [59, 220, 224], "n3": [59, 123], "as_leading_term": [59, 215], "logx": [59, 215], "cdir": 59, "_eval_as_leading_term": 59, "as_numer_denom": [59, 226], "as_ordered_factor": 59, "as_ordered_term": 59, "as_powers_dict": 59, "lost": 59, "as_real_imag": [59, 65, 90, 209], "as_term": 59, "aseri": 59, "hir": 59, "asymptot": [59, 84, 109, 275], "hierarch": 59, "normalis": [59, 210], "induc": [59, 90, 203, 217, 246], "gruntz": [59, 210], "majorli": 59, "mrv": [59, 215], "overal": [59, 180, 194, 226], "till": [59, 102, 103, 123, 224], "r108": 59, "dominik": [59, 210], "proc": [59, 226], "1993": [59, 202], "symp": 59, "239": 59, "244": [59, 201], "r109": 59, "p90": 59, "r110": 59, "asymptotic_expans": 59, "_first": [59, 65], "factor_term": [59, 131, 204, 217, 220], "distribute_order_term": [59, 220], "compute_leading_term": 59, "could_extract_minus_sign": 59, "signsimp": [59, 131, 220], "failing_express": 59, "modulu": [59, 60, 62, 67, 69, 75, 90, 99, 102, 103, 195, 199, 201, 203, 204, 207, 227], "power_bas": [59, 90], "power_exp": [59, 90], "multinomi": [59, 90, 99, 228], "expr_free_symbol": 59, "extract_addit": 59, "extract_multipl": 59, "extract_branch_factor": 59, "allow_half": 59, "fourier_seri": [59, 211], "geto": 59, "getn": 59, "mod_invers": [59, 204], "is_algebraic_expr": 59, "is_rational_funct": 59, "r111": 59, "algebraic_express": 59, "is_const": 59, "constanc": 59, "agre": [59, 60, 67, 74, 84, 218], "test_expr": 59, "failing_numb": 59, "is_meromorph": 59, "meromorph": [59, 67], "multivalu": [59, 65], "cut": [59, 64, 65, 67, 75, 84, 195, 218, 243, 249, 285], "hit": [59, 280], "is_polynomi": 59, "rational_funct": 59, "leadterm": 59, "xlim": [59, 194], "lseri": 59, "exaxmpl": 59, "nseri": 59, "_eval_nseri": 59, "innermost": 59, "disadvantag": 59, "met": [59, 105, 221, 227, 242, 285], "poleerror": 59, "nsimplifi": [59, 63, 220], "ratsimp": [59, 220], "removeo": [59, 140, 208, 275], "chop": [59, 63, 67, 90, 95, 226, 274], "123": [59, 64, 69, 89, 117, 170, 183, 246, 253, 255], "lazi": [59, 92, 204], "smooth": [59, 63, 99, 210], "taylor_term": [59, 65], "previous_term": [59, 65], "wildfunct": 59, "dummy_index": 59, "temporari": [59, 240], "_dummy_10": 59, "contigu": [59, 218, 241], "x4": [59, 64, 198], "x5": [59, 64, 198], "x6": [59, 198], "x7": [59, 198], "x8": [59, 198], "x9": [59, 198], "x50": 59, "x51": 59, "y0": [59, 78, 80, 82, 224], "y1": [59, 140], "y2": [59, 140, 198], "y3": [59, 198], "y4": 59, "xa": [59, 196, 201], "xb": [59, 249], "xc": [59, 172, 249], "disambigu": 59, "x01": 59, "x02": 59, "x11": 59, "x12": 59, "escap": [59, 101, 194, 208, 249], "newli": [59, 84, 218], "undefinedfunct": [59, 185, 208, 240, 247], "f821": [59, 242], "cofactor": [59, 95, 199, 201, 204], "lcm": [59, 99, 199, 201, 204, 208], "50000000000000": [59, 63], "100000000000000000000": 59, "1e20": 59, "00000000000000e": 59, "23456789123456789": 59, "23456789123457": 59, "00100": 59, "sent": [59, 86, 220, 226], "789": [59, 99], "123_456": 59, "123456789": 59, "12e": 59, "012": 59, "60e2": 59, "6000": 59, "600e": 59, "125": [59, 63, 86, 99, 199, 214, 221], "099609": 59, "12500": 59, "12500000000000000000": 59, "5404319552844595": 59, "54": [59, 95, 103, 201, 207, 246], "29999999999999998890": 59, "30000000000000000000": 59, "_mpf_": [59, 198], "4915": 59, "70": [59, 60, 76, 86, 95, 99, 207, 208, 221, 228, 249], "307": 59, "mpf": [59, 198, 199], "is_float": 59, "unprejud": 59, "3602879701896397": 59, "18014398509481984": [59, 220], "limit_denomin": 59, "320": 59, "75": [59, 62, 228, 253], "use_tri": [59, 99], "use_rho": [59, 99], "use_pm1": [59, 99], "factorint": [59, 99, 203, 204, 243], "trial": [59, 99, 201, 213, 217, 224, 228], "max_denomin": 59, "1000000": [59, 99], "141592653589793": 59, "311": [59, 99], "discard": [59, 203, 208, 227], "99999999999999999999": 59, "algebraicnumb": [59, 199, 203, 207], "hookrightarrow": 59, "minpoli": [59, 198, 199, 203], "dmp": [59, 195, 199, 204], "complexrootof": [59, 95, 199, 204, 224], "anp": [59, 198, 199, 203, 204], "to_list": [59, 197, 199], "minpoly_of_el": 59, "414213562": 59, "scratch": [59, 178], "6x": [59, 201], "to_number_field": [59, 203], "to_root": 59, "primitive_el": [59, 198, 199, 203], "knew": [59, 285], "golden": [59, 63, 99], "5th": [59, 140, 201, 203], "cyclotom": [59, 199, 201, 202, 203, 204], "cyclotomic_poli": [59, 203, 204], "61803398874989": 59, "2i": 59, "a6": 59, "a6_wrong": 59, "309016994374947": 59, "951056516295154": 59, "field_el": 59, "is_alias": 59, "is_primitive_el": 59, "native_coeff": 59, "to_algebraic_integ": 59, "to_primitive_el": 59, "Its": [59, 65, 75, 140, 171, 201, 208, 216], "a_prim": 59, "number_cl": 59, "realnumb": 59, "igcd": [59, 99, 196], "greatest": [59, 64, 69, 99, 196, 198, 199, 201, 202, 204, 207], "euclid": [59, 201, 202], "r112": 59, "euclidean_algorithm": 59, "ilcm": [59, 99], "seterr": 59, "r113": 59, "r114": 59, "1_": 59, "28number": 59, "negativeon": [59, 65, 280], "r115": 59, "88": [59, 95, 99], "921_": 59, "r116": 59, "one_half": 59, "holder": 59, "ieee": [59, 60], "754": 59, "r117": 59, "affin": [59, 60, 74, 195], "compactif": 59, "r118": 59, "tild": [59, 65, 229], "phase": [59, 86, 107, 142, 145, 147, 157, 158, 227], "exp1": [59, 208], "718281828": 59, "napier": 59, "r119": 59, "e_": [59, 64, 95], "28mathematical_const": 59, "r120": 59, "imaginary_unit": [59, 208], "141592654": 59, "circumfer": [59, 69], "diamet": [59, 69], "area": [59, 69, 71, 75, 76, 102, 103], "is_irr": 59, "r121": 59, "mascheroni": [59, 67], "5772157": 59, "recur": 59, "harmon": [59, 64, 99, 111, 152, 193, 208, 270], "lim": [59, 215, 275], "limits_": [59, 193, 210, 279], "ln": [59, 65, 86, 208, 210, 224, 228, 285], "r122": 59, "93mascheroni_const": 59, "catalan": [59, 64, 208], "91596559": 59, "r123": 59, "27s_constant": 59, "goldenratio": [59, 63, 209, 220], "r124": 59, "golden_ratio": 59, "tribonacciconst": 59, "tribonacci": [59, 64], "fibonacci": [59, 63, 64, 99], "predetermin": [59, 239], "8392867552141611326": 59, "r125": 59, "generalizations_of_fibonacci_numb": [59, 64], "tribonacci_numb": [59, 64], "modulo": [59, 60, 96, 99, 169, 195, 197, 198, 199, 201, 203, 204, 205, 207, 208, 211, 220], "r126": 59, "modular_multiplicative_invers": 59, "r127": 59, "extended_euclidean_algorithm": 59, "oscil": [59, 270], "conform": [59, 227, 232, 233], "r128": 59, "r129": 59, "zero_to_the_power_of_zero": 59, "r130": 59, "indeterminate_form": 59, "as_base_exp": [59, 65, 66, 246], "expand_power_bas": [59, 220], "integer_nthroot": [59, 65, 99], "floor": [59, 65, 99, 117, 198, 199, 208, 228], "integer_log": 59, "geq": [59, 60, 67, 95, 204, 221, 228, 285], "factor_": [59, 60, 99, 204, 221], "perfect_pow": [59, 99], "infix": 59, "matmul": [59, 92, 197], "as_coef_mul": 59, "undesir": [59, 113, 123, 137, 196, 199, 218], "4596": 59, "compound": [59, 128, 171], "5728": 59, "suspect": [59, 99], "5706": 59, "moot": 59, "off": [59, 69, 84, 90, 98, 100, 125, 134, 157, 195, 204, 208, 224, 239, 250, 253, 279], "nb": 59, "sensit": [59, 109, 140, 194, 201, 220, 239], "assocop": 59, "prod": [59, 198, 205, 217], "matadd": [59, 92, 208], "as_coef_add": 59, "extract_leading_ord": 59, "commutative_part": 59, "noncommutative_part": 59, "order_symbol": 59, "subprocess": [59, 208, 239, 240], "dividend": [59, 199], "rop": 59, "validrelationoper": 59, "greaterthan": [59, 208], "lessthan": [59, 208], "strictlessthan": [59, 208, 249], "lt": [59, 204, 249], "fourth": [59, 60, 196, 224, 275], "my_equ": 59, "my_inequ": 59, "reversedsign": 59, "_eval_eq": 59, "respond": 59, "boolalg": [59, 89], "client": [59, 243], "counterpart": [59, 60, 224, 275], "litter": 59, "oddbal": 59, "minor": [59, 69, 95, 208, 239], "caveat": [59, 204, 277], "succinctli": 59, "coupl": [59, 95, 137, 152, 167, 170, 193], "annoy": 59, "succinct": 59, "occasion": 59, "r131": 59, "operar": 59, "circuit": [59, 157, 160, 270], "greaterthanobject": 59, "__bool__": 59, "335": 59, "march": 59, "2012": 59, "r132": 59, "r133": 59, "r134": 59, "mdarg": 59, "fgh": 59, "vsin": 59, "vdiff": 59, "narg": [59, 201], "naturals0": [59, 208, 216, 227, 228], "evalul": 59, "fairli": [59, 67, 84, 125, 133, 182, 195], "conserv": [59, 118, 136, 184, 256, 262], "136": [59, 95], "indirect": [59, 61, 67, 99, 173, 224], "implic": [59, 89, 201], "fx": [59, 61, 194, 224, 225], "fxx": 59, "insconsist": 59, "presenc": [59, 65, 89, 105, 122, 127, 137, 224, 232], "nonvanish": 59, "_diff_wrt": 59, "_sort_variable_count": 59, "vc": 59, "vsort": 59, "collaps": [59, 167, 220], "vsort0": 59, "vi": 59, "dfx": 59, "equidist": 59, "sq2": 59, "xl": 59, "d2fdxdy": 59, "doit_numer": 59, "z0": [59, 215], "unifi": [59, 141, 197, 199, 201, 203, 204, 216], "zeroth": [59, 203], "idiff": [59, 76], "r135": 59, "legaci": [59, 86, 95, 228], "v5_2": 59, "infunct": 59, "algebraiccomput": 59, "functionclass": [59, 208, 247], "f_real": [59, 66], "f_real_inherit": [59, 66], "is_singular": [59, 66, 82], "holomorph": [59, 66, 84], "superfici": 59, "unexpect": [59, 239], "ss": [59, 199], "denom": [59, 198, 199, 203, 220], "_eval_expand_bas": 59, "_eval_expand_complex": 59, "shut": [59, 204], "unwant": [59, 226, 246], "alphabet": [59, 60, 109, 178, 196, 221, 241], "expand_hint": 59, "_eval_expand_hint": 59, "liabl": [59, 89], "metahint": 59, "myclass": 59, "_eval_expand_doubl": 59, "expand_multinomi": 59, "expand_power_exp": 59, "expand_func": [59, 64, 67], "hyperexpand": [59, 67, 81, 84, 218, 220], "div": [59, 196, 198, 199, 204, 208, 220, 280], "horner": [59, 140, 201, 204], "untouch": 59, "unexpand": [59, 198, 207, 217, 240], "nfloat": [59, 220], "dkei": 59, "mixin": [59, 246], "maxn": [59, 63, 90], "subresult": [59, 199, 202, 204], "000100000000000000": 59, "precisionexhaust": [59, 63], "maxprec": 59, "quadratur": [59, 63, 86, 224], "tanh": [59, 63, 65, 86, 205, 208, 220, 285], "oscillatori": [59, 63, 213], "osc": [59, 63], "advers": 59, "1e16": 59, "291": 59, "builtin": [59, 199, 208, 216, 249, 284], "speedup": [59, 95, 100, 201, 205, 247], "framework": [59, 116, 123, 133, 233, 239, 241, 247, 270], "slice": [59, 89, 90, 95, 101, 199, 204, 214, 216, 220, 229, 246], "tuplekind": [59, 90, 216], "parametris": [59, 216], "element_kind": [59, 90, 216], "tuple_count": 59, "setkind": [59, 90], "gcd_term": [59, 204], "isprimit": 59, "_gcd_term": 59, "terms_gcd": [59, 199, 204], "entiti": [59, 69, 72, 73, 75, 76, 84, 123, 138, 189, 227, 262, 271, 281], "arguement": 59, "broad": [59, 280], "undefinedkind": [59, 90, 216], "lex": [59, 87, 188, 196, 198, 199, 201, 204, 205, 207, 208, 220], "grlex": [59, 87, 188, 199, 204, 207, 208], "grevlex": [59, 87, 188, 196, 201, 204, 207, 208], "rev": 59, "unaffect": [59, 227], "_node": 59, "fastest": [59, 64, 86, 99, 100, 205], "undecor": 59, "breaker": 59, "hash": [59, 199, 201, 209, 220, 224, 239, 241], "collis": [59, 98, 208], "wast": [59, 96, 197], "rng": 59, "getstat": 59, "intention": 59, "tn": 59, "td": [59, 208, 284], "randrang": 59, "999": [59, 63], "238": [59, 99], "randint": [59, 95, 201], "ri": [59, 208], "rv": [59, 217, 228, 246], "nonbas": 59, "postord": 59, "descend": [59, 195, 203, 241], "subtre": [59, 208, 243], "educ": [60, 95], "cryptograph": 60, "encrypt": 60, "hide": [60, 208], "cipher": 60, "vigener": 60, "hill": [60, 67, 118, 139, 183, 190, 253], "bifid": 60, "rsa": 60, "kid": 60, "feedback": [60, 106, 109, 278], "elgam": 60, "plaintext": [60, 208], "ciphertext": 60, "monoalphabet": 60, "polyalphabet": 60, "crypto": 60, "az": [60, 221], "uppercas": [60, 218], "hello": [60, 246], "world": [60, 105, 127, 137, 246], "helloworld": 60, "check_and_join": 60, "padded_kei": 60, "puppi": 60, "opqrstuvwxi": 60, "puyoqrstvwx": 60, "artist": 60, "aphras": 60, "ara": 60, "hp": 60, "cycle_list": 60, "encipher_shift": 60, "msg": [60, 86], "decipher_shift": 60, "gonavybeatarmi": 60, "ct": [60, 88, 201], "hpobwzcfbubsnz": 60, "deciph": 60, "l1": [60, 69, 71, 72, 117, 120, 126, 138, 199, 201, 204, 221, 228], "l2": [60, 71, 72, 117, 120, 126, 159, 175, 199, 201, 228], "caesar": 60, "juliu": 60, "suetoniu": 60, "protect": [60, 208], "militari": 60, "nephew": 60, "augustu": 60, "reportedli": 60, "r136": 60, "caesar_ciph": 60, "r137": 60, "caesarsmethod": 60, "encipher_rot13": 60, "rot13": 60, "caeser": 60, "midwai": 60, "decipher_rot13": 60, "r138": 60, "decrypt": 60, "tbanilorngnezl": 60, "encipher_affin": 60, "_invers": 60, "cx": [60, 103], "recov": [60, 86, 178, 201, 203, 204, 221, 224], "decipher_affin": 60, "r139": 60, "affine_ciph": 60, "reciph": 60, "navi": 60, "beat": 60, "armi": 60, "trobmvenbgbalv": 60, "encipher_atbash": 60, "enciph": 60, "atbash": 60, "hebrew": 60, "decipher_atbash": 60, "tlmzebyvzgzinb": 60, "r140": 60, "encipher_substitut": 60, "oeyag": 60, "034": 60, "60n": 60, "v4b3": 60, "rm4": 60, "immateri": 60, "anyv": 60, "wherebi": 60, "r141": 60, "substitution_ciph": 60, "encipher_vigener": 60, "me": [60, 123, 140, 183, 208, 230], "mondai": 60, "qrgkkthrzqebpr": 60, "krypto": 60, "sculptur": 60, "cia": 60, "headquart": 60, "r143": 60, "decipher_vigener": 60, "alp": 60, "palimpsest": 60, "emufphzlrfaxyusdjkzldkrnshgnfivj": 60, "betweensubtleshadingandtheabsenc": 60, "blais": 60, "sixteenth": 60, "centuri": [60, 195], "diplomat": 60, "accid": [60, 247], "invent": [60, 203, 226, 279], "giovan": 60, "batista": 60, "belaso": 60, "1553": 60, "civil": [60, 102], "war": 60, "confederaci": 60, "brass": 60, "nsa": 60, "museum": 60, "fort": 60, "mead": 60, "r142": 60, "sender": 60, "assembl": [60, 84, 215], "concaten": [60, 90], "frequenc": [60, 86, 107, 109, 147, 149, 157, 174], "kasiski": 60, "discov": [60, 84, 113, 232, 281], "babbag": 60, "unbreak": 60, "ye": [60, 89, 224], "gonavybeatarmyyesyoucan": 60, "gold": 60, "auto_kei": 60, "goldbuggonavybeatarmyy": 60, "mcydwshkogamkzcelyfgayr": 60, "pt": [60, 68, 69, 70, 72, 73, 74, 75, 214], "vigenere_ciph": 60, "archiv": [60, 139, 221], "20071116100808": 60, "r144": 60, "filebox": 60, "vt": 60, "batman": 60, "goo": 60, "gl": 60, "ijr22d": 60, "decod": 60, "qrgk": 60, "kt": [60, 128], "hrzqe": 60, "bpr": 60, "meetmeonmondai": 60, "encipher_hil": 60, "z_": [60, 220], "r145": 60, "lester": 60, "1920": 60, "r146": 60, "polygraph": 60, "bare": [60, 118], "ceil": [60, 65, 99, 117, 208], "l_1": [60, 64, 110, 193, 218, 234], "l_t": 60, "c_t": 60, "l_i": [60, 193, 218], "decipher_hil": 60, "hill_ciph": 60, "june": [60, 95], "juli": [60, 221], "1929": 60, "306": 60, "312": [60, 183, 226, 253, 255], "ueqdueodoctcwq": 60, "st": [60, 86, 173], "hjeb": 60, "stqq": 60, "ispk": 60, "stzz": 60, "hd": 60, "ormv": 60, "uiki": 60, "encipher_bifid": 60, "polybiu": 60, "printabl": 60, "bifid5": 60, "decipher_bifid": 60, "encipher_bifid5": 60, "encipher_bifid6": 60, "r147": 60, "bifid_ciph": 60, "ieilhhfstsfqy": 60, "ieilh": 60, "hfst": 60, "fqyej": 60, "bmtwmg": 60, "bio": 60, "gold_bug": 60, "hg2sfuei7t": 60, "pug": 60, "heldo": 60, "wor6d": 60, "bifid5_squar": 60, "5x5": 60, "cap": [60, 63, 173, 216, 227], "tradition": [60, 67], "decipher_bifid5": 60, "round_trip": 60, "josi": 60, "osi": 60, "iosi": 60, "qiq": 60, "1901": 60, "felix": 60, "delastel": 60, "onto": [60, 72, 73, 74, 84, 88, 95, 98, 100, 203], "helen": 60, "cryptanalysi": 60, "german": 60, "fridai": 60, "ieilehfstsfxe": 60, "okai": 60, "decipher_bifid6": 60, "8am": 60, "kfkljjhf5mmmktfrgpl": 60, "meetmeonmondayat8am": 60, "bifid6_squar": 60, "6x6": 60, "rsa_public_kei": 60, "totient": [60, 99], "carmichael": [60, 99], "p_n": [60, 64, 67, 86, 204], "multiprim": 60, "land": 60, "reduced_toti": [60, 99], "uniquenss": 60, "rsa_private_kei": 60, "e_0": 60, "canonicalz": 60, "61": [60, 64, 75, 95, 99, 204, 210], "3233": 60, "797": 60, "1577": 60, "multipow": 60, "cryptosystem": 60, "coprim": [60, 86, 99, 169, 201, 221], "30030": 60, "becam": [60, 133], "hardest": 60, "claim": [60, 192, 218, 227], "encipher_rsa": 60, "decipher_rsa": 60, "r148": 60, "rsa_": 60, "28cryptosystem": 60, "r149": 60, "cacr": 60, "uwaterloo": 60, "techreport": 60, "2006": [60, 217], "cacr2006": 60, "r150": 60, "springer": [60, 86, 99, 201, 202, 224], "1007": 60, "2fbfb0055738": 60, "r151": 60, "itii": 60, "manuscript": 60, "1381": 60, "2753": 60, "413": 60, "1193": 60, "823": 60, "r152": 60, "r153": 60, "r154": 60, "r155": 60, "bmod": [60, 204, 208], "vice": [60, 86, 99, 102, 163, 183, 195, 199, 257, 258, 277], "versa": [60, 86, 99, 102, 163, 183, 195, 199, 257, 258, 277], "asymmetr": [60, 75], "puk": 60, "prk": 60, "chines": [60, 99, 201], "k_1": [60, 99, 201, 218], "k_2": 60, "k_n": [60, 67, 201], "p_3": [60, 191], "k_3": 60, "moduli": [60, 99, 201], "2048": [60, 99, 208], "overhead": [60, 100, 205], "modular": [60, 99, 169, 202, 227], "crt": [60, 99, 201], "overcompens": 60, "theorit": 60, "new_msg": 60, "kid_rsa_public_kei": 60, "grade": [60, 87, 188, 204], "school": [60, 217], "bob": [60, 117], "369": 60, "58": [60, 95, 234], "kid_rsa_private_kei": 60, "encipher_kid_rsa": 60, "200": [60, 90, 95, 99, 102, 107, 253], "161": 60, "decipher_kid_rsa": 60, "pub": [60, 253], "pri": 60, "encode_mors": 60, "sep": [60, 208, 225, 239], "mors": 60, "attack": 60, "flank": 60, "r156": 60, "morse_cod": 60, "decode_mors": 60, "word_sep": 60, "mc": [60, 128], "east": 60, "r157": 60, "lfsr_sequenc": 60, "lfsr": 60, "c_k": 60, "golomb": [60, 99], "g157": 60, "autocorrel": 60, "lim_": [60, 65, 67, 84, 86, 215, 275, 279], "balanc": [60, 139, 195, 228, 239], "solomon": 60, "aegean": 60, "park": 60, "laguna": 60, "1967": [60, 202], "lfsr_autocorrel": 60, "lfsr_connection_polynomi": 60, "massei": 60, "m158": 60, "jame": [60, 201], "synthesi": 60, "bch": 60, "tran": 60, "122": [60, 62, 67], "127": [60, 99], "elgamal_public_kei": 60, "elgamal_private_kei": 60, "1031": 60, "636": 60, "212": [60, 86, 202], "mathmat": 60, "dlp": 60, "is_primitive_root": [60, 99], "encipher_elgam": 60, "c2": [60, 69, 76, 90, 92, 117, 159, 173, 216, 224, 228, 256, 259, 286], "encryp": 60, "decipher_elgam": 60, "eucliden": 60, "dh_public_kei": 60, "dh_private_kei": 60, "_p": [60, 173, 199, 201, 203, 215, 218, 226], "_g": 60, "diffi": 60, "hellman": [60, 99], "publicli": 60, "secretli": 60, "dh_shared_kei": 60, "sk": 60, "gm_public_kei": 60, "goldwass": 60, "micali": 60, "gm_private_kei": 60, "b_n": [60, 64, 88, 195, 211], "jacobi_symbol": [60, 99], "reconstruct": [60, 95, 201, 221, 280], "residuos": 60, "entropi": [60, 228], "encipher_gm": 60, "public_kei": 60, "gm": [60, 176], "decipher_gm": 60, "encipher_railf": 60, "rail": 60, "railfenc": 60, "horel": 60, "ollwd": 60, "r160": 60, "rail_fence_ciph": 60, "decipher_railf": 60, "diffgeom": 61, "euclidean": [61, 72, 74, 183, 199, 201, 204], "r161": 61, "chart": [61, 194], "r162": 61, "sussman": 61, "wisdom": 61, "farr": 61, "2013": [61, 71, 90, 283], "tranform": 61, "cartesian": [61, 102, 141, 146, 160, 163, 168, 189, 194, 195, 216, 227, 246, 257, 258, 260, 261, 270], "polar": [61, 65, 67, 69, 75, 102, 111, 143, 194, 216, 220, 227, 270], "relation_dict": 61, "car2d": 61, "pol": 61, "coordinatesymbol": 61, "jacobian": [61, 95, 137, 226], "jacobian_determin": 61, "r163": 61, "coordinate_system": 61, "base_oneform": 61, "coord_index": 61, "oneform": 61, "base_scalar": 61, "basescalarfield": 61, "base_vector": [61, 253], "coord_funct": 61, "to_si": 61, "coord": [61, 74, 76, 113, 171, 187], "immutabledensematrix": [61, 90, 91, 92, 93, 228], "rn": 61, "r2_r": 61, "r2_p": 61, "jacobian_matrix": 61, "point_to_coord": 61, "coord_si": [61, 256], "imbu": 61, "difficulti": [61, 124], "arriv": [61, 201, 218, 220, 224, 228, 285], "inappropri": 61, "poin": 61, "unappropri": 61, "fy": [61, 194, 225], "ftheta": 61, "basevectorfield": 61, "point_p": 61, "point_r": 61, "s_field": 61, "dxi": 61, "v1": [61, 72, 95, 120, 140, 183, 184, 187, 228, 247, 253, 256, 257, 258, 259], "v2": [61, 72, 95, 120, 183, 184, 187, 247, 253, 256, 257, 258, 259], "v_1": [61, 203, 226], "v_2": [61, 203], "e_x": [61, 234], "e_i": [61, 195, 218, 234], "e_r": 61, "c_xy": 61, "c_xr": 61, "unfortun": [61, 63, 100, 207, 221], "e_rho": 61, "form_field": 61, "exterior": [61, 75], "dg": 61, "tensorproduct": [61, 170, 172, 229, 230], "multilinear": 61, "wedg": [61, 84], "tp1": 61, "tp": [61, 145, 172, 199], "wedgeproduct": 61, "wp1": 61, "liederiv": 61, "v_field": 61, "transport": 61, "pushforward": 61, "e_theta": 61, "basecovarderivativeop": 61, "christoffel": 61, "metric_to_christoffel_2nd": 61, "ch": [61, 95, 221], "cvd": 61, "covarderivativeop": 61, "intcurve_seri": 61, "vector_field": [61, 260], "start_point": 61, "dt": [61, 67, 127, 140, 182, 183, 185, 191, 192, 204, 224, 285], "f_i": [61, 84, 95, 201, 205], "movement": 61, "intcurve_diffequ": 61, "init_cond": 61, "f_1": [61, 64, 67, 84, 109, 119, 122, 141, 195, 201, 204, 224], "f_0": [61, 64, 119, 201], "vectors_in_basi": 61, "kept": [61, 175, 192, 246, 280], "twoform_to_matrix": 61, "twoform": 61, "e_j": 61, "metric_to_christoffel_1st": 61, "levi": [61, 67, 228, 234], "civita": [61, 67, 234], "metric_to_riemann_compon": 61, "non_trivial_metr": 61, "dtheta": 61, "drho": 61, "metric_to_ricci_compon": 61, "ricci": 61, "fft": [62, 140], "ifft": 62, "ntt": 62, "intt": 62, "fwht": 62, "ifwht": 62, "mobius_transform": 62, "inverse_mobius_transform": 62, "convolution_fft": 62, "convolution_ntt": 62, "convolution_fwht": 62, "convolution_subset": 62, "covering_product": 62, "intersecting_product": 62, "radix": 62, "r164": 62, "coolei": 62, "93tukey_fft_algorithm": 62, "r165": 62, "fastfouriertransform": 62, "r166": 62, "r167": 62, "pz": [62, 107, 234], "643": [62, 99], "767": 62, "387": 62, "415": 62, "384": 62, "353": [62, 95], "r168": 62, "apfloat": 62, "r169": 62, "numbertheoretictransform": 62, "r170": 62, "discrete_fourier_transform_": 62, "r171": 62, "r172": 62, "r173": 62, "wht": 62, "r174": 62, "hadamard_transform": 62, "r175": 62, "fast_walsh": 62, "93hadamard_transform": 62, "r176": 62, "r177": 62, "mobiu": [62, 99], "lattic": [62, 221], "bitmask": 62, "r178": 62, "b6bius_inversion_formula": 62, "r179": 62, "csail": 62, "mit": 62, "rrw": 62, "conv": 62, "r180": 62, "arxiv": [62, 64, 67, 95, 111, 204, 246], "1211": 62, "0189": 62, "r181": 62, "r182": 62, "r183": 62, "888": 62, "444": 62, "1283": 62, "19351": 62, "14219": 62, "15502": 62, "44": [62, 64, 95, 99, 217, 228], "41": [62, 69, 95, 99, 199, 221], "63": [62, 95, 99], "r184": 62, "convolution_theorem": 62, "r185": 62, "333": [62, 99], "555": 62, "222": 62, "666": 62, "15555": 62, "19404": 62, "r186": 62, "r187": 62, "68": [62, 87, 95, 99, 221], "48": [62, 69, 103, 221, 226, 228, 275], "2057": 62, "1870": 62, "r188": 62, "radioeng": 62, "fulltext": 62, "2002": [62, 195, 202, 205], "02_03_40_42": 62, "r189": 62, "r190": 62, "r191": 62, "AND": [62, 89], "327": [62, 224], "r192": 62, "44288293815837": 63, "4429": 63, "4428829381583662470158809900606936986146216893757": 63, "28902548222223624241": 63, "091999668350375232456": 63, "14159265358979": [63, 67, 226], "333333333333333": [63, 198, 220], "1415926535": 63, "7182818284": 63, "100000": [63, 99, 107], "951": 63, "95678796130331164628399634646042209010610577945815": 63, "gmpy": [63, 198, 199, 284], "googl": [63, 193, 194, 227], "100000000000000": 63, "1000000000": 63, "125000000000000000000000000000": 63, "100000000000000005551115123126": 63, "100000000000000000000000000000": 63, "1415": 63, "uncertainti": [63, 178], "003": 63, "31417": 63, "propag": [63, 72, 144, 147], "5000": [63, 102], "50000000000000000000000000000": 63, "varphi": [63, 67, 203, 208, 224], "erron": 63, "34665576869e": 63, "208": [63, 204], "64613129282185e": 63, "60123853010113e": 63, "210": [63, 99, 221], "thousand": [63, 99, 274], "43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875": 63, "binet": 63, "104": 63, "1336": 63, "portion": [63, 75, 90, 95], "meaningless": 63, "012297": 63, "9562288417661": 63, "956": 63, "29128599706266": 63, "2912859970626635404072825905956005414986193682745": 63, "14159265358979323846264338328": 63, "integrand": [63, 67, 83, 84, 86, 218], "struggl": [63, 207], "346": 63, "34635637913639": 63, "dealt": [63, 84], "504067061906928": 63, "50406706190692837199": 63, "wrap_lin": [63, 86, 87, 95, 103, 188, 195, 196, 207, 208, 224], "intgrl": 63, "extrapol": [63, 215], "richardson": [63, 215, 227], "slowli": [63, 215], "64493406684823": 63, "577215664901533": 63, "57721566490153286060651209008240243104215933593992": 63, "10000000": [63, 204], "20000000": [63, 204], "693147255559946": 63, "tune": [63, 87, 188, 208], "worthwhil": 63, "hypergeometr": [63, 64, 77, 83, 84, 202, 219, 220, 224, 226, 228, 265, 285], "ramanujan": [63, 64, 99], "9801": 63, "1103": 63, "26390": 63, "396": [63, 123], "141592653589793238462643383279502884197169399375105820974944592307816406286208": 63, "99862803482534211706798214808651328230664709384460955058223172535940812848111745": 63, "02841027019385211055596446229489549303819644288109756659334461284756482337867831": 63, "355": [63, 99, 202], "113": [63, 99, 221], "33333": [63, 86], "635": 63, "504": [63, 202], "130198866629986772369127970337": 63, "49": [63, 64, 99, 103, 201, 221], "___________": [63, 103, 224], "bell": [64, 157, 210, 246], "k_sym": 64, "binom": [64, 99, 228, 285], "dotsc": [64, 210], "j_1": [64, 152, 153, 170, 193, 210, 229], "j_2": [64, 152, 153, 170, 193, 210], "dotsb": [64, 210], "atop": [64, 67, 210, 218], "2j_2": [64, 210], "3j_2": [64, 210], "j_": [64, 67, 84, 86, 170, 210, 218, 279], "bernoulli": [64, 67, 204, 208, 224, 226, 228], "877": 64, "4140": 64, "21147": 64, "115975": 64, "846749014511809332450147": 64, "luca": [64, 99, 208, 214], "genocchi": [64, 67, 204], "r193": 64, "bell_numb": 64, "r194": 64, "bellnumb": 64, "r195": 64, "bellpolynomi": 64, "hurwitz": [64, 67], "6k": 64, "appel": [64, 67], "confer": [64, 100, 283], "r200": 64, "66": [64, 90, 95, 204, 208], "1000001": 64, "andr": [64, 204], "appellseq": [64, 204], "bernoulli_poli": [64, 204], "r196": 64, "bernoulli_numb": 64, "r197": 64, "bernoulli_polynomi": [64, 204], "r198": 64, "bernoullinumb": 64, "r199": 64, "bernoullipolynomi": 64, "luschni": [64, 67, 204], "manifesto": 64, "r201": 64, "2009": [64, 67, 99, 193, 204], "06743": [64, 67, 204], "_k": [64, 67, 86, 193, 203, 228], "6435": 64, "pascal": [64, 99], "4th": [64, 65, 81, 95, 99, 140], "195": 64, "r202": 64, "johndcook": 64, "binomial_coeffici": [64, 99], "c_n": [64, 67, 88, 204, 224], "429": [64, 208], "1430": 64, "4862": 64, "39764993382373624267": 64, "020884341620842555705": 64, "r203": 64, "catalan_numb": 64, "r204": 64, "catalannumb": [64, 208], "r205": 64, "r206": 64, "geomet": [64, 195], "mathcircl": 64, "2j": [64, 201, 228], "1385": [64, 204], "272": [64, 204], "7936": [64, 204], "2702765": 64, "4096": 64, "euler_poli": [64, 204], "r207": 64, "euler_numb": 64, "r208": 64, "eulernumb": 64, "r209": 64, "alternating_permut": 64, "r210": 64, "alternatingpermut": 64, "swing": 64, "factorial2": [64, 174, 208], "fallingfactori": [64, 208], "subfactori": [64, 208, 246], "derang": [64, 246], "r212": 64, "generate_derang": [64, 246], "r211": 64, "r213": 64, "double_factori": 64, "texttt": [64, 216], "r214": 64, "r215": 64, "paul": [64, 243], "235": 64, "268": 64, "1995": [64, 202, 220, 226], "f_z": [64, 189, 260], "f_2": [64, 84, 109, 119, 122, 141, 201, 218, 224], "r217": 64, "fibonacci_numb": 64, "r218": 64, "fibonaccinumb": 64, "t_0": [64, 221], "149": [64, 99], "r219": 64, "r220": 64, "tribonaccinumb": 64, "r221": 64, "oei": [64, 67, 99, 204], "a000073": 64, "137": [64, 95, 111], "205": [64, 84, 218], "5269": 64, "761": 64, "280": 64, "83711": 64, "27720": 64, "30247": 64, "9900": 64, "983697455232980674869851942390639915940": 64, "r222": 64, "harmonic_numb": 64, "r223": 64, "harmonicnumb": [64, 208], "r224": 64, "harmonicnumber2": 64, "l_0": [64, 110, 234, 235], "47": [64, 67, 95, 99, 111, 146, 178, 207], "76": [64, 67, 95, 99, 201, 204], "r225": 64, "lucas_numb": 64, "r226": 64, "lucasnumb": 64, "2t": 64, "genocchi_poli": [64, 204], "r227": 64, "genocchi_numb": 64, "r228": 64, "genocchinumb": 64, "r229": 64, "mathcal": [64, 65, 84, 109, 138, 170, 193, 204, 216], "a000111": [64, 204], "zigzag": 64, "li": [64, 67, 75, 86, 99, 173, 208, 263], "50521": [64, 204], "691": 64, "2730": 64, "andre_poli": [64, 204], "r230": 64, "r231": 64, "eulerzigzagnumb": 64, "r232": 64, "irrelev": 64, "r233": 64, "number_theori": 64, "r234": 64, "pentagonal_number_theorem": 64, "multifactori": 64, "pochhamm": [64, 208, 220], "r235": 64, "r236": 64, "pochhammer_symbol": 64, "274": 64, "225": [64, 99, 202], "511": 64, "9330": 64, "34105": 64, "42525": 64, "22827": 64, "5880": 64, "750": 64, "r237": 64, "stirling_numbers_of_the_first_kind": 64, "r238": 64, "stirling_numbers_of_the_second_kind": 64, "multiset": [64, 84, 243, 246], "nc": 64, "nt": [64, 246], "babi": [64, 99, 246], "aa": [64, 193], "bb": [64, 193, 220, 246], "multiset_combin": [64, 246], "aab": [64, 246], "aabc": 64, "aaaabbbbcccc": 64, "m_1": [64, 109, 152, 170, 193, 221], "m_2": [64, 122, 141, 152, 170, 193], "m_k": 64, "r239": 64, "r240": 64, "tinyurl": 64, "cep849r": 64, "ba": [64, 246], "multiset_permut": [64, 246], "r241": 64, "aabbc": 64, "mississippi": [64, 246], "609": 64, "1521": 64, "1768": 64, "1224": [64, 99], "579": 64, "197": 64, "r242": 64, "undergradu": 64, "csse": 64, "uwa": 64, "au": 64, "cits7209": 64, "707106781186548": 65, "tangent": [65, 69, 71, 75, 86, 205, 224], "643501108793284": 65, "r243": 65, "ib": [65, 128], "complex_conjug": 65, "polar_lift": [65, 67, 220], "periodic_argu": 65, "principal_branch": [65, 84], "r247": 65, "csc": [65, 101, 208, 217], "sec": [65, 86, 107, 203, 208, 217, 285], "acsc": [65, 208], "asec": [65, 208], "acot": [65, 208], "r244": 65, "trigonometric_funct": 65, "r245": 65, "r246": 65, "elementaryfunct": 65, "trigonometryangl": 65, "r248": 65, "r249": 65, "r250": 65, "r251": 65, "r252": 65, "r253": 65, "cotang": [65, 205], "r254": 65, "r255": 65, "r256": 65, "secant": [65, 204], "r257": 65, "r258": 65, "r259": 65, "cosec": 65, "r260": 65, "r261": 65, "r262": 65, "unnorm": [65, 67], "qquad": [65, 178, 201], "jn": [65, 67, 170, 204, 208, 279], "spheric": [65, 111, 117, 152, 193, 194, 204, 253, 257, 258, 279], "r263": 65, "sinc_funct": 65, "asinh": [65, 208], "r264": 65, "inverse_trigonometric_funct": 65, "r265": 65, "r266": 65, "r267": 65, "r268": 65, "r269": 65, "r270": 65, "r271": 65, "r272": 65, "arctan": [65, 205, 208], "acoth": [65, 208], "r273": 65, "r274": 65, "arccot": [65, 208], "r278": 65, "r275": 65, "r276": 65, "r277": 65, "arcsec": [65, 208], "r279": 65, "r280": 65, "r281": 65, "arccsc": [65, 208], "quadrant": [65, 199, 227], "clock": [65, 217], "reurn": 65, "r282": 65, "r283": 65, "r284": 65, "arctan2": [65, 208], "hyperbolicfunct": 65, "coth": [65, 208, 220], "acosh": [65, 208], "atanh": [65, 205, 208, 218], "sech": [65, 208], "csch": [65, 208], "asech": [65, 208], "r285": 65, "hyperbolic_funct": 65, "r286": 65, "r287": 65, "arcsech": [65, 208], "acsch": [65, 208], "r288": 65, "r289": 65, "r290": 65, "arccsch": [65, 208], "567": 65, "r291": 65, "r292": 65, "ceilingfunct": 65, "r293": 65, "r294": 65, "floorfunct": 65, "roundfunct": 65, "r295": 65, "lfloor": [65, 199, 227, 228], "rfloor": [65, 199, 227, 228], "fractional_part": 65, "r296": 65, "fractionalpart": 65, "lambertw": [65, 205, 208, 226, 227, 286], "r297": 65, "w_k": 65, "635564016364870": 65, "34747534407696": 65, "41624341514535": 65, "lambert_w_funct": 65, "exprcondpair": 65, "cond": [65, 84, 86, 216], "piecewise_fold": 65, "folded_cond": 65, "ITE": [65, 89, 208], "piecewise_exclus": 65, "_eval_integr": [65, 86], "piecewise_integr": 65, "as_expr_set_pair": 65, "skip_nan": 65, "mutual": [65, 84, 192], "conjunct": [65, 89, 194, 218, 239, 285], "identityfunct": 65, "supremum": [65, 216], "r298": 65, "directed_complete_partial_ord": 65, "r299": 65, "lattice_": 65, "28order": 65, "global_paramet": 65, "rootof": [65, 204], "real_root": [65, 204, 226], "rootoftool": [65, 95, 204], "r300": 65, "square_root": 65, "r301": 65, "r302": 65, "root_of_un": 65, "r303": 65, "principal_valu": [65, 86], "r304": 65, "cuberoot": 65, "powdenest": [65, 220], "misc": [65, 90, 249], "r305": 65, "r306": 65, "r307": 65, "cube_root": 65, "r308": 65, "delta_funct": [67, 86], "int_": [67, 83, 84, 86, 204, 211, 275, 279], "sum_i": [67, 215], "is_simpl": 67, "tensor_funct": 67, "kroneckerdelta": [67, 92, 173, 208, 220], "r309": 67, "deltafunct": [67, 86], "h0": 67, "electron": [67, 111, 217], "signal": [67, 89, 99, 107, 109, 140, 201, 280], "improp": [67, 86], "convolut": [67, 210], "r310": 67, "heavisidestepfunct": 67, "r311": 67, "iv": [67, 205], "105": [67, 99, 204, 221], "parg": 67, "singularity_funct": 67, "singularityfunct": [67, 86, 102], "macaulai": 67, "heavisidediracdelta": 67, "r312": 67, "r313": 67, "r314": 67, "r315": 67, "r316": 67, "setminu": [67, 84], "17805383034794561964694160130": 67, "65092319930185633889": 67, "8724366472624298171": 67, "r317": 67, "r318": 67, "r319": 67, "loggammafunct": 67, "r320": 67, "espinosa": 67, "moll": 67, "r325": 67, "19093197": 67, "5173168": 67, "ni": [67, 99], "r321": 67, "polygamma_funct": 67, "r322": 67, "polygammafunct": 67, "r323": 67, "r324": 67, "polygamma2": 67, "2004": [67, 202, 221], "115": 67, "r326": 67, "digamma_funct": 67, "r327": 67, "digammafunct": 67, "r328": 67, "r329": 67, "trigamma_funct": 67, "r330": 67, "trigammafunct": 67, "r331": 67, "int_x": 67, "_1f_1": 67, "confluent": [67, 218], "xt": 67, "expint": [67, 208], "r332": 67, "incomplete_gamma_funct": 67, "upper_incomplete_gamma_funct": 67, "r333": 67, "r334": 67, "r335": 67, "gamma2": 67, "r336": 67, "gamma3": 67, "r337": 67, "exponential_integr": 67, "relation_with_other_funct": 67, "int_0": [67, 84, 86, 275, 285], "r338": 67, "lower_incomplete_gamma_funct": 67, "r339": 67, "r340": 67, "r341": 67, "r342": 67, "multigamma": 67, "gamma_p": 67, "r343": 67, "multivariate_gamma_funct": 67, "beta_funct": 67, "eulerian": 67, "02671848900111377452242355235388489324562": 67, "2112723729365330143": 67, "7655283165378005676": 67, "r344": 67, "r345": 67, "betafunct": 67, "r346": 67, "error_funct": 67, "999999984582742099719981147840": 67, "1296959": 67, "73071763923152794095062": 67, "r347": 67, "r348": 67, "r349": 67, "r350": 67, "0000000154172579002800188521596734869": 67, "r351": 67, "r352": 67, "r353": 67, "r354": 67, "5648024145755525987042919132": 67, "995322265018952734162069256367": 67, "r355": 67, "r356": 67, "r357": 67, "r358": 67, "179143454621291692285822705344": 67, "r359": 67, "inverse_funct": 67, "r360": 67, "inverseerf": [67, 208], "r361": 67, "r362": 67, "inverseerfc": [67, 208], "r363": 67, "inverseerf2": 67, "fresnelintegr": 67, "343415678363698242195300815958": 67, "fresnelc": [67, 208, 218], "r364": 67, "fresnel_integr": 67, "r365": 67, "r366": 67, "r367": 67, "r368": 67, "wrench": 67, "jr": 67, "vicki": 67, "allei": 67, "488253406075340754500223503357": 67, "r369": 67, "r370": 67, "r371": 67, "r372": 67, "r373": 67, "background": [67, 87, 188, 191, 283], "cauchi": [67, 84, 86, 199, 224, 228], "219383934395520": 67, "21938393439552": 67, "shi": [67, 84, 208, 218], "e1": [67, 69, 76, 123, 198, 203, 215, 224, 227], "hyperbol": [67, 205, 227, 281, 285], "r374": 67, "r375": 67, "r376": 67, "sfu": [67, 86], "cbm": [67, 86], "aand": [67, 86], "page_228": 67, "int_1": [67, 84], "zt": [67, 84], "unbranch": [67, 84], "meijerg": [67, 78, 84, 86, 208, 228, 285], "postiv": 67, "r377": 67, "r378": 67, "expintegral": [67, 208], "r379": 67, "04516378011749278484458888919": 67, "0652795784357498247001125598": 67, "08346052231061726610939702133": 67, "soldner": 67, "45136923488338": 67, "r380": 67, "logarithmic_integr": 67, "r381": 67, "logarithmicintegr": 67, "r382": 67, "r383": 67, "soldnersconst": 67, "92242131492155809316615998938": 67, "r384": 67, "r385": 67, "r386": 67, "r387": 67, "trigonometric_integr": 67, "_1": [67, 95, 117, 183, 193, 218, 247], "somewhat": [67, 86, 123, 199], "r388": 67, "r389": 67, "r390": 67, "laurent": [67, 199, 205, 224], "j_n": [67, 170], "r391": 67, "r392": 67, "r393": 67, "r394": 67, "yn": [67, 208, 214], "r395": 67, "i_": [67, 84, 218, 228, 229], "iz": 67, "r396": 67, "k_": [67, 84, 118, 135, 136], "r397": 67, "hankel1": [67, 208], "hankel": [67, 86], "iy_": 67, "hankel2": [67, 208], "r398": 67, "hankelh1": [67, 208], "r399": 67, "hankelh2": [67, 208], "orthopoli": [67, 204], "spherical_bessel_fn": [67, 204], "3j": [67, 152, 193], "099419756723640344491": 67, "054525080242173562897": 67, "r400": 67, "y_n": [67, 221], "18525034196069722536": 67, "014895573969924817587": 67, "r401": 67, "jn_zero": 67, "besseljzero": 67, "sph_jn": 67, "7635": 67, "095": 67, "323": [67, 99], "515": 67, "marcumq": 67, "marcum": 67, "q_m": 67, "r402": 67, "marcum_q": 67, "r403": 67, "airybas": 67, "airyai": [67, 208, 224], "ai": [67, 99, 204, 221, 249, 285], "airyaiprim": [67, 208], "22740742820168557599192443603787379946077222541710": 67, "airybi": [67, 208, 224], "airybiprim": [67, 208], "r404": 67, "airy_funct": 67, "r405": 67, "r406": 67, "encyclopediaofmath": 67, "r407": 67, "airyfunct": 67, "41230258795639848808323405461146104203453483447240": 67, "r408": 67, "r409": 67, "r410": 67, "r411": 67, "61825902074169104140626429133247528291577794512415": 67, "r412": 67, "r413": 67, "r414": 67, "r415": 67, "27879516692116952268509756941098324140300059345163": 67, "r416": 67, "r417": 67, "r418": 67, "r419": 67, "bspline": 67, "bspline_basi": 67, "knot": 67, "cubic": [67, 195, 204, 221, 226], "bspline_basis_set": 67, "r420": 67, "interpolating_splin": 67, "131": [67, 183], "39": [67, 99, 207], "interpolating_poli": [67, 204], "zeta_funct": 67, "admit": [67, 224], "lerch": 67, "transcend": 67, "lerchphi": [67, 208], "dirichlet_eta": [67, 208], "20205690315959": 67, "polylog": [67, 208], "r421": 67, "r422": 67, "hurwitz_zeta_funct": 67, "r423": 67, "dirichlet_eta_funct": 67, "r424": 67, "polylogarithm": 67, "sheet": [67, 217], "phi_0": 67, "ze": 67, "r425": 67, "bateman": 67, "erdelyi": 67, "1953": [67, 203], "york": [67, 84, 139, 218, 226], "mcgraw": [67, 118, 139, 183, 190, 253], "r426": 67, "r427": 67, "lerch_transcend": 67, "stieltj": [67, 208], "gamma_": [67, 110, 112], "r428": 67, "stieltjes_const": 67, "ap": [67, 71, 218], "bq": [67, 196, 197, 218], "a_p": [67, 84, 218, 285], "b_q": [67, 84, 218, 285], "_pf_q": [67, 218, 224, 285], "unicod": [67, 87, 95, 188, 208, 239, 279], "r429": 67, "r430": 67, "generalized_hypergeometric_funct": 67, "convergence_stat": 67, "radius_of_converg": 67, "radiu": [67, 69, 73, 75, 130, 132, 142, 146, 194, 227, 228, 263], "meijer": [67, 77, 85, 86, 265, 275, 285], "mellin": [67, 86], "barn": 67, "b_m": [67, 84, 226], "confusingli": 67, "int_l": [67, 84, 218], "contour": [67, 69, 84, 194, 218], "__1": 67, "subvector": 67, "aother": 67, "bm": 67, "bother": [67, 280], "slater": [67, 218], "allow_hyp": [67, 220], "subsum": 67, "r431": 67, "r432": 67, "meijer_g": 67, "get_period": [67, 84], "appellf1": [67, 208], "0063339426292673": 67, "172870711": 67, "659936": 67, "15605338197184": 67, "r433": 67, "appell_seri": 67, "r434": 67, "hypergeometricfunct": 67, "elliptic_integr": 67, "elliptic_k": [67, 208], "tfrac": [67, 224, 228], "eccentr": [67, 69], "50923695405127": 67, "625146415202697": 67, "elliptic_f": [67, 208], "r435": 67, "r436": 67, "ellipticintegr": 67, "elliptick": [67, 208], "909449841483": 67, "74720545502474": 67, "r437": 67, "r438": 67, "ellipticf": 67, "elliptic_": [67, 69, 208], "55203744279187": 67, "290764986058437": 67, "991052601328069": 67, "81879421395609": 67, "r439": 67, "r440": 67, "elliptice2": 67, "r441": 67, "elliptic": [67, 208], "elliptic_pi": [67, 208], "50232379629182": 67, "760939574180767": 67, "29136443417283": 67, "32555634906645": 67, "r442": 67, "r443": 67, "ellipticpi3": 67, "r444": 67, "ellipticpi": [67, 208], "mathieu_funct": 67, "mathieubas": 67, "mathieusprim": [67, 208], "mathieuc": [67, 208], "mathieucprim": [67, 208], "r445": 67, "r446": 67, "r447": 67, "r448": 67, "mathieuandspheroidalfunct": 67, "r449": 67, "r450": 67, "r451": 67, "r452": 67, "r453": 67, "r454": 67, "r455": 67, "r456": 67, "r457": 67, "r458": 67, "r459": 67, "r460": 67, "chebyshevu": [67, 208], "chebyshevt_root": 67, "chebyshevu_root": 67, "assoc_legendr": [67, 208], "hermite_prob": 67, "jacobi_poli": [67, 204], "gegenbauer_poli": [67, 204], "chebyshevt_poli": [67, 204], "chebyshevu_poli": [67, 204], "hermite_poli": [67, 204], "legendre_poli": [67, 204], "laguerre_poli": [67, 204], "r461": 67, "jacobi_polynomi": 67, "r462": 67, "jacobipolynomi": 67, "r463": 67, "jacobip": [67, 208], "jacobi_norm": 67, "normilz": 67, "p_m": 67, "delta_": [67, 170, 178, 193], "r464": 67, "r465": 67, "r466": 67, "hermite_prob_poli": [67, 204], "r467": 67, "gegenbauer_polynomi": 67, "r468": 67, "gegenbauerpolynomi": 67, "r469": 67, "gegenbauerc3": 67, "r470": 67, "chebyshev_polynomi": 67, "r471": 67, "chebyshevpolynomialofthefirstkind": 67, "r472": 67, "chebyshevpolynomialofthesecondkind": 67, "r473": 67, "r474": 67, "u_n": [67, 86, 201, 203, 204], "r475": 67, "r476": 67, "r477": 67, "r478": 67, "r479": 67, "chebyshev_root": 67, "r480": 67, "legendre_polynomi": 67, "r481": 67, "legendrepolynomi": 67, "r482": 67, "legendrep": [67, 208], "r483": 67, "legendrep2": 67, "r484": 67, "associated_legendre_polynomi": 67, "r485": 67, "r486": 67, "r487": 67, "r488": 67, "hermite_polynomi": 67, "r489": 67, "hermitepolynomi": 67, "r490": 67, "hermiteh": [67, 208], "probabilist": [67, 204, 228], "he_n": [67, 204], "telephon": 67, "a000085": 67, "232": 67, "764": 67, "2620": 67, "9496": 67, "r491": 67, "r492": 67, "l_n": [67, 86, 204], "r493": 67, "laguerre_polynomi": 67, "r494": 67, "laguerrepolynomi": 67, "r495": 67, "laguerrel": [67, 208], "r496": 67, "laguerrel3": 67, "r497": 67, "generalized_laguerre_polynomi": 67, "r498": 67, "associatedlaguerrepolynomi": 67, "r499": 67, "r500": 67, "spherical_harmon": 67, "ynm": [67, 193], "ynm_c": 67, "znm": 67, "r501": 67, "r502": 67, "sphericalharmon": 67, "r503": 67, "sphericalharmonici": 67, "r504": 67, "r505": 67, "r506": 67, "r507": 67, "z_n": [67, 202], "r508": 67, "r509": 67, "r510": 67, "eijk": 67, "levicivita": [67, 95], "eval_levicivita": 67, "pseudotensor": 67, "delta_rang": [67, 173], "kroneck": [67, 172, 173, 193, 229, 234], "r511": 67, "kronecker_delta": [67, 173], "indices_contain_equal_inform": [67, 173], "fermi": [67, 173], "above_fermi": [67, 173], "below_fermi": [67, 173], "is_above_fermi": [67, 173], "is_below_fermi": [67, 173], "is_only_below_fermi": [67, 173], "is_only_above_fermi": [67, 173], "killable_index": [67, 173], "preferred_index": [67, 173], "point2d": [68, 69, 70, 71, 72, 74, 75, 76], "arbitrary_point": [68, 69, 70, 71, 72, 73, 75], "polyfunc": [68, 204], "ambient_dimens": [68, 70, 72, 74], "plot_interv": [68, 69, 72, 75], "lower_bound": [68, 69, 72, 75], "upper_bound": [68, 69, 72, 75], "counterclockwis": [68, 69, 70, 74, 102, 103], "geometryent": [68, 69, 70, 72, 74, 75, 76], "hradiu": 69, "vradiu": 69, "ellipt": [69, 99, 195], "geometryerror": [69, 72, 75, 76], "radii": 69, "foci": 69, "periapsi": 69, "apoapsi": 69, "focus_dist": 69, "shortest": [69, 72, 75, 191, 214, 220, 224, 246], "auxiliary_circl": 69, "xmin": [69, 70, 72, 74, 75, 194], "ymin": [69, 70, 72, 74, 75, 194], "xmax": [69, 70, 72, 74, 75, 194], "ymax": [69, 70, 72, 74, 75, 194], "rectangl": [69, 70, 72, 74, 75, 194, 204], "director_circl": 69, "perpendicular": [69, 72, 73, 75, 88, 117, 131, 146, 192], "director": 69, "130": 69, "r512": 69, "encloses_point": [69, 70, 75], "border": [69, 75], "_slope": 69, "slope": [69, 70, 72, 75, 102, 103, 107, 117], "eq1": [69, 224, 226, 227], "eq2": [69, 89, 224, 227], "r513": 69, "108270": 69, "r514": 69, "equation_of_a_shifted_ellips": 69, "evolut": 69, "focal": [69, 142, 146], "100500": 69, "363": [69, 99, 202], "175": [69, 95, 201, 202], "is_tang": [69, 71], "tangent_lin": 69, "normal_lin": 69, "line2d": [69, 72, 75], "quartic": [69, 204, 226], "2020": [69, 152], "polar_second_moment_of_area": [69, 75], "moment": [69, 75, 102, 103, 125, 133, 136, 182, 194, 204, 221, 228], "constitu": [69, 75, 120, 183, 214, 253], "planar": [69, 75, 103, 117, 146], "resist": [69, 75, 102, 103, 217], "deflect": [69, 75, 102, 103], "bend": [69, 75, 102, 104, 270], "r515": 69, "polar_moment_of_inertia": [69, 75], "random_point": [69, 72, 73], "arb": 69, "364": 69, "notimpl": [69, 203], "second_moment_of_area": [69, 75], "centroid": [69, 75, 76, 102], "i_xx": [69, 75], "i_yi": [69, 75], "i_xi": [69, 75], "ellis": 69, "r516": 69, "list_of_second_moments_of_area": 69, "section_modulu": [69, 75], "sympify": [69, 75, 102, 105, 114, 120, 144, 147, 185], "farthest": [69, 75], "s_x": [69, 75], "s_y": [69, 75], "r517": 69, "semilatus_rectum": 69, "semi": [69, 72, 99], "latu": 69, "rectum": 69, "chord": 69, "conic": [69, 221, 253], "directrix": 69, "r518": 69, "semilatusrectum": 69, "r519": 69, "latus_rectum": 69, "collinear": [69, 71, 73, 74, 75, 194], "gx": 69, "hy": 69, "synonym": [69, 203], "p4": [69, 72, 74, 75, 194], "boundari": [70, 72, 102, 103, 187, 205, 216, 224, 228], "t2": [70, 75, 76, 99, 114, 120, 221, 228, 234], "ordering_of_class": 70, "is_similar": [70, 72, 75, 76], "uniform": [70, 194, 226, 228], "enlarg": 70, "shrink": [70, 84], "parameter_valu": [70, 73], "pent": 70, "rpent": 70, "rcirc": 70, "entity1": 71, "entity2": 71, "zp": 71, "is_collinear": [71, 74], "segment2d": [71, 72, 75, 76], "wikipappu": 71, "bc": [71, 105, 246, 249, 259], "subs_point": 71, "p11": 71, "p12": 71, "p13": 71, "p21": 71, "p22": 71, "p23": 71, "ll1": 71, "ll2": 71, "ll3": 71, "ll4": 71, "ll5": 71, "ll6": 71, "pp1": 71, "pp2": 71, "pp3": 71, "encyclopedia": [71, 190], "apr": 71, "s_hexagon_theorem": 71, "clockwis": [71, 86, 90, 102, 103, 105], "overlap": [71, 76, 98, 195, 216, 249], "infanc": 71, "geometryresult": 71, "fair": [71, 228], "angle_between": [72, 73, 75, 183], "reflex": 72, "eman": 72, "readili": [72, 95], "sw": 72, "obtus": 72, "smallest_angle_between": 72, "line3d": [72, 73, 74], "is_perpendicular": [72, 73, 74, 75], "ray2d": [72, 75], "closing_angl": 72, "are_concurr": [72, 73], "concurr": [72, 73, 205], "l3": [72, 126, 201], "l4": [72, 126], "bisector": [72, 75], "p5": [72, 74, 75, 194], "p6": [72, 75, 194], "p7": [72, 75, 194], "segment3d": [72, 73], "direction_ratio": [72, 74], "is_parallel": [72, 73], "parallel_lin": 72, "perpendicular_lin": [72, 73], "perpendicular_seg": 72, "enpoint": 72, "reform": 72, "92": [72, 202, 224, 228], "ccw": [72, 75], "ray3d": [72, 73, 146], "xdirect": 72, "ydirect": 72, "midpoint": [72, 74, 75, 86, 194, 259], "170": [72, 228], "341": 72, "perpendicular_bisector": 72, "linearentity2d": 72, "linearentity3d": [72, 73], "direction_cosin": [72, 74], "zdirect": 72, "normal_vector": [73, 146], "proce": [73, 137, 201, 203, 218, 226], "147": 73, "321": 73, "is_coplanar": 73, "perpendicualar": 73, "parallel_plan": 73, "on_circl": 73, "off_circl": 73, "perpendicular_plan": 73, "pt1": 73, "projection_lin": 73, "on_morph": 74, "affine_rank": 74, "are_coplanar": 74, "canberra_dist": 74, "canberra": 74, "geometricent": 74, "taxicab_dist": 74, "is_concycl": 74, "concycl": 74, "fewer": [74, 75, 137, 228, 275], "is_scalar_multipl": 74, "ambient": 74, "orthogonal_direct": 74, "taxicab": 74, "_nocheck": 74, "are_collinear": 74, "travers": [75, 99, 115, 204, 217, 233, 243, 280], "unrot": 75, "circumscrib": 75, "spin": [75, 111, 125, 159, 160, 168, 270], "perimet": 75, "contact": [75, 125, 129, 130, 131, 132, 191, 232], "38": [75, 95, 99, 208, 221, 223, 228], "cut_sect": 75, "upper_polygon": 75, "lower_polygon": 75, "upper_seg": 75, "lower_seg": 75, "r520": 75, "r521": 75, "paulbourk": 75, "polygonmesh": 75, "insidepoli": 75, "first_moment_of_area": 75, "q_x": [75, 191], "q_y": [75, 191], "625": [75, 263], "3125": [75, 228], "525": 75, "3000": [75, 102], "r522": 75, "skyciv": 75, "beam": [75, 105, 142, 145, 270], "bmd": 75, "r523": 75, "mechanicalc": 75, "poly1": 75, "poly2": 75, "interior": [75, 204, 216], "180": [75, 192, 202], "r524": 75, "r525": 75, "r526": 75, "apothem": 75, "interior_angl": 75, "exterior_angl": 75, "circumcircl": 75, "incircl": 75, "inradiu": 75, "inscrib": 75, "circumcent": 75, "circumradiu": 75, "leg": 75, "square_in_unit_circl": 75, "kite": 75, "asa": 75, "sa": [75, 204], "sss": 75, "altitud": 75, "orthocent": 75, "exradii": 75, "median": [75, 228], "medial": 75, "nine_point_circl": 75, "straight": [75, 81, 107, 127, 191, 224], "eulerlin": 75, "equilater": 75, "coincid": [75, 95, 98, 117, 123, 195, 253, 258, 277], "excent": 75, "excircl": 75, "touch": [75, 125, 217], "r527": 75, "ly": [75, 95, 199], "exradiu": 75, "r528": 75, "r529": 75, "incent": 75, "is_equilater": 75, "is_isoscel": 75, "is_right": 75, "is_scalen": 75, "nine": [75, 208], "feet": 75, "real_num": 76, "hull": 76, "r530": 76, "graham_scan": 76, "r531": 76, "andrew": 76, "1979": [76, 178], "geomalgorithm": 76, "a10": 76, "_hull": 76, "t3": [76, 221], "averag": [76, 86, 99, 201, 228], "qq": [77, 78, 80, 81, 82, 86, 195, 196, 197, 198, 201, 203, 204, 205], "p_r": 77, "holonomic_funct": 77, "from_hyp": [78, 81], "holonomicfunct": [78, 81, 82], "from_meijerg": [78, 81], "initcond": [78, 80, 81], "expr_to_holonom": [78, 81, 82, 83], "lenic": [78, 80], "ground": [78, 117, 125, 129, 130, 131, 132, 195, 198, 199, 201, 203, 204, 226, 284], "meijerint": [78, 80, 84, 86], "_rewrite1": [78, 84], "_convert_poly_rat_alg": [78, 80], "_create_t": [78, 80], "_create_lookup_t": [80, 84], "differentialoper": [81, 82, 162], "old_poly_r": [81, 82, 195, 198, 199], "to_expr": [81, 82, 83, 109], "to_sequ": 81, "n_0": [81, 201, 226, 227], "indici": [81, 82, 83, 224], "c_j": [81, 84, 218], "holonomicsequ": 81, "r532": 81, "hal": 81, "inria": [81, 86], "fr": [81, 86, 99, 118, 123, 125, 127, 130, 131, 135, 137, 140, 228], "00070025": 81, "r533": 81, "risc": [81, 224, 253], "jku": [81, 224, 253], "risc_2244": 81, "diplform": 81, "_recur": 81, "rk4": 81, "71828182845905": 81, "10517083333333": 81, "22140257085069": 81, "34985849706254": 81, "49182424008069": 81, "64872063859684": 81, "82211796209193": 81, "01375162659678": 81, "22553956329232": 81, "45960141378007": 81, "71827974413517": 81, "331": 81, "4641": 81, "61051": 81, "771561": 81, "9487171": 81, "14358881": 81, "357947691": 81, "5937424601": 81, "to_hyp": 81, "as_list": [81, 204], "to_meijerg": 81, "1_0": 82, "1_1": 82, "0_0": 82, "0_1": 82, "pyplot": [82, 140], "plt": [82, 140], "list_of_poli": 82, "weyl": [82, 88], "differentialoperatoralgebra": 82, "Ore": 82, "dxa": 82, "endomorph": [82, 203], "frobeniu": [83, 95, 99, 201, 202], "subtleti": 84, "recast": [84, 220, 226, 227], "branchpoint": 84, "crude": [84, 125, 194], "decre": 84, "biholomorph": 84, "topologi": [84, 216], "neighbourhood": 84, "evid": [84, 118, 131, 218], "peculiar": [84, 192], "_split_mul": 84, "_mytyp": 84, "inequival": 84, "_mul_as_two_part": 84, "bx": [84, 228, 234], "twist": 84, "recognis": [84, 198, 218, 220], "anywai": [84, 220, 224], "analyitc": 84, "_rewrite_singl": 84, "_rewrite2": 84, "_rewrite_saxena_1": 84, "_rewrite_saxena": 84, "blogpost": 84, "remedi": 84, "exploit": [84, 240], "transpar": [84, 87, 188], "nessgrh": 84, "wordpress": [84, 221], "07": 84, "stade": 84, "c_u": 84, "d_1": [84, 178, 204, 228], "d_v": 84, "amalgam": 84, "prudnikov1990": [84, 218], "luke1969": [84, 218], "c_3": [84, 224], "c_4": 84, "visibl": [84, 194], "fulfil": [84, 193], "vee": [84, 89], "lceil": 84, "rceil": 84, "d_j": [84, 178, 218], "lambda_c": [84, 136], "lambda_": 84, "z_0": [84, 220], "z_1": 84, "a_i": [84, 178, 183, 192, 196, 201, 218], "c_5": 84, "c_6": 84, "c_7": 84, "c_8": 84, "lvert": 84, "rvert": 84, "c_9": 84, "versatil": 84, "bz": [84, 221, 234], "deform": [84, 103], "encircl": 84, "appeal": 84, "fox": 84, "obstacl": 84, "identif": [84, 227], "domin": [84, 90, 213, 215], "iT": 84, "omega_": 84, "disguis": 84, "meijerint_indefinit": 84, "meijerint_definit": 84, "meijerint_invers": 84, "kelli": [84, 218], "roach": [84, 218], "211": [84, 99, 204, 218, 224], "prudnikov": [84, 218], "yu": [84, 193, 218], "brychkov": [84, 218], "marichev": [84, 218], "gordon": [84, 152, 218], "breach": [84, 218], "_coeffexpvalueerror": 84, "_get_coeff_exp": 84, "_check_anteced": 84, "_check_antecedents_1": 84, "mt": 84, "_check_antecedents_invers": 84, "anteced": [84, 215], "_condsimp": 84, "hoc": 84, "simp": [84, 125, 183], "_dummi": 84, "_dummy_": 84, "_eval_cond": 84, "_expon": 84, "_find_splitting_point": 84, "fsp": 84, "_flip_g": 84, "_function": 84, "_guess_expans": 84, "sensibl": [84, 86], "_inflate_fox_h": 84, "_inflate_g": 84, "_int0oo": 84, "_int0oo_1": 84, "_int_invers": 84, "_is_analyt": 84, "_meijerint_definite_2": 84, "trigexpand": 84, "_meijerint_definite_3": 84, "_meijerint_definite_4": 84, "only_doubl": 84, "_meijerint_indefinite_1": 84, "_mul_arg": 84, "_my_principal_branch": 84, "full_pb": 84, "nearer": 84, "superflu": 84, "opaqu": [84, 208], "fac": 84, "_rewrite_invers": 84, "costli": [84, 127, 281], "tx": [84, 283], "happili": [86, 232], "nonelementari": 86, "mellin_transform": 86, "bilater": 86, "laplac": [86, 106, 107, 109, 228], "mellintransform": 86, "integraltransform": 86, "nocond": 86, "inverse_mellin_transform": 86, "laplace_transform": [86, 109], "fourier_transform": 86, "hankel_transform": 86, "inverse_hankel_transform": 86, "suitabl": [86, 92, 101, 193, 196, 198, 201, 203, 208, 218, 221, 224, 227, 229, 278], "inversemellintransform": 86, "attemp": 86, "laplacetransform": 86, "inverse_laplace_transform": 86, "singularit": [86, 137], "inverselaplacetransform": 86, "_fast_inverse_laplac": 86, "rootsum": [86, 204, 210], "fouriertransform": 86, "_fourier_transform": 86, "inverse_fourier_transform": 86, "sine_transform": 86, "inverse_sine_transform": 86, "cosine_transform": 86, "inverse_cosine_transform": 86, "bixk": 86, "inversefouriertransform": 86, "sinetransform": 86, "inversesinetransform": 86, "cosinetransform": 86, "inversecosinetransform": 86, "hankeltransform": 86, "ht": 86, "inversehankeltransform": 86, "_compute_transform": 86, "_as_integr": 86, "integraltransformerror": 86, "_name": 86, "_collapse_extra": 86, "needev": 86, "function_vari": 86, "transform_vari": 86, "lazard": [86, 201, 204], "rioboo": 86, "trager": 86, "horowitz": 86, "ostrogradski": 86, "ratint": 86, "rationaltool": [86, 204], "ratint_logpart": 86, "ratint_ratpart": 86, "r534": 86, "bronstein": [86, 202, 204, 210, 226], "verlag": [86, 202], "deg": [86, 107, 123, 196, 201, 203, 204], "q_i": [86, 119, 137], "_t": [86, 123, 126, 140, 173, 182, 183, 187, 218, 228], "trigintegr": 86, "trigonometri": 86, "r535": 86, "integration_techniqu": 86, "deltaintegr": 86, "couldn": 86, "didn": [86, 95, 137], "singularityintegr": 86, "risch_integr": 86, "nonelementaryintegr": 86, "proven": [86, 99, 259, 277], "handle_first": 86, "separate_integr": 86, "rewrite_complex": 86, "forthcom": 86, "5109": 86, "outer": [86, 120, 138, 140, 156, 161, 162, 183, 185, 187, 192, 210, 216, 232, 253, 256, 257], "pop": [86, 221], "manualintegr": 86, "integral_step": 86, "student": [86, 217, 221, 228], "_i": [86, 173, 178, 205], "namedtupl": 86, "substep": 86, "sympy_gamma": 86, "app": 86, "intstep": 86, "urul": 86, "u_var": 86, "_u": [86, 173], "u_func": 86, "arctanrul": 86, "trigrul": 86, "rewriterul": 86, "addrul": 86, "powerrul": 86, "constanttimesrul": 86, "constantrul": 86, "norman": 86, "retri": [86, 99], "degree_offset": 86, "unnecessary_permut": 86, "_try_heurisch": 86, "manuel": [86, 213], "poor": [86, 100], "man": [86, 202], "airi": [86, 224], "whittak": 86, "r536": 86, "sop": [86, 89], "cafe": 86, "pmint": 86, "r537": 86, "gedd": [86, 202], "stefanu": 86, "217": [86, 202], "r538": 86, "davenport": [86, 201, 202], "eurocam": 86, "lnc": [86, 202, 226], "157": [86, 99, 103, 202], "r539": 86, "iii": [86, 208, 224], "sigsam": 86, "bulletin": 86, "1982": [86, 193], "r540": 86, "transact": [86, 202], "1985": [86, 118, 139, 183, 253], "356": [86, 203, 226], "362": 86, "lookup": [86, 95, 99, 218], "huge": [86, 99, 204, 244], "entail": 86, "delic": [86, 195], "albeit": [86, 257], "mimic": [86, 87, 188, 247], "moder": 86, "irrespect": [86, 221, 224, 249], "line_integr": 86, "as_sum": 86, "subinterv": 86, "trapezoid": [86, 95, 228], "730": 86, "809": 86, "decai": 86, "r541": 86, "riemann_sum": 86, "r542": 86, "cauchy_principal_valu": 86, "r543": 86, "cauchyprincipalvalu": 86, "int_a": 86, "uvar": 86, "ui": [86, 99, 225], "3aissu": 86, "3aopen": 86, "3aintegr": 86, "gauss_legendr": 86, "n_digit": 86, "legendr": [86, 99, 204, 208, 221], "r544": 86, "w_i": [86, 142, 204, 224], "7746": 86, "55556": 86, "88889": 86, "86114": 86, "33998": 86, "34785": 86, "65215": 86, "gauss_laguerr": 86, "gauss_gen_laguerr": 86, "gauss_hermit": 86, "gauss_chebyshev_t": 86, "gauss_chebyshev_u": 86, "gauss_jacobi": 86, "gauss_lobatto": 86, "gaussian_quadratur": 86, "r545": 86, "fsu": 86, "jburkardt": 86, "cpp_src": 86, "legendre_rul": 86, "laguerr": [86, 204, 208], "r546": 86, "41577": 86, "2943": 86, "2899": 86, "71109": 86, "27852": 86, "010389": 86, "22285": 86, "1889": 86, "9927": 86, "7751": 86, "8375": 86, "983": 86, "45896": 86, "417": [86, 220], "11337": 86, "010399": 86, "00026102": 86, "9855e": 86, "93laguerre_quadratur": 86, "r547": 86, "laguerre_rul": 86, "hermit": [86, 90, 95, 96, 197, 203, 204, 208, 228], "r548": 86, "2247": 86, "29541": 86, "1816": 86, "3506": 86, "3358": 86, "43608": 86, "00453": 86, "15707": 86, "72463": 86, "hermite_quadratur": 86, "r549": 86, "hermite_rul": 86, "r550": 86, "gen_hermite_rul": 86, "r551": 86, "19016": 86, "7845": 86, "5253": 86, "4493": 86, "31413": 86, "00906": 86, "97851": 86, "9904": 86, "3193": 86, "712": 86, "53087": 86, "67721": 86, "11895": 86, "0023152": 86, "r552": 86, "gen_laguerre_rul": 86, "r553": 86, "86602": 86, "0472": 86, "96593": 86, "70711": 86, "25882": 86, "5236": 86, "93gauss_quadratur": 86, "r554": 86, "chebyshev1_rul": 86, "r555": 86, "3927": 86, "7854": 86, "90097": 86, "62349": 86, "22252": 86, "084489": 86, "27433": 86, "42658": 86, "r556": 86, "chebyshev2_rul": 86, "jacobi": [86, 99, 111, 204, 208], "r557": 86, "7063": 86, "0973": 86, "33795": 86, "87174": 86, "5917": 86, "2093": 86, "050584": 86, "22169": 86, "39439": 86, "93jacobi_quadratur": 86, "r558": 86, "jacobi_rul": 86, "r559": 86, "gegenbauer_rul": 86, "lobatto": 86, "r560": 86, "3333": 86, "44721": 86, "16667": 86, "83333": 86, "93lobatto_rul": 86, "r561": 86, "page_888": 86, "intpoli": 86, "chin": 86, "al": [86, 123, 152, 201, 217, 220], "2015": [86, 227], "unit_cub": 86, "polytope_integr": 86, "eric": [86, 202], "jean": 86, "lasserr": 86, "sukumar": 86, "nonconvex": 86, "967": 86, "981": 86, "dilbert": 86, "engr": 86, "ucdavi": 86, "suku": 86, "max_degre": [86, 204], "689": [86, 103], "21875": 86, "octahedron": 86, "trivari": 86, "enable_automatic_int_sympif": 87, "enable_automatic_symbol": 87, "init_ipython_sess": 87, "argv": [87, 239], "init_python_sess": 87, "use_latex": [87, 188, 284], "quiet": 87, "str_printer": [87, 188], "latex_print": [87, 188], "pylab": 87, "stringifi": [87, 188], "sstrrepr": [87, 188, 208], "lexograph": [87, 188], "gui": [87, 188], "statu": 87, "\u03b8": [87, 117, 145, 227], "int_to_integ": 87, "decistmt": 87, "f401": 87, "0x12": 87, "num_column": [87, 188, 208, 224], "no_glob": [87, 188], "ip": [87, 161, 167, 188], "forecolor": [87, 188], "backcolor": [87, 188], "fontsiz": [87, 188, 208], "10pt": [87, 188, 208], "latex_mod": [87, 188], "print_builtin": [87, 188], "interactiveconsol": [87, 188], "preambl": [87, 188, 208], "handwritten": [87, 188], "ctan": [87, 188], "pkg": [87, 188], "dvi": [87, 188, 208], "foreground": [87, 188], "black": [87, 158, 169, 188, 208, 284], "white": [87, 188, 228], "documentclass": [87, 188, 208], "dpi": [87, 188], "u03b8": 87, "dvip": 87, "r562": 87, "r563": 87, "the_68_standard_colors_known_to_dvip": 87, "config": 87, "root_system": 88, "rootsystem": 88, "cartantyp": 88, "cartan": 88, "subalgebra": 88, "adjoint": [88, 90, 95, 150, 154], "hyperplan": 88, "k_y": 88, "r564": 88, "r565": 88, "humphrei": 88, "add_as_root": 88, "root1": 88, "root2": 88, "add_simple_root": 88, "newroot": 88, "all_root": [88, 99, 204], "cartan_matrix": 88, "dynkin_diagram": 88, "dynkin": 88, "root_spac": 88, "simple_root": 88, "type_a": 88, "typea": 88, "basic_root": 88, "iin": 88, "jth": [88, 227], "ijth": 88, "cartan_typ": 88, "highest_root": 88, "lie_algebra": 88, "positive_root": 88, "type_b": 88, "typeb": 88, "b4": 88, "b3": [88, 123, 140, 183, 259], "type_c": 88, "typec": 88, "c4": [88, 90, 92, 224], "type_d": 88, "d4": [88, 228], "dmension": 88, "type_": 88, "e6": 88, "type_f": 88, "typef": 88, "f_4": [88, 119], "f4": [88, 194], "type_g": 88, "typeg": 88, "weyl_group": 88, "weylgroup": 88, "semisimpl": 88, "isometri": 88, "coxet": 88, "coxeter_diagram": 88, "undirect": [88, 246], "s_is_j": 88, "delete_doubl": 88, "element_ord": 88, "weylelt": 88, "group_nam": 88, "group_ord": 88, "192": 88, "matrix_form": 88, "cartantype_gener": 88, "standard_cartan": 88, "dynkindiagram": 88, "cartanmatrix": 88, "sopform": 89, "minterm": 89, "dontcar": 89, "simplified_pair": 89, "combo": 89, "outcom": [89, 176, 228], "posform": 89, "r566": 89, "quin": 89, "mccluskey_algorithm": 89, "r567": 89, "27t": 89, "care_term": 89, "r568": 89, "r569": 89, "anfform": 89, "truthvalu": 89, "anf": 89, "funciton": 89, "zhegalkin": 89, "r570": 89, "zhegalkin_polynomi": 89, "booleantru": 89, "doubt": [89, 123], "greet": 89, "booleanfals": 89, "universalset": [89, 216], "nand": 89, "xnor": 89, "gate": [89, 153, 158, 160, 166, 167, 169, 270], "perspect": [89, 99, 109, 178, 194, 241, 258, 262], "multiplex": 89, "disjunct": 89, "to_anf": 89, "oplu": [89, 157], "to_cnf": 89, "cnf": 89, "mccluskei": 89, "to_dnf": 89, "to_nnf": 89, "nnf": 89, "is_anf": 89, "is_cnf": 89, "is_dnf": 89, "is_nnf": 89, "gateinputcount": 89, "simplify_log": 89, "fewest": [89, 167], "conver": 89, "r571": 89, "bool_map": 89, "bool1": 89, "bool2": 89, "function1": 89, "function2": 89, "distribute_and_over_or": 89, "distribute_or_over_and": 89, "distribute_xor_over_and": 89, "eliminate_impl": 89, "truth_tabl": 89, "ibin": [89, 246], "integer_to_term": 89, "0001111011": [89, 246], "1101111000": [89, 246], "term_to_integ": 89, "bool_maxterm": 89, "maxterm": 89, "complement": [89, 92, 204, 216, 227], "r572": 89, "canonical_normal_form": 89, "indexing_maxterm": 89, "bool_minterm": 89, "patter": 89, "r573": 89, "indexing_minterm": 89, "bool_monomi": 89, "enumar": 89, "anf_coeff": 89, "to_int_repr": 89, "all_model": 89, "unsatisfi": 89, "use_model": 89, "unsat": 89, "dirac": [90, 95, 107, 111, 112, 171, 208], "__abs__": [90, 199], "__add__": [90, 199, 203], "__len__": 90, "96": [90, 95, 228], "mismatch": 90, "matrix_multiply_elementwis": [90, 95], "applyfunc": [90, 91, 95, 131, 183, 229], "col": [90, 92, 95, 98, 109, 140, 197, 203, 281], "col_del": [90, 95, 281], "col_join": [90, 95, 125], "col_insert": [90, 281], "row_insert": [90, 281], "row_join": [90, 95, 125], "companion": [90, 92], "c0": [90, 92, 215, 224, 226], "sparsematrix": [90, 95, 98, 209, 220], "diag": [90, 92, 95, 98, 140, 197, 234, 281], "immutablematrix": [90, 91, 92, 109, 183, 228, 253, 256, 281], "blockmatrix": [90, 92, 95], "sparsetool": [90, 98], "kth": [90, 99], "rowslist": [90, 197], "colslist": 90, "submatrix": [90, 95, 201, 228], "get_diag_block": [90, 92, 95], "decoupl": 90, "hstack": [90, 197], "is_anti_symmetr": 90, "is_diagon": [90, 95], "is_low": [90, 197], "is_upp": [90, 197], "matrixeigen": [90, 95], "is_diagonaliz": [90, 95], "is_hermitian": [90, 95], "is_lower_hessenberg": 90, "hessenberg": [90, 95], "superdiagon": 90, "is_upper_hessenberg": 90, "is_strongly_diagonally_domin": 90, "strongli": [90, 95, 197, 246], "m1": [90, 95, 99, 102, 103, 144, 152, 170, 172, 176, 221, 224, 229, 234], "subdiagon": [90, 95], "is_weakly_diagonally_domin": 90, "weakli": [90, 246], "vacuou": 90, "jordan_block": [90, 95], "eigenv": [90, 95, 123, 125, 140, 167, 279, 281], "rectangular": [90, 95, 216, 227, 257], "r574": 90, "jordan_matrix": [90, 224], "dotprodsimp": 90, "blowup": 90, "multiply_elementwis": [90, 95], "hadamard": [90, 92, 95, 157, 158, 169, 208], "elementwis": [90, 92, 95, 229], "300": [90, 95, 99, 102, 189, 194, 205, 262], "bmatrix": [90, 92, 95, 127, 135, 136, 137, 138, 183, 192, 221], "a_0": [90, 95, 211, 221, 224, 229, 285], "vdot": [90, 92, 95, 178], "alpha_0": 90, "alpha_1": [90, 99, 203], "alpha_": [90, 193], "permute_col": 90, "permute_row": 90, "mulsimp": 90, "rmultipli": 90, "__rmul__": 90, "rot90": 90, "anticlockwis": 90, "row_del": [90, 95, 281], "todod": 90, "tolist": [90, 229], "vec": [90, 95, 117, 140, 183, 193, 201, 259, 260, 262], "vech": 90, "check_symmetri": 90, "vstack": [90, 197], "wilkinson": 90, "w_": [90, 203], "wminu": 90, "wplu": 90, "r575": 90, "mathwork": [90, 107, 228, 281], "cleve": 90, "04": [90, 228], "r576": 90, "claredon": 90, "oxford": 90, "662": 90, "intm": 90, "mutabledensematrix": [91, 197, 249], "densematrix": [91, 95], "ldldecomposit": [91, 95], "ldl": [91, 95], "choleski": [91, 95], "ludecomposit": [91, 92, 95, 281], "qrdecomposit": [91, 95], "as_immut": 91, "lower_triangular_solv": [91, 95], "upper_triangular_solv": [91, 95], "gauss_jordan_solv": [91, 95], "cholesky_solv": [91, 95], "diagonal_solv": [91, 95], "ldlsolv": [91, 95], "qrsolv": [91, 95], "pinv_solv": [91, 95], "permutedim": [92, 229, 230], "arraytensorproduct": [92, 230], "from_index_summ": 92, "first_index": 92, "last_index": 92, "longrightarrow": 92, "matpow": [92, 208], "hadamard_product": 92, "aka": 92, "hadamardproduct": [92, 208], "hadamardpow": [92, 208], "ddot": [92, 95, 127, 136, 188, 191, 208, 285], "functionmatrix": 92, "lazili": [92, 214], "342923500": 92, "permutationmatrix": [92, 95], "matrixpermut": 92, "companionmatrix": 92, "matrixset": [92, 216], "submatric": [92, 95, 197, 228], "block_collaps": 92, "dat": [92, 246], "irregular": [92, 95], "ldudecomposit": 92, "ldu": 92, "2x2": [92, 98, 142, 197, 224], "udldecomposit": 92, "udl": 92, "schur": 92, "pinv": [92, 95], "r577": 92, "schur_compl": 92, "blockdiagmatrix": [92, 95], "diag_block": 92, "alias": [93, 199], "bridg": [93, 105, 123, 247], "tension": 93, "gramschmidt": 95, "m2": [95, 99, 102, 103, 120, 144, 152, 170, 172, 176, 203, 221, 224, 229, 234], "126": [95, 99, 207], "150": [95, 109, 221], "v3": [95, 183, 187, 259], "glue": 95, "m3": [95, 152, 221, 229], "adj": 95, "qr": 95, "cheat": 95, "soln": 95, "gram": [95, 178, 180], "schmidt": 95, "out1": 95, "out2": 95, "1692": 95, "1551": 95, "423": 95, "6707": 95, "spot": [95, 141], "eigenvector": [95, 123, 167, 168, 193], "nullspac": [95, 197], "matrixdetermin": 95, "adjug": 95, "berkowitz": 95, "bareiss": 95, "cofactor_matrix": 95, "charpoli": [95, 197, 281], "_simplifi": 95, "purepoli": [95, 204], "samuelson": 95, "minor_submatrix": 95, "iszerofunc": [95, 281], "barei": 95, "det_lu": 95, "functiontyp": 95, "_iszero": [95, 281], "_is_zero_after_expand_mul": 95, "unrecogn": 95, "nonsquarematrixerror": [95, 224], "i3": [95, 110, 123, 140, 234], "perman": 95, "ryser": 95, "450": 95, "r578": 95, "prof": 95, "ben": 95, "berkelei": 95, "bernd": 95, "ban275": 95, "r579": 95, "permanent_": 95, "r580": 95, "r581": 95, "0904": 95, "3251": 95, "matrixreduct": 95, "echelon_form": [95, 281], "with_pivot": 95, "echelon": [95, 197, 227, 281], "elementary_col_op": 95, "kn": [95, 102, 103], "col1": 95, "col2": 95, "km": [95, 99, 113, 118, 125, 127, 130, 131, 135, 137, 140, 179], "elementary_row_op": 95, "row1": 95, "row2": 95, "is_echelon": [95, 281], "rref": [95, 197], "pivot": [95, 197, 281], "normalize_last": 95, "rref_matrix": [95, 197], "rref_pivot": [95, 197], "301369863013699": 95, "712328767123288": 95, "noramlize_last": 95, "matrixsubspac": 95, "subspac": [95, 203], "columnspac": [95, 197], "rowspac": [95, 197], "orthonorm": [95, 140, 168, 192, 257], "rankcheck": 95, "r582": 95, "93schmidt_process": 95, "eigen": [95, 149], "bidiagonal_decomposit": 95, "ubv": 95, "bidiagon": 95, "hang": [95, 127, 131, 224, 225], "bidiagn": 95, "r583": 95, "golub": 95, "van": [95, 99, 202], "loan": 95, "r584": 95, "vslobodi": 95, "household": 95, "r585": 95, "r586": 95, "reals_onli": 95, "throw": [95, 101, 123, 203, 221, 227], "error_when_incomplet": 95, "eig": [95, 123, 140], "matrixerror": 95, "got": [95, 195, 198, 201, 204, 207, 239, 240, 246, 247, 277, 279, 280], "eigenvect": [95, 123, 140, 167, 281], "tidi": 95, "artifact": 95, "ret": 95, "eigenspac": 95, "rag": 95, "a_3": 95, "diagonaliz": [95, 281], "is_indefinit": 95, "semidefinit": [95, 228], "plot3d": [95, 194], "is_positive_definit": 95, "is_positive_semidefinit": 95, "hire": [95, 102, 103, 107, 194, 211], "is_negative_definit": 95, "is_negative_semidefinit": 95, "defer": [95, 250], "r587": 95, "definiteness_of_a_matrix": 95, "r588": 95, "positivedefinitematrix": 95, "r589": 95, "amer": 95, "259": 95, "264": [95, 226], "r590": 95, "r591": 95, "r592": 95, "r593": 95, "r594": 95, "r595": 95, "r596": 95, "r597": 95, "r598": 95, "r599": 95, "r600": 95, "r601": 95, "jordan_form": 95, "calc_transform": 95, "left_eigenvect": 95, "singular_valu": 95, "condition_numb": 95, "matrixcalculu": 95, "hessian": 95, "wronskian": [95, 224], "simpfunc": 95, "permutebkwd": 95, "permutefwd": 95, "lucombin": 95, "defici": [95, 99, 227], "matrixi": 95, "ludecomposition_simpl": [95, 281], "ludecompositionff": 95, "pa": [95, 118, 120, 135, 138, 141], "r602": 95, "zhou": 95, "jeffrei": [95, 220], "frontier": [95, 216], "china": 95, "67": [95, 202], "2008": [95, 193, 202, 204, 208], "row_swap": 95, "compres": 95, "permute_backward": 95, "permute_forward": 95, "intiuit": 95, "lu_": 95, "_find_reasonable_pivot": 95, "qr_solv": 95, "augument": 95, "167": 95, "158": [95, 103], "27261": 95, "30625": 95, "348": 95, "1914": 95, "6125": 95, "30589": 95, "198": 95, "1225": 95, "q_aug": 95, "r_aug": 95, "analytic_func": 95, "connected_compon": [95, 246], "connected_components_decomposit": 95, "relax": [95, 101], "3x1": 95, "1x3": 95, "conjugate_convent": 95, "dual": [95, 165, 171], "anti_symmetr": 95, "speak": [95, 203, 260], "freevar": 95, "underdetermin": [95, 226, 227], "free_var_index": 95, "tau0": [95, 227, 228], "tau1": 95, "taus_zero": 95, "sol_uniqu": 95, "r603": 95, "gaussian_elimin": 95, "try_block_diag": 95, "inverse_g": [95, 281], "inverse_lu": [95, 281], "inverse_adj": [95, 281], "inverse_ch": 95, "inverse_ldl": 95, "inverse_qr": 95, "inv_mod": 95, "cof": 95, "inverse_block": 95, "blockwis": 95, "ntop": 95, "key2bound": 95, "key2ij": 95, "reciproc": [95, 228, 285], "fro": 95, "sing": 95, "spectral": 95, "rd": [95, 123, 208], "r604": 95, "penrose_pseudoinvers": 95, "arbitrary_matrix": 95, "wn_m": 95, "_w0_0": 95, "_w1_0": 95, "_w2_0": 95, "59": [95, 224], "r605": 95, "obtaining_all_solutions_of_a_linear_system": 95, "print_nonzero": [95, 246], "symb": [95, 208], "rank_decomposit": 95, "r606": 95, "rank_factor": 95, "r607": 95, "piziak": 95, "odel": 95, "magazin": 95, "193": [95, 107], "2307": 95, "2690882": 95, "singular_value_decomposit": 95, "condens": [95, 227], "orthogn": 95, "v_aug": 95, "u_aug": 95, "s_aug": 95, "gj": 95, "solve_least_squar": 95, "strongly_connected_compon": [95, 197, 246], "62": [95, 201], "strongly_connected_components_decomposit": 95, "rowstart": 95, "rowend": 95, "rowsep": 95, "colsep": 95, "strprinter": [95, 188], "upper_hessenberg_decomposit": 95, "213": 95, "134": 95, "216": [95, 201], "hessenbergdecomposit": 95, "jordan_cel": 95, "varlist": 95, "r608": 95, "hessian_matrix": 95, "vlist": 95, "r609": 95, "casoratian": 95, "kernel": [95, 195, 201, 203, 226], "vanish": [95, 173, 201, 204, 207, 224, 253], "rsolve_hyp": [95, 226], "randmatrix": 95, "percent": [95, 227], "prng": 95, "percentag": [95, 99], "46": [95, 102, 178, 207, 226, 228], "list2numpi": 95, "dtype": [95, 100, 195, 197, 198, 199, 208, 247], "matrix2numpi": 95, "symarrai": 95, "ndarrai": [95, 228, 234, 240], "prefix_i1_i2_": 95, "_2": [95, 117, 182, 183, 193, 224], "a_0_0": 95, "a_0_1": 95, "a_0_2": 95, "a_1_0": 95, "a_1_1": 95, "a_1_2": 95, "a_0_0_0": 95, "a_0_0_1": 95, "a_0_1_0": 95, "a_0_1_1": 95, "a_0_2_0": 95, "a_0_2_1": 95, "a_1_0_0": 95, "a_1_0_1": 95, "a_1_1_0": 95, "a_1_1_1": 95, "a_1_2_0": 95, "a_1_2_1": 95, "rot_axis1": 95, "rot_axis2": 95, "rot_axis3": 95, "a2idx": 95, "normalform": [96, 197], "hermite_normal_form": [96, 197, 203], "check_rank": [96, 197], "hnf": [96, 197, 203], "explos": [96, 197], "believ": [96, 99, 197], "dmdomainerror": [96, 197], "dmshapeerror": [96, 197], "r610": 96, "cohen": [96, 197, 202, 203], "mutablesparsematrix": 97, "_doktocsr": 98, "csr": 98, "ja": 98, "ia": 98, "_csrtodok": 98, "dok": 98, "1x1": [98, 228], "vert": [98, 189, 192, 262], "saw": [98, 198, 285], "dynam": [99, 106, 107, 109, 113, 115, 118, 119, 122, 125, 133, 135, 136, 137, 138, 139, 140, 141, 182, 183, 185, 187, 191, 192, 243, 244, 253], "eratosthen": 99, "_reset": [99, 204], "_list": 99, "extend_to_no": 99, "mobiusrang": 99, "primerang": 99, "10th": 99, "totientrang": 99, "1e11": 99, "50000": 99, "primal": [99, 195], "1299709": 99, "r611": 99, "prime_number_theorem": 99, "table_of_": 99, "cf": [99, 201], "28x": 99, "2c_x_": 99, "2f_log_x": 99, "2c_and_li": 99, "r612": 99, "approximations_for_the_nth_prime_numb": 99, "r613": 99, "27_number": 99, "arr1": 99, "arr2": 99, "prevprim": 99, "9th": 99, "nextprim": 99, "occupi": [99, 173, 234], "conjectur": [99, 201], "twin": 99, "bertrand": 99, "brocard": 99, "primori": 99, "r614": 99, "r615": 99, "utm": 99, "postul": 99, "r616": 99, "s_postul": 99, "primefactor": 99, "argu": 99, "cycle_length": 99, "nmax": 99, "brent": [99, 243], "floyd": 99, "cycle_detect": 99, "17737": 99, "20000": 99, "compositepi": 99, "831": 99, "smoothness_p": 99, "sm": [99, 123, 140, 195], "psm": 99, "govern": 99, "10431": 99, "annot": [99, 194, 208], "21477639576571": 99, "4410317": 99, "1787": 99, "4869863": 99, "2434931": 99, "multiplicity_in_factori": 99, "nfac": 99, "52818775009509558395695966887": 99, "is2pow": 99, "pollard_rho": 99, "1234": [99, 221], "max_step": 99, "pollard": [99, 224], "leader": 99, "16843009": 99, "32767": 99, "4i": 99, "3i": 99, "2489": 99, "1482": 99, "285": [99, 226], "leadup": 99, "r617": 99, "crandal": 99, "carl": [99, 243], "pomer": [99, 243], "229": 99, "231": [99, 183], "pollard_pm1": 99, "likelihood": 99, "1009": 99, "am": [99, 178, 208], "255": 99, "crack": 99, "617": 99, "1786": 99, "worst": [99, 204, 224], "scenario": [99, 228], "divisisor": 99, "realist": 99, "r618": 99, "236": 99, "r619": 99, "washington": 99, "2007": [99, 139, 243], "spring": [99, 114, 117, 118, 123, 128], "ent": 99, "node81": 99, "r620": 99, "toronto": 99, "yuvalf": 99, "use_ecm": 99, "65537": [99, 207], "1407633717262338957430697921446883": 99, "991": 99, "202916782076162456022877024859": 99, "4200": 99, "1764": 99, "toggl": [99, 194], "12345678910111213141516": 99, "2507191691": 99, "1231026625769": 99, "factorrat": 99, "rat": 99, "987": 99, "10000000001": 99, "99009901": 99, "divisor_count": 99, "tim": [99, 246], "stackoverflow": [99, 246, 249], "1010381": 99, "proper_divisor": 99, "proper_divisor_count": 99, "udivisor": 99, "udivisor_count": 99, "r621": 99, "unitary_divisor": 99, "r622": 99, "unitarydivisor": 99, "r623": 99, "unitarydivisorfunct": 99, "antidivisor": 99, "r624": 99, "margin": [99, 109, 194, 228], "antidivisor_count": 99, "a066272": 99, "a066272a": 99, "r625": 99, "r626": 99, "27s_totient_funct": 99, "r627": 99, "totientfunct": 99, "r628": 99, "carmichael_funct": 99, "r629": 99, "carmichaelfunct": 99, "sigma_k": 99, "m_i": [99, 193, 201], "m_ik": 99, "r630": 99, "divisor_funct": 99, "udivisor_sigma": 99, "47450": 99, "152": 99, "r631": 99, "core_t": 99, "core_2": 99, "squarefre": [99, 203], "cubefre": 99, "9424": 99, "1178": 99, "379238": 99, "square_factor": [99, 221], "r632": 99, "free_integ": 99, "squarefree_cor": 99, "primenu": 99, "r633": 99, "primeomega": 99, "r634": 99, "mersenne_prime_expon": 99, "mersenn": 99, "4423": 99, "r635": 99, "perfectnumb": 99, "r636": 99, "perfect_numb": 99, "is_mersenne_prim": 99, "r637": 99, "mersenneprim": 99, "abund": 99, "is_abund": 99, "r638": 99, "abundantnumb": 99, "is_defici": 99, "r639": 99, "deficientnumb": 99, "is_amic": 99, "amic": 99, "220": [99, 204], "r640": 99, "amicable_numb": 99, "symmetric_residu": 99, "v_i": [99, 203, 226], "65": [99, 109, 201, 228], "639985": [99, 201], "912285": [99, 201], "954": 99, "gf_crt": [99, 201], "solve_congru": [99, 201], "programm": [99, 208], "galoistool": [99, 201], "crt1": 99, "4536": 99, "252": 99, "756": 99, "crt2": 99, "remainder_modulus_pair": 99, "mi": [99, 208], "k1": [99, 140, 171, 198, 199, 201], "k2": [99, 140, 198], "c_kn": 99, "binomial_coefficients_list": 99, "multinomial_coeffici": 99, "k_m": 99, "k_i": [99, 201, 218], "yann": 99, "laigl": 99, "chapui": 99, "permiss": [99, 193], "multinomial_coefficients_iter": 99, "_tupl": 99, "m53": 99, "partitions_": 99, "npartit": 99, "hardi": 99, "rademach": [99, 228], "r641": 99, "1958": [99, 193], "partitionfunctionp": 99, "is_euler_pseudoprim": 99, "pseudoprim": 99, "r642": 99, "euler_pseudoprim": 99, "prep": [99, 224, 225], "r643": 99, "mersenneforum": 99, "showpost": 99, "110896": 99, "mr": 99, "miller": 99, "rabin": 99, "wit": 99, "1373651": 99, "479001599": 99, "r644": 99, "135": 99, "138": 99, "93rabin_primality_test": 99, "deterministic_vari": 99, "is_lucas_prp": 99, "selfridg": 99, "377": 99, "1159": 99, "1829": 99, "3827": 99, "5459": 99, "5777": 99, "9071": 99, "9179": 99, "bailli": 99, "wagstaff": 99, "1980": [99, 246], "mpq": [99, 198], "lucaspseudoprim": 99, "a217120": 99, "lucas_pseudoprim": 99, "is_strong_lucas_prp": 99, "bpsw": 99, "10877": 99, "16109": 99, "18971": 99, "a217255": 99, "psw_primality_test": 99, "is_extra_strong_lucas_prp": 99, "grantham": 99, "mo": [99, 140, 208], "jone": [99, 145], "preprint": 99, "a217719": 99, "perl": 99, "counterexampl": [99, 285], "989": 99, "3239": 99, "jon": 99, "mcom": 99, "234": 99, "01197": 99, "1e3": 99, "1e23": [99, 249], "near_int": 99, "strong_pseudoprim": 99, "is_gaussian_prim": 99, "r645": 99, "gaussian_prim": 99, "residue_ntheori": 99, "n_order": 99, "cong": [99, 201], "primitive_root": [99, 203], "r646": 99, "stein": [99, 224], "r647": 99, "hackman": 99, "sqrt_mod": 99, "sqrt_mod_it": 99, "quadratic_residu": 99, "nthroot_mod": 99, "109": [99, 202, 221], "is_nthpow_residu": 99, "r648": 99, "is_quad_residu": 99, "legendre_symbol": 99, "genfrac": 99, "nonresidu": 99, "alpha_2": [99, 203], "alpha_k": 99, "discrete_log": 99, "prime_ord": 99, "giant": [99, 227], "pohlig": 99, "r649": 99, "discretelogarithm": 99, "r650": 99, "cryptographi": [99, 264, 271], "menez": 99, "vanston": 99, "continued_fract": 99, "continued_fraction_period": 99, "continued_fraction_reduc": 99, "continued_fraction_converg": 99, "continued_fraction_iter": 99, "106": 99, "103993": 99, "33102": 99, "104348": 99, "33215": 99, "208341": 99, "66317": 99, "292": 99, "r651": 99, "discrimin": [99, 199, 201, 203, 204], "r652": 99, "periodic_continued_fract": 99, "r653": 99, "rosen": 99, "379": [99, 204], "381": 99, "januari": 99, "1992": [99, 202, 226], "233": [99, 202, 224], "718281835": 99, "287": 99, "count_digit": 99, "1111339": 99, "0xfa": 99, "c77": 99, "is_palindrom": [99, 246], "palindrom": 99, "0o121": 99, "oct": 99, "0o171": 99, "fermion": [99, 173], "r654": 99, "b6bius_funct": 99, "r655": 99, "thoma": [99, 139], "koshi": 99, "egyptian_fract": 99, "greedi": [99, 201, 217, 220], "egyptian": 99, "r656": 99, "jewett": 99, "takenouchi": 99, "3192": 99, "1118": 99, "2580": 99, "sylvest": [99, 201], "r657": 99, "seldom": 99, "blow": 99, "doubli": 99, "exhibit": [99, 193, 203, 217], "singli": 99, "tendenc": 99, "r658": 99, "1921": 99, "golumb": 99, "1962": 99, "propos": 99, "bleicher": 99, "1972": 99, "r659": 99, "420": [99, 221], "140": 99, "574": 99, "2788": 99, "6460": 99, "11590": 99, "33062": 99, "113820": 99, "greedy_algorithm_for_egyptian_fract": 99, "ic": [99, 224], "uci": 99, "eppstein": 99, "numth": 99, "egypt": 99, "ami": 99, "ektf": 99, "hu": 99, "finalpdf": 99, "ami_42_from129to134": 99, "bbp_pi": 99, "pi_hex_digit": 99, "hex": 99, "3243f6a8885a30": 99, "324": [99, 202], "r660": 99, "numberworld": 99, "subexponenti": 99, "comfort": [99, 100], "15154262241479": 99, "15423094826093": 99, "799333555511111": 99, "809709509409109": 99, "888888877777777": 99, "914148152112161": 99, "factoris": [99, 198, 199, 224], "max_curv": 99, "lenstra": 99, "ecm_one_factor": 99, "pseudorandom": [99, 246], "25645121643901801": 99, "5394769": 99, "4753701529": 99, "9804659461513846513": 99, "4641991": 99, "2112166839943": 99, "7060005655815754299976961394452809": 99, "6988699669998001": 99, "1010203040506070809": 99, "122921448543883967430908091422761898618349713604256384403202282756086473494959648313841": 99, "2709077133180915240135586837960864768806330782747": 99, "248": 99, "prime_bound": 99, "error_term": 99, "siq": 99, "modn": 99, "mulipl": 99, "r661": 99, "semanticscholar": 99, "5c52": 99, "8a975c1405bd35c65993abf5a4edb667c1db": 99, "r662": 99, "rieselprim": 99, "ziki": 99, "initializing_quadratic_siev": 99, "5915587277": 99, "3267000013": 99, "facilit": [100, 133, 144, 190, 239], "000507214304613640": 100, "microsecond": 100, "000507214304614": 100, "hundr": [100, 279], "nanosecond": 100, "84147098": [100, 247, 274], "84119981": 100, "84092844": 100, "05426074": 100, "05433146": 100, "05440211": 100, "nano": 100, "manufactur": 100, "asnumpi": 100, "compliat": 100, "jnp": 100, "asarrai": 100, "84147096": 100, "8411998": 100, "05426079": 100, "05433151": 100, "autowrap": [100, 233, 241, 245, 272], "implemented_funct": [100, 240, 247], "effort": [100, 199, 201], "50u": 100, "1u": 100, "10n": 100, "sympy_pars": 101, "local_dict": 101, "lambda_not": 101, "repeated_decim": 101, "auto_numb": 101, "factorial_not": 101, "global_dict": 101, "standard_transform": 101, "implicit_multiplication_appl": 101, "implicit_appl": 101, "implicit_multipl": 101, "convert_equals_sign": 101, "function_exponenti": 101, "stringify_expr": 101, "eval_expr": 101, "name_dict": 101, "fullform": 101, "setdelai": 101, "datatyp": [101, 199, 208, 241], "split_symbol": 101, "split_symbols_custom": 101, "_token_splitt": 101, "can_split": 101, "unsplitt": 101, "10sin": 101, "3xyz": 101, "2111": 101, "latex2sympi": 101, "typograph": 101, "stricter": 101, "liber": [101, 113, 279], "618": 101, "latexparsingerror": 101, "sym_expr": 101, "sympyexpress": 101, "source_cod": 101, "return_expr": 101, "definiton": 101, "src2": 101, "convert_to_expr": 101, "convert_to_c": 101, "src3": 101, "convert_to_python": 101, "src_code": 101, "filenam": [101, 208, 239, 240, 241, 249], "convert_to_fortran": 101, "continuum_mechan": [102, 103, 105], "elastic_modulu": 102, "second_mo": 102, "base_char": 102, "withstand": [102, 103], "character": [102, 103, 189, 192, 215, 228, 234, 262], "profil": 102, "shear": [102, 103], "downward": [102, 103, 105, 203], "apply_load": [102, 103, 105], "bc_deflect": [102, 103], "boundary_condit": 102, "solve_for_reaction_load": [102, 103], "shear_forc": [102, 103], "bending_mo": [102, 103], "reaction": [102, 103, 105], "upward": [102, 203], "reaction_load": [102, 103, 105], "applied_load": 102, "nm": [102, 103, 171, 229], "pointload": [102, 103], "ramp": [102, 103], "parabol": 102, "apply_support": [102, 105], "loc": 102, "freedom": [102, 117, 118, 124, 127, 133, 228, 270], "roller": [102, 103, 105], "r_10": 102, "r_30": 102, "4000": [102, 103], "bc_slope": [102, 103], "cross_sect": 102, "elast": [102, 103], "12000": 102, "draw": [102, 153, 208, 228], "pictori": 102, "positv": 102, "ild_moment": 102, "ild_react": 102, "ild_shear": 102, "axial": [102, 142], "hing": [102, 103, 134], "cantilev": [102, 103], "inertia": [102, 103, 112, 113, 114, 116, 122, 123, 125, 126, 128, 130, 131, 132, 133, 140, 183, 191, 192, 203, 270], "666666666666667": [102, 103], "max_bmoment": 102, "max_deflect": 102, "max_shear_forc": 102, "plot_bending_mo": [102, 103], "gpa": 102, "400": [102, 194, 204], "13750": 102, "31250": 102, "plot_deflect": [102, 103], "00138541666666667": 102, "86458333333333e": 102, "04166666666667e": 102, "20833333333333e": 102, "51041666666667e": 102, "plot_ild_mo": 102, "solve_for_ild_mo": 102, "1kn": 102, "r_0": 102, "r_8": 102, "solve_for_ild_react": 102, "plot_ild_react": 102, "5kn": 102, "r_7": 102, "plotgrid": 102, "plot_ild_shear": 102, "solve_for_ild_shear": 102, "plot_loading_result": [102, 103], "subplot": [102, 194], "plot_shear_forc": [102, 103], "plot_shear_stress": 102, "stress": 102, "6875": 102, "2500": 102, "15625": [102, 180], "plot_slop": [102, 103], "59375e": 102, "125e": 102, "08333333333333e": 102, "0001953125": 102, "point_cflexur": 102, "overhang": [102, 103], "10kn": 102, "20kn": [102, 103], "3kn": 102, "remove_load": [102, 105, 114], "shear_stress": 102, "beam3d": 102, "shear_modulu": 102, "apply_moment_load": 102, "solve_slope_deflect": 102, "r663": 102, "home": [102, 203, 221, 228], "aau": 102, "jc": 102, "femtesemest": 102, "beams3d": 102, "angular_deflect": 102, "depict": [102, 189, 227, 262], "angular": [102, 111, 114, 117, 120, 125, 126, 127, 128, 130, 132, 134, 137, 140, 142, 146, 147, 149, 152, 170, 174, 183, 187, 193], "axial_forc": 102, "axial_stress": 102, "load_vector": 102, "max_bending_mo": 102, "16000": 102, "495": 102, "10793": 102, "6400": 102, "301": [102, 218, 221], "560": 102, "2400": 102, "moment_load_vector": 102, "40000": 102, "4013": 102, "90300": 102, "1520": 102, "903": 102, "1600": [102, 103], "172": 102, "polar_mo": 102, "i1": [102, 110, 123, 140, 234], "1350": 102, "solve_for_tors": 102, "torsion": 102, "torqu": [102, 114, 118, 122, 128, 135, 136, 140], "torsional_mo": 102, "_________________": 103, "________________": [103, 224], "_______________v": 103, "_______________": 103, "equilibrium": [103, 105, 125, 137], "20e9": 103, "25e": 103, "______________________________________________": 103, "_______________________________________________": 103, "r\u2081": 103, "r\u2082": 103, "______________________": 103, "________________________": 103, "8kn": 103, "_____________": 103, "1m": 103, "3m": 103, "2m": 103, "5m": [103, 243], "679": 103, "12kn": 103, "________________________________": 103, "____________________________________________________": 103, "o____________________________________________________": 103, "4m": 103, "concentr": [103, 228], "_____________________________________": 103, "m\u2081": 103, "m\u2082": 103, "connector": 103, "_____________________": 103, "_______________________": 103, "_____________________o_______________________": 103, "oooo": [103, 246], "r\u2083": 103, "_______i_______": 103, "flexur": 103, "rigid": [103, 105, 114, 118, 120, 123, 125, 128, 133, 140, 183, 191, 270], "____________": 103, "____________o________________________": 103, "a\u2082": [103, 285], "assembli": [105, 125], "joint": [105, 116, 126, 128, 133, 270], "add_nod": 105, "node_1": 105, "node_2": 105, "node_3": 105, "node_4": 105, "add_memb": 105, "member_1": 105, "member_2": 105, "member_3": 105, "member_4": 105, "member_5": 105, "270": 105, "360": 105, "change_member_label": 105, "new_label": 105, "change_node_label": 105, "bc_new": 105, "internal_forc": 105, "member_label": 105, "node_label": 105, "node_posit": 105, "remove_memb": 105, "remove_nod": 105, "remove_support": 105, "unstabl": 105, "revolv": 105, "tensil": 105, "r_node_1_x": 105, "r_node_1_i": 105, "r_node_2_i": 105, "lti": [106, 107], "transferfunct": [106, 107, 109], "interconnect": [106, 109, 117], "mimo": [106, 109], "transferfunctionmatrix": [106, 109], "mimoseri": [106, 109], "mimoparallel": [106, 109], "mimofeedback": [106, 109], "control_plot": 107, "pole_zero_plot": 107, "pole_color": 107, "blue": [107, 134, 194, 208], "pole_markers": 107, "zero_color": 107, "orang": 107, "zero_markers": 107, "show_ax": 107, "marker": [107, 194], "sisolineartimeinvari": [107, 109], "markers": 107, "tf1": [107, 109], "pole_zero_numerical_data": 107, "r664": 107, "93zero_plot": 107, "siso": [107, 109], "8660254j": 107, "bode_plot": 107, "initial_exp": 107, "final_exp": 107, "freq_unit": 107, "phase_unit": 107, "semilog": 107, "hz": 107, "hertz": 107, "bode_magnitude_plot": 107, "bode_phase_plot": 107, "bode_magnitude_numerical_data": 107, "5148378120533502e": 107, "68437": 107, "36188804005": 107, "020599914256786": 107, "0205999155219505": 107, "4117304087953": 107, "00000000260573": 107, "bode_phase_numerical_data": 107, "4472354033813751e": 107, "035581932165858e": 107, "47577": 107, "3248186011": 107, "67884": 107, "09326036123": 107, "5000000000291665e": 107, "6180885085e": 107, "08895483066e": 107, "1415085799262523": 107, "14155265358979": 107, "impulse_response_plot": 107, "lower_limit": [107, 275], "upper_limit": [107, 275], "step_response_plot": 107, "ramp_response_plot": 107, "r665": 107, "impulse_response_numerical_data": 107, "nb_of_point": [107, 194], "lineover1drangeseri": [107, 194], "amplitud": [107, 147], "06616480200395854": 107, "854500743565858": 107, "9999999799999999": 107, "7042848373025861": 107, "170748906965121e": 107, "1901263495547205e": 107, "r666": 107, "step_response_numerical_data": 107, "025413462339411542": 107, "0484508722725343": 107, "670250533855183": 107, "844291913708725": 107, "023844582399907256": 107, "042894276802320226": 107, "828770759094287e": 107, "456457160755703e": 107, "mx": [107, 153, 215], "r667": 107, "ramp_funct": 107, "ramp_response_numerical_data": 107, "12166980856813935": 107, "861246379582118": 107, "4504508011325967e": 107, "006046440489058766": 107, "12499999999568202": 107, "12499999999661349": 107, "den": [109, 199, 220, 224], "superscript": [109, 208], "impuls": 109, "tf2": 109, "tf3": 109, "tf4": 109, "tf5": 109, "tf6": 109, "500000000000000": 109, "tf7": 109, "tf8": 109, "tf9": 109, "tf10": 109, "tf11": 109, "tf12": 109, "r668": 109, "transfer_funct": 109, "r669": 109, "dc_gain": 109, "dc": [109, 136], "from_rational_express": 109, "zerodivisionerror": [109, 199, 237, 247], "tf": [109, 247], "is_biprop": 109, "is_prop": 109, "is_stabl": 109, "is_strictly_prop": 109, "sys1": 109, "sys2": 109, "feedforward": 109, "fed": 109, "sit": [109, 192], "plant": 109, "compulsori": 109, "tf_1": 109, "tf_2": 109, "tf_3": 109, "tf_4": 109, "tfm_1": 109, "num_input": 109, "num_output": 109, "tfm_2": 109, "tf_5": 109, "tf_6": 109, "tf_7": 109, "tf_8": 109, "tfm_3": 109, "tfm_4": 109, "tfm_5": 109, "tfm_6": 109, "tf_9": 109, "tf_10": 109, "tfm_7": 109, "tfm_8": 109, "tfm_9": 109, "tfm_10": 109, "tfm_11": 109, "tfm_12": 109, "elem_pol": 109, "elem_zero": 109, "from_matrix": [109, 197], "m_tf": 109, "tfm": 109, "tfm1": 109, "tfm2": 109, "g4": 109, "tfm3": 109, "mimolineartimeinvari": 109, "mat_a": 109, "mat_b": 109, "mat_c": 109, "tfm_a": 109, "tfm_b": 109, "tfm_c": 109, "expr_1": 109, "expr_2": 109, "expr_3": 109, "expr_4": 109, "plant_mat": 109, "controller_mat": 109, "neg_feedback": 109, "hep": 110, "gamma_matric": [110, 112], "gammamatrix": 110, "lorentzindex": 110, "gammamatrixhead": 110, "extract_type_ten": 110, "gamma_trac": 110, "i0": [110, 145, 234], "i2": [110, 123, 140, 234], "i4": [110, 234], "i5": 110, "kahane_simplifi": 110, "spinor": 110, "ta": [110, 217], "tb": [110, 217, 239], "tc": [110, 199, 204, 217], "joseph": [110, 202], "kahan": 110, "octob": 110, "1968": 110, "simplify_gpgp": 110, "e_nl": [111, 174], "hartre": 111, "helium": 111, "2209": 111, "e_nl_dirac": 111, "spin_up": 111, "035999037000": 111, "relativist": 111, "momentum": [111, 120, 123, 140, 151, 152, 170, 174, 193, 234], "light": [111, 145, 178, 188, 195], "035999037": 111, "1012": 111, "3627": 111, "500006656595360": 111, "125002080189006": 111, "125000416028342": 111, "0555562951740285": 111, "0555558020932949": 111, "0555556377366884": 111, "psi_nlm": 111, "wave": [111, 143, 144, 145, 211, 270], "psi_": [111, 149], "nlm": 111, "radial": [111, 127, 174], "nl": [111, 174], "magnet": [111, 144, 189, 262], "azimuth": 111, "wf": [111, 125], "abs_sqrd": 111, "silver": 111, "94": [111, 202], "141": 111, "4418": 111, "mdft": 112, "mgamma": 112, "gamma_5": 112, "gamma_0": 112, "gamma_3": 112, "r670": 112, "msigma": 112, "pauli": [112, 270], "sigma_i": [112, 228], "r671": 112, "pauli_matric": [112, 148], "pat_matrix": 112, "unansw": [113, 182], "kane": [113, 116, 117, 123, 129, 133, 134, 139, 140, 182, 183, 253, 270], "q1d": [113, 123, 125, 127, 130, 131, 132, 135, 136, 137, 138, 182, 188, 192], "q2d": [113, 123, 125, 127, 130, 131, 132, 135, 136, 187, 188], "q3d": [113, 130, 131, 132, 135], "kinemat": [113, 117, 118, 122, 123, 125, 126, 127, 128, 130, 132, 134, 135, 137, 138, 140, 141, 183, 186, 190, 192, 270], "dyad": [113, 140, 257], "mprint": [113, 130, 131, 132, 135], "mpprint": [113, 135], "mlatex": 113, "sub_dict": [113, 115, 125], "msub": [113, 115, 137], "cleaner": [113, 140, 224], "gsl": [113, 241], "lsoda": 113, "penalti": 113, "central_inertia": [114, 120, 126, 128], "possess": [114, 138, 234], "name_of_bodi": 114, "ixx": [114, 120, 183], "body_inertia": 114, "ang_vel_in": [114, 117, 123, 130, 131, 140, 183, 191], "set_ang_vel": [114, 120, 123, 125, 130, 131, 137, 138, 140, 141, 183, 185, 187, 191], "apply_forc": [114, 117, 128], "reaction_bodi": [114, 117, 128], "reaction_point": 114, "oppposit": 114, "desri": 114, "force1": 114, "b_masscent": 114, "b_frame": [114, 117], "newtonion": [114, 117], "spring_forc": 114, "n_frame": 114, "apply_torqu": [114, 128], "torquess": 114, "torque1": 114, "b1_frame": 114, "b2_frame": 114, "clear_load": 114, "kinetic_energi": [114, 120, 138, 140], "kinet": [114, 118, 120], "inerti": [114, 117, 118, 120, 125, 127, 130, 135, 136, 138, 140], "set_vel": [114, 118, 120, 123, 125, 127, 130, 131, 132, 135, 136, 137, 138, 140, 141, 187, 191], "b_ixx": 114, "b_mass": [114, 117], "masscenter_vel": [114, 117], "parallel_axi": [114, 120], "to_matrix": [114, 117, 182, 183, 192, 197, 203, 253, 256, 258], "a_ixx": 114, "a_mass": 114, "a_ixi": 114, "a_izx": 114, "a_iyi": 114, "a_iyz": 114, "a_izz": 114, "smart": [115, 137, 215, 221, 224], "sub1": [115, 208], "sub2": [115, 208], "find_dynamicsymbol": 115, "reference_fram": [115, 183], "symbolicsystem": [116, 133, 270], "interfram": [117, 187], "_generate_coordin": 117, "_generate_spe": 117, "_orient_fram": 117, "_set_angular_veloc": 117, "_set_linear_veloc": 117, "kde": [117, 126, 127, 134, 137], "revolut": 117, "\u03c9": 117, "pc": [117, 205], "p_masscent": 117, "c_masscent": 117, "p_frame": 117, "c_frame": 117, "q_pc": 117, "u_pc": 117, "pendulum": [117, 122, 124, 128, 133, 137, 141, 191, 270], "upper_bob": 117, "lower_bob": 117, "ceiling_joint": 117, "pendulum_joint": 117, "q_p1": 117, "q_p2": 117, "u_fram": 117, "l_frame": 117, "u_p1": 117, "u_p2": 117, "vel": [117, 123, 125, 127, 131, 134, 140, 187, 191, 260], "prismat": 117, "slide": 117, "wall": [117, 128], "part1": 117, "part2": 117, "j1": [117, 126, 128, 152, 170], "j2": [117, 126, 128, 152, 170], "q_j1": 117, "w_frame": 117, "q_j2": 117, "p1_frame": 117, "u_j1": 117, "cylindricaljoint": 117, "rotation_coordin": 117, "translation_coordin": 117, "rotation_spe": 117, "translation_spe": 117, "cylindr": [117, 194, 260], "q0_": 117, "q1_": 117, "u0_": 117, "u1_": 117, "q0_pc": 117, "q1_pc": 117, "u0_pc": 117, "u1_pc": 117, "tube": 117, "floor_joint": 117, "flag_joint": 117, "q0_c1": 117, "q0_c2": 117, "q1_c1": 117, "floor_fram": 117, "q1_c2": 117, "tube_fram": 117, "flag_fram": 117, "u0_c1": 117, "u0_c2": 117, "u1_c1": 117, "planarjoint": 117, "planar_coordin": 117, "planar_spe": 117, "q2_": 117, "u2_": 117, "nonparallel": 117, "q_1": [117, 126, 127, 128, 137, 153, 191, 204, 221], "q_2": [117, 126, 127, 128, 137, 191], "hat": [117, 134, 138, 182, 183, 188, 189, 191, 192, 257, 258, 260, 262, 263], "q_0": [117, 153, 221], "rotation_axi": 117, "planar_vector": 117, "q2_pc": 117, "u2_pc": 117, "parent_vector": 117, "plane_vector": 117, "g_frame": 117, "sphericaljoint": 117, "rot_typ": [117, 183, 187, 189], "rot_ord": [117, 183, 187, 255], "ball": 117, "socket": 117, "tait": [117, 183, 253, 255], "bryan": [117, 183, 253, 255], "joint_point": 117, "zxz": [117, 183, 192, 253, 255], "weldjoint": 117, "weld": 117, "quarter": [117, 145], "rotated_fram": 117, "jointsmethod": [117, 126, 128], "damper": [117, 118, 123, 128], "form_eom": [117, 128, 134], "mass_matrix_ful": [117, 118, 123, 128, 135, 136], "forcing_ful": [117, 118, 123, 128, 135, 136], "mass_matrix": [117, 118, 122, 125, 130, 131, 135, 136, 141], "lagrangesmethod": [117, 118, 127, 132, 136, 137], "qd": [117, 118, 125, 135, 187], "inv_method": [117, 118], "solveabl": 117, "q_ind": [118, 119, 123, 125, 126, 127, 130, 131, 135, 137, 140], "u_ind": [118, 119, 123, 125, 126, 127, 130, 131, 135, 137, 140], "kd_eq": [118, 123, 125, 126, 127, 130, 131, 137, 140], "q_depend": [118, 125, 126, 127, 135, 140], "configuration_constraint": [118, 125, 126, 127, 135], "u_depend": [118, 125, 126, 127, 135, 140], "velocity_constraint": [118, 125, 126, 127, 135, 140], "acceleration_constraint": 118, "u_auxiliari": [118, 131, 135, 140], "forcelist": [118, 123, 126, 127, 130, 131, 136, 137, 140], "explicit_kinemat": 118, "levinson": [118, 139, 183, 253], "udot": [118, 125], "22626": 118, "ud": [118, 135], "kd": [118, 125, 130, 131, 135], "fl": [118, 125, 135, 136, 140, 202], "bl": [118, 125, 135, 140], "frstar": [118, 123, 125, 127, 130, 131, 135, 137, 140], "kanes_equ": [118, 123, 125, 127, 130, 131, 135, 137, 140], "a_and_b": [118, 119, 127], "auxiliary_eq": [118, 131], "k_d": [118, 135], "k_dnh": 118, "f_d": [118, 135, 136, 201], "f_dnh": 118, "mass_matrix_kin": 118, "k_kqdot": 118, "forcing_kin": 118, "k_ku": 118, "constrain": [118, 127, 136, 140], "kindiffdict": [118, 125, 130, 131, 135, 140], "new_method": [118, 127], "intens": [118, 119, 142, 145], "perm_mat": [118, 119, 137], "op_point": [118, 119, 127, 137], "beforehand": [118, 241], "to_linear": [118, 137], "recalcul": [118, 204], "hol_coneq": [118, 127, 136], "nonhol_coneq": [118, 127, 136], "nonconserv": 118, "form_lagranges_equ": [118, 127, 132, 136, 137], "qdot": [118, 125, 126, 187], "qdoubledot": 118, "lam": [118, 119, 141], "lagranges_equ": 118, "qd_ind": [118, 137], "q_dep": [118, 135, 137], "qd_dep": [118, 137], "solve_multipli": [118, 127], "sol_typ": 118, "array_lik": 118, "f_3": [119, 122, 141, 224], "f_c": [119, 127], "f_v": [119, 127], "f_a": 119, "q_d": 119, "u_i": [119, 137, 191, 201], "u_d": [119, 140], "q_op": [119, 127], "u_op": [119, 127], "qd_op": 119, "ud_op": [119, 127], "spatial": [120, 147, 183, 208], "angular_momentum": [120, 138, 140], "init_vprint": [120, 121, 138, 141, 183, 185, 187, 188, 191, 192], "linear_momentum": [120, 138, 140], "inertia_tupl": 120, "mv": 120, "iyi": [120, 183], "izz": [120, 183], "ixi": [120, 183], "iyz": [120, 183], "izx": 120, "yy": [120, 192, 224], "yz": [120, 192, 194], "zx": [120, 192], "inertia_of_point_mass": 120, "pos_vec": 120, "px": [120, 163, 168, 234], "body1": 120, "body2": 120, "body3": 120, "h2": 120, "multibodi": [120, 123, 133, 139, 140, 141, 191], "vprint": [121, 182, 187, 188, 192], "vpprint": [121, 182, 188, 192], "vlatex": [121, 182, 183, 188, 192], "coord_stat": 122, "right_hand_sid": 122, "coordinate_deriv": [122, 141], "alg_con": [122, 141], "output_eqn": 122, "coord_idx": [122, 141], "speed_idx": [122, 141], "m_3": [122, 141, 152, 193], "exogen": [122, 141], "ref_fram": 122, "graviti": [122, 123, 127, 128, 130, 132, 140, 189, 262], "theta_dot": 122, "kin_explicit_rh": [122, 141], "dyn_implicit_mat": [122, 141], "dyn_implicit_rh": [122, 141], "symsystem": 122, "dae": [122, 141], "adjust": [122, 211, 215], "comb_implicit_mat": [122, 141], "comb_implicit_rh": [122, 141], "kinema": 122, "comb_explicit_rh": [122, 141], "compute_explicit_form": 122, "awhil": 122, "constant_symbol": 122, "dynamic_symbol": 122, "motiongenesi": [123, 140], "double_pendulum": 123, "motionvari": [123, 140], "newtonian": [123, 140], "simprot": [123, 140], "n_a": 123, "n_b": 123, "w_a_n": 123, "w_b_n": [123, 140], "p_o_p": 123, "p_p_r": 123, "v_o_n": [123, 140], "v2pt": [123, 140], "v_p_n": 123, "v_r_n": 123, "force_p": 123, "force_r": 123, "tfinal": 123, "integstp": 123, "some_filenam": 123, "parse_autolev": 123, "sympy_cod": 123, "include_numer": 123, "include_pydi": 123, "pydi": [123, 140, 183], "u1d": [123, 125, 127, 130, 131, 135], "u2d": [123, 125, 127, 130, 131, 135], "frame_n": 123, "frame_a": 123, "frame_b": 123, "point_o": 123, "particle_p": 123, "p_pt": 123, "particle_r": 123, "r_pt": 123, "set_po": [123, 187, 191], "v2pt_theori": [123, 125, 130, 131, 132, 137, 138, 140, 141, 187, 191], "initial_condit": [123, 140], "overwritten": 123, "e2row": 123, "eigvec": [123, 140], "eigenvec": 123, "deg2rad": 123, "0174533": 123, "wo": 123, "coef": [123, 140], "u3": [123, 125, 126, 128, 130, 131, 135, 140, 183, 187, 191], "strai": 123, "reassign": 123, "inher": [123, 247, 277], "rhs_x": 123, "i_b_bo": 123, "body_b": 123, "body_b_f": 123, "b_cm": 123, "b_f": 123, "scene": [123, 220, 277], "i_c_d": 123, "i_p_q": 123, "i_b_o": 123, "e3": [123, 215, 224], "i_p_o": 123, "e4": [123, 215], "p_so_o": 123, "nicheck": 123, "plug": [123, 178], "hurdl": 123, "gitlab": 123, "repo": 123, "ch4": 123, "ch5": 123, "ch6": 123, "cst": 123, "grammar": [123, 220], "roll": [124, 125, 133, 191, 228, 270], "disc": [124, 133, 191, 270], "bicycl": [124, 133, 139, 270], "nonminim": [124, 133, 137, 270], "linkag": [124, 133, 270], "meijaard2007": [125, 139], "steer": [125, 139], "purposefulli": 125, "mechanics_print": [125, 126, 130, 131, 132, 134, 135, 136], "yaw": 125, "ang": 125, "rear": 125, "wheel": 125, "pitch": 125, "q4": [125, 135, 185], "q5": [125, 185], "q4d": [125, 135], "q5d": 125, "u4": [125, 131, 135, 140], "u5": [125, 131], "u6": [125, 131], "u3d": [125, 130, 131], "u4d": 125, "u5d": 125, "u6d": 125, "explanatori": 125, "wfrad": 125, "wrrad": 125, "htangl": 125, "forkoffset": 125, "forklength": 125, "framelength": 125, "forkcg1": 125, "forkcg3": 125, "framecg1": 125, "framecg3": 125, "iwr11": 125, "iwr22": 125, "iwf11": 125, "iwf22": 125, "iframe11": 125, "iframe22": 125, "iframe33": 125, "iframe31": 125, "ifork11": 125, "ifork22": 125, "ifork33": 125, "ifork31": 125, "mframe": 125, "mfork": 125, "mwf": 125, "mwr": 125, "wr": 125, "tempfram": 125, "tempfork": 125, "orientnew": [125, 127, 130, 131, 132, 137, 141, 183, 185, 187, 189, 191, 192], "wr_cont": 125, "wr_mc": 125, "frame_mc": 125, "fork_mc": 125, "wf_mc": 125, "wf_cont": 125, "flip": [125, 158, 167, 228], "frame_i": 125, "fork_i": 125, "wr_i": 125, "wf_i": 125, "bodyfram": 125, "bodyfork": 125, "bodywr": 125, "bodywf": 125, "nonholonom": 125, "slip": [125, 129, 131, 191], "replic": 125, "conlist_spe": 125, "conlist_coord": 125, "gravit": [125, 130, 176, 189, 262], "aforement": [125, 189, 221, 260], "paperradrear": 125, "paperradfront": 125, "hta": 125, "trailpap": 125, "rake": 125, "paperwb": 125, "02": 125, "paperframecgx": 125, "paperframecgz": 125, "paperforkcgx": 125, "paperforkcgz": 125, "framecgnorm": 125, "framecgpar": 125, "tempa": 125, "tempb": 125, "tempc": 125, "paperforkl": 125, "forkcgnorm": 125, "forkcgpar": 125, "upright": 125, "val_dict": 125, "0603": 125, "1405": 125, "05892": 125, "00708": 125, "00756": 125, "kdd": [125, 130, 131], "centripet": 125, "corioli": 125, "forcing_lin": 125, "mm_full": 125, "_k_kqdot": 125, "xdot": 125, "lean": [125, 130, 132], "amat": 125, "summari": [126, 239, 264], "q_3": [126, 128, 191], "u_1": [126, 127, 128, 191, 203, 224], "u_2": [126, 127, 128, 191, 203, 224], "u_3": [126, 128, 191], "densiti": [126, 228, 239, 263], "link1": 126, "link2": 126, "link3": 126, "link4": 126, "joint1": 126, "joint2": 126, "joint3": 126, "j3": [126, 128, 152, 170], "fh": 126, "fhd": 126, "_method": 126, "_form_eom": 126, "eom": [127, 128, 137], "theta1": 127, "dq_dict": 127, "presimplifi": 127, "inp_vec": [127, 137], "lag": [127, 132, 137], "lm": [127, 136, 137, 201, 204], "lag_eq": [127, 137], "lam_op": 127, "mb": [128, 140], "ibzz": 128, "compound_pend": 128, "simple_pend": 128, "slider": 128, "rev1": 128, "rev2": 128, "w_r_n_qd": [130, 131], "dmc": [130, 131, 132], "uv": [130, 131, 173], "bodyd": [130, 131, 132], "bodylist": [130, 131], "revisit": [131, 191], "kane1985": [131, 135, 138, 139], "thorough": [131, 137, 221], "simplifc": 131, "f3": [131, 194, 208], "necessit": 131, "simplify_auxiliary_eq": 131, "lrh": 132, "planet": 133, "robot": 133, "fascin": 133, "trajectori": 133, "challeng": 133, "came": [133, 280], "tackl": [133, 241], "organ": 133, "amen": 133, "arduou": 133, "child_izz": 134, "child_mass": 134, "f_h": 135, "nh": 135, "ku": [135, 208], "dnh": 135, "f_r": [135, 137, 201], "speed_con": 135, "coord_con": 135, "u_dep": 135, "m_d": 136, "lam1": 136, "0_": 137, "blajer1994": [137, 139], "brought": [137, 228], "vel_p": 137, "a_op": 137, "b_op": 137, "m_op": 137, "a_lin": 137, "hasn": 137, "wikidyad": [138, 190], "wikidyadicproduct": [138, 190], "juxtaposit": [138, 182, 257], "otim": [138, 229], "l_p": 138, "likins1973": [138, 190], "l_b": 138, "requisit": 138, "t_p": 138, "t_b": 138, "t_t": 138, "virtu": [138, 140], "blajer": 139, "wojciech": 139, "werner": 139, "schiehlen": 139, "walter": 139, "schirm": 139, "kane1983": [139, 192], "likin": [139, 190], "david": [139, 204], "spacecraft": 139, "1983": [139, 243], "meijaard": 139, "jim": 139, "papadopoulo": 139, "ruina": 139, "schwab": 139, "royal": 139, "societi": [139, 221], "2084": 139, "1955": 139, "982": 139, "lectur": [140, 202, 228], "rigibodi": 140, "proprietari": 140, "k3": [140, 198], "k4": 140, "b11": 140, "b12": 140, "b21": 140, "b22": 140, "xd": 140, "xd2": 140, "y1d": 140, "y2d": 140, "tina": 140, "overwrit": [140, 182], "dt2": 140, "dy2": 140, "ty": 140, "linsolv": [140, 206, 226, 227, 286], "nonlinsolv": [140, 226, 227, 286], "rowmatrix": 140, "colmatrix": 140, "diagmat": 140, "eigval": 140, "row_matrix": 140, "col_matrix": 140, "ao": 140, "i12": 140, "i23": 140, "i31": 140, "bf": 140, "p_o_q": 140, "mag": 140, "unitvec": 140, "qo": 140, "p_p_q": 140, "partial_veloc": [140, 183, 187], "a_o_n": 140, "set_acc": [140, 187, 191], "qb": [140, 196], "qbd": 140, "alf_b_n": 140, "set_ang_acc": [140, 183], "ang_acc_in": [140, 183], "force_o": 140, "torque_a": 140, "qa": 140, "qad": 140, "a_b": 140, "v1pt": 140, "v1pt_theori": [140, 187, 191], "a1pt": 140, "a1pt_theori": [140, 187], "a2pt": 140, "a2pt_theori": [140, 187, 191], "angvel": 140, "force_vector": 140, "center_of_mass": 140, "kindiff": 140, "ke": 140, "configura": 140, "tion_constraint": 140, "pendent": 140, "velocity_con": 140, "traint": 140, "acceleration_": 140, "u_auxilia": 140, "ry": 140, "matlplotlib": 140, "stiff": 140, "damp": 140, "legend": [140, 194, 211], "introspect": 140, "rich": [140, 220], "media": [140, 146], "histori": 140, "esqu": 140, "cpython": 140, "pertin": [141, 195, 203], "alg_con_ful": 141, "symsystem1": 141, "symsystem2": 141, "symsystem3": 141, "raytransfermatrix": 142, "geometricrai": 142, "beamparamet": 142, "geometric_conj": 142, "gauss_conj": 142, "conjugate_gauss_beam": 142, "lens": 142, "gaussopt": 142, "wavelen": 142, "z_r": 142, "wavelength": [142, 147], "waist": 142, "rayleigh": [142, 228], "refract": [142, 144, 146, 147], "530e": 142, "88679245283019": 142, "92753330865999": 142, "w_0": [142, 221], "00100000000000000": 142, "freespac": 142, "00101413072159615": 142, "00210803120913829": 142, "r672": 142, "complex_beam_paramet": 142, "r673": 142, "gaussian_beam": 142, "spread": [142, 208, 228, 243], "00053": 142, "goui": 142, "55998576005696": 142, "2809": 142, "peak": 142, "waist_approximation_limit": 142, "paraxi": [142, 146], "06e": 142, "curvedmirror": 142, "curvedrefract": 142, "flatmirror": 142, "flatrefract": 142, "2x1": 142, "thinlen": 142, "r674": 142, "ray_transfer_matrix_analysi": 142, "waist_in": 142, "waist_out": 142, "s_in": 142, "s_out": 142, "w_o": 142, "gaussian_conj": 142, "z_r_in": 142, "incid": [142, 146], "z_r_out": 142, "emerg": [142, 196], "geometric_conj_ab": 142, "geometric_conj_af": 142, "geometric_conj_bf": 142, "rayleigh2waist": 142, "waist2rayleigh": 142, "optic": [144, 145, 146, 147, 270], "permitt": 144, "permeabl": 144, "fermat": 144, "electr": [144, 146, 189, 260, 262], "electromagnet": [144, 189, 234, 262], "intrinsic_imped": 144, "149896229": [144, 147], "kilogram": [144, 176, 178, 180], "1250000": 144, "amper": 144, "refractive_index": 144, "299792458": [144, 147, 180], "r675": 144, "optical_medium": 144, "travel": [144, 147, 189, 260, 262], "stoke": 145, "mueller": 145, "jones_vector": 145, "stokes_vector": 145, "half_wave_retard": 145, "polarizing_beam_splitt": 145, "jones_2_stok": 145, "\u2148": [145, 193, 207, 208, 227, 286], "\u03c7": 145, "\u03c8": 145, "i\u2080": 145, "plate": 145, "hwp": 145, "splitter": 145, "transmit": [145, 146], "pb": 145, "transmitted_port": 145, "reflected_port": 145, "transmitted_pow": 145, "reflected_pow": 145, "r676": 145, "jones_calculu": 145, "r677": 145, "mueller_calculu": 145, "r678": 145, "stokes_paramet": 145, "retard": 145, "poincar\u00e9": 145, "tilt": 145, "mayor": 145, "linear_polar": 145, "transmiss": [145, 146], "mueller_matrix": 145, "quarter_wave_retard": 145, "phase_retard": 145, "\u03b4": 145, "phia": 145, "phib": 145, "4x1": [145, 228], "phi_a": 145, "phi_b": 145, "qwp": 145, "reflective_filt": 145, "unpolar": 145, "transmissive_filt": 145, "attenu": 145, "transmitt": 145, "ndf": 145, "refraction_angl": 146, "fresnel_coeffici": 146, "brewster_angl": 146, "critical_angl": 146, "lens_makers_formula": 146, "mirror_formula": 146, "lens_formula": 146, "hyperfocal_dist": 146, "transverse_magnif": 146, "medium1": 146, "medium2": 146, "brewster": 146, "926093295503462": 146, "onset": 146, "850908514477849": 146, "02005": 146, "angle_of_incid": 146, "fresnel": [146, 208, 218], "polaris": 146, "te": 146, "undergo": 146, "317843553417859": 146, "348645229818821": 146, "658921776708929": 146, "651354770181179": 146, "235625382192159": 146, "971843958291041": 146, "816477005968898": 146, "577377951366403": 146, "r679": 146, "fresnel_equ": 146, "coc": 146, "0033": 146, "focal_length": 146, "n_len": 146, "n_surr": 146, "thick": 146, "1515151515151": 146, "0000000000000": 146, "3418463277618": 146, "41152": 146, "magnif": 146, "twave": 147, "time_period": 147, "wavenumb": 147, "phi1": 147, "phi2": 147, "w1": [147, 220], "w3": [147, 208], "superposit": [147, 158, 169, 195], "angular_veloc": 147, "tempor": 147, "r680": 148, "paulialgebra": 148, "evaluate_pauli_product": 148, "paulimatric": 148, "sigma3": 148, "nodal": [149, 174, 195], "hw": [149, 174], "coherent_st": 149, "coher": [149, 175, 181], "1d": [149, 151, 164, 183, 233], "wavefunct": [149, 162, 171, 174, 270], "r681": 150, "__cmp__": [150, 154, 173], "dagger": [150, 154, 160, 162, 165, 167, 172, 173, 270], "todo": [151, 153, 157, 158, 162, 163, 165, 166, 167, 168, 169, 201, 208, 215, 233], "operatorset": [151, 163], "positionbra3d": 151, "eigenbra": [151, 164, 170], "positionket3d": 151, "eigenket": [151, 164, 170], "positionstate3d": 151, "eigenst": [151, 163, 168, 170, 171], "position_x": 151, "position_i": 151, "position_z": 151, "pxbra": [151, 163], "pxket": [151, 163, 168], "pxop": [151, 163, 168], "xbra": [151, 163, 168], "xket": [151, 163, 168], "xop": [151, 163, 168], "yop": 151, "zop": 151, "momenta": 152, "uncoupl": [152, 170], "r682": 152, "j_3": [152, 170, 193], "r683": 152, "wigner3j": [152, 193], "wigner": [152, 170, 228, 270], "varshalovich": [152, 170], "zyla": 152, "theor": 152, "phy": [152, 178, 193], "083c01": 152, "r684": 152, "w3j": 152, "715": [152, 193, 208], "wigner6j": [152, 193], "j12": [152, 170], "j23": 152, "6j": [152, 193], "wigner9j": [152, 193], "j4": 152, "j34": 152, "j13": 152, "j24": 152, "9j": [152, 193], "cg_simp": 152, "r685": 152, "clebsh": 152, "rethink": 153, "figsiz": 153, "circuitplot": 153, "nqubit": [153, 157, 158, 167], "control_lin": 153, "gate_idx": [153, 157], "min_wir": 153, "max_wir": 153, "control_point": 153, "wire_idx": 153, "not_point": 153, "one_qubit_box": 153, "box": [153, 158, 160, 169, 171, 263, 270], "qubit": [153, 157, 158, 159, 160, 166, 270], "swap_point": 153, "two_qubit_box": 153, "createcg": 153, "latexnam": 153, "mock": 153, "mz": 153, "circuit_plot": 153, "min_qubit": [153, 157], "autogener": 153, "wire": 153, "j_0": 153, "r686": 154, "comm": [154, 173, 234], "plank": 155, "r687": 155, "05457162000000e": 155, "planck_const": 155, "hermetian": 156, "r688": 156, "r689": 156, "ket": [156, 161, 162, 163, 165, 167, 168, 171, 173], "bra": [156, 161, 162, 163, 165, 167, 168, 171, 173], "innerproduct": [156, 161, 162, 168, 170, 173], "outerproduct": [156, 162], "seamlessli": 156, "hermitian_adjoint": 156, "hermitian_transpos": 156, "_apply_operators_qubit": 157, "gate_sort": 157, "gate_simp": 157, "ugat": 157, "cgate": 157, "control_valu": 157, "cnot": 157, "eval_control": 157, "plot_gat": 157, "circ_plot": 157, "simplify_cg": 157, "cphase": 157, "cnotgat": 157, "qappli": [157, 158, 160, 162, 167, 270], "get_target_matrix": 157, "represen": 157, "hadamardg": 157, "identityg": 157, "onequbitg": 157, "phaseg": 157, "swapgat": 157, "target1": 157, "target2": 157, "tgate": 157, "twoqubitg": 157, "xgate": 157, "ygate": 157, "zgate": 157, "bubbl": 157, "random_circuit": 157, "ngate": 157, "gate_spac": 157, "mermin": 158, "_represent_zg": 158, "oracleg": 158, "oracl": 158, "intqubit": [158, 167], "search_funct": 158, "wgate": 158, "apply_grov": 158, "grover_iter": 158, "qstate": 158, "wv": 158, "superposition_basi": 158, "numqubit": 158, "basis_st": 158, "matt": 159, "complexspac": 159, "directsumhilbertspac": 159, "r690": 159, "hilbertspac": 159, "fockspac": 159, "hilbert_spac": [159, 162, 171], "direct_sum": 159, "quantiz": [159, 270], "r691": 159, "mess": [159, 224, 227, 285], "fock_spac": 159, "r692": 159, "tensorpowerhilbertspac": 159, "r693": 159, "tensor_product": 159, "tensorproducthilbertspac": 159, "r694": 159, "clebsch": [160, 170, 193, 270], "gordan": [160, 170, 193, 270], "hilbert": [160, 162, 168, 270], "grover": [160, 270], "qft": [160, 169, 270], "shor": [160, 270], "brabas": [161, 162, 168, 171], "ketbas": [161, 162, 168, 171], "r695": 161, "inner_product": 161, "apply_oper": [162, 173], "identityoper": 162, "r696": 162, "r697": 162, "polymoni": 162, "operator_": 162, "28physic": 162, "old_assumpt": 162, "r698": 162, "outer_product": 162, "unitaryoper": 162, "operators_to_st": 163, "state_to_oper": 163, "_operators_to_st": 163, "state_map": 163, "_state_to_oper": 163, "statebas": [163, 168, 171], "piab": 164, "piabbra": 164, "piabhamiltonian": 164, "piabket": 164, "ip_doit": 165, "smarter": [166, 217], "rk": 166, "iqft": 166, "rkgate": 166, "qtf": 166, "povm": 167, "as_int": [167, 249], "qubit_valu": 167, "intqubitbra": 167, "00001": 167, "qubitbra": 167, "matrix_to_dens": 167, "matrix_to_qubit": 167, "measure_al": 167, "ensembl": 167, "measure_all_oneshot": 167, "oneshot": 167, "measure_parti": 167, "measure_partial_oneshot": 167, "qubit_to_matrix": 167, "enumerate_st": 168, "_enumerate_st": 168, "foo_1": 168, "foo_2": 168, "foo_3": 168, "test2": 168, "bar_4": 168, "bar_5": 168, "bar_10": 168, "get_basi": 168, "replace_non": 168, "operator_to_st": 168, "qexpr": 168, "integrate_result": 168, "orig_expr": 168, "x_ket": 168, "x_op": 168, "rep_expect": 168, "px_2": 168, "px_1": 168, "rep_innerproduct": 168, "_repres": 168, "_represent_foobasi": 168, "foobasi": 168, "_represent_szop": 168, "szupket": 168, "szop": 168, "sz": 168, "cmod": 169, "reformat": 169, "period_find": 169, "momemtum": 170, "j2op": 170, "jxbra": 170, "jx": 170, "jzket": 170, "jxbracoupl": 170, "jcoupl": 170, "jzketcoupl": 170, "jxket": 170, "jxketcoupl": 170, "jybra": 170, "jy": 170, "jybracoupl": 170, "jyket": 170, "jyketcoupl": 170, "jzbra": 170, "jz": 170, "jzbracoupl": 170, "j_4": [170, 193], "argular": 170, "jzop": 170, "passiv": 170, "r699": 170, "wignerd": 170, "mp": [170, 226, 242], "jm": 170, "jj": 170, "r700": 170, "jcoupling_list": 170, "coupledspinst": 170, "spinstat": 170, "r701": 171, "dual_class": 171, "mn": [171, 208, 228], "ket_not": 171, "r702": 171, "k0": [171, 199, 201, 228], "orthogonalbra": 171, "orthogonalket": 171, "orthogonalst": 171, "_eval_adjoint": 171, "timedepbra": 171, "timedepst": 171, "timedepket": 171, "prob": [171, 228], "412214747707527": 171, "matrix_tensor_product": 172, "axb": 172, "xdagger": 172, "axc": 172, "bxc": 172, "tensor_product_simp": 172, "cxd": 172, "boson": 173, "fetter": 173, "welecka": 173, "secondqu": 173, "annihilateboson": 173, "fockstateket": 173, "bket": 173, "fockstatebosonket": 173, "annihilatefermion": 173, "createboson": 173, "is_only_q_annihil": 173, "destroi": [173, 217], "quasi": 173, "hole": 173, "is_only_q_cr": 173, "is_q_annihil": 173, "is_q_creat": 173, "antisymmetrictensor": 173, "bbra": 173, "fockstatebosonbra": 173, "bd": 173, "bosonicbasi": 173, "fock": 173, "NO": 173, "createfermion": 173, "wick": 173, "fbra": 173, "fockstatefermionbra": 173, "fket": 173, "fockstatefermionket": 173, "fixedbosonicbasi": 173, "n_particl": 173, "n_level": 173, "fockstat": 173, "occup": 173, "bosonbra": 173, "fockstatebra": 173, "fermi_level": 173, "r703": 173, "textwrap": [173, 249], "_q": 173, "get_subno": 173, "fermionicoper": 173, "has_q_annihil": 173, "q_annihil": 173, "has_q_creat": 173, "leftmost": 173, "q_creator": 173, "iter_q_annihil": 173, "iter_q_cr": 173, "0x": 173, "permutationoper": 173, "get_permut": 173, "varbosonicbasi": 173, "n_max": 173, "creator": 173, "evaluate_delta": 173, "einstein": [173, 234], "d_ij": 173, "_j": [173, 178, 193, 210], "d_ip": 173, "d_qp": 173, "matrix_rep": 173, "simplify_index_permut": 173, "permutation_oper": 173, "schemat": [173, 178], "abij": 173, "abji": 173, "baij": 173, "baji": 173, "permutlist": 173, "substitute_dummi": 173, "new_indic": 173, "pretty_indic": 173, "_get_ordered_dummi": 173, "_c": 173, "_d": 173, "index_group": 173, "string_of_lett": 173, "my_dummi": 173, "_v": [173, 192], "_p_0": 173, "_p_1": 173, "keep_only_fully_contract": 173, "sho": 174, "isotrop": 174, "mk": [175, 178], "legal": 175, "temperatur": [175, 189, 262], "dimensions": 175, "dimsys_si": [175, 176], "get_dimensional_depend": [175, 176], "has_integer_pow": 175, "dim_si": 175, "base_dim": 175, "derived_dim": 175, "dimensional_depend": 175, "can_transf_matrix": 175, "useless": [175, 199, 201], "inv_can_transf_matrix": 175, "dim_can_vector": 175, "dim_vector": 175, "is_consist": [175, 181], "is_dimensionless": 175, "list_can_dim": 175, "print_dim_bas": 175, "gravitational_const": [176, 180], "equivalent_dim": 176, "grav_eq": 176, "kepler": [176, 253], "venu": 176, "701": 176, "dai": [176, 180, 224], "venus_a": 176, "108208000e3": 176, "solar": 176, "solar_mass": 176, "9891e30": 176, "convert_to": [176, 180, 197, 203], "5112118495813": 176, "659097795948": 176, "astrophys": 176, "ill": 176, "astrophysicist": 177, "ua": [177, 196], "earth": [177, 189, 262], "sun": 177, "theoricist": 177, "philosophi": [177, 224, 227, 270], "rough": 178, "mole": 178, "dimensionless": 178, "unavoid": 178, "d_3": 178, "d_2": [178, 204, 228], "underbrac": [178, 191], "countabl": [178, 227], "pmatrix": 178, "kg": [178, 263], "glu": 178, "men": 178, "heat": 178, "joul": 178, "calori": 178, "stori": 178, "chemistri": 178, "page52": 178, "1952": 178, "page78": 178, "deboer79": 178, "boer": 178, "818": 178, "levyleblond77": 178, "l\u00e9vy": 178, "leblond": 178, "conceptu": [178, 195, 262], "rivista": 178, "del": [178, 243, 253, 261, 285], "nuovo": [178, 193], "cimento": [178, 193], "1977": 178, "187": [178, 202], "214": 178, "anticip": 178, "bin_prefix": 179, "abbrev": [179, 180, 208], "latex_repr": [179, 180], "encapsul": [179, 201, 227, 241], "kilo": 179, "scale_factor": 180, "pretty_unicode_repr": 180, "pretty_ascii_repr": 180, "mathml_presentation_repr": 180, "is_prefix": 180, "abbrevi": [180, 196, 208, 227, 229], "speed_of_light": 180, "reference_quant": 180, "target_unit": 180, "mile": 180, "atomic_mass_const": 180, "centimet": 180, "25146": 180, "609344": 180, "86400": 180, "660539060e": 180, "300000": 180, "planck": 180, "62963087839509e": 180, "base_unit": 181, "descr": 181, "dimension_system": 181, "derived_unit": 181, "overridden": [181, 195, 210, 285], "get_units_non_prefix": 181, "rigidli": 182, "entireti": 182, "_str": 182, "coordinatesym": [183, 185], "otherfram": [183, 253], "n_alpha_b": 183, "ny": 183, "_3": [183, 193], "orient_body_fix": 183, "orient_space_fix": 183, "orient_quaternion": 183, "quaternion": [183, 187, 192, 253, 255], "userwarn": [183, 237, 244, 281], "rotation_ord": [183, 253, 255], "xzx": 183, "xyx": [183, 253, 255], "yzy": 183, "zyz": 183, "yxy": [183, 192], "yzx": [183, 192], "zxy": 183, "xzy": 183, "zyx": 183, "yxz": 183, "orient_explicit": 183, "lambda_x": [183, 253, 255], "lambda_i": [183, 253, 255], "lambda_z": [183, 253, 255], "q0": [183, 224, 253, 255], "newnam": 183, "gen_spe": [183, 187], "variable_map": 183, "a_x": [183, 192, 208], "b_x": [183, 185, 192, 234], "b_y": [183, 185, 192, 234], "a_z": [183, 192], "b_z": [183, 192, 234], "inlist": 183, "var_in_dcm": 183, "reexpress": [183, 258], "time_deriv": [183, 185, 189], "free_dynamicsymbol": 183, "codirect": 183, "dyadic_tensor": [183, 253], "frame1": 183, "frame2": [183, 185], "second_reference_fram": 183, "ixz": 183, "inertia_dyad": 183, "pertain": [184, 190], "fieldfunct": [184, 189], "curl": [184, 253, 256, 263], "vect": [184, 253, 256], "r_x": [184, 189], "r_y": [184, 189], "r_z": [184, 189], "gradient": [184, 193, 194, 253, 256, 262], "scalar_potenti": [184, 189, 256, 260], "scalar_field": [184, 189, 253, 256, 260], "grad_field": [184, 256], "scalar_potential_differ": [184, 189, 256, 260], "sympyfi": [184, 185, 187, 256], "position2": [184, 256], "vectfield": [184, 189, 256, 260], "is_conserv": [184, 189, 256, 260], "is_solenoid": [184, 189, 256, 260], "solenoid": [184, 256], "q6": 185, "vec1": 185, "vec2": 185, "n_x": 185, "rotating_reference_fram": 185, "time_derivatives_in_the_two_fram": 185, "otherpoint": 187, "outfram": 187, "fixedfram": 187, "get_motion_param": 187, "vectori": [187, 189, 257, 262], "timevalue1": 187, "timevalue2": 187, "313": 187, "vel_vec": 187, "q1dd": 188, "q2dd": 188, "charg": [189, 262], "displac": [189, 191, 262], "temper": 189, "4xy": [189, 262], "electric_potenti": [189, 260], "r1_x": 189, "r1_y": 189, "infinitesim": [189, 224, 260], "nabla": [189, 253, 259, 260], "f_y": [189, 260], "f_x": [189, 227, 260], "sink": [189, 260], "irrot": [189, 260], "conservative_field": [189, 260], "aug": [190, 227], "dyadic_product": [190, 261], "inc": [190, 202], "w_x": 191, "w_y": 191, "w_z": 191, "w_1": [191, 203], "w_2": [191, 203], "w_3": 191, "textrm": [191, 192, 216], "u_x": 191, "sp": 191, "oq": 191, "qp": 191, "rod": 191, "went": 191, "parallelogram": 192, "c_x": 192, "c_y": 192, "c_z": 192, "train": 192, "friend": 192, "xz": [192, 194], "zy": 192, "undergon": [192, 227], "vastli": 192, "wait": 192, "mold": 192, "bp": [192, 224], "bpp": 192, "zzx": 192, "multifram": 192, "direction": 192, "racah": 193, "gaunt": 193, "rasch03": 193, "regge58": 193, "regg": 193, "544": 193, "regge59": 193, "116": [193, 202], "1959": 193, "edmonds74": 193, "edmond": 193, "princeton": [193, 228], "1957": 193, "rasch": 193, "siam": [193, 246], "sci": 193, "1416": 193, "1428": 193, "liberatodebrito82": 193, "liberato": 193, "brito": 193, "homeier96": 193, "homeier": 193, "steinborn": 193, "mol": 193, "368": 193, "1996": [193, 202, 218, 226, 253], "forum": [193, 227], "m4nzdu": 193, "7o38": 193, "jen": 193, "03": [193, 228], "oscar": 193, "gerardo": 193, "lazo": 193, "arjona": 193, "phil": 193, "adam": [193, 204], "lemaitr": 193, "2022": 193, "jyr2000": 193, "gmail": 193, "clebsch_gordan": 193, "2j_3": 193, "dot_rot_grad_ynm": 193, "_l": 193, "l_2": 193, "l_3": 193, "drastic": 193, "2l_1": 193, "2l_2": 193, "2l_3": 193, "1200": 193, "00689500421922113448": 193, "inflect": 193, "unsuit": 193, "dd": [193, 213], "ee": [193, 203], "j_5": 193, "j_6": 193, "richer": 193, "real_gaunt": 193, "realgaunt": 193, "m0": [193, 234], "00002480019791932209313156167": 193, "wigner_3j": 193, "wigner_6j": 193, "wigner_9j": 193, "j_7": 193, "j_8": 193, "j_9": 193, "05555555": 193, "1666666": 193, "wigner_d": 193, "j_z": 193, "j_y": 193, "\u03b3": [193, 275, 285], "wigner_d_smal": 193, "textbackend": 194, "plot_parametr": 194, "plot_implicit": 194, "plot3d_parametric_lin": 194, "plot3d_parametric_surfac": 194, "xlabel": 194, "ylabel": 194, "zlabel": 194, "aspect_ratio": 194, "ylim": 194, "axis_cent": 194, "xscale": 194, "yscale": 194, "autoscal": 194, "textplot": 194, "_seri": [194, 205], "baseseri": 194, "nonparametr": 194, "basebackend": 194, "parametric2dlineseri": 194, "parametric3dlineseri": 194, "red": 194, "cyan": 194, "grayscal": 194, "integers_onli": 194, "surfaceover2drangeseri": 194, "parametricsurfaceseri": 194, "surface_color": 194, "range1": 194, "range2": 194, "fill_between": 194, "inch": 194, "expr_x": 194, "expr_i": 194, "canva": 194, "range_x": 194, "range_i": 194, "nb_of_points_x": 194, "nb_of_points_i": 194, "expr_z": 194, "range_u": 194, "range_v": 194, "nb_of_points_u": 194, "nb_of_points_v": 194, "x_var": 194, "y_var": 194, "mesh": 194, "p8": 194, "p9": 194, "nrow": [194, 197], "ncolumn": 194, "stuff": [194, 239, 241, 249], "is_2dlin": 194, "oblig": 194, "only_integ": 194, "get_seg": 194, "get_color_arrai": 194, "var_start_end": 194, "r704": 194, "luiz": 194, "henriqu": 194, "figueiredo": 194, "r705": 194, "line3dbaseseri": 194, "surfacebaseseri": 194, "var_start_end_x": 194, "var_start_end_i": 194, "var_start_end_u": 194, "var_start_end_v": 194, "implicitseri": 194, "has_equ": 194, "use_interval_math": 194, "centric": 194, "get_mesh": 194, "process_seri": 194, "_process_seri": 194, "keyboard": 194, "mous": 194, "pyglet_plot": 194, "screenshot": 194, "camera": 194, "zoom": 194, "numpad": 194, "ordin": [194, 224, 249], "f5": 194, "f6": 194, "f8": 194, "drag": 194, "button": [194, 240], "curvilinear": [194, 257, 258], "__setitem__": 194, "zfade4": 194, "key1": 194, "value1": 194, "key2": 194, "value2": 194, "unbound_theta": 194, "wirefram": 194, "saddl": 194, "fz": 194, "_______________________________________________________": 194, "mediterranean": 195, "cultur": 195, "arab": 195, "lighten": 195, "tapestri": 195, "woven": 195, "european": 195, "soil": 195, "plausibl": 195, "teeter": 195, "totter": 195, "outweigh": 195, "excit": 195, "amus": 195, "kempf": 195, "1944": 195, "20th": 195, "dedekind": 195, "intim": 195, "disciplin": 195, "toolset": 195, "atiyah69": [195, 202], "gear": 195, "greuel2008": [195, 202], "interspers": 195, "lr": 195, "ilex": 195, "\u211a": [195, 208], "localis": 195, "abridg": 195, "free_modul": [195, 199], "quotient_r": [195, 199], "overload": [195, 198, 199, 257, 280], "polynomialr": [195, 199, 206], "domain_or_r": [195, 199], "quotientr": [195, 199], "base_id": [195, 199], "elbow": 195, "room": 195, "componentwis": [195, 208], "inclin": 195, "biproduct": 195, "quotient_modul": 195, "is_submodul": 195, "multiply_id": 195, "identity_hom": 195, "freemodul": 195, "freemoduleel": 195, "conicis": 195, "_contain": 195, "_syzygi": 195, "_in_terms_of_gener": 195, "_intersect": 195, "_module_quoti": 195, "reduce_el": [195, 203], "represantit": 195, "in_terms_of_gener": 195, "inclusion_hom": 195, "rela": 195, "relb": 195, "is_full_modul": 195, "module_quoti": 195, "opt": [195, 201, 220, 239, 281], "coincis": 195, "syzygy_modul": 195, "r_n": 195, "_contains_elem": 195, "_contains_id": 195, "_quotient": 195, "_union": 195, "_product": 195, "is_whole_r": 195, "is_maxim": 195, "is_primari": 195, "is_rad": 195, "is_princip": 195, "xj": 195, "satur": 195, "subquoti": 195, "quotientmodul": 195, "subquotientmodul": 195, "killed_modul": 195, "quotientmoduleel": 195, "kill": [195, 199, 239], "quotient_hom": 195, "ker": 195, "surject": 195, "cokernel": 195, "coker": 195, "meaningfulli": 195, "restrict_domain": 195, "homomoprh": 195, "modulehomomorph": [195, 203], "_ker": 195, "_img": 195, "_kernel": 195, "_imag": 195, "_restrict_domain": 195, "_restrict_codomain": 195, "_quotient_domain": 195, "_quotient_codomain": 195, "_appli": 195, "_mul_scalar": 195, "_compos": 195, "_add": [195, 214], "is_inject": 195, "quotient_domain": 195, "is_isomorph": 195, "preimag": 195, "restrict_codomain": 195, "is_surject": 195, "quotient_codomain": 195, "induct": 195, "monogen": 195, "monogenicfiniteextens": [195, 199], "finiteextens": 195, "sqrt2": [195, 198], "_5": 195, "extensionel": [195, 199], "notinvert": [195, 201, 204], "overview": [196, 227, 261, 262], "nu_1": 196, "nu_2": 196, "nu_n": 196, "nu_i": 196, "customarili": 196, "irreduc": [196, 199, 201, 203, 204, 207, 228, 234, 285], "endow": [196, 204], "resp": [196, 199, 224], "divmod": [196, 198, 199], "cb": [196, 246], "sqf_list": [196, 199, 204], "sqf": [196, 199, 204, 221], "buchberg": [196, 201, 202, 204], "solve_poly_system": [196, 204, 226, 227], "ddm": 197, "fmt": [197, 199, 203], "matrix1": 197, "sdm": [197, 201], "dmnonsquarematrixerror": 197, "zz_i": [197, 198], "from_dict_sympi": 197, "ncol": 197, "elemsdict": 197, "from_list_sympi": 197, "from_list": [197, 199, 204, 205], "construct_domain": [197, 198, 199, 204], "from_rep": 197, "drep": 197, "dm": [197, 203], "ownership": 197, "scc": 197, "substract": 197, "to_dens": 197, "to_field": [197, 199, 204], "to_spars": 197, "aq": 197, "ccc": [197, 227], "from_ddm": 197, "domainerror": [197, 201, 204], "to_ddm": 197, "r706": 197, "pythonmpq": [198, 199], "srepr": [198, 280], "strength": 198, "richardon": 198, "dup_factor_list": 198, "factortool": [198, 201], "dup_": [198, 201], "dmp_": [198, 201], "z1": [198, 199, 226], "is_field": [198, 199], "quo": [198, 199, 201, 204], "rem": [198, 199, 201, 204], "exquo": [198, 199, 204], "exactquotientfail": [198, 199, 201, 204], "mpz": [198, 199], "of_typ": [198, 199], "z1_sympi": 198, "to_sympi": [198, 199], "from_sympi": [198, 199], "forth": [198, 203], "z_sympi": 198, "z_zz": 198, "coercionfail": [198, 201], "sum_domain": 198, "expressions_sympi": 198, "expressions_dom": 198, "result_dom": 198, "e_dom": 198, "result_sympi": 198, "qq_i": 198, "gaussianinteg": [198, 199], "gaussianrationalfield": [198, 199], "gaussianr": [198, 199], "galoi": [198, 201, 203], "finitefield": [198, 199], "pythonfinitefield": [198, 199], "gmpyfinitefield": [198, 199], "welcom": [198, 224, 278], "realel": [198, 199], "complexel": [198, 199], "mpc": 198, "xr": [198, 206], "zc": 198, "1j": 198, "_mpc_": 198, "realfield": [198, 199], "rr100": 198, "33333333333333333333333333333": 198, "hack": [198, 224, 237], "algebraic_field": [198, 199, 201, 203], "algebraicfield": [198, 199, 201, 203], "sqrt3": 198, "x_dom": 198, "p_expr": [198, 199], "polyel": [198, 199, 201, 205, 206, 208], "p_dom": 198, "xk": [198, 199, 210], "yk": [198, 199], "poly_r": [198, 199], "old_polynomialr": 198, "globalpolynomialr": 198, "polyclass": [198, 199, 204], "yr": [198, 206], "broader": 198, "get_field": [198, 199], "frac_field": [198, 199], "rationalfield": [198, 199], "old_frac_field": [198, 199], "fractionfield": [198, 199], "old_fractionfield": 198, "xf": 198, "yf": 198, "fracfield": [198, 199], "expressiondomain": [198, 199], "elements_sympi": 198, "elements_k": 198, "convert_from": [198, 199], "num_zz": 198, "num_qq": 198, "domainel": [198, 199, 206], "encompass": 198, "all_coeff": [198, 199, 204], "dom": [198, 199, 201, 216], "strang": 198, "hybrid": 198, "unreli": 198, "usefulli": 199, "pythonr": [199, 206], "p_domain": 199, "ez": [199, 234], "get_r": 199, "has_assoc_field": 199, "has_assoc_r": 199, "alg_field_from_poli": [199, 203], "root_index": 199, "almosteq": 199, "cyclotomic_field": [199, 203], "zeta7": 199, "zeta_": 199, "lexord": [199, 204], "from_algebraicfield": 199, "from_complexfield": 199, "from_expressiondomain": 199, "from_expressionrawdomain": 199, "from_ff": 199, "modularinteg": 199, "from_ff_gmpi": 199, "from_ff_python": 199, "from_fractionfield": 199, "from_globalpolynomialr": 199, "from_monogenicfiniteextens": 199, "from_polynomialr": 199, "from_qq_gmpi": 199, "from_qq_python": 199, "from_realfield": 199, "from_zz_gmpi": 199, "from_zz_python": 199, "gcdex": [199, 204], "get_exact": 199, "half_gcdex": [199, 204], "is_pid": 199, "is_r": 199, "is_nonposit": 199, "is_on": [199, 204], "rersiv": 199, "__neg__": 199, "__pos__": 199, "__sub__": 199, "q_domain": 199, "q_expr": 199, "x_domain": 199, "alg": [199, 203, 207], "trait": 199, "is_unit": 199, "__divmod__": 199, "__floordiv__": 199, "__mod__": [199, 203], "simpledomain": 199, "compositedomain": 199, "from_qq": 199, "from_zz": 199, "gmpyinteg": 199, "pythoninteg": 199, "gmpyrationalfield": 199, "pythonrationalfield": 199, "from_gaussianrationalfield": 199, "gaussianel": 199, "gaussiandomain": 199, "qq_python": 199, "zz_python": 199, "z2": 199, "z3": 199, "z4": 199, "from_gaussianinteg": 199, "as_algebraicfield": 199, "orig_ext": 199, "integral_basi": [199, 203], "maximal_ord": [199, 203], "zeta5": 199, "primes_abov": [199, 203], "primeid": [199, 203], "to_alg_num": [199, 203], "legibl": 199, "to_rat": 199, "mpelement": 199, "complexfield": 199, "lc": [199, 201, 204], "domain_or_field": 199, "dmf": 199, "coercibl": 199, "monomialord": [199, 204], "xring": 199, "vring": 199, "sring": [199, 205, 206], "polyr": [199, 201, 206], "factor_list": [199, 204, 285], "add_gen": 199, "drop_to_ground": 199, "monomial_basi": 199, "206": [199, 204], "744": 199, "945": [199, 205], "is_monomi": [199, 204], "const": [199, 208], "coeffcient": [199, 201], "inplac": 199, "shallow": [199, 215], "zero_monom": 199, "fv": 199, "clo": 199, "p64": 199, "qv": 199, "f0": 199, "imul_num": 199, "itercoeff": 199, "itermonom": 199, "iterterm": 199, "leading_expv": 199, "leading_monom": 199, "leading_term": 199, "listcoeff": 199, "listmonom": 199, "listterm": 199, "monom": [199, 204], "strip_zero": 199, "tail_degre": 199, "xfield": 199, "vfield": [199, 259], "sfield": [199, 259], "fracel": [199, 208], "lev": 199, "add_ground": [199, 204], "all_monom": [199, 204], "all_term": [199, 204], "cauchy_lower_bound": 199, "cauchy_upper_bound": 199, "clear_denom": [199, 204], "count_complex_root": 199, "sup": [199, 204, 208, 215, 216], "count_real_root": 199, "deflat": [199, 204], "y_i": [199, 201, 203, 204, 224], "x_j": [199, 201, 204], "degree_list": [199, 204], "eject": [199, 204], "exquo_ground": [199, 204], "factor_list_includ": [199, 204], "from_dict": [199, 204], "from_sympy_list": 199, "gff_list": [199, 204], "homogeneous_ord": [199, 204, 221, 224], "is_cyclotom": [199, 204], "is_ground": [199, 204], "is_homogen": [199, 204], "is_irreduc": [199, 204], "is_linear": [199, 204], "is_mon": [199, 204], "is_quadrat": [199, 204], "is_sqf": [199, 204], "l1_norm": [199, 204], "l2_norm_squar": 199, "max_norm": [199, 204], "mignotte_sep_bound_squar": 199, "mignott": [199, 201], "mul_ground": [199, 204], "pdiv": [199, 204], "pexquo": [199, 204], "pquo": [199, 204], "prem": [199, 204], "quo_ground": [199, 204], "refine_root": [199, 203, 204], "includepr": [199, 201, 204], "sqf_list_includ": [199, 204], "sqf_norm": [199, 204], "sqf_part": [199, 204], "sqr": [199, 204], "sturm": [199, 204], "sub_ground": [199, 204], "to_dict": 199, "to_exact": [199, 204], "to_r": [199, 204], "to_sympy_dict": 199, "to_sympy_list": 199, "to_tupl": 199, "total_degre": [199, 204, 221], "trunc": [199, 204, 207], "frac_unifi": 199, "half_per": 199, "poly_unifi": 199, "gr\u00f6bner": 200, "wester": [200, 271], "agca": [200, 271], "l0": 201, "legitim": 201, "uninterest": 201, "bulk": [201, 218], "x_u": 201, "dup__": 201, "densebas": 201, "dmp_lc": 201, "poly_lc": 201, "dmp_tc": 201, "poly_tc": 201, "dmp_ground_lc": 201, "dmp_ground_tc": 201, "dmp_true_lt": 201, "n_1": [201, 226, 228], "n_k": 201, "dmp_degre": 201, "dmp_degree_in": 201, "dmp_degree_list": 201, "dmp_strip": 201, "dmp_valid": 201, "dup_revers": 201, "dmp_copi": 201, "dmp_to_tupl": 201, "dmp_normal": 201, "dmp_convert": 201, "to_domain": 201, "dmp_from_sympi": 201, "dmp_nth": 201, "dmp_ground_nth": 201, "dmp_zero_p": 201, "dmp_zero": 201, "dmp_one_p": 201, "dmp_one": 201, "dmp_ground_p": 201, "dmp_ground": 201, "dmp_negative_p": 201, "dmp_positive_p": 201, "dmp_from_dict": 201, "dmp_to_dict": 201, "dmp_swap": 201, "dmp_permut": 201, "dmp_nest": 201, "dmp_rais": 201, "dmp_deflat": 201, "dmp_multi_defl": 201, "dmp_inflat": 201, "dmp_exclud": 201, "dmp_includ": 201, "dmp_inject": 201, "dmp_eject": 201, "dmp_terms_gcd": 201, "dmp_list_term": 201, "dmp_apply_pair": 201, "dmp_slice": 201, "dup_random": 201, "densearith": 201, "dmp_add_term": 201, "dmp_sub_term": 201, "dmp_mul_term": 201, "dmp_add_ground": 201, "dmp_sub_ground": 201, "dmp_mul_ground": 201, "dmp_quo_ground": 201, "dmp_exquo_ground": 201, "dup_lshift": 201, "dup_rshift": 201, "dmp_ab": 201, "dmp_neg": 201, "dmp_add": 201, "dmp_sub": 201, "dmp_add_mul": 201, "dmp_sub_mul": 201, "dmp_mul": 201, "dmp_sqr": 201, "dmp_pow": 201, "dmp_pdiv": 201, "dmp_prem": 201, "dmp_pquo": 201, "dmp_pexquo": 201, "dmp_rr_div": 201, "dmp_ff_div": 201, "dmp_div": 201, "dmp_rem": 201, "dmp_quo": 201, "dmp_exquo": 201, "dmp_max_norm": 201, "dmp_l1_norm": 201, "dmp_expand": 201, "densetool": 201, "dmp_integr": 201, "dmp_integrate_in": 201, "dmp_diff": 201, "dmp_diff_in": 201, "dmp_eval": 201, "dmp_eval_in": 201, "dmp_eval_tail": 201, "dmp_diff_eval_in": 201, "dmp_trunc": 201, "dmp_ground_trunc": 201, "dup_mon": 201, "dmp_ground_mon": 201, "dup_cont": 201, "dmp_ground_cont": 201, "dup_primit": 201, "dmp_ground_primit": 201, "dup_extract": 201, "dmp_ground_extract": 201, "dup_real_imag": 201, "bivari": [201, 207, 224, 228], "dup_mirror": 201, "dup_scal": 201, "dup_shift": 201, "dup_transform": 201, "dmp_compos": 201, "dup_decompos": 201, "t_m": 201, "r707": 201, "dmp_lift": 201, "dup_sign_vari": 201, "dmp_clear_denom": 201, "k_0": 201, "dmp_revert": 201, "gf_": 201, "justifi": 201, "necess": 201, "u_0": 201, "m_0": [201, 221], "m_n": 201, "gf_crt1": 201, "9215": 201, "9405": 201, "9603": 201, "gf_crt2": 201, "gf_int": 201, "gf_degre": 201, "gf_lc": 201, "gf_tc": 201, "gf_strip": 201, "gf_trunc": 201, "gf_normal": 201, "gf_from_dict": 201, "gf_to_dict": 201, "gf_from_int_poli": 201, "gf_to_int_poli": 201, "gf_neg": 201, "gf_add_ground": 201, "gf_sub_ground": 201, "gf_mul_ground": 201, "gf_quo_ground": 201, "gf_add": 201, "gf_sub": 201, "gf_mul": 201, "gf_sqr": 201, "gf_add_mul": 201, "gf_sub_mul": 201, "gf_expand": 201, "gf_div": 201, "r708": 201, "monagan93": [201, 202], "r709": 201, "gathen99": [201, 202], "gf_rem": 201, "gf_quo": 201, "gf_exquo": 201, "gf_lshift": 201, "gf_rshift": 201, "gf_pow": 201, "gf_pow_mod": 201, "r710": 201, "gf_gcd": 201, "gf_lcm": 201, "gf_cofactor": 201, "gf_gcdex": 201, "eea": 201, "r711": 201, "gf_monic": 201, "gf_diff": 201, "gf_eval": 201, "gf_multi_ev": 201, "gf_compos": 201, "gf_compose_mod": 201, "gf_trace_map": 201, "r712": 201, "gathen92": [201, 202], "gf_random": 201, "gf_irreduc": 201, "gf_irreducible_p": 201, "gf_sqf_p": 201, "gf_sqf_part": 201, "gf_sqf_list": 201, "e_2": [201, 204], "e_k": 201, "f_j": [201, 218], "gf_sqf": 201, "r713": 201, "geddes92": [201, 202], "gf_qmatrix": 201, "berlekamp": 201, "gf_qbasi": 201, "gf_berlekamp": 201, "gf_zassenhau": 201, "gf_shoup": 201, "gf_factor_sqf": 201, "gf_factor": 201, "e_d": 201, "cantor": 201, "zassenhau": [201, 203], "shoup": [201, 202], "kaltofen": [201, 202], "gathen": [201, 202], "gf_factor_method": 201, "r714": 201, "gf_valu": 201, "2204": 201, "gf_csolv": 201, "congruent": [201, 218, 221], "189": 201, "112": [201, 205], "139": 201, "r715": 201, "ivan": 201, "niven": 201, "zuckerman": 201, "montgomeri": 201, "infeas": [201, 204], "sdm_": 201, "distributedmodul": 201, "sdm_monomial_mul": 201, "sdm_monomial_deg": 201, "f_5": 201, "sdm_monomial_divid": 201, "sdm_lc": 201, "sdm_to_dict": 201, "sdm_from_dict": 201, "dic": 201, "sdm_add": 201, "2f_1": 201, "3f_1": 201, "yf_1": 201, "xf_1": 201, "sdm_lm": 201, "sdm_lt": 201, "sdm_mul_term": 201, "2xy": [201, 279], "8xy": 201, "2y": [201, 221, 224, 227, 279], "sdm_zero": 201, "sdm_deg": 201, "sdm_from_vector": 201, "sdm_to_vector": 201, "variant": [201, 224, 227], "qg": 201, "remark": [201, 207, 218, 224], "uf": 201, "vg": 201, "zout": 201, "euclidtool": 201, "dmp_half_gcdex": 201, "dmp_gcdex": 201, "dmp_invert": 201, "dmp_euclidean_pr": 201, "dmp_primitive_pr": 201, "exceedingli": 201, "collin": [201, 202], "collins67": [201, 202], "subdomain": 201, "2l": 201, "remainin": 201, "subdetermin": 201, "n_2": [201, 228], "n_": [201, 221], "abnorm": 201, "gamma_i": 201, "brown": [201, 202, 228], "traub": [201, 202], "browntraub71": [201, 202], "brown78": [201, 202], "discoveri": [201, 281], "dmp_inner_subresult": 201, "729": 201, "sre": 201, "dmp_subresult": 201, "dmp_prs_result": 201, "dmp_zz_modular_result": 201, "dmp_zz_collins_result": 201, "dmp_qq_collins_result": 201, "dmp_result": 201, "dmp_discrimin": 201, "dmp_rr_prs_gcd": 201, "cff": [201, 204], "cfg": [201, 204], "dmp_ff_prs_gcd": 201, "dmp_zz_heu_gcd": 201, "r716": 201, "liao95": [201, 202], "dmp_qq_heu_gcd": 201, "dmp_inner_gcd": 201, "dmp_gcd": 201, "dmp_lcm": 201, "dmp_content": 201, "dmp_primit": 201, "dmp_cancel": 201, "dmp_trial_divis": 201, "dmp_zz_mignotte_bound": 201, "dup_zz_hensel_step": 201, "hensel": 201, "r717": 201, "dup_zz_hensel_lift": 201, "f_list": 201, "multifactor": 201, "r718": 201, "dup_zz_zassenhau": 201, "dup_zz_irreducible_p": 201, "eisenstein": 201, "dup_cyclotomic_p": 201, "bradford": 201, "russel": 201, "251": 201, "berlin": 201, "heidelberg": 201, "dup_zz_cyclotomic_poli": 201, "dup_zz_cyclotomic_factor": 201, "r719": 201, "weisstein09": [201, 202], "dup_zz_factor_sqf": 201, "dup_zz_factor": 201, "r720": 201, "dmp_zz_wang_non_divisor": 201, "wang": [201, 202], "eez": 201, "dmp_zz_wang_test_point": 201, "dmp_zz_wang_lead_coeff": 201, "dmp_zz_diophantin": 201, "dmp_zz_wang_hensel_lift": 201, "dmp_zz_wang": 201, "enhanc": [201, 228], "r721": 201, "wang78": [201, 202], "r722": 201, "dmp_zz_factor": 201, "r723": 201, "dmp_ext_factor": 201, "dup_gf_factor": 201, "dmp_factor_list": 201, "dmp_factor_list_includ": 201, "dmp_irreducible_p": 201, "groebnertool": 201, "polyconfig": [201, 204], "f5b": [201, 204], "spoli": 201, "red_groebn": 201, "beckerweispfenning93": 201, "is_groebn": 201, "is_minim": 201, "is_reduc": 201, "fglmtool": 201, "matrix_fglm": 201, "o_to": 201, "o_from": 201, "r724": 201, "fauger": [201, 204], "gianni": [201, 204, 226], "mora": [201, 202, 204, 226], "sdm_spoli": 201, "phantom": 201, "sca": 201, "defn": 201, "sdm_ecart": 201, "ecart": 201, "sdm_nf_mora": 201, "nf": 201, "sdm_groebner": 201, "sugar": [201, 202, 233], "giovini": [201, 202], "polyopt": [201, 205], "build_opt": 201, "polyerror": [201, 204], "basepolynomialerror": 201, "operationnotsupport": 201, "heuristicgcdfail": 201, "homomorphismfail": 201, "isomorphismfail": [201, 203], "extraneousfactor": 201, "evaluationfail": 201, "refinementfail": 201, "notrevers": [201, 204], "notalgebra": 201, "polynomialerror": [201, 204], "unificationfail": [201, 203], "generatorsneed": 201, "computationfail": 201, "exc": 201, "generatorserror": 201, "univariatepolynomialerror": 201, "multivariatepolynomialerror": [201, 204], "polificationfail": 201, "orig": 201, "optionerror": 201, "flagerror": 201, "modulargcd": 201, "modgcd_univari": 201, "monagan00": [201, 202], "modgcd_bivari": 201, "modgcd_multivari": 201, "_modgcd_multivariate_p": 201, "brown71": [201, 202], "degbound": 201, "contbound": 201, "func_field_modgcd": 201, "reconstuct": 201, "z_p": 201, "spuriou": [201, 226], "hoeij04": [201, 202], "scarc": 201, "hsin": 202, "chao": 202, "liao": 202, "fateman": 202, "montreal": 202, "quebec": 202, "canada": 202, "240": [202, 210, 256], "247": [202, 226], "von": [202, 228], "zur": 202, "gerhard": 202, "cambridg": [202, 221], "weisstein": 202, "cyclotomicpolynomi": 202, "1215": 202, "1231": 202, "czapor": 202, "labahn": 202, "monagan": [202, 220], "disco": 202, "721": 202, "kaltofen98": 202, "subquadrat": 202, "223": 202, "1998": [202, 221], "1179": 202, "1197": 202, "shoup95": 202, "397": 202, "shoup91": 202, "cox97": [202, 204], "shea": [202, 204], "ajwa95": 202, "ajwa": 202, "liu": 202, "groebner": [202, 203, 204, 207, 220, 226, 227], "cites": 202, "ist": [202, 217], "psu": [202, 217], "mycites": 202, "login": 202, "bose03": 202, "bose": 202, "guiver": 202, "giovini91": 202, "bronstein93": [202, 204], "salvi": [202, 205], "kiev": 202, "ukrain": 202, "buchberger01": [202, 204], "theorist": 202, "moreno": 202, "diaz": 202, "freir": 202, "eurocast": 202, "februari": 202, "davenport88": 202, "siret": 202, "tournier": 202, "london": [202, 221], "124": [202, 274], "greuel": 202, "pfister": 202, "atiyah": 202, "macdonald": 202, "142": 202, "1971": [202, 224], "505": 202, "237": 202, "249": 202, "wittkopf": 202, "478": 202, "hoeij": 202, "297": [202, 204], "304": [202, 204], "wang81": 202, "adic": 202, "symsac": 202, "hoeij02": 202, "manwright94": [202, 204], "yiu": 202, "kwong": 202, "franci": 202, "wright": 202, "dispers": [202, 228], "190347": 202, "190413": 202, "koepf98": [202, 204], "koepf": [202, 210, 220], "vieweg": 202, "abramov71": [202, 204], "abramov": [202, 226], "ussr": 202, "330": 202, "man93": [202, 204], "376": 202, "sciencedirect": [202, 217], "pii": [202, 217], "s0747717183710539": 202, "kapur1994": 202, "deepak": 202, "kapur": 202, "tushar": 202, "saxena": 202, "yang": 202, "dixon": 202, "researchg": [202, 228], "2514261_algebraic_and_geometric_reasoning_using_dixon_result": 202, "palancz08": 202, "pal\u00e1ncz": 202, "zaletnyik": 202, "jl": [202, 241], "awang": 202, "ew": 202, "grafarend": 202, "geodet": 202, "geodesi": 202, "225607735_dixon_result": 202, "s_solution_of_systems_of_geodetic_polynomial_equ": 202, "bruce97": 202, "bruce": 202, "randal": 202, "donald": [202, 243], "mundi": 202, "artifici": [202, 211], "intellig": [202, 220, 224, 285], "orlando": 202, "www2": 202, "duke": 202, "donaldlab": 202, "symbolicnumericalcomput": 202, "045": 202, "087": 202, "stiller96": 202, "stiller": 202, "citeseerx": [202, 217], "viewdoc": [202, 217], "590": 202, "2021": 202, "rep1": [202, 217], "cohen93": [202, 203], "henri": 202, "olga": 203, "tausski": 203, "zimmer": 203, "pohst": 203, "articul": 203, "numberfield": 203, "mathfrak": 203, "regul": 203, "alpha_m": 203, "round_two": 203, "prime_decomp": 203, "prime_valu": 203, "minimal_polynomi": 203, "field_isomorph": 203, "nilrad": 203, "z_k": 203, "zk": 203, "ordinarili": 203, "503": 203, "r725": 203, "r726": 203, "powerbasisel": 203, "ramif": 203, "as_submodul": 203, "bundl": 203, "test_factor": 203, "deliber": 203, "is_inert": 203, "inert": [203, 224], "reduce_anp": 203, "elt": 203, "reduce_alg_num": 203, "field_gen": 203, "just_gen": 203, "reagent": 203, "kummer": 203, "1847": 203, "ueber": 203, "zerlegung": 203, "crell": 203, "r727": 203, "_minpoly_compos": 203, "stall": 203, "alli": 203, "monomorph": 203, "alpha_i": 203, "alpha_n": 203, "lincomb": 203, "primtiiv": 203, "meanwhil": 203, "moduleel": 203, "powerbasi": 203, "submodule_from_matrix": 203, "ancestor": 203, "to_col": 203, "nca": 203, "circumst": [203, 279], "_mult_tab": 203, "successfulli": 203, "moduleendomorph": 203, "innerendomorph": 203, "endomorphismr": 203, "spec": [203, 204], "i_n": [203, 204, 229], "include_self": 203, "basis_el": 203, "element_from_r": 203, "endomorphism_r": 203, "is_compat_col": 203, "mult_tab": 203, "mult": 203, "closurefailur": 203, "nearest_common_ancestor": 203, "number_field": 203, "power_basis_ancestor": 203, "incom": 203, "halv": 203, "submodule_from_gen": 203, "over_power_basi": 203, "starts_with_un": 203, "hnf_modulu": 203, "whole_submodul": 203, "element_from_anp": 203, "element_from_alg_num": 203, "element_from_poli": 203, "qq_matrix": 203, "basis_element_pullback": 203, "discard_befor": 203, "structureerror": 203, "cohen00": 203, "make_mod_elt": 203, "qq_col": 203, "from_int_list": 203, "is_compat": 203, "reduced_mod_p": 203, "to_ancestor": 203, "anc": 203, "to_par": 203, "to_anp": 203, "inner_endomorph": 203, "event": [203, 228], "find_min_poli": 203, "missingunityerror": 203, "is_int": 203, "get_num_denom": 203, "extract_fundamental_discrimin": 203, "r728": 203, "algintpow": 203, "zeta_pow": 203, "r729": 203, "coeff_search": 203, "supplement_a_subspac": 203, "dmrankerror": 203, "v_n": 203, "w_r": 203, "w_j": 203, "u_j": 203, "r730": 203, "poly_from_expr": 204, "parallel_poly_from_expr": 204, "exprtool": 204, "gcd_list": 204, "lcm_list": 204, "destruct": 204, "2079": 204, "1401": 204, "2715": 204, "6720": 204, "1092": 204, "gff": 204, "check_sqf": 204, "count_root": 204, "nroot": [204, 226], "maxstep": 204, "cleanup": 204, "73205080756888": 204, "73205080756887729352744634151": 204, "ground_root": 204, "nth_power_roots_poli": 204, "r_f": 204, "r_g": 204, "_signsimp": 204, "q_n": 204, "is_zero_dimension": [204, 227], "donal": 204, "230": [204, 226], "ec": 204, "em": 204, "di": 204, "dispersionset": 204, "gp": [204, 224], "free_symbols_in_domain": 204, "from_poli": 204, "get_domain": 204, "get_modulu": 204, "has_only_gen": 204, "vincent": [204, 246], "akrita": 204, "strzebonski": 204, "va": 204, "alkiviadi": 204, "panagioti": 204, "vigkla": 204, "265": 204, "279": 204, "polnomi": 204, "is_multivari": 204, "is_univari": 204, "ltrim": 204, "_only_": 204, "sturmian": 204, "subresultants_qq_zz": 204, "suffix": [204, 241], "_pg": 204, "_amv": 204, "rem_z": 204, "premultipli": 204, "rat_clear_denom": 204, "_ignor": 204, "retract": 204, "same_root": 204, "r0": 204, "set_domain": 204, "set_modulu": 204, "termwis": 204, "fglm": 204, "r731": 204, "horner_schem": 204, "equispac": 204, "viet": 204, "itermonomi": 204, "min_degre": 204, "gib": 204, "monomial_kei": 204, "monomial_count": 204, "gradedlexord": 204, "reversedgradedlexord": 204, "clear_cach": 204, "_get_interv": 204, "165": [204, 228, 246], "169": 204, "eval_approx": 204, "evalf_r": 204, "eval_r": 204, "69629": 204, "71318": 204, "805": 204, "3275": 204, "65536": [204, 207, 208], "414645": 204, "131072": 204, "6545": 204, "104755": 204, "2097152": 204, "6634255": 204, "_all_root": 204, "use_cach": 204, "_complexes_index": 204, "_complexes_sort": 204, "_count_root": 204, "_ensure_complexes_init": 204, "_ensure_reals_init": 204, "_eval_is_imaginari": 204, "_get_complex": 204, "_get_complexes_sqf": 204, "currentfactor": 204, "_get_real": 204, "_get_reals_sqf": 204, "_get_root": 204, "_indexed_root": 204, "_new": 204, "_postprocess_root": 204, "_preprocess_root": 204, "heroic": [204, 226], "_real_root": 204, "_reals_index": 204, "_reals_sort": 204, "_refine_complex": 204, "_roots_trivi": 204, "_set_interv": 204, "861136": 204, "86113631159405258": 204, "polyroot": 204, "quintic": [204, 226], "unread": [204, 244], "casu": 204, "irreducibili": 204, "unsolvablefactorerror": [204, 226], "inexpress": 204, "unsolv": [204, 227], "r732": 204, "cubic_funct": 204, "trigonometric_": 204, "28and_hyperbol": 204, "29_method": 204, "specialpoli": 204, "swinnerton_dyer_poli": 204, "swinnerton": 204, "dyer": 204, "symmetric_poli": 204, "random_poli": 204, "gegenbau": [204, 208], "jakob": 204, "psum": 204, "3144337": 204, "r733": 204, "bernoulli_c_poli": 204, "reindex": 204, "swiss": 204, "knife": 204, "630": 204, "5124": 204, "12465": 204, "155": 204, "r734": 204, "partfrac": [204, 210], "undertermin": 204, "_w": [204, 215], "apart_list": 204, "assemble_partfrac_list": 204, "bunch": 204, "pfd": 204, "r735": 204, "partial_list": 204, "reassembl": 204, "pfda": 204, "r736": 204, "r737": 204, "r738": 204, "r739": 204, "r740": 204, "r741": 204, "r742": 204, "r743": 204, "widen": 205, "ring_seri": 205, "rs_sin": 205, "166666666666667": 205, "puiseux": 205, "rs_co": 205, "rs_tan": 205, "took": [205, 217], "eleg": [205, 207], "rs_exp": 205, "everyon": 205, "blazingli": 205, "promin": 205, "gradual": 205, "rs_": 205, "rs_log": 205, "rs_lambertw": 205, "rs_atan": 205, "arctang": 205, "rs_asin": 205, "_tan1": 205, "rs_cot": 205, "rs_cos_sin": 205, "rs_atanh": 205, "rs_sinh": 205, "rs_cosh": 205, "rs_tanh": 205, "rs_hadamard_exp": 205, "inver": 205, "rs_mul": 205, "rs_squar": 205, "rs_pow": 205, "rs_series_invers": 205, "rs_series_revers": 205, "a_kx_k": 205, "ar_i": 205, "ar_": 205, "ae": 205, "rs_trunc": 205, "rs_nth_root": 205, "160249952256379": 205, "44224957030741": 205, "rs_sub": 205, "rs_diff": 205, "rs_integr": 205, "rs_newton": 205, "rs_compose_add": 205, "r744": 205, "bostan": 205, "flajolet": 205, "schost": 205, "4579": 205, "institut": 205, "nation": 205, "recherch": 205, "informatiqu": 205, "automatiqu": 205, "rs_is_puiseux": 205, "rs_puiseux": 205, "rs_puiseux2": 205, "rs_series_from_list": 205, "concur": 205, "rs_fun": 205, "_tan": 205, "_nth": 205, "_root": 205, "_fun": 205, "mul_xin": 205, "pow_xin": 205, "_raw": 206, "unkown": 206, "sympy_eqs_to_r": 206, "eqs_r": 206, "eqs_to_matrix": 206, "eqs_coeff": 206, "eqs_rh": 206, "_solve_lin_si": 206, "_solve_lin_sys_compon": 206, "critiqu": 207, "wester1999": 207, "systemat": 207, "153": 207, "\u2124": [207, 208, 227, 286], "unm": 207, "driver": [208, 240], "adequ": 208, "emptyprint": 208, "_sympystr": 208, "mathml": 208, "inconveni": 208, "_print_": 208, "expr_class": 208, "hierarchi": [208, 228], "_print_rat": 208, "_print_numb": 208, "_print_atom": 208, "_print_bas": 208, "print_latex": 208, "mylatexprint": 208, "_print_deriv": 208, "print_my_latex": 208, "modop": 208, "subcompon": 208, "outermost": [208, 216, 220, 232], "modopmodewrong": 208, "modopnestedwrong": 208, "modopsettingswrong": 208, "subobject": 208, "infrastructur": [208, 225], "printer_exampl": 208, "set_global_set": 208, "stringpict": 208, "pretty_symbologi": 208, "prettyform": 208, "hline": 208, "vline": 208, "ascii": 208, "_pretti": 208, "use_unicode_sqrt_char": 208, "root_not": 208, "mat_symbol_styl": 208, "prettifi": 208, "bold": 208, "c89codeprint": 208, "print_ccod": 208, "tgamma": 208, "known_functions_c89": 208, "known_functions_c99": 208, "fmax": 208, "fmin": 208, "lgamma": 208, "indent_cod": 208, "cfunction_format": 208, "derefer": 208, "dereferenc": 208, "symbols_to_declar": 208, "not_supported_funct": 208, "code_text": 208, "m_sqrt2": 208, "math_macro": 208, "m_sqrt2l": 208, "cxx": 208, "cxx98codeprint": 208, "print_rcod": 208, "rcode": 208, "known_funct": 208, "_rcode": 208, "rfunction_str": 208, "rfunction_format": 208, "ifels": 208, "type_map": 208, "name_mangl": 208, "mangl": 208, "floor1": 208, "floor2": 208, "print_fcod": 208, "_fcode": 208, "conjg": 208, "32768": 208, "7182818284590452d0": 208, "1415926535897932d0": 208, "718281828459045235360287d0": 208, "141592653589793238462643d0": 208, "869604401089358618834491d0": 208, "mygamma": 208, "allow_unknown_funct": 208, "smtlib": 208, "smtlibprint": 208, "symbol_t": 208, "_smtlib": 208, "_default_set": 208, "known_const": 208, "ite": 208, "known_typ": 208, "smtlib_cod": 208, "auto_assert": 208, "auto_declar": 208, "prefix_express": 208, "suffix_express": 208, "log_warn": 208, "booleanfunct": 208, "dreal": 208, "14159": 208, "my_smt_variable_for_pi": 208, "postfix": [208, 246], "riski": 208, "sound": [208, 285], "noop": 208, "pw": 208, "pythontyp": 208, "smt_builtin_func": 208, "existing_smtlib_fcn": 208, "user_def_func": 208, "fun": [208, 225, 278], "coshintegr": 208, "cosintegr": 208, "expintegralei": 208, "factorialpow": 208, "heavisidetheta": 208, "sinhintegr": 208, "sinintegr": 208, "arccosh": 208, "arccoth": 208, "arcsinh": 208, "arctanh": 208, "dirichleteta": 208, "gegenbauerc": 208, "hypergeometricpfq": 208, "sphericalbesselj": 208, "logintegr": 208, "lucasl": 208, "mathieu": 208, "riemann_xi": 208, "riemannxi": 208, "stieltjesgamma": 208, "sphericalbess": 208, "mcodeprint": 208, "_mcode": 208, "mcode": 208, "maplecodeprint": 208, "_mapl": 208, "maple_cod": 208, "print_maple_cod": 208, "javascriptcodeprint": 208, "_javascript": 208, "js_function_str": 208, "known_fcns_src1": 208, "known_fcns_src2": 208, "conj": 208, "juliacodeprint": 208, "_julia": 208, "harmless": [208, 281], "cosmet": 208, "existing_julia_fcn": 208, "coshint": 208, "cosint": 208, "sinhint": 208, "sinint": 208, "bincoeff": 208, "logint": 208, "gammaln": 208, "octavecodeprint": 208, "_octav": 208, "recip": [208, 246], "powf": 208, "signum": 208, "rustcodeprint": 208, "_rust_cod": 208, "7_f64": 208, "_aesara": 208, "tensorvari": 208, "floatx": 208, "squeez": 208, "dim_handl": 208, "gtkmathview": 208, "widget": 208, "print_gtk": 208, "libgtkmathview": 208, "start_view": 208, "_lambdacod": 208, "accepted_latex_funct": 208, "parenthesize_sup": 208, "fold_frac_pow": 208, "fold_func_bracket": 208, "fold_short_frac": 208, "inv_trig_styl": 208, "itex": 208, "ln_notat": 208, "long_frac_ratio": 208, "mat_delim": 208, "mat_str": 208, "mul_symbol": 208, "symbol_nam": 208, "gothic_re_im": 208, "decimal_separ": 208, "diff_oper": 208, "smallmatrix": [208, 279], "amsmath": 208, "fracton": 208, "semicolon": 208, "monospac": 208, "mathtt": 208, "mathml2": 208, "mathmlprinterbas": 208, "mathmlcontentprint": 208, "mathmlpresentationprint": 208, "chapter4": 208, "_mathml_cont": 208, "mathml_tag": 208, "chapter3": 208, "_mathml_present": 208, "utf": 208, "mul_symbol_mathml_numb": 208, "xb7": 208, "print_mathml": [208, 284], "mrow": 208, "mpmathprint": 208, "fully_qualified_modul": 208, "print_python": 208, "textual": 208, "reprprint": 208, "_sympyrepr": 208, "reprifi": 208, "sympy_integ": 208, "displayhook": [208, 239], "pprint_nod": 208, "nb2": 208, "print_nod": 208, "asssumpt": 208, "determinisit": 208, "backtrac": 208, "print_tre": 208, "outputbuff": 208, "dvioption": 208, "outputtexfil": 208, "extra_preambl": 208, "latex_set": 208, "postscript": 208, "tex": 208, "eulervm": 208, "sty": 208, "debian": 208, "ubuntu": 208, "unset": [208, 220], "gimp": 208, "evinc": 208, "kdvi": 208, "xdvi": 208, "xdg": 208, "system_default_view": 208, "gracefulli": [208, 232], "generet": 208, "bytesio": 208, "usepackag": 208, "amsfont": 208, "renewcommand": 208, "popen": 208, "phidd": 208, "bitmap": 208, "split_super_sub": 208, "var_sub1__sup_sub2": 208, "assignmenterror": 208, "bitwiseand": 208, "bitwiseor": 208, "bitwisexor": 208, "precedence_valu": 208, "kroneckerproduct": 208, "tensadd": [208, 234], "tensmul": [208, 234], "precedence_funct": 208, "precedence_float": 208, "precedence_fracel": 208, "precedence_integ": 208, "precedence_mul": 208, "precedence_polyel": 208, "precedence_r": 208, "precedence_unevaluatedexpr": 208, "databas": [208, 218], "pretty_use_unicod": 208, "pretty_try_use_unicod": 208, "xstr": 208, "greek_lett": 208, "digit_2txt": 208, "ONE": 208, "seven": 208, "symb_2txt": 208, "parenthesi": [208, 232], "\u2080": 208, "\u2081": 208, "\u2082": 208, "\u2084": 208, "\u2085": 208, "\u2086": 208, "\u2087": 208, "\u2088": 208, "\u2089": 208, "\u2090": 208, "\u1d66": 208, "\u1d6a": 208, "\u2091": 208, "\u1d67": 208, "\u2095": 208, "\u1d62": 208, "\u2096": 208, "\u2097": 208, "\u2098": 208, "\u2099": 208, "\u2092": 208, "\u209a": 208, "\u1d69": 208, "\u1d63": 208, "\u1d68": 208, "\u209b": 208, "\u209c": 208, "\u1d64": 208, "\u1d65": 208, "\u2093": 208, "\u2070": 208, "\u00b9": 208, "\u00b2": 208, "\u00b3": 208, "\u2074": 208, "\u2075": 208, "\u2076": 208, "\u2077": 208, "\u2078": 208, "\u2079": 208, "\u2071": 208, "\u207f": 208, "xobj": 208, "vobj": 208, "hobj": 208, "vf": 208, "\u00bd": 208, "\u2153": 208, "\u00bc": 208, "\u2155": 208, "\u2159": 208, "\u215b": 208, "\u2154": 208, "\u2156": 208, "\u00be": 208, "\u2157": 208, "\u215c": 208, "\u2158": 208, "\u215a": 208, "\u215d": 208, "\u215e": 208, "xsym": 208, "symbologi": 208, "atoms_t": 208, "\u2102": [208, 286], "emptysequ": [208, 214], "\u2115": 208, "\u2115\u2080": 208, "\u211d": [208, 286], "symmetricdiffer": [208, 216, 227], "pretty_atom": 208, "atom_nam": 208, "pretty_symbol": 208, "symb_nam": 208, "bold_nam": 208, "stylis": 208, "_print_meijerg": 208, "_print_hyp": 208, "jurjen": 208, "bo": 208, "hate": 208, "spammer": 208, "pietjepuk314": 208, "oc": [208, 259], "oohai": 208, "gedg": 208, "email": 208, "mun": 208, "terminal_str": 208, "baselin": 208, "leftslash": 208, "slash": [208, 239], "paren": 208, "ifascii_nougli": 208, "line_break": 208, "ugli": 208, "terminal_width": 208, "wider": 208, "maxdepth": 208, "labelfunc": 208, "digraph": [208, 246, 284], "rankdir": [208, 284], "_sparse_": 209, "flavor": 209, "________": [209, 228, 246], "x\u2080": 209, "greatli": 209, "numbered_symbol": [209, 220, 224, 246], "postprocessor": [209, 220], "reduced_expr": [209, 220], "formalpowerseri": 210, "coeff_bel": 210, "formalpowerseriescompos": 210, "r745": 210, "comtet": 210, "loui": 210, "reidel": 210, "1974": 210, "720": [210, 224, 246], "formalpowerseriesinvers": 210, "r746": 210, "upto": [210, 215, 224], "formalpowerseriesproduct": 210, "rational_algorithm": 210, "compute_fp": 210, "hyper_algorithm": 210, "omposit": 210, "bell_seq": 210, "finiteformalpowerseri": 210, "rational_independ": 210, "ra": 210, "admiss": [210, 213], "r747": 210, "r748": 210, "simpled": 210, "exp_r": 210, "explik": 210, "hyper_r": 210, "rsolve_hypergeometr": 210, "r749": 210, "r750": 210, "solve_d": 210, "fourierseri": 211, "scalex": 211, "shiftx": 211, "sigma_approxim": 211, "gibb": 211, "bigl": 211, "bigr": 211, "lanczo": 211, "r751": 211, "gibbs_phenomenon": 211, "r752": 211, "sawtooth": 211, "bn": 211, "r753": 211, "limitseq": 213, "difference_delta": 213, "r754": 213, "differencedelta": 213, "limit_seq": [213, 215], "safeguard": 213, "r755": 213, "kauer": 213, "seqper": 214, "seqformula": 214, "seqbas": 214, "coeff_mul": 214, "find_linear_recurr": 214, "gfvar": 214, "seqadd": 214, "seqmul": 214, "_mul": 214, "recursiveseq": 214, "fib": 214, "invok": [215, 239, 240], "workhors": 215, "succ": [215, 228], "asymp": 215, "exposit": 215, "gloss": 215, "wsym": 215, "test_rewrite1": 215, "build_expression_tre": 215, "mrv_leadterm": 215, "e0": 215, "calculate_seri": 215, "limitinf": 215, "constantli": 215, "subsset": 215, "mrv_max1": 215, "mrv_max3": 215, "expsf": 215, "expsg": 215, "expsboth": 215, "o2": 215, "do_sub": 215, "r756": 215, "7048138294": 215, "7182818285": 215, "6349839002": 215, "6449340668": 215, "shank": 215, "6881721793": 215, "6931396564": 215, "6931471806": 215, "6931471805599453094172321215": 215, "r757": 215, "residue_theorem": 215, "neighborhood": 216, "rim": 216, "conditionset": [216, 227, 228, 286], "affirm": 216, "infimum": 216, "imageset": [216, 227, 286], "is_clos": 216, "closed": 216, "is_disjoint": 216, "r758": 216, "disjoint_set": 216, "is_open": 216, "is_proper_subset": 216, "is_proper_superset": 216, "left_open": 216, "is_superset": 216, "isdisjoint": 216, "issubset": 216, "issuperset": 216, "productset": [216, 227], "powerset": 216, "fancyset": 216, "complexregion": [216, 227], "disjointunion": 216, "lebesgu": 216, "r759": 216, "power_set": 216, "symmetric_differ": 216, "r760": 216, "right_open": 216, "mpi": 216, "r761": 216, "interval_": 216, "as_rel": 216, "is_left_unbound": 216, "is_right_unbound": 216, "r762": 216, "r763": 216, "union_": 216, "28set_theori": 216, "r764": 216, "intersection_": 216, "coin": [216, 228], "r765": 216, "cartesian_product": 216, "is_iter": 216, "r766": 216, "complementset": 216, "r767": 216, "disjoint_union": 216, "r768": 216, "empty_set": 216, "r769": 216, "universal_set": 216, "flambda": 216, "square_iter": 216, "base_set": 216, "cartesiancomplexregion": 216, "polarcomplexregion": 216, "unit_disk": 216, "upper_half_unit_disk": 216, "a_interv": 216, "b_interv": 216, "from_real": 216, "pset": 216, "rset": 216, "thetaset": 216, "upper_half_plan": 216, "normalize_theta_set": 216, "r770": 216, "r771": 216, "axiom_of_power_set": 216, "sin_sol": 216, "r772": 216, "element_": 216, "varnoth": 216, "tr0": 217, "tr1": 217, "tr2": 217, "tr2i": 217, "tr3": 217, "tr4": 217, "tr5": 217, "tr6": 217, "tr7": 217, "tr8": 217, "tr9": 217, "tr10": 217, "tr10i": 217, "tr11": 217, "tr12": 217, "tr12i": 217, "tr13": 217, "trmorri": 217, "tr14": 217, "tr15": 217, "tr16": 217, "tr22": 217, "tr111": 217, "ctr1": 217, "ctr4": 217, "rl1": 217, "rl2": 217, "deem": 217, "932": 217, "016": 217, "serendipit": 217, "dead": 217, "newa": 217, "lucki": 217, "sqt": 217, "_tr56": 217, "un": [217, 218], "r773": 217, "morri": 217, "27s_law": 217, "trpower": 217, "r774": 217, "list_of_trigonometric_ident": 217, "reduction_formula": 217, "ctr2": 217, "ctr3": 217, "r775": 217, "s0895717706001609": 217, "dimitar": 217, "vlahovski": 217, "technolog": 217, "xiuqin": 217, "zhong": 217, "zhenb": 217, "zeng": 217, "1169": 217, "1177": 217, "657": 217, "2478": 217, "sosmath": 217, "trig5": 217, "symplifi": [218, 220], "roach1996": 218, "roach1997": 218, "p_q": 218, "reachabl": [218, 228], "f_q": 218, "undo": [218, 285], "whenc": 218, "game": 218, "twofold": 218, "incongru": 218, "wlog": 218, "alpha_r": 218, "beta_r": 218, "blindli": 218, "messi": 218, "k_u": 218, "l_v": 218, "k_j": 218, "c_w": 218, "r_j": 218, "l_u": 218, "res_": 218, "delta_i": 218, "add_formula": 218, "addb": 218, "sum_0": 218, "test_hyperexpand": 218, "test_formula": 218, "typo": 218, "suboptim": 218, "imath": 218, "b1prime": 218, "vital": [218, 228], "308": 218, "hongguang": [219, 265], "fu": [219, 220, 265], "unmodifi": 220, "my_measur": 220, "nthroot": 220, "max_len": 220, "surd": 220, "kroneckersimp": 220, "besselsimp": 220, "strigonometr": 220, "399": 220, "hypersimilar": 220, "rational_convers": 220, "base10": 220, "6004799503160655": 220, "eq_x": 220, "max_term": 220, "collect_sqrt": 220, "polish": 220, "rad_ration": 220, "collect_const": 220, "rcollect": 220, "analyz": [220, 233], "ratsimpmodprim": 220, "r776": 220, "pearc": 220, "1145": 220, "1145768": 220, "1145809": 220, "trigsimp_groebn": 220, "bb1": 220, "be1": 220, "bb2": 220, "be2": 220, "bei": 220, "sqrtdenest": 220, "max_it": 220, "unrad": [220, 226], "r777": 220, "ibm": 220, "fagin": 220, "symb85": 220, "r778": 220, "cybertest": 220, "opt_sub": 220, "as_unevaluated_bas": 220, "tree_cs": 220, "hyperegeometr": 220, "epathtool": 220, "epath": 220, "ebnf": 220, "za": [220, 228], "xml": 220, "xpath": 220, "hasattr": [220, 242], "beginn": [221, 223, 226, 227, 286], "diophantu": 221, "mathematician": [221, 227], "citi": 221, "alexandria": 221, "father": 221, "hi": 221, "arithmetica": 221, "diop_solv": 221, "classify_diop": 221, "diop_linear": 221, "diop_quadrat": 221, "diop_ternary_quadrat": 221, "diop_ternary_quadratic_norm": 221, "diop_general_pythagorean": 221, "diop_general_sum_of_squar": 221, "diop_general_sum_of_even_pow": 221, "merge_solut": 221, "3y": 221, "4ac": 221, "9369318": 221, "find_dn": 221, "diop_dn": 221, "transformation_to_dn": 221, "920": 221, "5y": 221, "BY": 221, "transformation_to_norm": 221, "t4": 221, "t5": 221, "sum_of_squar": 221, "providean": 221, "eqyptian": 221, "thilinaatsympi": 221, "andreescu": 221, "titu": 221, "andrica": 221, "dorin": 221, "cucurezeanu": 221, "ion": 221, "diophantineequ": 221, "alpertron": 221, "20160323033111": 221, "jpr2718": 221, "ax2p": 221, "permute_sign": [221, 246], "signed_permut": [221, 246], "_dict": 221, "base_solution_linear": 221, "r779": 221, "r780": 221, "pell": 221, "lmm": 221, "r781": 221, "393": 221, "13y": 221, "986": 221, "49299": 221, "1570": 221, "diop_bf_dn": 221, "robertson": 221, "20160323033128": 221, "cornacchia": 221, "r782": 221, "nitaj": 221, "r783": 221, "numbertheori": 221, "r784": 221, "r785": 221, "676": 221, "884": 221, "fxz": 221, "3xy": 221, "r786": 221, "fxy": 221, "gyz": 221, "hxz": 221, "r787": 221, "cremona": 221, "rusin": 221, "2x_": 221, "m4": 221, "general_sum_of_squar": 221, "8m": 221, "r788": 221, "2345": 221, "proofwiki": 221, "integer_as_sum_of_three_squar": 221, "general_sum_of_even_pow": 221, "power_represent": 221, "1729": 221, "stopiter": 221, "sum_of_three_squar": 221, "r789": 221, "44542": 221, "207": 221, "schorn": 221, "sum_of_four_squar": 221, "3456": 221, "1294585930293": 221, "2161": 221, "1137796": 221, "r790": 221, "sum_of_pow": 221, "evenli": 221, "var_t": 221, "pqa": 221, "r791": 221, "ur": 221, "dv": 221, "vr": 221, "r792": 221, "parametrize_ternary_quadrat": 221, "r793": 221, "nigel": 221, "ldescent": 221, "y_0": [221, 224], "4x": [221, 227, 274], "7y": 221, "5x": 221, "r794": 221, "r795": 221, "nottingham": 221, "worktrib": 221, "1023265": 221, "gaussian_reduc": 221, "r796": 221, "cuhk": 221, "hk": 221, "wkshum": 221, "404": 221, "r797": 221, "holzer": 221, "mordel": 221, "r798": 221, "r799": 221, "prime_as_sum_of_two_squar": 221, "r800": 221, "sqf_normal": 221, "r801": 221, "legrang": 221, "csusm": 221, "aitken_html": 221, "diophantinesolutionset": 221, "symbols_seq": 221, "dict_iter": 221, "diophantineequationtyp": 221, "binaryquadrat": 221, "r802": 221, "r803": 221, "inhomogeneousternaryquadrat": 221, "inhomogen": [221, 224, 226], "homogeneousternaryquadraticnorm": 221, "homogeneousternaryquadrat": 221, "inhomogeneousgeneralquadrat": 221, "homogeneousgeneralquadrat": 221, "generalsumofsquar": 221, "r804": 221, "generalpythagorean": 221, "cubicthu": 221, "thue": 221, "generalsumofevenpow": 221, "pde": [222, 224, 265], "subcategori": [223, 264], "solve_rational_inequ": 223, "solve_poly_inequ": 223, "reduce_rational_inequ": 223, "reduce_abs_inequ": 223, "solvifi": [223, 227], "autodetect": [224, 225], "classify_od": 224, "odesimp": 224, "ode_ord": [224, 225, 226], "deutil": [224, 225], "best_hint": 224, "all_integr": [224, 225], "_integr": [224, 225], "unevaluat": 224, "test_od": 224, "ode_": 224, "hintnam": [224, 225], "classify_sysod": 224, "almost_linear": 224, "dsolve_system": 224, "ode_hintnam": 224, "allhint": [224, 225], "tough": 224, "nth_linear_homogeneous_constant_coeff_integr": 224, "1st_linear": 224, "nth_linear": 224, "indep": 224, "indep_div_dep": 224, "undetermined_coeffici": 224, "_best": 224, "nth_algebra": 224, "1st_homogeneous_coeff_best": 224, "1st_homogeneous_coeff_subs_indep_div_dep": 224, "1st_homogeneous_coeff_subs_dep_div_indep": 224, "1st_power_seri": 224, "lie_group": 224, "nth_linear_constant_coeff_homogen": 224, "nth_linear_euler_eq_homogen": 224, "nth_algebraic_integr": 224, "separable_integr": 224, "1st_exact_integr": 224, "1st_linear_integr": 224, "bernoulli_integr": 224, "1st_homogeneous_coeff_subs_indep_div_dep_integr": 224, "1st_homogeneous_coeff_subs_dep_div_indep_integr": 224, "nth_linear_constant_coeff_undetermined_coeffici": 224, "nth_linear_constant_coeff_variation_of_paramet": 224, "nth_linear_constant_coeff_variation_of_parameters_integr": 224, "checkodesol": 224, "solve_for_func": [224, 225], "homogeneouscoeffsubsdepdivindep": 224, "homogeneouscoeffsubsindepdivdep": 224, "varepsilon": 224, "genform": [224, 225], "starrett": 224, "checkinfsol": 224, "constantsimp": 224, "symbolnam": 224, "startnumb": 224, "endnumb": 224, "renumb": 224, "absorpt": 224, "assist": 224, "constant_renumb": 224, "1st_rational_riccati": 224, "riccati_special_minus2": 224, "linear_coeffici": 224, "separable_reduc": 224, "nth_linear_euler_eq_nonhomogeneous_undetermined_coeffici": 224, "nth_linear_euler_eq_nonhomogeneous_variation_of_paramet": 224, "liouvil": 224, "2nd_linear_airi": 224, "2nd_linear_bessel": 224, "2nd_hypergeometr": 224, "2nd_hypergeometric_integr": 224, "nth_order_reduc": 224, "2nd_power_series_ordinari": 224, "2nd_power_series_regular": 224, "almost_linear_integr": 224, "linear_coefficients_integr": 224, "separable_reduced_integr": 224, "nth_linear_euler_eq_nonhomogeneous_variation_of_parameters_integr": 224, "liouville_integr": 224, "2nd_nonlinear_autonomous_conserv": 224, "2nd_nonlinear_autonomous_conserved_integr": 224, "newconst": 224, "ode_sol_simpl": 224, "trysolv": 224, "sola": 224, "solb": 224, "listofsolut": 224, "ode_problem": 224, "firstexact": 224, "exact_differential_equ": 224, "tenenbaum": 224, "dover": 224, "1963": 224, "homogeneouscoeffbest": 224, "ode_1st_homogeneous_coeff_best_integr": 224, "homogeneous_differential_equ": 224, "firstlinear": 224, "linear_differential_equ": 224, "first_order_equ": 224, "rationalriccati": 224, "atleast": 224, "riccati_equ": 224, "thieu": 224, "vo": 224, "www3": [224, 253], "risc_5387": 224, "phdthesisthieu": 224, "secondlinearairi": 224, "secondlinearbessel": 224, "math24": 224, "bernoulli_differential_equ": 224, "goldstein": 224, "braun": 224, "maplesoft": 224, "aspx": 224, "odeadvisor": 224, "riccatispeci": 224, "__________________": 224, "eqworld": 224, "ipmnet": 224, "ru": 224, "ode0106": 224, "ode0123": 224, "nthlinearconstantcoeffhomogen": 224, "nth_linear_constant_coeff_homogeneous_integr": 224, "nonhomogeneous_equation_with_constant_coeffici": 224, "nthlinearconstantcoeffundeterminedcoeffici": 224, "method_of_undetermined_coeffici": 224, "221": 224, "nthlinearconstantcoeffvariationofparamet": 224, "cramer": 224, "variation_of_paramet": 224, "planetmath": 224, "variationofparamet": 224, "nthlineareulereqhomogen": 224, "equidimension": 224, "nth_linear_euler_eq_homogeneous_integr": 224, "sollist": 224, "93euler_equ": 224, "bender": 224, "orszag": 224, "scientist": 224, "nthlineareulereqnonhomogeneousvariationofparamet": 224, "nthlineareulereqnonhomogeneousundeterminedcoeffici": 224, "nthalgebra": 224, "nthorderreduc": 224, "caught": 224, "fault": 224, "almostlinear": 224, "first_linear": 224, "joel": 224, "mose": 224, "stormi": 224, "decad": 224, "august": [224, 243], "558": 224, "linearcoeffici": 224, "separablereduc": 224, "liegroup": 224, "secondhypergeometr": 224, "2f1": 224, "1f1": 224, "0f1": 224, "liouvillian": 224, "pfq": 224, "chan": 224, "cheb": 224, "terrab": 224, "ode_1st_power_seri": 224, "travi": 224, "walker": 224, "ode_2nd_power_series_ordinari": 224, "lamar": 224, "seriessolut": 224, "simmon": 224, "176": 224, "ode_2nd_power_series_regular": 224, "lie_heuristic_abaco1_simpl": 224, "duart": 224, "da": 224, "mota": 224, "lie_heuristic_abaco1_product": 224, "roch": 224, "lie_heuristic_bivari": 224, "329": 224, "lie_heuristic_chi": 224, "lie_heuristic_abaco2_similar": 224, "lie_heuristic_function_sum": 224, "lie_heuristic_abaco2_unique_unknown": 224, "lie_heuristic_abaco2_unique_gener": 224, "lie_heuristic_linear": 224, "gy": 224, "bh": 224, "impract": 224, "riccati_norm": 224, "riccati_inverse_norm": 224, "riccati_reduc": 224, "construct_c": 224, "construct_d": 224, "val_inf": 224, "valuat": 224, "rational_laurent_seri": 224, "compute_m_ybar": 224, "ybar": 224, "solve_aux_eq": 224, "numa": 224, "dena": 224, "numi": 224, "deni": 224, "remove_redundant_sol": 224, "sol1": 224, "sol2": 224, "get_gen_sol_from_part_sol": 224, "part_sol": 224, "haaheim": 224, "solve_riccati": 224, "gensol": 224, "_linear_2eq_order1_type6": 224, "_linear_2eq_order1_type7": 224, "fgp": 224, "ag": 224, "bg": 224, "linear_ode_to_matrix": 224, "odeordererror": 224, "odenonlinearerror": 224, "eqs_mat": 224, "r805": 224, "matrix_differential_equ": 224, "canonical_od": 224, "canonical_eq": 224, "canonical_system": 224, "linodesolve_typ": 224, "linodesolv": 224, "type1": 224, "type2": 224, "type3": 224, "type4": 224, "type5": 224, "type6": 224, "type_of_equ": 224, "a_t": 224, "a_non_commut": 224, "matrix_exp_jordan_form": 224, "expj": 224, "matrix_exp": 224, "defect": 224, "p_invers": 224, "r806": 224, "defective_matrix": 224, "r807": 224, "r808": 224, "jordan_normal_form": 224, "comupt": 224, "r809": 224, "r810": 224, "matrix_exponenti": 224, "follw": 224, "antiderv": 224, "subscheck": 224, "system_info": 224, "sol_vector": 224, "sol_vector_evalu": 224, "_nonlinear_2eq_order1_type1": 224, "_nonlinear_2eq_order1_type2": 224, "_nonlinear_2eq_order1_type3": 224, "autonom": 224, "_nonlinear_2eq_order1_type4": 224, "_nonlinear_2eq_order1_type5": 224, "clairaut": 224, "envelop": 224, "_nonlinear_3eq_order1_type1": 224, "enspac": [224, 227], "sysod": 224, "sode0401": 224, "_nonlinear_3eq_order1_type2": 224, "sode0402": 224, "_nonlinear_3eq_order1_type3": 224, "sode0404": 224, "_nonlinear_3eq_order1_type4": 224, "sode0405": 224, "_nonlinear_3eq_order1_type5": 224, "sode0406": 224, "_handle_integr": 224, "gather": 224, "unhind": 224, "wolphramalpha": 224, "detool": 224, "hint_integr": 224, "alphanumer": 224, "hinder": 224, "matching_hint": 224, "matchdict": 224, "1st_homogeneous_coeff": 224, "your_hint": 224, "xfail": [224, 237, 239], "pde_separ": 225, "uxt": 225, "pde_separate_add": 225, "pde_separate_mul": 225, "uxi": 225, "pdsolv": 225, "solvefun": 225, "classify_pd": 225, "test_pd": 225, "pde_hintnam": 225, "ux": 225, "1st_linear_constant_coeff_homogen": 225, "checkpdesol": 225, "_preprocess": 225, "inabl": 225, "_xi_1": 225, "pde_1st_linear_constant_coeff_homogen": 225, "viktor": 225, "grigoryan": 225, "124a": 225, "pde_1st_linear_constant_coeff": 225, "substack": 225, "1st_linear_constant_coeff_integr": 225, "pde_1st_linear_variable_coeff": 225, "du": 225, "inspir": [225, 281], "pde_hint": 225, "checksol": 226, "ect": 226, "attain": [226, 258], "star": 226, "052": 226, "cov": 226, "pval": 226, "xval": 226, "rsolv": 226, "solve_linear": 226, "solve_linear_system": 226, "msymbol": 226, "degener": [226, 227], "solve_linear_system_lu": 226, "solve_undetermined_coeff": 226, "equ": 226, "73908513321516064165531208767387340401341175890076": 226, "steep": 226, "39267e": 226, "1684e": 226, "588469032184": 226, "315": 226, "730061685774": 226, "46792545969349058": 226, "inconclus": 226, "init": 226, "dissimilar": 226, "v_0": 226, "n_m": 226, "v_m": 226, "rsolve_poli": 226, "rsolve_ratio": 226, "r811": 226, "levelt": 226, "290": [226, 256], "296": 226, "r812": 226, "r813": 226, "revis": 226, "r814": 226, "289": 226, "alembertian": 226, "r815": 226, "r816": 226, "polysi": 226, "solve_triangul": 226, "kalkbrenn": 226, "patrizia": 226, "teo": 226, "aaecc": 226, "argand": 227, "uncount": 227, "bizarr": 227, "her": 227, "sol_f": 227, "solveset_r": 227, "solveset_complex": 227, "methodologi": [227, 278], "_solve_real_trig": 227, "invert_r": 227, "invert_complex": 227, "_solve_rad": 227, "_solve_ab": 227, "_solve_as_r": 227, "_solve_as_poly_r": 227, "_solve_as_poly_complex": 227, "_solve_as_poli": 227, "gsoc": 227, "2014": [227, 228], "iamit": 227, "2948": 227, "6659": 227, "7523": 227, "sibx0afl3q": 227, "9696": 227, "27s_theorem": 227, "inftyright": 227, "nright": 227, "0right": 227, "domain_check": 227, "3z": 227, "9z": 227, "nonlinearerror": 227, "cccc": 227, "eq3": 227, "eq4": 227, "391": 227, "_solve_system": 227, "_solve_using_known_valu": 227, "_transolv": 227, "_tsolv": 227, "tsolv": 227, "outright": 227, "interf": 227, "add_typ": 227, "_is_exponenti": 227, "new_eq": 227, "_solve_exponenti": 227, "_is_class": 227, "_solve_class": 227, "_solve_expo": 227, "9x": 227, "solve_expo": 227, "log_b": 227, "_solve_logarithm": 227, "solve_log": 227, "_is_logarithm": 227, "prebuilt": 228, "finiterv": 228, "varianc": 228, "dice": 228, "continuousrv": 228, "continuousdistributionhandmad": 228, "dist": 228, "discreterv": 228, "discretedistributionhandmad": 228, "pmf": 228, "finitedistributionhandmad": 228, "discreteuniform": 228, "randomsymbol": 228, "r817": 228, "discrete_uniform_distribut": 228, "r818": 228, "discreteuniformdistribut": 228, "d6": 228, "diedistribut": 228, "toss": 228, "r819": 228, "bernoulli_distribut": 228, "r820": 228, "bernoullidistribut": 228, "numeb": 228, "unfair": 228, "r821": 228, "coin_flip": 228, "binomialdistribut": 228, "r822": 228, "binomial_distribut": 228, "r823": 228, "betabinomi": 228, "r824": 228, "r825": 228, "betabinomialdistribut": 228, "popul": 228, "marbl": 228, "r826": 228, "hypergeometric_distribut": 228, "r827": 228, "hypergeometricdistribut": 228, "700000000000000": 228, "r828": 228, "rademacher_distribut": 228, "r829": 228, "geometric_distribut": 228, "r830": 228, "geometricdistribut": 228, "r831": 228, "hermite_distribut": 228, "poisson": 228, "r832": 228, "poisson_distribut": 228, "r833": 228, "poissondistribut": 228, "r834": 228, "logarithmic_distribut": 228, "r835": 228, "logarithmicdistribut": 228, "negativebinomi": 228, "r836": 228, "negative_binomial_distribut": 228, "r837": 228, "negativebinomialdistribut": 228, "skellam": 228, "mu1": 228, "mu2": 228, "mu_1": 228, "mu_2": 228, "i_k": 228, "r838": 228, "skellam_distribut": 228, "yulesimon": 228, "yule": 228, "simon": 228, "r839": 228, "93simon_distribut": 228, "8100": 228, "r840": 228, "zeta_distribut": 228, "cdf": 228, "r841": 228, "arcsine_distribut": 228, "benini": 228, "r842": 228, "benini_distribut": 228, "r843": 228, "v8": 228, "beninidistribut": 228, "r844": 228, "beta_distribut": 228, "r845": 228, "betadistribut": 228, "betanoncentr": 228, "noncentr": 228, "r846": 228, "noncentral_beta_distribut": 228, "r847": 228, "noncentralbetadistribut": 228, "betaprim": 228, "r848": 228, "beta_prime_distribut": 228, "r849": 228, "betaprimedistribut": 228, "boundedpareto": 228, "pareto": 228, "r850": 228, "pareto_distribut": 228, "bounded_pareto_distribut": 228, "r851": 228, "cauchy_distribut": 228, "r852": 228, "cauchydistribut": 228, "r853": 228, "chi_distribut": 228, "r854": 228, "chidistribut": 228, "chinoncentr": 228, "r855": 228, "noncentral_chi_distribut": 228, "chisquar": 228, "r856": 228, "chi_squared_distribut": 228, "r857": 228, "squareddistribut": 228, "dagum": 228, "r858": 228, "dagum_distribut": 228, "erlang": 228, "r859": 228, "erlang_distribut": 228, "r860": 228, "erlangdistribut": 228, "exgaussian": 228, "emg": 228, "r861": 228, "exponentially_modified_gaussian_distribut": 228, "quantil": 228, "r862": 228, "exponential_distribut": 228, "r863": 228, "exponentialdistribut": 228, "fdistribut": 228, "______________________________": 228, "r864": 228, "r865": 228, "fisherz": 228, "fisher": 228, "2d_1": 228, "d_1z": 228, "d_1e": 228, "r866": 228, "27s_z": 228, "r867": 228, "fishersz": 228, "frechet": 228, "r868": 228, "a9chet_distribut": 228, "r869": 228, "gamma_distribut": 228, "r870": 228, "gammadistribut": 228, "gammainvers": 228, "r871": 228, "gompertz": 228, "r872": 228, "gompertz_distribut": 228, "gumbel": 228, "dfrac": 228, "r873": 228, "gumbeldistribut": 228, "r874": 228, "gumbel_distribut": 228, "r875": 228, "mathwav": 228, "easyfit": 228, "gumbel_max": 228, "r876": 228, "gumbel_min": 228, "kumaraswami": 228, "r877": 228, "kumaraswamy_distribut": 228, "r878": 228, "laplace_distribut": 228, "r879": 228, "laplacedistribut": 228, "r880": 228, "a9vy_distribut": 228, "r881": 228, "levydistribut": 228, "logist": 228, "r882": 228, "logistic_distribut": 228, "r883": 228, "logisticdistribut": 228, "loglogist": 228, "unimod": 228, "r884": 228, "lognorm": 228, "r885": 228, "r886": 228, "lognormaldistribut": 228, "lomax": 228, "r887": 228, "lomax_distribut": 228, "maxwel": 228, "2a": 228, "r888": 228, "maxwell_distribut": 228, "r889": 228, "maxwelldistribut": 228, "moyal": 228, "r890": 228, "moyaldistribut": 228, "r891": 228, "rice": 228, "dobelman": 228, "textfil": 228, "distributionshandbook": 228, "nakagami": 228, "r892": 228, "nakagami_distribut": 228, "marginal_distribut": 228, "r893": 228, "normal_distribut": 228, "r894": 228, "normaldistributionfunct": 228, "xm": 228, "x_m": 228, "r895": 228, "r896": 228, "paretodistribut": 228, "powerfunct": 228, "paramat": 228, "r897": 228, "power_func": 228, "quadraticu": 228, "r898": 228, "quadratic_distribut": 228, "raisedcosin": 228, "r899": 228, "raised_cosine_distribut": 228, "r900": 228, "rayleigh_distribut": 228, "r901": 228, "rayleighdistribut": 228, "r902": 228, "reciprocal_distribut": 228, "studentt": 228, "r903": 228, "student_t": 228, "r904": 228, "studentst": 228, "shiftedgompertz": 228, "r905": 228, "shifted_gompertz_distribut": 228, "r906": 228, "trapezoidal_distribut": 228, "r907": 228, "triangular_distribut": 228, "r908": 228, "triangulardistribut": 228, "r909": 228, "uniform_distribution_": 228, "28continu": 228, "r910": 228, "uniformdistribut": 228, "uniformsum": 228, "irwin": 228, "r911": 228, "uniform_sum_distribut": 228, "r912": 228, "uniformsumdistribut": 228, "vonmis": 228, "mise": 228, "i_0": 228, "r913": 228, "von_mises_distribut": 228, "r914": 228, "vonmisesdistribut": 228, "wald": 228, "gaussianinvers": 228, "r915": 228, "inverse_gaussian_distribut": 228, "r916": 228, "inversegaussiandistribut": 228, "weibul": 228, "geq0": 228, "r917": 228, "weibull_distribut": 228, "r918": 228, "weibulldistribut": 228, "wignersemicircl": 228, "semicircl": 228, "frac2": 228, "r919": 228, "wigner_semicircle_distribut": 228, "r920": 228, "wignerssemicirclelaw": 228, "jointrv": 228, "_set": 228, "multivariatenorm": 228, "noninvert": 228, "ob": 228, "r921": 228, "multivariate_normal_distribut": 228, "multivariatelaplac": 228, "r922": 228, "multivariate_laplace_distribut": 228, "generalizedmultivariateloggamma": 228, "joint_rv_typ": 228, "gd": 228, "y_3": 228, "gmvlg": 228, "generalizedmultivariateloggammaomega": 228, "r923": 228, "generalized_multivariate_log": 228, "r924": 228, "234137346_on_a_multivariate_log": 228, "gamma_distribution_and_the_use_of_the_distribution_in_the_bayesian_analysi": 228, "correl": 228, "gmvlgo": 228, "r925": 228, "r926": 228, "r927": 228, "multinomial_distribut": 228, "r928": 228, "multinomialdistribut": 228, "multivariatebeta": 228, "r929": 228, "dirichlet_distribut": 228, "r930": 228, "dirichletdistribut": 228, "multivariateewen": 228, "ewen": 228, "r931": 228, "27s_sampling_formula": 228, "r932": 228, "rutger": 228, "hcrane": 228, "sts529": 228, "multivariatet": 228, "negativemultinomi": 228, "n_c": 228, "r933": 228, "negative_multinomial_distribut": 228, "r934": 228, "normalgamma": 228, "r935": 228, "discretemarkovchain": 228, "state_spac": 228, "trans_prob": 228, "markov": 228, "characteris": 228, "transitionmatrixof": 228, "transition_prob": 228, "sunni": 228, "cloudi": 228, "raini": 228, "randomindexedsymbol": 228, "409": 228, "6963328": 228, "3096": 228, "query_gt": 228, "64705": 228, "r936": 228, "markov_chain": 228, "time_markov_chain": 228, "r937": 228, "dartmouth": 228, "teaching_aid": 228, "books_articl": 228, "probability_book": 228, "chapter11": 228, "canonical_form": 228, "transient": 228, "p_new": 228, "new_matrix": 228, "communication_class": 228, "r938": 228, "onlinelibrari": 228, "wilei": 228, "1002": 228, "9780470316887": 228, "app1": 228, "r939": 228, "columbia": 228, "ww2040": 228, "6711f12": 228, "lect1023big": 228, "is_recurr": 228, "tarjan": [228, 246], "r940": 228, "4701sum07": 228, "4701": 228, "mcii": 228, "r941": 228, "ceca": 228, "clemson": 228, "shierd": 228, "shier": 228, "r942": 228, "ujcont": 228, "uj": 228, "7506": 228, "content1": 228, "r943": 228, "econ": 228, "dtmc": 228, "reccur": 228, "r944": 228, "absorbing_markov_chain": 228, "r945": 228, "brandei": 228, "igusa": 228, "math56as08": 228, "math56a_s08_notes015": 228, "fixed_row_vector": 228, "stationary_distribut": 228, "fundamental_matrix": 228, "r946": 228, "lip": 228, "limiting_distribut": 228, "condition_set": 228, "wm": 228, "r947": 228, "probabilitycours": 228, "11_2_6_stationary_and_limiting_distribut": 228, "r948": 228, "galton": 228, "uchicago": 228, "yibi": 228, "stat317": 228, "lecture4_6up": 228, "continuousmarkovchain": 228, "gen_mat": 228, "generator_matrix": 228, "45279": 228, "58602": 228, "37933": 228, "34211": 228, "7143": 228, "4002723175": 228, "6832579186": 228, "r949": 228, "r950": 228, "biu": 228, "il": 228, "amirgi": 228, "ctmcnote": 228, "bernoulliprocess": 228, "processs": 228, "joint_distribut": 228, "jointdistributionhandmad": 228, "r951": 228, "bernoulli_process": 228, "r952": 228, "mathc": 228, "clarku": 228, "djoyc": 228, "ma217": 228, "given_condit": 228, "poissonprocess": 228, "648": 228, "r953": 228, "11_0_0_intro": 228, "r954": 228, "poisson_point_process": 228, "wiener": 228, "brownian": 228, "scottish": 228, "botanist": 228, "r955": 228, "11_4_0_brownian_motion_wiener_process": 228, "r956": 228, "wiener_process": 228, "gammaprocess": 228, "jump": [228, 285], "472": 228, "r957": 228, "gamma_process": 228, "matrixgamma": 228, "scale_matrix": 228, "r958": 228, "matrix_gamma_distribut": 228, "wishart": 228, "r959": 228, "wishart_distribut": 228, "matrixnorm": 228, "location_matrix": 228, "scale_matrix_1": 228, "scale_matrix_2": 228, "r960": 228, "matrix_normal_distribut": 228, "compound_rv": 228, "compounddistribut": 228, "crv_type": 228, "r961": 228, "compound_probability_distribut": 228, "numsampl": 228, "evaluate_integr": 228, "r962": 228, "entropy_": 228, "information_theori": 228, "r963": 228, "crmarsh": 228, "charles_marsh_continuous_entropi": 228, "r964": 228, "uconn": 228, "kconrad": 228, "blurb": 228, "entropypost": 228, "arg1": 228, "arg2": 228, "cexpr": 228, "coskew": 228, "sigma_": 228, "r965": 228, "r966": 228, "probability_distribut": 228, "randomst": 228, "die_rol": 228, "samp": 228, "pspace": 228, "samp_list": 228, "sam": 228, "42519758": 228, "40207856": 228, "94991743": 228, "85819627": 228, "83403519": 228, "9412172": 228, "85768055": 228, "38954165": 228, "11163337": 228, "3176591": 228, "79115232": 228, "63232916": 228, "01747268": 228, "96716083": 228, "sampling_p": 228, "sampling_": 228, "factorial_mo": 228, "r967": 228, "r968": 228, "factorialmo": 228, "kurtosi": 228, "outlier": 228, "sigma_x": 228, "r969": 228, "r970": 228, "asymmetri": 228, "pearson": 228, "sampling_dens": 228, "centralmo": 228, "cmoment": 228, "expectationmatrix": 228, "randommatrixsymbol": 228, "n11": 228, "n12": 228, "n21": 228, "n22": 228, "variancematrix": 228, "crosscovariancematrix": 228, "randomdomain": 228, "singledomain": 228, "singlepspac": 228, "productdomain": 228, "productpspac": 228, "conditionaldomain": 228, "frv": 228, "finitedomain": 228, "finitepspac": 228, "crv": 228, "continuousdomain": 228, "continuouspspac": 228, "diepspac": 228, "singlefinitepspac": 228, "normalpspac": 228, "singlecontinuouspspac": 228, "frv_type": 228, "randomvari": 228, "tactic": 228, "random_symbol": 228, "rs_swap": 228, "pspace1": 228, "pspace2": 228, "immutabledensendimarrai": 229, "tomatrix": 229, "j_m": 229, "i_a": 229, "i_b": 229, "sum_k": 229, "tensorcontract": [229, 230], "tensordiagon": [229, 230], "derive_by_arrai": 229, "sum_m": 229, "immutablesparsendimarrai": 229, "mutabledensendimarrai": 229, "mutablesparsendimarrai": 229, "index_order_old": 229, "index_order_new": 229, "cab": 229, "contraction_ax": 229, "diagonal_ax": 229, "arraycontract": 230, "arraydiagon": 230, "arraysymbol": 230, "convert_indexed_to_arrai": 230, "arrayadd": 230, "convert_matrix_to_arrai": 230, "convert_array_to_matrix": 230, "expr_tr": 230, "array_der": 230, "index_method": 232, "get_contraction_structur": [232, 233], "deepest": 232, "nested_contract": 232, "get_indic": [232, 233, 234, 235], "indexconformanceexcept": 232, "______": 233, "stem": 233, "dim1": 233, "dim2": 233, "qwerti": 233, "a_ij": 233, "b_ij": 233, "syntact": 233, "a_real": 233, "c_inherit": 233, "c_explicit": 233, "unrol": 233, "tensorindextyp": [234, 235], "eps_dim": 234, "metric_nam": 234, "su": 234, "lorentz": 234, "tensor_index_typ": 234, "is_up": 234, "tensor_inde_typ": 234, "typ": 234, "tensorhead": [234, 235], "index_typ": 234, "tensorsymmetri": 234, "monoterm": 234, "_tensormanag": 234, "set_comm": 234, "asym2": 234, "fully_symmetr": 234, "tensori": [234, 235], "e_z": 234, "no_symmetri": 234, "p_x": 234, "p_y": 234, "p_z": 234, "ipos1": 234, "ipos2": 234, "icomp1": 234, "icomp2": 234, "nameless": 234, "replacement_dict": 234, "free_arg": 234, "addend": 234, "canon_bp": 234, "contract_metr": 234, "contract_al": 234, "ipo": 234, "icomp": 234, "nonrep": 234, "dum": 234, "ext_rank": 234, "is_canon_bp": 234, "get_free_indic": [234, 235], "perm2tensor": 234, "tid": 234, "sorted_compon": 234, "riemann_cyclic_replac": 234, "riemann_cycl": 234, "cadabra": 234, "multiterm": 234, "bianchi": 234, "sym2": 234, "direct_product": 234, "monotorem": 234, "tableaux": 234, "tensortyp": 234, "repetit": [234, 246], "tensormanag": 234, "comm_i2symbol": 234, "comm_symbols2i": 234, "get_comm": 234, "gcomm": 234, "ghcomm": 234, "toper": 235, "partialderiv": 235, "valenc": 235, "uncontract": 235, "compa": 235, "compb": 235, "derivand": 235, "xpass": [237, 239], "nocache_fail": 237, "expectedexcept": 237, "assertionerror": 237, "exceptioninfo": 237, "abort": 237, "9999": 237, "warningcl": [237, 244], "test_stacklevel": 237, "randtest": 238, "portabl": [239, 240], "pytestreport": 239, "force_color": 239, "readlin": 239, "sympydoctestfind": 239, "doctestpars": 239, "exclude_empti": 239, "sympydoctestrunn": 239, "checker": 239, "optionflag": 239, "5140": 239, "doctestrunn": 239, "clear_glob": 239, "writer": 239, "garbag": 239, "check_output": 239, "report_": 239, "sympyoutputcheck": 239, "outputcheck": 239, "stdlib": 239, "testrunn": 239, "sympytestresult": 239, "convert_to_native_path": 239, "lst": 239, "blacklist": 239, "get_sympy_dir": 239, "raise_on_deprec": 239, "deprecationwarn": [239, 244], "run_all_test": 239, "test_arg": 239, "test_kwarg": 239, "doctest_arg": 239, "doctest_kwarg": 239, "examples_arg": 239, "examples_kwarg": 239, "run_in_subprocess_with_hash_random": 239, "function_kwarg": 239, "hostedtoolcach": 239, "x64": 239, "pythonhashse": 239, "_test": 239, "split_list": 239, "sympytestfil": 239, "module_rel": 239, "extraglob": 239, "raise_on_error": 239, "basenam": [239, 240, 241], "slate": 239, "dont_accept_true_for_1": 239, "dont_accept_blanklin": 239, "normalize_whitespac": 239, "ellipsi": 239, "ignore_exception_detail": 239, "report_udiff": 239, "report_cdiff": 239, "report_ndiff": 239, "report_only_first_failur": 239, "mortem": 239, "tomfooleri": 239, "testmod": 239, "tester": 239, "fiddl": [239, 285], "timeout": 239, "keyboardinterrupt": 239, "interrupt": 239, "_basic": 239, "kw": 239, "test_equ": 239, "pdb": 239, "pipe": 239, "time_bal": 239, "tandem": 240, "matvec": 240, "codewrapp": 240, "distutil": 240, "fwrap": 240, "swig": 240, "binary_cal": 240, "22925376": 240, "25165824": 240, "_imp_": [240, 247], "filepath": 240, "cythoncodewrapp": 240, "dump_pyx": 240, "dummywrapp": 240, "f2pycodewrapp": 240, "ufuncifycodewrapp": 240, "dump_c": [240, 241], "funcnam": 240, "code_gen": [240, 241], "argument_tupl": 240, "include_dir": 240, "library_dir": 240, "extra_compile_arg": 240, "extra_link_arg": 240, "symfunc": [240, 247], "funtion_nam": 240, "ndimension": 240, "f_fortran": 240, "f_cython": 240, "r971": 240, "fortran77": 241, "fortran90": 241, "julia": 241, "rust": 241, "mileston": 241, "unsurmount": 241, "pyf": 241, "inputoutput": 241, "tcc": 241, "libtcc": 241, "date": 241, "hostnam": 241, "sha1": 241, "ccodegen": 241, "preprocessor_stat": 241, "dump_h": 241, "guard": 241, "get_prototyp": 241, "codegenerror": 241, "function_prototyp": 241, "dump_cod": 241, "cname": 241, "fname": 241, "pynam": 241, "jlname": 241, "octnam": 241, "rsname": 241, "fcodegen": 241, "f90": 241, "dump_f95": 241, "get_interfac": 241, "juliacodegen": 241, "dump_jl": 241, "octavecodegen": 241, "dump_m": 241, "returnvalu": 241, "destin": 241, "local_var": 241, "result_vari": 241, "ot": 241, "unnam": 241, "rustcodegen": 241, "dump_r": 241, "f_result": 241, "myfcn": 241, "fcn2": 241, "myfcn_result": 241, "void": 241, "get_default_datatyp": 241, "complex_allow": 241, "agnost": 241, "conserve_mpmath_dp": 242, "doctest_depends_on": 242, "disable_view": 242, "python_vers": 242, "memoize_properti": 242, "propfunc": 242, "no_attrs_in_subclass": 242, "__all__": 242, "some_funct": 242, "thread": 242, "xthread": 242, "threaded_factori": 242, "use_add": 242, "multiset_partitions_taocp": 243, "visitor": 243, "pstack": 243, "lpart": 243, "topmost": 243, "partcompon": 243, "peek": [243, 285], "unpredict": 243, "list_visitor": 243, "abb": [243, 246], "factoring_visitor": 243, "multisetpartitiontravers": 243, "aocp": 243, "count_partit": 243, "127750": 243, "686": 243, "4a": 243, "factorisatio": 243, "oppenheim": 243, "numerorum": 243, "canfield": 243, "erdo": 243, "OF": 243, "yorgei": 243, "monad": 243, "persist": 243, "288716": 243, "memoiz": [243, 245, 272], "dramat": 243, "hypothet": 243, "borrow": 243, "coalesc": 243, "_rang": 243, "stretch": 243, "brain": 243, "histogram": 243, "enum_al": 243, "enum_larg": 243, "enum_rang": 243, "enum_smal": 243, "ub": 243, "parti": 244, "catch_warn": 244, "simplefilt": 244, "dedent": [244, 249], "enum": [245, 272], "miscellan": [245, 272], "pkgdata": [245, 272], "notiter": 246, "binary_partit": 246, "r972": 246, "taocp": 246, "nx": 246, "common_prefix": 246, "common_suffix": 246, "unhash": 246, "r973": 246, "connected_component_": 246, "graph_theori": 246, "r974": 246, "27s_strongly_connected_components_algorithm": 246, "dict_merg": 246, "filter_symbol": 246, "myop": 246, "kog": 246, "informatik": 246, "hamburg": 246, "mein": 246, "python_trick": 246, "neighbor": 246, "xxxxxx": 246, "xxxx": 246, "r975": 246, "method_ring": 246, "r976": 246, "4856615": 246, "4857018": 246, "r977": 246, "programminggeek": 246, "r978": 246, "steinhau": 246, "93johnson": 246, "93trotter_algorithm": 246, "r979": 246, "involut": 246, "eco": 246, "vajnovszki": 246, "dmtc": 246, "generate_involut": 246, "r980": 246, "permutationinvolut": 246, "generate_oriented_forest": 246, "forest": 246, "acycl": 246, "r981": 246, "beyer": 246, "hedetniemi": 246, "novemb": 246, "r982": 246, "1633833": 246, "has_dup": 246, "has_varieti": 246, "iproduct": 246, "abcbb": 246, "is_sequ": 246, "generatortyp": 246, "_iter": 246, "kbin": 246, "ordered_flag": 246, "least_rot": 246, "rotate_left": 246, "r983": 246, "lexicographically_minimal_string_rot": 246, "minlex": 246, "acb": 246, "11010011000": 246, "00011010011": 246, "00011001011": 246, "aaa": 246, "abi": 246, "bby": 246, "abracadabra": 246, "banana": 246, "multiset_derang": 246, "uniq": 246, "1233": 246, "3312": 246, "3321": 246, "aba": 246, "baa": 246, "bead": 246, "ooo": 246, "r984": 246, "ordered_partit": 246, "r985": 246, "jeromekelleh": 246, "r986": 246, "jerom": 246, "kelleh": 246, "barri": 246, "sullivan": 246, "0909": 246, "2331v2": 246, "r987": 246, "activest": 246, "218332": 246, "random_derang": 246, "reseed": 246, "rotate_right": 246, "roundrobin": 246, "ef": 246, "credit": 246, "sakki": 246, "keyfunc": 246, "subgraph": 246, "r988": 246, "r989": 246, "longest": 246, "r990": 246, "unflatten": 246, "partion": 246, "bcd": 246, "afunc": 247, "lambdastr": 247, "dummifi": 247, "use_imp": 247, "custom_sin": 247, "38177329": 247, "49315059": 247, "8414709848078965": 247, "eager": 247, "enable_eager_execut": 247, "eagertensor": 247, "__class__": 247, "placehold": 247, "user_guid": 247, "runtimewarn": 247, "sin_cos_sympi": 247, "sin_co": 247, "sin_cos_numpi": 247, "38177329068": 247, "module_dictionari": 247, "_lambdifygener": 247, "__globals__": 247, "lambdaprint": 247, "90929743": [247, 274], "assoc_recurrence_memo": 248, "base_seq": 248, "memo": 248, "pn0": 248, "recurrence_memo": 248, "specfun": 248, "__index__": 249, "sanit": 249, "99999999999999991611392": 249, "debug_decor": 249, "fillded": 249, "strline": 249, "rawlin": 249, "find_execut": 249, "pathsep": 249, "pastabl": 249, "bee": 249, "spamham": 249, "sha": 249, "spam": 249, "egg": 249, "md5": 249, "eggsham": 249, "r991": 249, "6116978": 249, "roken": 249, "deletechar": 249, "multicharact": 249, "oldchar": 249, "newchar": 249, "acquir": 250, "getresourc": 250, "pkgname": 250, "pkgpath": 250, "dirnam": 250, "normpath": 250, "rb": 250, "__loader__": 250, "stringio": 250, "get_resourc": 250, "ioerror": 250, "mydata": 250, "mypkgdata": 250, "jpg": 250, "get_class": 251, "lookup_view": 251, "get_mod_func": 251, "callback": 251, "timeutil": 252, "coordsysrect": 253, "coordsys3d": [253, 255, 256, 257, 259, 260, 263], "rotation_matrix": [253, 255, 258], "vector_nam": 253, "variable_nam": [253, 260], "latex_vect": 253, "pretty_vect": 253, "latex_scalar": 253, "pretty_scalar": 253, "new_system": 253, "create_new": [253, 258], "transformation_to_par": 253, "transformation_from_par": 253, "locate_new": [253, 256, 257, 258, 259, 260], "position_wrt": [253, 257, 258, 259], "orient_new": [253, 255], "axisorient": [253, 255, 258], "axis_orient": [253, 258], "bodyorient": [253, 255, 258], "body_orient": [253, 255, 258], "spaceorient": [253, 255, 258], "space_orient": [253, 255], "quaternionorient": [253, 255, 258], "q_orient": [253, 255], "orient_new_axi": [253, 256, 258], "orient_new_bodi": [253, 258], "angle1": [253, 255], "angle2": [253, 255], "angle3": [253, 255], "euler_angl": [253, 255], "orient_new_quaternion": [253, 258], "orient_new_spac": [253, 258], "coordsyrect": 253, "v_a": 253, "v_b": 253, "scalar_map": 253, "basevector": [253, 257, 258], "delop": [253, 259, 260], "r992": 253, "r993": 253, "basedyad": [253, 257], "second_system": 253, "deloper": [253, 261], "parametricregion": [253, 256, 263], "implicitregion": [253, 256, 263], "parabola": 253, "rational_parametr": 253, "singular_point": 253, "regular_point": 253, "reg_point": 253, "implict": 253, "cubic_curv": 253, "calulc": 253, "hoffmann": 253, "purdu": 253, "lib": 253, "cgi": 253, "viewcont": 253, "1827": 253, "cstech": 253, "erik": 253, "hillgart": 253, "diploma": 253, "linz": 253, "universitat": 253, "availa": 253, "risc_1355": 253, "20point": 253, "20on": 253, "20conic": 253, "parametricintegr": 253, "semispher": [253, 263], "axis_orienter1": 255, "axis_orienter2": 255, "axis_orienter3": 255, "body_orienter1": 255, "body_orienter2": 255, "body_orienter3": 255, "matrix_to_vector": 256, "system2": 256, "vector_integr": [256, 263], "essenc": 257, "vectormul": 257, "vectoradd": 257, "ofcours": 257, "vectorzero": 257, "expressli": 257, "express_coordin": [257, 258], "dyadicmul": 257, "dyadicadd": 257, "cleanest": 258, "orient_new_": 258, "basescalar": [258, 260], "oabc": 259, "oa": 259, "pq": 259, "sr": 259, "wikidel": 259, "ffield": 259, "gradient_field": 260, "instantan": 260, "directional_deriv": 260, "lame": 260, "dyadicproduct": 261, "quantifi": 262, "throughtout": 262, "necesssari": 263, "param_circl": 263, "implicit_circl": 263, "obextj": 263, "solidspher": 263, "lamina": 263, "\ud835\udc45": 263, "cylind": 263, "vectorfield": 263, "hemispher": 263, "top_fac": 263, "bottom_fac": 263, "27_theorem": 263, "cone": 263, "divergence_theorem": 263, "12288": 263, "truss": 270, "str_expr": 274, "82842712474619": 274, "141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068": 274, "0874989834394464": 274, "roundoff": 274, "14112001": 274, "7568025": 274, "95892427": 274, "2794155": 274, "6569866": 274, "98935825": 274, "41211849": 274, "0998334166468": 274, "sympy_nam": 274, "numerical_funct": 274, "rephras": 275, "oh": 275, "integration_vari": 275, "dfdx": 275, "equidistantli": 275, "d2fdx2": 275, "django": 277, "oop": 277, "crazi": 277, "abcdef": 277, "reevalu": 277, "infal": 277, "entertain": 278, "preliminari": 278, "82842712475": 279, "cass": 279, "wrote": [279, 280], "theme": 279, "expanded_expr": 279, "whet": 279, "appetit": 279, "c\u2082": [279, 286], "c\u2081": [279, 286], "\u03bd": 279, "sell": 279, "battl": 279, "confid": 279, "gigabyt": 279, "tear": 280, "dotprint": [280, 284], "stopper": 280, "uexpr": 280, "unevalutedexpr": 280, "downsid": 281, "algebraic_multipl": 281, "pdp": 281, "undertest": 281, "underevalu": 281, "my_iszero": 281, "stronger": 281, "tradeoff": 281, "wonder": 281, "5b7c3e8ee5b40332abdb206c": 281, "15141": 281, "19548": 281, "10120": 281, "10279": 281, "constant_problem": 281, "possiblezeroq": 281, "mupad_ref": 281, "iszero": 281, "congratul": 282, "decent": 283, "austin": 283, "video": 283, "javascript": 284, "bvar": 284, "unnecessarili": 285, "whittl": 285, "catchal": 285, "collected_expr": 285, "cdot1": 285, "undertak": 285, "undon": 285, "cdot2": 285, "nck": 285, "pronounc": 285, "_2f_1": 285, "cfrac": 285, "list_to_frac": 285, "a\u2080": 285, "a\u2083": 285, "a\u2084": 285, "pointless": 285, "orig_frac": 285, "diffeq": 286}, "objects": {"": [[30, 0, 0, "-", "sympy"]], "sympy": [[32, 0, 0, "-", "abc"], [33, 0, 0, "-", "algebras"], [36, 0, 0, "-", "assumptions"], [39, 0, 0, "-", "calculus"], [40, 0, 0, "-", "categories"], [61, 0, 0, "-", "diffgeom"], [62, 0, 0, "-", "discrete"], [66, 0, 0, "-", "functions"], [79, 0, 0, "-", "holonomic"], [86, 0, 0, "-", "integrals"], [87, 0, 0, "-", "interactive"], [88, 0, 0, "-", "liealgebras"], [89, 0, 0, "-", "logic"], [94, 0, 0, "-", "matrices"], [101, 0, 0, "-", "parsing"], [270, 0, 0, "-", "physics"], [204, 0, 0, "-", "polys"], [226, 0, 0, "-", "solvers"], [228, 0, 0, "-", "stats"], [231, 0, 0, "-", "tensor"], [236, 0, 0, "-", "testing"], [245, 0, 0, "-", "utilities"], [261, 0, 0, "-", "vector"]], "sympy.algebras": [[33, 1, 1, "", "Quaternion"]], "sympy.algebras.Quaternion": [[33, 2, 1, "", "add"], [33, 2, 1, "", "angle"], [33, 2, 1, "", "arc_coplanar"], [33, 2, 1, "", "axis"], [33, 2, 1, "", "exp"], [33, 2, 1, "", "from_axis_angle"], [33, 2, 1, "", "from_rotation_matrix"], [33, 2, 1, "", "index_vector"], [33, 2, 1, "", "integrate"], [33, 2, 1, "", "inverse"], [33, 2, 1, "", "is_pure"], [33, 2, 1, "", "is_zero_quaternion"], [33, 2, 1, "", "mensor"], [33, 2, 1, "", "mul"], [33, 2, 1, "", "norm"], [33, 2, 1, "", "normalize"], [33, 2, 1, "", "orthogonal"], [33, 2, 1, "", "parallel"], [33, 2, 1, "", "pow"], [33, 2, 1, "", "pow_cos_sin"], [33, 2, 1, "", "rotate_point"], [33, 2, 1, "", "scalar_part"], [33, 2, 1, "", "to_axis_angle"], [33, 2, 1, "", "to_rotation_matrix"], [33, 2, 1, "", "vector_coplanar"], [33, 2, 1, "", "vector_part"]], "sympy.assumptions": [[34, 0, 0, "-", "ask"], [35, 0, 0, "-", "assume"], [37, 0, 0, "-", "predicates"], [38, 0, 0, "-", "refine"]], "sympy.assumptions.ask": [[34, 1, 1, "", "AssumptionKeys"], [34, 3, 1, "", "ask"], [34, 3, 1, "", "register_handler"], [34, 3, 1, "", "remove_handler"]], "sympy.assumptions.assume": [[35, 1, 1, "", "AppliedPredicate"], [35, 1, 1, "", "AssumptionsContext"], [35, 1, 1, "", "Predicate"], [35, 1, 1, "", "UndefinedPredicate"], [35, 3, 1, "", "assuming"]], "sympy.assumptions.assume.AppliedPredicate": [[35, 4, 1, "", "arg"], [35, 4, 1, "", "arguments"], [35, 4, 1, "", "function"]], "sympy.assumptions.assume.AssumptionsContext": [[35, 2, 1, "", "add"]], "sympy.assumptions.assume.Predicate": [[35, 2, 1, "", "eval"], [35, 5, 1, "", "handler"], [35, 2, 1, "", "register"], [35, 2, 1, "", "register_many"]], "sympy.assumptions.predicates.calculus": [[37, 1, 1, "", "FinitePredicate"], [37, 1, 1, "", "InfinitePredicate"]], "sympy.assumptions.predicates.calculus.FinitePredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.calculus.InfinitePredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common": [[37, 1, 1, "", "CommutativePredicate"], [37, 1, 1, "", "IsTruePredicate"]], "sympy.assumptions.predicates.common.CommutativePredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common.IsTruePredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices": [[37, 1, 1, "", "ComplexElementsPredicate"], [37, 1, 1, "", "DiagonalPredicate"], [37, 1, 1, "", "FullRankPredicate"], [37, 1, 1, "", "IntegerElementsPredicate"], [37, 1, 1, "", "InvertiblePredicate"], [37, 1, 1, "", "LowerTriangularPredicate"], [37, 1, 1, "", "NormalPredicate"], [37, 1, 1, "", "OrthogonalPredicate"], [37, 1, 1, "", "PositiveDefinitePredicate"], [37, 1, 1, "", "RealElementsPredicate"], [37, 1, 1, "", "SingularPredicate"], [37, 1, 1, "", "SquarePredicate"], [37, 1, 1, "", "SymmetricPredicate"], [37, 1, 1, "", "TriangularPredicate"], [37, 1, 1, "", "UnitTriangularPredicate"], [37, 1, 1, "", "UnitaryPredicate"], [37, 1, 1, "", "UpperTriangularPredicate"]], "sympy.assumptions.predicates.matrices.ComplexElementsPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.DiagonalPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.FullRankPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.IntegerElementsPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.InvertiblePredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.LowerTriangularPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.NormalPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.OrthogonalPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.RealElementsPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SingularPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SquarePredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SymmetricPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.TriangularPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitTriangularPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitaryPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UpperTriangularPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory": [[37, 1, 1, "", "CompositePredicate"], [37, 1, 1, "", "EvenPredicate"], [37, 1, 1, "", "OddPredicate"], [37, 1, 1, "", "PrimePredicate"]], "sympy.assumptions.predicates.ntheory.CompositePredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.EvenPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.OddPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.PrimePredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order": [[37, 1, 1, "", "NegativePredicate"], [37, 1, 1, "", "NonNegativePredicate"], [37, 1, 1, "", "NonPositivePredicate"], [37, 1, 1, "", "NonZeroPredicate"], [37, 1, 1, "", "PositivePredicate"], [37, 1, 1, "", "ZeroPredicate"]], "sympy.assumptions.predicates.order.NegativePredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonNegativePredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonPositivePredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonZeroPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.PositivePredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.ZeroPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets": [[37, 1, 1, "", "AlgebraicPredicate"], [37, 1, 1, "", "AntihermitianPredicate"], [37, 1, 1, "", "ComplexPredicate"], [37, 1, 1, "", "ExtendedRealPredicate"], [37, 1, 1, "", "HermitianPredicate"], [37, 1, 1, "", "ImaginaryPredicate"], [37, 1, 1, "", "IntegerPredicate"], [37, 1, 1, "", "IrrationalPredicate"], [37, 1, 1, "", "RationalPredicate"], [37, 1, 1, "", "RealPredicate"], [37, 1, 1, "", "TranscendentalPredicate"]], "sympy.assumptions.predicates.sets.AlgebraicPredicate": [[37, 5, 1, "", "AlgebraicHandler"], [37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.AntihermitianPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ComplexPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ExtendedRealPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.HermitianPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ImaginaryPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IntegerPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IrrationalPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RationalPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RealPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.TranscendentalPredicate": [[37, 5, 1, "", "handler"]], "sympy.assumptions.refine": [[38, 3, 1, "", "refine"], [38, 3, 1, "", "refine_Pow"], [38, 3, 1, "", "refine_abs"], [38, 3, 1, "", "refine_arg"], [38, 3, 1, "", "refine_atan2"], [38, 3, 1, "", "refine_im"], [38, 3, 1, "", "refine_matrixelement"], [38, 3, 1, "", "refine_re"], [38, 3, 1, "", "refine_sign"]], "sympy.calculus": [[39, 0, 0, "-", "euler"], [39, 0, 0, "-", "finite_diff"], [39, 0, 0, "-", "singularities"], [39, 0, 0, "-", "util"]], "sympy.calculus.euler": [[39, 3, 1, "", "euler_equations"]], "sympy.calculus.finite_diff": [[39, 3, 1, "", "apply_finite_diff"], [39, 3, 1, "", "differentiate_finite"], [39, 3, 1, "", "finite_diff_weights"]], "sympy.calculus.singularities": [[39, 3, 1, "", "is_decreasing"], [39, 3, 1, "", "is_increasing"], [39, 3, 1, "", "is_monotonic"], [39, 3, 1, "", "is_strictly_decreasing"], [39, 3, 1, "", "is_strictly_increasing"], [39, 3, 1, "", "monotonicity_helper"], [39, 3, 1, "", "singularities"]], "sympy.calculus.util": [[39, 3, 1, "", "continuous_domain"], [39, 3, 1, "", "function_range"], [39, 3, 1, "", "is_convex"], [39, 3, 1, "", "lcim"], [39, 3, 1, "", "maximum"], [39, 3, 1, "", "minimum"], [39, 3, 1, "", "not_empty_in"], [39, 3, 1, "", "periodicity"], [39, 3, 1, "", "stationary_points"]], "sympy.categories": [[40, 1, 1, "", "Category"], [40, 1, 1, "", "CompositeMorphism"], [40, 1, 1, "", "Diagram"], [40, 1, 1, "", "IdentityMorphism"], [40, 1, 1, "", "Morphism"], [40, 1, 1, "", "NamedMorphism"], [40, 1, 1, "", "Object"], [40, 0, 0, "-", "diagram_drawing"]], "sympy.categories.Category": [[40, 4, 1, "", "commutative_diagrams"], [40, 4, 1, "", "name"], [40, 4, 1, "", "objects"]], "sympy.categories.CompositeMorphism": [[40, 4, 1, "", "codomain"], [40, 4, 1, "", "components"], [40, 4, 1, "", "domain"], [40, 2, 1, "", "flatten"]], "sympy.categories.Diagram": [[40, 4, 1, "", "conclusions"], [40, 2, 1, "", "hom"], [40, 2, 1, "", "is_subdiagram"], [40, 4, 1, "", "objects"], [40, 4, 1, "", "premises"], [40, 2, 1, "", "subdiagram_from_objects"]], "sympy.categories.Morphism": [[40, 4, 1, "", "codomain"], [40, 2, 1, "", "compose"], [40, 4, 1, "", "domain"]], "sympy.categories.NamedMorphism": [[40, 4, 1, "", "name"]], "sympy.categories.diagram_drawing": [[40, 1, 1, "", "ArrowStringDescription"], [40, 1, 1, "", "DiagramGrid"], [40, 1, 1, "", "XypicDiagramDrawer"], [40, 3, 1, "", "preview_diagram"], [40, 3, 1, "", "xypic_draw_diagram"]], "sympy.categories.diagram_drawing.DiagramGrid": [[40, 4, 1, "", "height"], [40, 4, 1, "", "morphisms"], [40, 4, 1, "", "width"]], "sympy.categories.diagram_drawing.XypicDiagramDrawer": [[40, 2, 1, "", "draw"]], "sympy.codegen": [[41, 0, 0, "-", "algorithms"], [41, 0, 0, "-", "approximations"], [41, 0, 0, "-", "ast"], [41, 0, 0, "-", "cfunctions"], [41, 0, 0, "-", "cnodes"], [41, 0, 0, "-", "cutils"], [41, 0, 0, "-", "cxxnodes"], [41, 0, 0, "-", "fnodes"], [41, 0, 0, "-", "futils"], [41, 0, 0, "-", "matrix_nodes"], [41, 0, 0, "-", "pyutils"], [41, 0, 0, "-", "rewriting"]], "sympy.codegen.algorithms": [[41, 3, 1, "", "newtons_method"], [41, 3, 1, "", "newtons_method_function"]], "sympy.codegen.approximations": [[41, 1, 1, "", "SeriesApprox"], [41, 1, 1, "", "SumApprox"]], "sympy.codegen.ast": [[41, 1, 1, "", "Assignment"], [41, 1, 1, "", "AssignmentBase"], [41, 1, 1, "", "Attribute"], [41, 1, 1, "", "AugmentedAssignment"], [41, 1, 1, "", "BreakToken"], [41, 1, 1, "", "CodeBlock"], [41, 1, 1, "", "Comment"], [41, 1, 1, "", "ComplexType"], [41, 1, 1, "", "ContinueToken"], [41, 1, 1, "", "Declaration"], [41, 1, 1, "", "Element"], [41, 1, 1, "", "FloatBaseType"], [41, 1, 1, "", "FloatType"], [41, 1, 1, "", "For"], [41, 1, 1, "", "FunctionCall"], [41, 1, 1, "", "FunctionDefinition"], [41, 1, 1, "", "FunctionPrototype"], [41, 1, 1, "", "IntBaseType"], [41, 1, 1, "", "Node"], [41, 1, 1, "", "NoneToken"], [41, 1, 1, "", "Pointer"], [41, 1, 1, "", "Print"], [41, 1, 1, "", "QuotedString"], [41, 1, 1, "", "Return"], [41, 1, 1, "", "Scope"], [41, 1, 1, "", "SignedIntType"], [41, 1, 1, "", "Stream"], [41, 1, 1, "", "String"], [41, 1, 1, "", "Token"], [41, 1, 1, "", "Type"], [41, 1, 1, "", "UnsignedIntType"], [41, 1, 1, "", "Variable"], [41, 1, 1, "", "While"], [41, 3, 1, "", "aug_assign"]], "sympy.codegen.ast.CodeBlock": [[41, 2, 1, "", "cse"], [41, 2, 1, "", "topological_sort"]], "sympy.codegen.ast.FloatBaseType": [[41, 5, 1, "", "cast_nocheck"]], "sympy.codegen.ast.FloatType": [[41, 2, 1, "", "cast_nocheck"], [41, 4, 1, "", "decimal_dig"], [41, 4, 1, "", "dig"], [41, 4, 1, "", "eps"], [41, 4, 1, "", "max"], [41, 4, 1, "", "max_exponent"], [41, 4, 1, "", "min_exponent"], [41, 4, 1, "", "tiny"]], "sympy.codegen.ast.Node": [[41, 2, 1, "", "attr_params"]], "sympy.codegen.ast.Token": [[41, 2, 1, "", "kwargs"]], "sympy.codegen.ast.Type": [[41, 2, 1, "", "cast_check"], [41, 2, 1, "", "from_expr"]], "sympy.codegen.ast.Variable": [[41, 2, 1, "", "as_Declaration"], [41, 2, 1, "", "deduced"]], "sympy.codegen.cfunctions": [[41, 1, 1, "", "Cbrt"], [41, 1, 1, "", "Sqrt"], [41, 1, 1, "", "exp2"], [41, 1, 1, "", "expm1"], [41, 1, 1, "", "fma"], [41, 1, 1, "", "hypot"], [41, 1, 1, "", "log10"], [41, 1, 1, "", "log1p"], [41, 1, 1, "", "log2"]], "sympy.codegen.cfunctions.Cbrt": [[41, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.Sqrt": [[41, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.exp2": [[41, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.expm1": [[41, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.fma": [[41, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.hypot": [[41, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log10": [[41, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log1p": [[41, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log2": [[41, 2, 1, "", "fdiff"]], "sympy.codegen.cnodes": [[41, 1, 1, "", "CommaOperator"], [41, 1, 1, "", "Label"], [41, 1, 1, "", "PostDecrement"], [41, 1, 1, "", "PostIncrement"], [41, 1, 1, "", "PreDecrement"], [41, 1, 1, "", "PreIncrement"], [41, 3, 1, "", "alignof"], [41, 1, 1, "", "goto"], [41, 3, 1, "", "sizeof"], [41, 1, 1, "", "struct"], [41, 1, 1, "", "union"]], "sympy.codegen.cutils": [[41, 3, 1, "", "render_as_source_file"]], "sympy.codegen.cxxnodes": [[41, 1, 1, "", "using"]], "sympy.codegen.fnodes": [[41, 1, 1, "", "ArrayConstructor"], [41, 1, 1, "", "Do"], [41, 1, 1, "", "Extent"], [41, 1, 1, "", "FortranReturn"], [41, 1, 1, "", "GoTo"], [41, 1, 1, "", "ImpliedDoLoop"], [41, 1, 1, "", "Module"], [41, 1, 1, "", "Program"], [41, 1, 1, "", "Subroutine"], [41, 1, 1, "", "SubroutineCall"], [41, 3, 1, "", "allocated"], [41, 3, 1, "", "array"], [41, 3, 1, "", "bind_C"], [41, 1, 1, "", "cmplx"], [41, 3, 1, "", "dimension"], [41, 1, 1, "", "dsign"], [41, 1, 1, "", "isign"], [41, 1, 1, "", "kind"], [41, 3, 1, "", "lbound"], [41, 1, 1, "", "literal_dp"], [41, 1, 1, "", "literal_sp"], [41, 1, 1, "", "merge"], [41, 3, 1, "", "reshape"], [41, 3, 1, "", "shape"], [41, 3, 1, "", "size"], [41, 1, 1, "", "use"], [41, 1, 1, "", "use_rename"]], "sympy.codegen.futils": [[41, 3, 1, "", "render_as_module"]], "sympy.codegen.matrix_nodes": [[41, 1, 1, "", "MatrixSolve"]], "sympy.codegen.pyutils": [[41, 3, 1, "", "render_as_module"]], "sympy.codegen.rewriting": [[41, 1, 1, "", "FuncMinusOneOptim"], [41, 1, 1, "", "Optimization"], [41, 1, 1, "", "ReplaceOptim"], [41, 3, 1, "", "create_expand_pow_optimization"], [41, 3, 1, "", "optimize"]], "sympy.codegen.rewriting.FuncMinusOneOptim": [[41, 2, 1, "", "replace_in_Add"]], "sympy.combinatorics": [[51, 0, 0, "-", "generators"], [43, 0, 0, "-", "graycode"], [44, 0, 0, "-", "group_constructs"], [45, 0, 0, "-", "group_numbers"], [47, 0, 0, "-", "named_groups"], [48, 0, 0, "-", "partitions"], [50, 0, 0, "-", "perm_groups"], [51, 0, 0, "-", "permutations"], [52, 0, 0, "-", "polyhedron"], [53, 0, 0, "-", "prufer"], [54, 0, 0, "-", "subsets"], [55, 0, 0, "-", "tensor_can"], [56, 0, 0, "-", "testutil"], [57, 0, 0, "-", "util"]], "sympy.combinatorics.generators": [[51, 2, 1, "", "alternating"], [51, 2, 1, "", "cyclic"], [51, 2, 1, "", "dihedral"], [51, 2, 1, "", "symmetric"]], "sympy.combinatorics.graycode": [[43, 1, 1, "", "GrayCode"], [43, 2, 1, "", "bin_to_gray"], [43, 2, 1, "", "get_subset_from_bitstring"], [43, 2, 1, "", "gray_to_bin"], [43, 2, 1, "", "graycode_subsets"], [43, 2, 1, "", "random_bitstring"]], "sympy.combinatorics.graycode.GrayCode": [[43, 4, 1, "", "current"], [43, 2, 1, "", "generate_gray"], [43, 4, 1, "", "n"], [43, 2, 1, "", "next"], [43, 4, 1, "", "rank"], [43, 4, 1, "", "selections"], [43, 2, 1, "", "skip"], [43, 2, 1, "", "unrank"]], "sympy.combinatorics.group_constructs": [[44, 3, 1, "", "DirectProduct"]], "sympy.combinatorics.group_numbers": [[45, 3, 1, "", "is_abelian_number"], [45, 3, 1, "", "is_cyclic_number"], [45, 3, 1, "", "is_nilpotent_number"]], "sympy.combinatorics.named_groups": [[47, 3, 1, "", "AbelianGroup"], [47, 3, 1, "", "AlternatingGroup"], [47, 3, 1, "", "CyclicGroup"], [47, 3, 1, "", "DihedralGroup"], [47, 3, 1, "", "SymmetricGroup"]], "sympy.combinatorics.partitions": [[48, 1, 1, "", "IntegerPartition"], [48, 1, 1, "", "Partition"], [48, 3, 1, "", "RGS_enum"], [48, 3, 1, "", "RGS_generalized"], [48, 3, 1, "", "RGS_rank"], [48, 3, 1, "", "RGS_unrank"], [48, 3, 1, "", "random_integer_partition"]], "sympy.combinatorics.partitions.IntegerPartition": [[48, 2, 1, "", "as_dict"], [48, 2, 1, "", "as_ferrers"], [48, 4, 1, "", "conjugate"], [48, 2, 1, "", "next_lex"], [48, 2, 1, "", "prev_lex"]], "sympy.combinatorics.partitions.Partition": [[48, 4, 1, "", "RGS"], [48, 2, 1, "", "from_rgs"], [48, 4, 1, "", "partition"], [48, 4, 1, "", "rank"], [48, 2, 1, "", "sort_key"]], "sympy.combinatorics.perm_groups": [[50, 1, 1, "", "PermutationGroup"]], "sympy.combinatorics.perm_groups.PermutationGroup": [[50, 2, 1, "", "__contains__"], [50, 2, 1, "", "__mul__"], [50, 2, 1, "", "__new__"], [50, 5, 1, "", "__weakref__"], [50, 2, 1, "", "_coset_representative"], [50, 2, 1, "", "_distinct_primes_lemma"], [50, 4, 1, "", "_elements"], [50, 2, 1, "", "_eval_is_alt_sym_monte_carlo"], [50, 2, 1, "", "_eval_is_alt_sym_naive"], [50, 2, 1, "", "_p_elements_group"], [50, 2, 1, "", "_random_pr_init"], [50, 2, 1, "", "_sylow_alt_sym"], [50, 2, 1, "", "_union_find_merge"], [50, 2, 1, "", "_union_find_rep"], [50, 2, 1, "", "_verify"], [50, 2, 1, "", "abelian_invariants"], [50, 4, 1, "", "base"], [50, 2, 1, "", "baseswap"], [50, 4, 1, "", "basic_orbits"], [50, 4, 1, "", "basic_stabilizers"], [50, 4, 1, "", "basic_transversals"], [50, 2, 1, "", "center"], [50, 2, 1, "", "centralizer"], [50, 2, 1, "", "commutator"], [50, 2, 1, "", "composition_series"], [50, 2, 1, "", "conjugacy_class"], [50, 2, 1, "", "conjugacy_classes"], [50, 2, 1, "", "contains"], [50, 2, 1, "", "coset_factor"], [50, 2, 1, "", "coset_rank"], [50, 2, 1, "", "coset_table"], [50, 2, 1, "", "coset_transversal"], [50, 2, 1, "", "coset_unrank"], [50, 4, 1, "", "degree"], [50, 2, 1, "", "derived_series"], [50, 2, 1, "", "derived_subgroup"], [50, 4, 1, "", "elements"], [50, 2, 1, "", "equals"], [50, 2, 1, "", "generate"], [50, 2, 1, "", "generate_dimino"], [50, 2, 1, "", "generate_schreier_sims"], [50, 2, 1, "", "generator_product"], [50, 4, 1, "", "generators"], [50, 4, 1, "", "identity"], [50, 2, 1, "", "index"], [50, 4, 1, "", "is_abelian"], [50, 2, 1, "", "is_alt_sym"], [50, 4, 1, "", "is_alternating"], [50, 4, 1, "", "is_cyclic"], [50, 2, 1, "", "is_elementary"], [50, 4, 1, "", "is_nilpotent"], [50, 2, 1, "", "is_normal"], [50, 4, 1, "", "is_perfect"], [50, 4, 1, "", "is_polycyclic"], [50, 2, 1, "", "is_primitive"], [50, 4, 1, "", "is_solvable"], [50, 2, 1, "", "is_subgroup"], [50, 4, 1, "", "is_symmetric"], [50, 2, 1, "", "is_transitive"], [50, 4, 1, "", "is_trivial"], [50, 2, 1, "", "lower_central_series"], [50, 2, 1, "", "make_perm"], [50, 4, 1, "", "max_div"], [50, 2, 1, "", "minimal_block"], [50, 2, 1, "", "minimal_blocks"], [50, 2, 1, "", "normal_closure"], [50, 2, 1, "", "orbit"], [50, 2, 1, "", "orbit_rep"], [50, 2, 1, "", "orbit_transversal"], [50, 2, 1, "", "orbits"], [50, 2, 1, "", "order"], [50, 2, 1, "", "pointwise_stabilizer"], [50, 2, 1, "", "polycyclic_group"], [50, 2, 1, "", "presentation"], [50, 2, 1, "", "random"], [50, 2, 1, "", "random_pr"], [50, 2, 1, "", "random_stab"], [50, 2, 1, "", "schreier_sims"], [50, 2, 1, "", "schreier_sims_incremental"], [50, 2, 1, "", "schreier_sims_random"], [50, 2, 1, "", "schreier_vector"], [50, 2, 1, "", "stabilizer"], [50, 4, 1, "", "strong_gens"], [50, 2, 1, "", "strong_presentation"], [50, 2, 1, "", "subgroup"], [50, 2, 1, "", "subgroup_search"], [50, 2, 1, "", "sylow_subgroup"], [50, 4, 1, "", "transitivity_degree"]], "sympy.combinatorics.permutations": [[51, 1, 1, "", "Cycle"], [51, 1, 1, "", "Permutation"], [51, 3, 1, "", "_af_parity"]], "sympy.combinatorics.permutations.Cycle": [[51, 2, 1, "", "list"]], "sympy.combinatorics.permutations.Permutation": [[51, 2, 1, "", "apply"], [51, 4, 1, "", "array_form"], [51, 2, 1, "", "ascents"], [51, 2, 1, "", "atoms"], [51, 4, 1, "", "cardinality"], [51, 2, 1, "", "commutator"], [51, 2, 1, "", "commutes_with"], [51, 4, 1, "", "cycle_structure"], [51, 4, 1, "", "cycles"], [51, 4, 1, "", "cyclic_form"], [51, 2, 1, "", "descents"], [51, 2, 1, "", "from_inversion_vector"], [51, 2, 1, "", "from_sequence"], [51, 4, 1, "", "full_cyclic_form"], [51, 2, 1, "", "get_adjacency_distance"], [51, 2, 1, "", "get_adjacency_matrix"], [51, 2, 1, "", "get_positional_distance"], [51, 2, 1, "", "get_precedence_distance"], [51, 2, 1, "", "get_precedence_matrix"], [51, 2, 1, "", "index"], [51, 2, 1, "", "inversion_vector"], [51, 2, 1, "", "inversions"], [51, 4, 1, "", "is_Empty"], [51, 4, 1, "", "is_Identity"], [51, 4, 1, "", "is_Singleton"], [51, 4, 1, "", "is_even"], [51, 4, 1, "", "is_odd"], [51, 2, 1, "", "josephus"], [51, 2, 1, "", "length"], [51, 2, 1, "", "list"], [51, 2, 1, "", "max"], [51, 2, 1, "", "min"], [51, 2, 1, "", "mul_inv"], [51, 2, 1, "", "next_lex"], [51, 2, 1, "", "next_nonlex"], [51, 2, 1, "", "next_trotterjohnson"], [51, 2, 1, "", "order"], [51, 2, 1, "", "parity"], [51, 2, 1, "", "random"], [51, 2, 1, "", "rank"], [51, 2, 1, "", "rank_nonlex"], [51, 2, 1, "", "rank_trotterjohnson"], [51, 2, 1, "", "resize"], [51, 2, 1, "", "rmul"], [51, 2, 1, "", "rmul_with_af"], [51, 2, 1, "", "runs"], [51, 2, 1, "", "signature"], [51, 4, 1, "", "size"], [51, 2, 1, "", "support"], [51, 2, 1, "", "transpositions"], [51, 2, 1, "", "unrank_lex"], [51, 2, 1, "", "unrank_nonlex"], [51, 2, 1, "", "unrank_trotterjohnson"]], "sympy.combinatorics.polyhedron": [[52, 1, 1, "", "Polyhedron"]], "sympy.combinatorics.polyhedron.Polyhedron": [[52, 4, 1, "", "array_form"], [52, 4, 1, "", "corners"], [52, 4, 1, "", "cyclic_form"], [52, 4, 1, "", "edges"], [52, 4, 1, "", "faces"], [52, 4, 1, "", "pgroup"], [52, 2, 1, "", "reset"], [52, 2, 1, "", "rotate"], [52, 4, 1, "", "size"], [52, 4, 1, "", "vertices"]], "sympy.combinatorics.prufer": [[53, 1, 1, "", "Prufer"]], "sympy.combinatorics.prufer.Prufer": [[53, 2, 1, "", "edges"], [53, 2, 1, "", "next"], [53, 4, 1, "", "nodes"], [53, 2, 1, "", "prev"], [53, 2, 1, "", "prufer_rank"], [53, 4, 1, "", "prufer_repr"], [53, 4, 1, "", "rank"], [53, 4, 1, "", "size"], [53, 2, 1, "", "to_prufer"], [53, 2, 1, "", "to_tree"], [53, 4, 1, "", "tree_repr"], [53, 2, 1, "", "unrank"]], "sympy.combinatorics.subsets": [[54, 1, 1, "", "Subset"], [54, 2, 1, "", "ksubsets"]], "sympy.combinatorics.subsets.Subset": [[54, 2, 1, "", "bitlist_from_subset"], [54, 4, 1, "", "cardinality"], [54, 2, 1, "", "iterate_binary"], [54, 2, 1, "", "iterate_graycode"], [54, 2, 1, "", "next_binary"], [54, 2, 1, "", "next_gray"], [54, 2, 1, "", "next_lexicographic"], [54, 2, 1, "", "prev_binary"], [54, 2, 1, "", "prev_gray"], [54, 2, 1, "", "prev_lexicographic"], [54, 4, 1, "", "rank_binary"], [54, 4, 1, "", "rank_gray"], [54, 4, 1, "", "rank_lexicographic"], [54, 4, 1, "", "size"], [54, 4, 1, "", "subset"], [54, 2, 1, "", "subset_from_bitlist"], [54, 2, 1, "", "subset_indices"], [54, 4, 1, "", "superset"], [54, 4, 1, "", "superset_size"], [54, 2, 1, "", "unrank_binary"], [54, 2, 1, "", "unrank_gray"]], "sympy.combinatorics.tensor_can": [[55, 3, 1, "", "bsgs_direct_product"], [55, 3, 1, "", "canonicalize"], [55, 3, 1, "", "double_coset_can_rep"], [55, 3, 1, "", "get_symmetric_group_sgs"]], "sympy.combinatorics.testutil": [[56, 3, 1, "", "_cmp_perm_lists"], [56, 3, 1, "", "_naive_list_centralizer"], [56, 3, 1, "", "_verify_bsgs"], [56, 3, 1, "", "_verify_centralizer"], [56, 3, 1, "", "_verify_normal_closure"]], "sympy.combinatorics.util": [[57, 3, 1, "", "_base_ordering"], [57, 3, 1, "", "_check_cycles_alt_sym"], [57, 3, 1, "", "_distribute_gens_by_base"], [57, 3, 1, "", "_handle_precomputed_bsgs"], [57, 3, 1, "", "_orbits_transversals_from_bsgs"], [57, 3, 1, "", "_remove_gens"], [57, 3, 1, "", "_strip"], [57, 3, 1, "", "_strong_gens_from_distr"]], "sympy.concrete.expr_with_intlimits": [[58, 1, 1, "", "ExprWithIntLimits"]], "sympy.concrete.expr_with_intlimits.ExprWithIntLimits": [[58, 2, 1, "", "change_index"], [58, 4, 1, "", "has_empty_sequence"], [58, 2, 1, "", "index"], [58, 2, 1, "", "reorder"], [58, 2, 1, "", "reorder_limit"]], "sympy.concrete.expr_with_limits": [[86, 1, 1, "", "ExprWithLimits"]], "sympy.concrete.expr_with_limits.ExprWithLimits": [[86, 4, 1, "", "bound_symbols"], [86, 4, 1, "", "free_symbols"], [86, 4, 1, "", "function"], [86, 4, 1, "", "has_finite_limits"], [86, 4, 1, "", "has_reversed_limits"], [86, 4, 1, "", "is_number"], [86, 4, 1, "", "limits"], [86, 4, 1, "", "variables"]], "sympy.concrete.gosper": [[58, 3, 1, "", "gosper_normal"], [58, 3, 1, "", "gosper_sum"], [58, 3, 1, "", "gosper_term"]], "sympy.concrete.products": [[58, 1, 1, "", "Product"], [58, 3, 1, "", "product"]], "sympy.concrete.products.Product": [[58, 2, 1, "", "is_convergent"], [58, 2, 1, "", "reverse_order"]], "sympy.concrete.summations": [[58, 1, 1, "", "Sum"], [58, 3, 1, "", "summation"]], "sympy.concrete.summations.Sum": [[58, 2, 1, "", "euler_maclaurin"], [58, 2, 1, "", "eval_zeta_function"], [58, 2, 1, "", "is_absolutely_convergent"], [58, 2, 1, "", "is_convergent"], [58, 2, 1, "", "reverse_order"]], "sympy.core": [[59, 0, 0, "-", "add"], [59, 0, 0, "-", "assumptions"], [59, 0, 0, "-", "basic"], [59, 0, 0, "-", "cache"], [59, 0, 0, "-", "containers"], [59, 0, 0, "-", "evalf"], [59, 0, 0, "-", "expr"], [59, 0, 0, "-", "exprtools"], [59, 0, 0, "-", "function"], [59, 0, 0, "-", "kind"], [59, 0, 0, "-", "mod"], [59, 0, 0, "-", "mul"], [59, 0, 0, "-", "multidimensional"], [59, 0, 0, "-", "numbers"], [59, 0, 0, "-", "power"], [59, 0, 0, "-", "random"], [59, 0, 0, "-", "relational"], [59, 0, 0, "-", "singleton"], [59, 0, 0, "-", "symbol"], [59, 0, 0, "-", "sympify"], [59, 0, 0, "-", "traversal"]], "sympy.core.add": [[59, 1, 1, "", "Add"]], "sympy.core.add.Add": [[59, 2, 1, "", "as_coeff_Add"], [59, 2, 1, "", "as_coeff_add"], [59, 2, 1, "", "as_content_primitive"], [59, 2, 1, "", "as_numer_denom"], [59, 2, 1, "", "as_real_imag"], [59, 2, 1, "", "as_two_terms"], [59, 2, 1, "", "class_key"], [59, 2, 1, "", "extract_leading_order"], [59, 2, 1, "", "flatten"], [59, 2, 1, "", "primitive"]], "sympy.core.basic": [[59, 1, 1, "", "Atom"], [59, 1, 1, "", "Basic"]], "sympy.core.basic.Basic": [[59, 4, 1, "", "args"], [59, 2, 1, "", "as_content_primitive"], [59, 2, 1, "", "as_dummy"], [59, 4, 1, "", "assumptions0"], [59, 2, 1, "", "atoms"], [59, 4, 1, "", "canonical_variables"], [59, 2, 1, "", "class_key"], [59, 2, 1, "", "compare"], [59, 2, 1, "", "count"], [59, 2, 1, "", "count_ops"], [59, 2, 1, "", "doit"], [59, 2, 1, "", "dummy_eq"], [59, 2, 1, "", "find"], [59, 4, 1, "", "free_symbols"], [59, 2, 1, "", "fromiter"], [59, 4, 1, "", "func"], [59, 2, 1, "", "has"], [59, 2, 1, "", "has_free"], [59, 2, 1, "", "has_xfree"], [59, 4, 1, "", "is_comparable"], [59, 2, 1, "", "match"], [59, 2, 1, "", "matches"], [59, 2, 1, "", "rcall"], [59, 2, 1, "", "refine"], [59, 2, 1, "", "replace"], [59, 2, 1, "", "rewrite"], [59, 2, 1, "", "simplify"], [59, 2, 1, "", "sort_key"], [59, 2, 1, "", "subs"], [59, 2, 1, "", "xreplace"]], "sympy.core.cache": [[59, 3, 1, "", "__cacheit"]], "sympy.core.containers": [[59, 1, 1, "", "Dict"], [59, 1, 1, "", "Tuple"], [59, 1, 1, "", "TupleKind"]], "sympy.core.containers.Dict": [[59, 2, 1, "", "get"], [59, 2, 1, "", "items"], [59, 2, 1, "", "keys"], [59, 2, 1, "", "values"]], "sympy.core.containers.Tuple": [[59, 2, 1, "", "index"], [59, 4, 1, "", "kind"], [59, 2, 1, "", "tuple_count"]], "sympy.core.evalf": [[59, 1, 1, "", "EvalfMixin"], [59, 3, 1, "", "N"], [59, 1, 1, "", "PrecisionExhausted"]], "sympy.core.evalf.EvalfMixin": [[59, 2, 1, "", "evalf"], [59, 2, 1, "", "n"]], "sympy.core.expr": [[59, 1, 1, "", "AtomicExpr"], [59, 1, 1, "", "Expr"], [59, 1, 1, "", "UnevaluatedExpr"]], "sympy.core.expr.Expr": [[59, 2, 1, "", "apart"], [59, 2, 1, "", "args_cnc"], [59, 2, 1, "", "as_coeff_Add"], [59, 2, 1, "", "as_coeff_Mul"], [59, 2, 1, "", "as_coeff_add"], [59, 2, 1, "", "as_coeff_exponent"], [59, 2, 1, "", "as_coeff_mul"], [59, 2, 1, "", "as_coefficient"], [59, 2, 1, "", "as_coefficients_dict"], [59, 2, 1, "", "as_content_primitive"], [59, 2, 1, "", "as_expr"], [59, 2, 1, "", "as_independent"], [59, 2, 1, "", "as_leading_term"], [59, 2, 1, "", "as_numer_denom"], [59, 2, 1, "", "as_ordered_factors"], [59, 2, 1, "", "as_ordered_terms"], [59, 2, 1, "", "as_poly"], [59, 2, 1, "", "as_powers_dict"], [59, 2, 1, "", "as_real_imag"], [59, 2, 1, "", "as_terms"], [59, 2, 1, "", "aseries"], [59, 2, 1, "", "cancel"], [59, 2, 1, "", "coeff"], [59, 2, 1, "", "collect"], [59, 2, 1, "", "combsimp"], [59, 2, 1, "", "compute_leading_term"], [59, 2, 1, "", "conjugate"], [59, 2, 1, "", "could_extract_minus_sign"], [59, 2, 1, "", "count_ops"], [59, 2, 1, "", "equals"], [59, 2, 1, "", "expand"], [59, 4, 1, "", "expr_free_symbols"], [59, 2, 1, "", "extract_additively"], [59, 2, 1, "", "extract_branch_factor"], [59, 2, 1, "", "extract_multiplicatively"], [59, 2, 1, "", "factor"], [59, 2, 1, "", "fourier_series"], [59, 2, 1, "", "fps"], [59, 2, 1, "", "gammasimp"], [59, 2, 1, "", "getO"], [59, 2, 1, "", "getn"], [59, 2, 1, "", "integrate"], [59, 2, 1, "", "invert"], [59, 2, 1, "", "is_algebraic_expr"], [59, 2, 1, "", "is_constant"], [59, 2, 1, "", "is_meromorphic"], [59, 4, 1, "", "is_number"], [59, 2, 1, "", "is_polynomial"], [59, 2, 1, "", "is_rational_function"], [59, 2, 1, "", "leadterm"], [59, 2, 1, "", "limit"], [59, 2, 1, "", "lseries"], [59, 2, 1, "", "normal"], [59, 2, 1, "", "nseries"], [59, 2, 1, "", "nsimplify"], [59, 2, 1, "", "powsimp"], [59, 2, 1, "", "primitive"], [59, 2, 1, "", "radsimp"], [59, 2, 1, "", "ratsimp"], [59, 2, 1, "", "removeO"], [59, 2, 1, "", "round"], [59, 2, 1, "", "separate"], [59, 2, 1, "", "series"], [59, 2, 1, "", "taylor_term"], [59, 2, 1, "", "together"], [59, 2, 1, "", "trigsimp"]], "sympy.core.exprtools": [[59, 3, 1, "", "factor_terms"], [59, 3, 1, "", "gcd_terms"]], "sympy.core.function": [[59, 1, 1, "", "Derivative"], [59, 1, 1, "", "Function"], [59, 1, 1, "", "FunctionClass"], [59, 1, 1, "", "Lambda"], [59, 1, 1, "", "PoleError"], [59, 1, 1, "", "Subs"], [59, 1, 1, "", "WildFunction"], [59, 3, 1, "", "count_ops"], [59, 3, 1, "", "diff"], [59, 3, 1, "", "expand"], [59, 3, 1, "", "expand_complex"], [59, 3, 1, "", "expand_func"], [59, 3, 1, "", "expand_log"], [59, 3, 1, "", "expand_mul"], [59, 3, 1, "", "expand_multinomial"], [59, 3, 1, "", "expand_power_base"], [59, 3, 1, "", "expand_power_exp"], [59, 3, 1, "", "expand_trig"], [59, 3, 1, "", "nfloat"]], "sympy.core.function.Derivative": [[59, 4, 1, "", "_diff_wrt"], [59, 2, 1, "", "_sort_variable_count"], [59, 2, 1, "", "as_finite_difference"], [59, 2, 1, "", "doit_numerically"]], "sympy.core.function.Function": [[59, 2, 1, "", "as_base_exp"], [59, 2, 1, "", "fdiff"], [59, 2, 1, "", "is_singular"]], "sympy.core.function.FunctionClass": [[59, 4, 1, "", "nargs"]], "sympy.core.function.Lambda": [[59, 4, 1, "", "bound_symbols"], [59, 4, 1, "", "expr"], [59, 4, 1, "", "is_identity"], [59, 4, 1, "", "signature"], [59, 4, 1, "", "variables"]], "sympy.core.function.Subs": [[59, 4, 1, "", "bound_symbols"], [59, 4, 1, "", "expr"], [59, 4, 1, "", "point"], [59, 4, 1, "", "variables"]], "sympy.core.kind": [[59, 5, 1, "", "BooleanKind"], [59, 1, 1, "", "Kind"], [59, 5, 1, "", "NumberKind"], [59, 5, 1, "", "UndefinedKind"]], "sympy.core.mod": [[59, 1, 1, "", "Mod"]], "sympy.core.mul": [[59, 1, 1, "", "Mul"], [59, 3, 1, "", "prod"]], "sympy.core.mul.Mul": [[59, 2, 1, "", "as_coeff_Mul"], [59, 2, 1, "", "as_content_primitive"], [59, 2, 1, "", "as_ordered_factors"], [59, 2, 1, "", "as_two_terms"], [59, 2, 1, "", "flatten"]], "sympy.core.multidimensional": [[59, 1, 1, "", "vectorize"]], "sympy.core.numbers": [[59, 1, 1, "", "AlgebraicNumber"], [59, 1, 1, "", "Catalan"], [59, 1, 1, "", "ComplexInfinity"], [59, 1, 1, "", "EulerGamma"], [59, 1, 1, "", "Exp1"], [59, 1, 1, "", "Float"], [59, 1, 1, "", "GoldenRatio"], [59, 1, 1, "", "Half"], [59, 1, 1, "", "ImaginaryUnit"], [59, 1, 1, "", "Infinity"], [59, 1, 1, "", "Integer"], [59, 1, 1, "", "NaN"], [59, 1, 1, "", "NegativeInfinity"], [59, 1, 1, "", "NegativeOne"], [59, 1, 1, "", "Number"], [59, 1, 1, "", "NumberSymbol"], [59, 1, 1, "", "One"], [59, 1, 1, "", "Pi"], [59, 1, 1, "", "Rational"], [59, 5, 1, "", "RealNumber"], [59, 1, 1, "", "TribonacciConstant"], [59, 1, 1, "", "Zero"], [59, 3, 1, "", "igcd"], [59, 3, 1, "", "ilcm"], [59, 3, 1, "", "mod_inverse"], [59, 3, 1, "", "seterr"]], "sympy.core.numbers.AlgebraicNumber": [[59, 2, 1, "", "__new__"], [59, 2, 1, "", "as_expr"], [59, 2, 1, "", "as_poly"], [59, 2, 1, "", "coeffs"], [59, 2, 1, "", "field_element"], [59, 4, 1, "", "is_aliased"], [59, 4, 1, "", "is_primitive_element"], [59, 2, 1, "", "minpoly_of_element"], [59, 2, 1, "", "native_coeffs"], [59, 2, 1, "", "primitive_element"], [59, 2, 1, "", "to_algebraic_integer"], [59, 2, 1, "", "to_primitive_element"], [59, 2, 1, "", "to_root"]], "sympy.core.numbers.Number": [[59, 2, 1, "", "as_coeff_Add"], [59, 2, 1, "", "as_coeff_Mul"], [59, 2, 1, "", "cofactors"], [59, 2, 1, "", "gcd"], [59, 2, 1, "", "lcm"]], "sympy.core.numbers.NumberSymbol": [[59, 2, 1, "", "approximation"]], "sympy.core.numbers.Rational": [[59, 2, 1, "", "as_coeff_Add"], [59, 2, 1, "", "as_coeff_Mul"], [59, 2, 1, "", "as_content_primitive"], [59, 2, 1, "", "factors"], [59, 2, 1, "", "limit_denominator"]], "sympy.core.power": [[59, 1, 1, "", "Pow"], [59, 3, 1, "", "integer_log"], [59, 3, 1, "", "integer_nthroot"]], "sympy.core.power.Pow": [[59, 2, 1, "", "as_base_exp"], [59, 2, 1, "", "as_content_primitive"]], "sympy.core.random": [[59, 3, 1, "", "_randint"], [59, 3, 1, "", "_randrange"], [59, 3, 1, "", "random_complex_number"], [59, 3, 1, "", "test_derivative_numerically"], [59, 3, 1, "", "verify_numerically"]], "sympy.core.relational": [[59, 5, 1, "", "Eq"], [59, 1, 1, "", "Equality"], [59, 5, 1, "", "Ge"], [59, 1, 1, "", "GreaterThan"], [59, 5, 1, "", "Gt"], [59, 5, 1, "", "Le"], [59, 1, 1, "", "LessThan"], [59, 5, 1, "", "Lt"], [59, 5, 1, "", "Ne"], [59, 5, 1, "", "Rel"], [59, 1, 1, "", "Relational"], [59, 1, 1, "", "StrictGreaterThan"], [59, 1, 1, "", "StrictLessThan"], [59, 1, 1, "", "Unequality"]], "sympy.core.relational.Equality": [[59, 2, 1, "", "as_poly"], [59, 2, 1, "", "integrate"]], "sympy.core.relational.Relational": [[59, 4, 1, "", "canonical"], [59, 2, 1, "", "equals"], [59, 4, 1, "", "lhs"], [59, 4, 1, "", "negated"], [59, 4, 1, "", "reversed"], [59, 4, 1, "", "reversedsign"], [59, 4, 1, "", "rhs"], [59, 4, 1, "", "strict"], [59, 4, 1, "", "weak"]], "sympy.core.singleton": [[59, 1, 1, "", "Singleton"], [59, 1, 1, "", "SingletonRegistry"]], "sympy.core.sorting": [[59, 3, 1, "", "default_sort_key"], [59, 3, 1, "", "ordered"]], "sympy.core.symbol": [[59, 1, 1, "", "Dummy"], [59, 1, 1, "", "Symbol"], [59, 1, 1, "", "Wild"], [59, 3, 1, "", "symbols"], [59, 3, 1, "", "var"]], "sympy.core.sympify": [[59, 3, 1, "", "sympify"]], "sympy.core.traversal": [[59, 3, 1, "", "bottom_up"], [59, 3, 1, "", "postorder_traversal"], [59, 3, 1, "", "preorder_traversal"], [59, 3, 1, "", "use"], [59, 3, 1, "", "walk"]], "sympy.crypto": [[60, 0, 0, "-", "crypto"]], "sympy.crypto.crypto": [[60, 3, 1, "", "AZ"], [60, 3, 1, "", "bifid5_square"], [60, 3, 1, "", "bifid6_square"], [60, 3, 1, "", "check_and_join"], [60, 3, 1, "", "cycle_list"], [60, 3, 1, "", "decipher_affine"], [60, 3, 1, "", "decipher_atbash"], [60, 3, 1, "", "decipher_bifid"], [60, 3, 1, "", "decipher_bifid5"], [60, 3, 1, "", "decipher_bifid6"], [60, 3, 1, "", "decipher_elgamal"], [60, 3, 1, "", "decipher_gm"], [60, 3, 1, "", "decipher_hill"], [60, 3, 1, "", "decipher_kid_rsa"], [60, 3, 1, "", "decipher_railfence"], [60, 3, 1, "", "decipher_rot13"], [60, 3, 1, "", "decipher_rsa"], [60, 3, 1, "", "decipher_shift"], [60, 3, 1, "", "decipher_vigenere"], [60, 3, 1, "", "decode_morse"], [60, 3, 1, "", "dh_private_key"], [60, 3, 1, "", "dh_public_key"], [60, 3, 1, "", "dh_shared_key"], [60, 3, 1, "", "elgamal_private_key"], [60, 3, 1, "", "elgamal_public_key"], [60, 3, 1, "", "encipher_affine"], [60, 3, 1, "", "encipher_atbash"], [60, 3, 1, "", "encipher_bifid"], [60, 3, 1, "", "encipher_bifid5"], [60, 3, 1, "", "encipher_bifid6"], [60, 3, 1, "", "encipher_elgamal"], [60, 3, 1, "", "encipher_gm"], [60, 3, 1, "", "encipher_hill"], [60, 3, 1, "", "encipher_kid_rsa"], [60, 3, 1, "", "encipher_railfence"], [60, 3, 1, "", "encipher_rot13"], [60, 3, 1, "", "encipher_rsa"], [60, 3, 1, "", "encipher_shift"], [60, 3, 1, "", "encipher_substitution"], [60, 3, 1, "", "encipher_vigenere"], [60, 3, 1, "", "encode_morse"], [60, 3, 1, "", "gm_private_key"], [60, 3, 1, "", "gm_public_key"], [60, 3, 1, "", "kid_rsa_private_key"], [60, 3, 1, "", "kid_rsa_public_key"], [60, 3, 1, "", "lfsr_autocorrelation"], [60, 3, 1, "", "lfsr_connection_polynomial"], [60, 3, 1, "", "lfsr_sequence"], [60, 3, 1, "", "padded_key"], [60, 3, 1, "", "rsa_private_key"], [60, 3, 1, "", "rsa_public_key"]], "sympy.diffgeom": [[61, 1, 1, "", "BaseCovarDerivativeOp"], [61, 1, 1, "", "BaseScalarField"], [61, 1, 1, "", "BaseVectorField"], [61, 1, 1, "", "Commutator"], [61, 1, 1, "", "CoordSystem"], [61, 1, 1, "", "CoordinateSymbol"], [61, 1, 1, "", "CovarDerivativeOp"], [61, 1, 1, "", "Differential"], [61, 1, 1, "", "LieDerivative"], [61, 1, 1, "", "Manifold"], [61, 1, 1, "", "Patch"], [61, 1, 1, "", "Point"], [61, 1, 1, "", "TensorProduct"], [61, 1, 1, "", "WedgeProduct"], [61, 3, 1, "", "intcurve_diffequ"], [61, 3, 1, "", "intcurve_series"], [61, 3, 1, "", "metric_to_Christoffel_1st"], [61, 3, 1, "", "metric_to_Christoffel_2nd"], [61, 3, 1, "", "metric_to_Ricci_components"], [61, 3, 1, "", "metric_to_Riemann_components"], [61, 3, 1, "", "twoform_to_matrix"], [61, 3, 1, "", "vectors_in_basis"]], "sympy.diffgeom.CoordSystem": [[61, 2, 1, "", "base_oneform"], [61, 2, 1, "", "base_oneforms"], [61, 2, 1, "", "base_scalar"], [61, 2, 1, "", "base_scalars"], [61, 2, 1, "", "base_vector"], [61, 2, 1, "", "base_vectors"], [61, 2, 1, "", "coord_function"], [61, 2, 1, "", "coord_functions"], [61, 2, 1, "", "coord_tuple_transform_to"], [61, 2, 1, "", "jacobian"], [61, 2, 1, "", "jacobian_determinant"], [61, 2, 1, "", "jacobian_matrix"], [61, 2, 1, "", "point"], [61, 2, 1, "", "point_to_coords"], [61, 2, 1, "", "transform"], [61, 2, 1, "", "transformation"]], "sympy.diffgeom.Point": [[61, 2, 1, "", "coords"]], "sympy.discrete": [[62, 0, 0, "-", "convolutions"], [62, 0, 0, "-", "transforms"]], "sympy.discrete.convolutions": [[62, 3, 1, "", "convolution"], [62, 3, 1, "", "convolution_fft"], [62, 3, 1, "", "convolution_fwht"], [62, 3, 1, "", "convolution_ntt"], [62, 3, 1, "", "convolution_subset"], [62, 3, 1, "", "covering_product"], [62, 3, 1, "", "intersecting_product"]], "sympy.discrete.transforms": [[62, 3, 1, "", "fft"], [62, 3, 1, "", "fwht"], [62, 3, 1, "", "ifft"], [62, 3, 1, "", "ifwht"], [62, 3, 1, "", "intt"], [62, 3, 1, "", "inverse_mobius_transform"], [62, 3, 1, "", "mobius_transform"], [62, 3, 1, "", "ntt"]], "sympy.external.pythonmpq": [[199, 1, 1, "", "PythonMPQ"]], "sympy.functions.combinatorial.factorials": [[64, 1, 1, "", "FallingFactorial"], [64, 1, 1, "", "MultiFactorial"], [64, 1, 1, "", "RisingFactorial"], [64, 1, 1, "", "binomial"], [64, 1, 1, "", "factorial"], [64, 1, 1, "", "factorial2"], [64, 1, 1, "", "subfactorial"]], "sympy.functions.combinatorial.numbers": [[64, 1, 1, "", "andre"], [64, 1, 1, "", "bell"], [64, 1, 1, "", "bernoulli"], [64, 1, 1, "", "catalan"], [64, 1, 1, "", "euler"], [64, 1, 1, "", "fibonacci"], [64, 1, 1, "", "genocchi"], [64, 1, 1, "", "harmonic"], [64, 1, 1, "", "lucas"], [64, 3, 1, "", "nC"], [64, 3, 1, "", "nP"], [64, 3, 1, "", "nT"], [64, 1, 1, "", "partition"], [64, 3, 1, "", "stirling"], [64, 1, 1, "", "tribonacci"]], "sympy.functions.elementary.complexes": [[65, 1, 1, "", "Abs"], [65, 1, 1, "", "arg"], [65, 1, 1, "", "conjugate"], [65, 1, 1, "", "im"], [65, 1, 1, "", "periodic_argument"], [65, 1, 1, "", "polar_lift"], [65, 1, 1, "", "principal_branch"], [65, 1, 1, "", "re"], [65, 1, 1, "", "sign"]], "sympy.functions.elementary.complexes.Abs": [[65, 2, 1, "", "fdiff"]], "sympy.functions.elementary.complexes.im": [[65, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.complexes.re": [[65, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.exponential": [[65, 1, 1, "", "LambertW"], [65, 1, 1, "", "exp"], [65, 1, 1, "", "exp_polar"], [65, 1, 1, "", "log"]], "sympy.functions.elementary.exponential.LambertW": [[65, 2, 1, "", "fdiff"]], "sympy.functions.elementary.exponential.exp": [[65, 2, 1, "", "as_real_imag"], [65, 4, 1, "", "base"], [65, 2, 1, "", "fdiff"], [65, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.exponential.log": [[65, 2, 1, "", "as_base_exp"], [65, 2, 1, "", "as_real_imag"], [65, 2, 1, "", "fdiff"], [65, 2, 1, "", "inverse"], [65, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic": [[65, 1, 1, "", "HyperbolicFunction"], [65, 1, 1, "", "acosh"], [65, 1, 1, "", "acoth"], [65, 1, 1, "", "acsch"], [65, 1, 1, "", "asech"], [65, 1, 1, "", "asinh"], [65, 1, 1, "", "atanh"], [65, 1, 1, "", "cosh"], [65, 1, 1, "", "coth"], [65, 1, 1, "", "csch"], [65, 1, 1, "", "sech"], [65, 1, 1, "", "sinh"], [65, 1, 1, "", "tanh"]], "sympy.functions.elementary.hyperbolic.acosh": [[65, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acoth": [[65, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acsch": [[65, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asech": [[65, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asinh": [[65, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.atanh": [[65, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.coth": [[65, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.csch": [[65, 2, 1, "", "fdiff"], [65, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.sinh": [[65, 2, 1, "", "as_real_imag"], [65, 2, 1, "", "fdiff"], [65, 2, 1, "", "inverse"], [65, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.tanh": [[65, 2, 1, "", "inverse"]], "sympy.functions.elementary.integers": [[65, 1, 1, "", "RoundFunction"], [65, 1, 1, "", "ceiling"], [65, 1, 1, "", "floor"], [65, 1, 1, "", "frac"]], "sympy.functions.elementary.miscellaneous": [[65, 1, 1, "", "IdentityFunction"], [65, 1, 1, "", "Max"], [65, 1, 1, "", "Min"], [65, 3, 1, "", "cbrt"], [65, 3, 1, "", "real_root"], [65, 3, 1, "", "root"], [65, 3, 1, "", "sqrt"]], "sympy.functions.elementary.piecewise": [[65, 1, 1, "", "ExprCondPair"], [65, 1, 1, "", "Piecewise"], [65, 3, 1, "", "piecewise_exclusive"], [65, 3, 1, "", "piecewise_fold"]], "sympy.functions.elementary.piecewise.ExprCondPair": [[65, 4, 1, "", "cond"], [65, 4, 1, "", "expr"]], "sympy.functions.elementary.piecewise.Piecewise": [[65, 2, 1, "", "_eval_integral"], [65, 2, 1, "", "as_expr_set_pairs"], [65, 2, 1, "", "doit"], [65, 2, 1, "", "eval"], [65, 2, 1, "", "piecewise_integrate"]], "sympy.functions.elementary.trigonometric": [[65, 1, 1, "", "acos"], [65, 1, 1, "", "acot"], [65, 1, 1, "", "acsc"], [65, 1, 1, "", "asec"], [65, 1, 1, "", "asin"], [65, 1, 1, "", "atan"], [65, 1, 1, "", "atan2"], [65, 1, 1, "", "cos"], [65, 1, 1, "", "cot"], [65, 1, 1, "", "csc"], [65, 1, 1, "", "sec"], [65, 1, 1, "", "sin"], [65, 1, 1, "", "sinc"], [65, 1, 1, "", "tan"]], "sympy.functions.elementary.trigonometric.acos": [[65, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acot": [[65, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acsc": [[65, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asec": [[65, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asin": [[65, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.atan": [[65, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.cot": [[65, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.tan": [[65, 2, 1, "", "inverse"]], "sympy.functions.special": [[67, 0, 0, "-", "bessel"], [67, 0, 0, "-", "beta_functions"], [67, 0, 0, "-", "elliptic_integrals"], [67, 0, 0, "-", "error_functions"], [67, 0, 0, "-", "gamma_functions"], [67, 0, 0, "-", "mathieu_functions"], [67, 0, 0, "-", "polynomials"], [67, 0, 0, "-", "singularity_functions"], [67, 0, 0, "-", "zeta_functions"]], "sympy.functions.special.bessel": [[67, 1, 1, "", "AiryBase"], [67, 1, 1, "", "BesselBase"], [67, 1, 1, "", "airyai"], [67, 1, 1, "", "airyaiprime"], [67, 1, 1, "", "airybi"], [67, 1, 1, "", "airybiprime"], [67, 1, 1, "", "besseli"], [67, 1, 1, "", "besselj"], [67, 1, 1, "", "besselk"], [67, 1, 1, "", "bessely"], [67, 1, 1, "", "hankel1"], [67, 1, 1, "", "hankel2"], [67, 1, 1, "", "jn"], [67, 3, 1, "", "jn_zeros"], [67, 1, 1, "", "marcumq"], [67, 1, 1, "", "yn"]], "sympy.functions.special.bessel.BesselBase": [[67, 4, 1, "", "argument"], [67, 4, 1, "", "order"]], "sympy.functions.special.beta_functions": [[67, 1, 1, "", "beta"]], "sympy.functions.special.bsplines": [[67, 3, 1, "", "bspline_basis"], [67, 3, 1, "", "bspline_basis_set"], [67, 3, 1, "", "interpolating_spline"]], "sympy.functions.special.delta_functions": [[67, 1, 1, "", "DiracDelta"], [67, 1, 1, "", "Heaviside"]], "sympy.functions.special.delta_functions.DiracDelta": [[67, 2, 1, "", "eval"], [67, 2, 1, "", "fdiff"], [67, 2, 1, "", "is_simple"]], "sympy.functions.special.delta_functions.Heaviside": [[67, 2, 1, "", "eval"], [67, 2, 1, "", "fdiff"], [67, 4, 1, "", "pargs"]], "sympy.functions.special.elliptic_integrals": [[67, 1, 1, "", "elliptic_e"], [67, 1, 1, "", "elliptic_f"], [67, 1, 1, "", "elliptic_k"], [67, 1, 1, "", "elliptic_pi"]], "sympy.functions.special.error_functions": [[67, 1, 1, "", "Chi"], [67, 1, 1, "", "Ci"], [67, 3, 1, "", "E1"], [67, 1, 1, "", "Ei"], [67, 1, 1, "", "FresnelIntegral"], [67, 1, 1, "", "Li"], [67, 1, 1, "", "Shi"], [67, 1, 1, "", "Si"], [67, 1, 1, "", "erf"], [67, 1, 1, "", "erf2"], [67, 1, 1, "", "erf2inv"], [67, 1, 1, "", "erfc"], [67, 1, 1, "", "erfcinv"], [67, 1, 1, "", "erfi"], [67, 1, 1, "", "erfinv"], [67, 1, 1, "", "expint"], [67, 1, 1, "", "fresnelc"], [67, 1, 1, "", "fresnels"], [67, 1, 1, "", "li"]], "sympy.functions.special.error_functions.erf": [[67, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfc": [[67, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfcinv": [[67, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfinv": [[67, 2, 1, "", "inverse"]], "sympy.functions.special.gamma_functions": [[67, 1, 1, "", "digamma"], [67, 1, 1, "", "gamma"], [67, 1, 1, "", "loggamma"], [67, 1, 1, "", "lowergamma"], [67, 1, 1, "", "multigamma"], [67, 1, 1, "", "polygamma"], [67, 1, 1, "", "trigamma"], [67, 1, 1, "", "uppergamma"]], "sympy.functions.special.hyper": [[67, 1, 1, "", "appellf1"], [67, 1, 1, "", "hyper"], [67, 1, 1, "", "meijerg"]], "sympy.functions.special.hyper.hyper": [[67, 4, 1, "", "ap"], [67, 4, 1, "", "argument"], [67, 4, 1, "", "bq"], [67, 4, 1, "", "convergence_statement"], [67, 4, 1, "", "eta"], [67, 4, 1, "", "radius_of_convergence"]], "sympy.functions.special.hyper.meijerg": [[67, 4, 1, "", "an"], [67, 4, 1, "", "aother"], [67, 4, 1, "", "ap"], [67, 4, 1, "", "argument"], [67, 4, 1, "", "bm"], [67, 4, 1, "", "bother"], [67, 4, 1, "", "bq"], [67, 4, 1, "", "delta"], [67, 2, 1, "", "get_period"], [67, 2, 1, "", "integrand"], [67, 4, 1, "", "is_number"], [67, 4, 1, "", "nu"]], "sympy.functions.special.mathieu_functions": [[67, 1, 1, "", "MathieuBase"], [67, 1, 1, "", "mathieuc"], [67, 1, 1, "", "mathieucprime"], [67, 1, 1, "", "mathieus"], [67, 1, 1, "", "mathieusprime"]], "sympy.functions.special.polynomials": [[67, 1, 1, "", "assoc_laguerre"], [67, 1, 1, "", "assoc_legendre"], [67, 1, 1, "", "chebyshevt"], [67, 1, 1, "", "chebyshevt_root"], [67, 1, 1, "", "chebyshevu"], [67, 1, 1, "", "chebyshevu_root"], [67, 1, 1, "", "gegenbauer"], [67, 1, 1, "", "hermite"], [67, 1, 1, "", "hermite_prob"], [67, 1, 1, "", "jacobi"], [67, 3, 1, "", "jacobi_normalized"], [67, 1, 1, "", "laguerre"], [67, 1, 1, "", "legendre"]], "sympy.functions.special.singularity_functions": [[67, 1, 1, "", "SingularityFunction"]], "sympy.functions.special.singularity_functions.SingularityFunction": [[67, 2, 1, "", "eval"], [67, 2, 1, "", "fdiff"]], "sympy.functions.special.spherical_harmonics": [[67, 1, 1, "", "Ynm"], [67, 3, 1, "", "Ynm_c"], [67, 1, 1, "", "Znm"]], "sympy.functions.special.tensor_functions": [[67, 3, 1, "", "Eijk"], [67, 1, 1, "", "KroneckerDelta"], [67, 1, 1, "", "LeviCivita"], [67, 3, 1, "", "eval_levicivita"]], "sympy.functions.special.tensor_functions.KroneckerDelta": [[67, 2, 1, "", "eval"], [67, 4, 1, "", "indices_contain_equal_information"], [67, 4, 1, "", "is_above_fermi"], [67, 4, 1, "", "is_below_fermi"], [67, 4, 1, "", "is_only_above_fermi"], [67, 4, 1, "", "is_only_below_fermi"], [67, 4, 1, "", "killable_index"], [67, 4, 1, "", "preferred_index"]], "sympy.functions.special.zeta_functions": [[67, 1, 1, "", "dirichlet_eta"], [67, 1, 1, "", "lerchphi"], [67, 1, 1, "", "polylog"], [67, 1, 1, "", "stieltjes"], [67, 1, 1, "", "zeta"]], "sympy.geometry": [[68, 0, 0, "-", "curve"], [69, 0, 0, "-", "ellipse"], [70, 0, 0, "-", "entity"], [72, 0, 0, "-", "line"], [73, 0, 0, "-", "plane"], [74, 0, 0, "-", "point"], [75, 0, 0, "-", "polygon"], [76, 0, 0, "-", "util"]], "sympy.geometry.curve": [[68, 1, 1, "", "Curve"]], "sympy.geometry.curve.Curve": [[68, 4, 1, "", "ambient_dimension"], [68, 2, 1, "", "arbitrary_point"], [68, 4, 1, "", "free_symbols"], [68, 4, 1, "", "functions"], [68, 4, 1, "", "length"], [68, 4, 1, "", "limits"], [68, 4, 1, "", "parameter"], [68, 2, 1, "", "plot_interval"], [68, 2, 1, "", "rotate"], [68, 2, 1, "", "scale"], [68, 2, 1, "", "translate"]], "sympy.geometry.ellipse": [[69, 1, 1, "", "Circle"], [69, 1, 1, "", "Ellipse"]], "sympy.geometry.ellipse.Circle": [[69, 4, 1, "", "circumference"], [69, 2, 1, "", "equation"], [69, 2, 1, "", "intersection"], [69, 4, 1, "", "radius"], [69, 2, 1, "", "reflect"], [69, 2, 1, "", "scale"], [69, 4, 1, "", "vradius"]], "sympy.geometry.ellipse.Ellipse": [[69, 4, 1, "", "apoapsis"], [69, 2, 1, "", "arbitrary_point"], [69, 4, 1, "", "area"], [69, 2, 1, "", "auxiliary_circle"], [69, 4, 1, "", "bounds"], [69, 4, 1, "", "center"], [69, 4, 1, "", "circumference"], [69, 2, 1, "", "director_circle"], [69, 4, 1, "", "eccentricity"], [69, 2, 1, "", "encloses_point"], [69, 2, 1, "", "equation"], [69, 2, 1, "", "evolute"], [69, 4, 1, "", "foci"], [69, 4, 1, "", "focus_distance"], [69, 4, 1, "", "hradius"], [69, 2, 1, "", "intersection"], [69, 2, 1, "", "is_tangent"], [69, 4, 1, "", "major"], [69, 4, 1, "", "minor"], [69, 2, 1, "", "normal_lines"], [69, 4, 1, "", "periapsis"], [69, 2, 1, "", "plot_interval"], [69, 2, 1, "", "polar_second_moment_of_area"], [69, 2, 1, "", "random_point"], [69, 2, 1, "", "reflect"], [69, 2, 1, "", "rotate"], [69, 2, 1, "", "scale"], [69, 2, 1, "", "second_moment_of_area"], [69, 2, 1, "", "section_modulus"], [69, 4, 1, "", "semilatus_rectum"], [69, 2, 1, "", "tangent_lines"], [69, 4, 1, "", "vradius"]], "sympy.geometry.entity": [[70, 1, 1, "", "GeometryEntity"]], "sympy.geometry.entity.GeometryEntity": [[70, 4, 1, "", "ambient_dimension"], [70, 4, 1, "", "bounds"], [70, 2, 1, "", "encloses"], [70, 2, 1, "", "intersection"], [70, 2, 1, "", "is_similar"], [70, 2, 1, "", "parameter_value"], [70, 2, 1, "", "reflect"], [70, 2, 1, "", "rotate"], [70, 2, 1, "", "scale"], [70, 2, 1, "", "translate"]], "sympy.geometry.line": [[72, 1, 1, "", "Line"], [72, 1, 1, "", "Line2D"], [72, 1, 1, "", "Line3D"], [72, 1, 1, "", "LinearEntity"], [72, 1, 1, "", "LinearEntity2D"], [72, 1, 1, "", "LinearEntity3D"], [72, 1, 1, "", "Ray"], [72, 1, 1, "", "Ray2D"], [72, 1, 1, "", "Ray3D"], [72, 1, 1, "", "Segment"], [72, 1, 1, "", "Segment2D"], [72, 1, 1, "", "Segment3D"]], "sympy.geometry.line.Line": [[72, 2, 1, "", "contains"], [72, 2, 1, "", "distance"], [72, 2, 1, "", "equals"], [72, 2, 1, "", "plot_interval"]], "sympy.geometry.line.Line2D": [[72, 4, 1, "", "coefficients"], [72, 2, 1, "", "equation"]], "sympy.geometry.line.Line3D": [[72, 2, 1, "", "equation"]], "sympy.geometry.line.LinearEntity": [[72, 4, 1, "", "ambient_dimension"], [72, 2, 1, "", "angle_between"], [72, 2, 1, "", "arbitrary_point"], [72, 2, 1, "", "are_concurrent"], [72, 2, 1, "", "bisectors"], [72, 2, 1, "", "contains"], [72, 4, 1, "", "direction"], [72, 2, 1, "", "intersection"], [72, 2, 1, "", "is_parallel"], [72, 2, 1, "", "is_perpendicular"], [72, 2, 1, "", "is_similar"], [72, 4, 1, "", "length"], [72, 4, 1, "", "p1"], [72, 4, 1, "", "p2"], [72, 2, 1, "", "parallel_line"], [72, 2, 1, "", "perpendicular_line"], [72, 2, 1, "", "perpendicular_segment"], [72, 4, 1, "", "points"], [72, 2, 1, "", "projection"], [72, 2, 1, "", "random_point"], [72, 2, 1, "", "smallest_angle_between"]], "sympy.geometry.line.LinearEntity2D": [[72, 4, 1, "", "bounds"], [72, 2, 1, "", "perpendicular_line"], [72, 4, 1, "", "slope"]], "sympy.geometry.line.LinearEntity3D": [[72, 4, 1, "", "direction_cosine"], [72, 4, 1, "", "direction_ratio"]], "sympy.geometry.line.Ray": [[72, 2, 1, "", "contains"], [72, 2, 1, "", "distance"], [72, 2, 1, "", "equals"], [72, 2, 1, "", "plot_interval"], [72, 4, 1, "", "source"]], "sympy.geometry.line.Ray2D": [[72, 2, 1, "", "closing_angle"], [72, 4, 1, "", "xdirection"], [72, 4, 1, "", "ydirection"]], "sympy.geometry.line.Ray3D": [[72, 4, 1, "", "xdirection"], [72, 4, 1, "", "ydirection"], [72, 4, 1, "", "zdirection"]], "sympy.geometry.line.Segment": [[72, 2, 1, "", "contains"], [72, 2, 1, "", "distance"], [72, 2, 1, "", "equals"], [72, 4, 1, "", "length"], [72, 4, 1, "", "midpoint"], [72, 2, 1, "", "perpendicular_bisector"], [72, 2, 1, "", "plot_interval"]], "sympy.geometry.plane": [[73, 1, 1, "", "Plane"]], "sympy.geometry.plane.Plane": [[73, 2, 1, "", "angle_between"], [73, 2, 1, "", "arbitrary_point"], [73, 2, 1, "", "are_concurrent"], [73, 2, 1, "", "distance"], [73, 2, 1, "", "equals"], [73, 2, 1, "", "equation"], [73, 2, 1, "", "intersection"], [73, 2, 1, "", "is_coplanar"], [73, 2, 1, "", "is_parallel"], [73, 2, 1, "", "is_perpendicular"], [73, 4, 1, "", "normal_vector"], [73, 4, 1, "", "p1"], [73, 2, 1, "", "parallel_plane"], [73, 2, 1, "", "parameter_value"], [73, 2, 1, "", "perpendicular_line"], [73, 2, 1, "", "perpendicular_plane"], [73, 2, 1, "", "projection"], [73, 2, 1, "", "projection_line"], [73, 2, 1, "", "random_point"]], "sympy.geometry.point": [[74, 1, 1, "", "Point"], [74, 1, 1, "", "Point2D"], [74, 1, 1, "", "Point3D"]], "sympy.geometry.point.Point": [[74, 2, 1, "", "affine_rank"], [74, 4, 1, "", "ambient_dimension"], [74, 2, 1, "", "are_coplanar"], [74, 2, 1, "", "canberra_distance"], [74, 2, 1, "", "distance"], [74, 2, 1, "", "dot"], [74, 2, 1, "", "equals"], [74, 2, 1, "", "intersection"], [74, 2, 1, "", "is_collinear"], [74, 2, 1, "", "is_concyclic"], [74, 4, 1, "", "is_nonzero"], [74, 2, 1, "", "is_scalar_multiple"], [74, 4, 1, "", "is_zero"], [74, 4, 1, "", "length"], [74, 2, 1, "", "midpoint"], [74, 4, 1, "", "origin"], [74, 4, 1, "", "orthogonal_direction"], [74, 2, 1, "", "project"], [74, 2, 1, "", "taxicab_distance"], [74, 4, 1, "", "unit"]], "sympy.geometry.point.Point2D": [[74, 4, 1, "", "bounds"], [74, 4, 1, "", "coordinates"], [74, 2, 1, "", "rotate"], [74, 2, 1, "", "scale"], [74, 2, 1, "", "transform"], [74, 2, 1, "", "translate"], [74, 4, 1, "", "x"], [74, 4, 1, "", "y"]], "sympy.geometry.point.Point3D": [[74, 2, 1, "", "are_collinear"], [74, 4, 1, "", "coordinates"], [74, 2, 1, "", "direction_cosine"], [74, 2, 1, "", "direction_ratio"], [74, 2, 1, "", "intersection"], [74, 2, 1, "", "scale"], [74, 2, 1, "", "transform"], [74, 2, 1, "", "translate"], [74, 4, 1, "", "x"], [74, 4, 1, "", "y"], [74, 4, 1, "", "z"]], "sympy.geometry.polygon": [[75, 1, 1, "", "Polygon"], [75, 1, 1, "", "RegularPolygon"], [75, 1, 1, "", "Triangle"]], "sympy.geometry.polygon.Polygon": [[75, 4, 1, "", "angles"], [75, 2, 1, "", "arbitrary_point"], [75, 4, 1, "", "area"], [75, 2, 1, "", "bisectors"], [75, 4, 1, "", "bounds"], [75, 4, 1, "", "centroid"], [75, 2, 1, "", "cut_section"], [75, 2, 1, "", "distance"], [75, 2, 1, "", "encloses_point"], [75, 2, 1, "", "first_moment_of_area"], [75, 2, 1, "", "intersection"], [75, 2, 1, "", "is_convex"], [75, 4, 1, "", "perimeter"], [75, 2, 1, "", "plot_interval"], [75, 2, 1, "", "polar_second_moment_of_area"], [75, 2, 1, "", "second_moment_of_area"], [75, 2, 1, "", "section_modulus"], [75, 4, 1, "", "sides"], [75, 4, 1, "", "vertices"]], "sympy.geometry.polygon.RegularPolygon": [[75, 4, 1, "", "angles"], [75, 4, 1, "", "apothem"], [75, 4, 1, "", "area"], [75, 4, 1, "", "args"], [75, 4, 1, "", "center"], [75, 4, 1, "", "centroid"], [75, 4, 1, "", "circumcenter"], [75, 4, 1, "", "circumcircle"], [75, 4, 1, "", "circumradius"], [75, 2, 1, "", "encloses_point"], [75, 4, 1, "", "exterior_angle"], [75, 4, 1, "", "incircle"], [75, 4, 1, "", "inradius"], [75, 4, 1, "", "interior_angle"], [75, 4, 1, "", "length"], [75, 4, 1, "", "radius"], [75, 2, 1, "", "reflect"], [75, 2, 1, "", "rotate"], [75, 4, 1, "", "rotation"], [75, 2, 1, "", "scale"], [75, 2, 1, "", "spin"], [75, 4, 1, "", "vertices"]], "sympy.geometry.polygon.Triangle": [[75, 4, 1, "", "altitudes"], [75, 2, 1, "", "bisectors"], [75, 4, 1, "", "circumcenter"], [75, 4, 1, "", "circumcircle"], [75, 4, 1, "", "circumradius"], [75, 4, 1, "", "eulerline"], [75, 4, 1, "", "excenters"], [75, 4, 1, "", "exradii"], [75, 4, 1, "", "incenter"], [75, 4, 1, "", "incircle"], [75, 4, 1, "", "inradius"], [75, 2, 1, "", "is_equilateral"], [75, 2, 1, "", "is_isosceles"], [75, 2, 1, "", "is_right"], [75, 2, 1, "", "is_scalene"], [75, 2, 1, "", "is_similar"], [75, 4, 1, "", "medial"], [75, 4, 1, "", "medians"], [75, 4, 1, "", "nine_point_circle"], [75, 4, 1, "", "orthocenter"], [75, 4, 1, "", "vertices"]], "sympy.geometry.util": [[76, 3, 1, "", "are_similar"], [76, 3, 1, "", "centroid"], [76, 3, 1, "", "convex_hull"], [76, 3, 1, "", "idiff"], [76, 3, 1, "", "intersection"]], "sympy.holonomic.holonomic": [[82, 1, 1, "", "DifferentialOperator"], [82, 1, 1, "", "DifferentialOperatorAlgebra"], [82, 3, 1, "", "DifferentialOperators"], [82, 1, 1, "", "HolonomicFunction"], [80, 3, 1, "", "_convert_poly_rat_alg"], [80, 3, 1, "", "_create_table"], [78, 3, 1, "", "expr_to_holonomic"], [78, 3, 1, "", "from_hyper"], [78, 3, 1, "", "from_meijerg"]], "sympy.holonomic.holonomic.DifferentialOperator": [[82, 2, 1, "", "is_singular"]], "sympy.holonomic.holonomic.HolonomicFunction": [[81, 2, 1, "", "composition"], [81, 2, 1, "", "diff"], [81, 2, 1, "", "evalf"], [81, 2, 1, "", "integrate"], [81, 2, 1, "", "series"], [81, 2, 1, "", "to_expr"], [81, 2, 1, "", "to_hyper"], [81, 2, 1, "", "to_meijerg"], [81, 2, 1, "", "to_sequence"]], "sympy.integrals.deltafunctions": [[86, 3, 1, "", "deltaintegrate"]], "sympy.integrals.heurisch": [[86, 3, 1, "", "components"], [86, 3, 1, "", "heurisch"]], "sympy.integrals.integrals": [[86, 1, 1, "", "Integral"], [86, 3, 1, "", "integrate"], [86, 3, 1, "", "line_integrate"]], "sympy.integrals.integrals.Integral": [[86, 2, 1, "", "as_sum"], [86, 2, 1, "", "doit"], [86, 4, 1, "", "free_symbols"], [86, 6, 1, "", "is_commutative"], [86, 2, 1, "", "principal_value"], [86, 2, 1, "", "transform"]], "sympy.integrals": [[86, 0, 0, "-", "intpoly"], [84, 0, 0, "-", "meijerint"], [84, 0, 0, "-", "meijerint_doc"], [86, 0, 0, "-", "transforms"]], "sympy.integrals.intpoly": [[86, 3, 1, "", "polytope_integrate"]], "sympy.integrals.manualintegrate": [[86, 3, 1, "", "integral_steps"], [86, 3, 1, "", "manualintegrate"]], "sympy.integrals.meijerint": [[84, 7, 1, "", "_CoeffExpValueError"], [84, 3, 1, "", "_check_antecedents"], [84, 3, 1, "", "_check_antecedents_1"], [84, 3, 1, "", "_check_antecedents_inversion"], [84, 3, 1, "", "_condsimp"], [84, 3, 1, "", "_create_lookup_table"], [84, 3, 1, "", "_dummy"], [84, 3, 1, "", "_dummy_"], [84, 3, 1, "", "_eval_cond"], [84, 3, 1, "", "_exponents"], [84, 3, 1, "", "_find_splitting_points"], [84, 3, 1, "", "_flip_g"], [84, 3, 1, "", "_functions"], [84, 3, 1, "", "_get_coeff_exp"], [84, 3, 1, "", "_guess_expansion"], [84, 3, 1, "", "_inflate_fox_h"], [84, 3, 1, "", "_inflate_g"], [84, 3, 1, "", "_int0oo"], [84, 3, 1, "", "_int0oo_1"], [84, 3, 1, "", "_int_inversion"], [84, 3, 1, "", "_is_analytic"], [84, 3, 1, "", "_meijerint_definite_2"], [84, 3, 1, "", "_meijerint_definite_3"], [84, 3, 1, "", "_meijerint_definite_4"], [84, 3, 1, "", "_meijerint_indefinite_1"], [84, 3, 1, "", "_mul_args"], [84, 3, 1, "", "_mul_as_two_parts"], [84, 3, 1, "", "_my_principal_branch"], [84, 3, 1, "", "_mytype"], [84, 3, 1, "", "_rewrite1"], [84, 3, 1, "", "_rewrite2"], [84, 3, 1, "", "_rewrite_inversion"], [84, 3, 1, "", "_rewrite_saxena"], [84, 3, 1, "", "_rewrite_saxena_1"], [84, 3, 1, "", "_rewrite_single"], [84, 3, 1, "", "_split_mul"], [84, 3, 1, "", "meijerint_definite"], [84, 3, 1, "", "meijerint_indefinite"], [84, 3, 1, "", "meijerint_inversion"]], "sympy.integrals.quadrature": [[86, 3, 1, "", "gauss_chebyshev_t"], [86, 3, 1, "", "gauss_chebyshev_u"], [86, 3, 1, "", "gauss_gen_laguerre"], [86, 3, 1, "", "gauss_hermite"], [86, 3, 1, "", "gauss_jacobi"], [86, 3, 1, "", "gauss_laguerre"], [86, 3, 1, "", "gauss_legendre"], [86, 3, 1, "", "gauss_lobatto"]], "sympy.integrals.rationaltools": [[86, 3, 1, "", "ratint"], [86, 3, 1, "", "ratint_logpart"], [86, 3, 1, "", "ratint_ratpart"]], "sympy.integrals.risch": [[86, 1, 1, "", "NonElementaryIntegral"], [86, 3, 1, "", "risch_integrate"]], "sympy.integrals.singularityfunctions": [[86, 3, 1, "", "singularityintegrate"]], "sympy.integrals.transforms": [[86, 1, 1, "", "CosineTransform"], [86, 1, 1, "", "FourierTransform"], [86, 1, 1, "", "HankelTransform"], [86, 1, 1, "", "IntegralTransform"], [86, 7, 1, "", "IntegralTransformError"], [86, 1, 1, "", "InverseCosineTransform"], [86, 1, 1, "", "InverseFourierTransform"], [86, 1, 1, "", "InverseHankelTransform"], [86, 1, 1, "", "InverseLaplaceTransform"], [86, 1, 1, "", "InverseMellinTransform"], [86, 1, 1, "", "InverseSineTransform"], [86, 1, 1, "", "LaplaceTransform"], [86, 1, 1, "", "MellinTransform"], [86, 1, 1, "", "SineTransform"], [86, 3, 1, "", "_fast_inverse_laplace"], [86, 3, 1, "", "_fourier_transform"], [86, 3, 1, "", "cosine_transform"], [86, 3, 1, "", "fourier_transform"], [86, 3, 1, "", "hankel_transform"], [86, 3, 1, "", "inverse_cosine_transform"], [86, 3, 1, "", "inverse_fourier_transform"], [86, 3, 1, "", "inverse_hankel_transform"], [86, 3, 1, "", "inverse_laplace_transform"], [86, 3, 1, "", "inverse_mellin_transform"], [86, 3, 1, "", "inverse_sine_transform"], [86, 3, 1, "", "laplace_transform"], [86, 3, 1, "", "mellin_transform"], [86, 3, 1, "", "sine_transform"]], "sympy.integrals.transforms.IntegralTransform": [[86, 2, 1, "", "doit"], [86, 4, 1, "", "function"], [86, 4, 1, "", "function_variable"], [86, 4, 1, "", "transform_variable"]], "sympy.integrals.trigonometry": [[86, 3, 1, "", "trigintegrate"]], "sympy.interactive": [[87, 0, 0, "-", "printing"], [87, 0, 0, "-", "session"]], "sympy.interactive.printing": [[87, 3, 1, "", "init_printing"]], "sympy.interactive.session": [[87, 3, 1, "", "enable_automatic_int_sympification"], [87, 3, 1, "", "enable_automatic_symbols"], [87, 3, 1, "", "init_ipython_session"], [87, 3, 1, "", "init_python_session"], [87, 3, 1, "", "init_session"], [87, 3, 1, "", "int_to_Integer"]], "sympy.liealgebras.cartan_matrix": [[88, 3, 1, "", "CartanMatrix"]], "sympy.liealgebras.cartan_type": [[88, 1, 1, "", "CartanType_generator"], [88, 1, 1, "", "Standard_Cartan"]], "sympy.liealgebras.cartan_type.Standard_Cartan": [[88, 2, 1, "", "rank"], [88, 2, 1, "", "series"]], "sympy.liealgebras.dynkin_diagram": [[88, 3, 1, "", "DynkinDiagram"]], "sympy.liealgebras.root_system": [[88, 1, 1, "", "RootSystem"]], "sympy.liealgebras.root_system.RootSystem": [[88, 2, 1, "", "add_as_roots"], [88, 2, 1, "", "add_simple_roots"], [88, 2, 1, "", "all_roots"], [88, 2, 1, "", "cartan_matrix"], [88, 2, 1, "", "dynkin_diagram"], [88, 2, 1, "", "root_space"], [88, 2, 1, "", "simple_roots"]], "sympy.liealgebras.type_a": [[88, 1, 1, "", "TypeA"]], "sympy.liealgebras.type_a.TypeA": [[88, 2, 1, "", "basic_root"], [88, 2, 1, "", "basis"], [88, 2, 1, "", "cartan_matrix"], [88, 2, 1, "", "dimension"], [88, 2, 1, "", "highest_root"], [88, 2, 1, "", "lie_algebra"], [88, 2, 1, "", "positive_roots"], [88, 2, 1, "", "roots"], [88, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_b": [[88, 1, 1, "", "TypeB"]], "sympy.liealgebras.type_b.TypeB": [[88, 2, 1, "", "basic_root"], [88, 2, 1, "", "basis"], [88, 2, 1, "", "cartan_matrix"], [88, 2, 1, "", "dimension"], [88, 2, 1, "", "lie_algebra"], [88, 2, 1, "", "positive_roots"], [88, 2, 1, "", "roots"], [88, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_c": [[88, 1, 1, "", "TypeC"]], "sympy.liealgebras.type_c.TypeC": [[88, 2, 1, "", "basic_root"], [88, 2, 1, "", "basis"], [88, 2, 1, "", "cartan_matrix"], [88, 2, 1, "", "dimension"], [88, 2, 1, "", "lie_algebra"], [88, 2, 1, "", "positive_roots"], [88, 2, 1, "", "roots"], [88, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_d": [[88, 1, 1, "", "TypeD"]], "sympy.liealgebras.type_d.TypeD": [[88, 2, 1, "", "basic_root"], [88, 2, 1, "", "basis"], [88, 2, 1, "", "cartan_matrix"], [88, 2, 1, "", "dimension"], [88, 2, 1, "", "lie_algebra"], [88, 2, 1, "", "positive_roots"], [88, 2, 1, "", "roots"], [88, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_e": [[88, 1, 1, "", "TypeE"]], "sympy.liealgebras.type_e.TypeE": [[88, 2, 1, "", "basic_root"], [88, 2, 1, "", "basis"], [88, 2, 1, "", "cartan_matrix"], [88, 2, 1, "", "dimension"], [88, 2, 1, "", "positive_roots"], [88, 2, 1, "", "roots"], [88, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_f": [[88, 1, 1, "", "TypeF"]], "sympy.liealgebras.type_f.TypeF": [[88, 2, 1, "", "basic_root"], [88, 2, 1, "", "basis"], [88, 2, 1, "", "cartan_matrix"], [88, 2, 1, "", "dimension"], [88, 2, 1, "", "positive_roots"], [88, 2, 1, "", "roots"], [88, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_g": [[88, 1, 1, "", "TypeG"]], "sympy.liealgebras.type_g.TypeG": [[88, 2, 1, "", "basis"], [88, 2, 1, "", "cartan_matrix"], [88, 2, 1, "", "dimension"], [88, 2, 1, "", "positive_roots"], [88, 2, 1, "", "roots"], [88, 2, 1, "", "simple_root"]], "sympy.liealgebras.weyl_group": [[88, 1, 1, "", "WeylGroup"]], "sympy.liealgebras.weyl_group.WeylGroup": [[88, 2, 1, "", "coxeter_diagram"], [88, 2, 1, "", "delete_doubles"], [88, 2, 1, "", "element_order"], [88, 2, 1, "", "generators"], [88, 2, 1, "", "group_name"], [88, 2, 1, "", "group_order"], [88, 2, 1, "", "matrix_form"]], "sympy.logic.boolalg": [[89, 3, 1, "", "ANFform"], [89, 1, 1, "", "And"], [89, 1, 1, "", "Boolean"], [89, 1, 1, "", "BooleanFalse"], [89, 1, 1, "", "BooleanTrue"], [89, 1, 1, "", "Equivalent"], [89, 1, 1, "", "Exclusive"], [89, 1, 1, "", "ITE"], [89, 1, 1, "", "Implies"], [89, 1, 1, "", "Nand"], [89, 1, 1, "", "Nor"], [89, 1, 1, "", "Not"], [89, 1, 1, "", "Or"], [89, 3, 1, "", "POSform"], [89, 3, 1, "", "SOPform"], [89, 1, 1, "", "Xnor"], [89, 1, 1, "", "Xor"], [89, 3, 1, "", "anf_coeffs"], [89, 3, 1, "", "bool_map"], [89, 3, 1, "", "bool_maxterm"], [89, 3, 1, "", "bool_minterm"], [89, 3, 1, "", "bool_monomial"], [89, 3, 1, "", "distribute_and_over_or"], [89, 3, 1, "", "distribute_or_over_and"], [89, 3, 1, "", "distribute_xor_over_and"], [89, 3, 1, "", "eliminate_implications"], [89, 3, 1, "", "gateinputcount"], [89, 3, 1, "", "integer_to_term"], [89, 3, 1, "", "is_anf"], [89, 3, 1, "", "is_cnf"], [89, 3, 1, "", "is_dnf"], [89, 3, 1, "", "is_nnf"], [89, 3, 1, "", "simplify_logic"], [89, 3, 1, "", "term_to_integer"], [89, 3, 1, "", "to_anf"], [89, 3, 1, "", "to_cnf"], [89, 3, 1, "", "to_dnf"], [89, 3, 1, "", "to_int_repr"], [89, 3, 1, "", "to_nnf"], [89, 3, 1, "", "truth_table"]], "sympy.logic.boolalg.Boolean": [[89, 2, 1, "", "as_set"], [89, 2, 1, "", "equals"]], "sympy.logic.boolalg.BooleanFalse": [[89, 2, 1, "", "as_set"]], "sympy.logic.boolalg.BooleanTrue": [[89, 2, 1, "", "as_set"]], "sympy.logic": [[89, 0, 0, "-", "inference"]], "sympy.logic.inference": [[89, 3, 1, "", "satisfiable"]], "sympy.matrices": [[90, 0, 0, "-", "common"], [92, 0, 0, "-", "expressions"], [93, 0, 0, "-", "immutable"], [95, 0, 0, "-", "matrices"], [97, 0, 0, "-", "sparse"], [98, 0, 0, "-", "sparsetools"]], "sympy.matrices.common": [[90, 1, 1, "", "MatrixCommon"], [90, 1, 1, "", "MatrixKind"]], "sympy.matrices.common.MatrixCommon": [[90, 4, 1, "", "C"], [90, 4, 1, "", "H"], [90, 4, 1, "", "T"], [90, 2, 1, "", "__abs__"], [90, 2, 1, "", "__add__"], [90, 2, 1, "", "__getitem__"], [90, 2, 1, "", "__len__"], [90, 2, 1, "", "__mul__"], [90, 2, 1, "", "__pow__"], [90, 5, 1, "", "__weakref__"], [90, 2, 1, "", "adjoint"], [90, 2, 1, "", "applyfunc"], [90, 2, 1, "", "as_real_imag"], [90, 2, 1, "", "atoms"], [90, 2, 1, "", "col"], [90, 2, 1, "", "col_del"], [90, 2, 1, "", "col_insert"], [90, 2, 1, "", "col_join"], [90, 2, 1, "", "companion"], [90, 2, 1, "", "conjugate"], [90, 2, 1, "", "diag"], [90, 2, 1, "", "diagonal"], [90, 2, 1, "", "evalf"], [90, 2, 1, "", "expand"], [90, 2, 1, "", "extract"], [90, 2, 1, "", "eye"], [90, 4, 1, "", "free_symbols"], [90, 2, 1, "", "get_diag_blocks"], [90, 2, 1, "", "has"], [90, 2, 1, "", "hstack"], [90, 2, 1, "", "is_anti_symmetric"], [90, 2, 1, "", "is_diagonal"], [90, 4, 1, "", "is_hermitian"], [90, 4, 1, "", "is_lower"], [90, 4, 1, "", "is_lower_hessenberg"], [90, 4, 1, "", "is_square"], [90, 4, 1, "", "is_strongly_diagonally_dominant"], [90, 2, 1, "", "is_symbolic"], [90, 2, 1, "", "is_symmetric"], [90, 4, 1, "", "is_upper"], [90, 4, 1, "", "is_upper_hessenberg"], [90, 4, 1, "", "is_weakly_diagonally_dominant"], [90, 4, 1, "", "is_zero_matrix"], [90, 2, 1, "", "jordan_block"], [90, 2, 1, "", "lower_triangular"], [90, 2, 1, "", "multiply"], [90, 2, 1, "", "multiply_elementwise"], [90, 2, 1, "", "n"], [90, 2, 1, "", "ones"], [90, 2, 1, "", "permute"], [90, 2, 1, "", "permute_cols"], [90, 2, 1, "", "permute_rows"], [90, 2, 1, "", "pow"], [90, 2, 1, "", "refine"], [90, 2, 1, "", "replace"], [90, 2, 1, "", "reshape"], [90, 2, 1, "", "rmultiply"], [90, 2, 1, "", "rot90"], [90, 2, 1, "", "row"], [90, 2, 1, "", "row_del"], [90, 2, 1, "", "row_insert"], [90, 2, 1, "", "row_join"], [90, 4, 1, "", "shape"], [90, 2, 1, "", "simplify"], [90, 2, 1, "", "subs"], [90, 2, 1, "", "todod"], [90, 2, 1, "", "todok"], [90, 2, 1, "", "tolist"], [90, 2, 1, "", "trace"], [90, 2, 1, "", "transpose"], [90, 2, 1, "", "upper_triangular"], [90, 2, 1, "", "values"], [90, 2, 1, "", "vec"], [90, 2, 1, "", "vech"], [90, 2, 1, "", "vstack"], [90, 2, 1, "", "wilkinson"], [90, 2, 1, "", "xreplace"], [90, 2, 1, "", "zeros"]], "sympy.matrices.dense": [[91, 1, 1, "", "DenseMatrix"], [95, 3, 1, "", "GramSchmidt"], [91, 5, 1, "", "Matrix"], [91, 1, 1, "", "MutableDenseMatrix"], [95, 3, 1, "", "casoratian"], [95, 3, 1, "", "diag"], [95, 3, 1, "", "eye"], [95, 3, 1, "", "hessian"], [95, 3, 1, "", "jordan_cell"], [95, 3, 1, "", "list2numpy"], [95, 3, 1, "", "matrix2numpy"], [95, 3, 1, "", "matrix_multiply_elementwise"], [95, 3, 1, "", "ones"], [95, 3, 1, "", "randMatrix"], [95, 3, 1, "", "rot_axis1"], [95, 3, 1, "", "rot_axis2"], [95, 3, 1, "", "rot_axis3"], [95, 3, 1, "", "symarray"], [95, 3, 1, "", "wronskian"], [95, 3, 1, "", "zeros"]], "sympy.matrices.dense.DenseMatrix": [[91, 2, 1, "", "LDLdecomposition"], [91, 2, 1, "", "as_immutable"], [91, 2, 1, "", "as_mutable"], [91, 2, 1, "", "cholesky"], [91, 2, 1, "", "lower_triangular_solve"], [91, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.dense.MutableDenseMatrix": [[91, 2, 1, "", "simplify"]], "sympy.matrices.expressions": [[92, 1, 1, "", "CompanionMatrix"], [92, 1, 1, "", "FunctionMatrix"], [92, 1, 1, "", "HadamardPower"], [92, 1, 1, "", "HadamardProduct"], [92, 1, 1, "", "Identity"], [92, 1, 1, "", "Inverse"], [92, 1, 1, "", "MatAdd"], [92, 1, 1, "", "MatMul"], [92, 1, 1, "", "MatPow"], [92, 1, 1, "", "MatrixExpr"], [92, 1, 1, "", "MatrixPermute"], [92, 1, 1, "", "MatrixSet"], [92, 1, 1, "", "MatrixSymbol"], [92, 1, 1, "", "PermutationMatrix"], [92, 1, 1, "", "Trace"], [92, 1, 1, "", "Transpose"], [92, 1, 1, "", "ZeroMatrix"], [92, 0, 0, "-", "blockmatrix"], [92, 3, 1, "", "hadamard_product"]], "sympy.matrices.expressions.MatrixExpr": [[92, 4, 1, "", "T"], [92, 2, 1, "", "as_coeff_Mul"], [92, 2, 1, "", "as_explicit"], [92, 2, 1, "", "as_mutable"], [92, 2, 1, "", "equals"], [92, 2, 1, "", "from_index_summation"]], "sympy.matrices.expressions.blockmatrix": [[92, 1, 1, "", "BlockDiagMatrix"], [92, 1, 1, "", "BlockMatrix"], [92, 3, 1, "", "block_collapse"]], "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix": [[92, 2, 1, "", "get_diag_blocks"]], "sympy.matrices.expressions.blockmatrix.BlockMatrix": [[92, 2, 1, "", "LDUdecomposition"], [92, 2, 1, "", "LUdecomposition"], [92, 2, 1, "", "UDLdecomposition"], [92, 2, 1, "", "schur"], [92, 2, 1, "", "transpose"]], "sympy.matrices.immutable": [[93, 1, 1, "", "ImmutableDenseMatrix"], [93, 5, 1, "", "ImmutableMatrix"], [97, 1, 1, "", "ImmutableSparseMatrix"]], "sympy.matrices.matrices": [[95, 1, 1, "", "MatrixBase"], [95, 1, 1, "", "MatrixCalculus"], [95, 1, 1, "", "MatrixDeterminant"], [95, 1, 1, "", "MatrixEigen"], [95, 1, 1, "", "MatrixError"], [95, 1, 1, "", "MatrixReductions"], [95, 1, 1, "", "MatrixSubspaces"], [95, 1, 1, "", "NonSquareMatrixError"], [95, 1, 1, "", "ShapeError"], [95, 3, 1, "", "a2idx"]], "sympy.matrices.matrices.MatrixBase": [[95, 4, 1, "", "D"], [95, 2, 1, "", "LDLdecomposition"], [95, 2, 1, "", "LDLsolve"], [95, 2, 1, "", "LUdecomposition"], [95, 2, 1, "", "LUdecompositionFF"], [95, 2, 1, "", "LUdecomposition_Simple"], [95, 2, 1, "", "LUsolve"], [95, 2, 1, "", "QRdecomposition"], [95, 2, 1, "", "QRsolve"], [95, 2, 1, "", "add"], [95, 2, 1, "", "analytic_func"], [95, 2, 1, "", "cholesky"], [95, 2, 1, "", "cholesky_solve"], [95, 2, 1, "", "condition_number"], [95, 2, 1, "", "connected_components"], [95, 2, 1, "", "connected_components_decomposition"], [95, 2, 1, "", "copy"], [95, 2, 1, "", "cross"], [95, 2, 1, "", "diagonal_solve"], [95, 2, 1, "", "dot"], [95, 2, 1, "", "dual"], [95, 2, 1, "", "exp"], [95, 2, 1, "", "gauss_jordan_solve"], [95, 2, 1, "", "inv"], [95, 2, 1, "", "inv_mod"], [95, 2, 1, "", "inverse_ADJ"], [95, 2, 1, "", "inverse_BLOCK"], [95, 2, 1, "", "inverse_CH"], [95, 2, 1, "", "inverse_GE"], [95, 2, 1, "", "inverse_LDL"], [95, 2, 1, "", "inverse_LU"], [95, 2, 1, "", "inverse_QR"], [95, 2, 1, "", "irregular"], [95, 2, 1, "", "is_nilpotent"], [95, 2, 1, "", "key2bounds"], [95, 2, 1, "", "key2ij"], [95, 2, 1, "", "log"], [95, 2, 1, "", "lower_triangular_solve"], [95, 2, 1, "", "norm"], [95, 2, 1, "", "normalized"], [95, 2, 1, "", "pinv"], [95, 2, 1, "", "pinv_solve"], [95, 2, 1, "", "print_nonzero"], [95, 2, 1, "", "project"], [95, 2, 1, "", "rank_decomposition"], [95, 2, 1, "", "singular_value_decomposition"], [95, 2, 1, "", "solve"], [95, 2, 1, "", "solve_least_squares"], [95, 2, 1, "", "strongly_connected_components"], [95, 2, 1, "", "strongly_connected_components_decomposition"], [95, 2, 1, "", "table"], [95, 2, 1, "", "upper_hessenberg_decomposition"], [95, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.matrices.MatrixCalculus": [[95, 2, 1, "", "diff"], [95, 2, 1, "", "integrate"], [95, 2, 1, "", "jacobian"], [95, 2, 1, "", "limit"]], "sympy.matrices.matrices.MatrixDeterminant": [[95, 2, 1, "", "adjugate"], [95, 2, 1, "", "charpoly"], [95, 2, 1, "", "cofactor"], [95, 2, 1, "", "cofactor_matrix"], [95, 2, 1, "", "det"], [95, 2, 1, "", "minor"], [95, 2, 1, "", "minor_submatrix"], [95, 2, 1, "", "per"]], "sympy.matrices.matrices.MatrixEigen": [[95, 2, 1, "", "bidiagonal_decomposition"], [95, 2, 1, "", "bidiagonalize"], [95, 2, 1, "", "diagonalize"], [95, 2, 1, "", "eigenvals"], [95, 2, 1, "", "eigenvects"], [95, 2, 1, "", "is_diagonalizable"], [95, 4, 1, "", "is_indefinite"], [95, 4, 1, "", "is_negative_definite"], [95, 4, 1, "", "is_negative_semidefinite"], [95, 4, 1, "", "is_positive_definite"], [95, 4, 1, "", "is_positive_semidefinite"], [95, 2, 1, "", "jordan_form"], [95, 2, 1, "", "left_eigenvects"], [95, 2, 1, "", "singular_values"]], "sympy.matrices.matrices.MatrixReductions": [[95, 2, 1, "", "echelon_form"], [95, 2, 1, "", "elementary_col_op"], [95, 2, 1, "", "elementary_row_op"], [95, 4, 1, "", "is_echelon"], [95, 2, 1, "", "rank"], [95, 2, 1, "", "rref"]], "sympy.matrices.matrices.MatrixSubspaces": [[95, 2, 1, "", "columnspace"], [95, 2, 1, "", "nullspace"], [95, 2, 1, "", "orthogonalize"], [95, 2, 1, "", "rowspace"]], "sympy.matrices.normalforms": [[96, 3, 1, "", "hermite_normal_form"], [96, 3, 1, "", "smith_normal_form"]], "sympy.matrices.sparse": [[97, 1, 1, "", "MutableSparseMatrix"], [97, 5, 1, "", "SparseMatrix"]], "sympy.matrices.sparsetools": [[98, 2, 1, "", "_csrtodok"], [98, 2, 1, "", "_doktocsr"], [98, 2, 1, "", "banded"]], "sympy.ntheory": [[99, 0, 0, "-", "bbp_pi"], [99, 0, 0, "-", "continued_fraction"], [99, 0, 0, "-", "digits"], [99, 0, 0, "-", "ecm"], [99, 0, 0, "-", "egyptian_fraction"], [99, 0, 0, "-", "factor_"], [99, 0, 0, "-", "generate"], [99, 1, 1, "", "mobius"], [99, 0, 0, "-", "modular"], [99, 0, 0, "-", "multinomial"], [99, 0, 0, "-", "partitions_"], [99, 0, 0, "-", "primetest"], [99, 0, 0, "-", "qs"], [99, 0, 0, "-", "residue_ntheory"]], "sympy.ntheory.bbp_pi": [[99, 3, 1, "", "pi_hex_digits"]], "sympy.ntheory.continued_fraction": [[99, 3, 1, "", "continued_fraction"], [99, 3, 1, "", "continued_fraction_convergents"], [99, 3, 1, "", "continued_fraction_iterator"], [99, 3, 1, "", "continued_fraction_periodic"], [99, 3, 1, "", "continued_fraction_reduce"]], "sympy.ntheory.digits": [[99, 3, 1, "", "count_digits"], [99, 3, 1, "", "digits"], [99, 3, 1, "", "is_palindromic"]], "sympy.ntheory.ecm": [[99, 3, 1, "", "ecm"]], "sympy.ntheory.egyptian_fraction": [[99, 3, 1, "", "egyptian_fraction"]], "sympy.ntheory.factor_": [[99, 3, 1, "", "abundance"], [99, 3, 1, "", "antidivisor_count"], [99, 3, 1, "", "antidivisors"], [99, 3, 1, "", "core"], [99, 3, 1, "", "digits"], [99, 3, 1, "", "divisor_count"], [99, 1, 1, "", "divisor_sigma"], [99, 3, 1, "", "divisors"], [99, 3, 1, "", "factorint"], [99, 3, 1, "", "factorrat"], [99, 3, 1, "", "is_abundant"], [99, 3, 1, "", "is_amicable"], [99, 3, 1, "", "is_deficient"], [99, 3, 1, "", "is_mersenne_prime"], [99, 3, 1, "", "is_perfect"], [99, 3, 1, "", "mersenne_prime_exponent"], [99, 3, 1, "", "multiplicity"], [99, 3, 1, "", "perfect_power"], [99, 3, 1, "", "pollard_pm1"], [99, 3, 1, "", "pollard_rho"], [99, 3, 1, "", "primefactors"], [99, 1, 1, "", "primenu"], [99, 1, 1, "", "primeomega"], [99, 3, 1, "", "proper_divisor_count"], [99, 3, 1, "", "proper_divisors"], [99, 1, 1, "", "reduced_totient"], [99, 3, 1, "", "smoothness"], [99, 3, 1, "", "smoothness_p"], [99, 1, 1, "", "totient"], [99, 3, 1, "", "trailing"], [99, 3, 1, "", "udivisor_count"], [99, 1, 1, "", "udivisor_sigma"], [99, 3, 1, "", "udivisors"]], "sympy.ntheory.generate": [[99, 1, 1, "", "Sieve"], [99, 3, 1, "", "composite"], [99, 3, 1, "", "compositepi"], [99, 3, 1, "", "cycle_length"], [99, 3, 1, "", "nextprime"], [99, 3, 1, "", "prevprime"], [99, 3, 1, "", "prime"], [99, 3, 1, "", "primepi"], [99, 3, 1, "", "primerange"], [99, 3, 1, "", "primorial"], [99, 3, 1, "", "randprime"]], "sympy.ntheory.generate.Sieve": [[99, 2, 1, "", "extend"], [99, 2, 1, "", "extend_to_no"], [99, 2, 1, "", "mobiusrange"], [99, 2, 1, "", "primerange"], [99, 2, 1, "", "search"], [99, 2, 1, "", "totientrange"]], "sympy.ntheory.modular": [[99, 3, 1, "", "crt"], [99, 3, 1, "", "crt1"], [99, 3, 1, "", "crt2"], [99, 3, 1, "", "solve_congruence"], [99, 3, 1, "", "symmetric_residue"]], "sympy.ntheory.multinomial": [[99, 3, 1, "", "binomial_coefficients"], [99, 3, 1, "", "binomial_coefficients_list"], [99, 3, 1, "", "multinomial_coefficients"], [99, 3, 1, "", "multinomial_coefficients_iterator"]], "sympy.ntheory.partitions_": [[99, 3, 1, "", "npartitions"]], "sympy.ntheory.primetest": [[99, 3, 1, "", "is_euler_pseudoprime"], [99, 3, 1, "", "is_extra_strong_lucas_prp"], [99, 3, 1, "", "is_gaussian_prime"], [99, 3, 1, "", "is_lucas_prp"], [99, 3, 1, "", "is_square"], [99, 3, 1, "", "is_strong_lucas_prp"], [99, 3, 1, "", "isprime"], [99, 3, 1, "", "mr"]], "sympy.ntheory.qs": [[99, 3, 1, "", "qs"]], "sympy.ntheory.residue_ntheory": [[99, 3, 1, "", "discrete_log"], [99, 3, 1, "", "is_nthpow_residue"], [99, 3, 1, "", "is_primitive_root"], [99, 3, 1, "", "is_quad_residue"], [99, 3, 1, "", "jacobi_symbol"], [99, 3, 1, "", "legendre_symbol"], [99, 3, 1, "", "n_order"], [99, 3, 1, "", "nthroot_mod"], [99, 3, 1, "", "primitive_root"], [99, 3, 1, "", "quadratic_residues"], [99, 3, 1, "", "sqrt_mod"], [99, 3, 1, "", "sqrt_mod_iter"]], "sympy.parsing.latex": [[101, 1, 1, "", "LaTeXParsingError"], [101, 3, 1, "", "parse_latex"]], "sympy.parsing.mathematica": [[101, 3, 1, "", "parse_mathematica"]], "sympy.parsing.maxima": [[101, 3, 1, "", "parse_maxima"]], "sympy.parsing": [[101, 0, 0, "-", "sym_expr"]], "sympy.parsing.sym_expr": [[101, 1, 1, "", "SymPyExpression"]], "sympy.parsing.sym_expr.SymPyExpression": [[101, 2, 1, "", "convert_to_c"], [101, 2, 1, "", "convert_to_expr"], [101, 2, 1, "", "convert_to_fortran"], [101, 2, 1, "", "convert_to_python"], [101, 2, 1, "", "return_expr"]], "sympy.parsing.sympy_parser": [[101, 3, 1, "", "auto_number"], [101, 3, 1, "", "auto_symbol"], [101, 3, 1, "", "convert_xor"], [101, 3, 1, "", "eval_expr"], [101, 3, 1, "", "factorial_notation"], [101, 3, 1, "", "function_exponentiation"], [101, 3, 1, "", "implicit_application"], [101, 3, 1, "", "implicit_multiplication"], [101, 3, 1, "", "implicit_multiplication_application"], [101, 3, 1, "", "lambda_notation"], [101, 3, 1, "", "parse_expr"], [101, 3, 1, "", "rationalize"], [101, 3, 1, "", "repeated_decimals"], [101, 3, 1, "", "split_symbols"], [101, 3, 1, "", "split_symbols_custom"], [101, 6, 1, "", "standard_transformations"], [101, 3, 1, "", "stringify_expr"]], "sympy.physics.continuum_mechanics": [[102, 0, 0, "-", "beam"], [105, 0, 0, "-", "truss"]], "sympy.physics.continuum_mechanics.beam": [[102, 1, 1, "", "Beam"], [102, 1, 1, "", "Beam3D"]], "sympy.physics.continuum_mechanics.beam.Beam": [[102, 4, 1, "", "applied_loads"], [102, 2, 1, "", "apply_load"], [102, 2, 1, "", "apply_support"], [102, 4, 1, "", "area"], [102, 2, 1, "", "bending_moment"], [102, 4, 1, "", "boundary_conditions"], [102, 4, 1, "", "cross_section"], [102, 2, 1, "", "deflection"], [102, 2, 1, "", "draw"], [102, 4, 1, "", "elastic_modulus"], [102, 4, 1, "", "ild_moment"], [102, 4, 1, "", "ild_reactions"], [102, 4, 1, "", "ild_shear"], [102, 2, 1, "", "join"], [102, 4, 1, "", "length"], [102, 4, 1, "", "load"], [102, 2, 1, "", "max_bmoment"], [102, 2, 1, "", "max_deflection"], [102, 2, 1, "", "max_shear_force"], [102, 2, 1, "", "plot_bending_moment"], [102, 2, 1, "", "plot_deflection"], [102, 2, 1, "", "plot_ild_moment"], [102, 2, 1, "", "plot_ild_reactions"], [102, 2, 1, "", "plot_ild_shear"], [102, 2, 1, "", "plot_loading_results"], [102, 2, 1, "", "plot_shear_force"], [102, 2, 1, "", "plot_shear_stress"], [102, 2, 1, "", "plot_slope"], [102, 2, 1, "", "point_cflexure"], [102, 4, 1, "", "reaction_loads"], [102, 2, 1, "", "remove_load"], [102, 4, 1, "", "second_moment"], [102, 2, 1, "", "shear_force"], [102, 2, 1, "", "shear_stress"], [102, 2, 1, "", "slope"], [102, 2, 1, "", "solve_for_ild_moment"], [102, 2, 1, "", "solve_for_ild_reactions"], [102, 2, 1, "", "solve_for_ild_shear"], [102, 2, 1, "", "solve_for_reaction_loads"], [102, 4, 1, "", "variable"]], "sympy.physics.continuum_mechanics.beam.Beam3D": [[102, 2, 1, "", "angular_deflection"], [102, 2, 1, "", "apply_load"], [102, 2, 1, "", "apply_moment_load"], [102, 4, 1, "", "area"], [102, 2, 1, "", "axial_force"], [102, 2, 1, "", "axial_stress"], [102, 2, 1, "", "bending_moment"], [102, 4, 1, "", "boundary_conditions"], [102, 2, 1, "", "deflection"], [102, 4, 1, "", "load_vector"], [102, 2, 1, "", "max_bending_moment"], [102, 2, 1, "", "max_bmoment"], [102, 2, 1, "", "max_deflection"], [102, 2, 1, "", "max_shear_force"], [102, 4, 1, "", "moment_load_vector"], [102, 2, 1, "", "plot_bending_moment"], [102, 2, 1, "", "plot_deflection"], [102, 2, 1, "", "plot_loading_results"], [102, 2, 1, "", "plot_shear_force"], [102, 2, 1, "", "plot_shear_stress"], [102, 2, 1, "", "plot_slope"], [102, 2, 1, "", "polar_moment"], [102, 4, 1, "", "second_moment"], [102, 2, 1, "", "shear_force"], [102, 4, 1, "", "shear_modulus"], [102, 2, 1, "", "shear_stress"], [102, 2, 1, "", "slope"], [102, 2, 1, "", "solve_for_reaction_loads"], [102, 2, 1, "", "solve_for_torsion"], [102, 2, 1, "", "torsional_moment"]], "sympy.physics.continuum_mechanics.truss": [[105, 1, 1, "", "Truss"]], "sympy.physics.continuum_mechanics.truss.Truss": [[105, 2, 1, "", "add_member"], [105, 2, 1, "", "add_node"], [105, 2, 1, "", "apply_load"], [105, 2, 1, "", "apply_support"], [105, 2, 1, "", "change_member_label"], [105, 2, 1, "", "change_node_label"], [105, 4, 1, "", "internal_forces"], [105, 4, 1, "", "loads"], [105, 4, 1, "", "member_labels"], [105, 4, 1, "", "members"], [105, 4, 1, "", "node_labels"], [105, 4, 1, "", "node_positions"], [105, 4, 1, "", "nodes"], [105, 4, 1, "", "reaction_loads"], [105, 2, 1, "", "remove_load"], [105, 2, 1, "", "remove_member"], [105, 2, 1, "", "remove_node"], [105, 2, 1, "", "remove_support"], [105, 2, 1, "", "solve"], [105, 4, 1, "", "supports"]], "sympy.physics": [[108, 0, 0, "-", "control"], [111, 0, 0, "-", "hydrogen"], [112, 0, 0, "-", "matrices"], [133, 0, 0, "-", "mechanics"], [148, 0, 0, "-", "paulialgebra"], [149, 0, 0, "-", "qho_1d"], [173, 0, 0, "-", "secondquant"], [174, 0, 0, "-", "sho"], [190, 0, 0, "-", "vector"], [193, 0, 0, "-", "wigner"]], "sympy.physics.control.control_plots": [[107, 2, 1, "", "bode_magnitude_numerical_data"], [107, 2, 1, "", "bode_magnitude_plot"], [107, 2, 1, "", "bode_phase_numerical_data"], [107, 2, 1, "", "bode_phase_plot"], [107, 2, 1, "", "bode_plot"], [107, 2, 1, "", "impulse_response_numerical_data"], [107, 2, 1, "", "impulse_response_plot"], [107, 2, 1, "", "pole_zero_numerical_data"], [107, 2, 1, "", "pole_zero_plot"], [107, 2, 1, "", "ramp_response_numerical_data"], [107, 2, 1, "", "ramp_response_plot"], [107, 2, 1, "", "step_response_numerical_data"], [107, 2, 1, "", "step_response_plot"]], "sympy.physics.control": [[109, 0, 0, "-", "lti"]], "sympy.physics.control.lti": [[109, 1, 1, "", "Feedback"], [109, 1, 1, "", "MIMOFeedback"], [109, 1, 1, "", "MIMOParallel"], [109, 1, 1, "", "MIMOSeries"], [109, 1, 1, "", "Parallel"], [109, 1, 1, "", "Series"], [109, 1, 1, "", "TransferFunction"], [109, 1, 1, "", "TransferFunctionMatrix"]], "sympy.physics.control.lti.Feedback": [[109, 2, 1, "", "doit"], [109, 4, 1, "", "sensitivity"], [109, 4, 1, "", "sign"], [109, 4, 1, "", "sys1"], [109, 4, 1, "", "sys2"], [109, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOFeedback": [[109, 2, 1, "", "doit"], [109, 4, 1, "", "sensitivity"], [109, 4, 1, "", "sign"], [109, 4, 1, "", "sys1"], [109, 4, 1, "", "sys2"], [109, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOParallel": [[109, 2, 1, "", "doit"], [109, 4, 1, "", "num_inputs"], [109, 4, 1, "", "num_outputs"], [109, 4, 1, "", "shape"], [109, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOSeries": [[109, 2, 1, "", "doit"], [109, 4, 1, "", "num_inputs"], [109, 4, 1, "", "num_outputs"], [109, 4, 1, "", "shape"], [109, 4, 1, "", "var"]], "sympy.physics.control.lti.Parallel": [[109, 2, 1, "", "doit"], [109, 4, 1, "", "is_biproper"], [109, 4, 1, "", "is_proper"], [109, 4, 1, "", "is_strictly_proper"], [109, 2, 1, "", "to_expr"], [109, 4, 1, "", "var"]], "sympy.physics.control.lti.Series": [[109, 2, 1, "", "doit"], [109, 4, 1, "", "is_biproper"], [109, 4, 1, "", "is_proper"], [109, 4, 1, "", "is_strictly_proper"], [109, 2, 1, "", "to_expr"], [109, 4, 1, "", "var"]], "sympy.physics.control.lti.TransferFunction": [[109, 2, 1, "", "dc_gain"], [109, 4, 1, "", "den"], [109, 2, 1, "", "expand"], [109, 2, 1, "", "from_rational_expression"], [109, 4, 1, "", "is_biproper"], [109, 4, 1, "", "is_proper"], [109, 2, 1, "", "is_stable"], [109, 4, 1, "", "is_strictly_proper"], [109, 4, 1, "", "num"], [109, 2, 1, "", "poles"], [109, 2, 1, "", "to_expr"], [109, 4, 1, "", "var"], [109, 2, 1, "", "zeros"]], "sympy.physics.control.lti.TransferFunctionMatrix": [[109, 2, 1, "", "elem_poles"], [109, 2, 1, "", "elem_zeros"], [109, 2, 1, "", "expand"], [109, 2, 1, "", "from_Matrix"], [109, 4, 1, "", "num_inputs"], [109, 4, 1, "", "num_outputs"], [109, 4, 1, "", "shape"], [109, 2, 1, "", "transpose"], [109, 4, 1, "", "var"]], "sympy.physics.hep": [[110, 0, 0, "-", "gamma_matrices"]], "sympy.physics.hep.gamma_matrices": [[110, 3, 1, "", "extract_type_tens"], [110, 3, 1, "", "gamma_trace"], [110, 3, 1, "", "kahane_simplify"], [110, 3, 1, "", "simplify_gpgp"]], "sympy.physics.hydrogen": [[111, 3, 1, "", "E_nl"], [111, 3, 1, "", "E_nl_dirac"], [111, 3, 1, "", "Psi_nlm"], [111, 3, 1, "", "R_nl"]], "sympy.physics.matrices": [[112, 3, 1, "", "mdft"], [112, 3, 1, "", "mgamma"], [112, 3, 1, "", "msigma"], [112, 3, 1, "", "pat_matrix"]], "sympy.physics.mechanics": [[114, 0, 0, "-", "body"], [115, 3, 1, "", "find_dynamicsymbols"], [117, 0, 0, "-", "joint"], [117, 0, 0, "-", "jointsmethod"], [118, 0, 0, "-", "kane"], [118, 0, 0, "-", "lagrange"], [119, 0, 0, "-", "linearize"], [115, 3, 1, "", "msubs"], [120, 0, 0, "-", "particle"], [120, 0, 0, "-", "rigidbody"], [122, 0, 0, "-", "system"]], "sympy.physics.mechanics.body": [[114, 1, 1, "", "Body"]], "sympy.physics.mechanics.body.Body": [[114, 2, 1, "", "ang_vel_in"], [114, 2, 1, "", "apply_force"], [114, 2, 1, "", "apply_torque"], [114, 2, 1, "", "clear_loads"], [114, 2, 1, "", "dcm"], [114, 4, 1, "", "inertia"], [114, 2, 1, "", "kinetic_energy"], [114, 2, 1, "", "masscenter_vel"], [114, 2, 1, "", "parallel_axis"], [114, 2, 1, "", "remove_load"], [114, 4, 1, "", "x"], [114, 4, 1, "", "y"], [114, 4, 1, "", "z"]], "sympy.physics.mechanics.functions": [[120, 3, 1, "", "Lagrangian"], [120, 3, 1, "", "angular_momentum"], [120, 3, 1, "", "inertia"], [120, 3, 1, "", "inertia_of_point_mass"], [120, 3, 1, "", "kinetic_energy"], [120, 3, 1, "", "linear_momentum"], [120, 3, 1, "", "potential_energy"]], "sympy.physics.mechanics.joint": [[117, 1, 1, "", "CylindricalJoint"], [117, 1, 1, "", "Joint"], [117, 1, 1, "", "PinJoint"], [117, 1, 1, "", "PlanarJoint"], [117, 1, 1, "", "PrismaticJoint"], [117, 1, 1, "", "SphericalJoint"], [117, 1, 1, "", "WeldJoint"]], "sympy.physics.mechanics.joint.CylindricalJoint": [[117, 4, 1, "", "joint_axis"], [117, 4, 1, "", "rotation_coordinate"], [117, 4, 1, "", "rotation_speed"], [117, 4, 1, "", "translation_coordinate"], [117, 4, 1, "", "translation_speed"]], "sympy.physics.mechanics.joint.Joint": [[117, 4, 1, "", "child"], [117, 4, 1, "", "child_axis"], [117, 4, 1, "", "child_point"], [117, 4, 1, "", "coordinates"], [117, 4, 1, "", "kdes"], [117, 4, 1, "", "name"], [117, 4, 1, "", "parent"], [117, 4, 1, "", "parent_axis"], [117, 4, 1, "", "parent_point"], [117, 4, 1, "", "speeds"]], "sympy.physics.mechanics.joint.PinJoint": [[117, 4, 1, "", "joint_axis"]], "sympy.physics.mechanics.joint.PlanarJoint": [[117, 4, 1, "", "planar_coordinates"], [117, 4, 1, "", "planar_speeds"], [117, 4, 1, "", "planar_vectors"], [117, 4, 1, "", "rotation_axis"], [117, 4, 1, "", "rotation_coordinate"], [117, 4, 1, "", "rotation_speed"]], "sympy.physics.mechanics.joint.PrismaticJoint": [[117, 4, 1, "", "joint_axis"]], "sympy.physics.mechanics.jointsmethod": [[117, 1, 1, "", "JointsMethod"]], "sympy.physics.mechanics.jointsmethod.JointsMethod": [[117, 4, 1, "", "bodies"], [117, 4, 1, "", "forcing"], [117, 4, 1, "", "forcing_full"], [117, 2, 1, "", "form_eoms"], [117, 4, 1, "", "kdes"], [117, 4, 1, "", "loads"], [117, 4, 1, "", "mass_matrix"], [117, 4, 1, "", "mass_matrix_full"], [117, 4, 1, "", "method"], [117, 4, 1, "", "q"], [117, 2, 1, "", "rhs"], [117, 4, 1, "", "u"]], "sympy.physics.mechanics.kane": [[118, 1, 1, "", "KanesMethod"]], "sympy.physics.mechanics.kane.KanesMethod": [[118, 4, 1, "", "auxiliary_eqs"], [118, 4, 1, "", "forcing"], [118, 4, 1, "", "forcing_full"], [118, 4, 1, "", "forcing_kin"], [118, 2, 1, "", "kanes_equations"], [118, 2, 1, "", "kindiffdict"], [118, 2, 1, "", "linearize"], [118, 4, 1, "", "mass_matrix"], [118, 4, 1, "", "mass_matrix_full"], [118, 4, 1, "", "mass_matrix_kin"], [118, 2, 1, "", "rhs"], [118, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.lagrange": [[118, 1, 1, "", "LagrangesMethod"]], "sympy.physics.mechanics.lagrange.LagrangesMethod": [[118, 4, 1, "", "forcing"], [118, 4, 1, "", "forcing_full"], [118, 2, 1, "", "form_lagranges_equations"], [118, 2, 1, "", "linearize"], [118, 4, 1, "", "mass_matrix"], [118, 4, 1, "", "mass_matrix_full"], [118, 2, 1, "", "rhs"], [118, 2, 1, "", "solve_multipliers"], [118, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.linearize": [[119, 1, 1, "", "Linearizer"]], "sympy.physics.mechanics.linearize.Linearizer": [[119, 2, 1, "", "linearize"]], "sympy.physics.mechanics.particle": [[120, 1, 1, "", "Particle"]], "sympy.physics.mechanics.particle.Particle": [[120, 2, 1, "", "angular_momentum"], [120, 2, 1, "", "kinetic_energy"], [120, 2, 1, "", "linear_momentum"], [120, 4, 1, "", "mass"], [120, 2, 1, "", "parallel_axis"], [120, 4, 1, "", "point"], [120, 4, 1, "", "potential_energy"]], "sympy.physics.mechanics.rigidbody": [[120, 1, 1, "", "RigidBody"]], "sympy.physics.mechanics.rigidbody.RigidBody": [[120, 2, 1, "", "angular_momentum"], [120, 4, 1, "", "central_inertia"], [120, 4, 1, "", "frame"], [120, 4, 1, "", "inertia"], [120, 2, 1, "", "kinetic_energy"], [120, 2, 1, "", "linear_momentum"], [120, 4, 1, "", "mass"], [120, 4, 1, "", "masscenter"], [120, 2, 1, "", "parallel_axis"], [120, 4, 1, "", "potential_energy"]], "sympy.physics.mechanics.system": [[122, 1, 1, "", "SymbolicSystem"]], "sympy.physics.mechanics.system.SymbolicSystem": [[122, 4, 1, "", "alg_con"], [122, 4, 1, "", "bodies"], [122, 4, 1, "", "comb_explicit_rhs"], [122, 4, 1, "", "comb_implicit_mat"], [122, 4, 1, "", "comb_implicit_rhs"], [122, 2, 1, "", "compute_explicit_form"], [122, 2, 1, "", "constant_symbols"], [122, 4, 1, "", "coordinates"], [122, 4, 1, "", "dyn_implicit_mat"], [122, 4, 1, "", "dyn_implicit_rhs"], [122, 2, 1, "", "dynamic_symbols"], [122, 4, 1, "", "kin_explicit_rhs"], [122, 4, 1, "", "loads"], [122, 4, 1, "", "speeds"], [122, 4, 1, "", "states"]], "sympy.physics.optics": [[142, 0, 0, "-", "gaussopt"], [144, 0, 0, "-", "medium"], [145, 0, 0, "-", "polarization"], [146, 0, 0, "-", "utils"], [147, 0, 0, "-", "waves"]], "sympy.physics.optics.gaussopt": [[142, 1, 1, "", "BeamParameter"], [142, 1, 1, "", "CurvedMirror"], [142, 1, 1, "", "CurvedRefraction"], [142, 1, 1, "", "FlatMirror"], [142, 1, 1, "", "FlatRefraction"], [142, 1, 1, "", "FreeSpace"], [142, 1, 1, "", "GeometricRay"], [142, 1, 1, "", "RayTransferMatrix"], [142, 1, 1, "", "ThinLens"], [142, 3, 1, "", "conjugate_gauss_beams"], [142, 3, 1, "", "gaussian_conj"], [142, 3, 1, "", "geometric_conj_ab"], [142, 3, 1, "", "geometric_conj_af"], [142, 3, 1, "", "geometric_conj_bf"], [142, 3, 1, "", "rayleigh2waist"], [142, 3, 1, "", "waist2rayleigh"]], "sympy.physics.optics.gaussopt.BeamParameter": [[142, 4, 1, "", "divergence"], [142, 4, 1, "", "gouy"], [142, 4, 1, "", "q"], [142, 4, 1, "", "radius"], [142, 4, 1, "", "w"], [142, 4, 1, "", "w_0"], [142, 4, 1, "", "waist_approximation_limit"]], "sympy.physics.optics.gaussopt.GeometricRay": [[142, 4, 1, "", "angle"], [142, 4, 1, "", "height"]], "sympy.physics.optics.gaussopt.RayTransferMatrix": [[142, 4, 1, "", "A"], [142, 4, 1, "", "B"], [142, 4, 1, "", "C"], [142, 4, 1, "", "D"]], "sympy.physics.optics.medium": [[144, 1, 1, "", "Medium"]], "sympy.physics.optics.medium.Medium": [[144, 4, 1, "", "refractive_index"], [144, 4, 1, "", "speed"]], "sympy.physics.optics.polarization": [[145, 3, 1, "", "half_wave_retarder"], [145, 3, 1, "", "jones_2_stokes"], [145, 3, 1, "", "jones_vector"], [145, 3, 1, "", "linear_polarizer"], [145, 3, 1, "", "mueller_matrix"], [145, 3, 1, "", "phase_retarder"], [145, 3, 1, "", "polarizing_beam_splitter"], [145, 3, 1, "", "quarter_wave_retarder"], [145, 3, 1, "", "reflective_filter"], [145, 3, 1, "", "stokes_vector"], [145, 3, 1, "", "transmissive_filter"]], "sympy.physics.optics.utils": [[146, 3, 1, "", "brewster_angle"], [146, 3, 1, "", "critical_angle"], [146, 3, 1, "", "deviation"], [146, 3, 1, "", "fresnel_coefficients"], [146, 3, 1, "", "hyperfocal_distance"], [146, 3, 1, "", "lens_formula"], [146, 3, 1, "", "lens_makers_formula"], [146, 3, 1, "", "mirror_formula"], [146, 3, 1, "", "refraction_angle"], [146, 3, 1, "", "transverse_magnification"]], "sympy.physics.optics.waves": [[147, 1, 1, "", "TWave"]], "sympy.physics.optics.waves.TWave": [[147, 4, 1, "", "amplitude"], [147, 4, 1, "", "angular_velocity"], [147, 4, 1, "", "frequency"], [147, 4, 1, "", "n"], [147, 4, 1, "", "phase"], [147, 4, 1, "", "speed"], [147, 4, 1, "", "time_period"], [147, 4, 1, "", "wavelength"], [147, 4, 1, "", "wavenumber"]], "sympy.physics.paulialgebra": [[148, 3, 1, "", "evaluate_pauli_product"]], "sympy.physics.qho_1d": [[149, 3, 1, "", "E_n"], [149, 3, 1, "", "coherent_state"], [149, 3, 1, "", "psi_n"]], "sympy.physics.quantum": [[150, 0, 0, "-", "anticommutator"], [151, 0, 0, "-", "cartesian"], [152, 0, 0, "-", "cg"], [153, 0, 0, "-", "circuitplot"], [154, 0, 0, "-", "commutator"], [155, 0, 0, "-", "constants"], [156, 0, 0, "-", "dagger"], [157, 0, 0, "-", "gate"], [158, 0, 0, "-", "grover"], [159, 0, 0, "-", "hilbert"], [161, 0, 0, "-", "innerproduct"], [162, 0, 0, "-", "operator"], [163, 0, 0, "-", "operatorset"], [164, 0, 0, "-", "piab"], [165, 0, 0, "-", "qapply"], [166, 0, 0, "-", "qft"], [167, 0, 0, "-", "qubit"], [168, 0, 0, "-", "represent"], [169, 0, 0, "-", "shor"], [170, 0, 0, "-", "spin"], [171, 0, 0, "-", "state"], [172, 0, 0, "-", "tensorproduct"]], "sympy.physics.quantum.anticommutator": [[150, 1, 1, "", "AntiCommutator"]], "sympy.physics.quantum.anticommutator.AntiCommutator": [[150, 2, 1, "", "doit"]], "sympy.physics.quantum.cartesian": [[151, 1, 1, "", "PositionBra3D"], [151, 1, 1, "", "PositionKet3D"], [151, 1, 1, "", "PositionState3D"], [151, 1, 1, "", "PxBra"], [151, 1, 1, "", "PxKet"], [151, 1, 1, "", "PxOp"], [151, 1, 1, "", "XBra"], [151, 1, 1, "", "XKet"], [151, 1, 1, "", "XOp"], [151, 1, 1, "", "YOp"], [151, 1, 1, "", "ZOp"]], "sympy.physics.quantum.cartesian.PositionState3D": [[151, 4, 1, "", "position_x"], [151, 4, 1, "", "position_y"], [151, 4, 1, "", "position_z"]], "sympy.physics.quantum.cartesian.PxBra": [[151, 4, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.PxKet": [[151, 4, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.XBra": [[151, 4, 1, "", "position"]], "sympy.physics.quantum.cartesian.XKet": [[151, 4, 1, "", "position"]], "sympy.physics.quantum.cg": [[152, 1, 1, "", "CG"], [152, 1, 1, "", "Wigner3j"], [152, 1, 1, "", "Wigner6j"], [152, 1, 1, "", "Wigner9j"], [152, 3, 1, "", "cg_simp"]], "sympy.physics.quantum.circuitplot": [[153, 1, 1, "", "CircuitPlot"], [153, 3, 1, "", "CreateCGate"], [153, 1, 1, "", "Mx"], [153, 1, 1, "", "Mz"], [153, 3, 1, "", "circuit_plot"], [153, 3, 1, "", "labeller"]], "sympy.physics.quantum.circuitplot.CircuitPlot": [[153, 2, 1, "", "control_line"], [153, 2, 1, "", "control_point"], [153, 2, 1, "", "not_point"], [153, 2, 1, "", "one_qubit_box"], [153, 2, 1, "", "swap_point"], [153, 2, 1, "", "two_qubit_box"], [153, 2, 1, "", "update"]], "sympy.physics.quantum.commutator": [[154, 1, 1, "", "Commutator"]], "sympy.physics.quantum.commutator.Commutator": [[154, 2, 1, "", "doit"]], "sympy.physics.quantum.constants": [[155, 1, 1, "", "HBar"]], "sympy.physics.quantum.dagger": [[156, 1, 1, "", "Dagger"]], "sympy.physics.quantum.gate": [[157, 1, 1, "", "CGate"], [157, 1, 1, "", "CGateS"], [157, 5, 1, "", "CNOT"], [157, 1, 1, "", "CNotGate"], [157, 1, 1, "", "Gate"], [157, 5, 1, "", "H"], [157, 1, 1, "", "HadamardGate"], [157, 1, 1, "", "IdentityGate"], [157, 1, 1, "", "OneQubitGate"], [157, 5, 1, "", "Phase"], [157, 1, 1, "", "PhaseGate"], [157, 5, 1, "", "S"], [157, 5, 1, "", "SWAP"], [157, 1, 1, "", "SwapGate"], [157, 5, 1, "", "T"], [157, 1, 1, "", "TGate"], [157, 1, 1, "", "TwoQubitGate"], [157, 1, 1, "", "UGate"], [157, 5, 1, "", "X"], [157, 1, 1, "", "XGate"], [157, 5, 1, "", "Y"], [157, 1, 1, "", "YGate"], [157, 5, 1, "", "Z"], [157, 1, 1, "", "ZGate"], [157, 3, 1, "", "gate_simp"], [157, 3, 1, "", "gate_sort"], [157, 3, 1, "", "normalized"], [157, 3, 1, "", "random_circuit"]], "sympy.physics.quantum.gate.CGate": [[157, 4, 1, "", "controls"], [157, 2, 1, "", "decompose"], [157, 2, 1, "", "eval_controls"], [157, 4, 1, "", "gate"], [157, 4, 1, "", "min_qubits"], [157, 4, 1, "", "nqubits"], [157, 2, 1, "", "plot_gate"], [157, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.CNotGate": [[157, 4, 1, "", "controls"], [157, 4, 1, "", "gate"], [157, 4, 1, "", "min_qubits"], [157, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.Gate": [[157, 2, 1, "", "get_target_matrix"], [157, 4, 1, "", "min_qubits"], [157, 4, 1, "", "nqubits"], [157, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.SwapGate": [[157, 2, 1, "", "decompose"]], "sympy.physics.quantum.gate.UGate": [[157, 2, 1, "", "get_target_matrix"], [157, 4, 1, "", "targets"]], "sympy.physics.quantum.grover": [[158, 1, 1, "", "OracleGate"], [158, 1, 1, "", "WGate"], [158, 3, 1, "", "apply_grover"], [158, 3, 1, "", "grover_iteration"], [158, 3, 1, "", "superposition_basis"]], "sympy.physics.quantum.grover.OracleGate": [[158, 4, 1, "", "search_function"], [158, 4, 1, "", "targets"]], "sympy.physics.quantum.hilbert": [[159, 1, 1, "", "ComplexSpace"], [159, 1, 1, "", "DirectSumHilbertSpace"], [159, 1, 1, "", "FockSpace"], [159, 1, 1, "", "HilbertSpace"], [159, 1, 1, "", "L2"], [159, 1, 1, "", "TensorPowerHilbertSpace"], [159, 1, 1, "", "TensorProductHilbertSpace"]], "sympy.physics.quantum.hilbert.DirectSumHilbertSpace": [[159, 2, 1, "", "eval"], [159, 4, 1, "", "spaces"]], "sympy.physics.quantum.hilbert.HilbertSpace": [[159, 4, 1, "", "dimension"]], "sympy.physics.quantum.hilbert.TensorProductHilbertSpace": [[159, 2, 1, "", "eval"], [159, 4, 1, "", "spaces"]], "sympy.physics.quantum.innerproduct": [[161, 1, 1, "", "InnerProduct"]], "sympy.physics.quantum.operator": [[162, 1, 1, "", "DifferentialOperator"], [162, 1, 1, "", "HermitianOperator"], [162, 1, 1, "", "IdentityOperator"], [162, 1, 1, "", "Operator"], [162, 1, 1, "", "OuterProduct"], [162, 1, 1, "", "UnitaryOperator"]], "sympy.physics.quantum.operator.DifferentialOperator": [[162, 4, 1, "", "expr"], [162, 4, 1, "", "free_symbols"], [162, 4, 1, "", "function"], [162, 4, 1, "", "variables"]], "sympy.physics.quantum.operator.OuterProduct": [[162, 4, 1, "", "bra"], [162, 4, 1, "", "ket"]], "sympy.physics.quantum.operatorset": [[163, 3, 1, "", "operators_to_state"], [163, 3, 1, "", "state_to_operators"]], "sympy.physics.quantum.piab": [[164, 1, 1, "", "PIABBra"], [164, 1, 1, "", "PIABHamiltonian"], [164, 1, 1, "", "PIABKet"]], "sympy.physics.quantum.qapply": [[165, 3, 1, "", "qapply"]], "sympy.physics.quantum.qft": [[166, 1, 1, "", "IQFT"], [166, 1, 1, "", "QFT"], [166, 5, 1, "", "Rk"], [166, 1, 1, "", "RkGate"]], "sympy.physics.quantum.qft.IQFT": [[166, 2, 1, "", "decompose"]], "sympy.physics.quantum.qft.QFT": [[166, 2, 1, "", "decompose"]], "sympy.physics.quantum.qubit": [[167, 1, 1, "", "IntQubit"], [167, 1, 1, "", "IntQubitBra"], [167, 1, 1, "", "Qubit"], [167, 1, 1, "", "QubitBra"], [167, 3, 1, "", "matrix_to_density"], [167, 3, 1, "", "matrix_to_qubit"], [167, 3, 1, "", "measure_all"], [167, 3, 1, "", "measure_all_oneshot"], [167, 3, 1, "", "measure_partial"], [167, 3, 1, "", "measure_partial_oneshot"], [167, 3, 1, "", "qubit_to_matrix"]], "sympy.physics.quantum.represent": [[168, 3, 1, "", "enumerate_states"], [168, 3, 1, "", "get_basis"], [168, 3, 1, "", "integrate_result"], [168, 3, 1, "", "rep_expectation"], [168, 3, 1, "", "rep_innerproduct"], [168, 3, 1, "", "represent"]], "sympy.physics.quantum.shor": [[169, 1, 1, "", "CMod"], [169, 3, 1, "", "period_find"], [169, 3, 1, "", "shor"]], "sympy.physics.quantum.shor.CMod": [[169, 4, 1, "", "N"], [169, 4, 1, "", "a"], [169, 4, 1, "", "t"]], "sympy.physics.quantum.spin": [[170, 1, 1, "", "J2Op"], [170, 1, 1, "", "JxBra"], [170, 1, 1, "", "JxBraCoupled"], [170, 1, 1, "", "JxKet"], [170, 1, 1, "", "JxKetCoupled"], [170, 1, 1, "", "JyBra"], [170, 1, 1, "", "JyBraCoupled"], [170, 1, 1, "", "JyKet"], [170, 1, 1, "", "JyKetCoupled"], [170, 1, 1, "", "JzBra"], [170, 1, 1, "", "JzBraCoupled"], [170, 1, 1, "", "JzKet"], [170, 1, 1, "", "JzKetCoupled"], [170, 1, 1, "", "JzOp"], [170, 1, 1, "", "Rotation"], [170, 1, 1, "", "WignerD"], [170, 3, 1, "", "couple"], [170, 3, 1, "", "uncouple"]], "sympy.physics.quantum.spin.Rotation": [[170, 2, 1, "", "D"], [170, 2, 1, "", "d"]], "sympy.physics.quantum.state": [[171, 1, 1, "", "Bra"], [171, 1, 1, "", "BraBase"], [171, 1, 1, "", "Ket"], [171, 1, 1, "", "KetBase"], [171, 1, 1, "", "OrthogonalBra"], [171, 1, 1, "", "OrthogonalKet"], [171, 1, 1, "", "OrthogonalState"], [171, 1, 1, "", "State"], [171, 1, 1, "", "StateBase"], [171, 1, 1, "", "TimeDepBra"], [171, 1, 1, "", "TimeDepKet"], [171, 1, 1, "", "TimeDepState"], [171, 1, 1, "", "Wavefunction"]], "sympy.physics.quantum.state.StateBase": [[171, 4, 1, "", "dual"], [171, 2, 1, "", "dual_class"], [171, 4, 1, "", "operators"]], "sympy.physics.quantum.state.TimeDepState": [[171, 4, 1, "", "label"], [171, 4, 1, "", "time"]], "sympy.physics.quantum.state.Wavefunction": [[171, 4, 1, "", "expr"], [171, 4, 1, "", "is_commutative"], [171, 4, 1, "", "is_normalized"], [171, 4, 1, "", "limits"], [171, 4, 1, "", "norm"], [171, 2, 1, "", "normalize"], [171, 2, 1, "", "prob"], [171, 4, 1, "", "variables"]], "sympy.physics.quantum.tensorproduct": [[172, 1, 1, "", "TensorProduct"], [172, 3, 1, "", "tensor_product_simp"]], "sympy.physics.secondquant": [[173, 1, 1, "", "AnnihilateBoson"], [173, 1, 1, "", "AnnihilateFermion"], [173, 1, 1, "", "AntiSymmetricTensor"], [173, 5, 1, "", "B"], [173, 5, 1, "", "BBra"], [173, 5, 1, "", "BKet"], [173, 5, 1, "", "Bd"], [173, 1, 1, "", "BosonicBasis"], [173, 1, 1, "", "Commutator"], [173, 1, 1, "", "CreateBoson"], [173, 1, 1, "", "CreateFermion"], [173, 1, 1, "", "Dagger"], [173, 5, 1, "", "F"], [173, 5, 1, "", "FBra"], [173, 5, 1, "", "FKet"], [173, 5, 1, "", "Fd"], [173, 1, 1, "", "FixedBosonicBasis"], [173, 1, 1, "", "FockState"], [173, 1, 1, "", "FockStateBosonBra"], [173, 1, 1, "", "FockStateBosonKet"], [173, 1, 1, "", "FockStateBra"], [173, 1, 1, "", "FockStateFermionBra"], [173, 1, 1, "", "FockStateFermionKet"], [173, 1, 1, "", "FockStateKet"], [173, 1, 1, "", "InnerProduct"], [173, 1, 1, "", "KroneckerDelta"], [173, 1, 1, "", "NO"], [173, 1, 1, "", "PermutationOperator"], [173, 1, 1, "", "VarBosonicBasis"], [173, 3, 1, "", "apply_operators"], [173, 3, 1, "", "contraction"], [173, 3, 1, "", "evaluate_deltas"], [173, 3, 1, "", "matrix_rep"], [173, 3, 1, "", "simplify_index_permutations"], [173, 3, 1, "", "substitute_dummies"], [173, 3, 1, "", "wicks"]], "sympy.physics.secondquant.AnnihilateBoson": [[173, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.AnnihilateFermion": [[173, 2, 1, "", "apply_operator"], [173, 4, 1, "", "is_only_q_annihilator"], [173, 4, 1, "", "is_only_q_creator"], [173, 4, 1, "", "is_q_annihilator"], [173, 4, 1, "", "is_q_creator"]], "sympy.physics.secondquant.AntiSymmetricTensor": [[173, 4, 1, "", "lower"], [173, 4, 1, "", "symbol"], [173, 4, 1, "", "upper"]], "sympy.physics.secondquant.Commutator": [[173, 2, 1, "", "doit"], [173, 2, 1, "", "eval"]], "sympy.physics.secondquant.CreateBoson": [[173, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.CreateFermion": [[173, 2, 1, "", "apply_operator"], [173, 4, 1, "", "is_only_q_annihilator"], [173, 4, 1, "", "is_only_q_creator"], [173, 4, 1, "", "is_q_annihilator"], [173, 4, 1, "", "is_q_creator"]], "sympy.physics.secondquant.Dagger": [[173, 2, 1, "", "eval"]], "sympy.physics.secondquant.FixedBosonicBasis": [[173, 2, 1, "", "index"], [173, 2, 1, "", "state"]], "sympy.physics.secondquant.InnerProduct": [[173, 4, 1, "", "bra"], [173, 4, 1, "", "ket"]], "sympy.physics.secondquant.KroneckerDelta": [[173, 2, 1, "", "eval"], [173, 4, 1, "", "indices_contain_equal_information"], [173, 4, 1, "", "is_above_fermi"], [173, 4, 1, "", "is_below_fermi"], [173, 4, 1, "", "is_only_above_fermi"], [173, 4, 1, "", "is_only_below_fermi"], [173, 4, 1, "", "killable_index"], [173, 4, 1, "", "preferred_index"]], "sympy.physics.secondquant.NO": [[173, 2, 1, "", "doit"], [173, 2, 1, "", "get_subNO"], [173, 4, 1, "", "has_q_annihilators"], [173, 4, 1, "", "has_q_creators"], [173, 2, 1, "", "iter_q_annihilators"], [173, 2, 1, "", "iter_q_creators"]], "sympy.physics.secondquant.PermutationOperator": [[173, 2, 1, "", "get_permuted"]], "sympy.physics.secondquant.VarBosonicBasis": [[173, 2, 1, "", "index"], [173, 2, 1, "", "state"]], "sympy.physics.sho": [[174, 3, 1, "", "E_nl"], [174, 3, 1, "", "R_nl"]], "sympy.physics.units": [[175, 0, 0, "-", "dimensions"], [179, 0, 0, "-", "prefixes"], [180, 0, 0, "-", "quantities"], [181, 0, 0, "-", "unitsystem"], [180, 0, 0, "-", "util"]], "sympy.physics.units.dimensions": [[175, 1, 1, "", "Dimension"], [175, 1, 1, "", "DimensionSystem"]], "sympy.physics.units.dimensions.Dimension": [[175, 2, 1, "", "has_integer_powers"]], "sympy.physics.units.dimensions.DimensionSystem": [[175, 4, 1, "", "can_transf_matrix"], [175, 4, 1, "", "dim"], [175, 2, 1, "", "dim_can_vector"], [175, 2, 1, "", "dim_vector"], [175, 4, 1, "", "inv_can_transf_matrix"], [175, 4, 1, "", "is_consistent"], [175, 2, 1, "", "is_dimensionless"], [175, 4, 1, "", "list_can_dims"], [175, 2, 1, "", "print_dim_base"]], "sympy.physics.units.prefixes": [[179, 1, 1, "", "Prefix"]], "sympy.physics.units.quantities": [[180, 1, 1, "", "Quantity"]], "sympy.physics.units.quantities.Quantity": [[180, 4, 1, "", "abbrev"], [180, 2, 1, "", "convert_to"], [180, 4, 1, "", "free_symbols"], [180, 4, 1, "", "is_prefixed"], [180, 4, 1, "", "scale_factor"], [180, 2, 1, "", "set_global_relative_scale_factor"]], "sympy.physics.units.unitsystem": [[181, 1, 1, "", "UnitSystem"]], "sympy.physics.units.unitsystem.UnitSystem": [[181, 4, 1, "", "dim"], [181, 2, 1, "", "extend"], [181, 2, 1, "", "get_units_non_prefixed"], [181, 4, 1, "", "is_consistent"]], "sympy.physics.units.util": [[180, 3, 1, "", "convert_to"]], "sympy.physics.vector.dyadic": [[183, 1, 1, "", "Dyadic"]], "sympy.physics.vector.dyadic.Dyadic": [[183, 2, 1, "", "applyfunc"], [183, 2, 1, "", "cross"], [183, 2, 1, "", "doit"], [183, 2, 1, "", "dot"], [183, 2, 1, "", "dt"], [183, 2, 1, "", "express"], [183, 4, 1, "", "func"], [183, 2, 1, "", "simplify"], [183, 2, 1, "", "subs"], [183, 2, 1, "", "to_matrix"], [183, 2, 1, "", "xreplace"]], "sympy.physics.vector": [[185, 3, 1, "", "dynamicsymbols"], [187, 0, 0, "-", "functions"], [187, 0, 0, "-", "point"]], "sympy.physics.vector.fieldfunctions": [[184, 3, 1, "", "curl"], [184, 3, 1, "", "divergence"], [184, 3, 1, "", "gradient"], [184, 3, 1, "", "is_conservative"], [184, 3, 1, "", "is_solenoidal"], [184, 3, 1, "", "scalar_potential"], [184, 3, 1, "", "scalar_potential_difference"]], "sympy.physics.vector.frame": [[183, 1, 1, "", "CoordinateSym"], [183, 1, 1, "", "ReferenceFrame"]], "sympy.physics.vector.frame.ReferenceFrame": [[183, 2, 1, "", "ang_acc_in"], [183, 2, 1, "", "ang_vel_in"], [183, 2, 1, "", "dcm"], [183, 2, 1, "", "orient"], [183, 2, 1, "", "orient_axis"], [183, 2, 1, "", "orient_body_fixed"], [183, 2, 1, "", "orient_explicit"], [183, 2, 1, "", "orient_quaternion"], [183, 2, 1, "", "orient_space_fixed"], [183, 2, 1, "", "orientnew"], [183, 2, 1, "", "partial_velocity"], [183, 2, 1, "", "set_ang_acc"], [183, 2, 1, "", "set_ang_vel"], [183, 2, 1, "", "variable_map"], [183, 4, 1, "", "x"], [183, 4, 1, "", "y"], [183, 4, 1, "", "z"]], "sympy.physics.vector.functions": [[185, 3, 1, "", "cross"], [185, 3, 1, "", "dot"], [185, 3, 1, "", "express"], [187, 3, 1, "", "get_motion_params"], [187, 3, 1, "", "kinematic_equations"], [185, 3, 1, "", "outer"], [187, 3, 1, "", "partial_velocity"], [185, 3, 1, "", "time_derivative"]], "sympy.physics.vector.point": [[187, 1, 1, "", "Point"]], "sympy.physics.vector.point.Point": [[187, 2, 1, "", "a1pt_theory"], [187, 2, 1, "", "a2pt_theory"], [187, 2, 1, "", "acc"], [187, 2, 1, "", "locatenew"], [187, 2, 1, "", "partial_velocity"], [187, 2, 1, "", "pos_from"], [187, 2, 1, "", "set_acc"], [187, 2, 1, "", "set_pos"], [187, 2, 1, "", "set_vel"], [187, 2, 1, "", "v1pt_theory"], [187, 2, 1, "", "v2pt_theory"], [187, 2, 1, "", "vel"]], "sympy.physics.vector.printing": [[188, 3, 1, "", "init_vprinting"], [188, 3, 1, "", "vlatex"], [188, 3, 1, "", "vpprint"], [188, 3, 1, "", "vprint"]], "sympy.physics.vector.vector": [[183, 1, 1, "", "Vector"]], "sympy.physics.vector.vector.Vector": [[183, 2, 1, "", "angle_between"], [183, 2, 1, "", "applyfunc"], [183, 2, 1, "", "cross"], [183, 2, 1, "", "diff"], [183, 2, 1, "", "doit"], [183, 2, 1, "", "dot"], [183, 2, 1, "", "dt"], [183, 2, 1, "", "express"], [183, 2, 1, "", "free_dynamicsymbols"], [183, 2, 1, "", "free_symbols"], [183, 4, 1, "", "func"], [183, 2, 1, "", "magnitude"], [183, 2, 1, "", "normalize"], [183, 2, 1, "", "outer"], [183, 2, 1, "", "separate"], [183, 2, 1, "", "simplify"], [183, 2, 1, "", "subs"], [183, 2, 1, "", "to_matrix"], [183, 2, 1, "", "xreplace"]], "sympy.physics.wigner": [[193, 3, 1, "", "clebsch_gordan"], [193, 3, 1, "", "dot_rot_grad_Ynm"], [193, 3, 1, "", "gaunt"], [193, 3, 1, "", "racah"], [193, 3, 1, "", "real_gaunt"], [193, 3, 1, "", "wigner_3j"], [193, 3, 1, "", "wigner_6j"], [193, 3, 1, "", "wigner_9j"], [193, 3, 1, "", "wigner_d"], [193, 3, 1, "", "wigner_d_small"]], "sympy.plotting": [[194, 0, 0, "-", "plot"], [194, 0, 0, "-", "pygletplot"]], "sympy.plotting.plot": [[194, 1, 1, "", "BaseBackend"], [194, 1, 1, "", "BaseSeries"], [194, 1, 1, "", "Line2DBaseSeries"], [194, 1, 1, "", "Line3DBaseSeries"], [194, 1, 1, "", "LineOver1DRangeSeries"], [194, 1, 1, "", "MatplotlibBackend"], [194, 1, 1, "", "Parametric2DLineSeries"], [194, 1, 1, "", "Parametric3DLineSeries"], [194, 1, 1, "", "ParametricSurfaceSeries"], [194, 1, 1, "", "Plot"], [194, 1, 1, "", "PlotGrid"], [194, 1, 1, "", "SurfaceBaseSeries"], [194, 1, 1, "", "SurfaceOver2DRangeSeries"], [194, 1, 1, "", "TextBackend"], [194, 3, 1, "", "plot"], [194, 3, 1, "", "plot3d"], [194, 3, 1, "", "plot3d_parametric_line"], [194, 3, 1, "", "plot3d_parametric_surface"], [194, 3, 1, "", "plot_parametric"]], "sympy.plotting.plot.Line2DBaseSeries": [[194, 2, 1, "", "get_data"]], "sympy.plotting.plot.LineOver1DRangeSeries": [[194, 2, 1, "", "get_points"]], "sympy.plotting.plot.MatplotlibBackend": [[194, 2, 1, "", "get_segments"], [194, 2, 1, "", "process_series"]], "sympy.plotting.plot.Parametric2DLineSeries": [[194, 2, 1, "", "get_points"]], "sympy.plotting.plot.Plot": [[194, 2, 1, "", "append"], [194, 2, 1, "", "extend"]], "sympy.plotting.plot_implicit": [[194, 1, 1, "", "ImplicitSeries"], [194, 3, 1, "", "plot_implicit"]], "sympy.plotting.textplot": [[194, 3, 1, "", "textplot"]], "sympy.polys.agca.extensions": [[195, 1, 1, "", "ExtensionElement"], [195, 1, 1, "", "MonogenicFiniteExtension"]], "sympy.polys.agca.extensions.ExtensionElement": [[195, 2, 1, "", "inverse"]], "sympy.polys.agca.extensions.MonogenicFiniteExtension": [[195, 5, 1, "", "dtype"]], "sympy.polys.agca.homomorphisms": [[195, 1, 1, "", "ModuleHomomorphism"], [195, 3, 1, "", "homomorphism"]], "sympy.polys.agca.homomorphisms.ModuleHomomorphism": [[195, 2, 1, "", "image"], [195, 2, 1, "", "is_injective"], [195, 2, 1, "", "is_isomorphism"], [195, 2, 1, "", "is_surjective"], [195, 2, 1, "", "is_zero"], [195, 2, 1, "", "kernel"], [195, 2, 1, "", "quotient_codomain"], [195, 2, 1, "", "quotient_domain"], [195, 2, 1, "", "restrict_codomain"], [195, 2, 1, "", "restrict_domain"]], "sympy.polys.agca.ideals": [[195, 1, 1, "", "Ideal"]], "sympy.polys.agca.ideals.Ideal": [[195, 2, 1, "", "contains"], [195, 2, 1, "", "depth"], [195, 2, 1, "", "height"], [195, 2, 1, "", "intersect"], [195, 2, 1, "", "is_maximal"], [195, 2, 1, "", "is_primary"], [195, 2, 1, "", "is_prime"], [195, 2, 1, "", "is_principal"], [195, 2, 1, "", "is_radical"], [195, 2, 1, "", "is_whole_ring"], [195, 2, 1, "", "is_zero"], [195, 2, 1, "", "product"], [195, 2, 1, "", "quotient"], [195, 2, 1, "", "radical"], [195, 2, 1, "", "reduce_element"], [195, 2, 1, "", "saturate"], [195, 2, 1, "", "subset"], [195, 2, 1, "", "union"]], "sympy.polys.agca.modules": [[195, 1, 1, "", "FreeModule"], [195, 1, 1, "", "FreeModuleElement"], [195, 1, 1, "", "Module"], [195, 1, 1, "", "QuotientModule"], [195, 1, 1, "", "QuotientModuleElement"], [195, 1, 1, "", "SubModule"], [195, 1, 1, "", "SubQuotientModule"]], "sympy.polys.agca.modules.FreeModule": [[195, 2, 1, "", "basis"], [195, 2, 1, "", "convert"], [195, 5, 1, "", "dtype"], [195, 2, 1, "", "identity_hom"], [195, 2, 1, "", "is_submodule"], [195, 2, 1, "", "is_zero"], [195, 2, 1, "", "multiply_ideal"], [195, 2, 1, "", "quotient_module"]], "sympy.polys.agca.modules.Module": [[195, 2, 1, "", "contains"], [195, 2, 1, "", "convert"], [195, 2, 1, "", "identity_hom"], [195, 2, 1, "", "is_submodule"], [195, 2, 1, "", "is_zero"], [195, 2, 1, "", "multiply_ideal"], [195, 2, 1, "", "quotient_module"], [195, 2, 1, "", "submodule"], [195, 2, 1, "", "subset"]], "sympy.polys.agca.modules.QuotientModule": [[195, 2, 1, "", "convert"], [195, 5, 1, "", "dtype"], [195, 2, 1, "", "identity_hom"], [195, 2, 1, "", "is_submodule"], [195, 2, 1, "", "is_zero"], [195, 2, 1, "", "quotient_hom"], [195, 2, 1, "", "submodule"]], "sympy.polys.agca.modules.QuotientModuleElement": [[195, 2, 1, "", "eq"]], "sympy.polys.agca.modules.SubModule": [[195, 2, 1, "", "convert"], [195, 2, 1, "", "identity_hom"], [195, 2, 1, "", "in_terms_of_generators"], [195, 2, 1, "", "inclusion_hom"], [195, 2, 1, "", "intersect"], [195, 2, 1, "", "is_full_module"], [195, 2, 1, "", "is_submodule"], [195, 2, 1, "", "is_zero"], [195, 2, 1, "", "module_quotient"], [195, 2, 1, "", "multiply_ideal"], [195, 2, 1, "", "quotient_module"], [195, 2, 1, "", "reduce_element"], [195, 2, 1, "", "submodule"], [195, 2, 1, "", "syzygy_module"], [195, 2, 1, "", "union"]], "sympy.polys.agca.modules.SubQuotientModule": [[195, 2, 1, "", "is_full_module"], [195, 2, 1, "", "quotient_hom"]], "sympy.polys.appellseqs": [[204, 3, 1, "", "andre_poly"], [204, 3, 1, "", "bernoulli_c_poly"], [204, 3, 1, "", "bernoulli_poly"], [204, 3, 1, "", "euler_poly"], [204, 3, 1, "", "genocchi_poly"]], "sympy.polys.constructor": [[204, 3, 1, "", "construct_domain"]], "sympy.polys.densearith": [[201, 3, 1, "", "dmp_abs"], [201, 3, 1, "", "dmp_add"], [201, 3, 1, "", "dmp_add_ground"], [201, 3, 1, "", "dmp_add_mul"], [201, 3, 1, "", "dmp_add_term"], [201, 3, 1, "", "dmp_div"], [201, 3, 1, "", "dmp_expand"], [201, 3, 1, "", "dmp_exquo"], [201, 3, 1, "", "dmp_exquo_ground"], [201, 3, 1, "", "dmp_ff_div"], [201, 3, 1, "", "dmp_l1_norm"], [201, 3, 1, "", "dmp_max_norm"], [201, 3, 1, "", "dmp_mul"], [201, 3, 1, "", "dmp_mul_ground"], [201, 3, 1, "", "dmp_mul_term"], [201, 3, 1, "", "dmp_neg"], [201, 3, 1, "", "dmp_pdiv"], [201, 3, 1, "", "dmp_pexquo"], [201, 3, 1, "", "dmp_pow"], [201, 3, 1, "", "dmp_pquo"], [201, 3, 1, "", "dmp_prem"], [201, 3, 1, "", "dmp_quo"], [201, 3, 1, "", "dmp_quo_ground"], [201, 3, 1, "", "dmp_rem"], [201, 3, 1, "", "dmp_rr_div"], [201, 3, 1, "", "dmp_sqr"], [201, 3, 1, "", "dmp_sub"], [201, 3, 1, "", "dmp_sub_ground"], [201, 3, 1, "", "dmp_sub_mul"], [201, 3, 1, "", "dmp_sub_term"], [201, 3, 1, "", "dup_lshift"], [201, 3, 1, "", "dup_rshift"]], "sympy.polys.densebasic": [[201, 3, 1, "", "dmp_LC"], [201, 3, 1, "", "dmp_TC"], [201, 3, 1, "", "dmp_apply_pairs"], [201, 3, 1, "", "dmp_convert"], [201, 3, 1, "", "dmp_copy"], [201, 3, 1, "", "dmp_deflate"], [201, 3, 1, "", "dmp_degree"], [201, 3, 1, "", "dmp_degree_in"], [201, 3, 1, "", "dmp_degree_list"], [201, 3, 1, "", "dmp_eject"], [201, 3, 1, "", "dmp_exclude"], [201, 3, 1, "", "dmp_from_dict"], [201, 3, 1, "", "dmp_from_sympy"], [201, 3, 1, "", "dmp_ground"], [201, 3, 1, "", "dmp_ground_LC"], [201, 3, 1, "", "dmp_ground_TC"], [201, 3, 1, "", "dmp_ground_nth"], [201, 3, 1, "", "dmp_ground_p"], [201, 3, 1, "", "dmp_grounds"], [201, 3, 1, "", "dmp_include"], [201, 3, 1, "", "dmp_inflate"], [201, 3, 1, "", "dmp_inject"], [201, 3, 1, "", "dmp_list_terms"], [201, 3, 1, "", "dmp_multi_deflate"], [201, 3, 1, "", "dmp_negative_p"], [201, 3, 1, "", "dmp_nest"], [201, 3, 1, "", "dmp_normal"], [201, 3, 1, "", "dmp_nth"], [201, 3, 1, "", "dmp_one"], [201, 3, 1, "", "dmp_one_p"], [201, 3, 1, "", "dmp_permute"], [201, 3, 1, "", "dmp_positive_p"], [201, 3, 1, "", "dmp_raise"], [201, 3, 1, "", "dmp_slice"], [201, 3, 1, "", "dmp_strip"], [201, 3, 1, "", "dmp_swap"], [201, 3, 1, "", "dmp_terms_gcd"], [201, 3, 1, "", "dmp_to_dict"], [201, 3, 1, "", "dmp_to_tuple"], [201, 3, 1, "", "dmp_true_LT"], [201, 3, 1, "", "dmp_validate"], [201, 3, 1, "", "dmp_zero"], [201, 3, 1, "", "dmp_zero_p"], [201, 3, 1, "", "dmp_zeros"], [201, 3, 1, "", "dup_random"], [201, 3, 1, "", "dup_reverse"]], "sympy.polys.densetools": [[201, 3, 1, "", "dmp_clear_denoms"], [201, 3, 1, "", "dmp_compose"], [201, 3, 1, "", "dmp_diff"], [201, 3, 1, "", "dmp_diff_eval_in"], [201, 3, 1, "", "dmp_diff_in"], [201, 3, 1, "", "dmp_eval"], [201, 3, 1, "", "dmp_eval_in"], [201, 3, 1, "", "dmp_eval_tail"], [201, 3, 1, "", "dmp_ground_content"], [201, 3, 1, "", "dmp_ground_extract"], [201, 3, 1, "", "dmp_ground_monic"], [201, 3, 1, "", "dmp_ground_primitive"], [201, 3, 1, "", "dmp_ground_trunc"], [201, 3, 1, "", "dmp_integrate"], [201, 3, 1, "", "dmp_integrate_in"], [201, 3, 1, "", "dmp_lift"], [201, 3, 1, "", "dmp_revert"], [201, 3, 1, "", "dmp_trunc"], [201, 3, 1, "", "dup_content"], [201, 3, 1, "", "dup_decompose"], [201, 3, 1, "", "dup_extract"], [201, 3, 1, "", "dup_mirror"], [201, 3, 1, "", "dup_monic"], [201, 3, 1, "", "dup_primitive"], [201, 3, 1, "", "dup_real_imag"], [201, 3, 1, "", "dup_scale"], [201, 3, 1, "", "dup_shift"], [201, 3, 1, "", "dup_sign_variations"], [201, 3, 1, "", "dup_transform"]], "sympy.polys.dispersion": [[204, 3, 1, "", "dispersion"], [204, 3, 1, "", "dispersionset"]], "sympy.polys.distributedmodules": [[201, 3, 1, "", "sdm_LC"], [201, 3, 1, "", "sdm_LM"], [201, 3, 1, "", "sdm_LT"], [201, 3, 1, "", "sdm_add"], [201, 3, 1, "", "sdm_deg"], [201, 3, 1, "", "sdm_ecart"], [201, 3, 1, "", "sdm_from_dict"], [201, 3, 1, "", "sdm_from_vector"], [201, 3, 1, "", "sdm_groebner"], [201, 3, 1, "", "sdm_monomial_deg"], [201, 3, 1, "", "sdm_monomial_divides"], [201, 3, 1, "", "sdm_monomial_mul"], [201, 3, 1, "", "sdm_mul_term"], [201, 3, 1, "", "sdm_nf_mora"], [201, 3, 1, "", "sdm_spoly"], [201, 3, 1, "", "sdm_to_dict"], [201, 3, 1, "", "sdm_to_vector"], [201, 3, 1, "", "sdm_zero"]], "sympy.polys.domains": [[199, 1, 1, "", "AlgebraicField"], [199, 1, 1, "", "ComplexField"], [199, 1, 1, "", "ExpressionDomain"], [199, 1, 1, "", "FiniteField"], [199, 1, 1, "", "FractionField"], [199, 1, 1, "", "GMPYFiniteField"], [199, 1, 1, "", "GMPYIntegerRing"], [199, 1, 1, "", "GMPYRationalField"], [199, 1, 1, "", "IntegerRing"], [199, 1, 1, "", "PolynomialRing"], [199, 1, 1, "", "PythonFiniteField"], [199, 1, 1, "", "PythonIntegerRing"], [199, 1, 1, "", "PythonRationalField"], [199, 1, 1, "", "RationalField"], [199, 1, 1, "", "RealField"]], "sympy.polys.domains.AlgebraicField": [[199, 2, 1, "", "algebraic_field"], [199, 2, 1, "", "denom"], [199, 2, 1, "", "discriminant"], [199, 5, 1, "", "dtype"], [199, 5, 1, "", "ext"], [199, 2, 1, "", "from_AlgebraicField"], [199, 2, 1, "", "from_GaussianIntegerRing"], [199, 2, 1, "", "from_GaussianRationalField"], [199, 2, 1, "", "from_QQ"], [199, 2, 1, "", "from_QQ_gmpy"], [199, 2, 1, "", "from_QQ_python"], [199, 2, 1, "", "from_RealField"], [199, 2, 1, "", "from_ZZ"], [199, 2, 1, "", "from_ZZ_gmpy"], [199, 2, 1, "", "from_ZZ_python"], [199, 2, 1, "", "from_sympy"], [199, 2, 1, "", "get_ring"], [199, 2, 1, "", "integral_basis"], [199, 2, 1, "", "is_negative"], [199, 2, 1, "", "is_nonnegative"], [199, 2, 1, "", "is_nonpositive"], [199, 2, 1, "", "is_positive"], [199, 2, 1, "", "maximal_order"], [199, 5, 1, "", "mod"], [199, 2, 1, "", "numer"], [199, 5, 1, "", "orig_ext"], [199, 2, 1, "", "primes_above"], [199, 2, 1, "", "to_alg_num"], [199, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ComplexField": [[199, 2, 1, "", "almosteq"], [199, 2, 1, "", "from_sympy"], [199, 2, 1, "", "gcd"], [199, 2, 1, "", "get_exact"], [199, 2, 1, "", "get_ring"], [199, 2, 1, "", "is_negative"], [199, 2, 1, "", "is_nonnegative"], [199, 2, 1, "", "is_nonpositive"], [199, 2, 1, "", "is_positive"], [199, 2, 1, "", "lcm"], [199, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ExpressionDomain": [[199, 1, 1, "", "Expression"], [199, 2, 1, "", "denom"], [199, 5, 1, "", "dtype"], [199, 2, 1, "", "from_ExpressionDomain"], [199, 2, 1, "", "from_FractionField"], [199, 2, 1, "", "from_GaussianIntegerRing"], [199, 2, 1, "", "from_GaussianRationalField"], [199, 2, 1, "", "from_PolynomialRing"], [199, 2, 1, "", "from_QQ"], [199, 2, 1, "", "from_QQ_gmpy"], [199, 2, 1, "", "from_QQ_python"], [199, 2, 1, "", "from_RealField"], [199, 2, 1, "", "from_ZZ"], [199, 2, 1, "", "from_ZZ_gmpy"], [199, 2, 1, "", "from_ZZ_python"], [199, 2, 1, "", "from_sympy"], [199, 2, 1, "", "get_field"], [199, 2, 1, "", "get_ring"], [199, 2, 1, "", "is_negative"], [199, 2, 1, "", "is_nonnegative"], [199, 2, 1, "", "is_nonpositive"], [199, 2, 1, "", "is_positive"], [199, 2, 1, "", "numer"], [199, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FiniteField": [[199, 2, 1, "", "characteristic"], [199, 2, 1, "", "from_FF"], [199, 2, 1, "", "from_FF_gmpy"], [199, 2, 1, "", "from_FF_python"], [199, 2, 1, "", "from_QQ"], [199, 2, 1, "", "from_QQ_gmpy"], [199, 2, 1, "", "from_QQ_python"], [199, 2, 1, "", "from_RealField"], [199, 2, 1, "", "from_ZZ"], [199, 2, 1, "", "from_ZZ_gmpy"], [199, 2, 1, "", "from_ZZ_python"], [199, 2, 1, "", "from_sympy"], [199, 2, 1, "", "get_field"], [199, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FractionField": [[199, 2, 1, "", "denom"], [199, 2, 1, "", "factorial"], [199, 2, 1, "", "from_AlgebraicField"], [199, 2, 1, "", "from_ComplexField"], [199, 2, 1, "", "from_FractionField"], [199, 2, 1, "", "from_GaussianIntegerRing"], [199, 2, 1, "", "from_GaussianRationalField"], [199, 2, 1, "", "from_PolynomialRing"], [199, 2, 1, "", "from_QQ"], [199, 2, 1, "", "from_QQ_gmpy"], [199, 2, 1, "", "from_QQ_python"], [199, 2, 1, "", "from_RealField"], [199, 2, 1, "", "from_ZZ"], [199, 2, 1, "", "from_ZZ_gmpy"], [199, 2, 1, "", "from_ZZ_python"], [199, 2, 1, "", "from_sympy"], [199, 2, 1, "", "get_ring"], [199, 2, 1, "", "is_negative"], [199, 2, 1, "", "is_nonnegative"], [199, 2, 1, "", "is_nonpositive"], [199, 2, 1, "", "is_positive"], [199, 2, 1, "", "numer"], [199, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYIntegerRing": [[199, 2, 1, "", "factorial"], [199, 2, 1, "", "from_FF_gmpy"], [199, 2, 1, "", "from_FF_python"], [199, 2, 1, "", "from_QQ"], [199, 2, 1, "", "from_QQ_gmpy"], [199, 2, 1, "", "from_QQ_python"], [199, 2, 1, "", "from_RealField"], [199, 2, 1, "", "from_ZZ_gmpy"], [199, 2, 1, "", "from_ZZ_python"], [199, 2, 1, "", "from_sympy"], [199, 2, 1, "", "gcd"], [199, 2, 1, "", "gcdex"], [199, 2, 1, "", "lcm"], [199, 2, 1, "", "sqrt"], [199, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYRationalField": [[199, 2, 1, "", "denom"], [199, 2, 1, "", "div"], [199, 2, 1, "", "exquo"], [199, 2, 1, "", "factorial"], [199, 2, 1, "", "from_GaussianRationalField"], [199, 2, 1, "", "from_QQ_gmpy"], [199, 2, 1, "", "from_QQ_python"], [199, 2, 1, "", "from_RealField"], [199, 2, 1, "", "from_ZZ_gmpy"], [199, 2, 1, "", "from_ZZ_python"], [199, 2, 1, "", "from_sympy"], [199, 2, 1, "", "get_ring"], [199, 2, 1, "", "numer"], [199, 2, 1, "", "quo"], [199, 2, 1, "", "rem"], [199, 2, 1, "", "to_sympy"]], "sympy.polys.domains.IntegerRing": [[199, 2, 1, "", "algebraic_field"], [199, 2, 1, "", "factorial"], [199, 2, 1, "", "from_AlgebraicField"], [199, 2, 1, "", "from_FF"], [199, 2, 1, "", "from_FF_gmpy"], [199, 2, 1, "", "from_FF_python"], [199, 2, 1, "", "from_QQ"], [199, 2, 1, "", "from_QQ_gmpy"], [199, 2, 1, "", "from_QQ_python"], [199, 2, 1, "", "from_RealField"], [199, 2, 1, "", "from_ZZ"], [199, 2, 1, "", "from_ZZ_gmpy"], [199, 2, 1, "", "from_ZZ_python"], [199, 2, 1, "", "from_sympy"], [199, 2, 1, "", "gcd"], [199, 2, 1, "", "gcdex"], [199, 2, 1, "", "get_field"], [199, 2, 1, "", "lcm"], [199, 2, 1, "", "log"], [199, 2, 1, "", "sqrt"], [199, 2, 1, "", "to_sympy"]], "sympy.polys.domains.PolynomialRing": [[199, 2, 1, "", "factorial"], [199, 2, 1, "", "from_AlgebraicField"], [199, 2, 1, "", "from_ComplexField"], [199, 2, 1, "", "from_FractionField"], [199, 2, 1, "", "from_GaussianIntegerRing"], [199, 2, 1, "", "from_GaussianRationalField"], [199, 2, 1, "", "from_GlobalPolynomialRing"], [199, 2, 1, "", "from_PolynomialRing"], [199, 2, 1, "", "from_QQ"], [199, 2, 1, "", "from_QQ_gmpy"], [199, 2, 1, "", "from_QQ_python"], [199, 2, 1, "", "from_RealField"], [199, 2, 1, "", "from_ZZ"], [199, 2, 1, "", "from_ZZ_gmpy"], [199, 2, 1, "", "from_ZZ_python"], [199, 2, 1, "", "from_sympy"], [199, 2, 1, "", "gcd"], [199, 2, 1, "", "gcdex"], [199, 2, 1, "", "get_field"], [199, 2, 1, "", "is_negative"], [199, 2, 1, "", "is_nonnegative"], [199, 2, 1, "", "is_nonpositive"], [199, 2, 1, "", "is_positive"], [199, 2, 1, "", "is_unit"], [199, 2, 1, "", "lcm"], [199, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RationalField": [[199, 2, 1, "", "algebraic_field"], [199, 2, 1, "", "denom"], [199, 2, 1, "", "div"], [199, 2, 1, "", "exquo"], [199, 2, 1, "", "from_AlgebraicField"], [199, 2, 1, "", "from_GaussianRationalField"], [199, 2, 1, "", "from_QQ"], [199, 2, 1, "", "from_QQ_gmpy"], [199, 2, 1, "", "from_QQ_python"], [199, 2, 1, "", "from_RealField"], [199, 2, 1, "", "from_ZZ"], [199, 2, 1, "", "from_ZZ_gmpy"], [199, 2, 1, "", "from_ZZ_python"], [199, 2, 1, "", "from_sympy"], [199, 2, 1, "", "get_ring"], [199, 2, 1, "", "numer"], [199, 2, 1, "", "quo"], [199, 2, 1, "", "rem"], [199, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RealField": [[199, 2, 1, "", "almosteq"], [199, 2, 1, "", "from_sympy"], [199, 2, 1, "", "gcd"], [199, 2, 1, "", "get_exact"], [199, 2, 1, "", "get_ring"], [199, 2, 1, "", "lcm"], [199, 2, 1, "", "to_rational"], [199, 2, 1, "", "to_sympy"]], "sympy.polys.domains.compositedomain": [[199, 1, 1, "", "CompositeDomain"]], "sympy.polys.domains.compositedomain.CompositeDomain": [[199, 2, 1, "", "drop"], [199, 2, 1, "", "inject"]], "sympy.polys.domains.domain": [[199, 1, 1, "", "Domain"]], "sympy.polys.domains.domain.Domain": [[199, 2, 1, "", "abs"], [199, 2, 1, "", "add"], [199, 2, 1, "", "alg_field_from_poly"], [199, 2, 1, "", "algebraic_field"], [199, 2, 1, "", "almosteq"], [199, 2, 1, "", "characteristic"], [199, 2, 1, "", "cofactors"], [199, 2, 1, "", "convert"], [199, 2, 1, "", "convert_from"], [199, 2, 1, "", "cyclotomic_field"], [199, 2, 1, "", "denom"], [199, 2, 1, "", "div"], [199, 2, 1, "", "drop"], [199, 5, 1, "", "dtype"], [199, 2, 1, "", "evalf"], [199, 2, 1, "", "exquo"], [199, 2, 1, "", "frac_field"], [199, 2, 1, "", "from_AlgebraicField"], [199, 2, 1, "", "from_ComplexField"], [199, 2, 1, "", "from_ExpressionDomain"], [199, 2, 1, "", "from_ExpressionRawDomain"], [199, 2, 1, "", "from_FF"], [199, 2, 1, "", "from_FF_gmpy"], [199, 2, 1, "", "from_FF_python"], [199, 2, 1, "", "from_FractionField"], [199, 2, 1, "", "from_GlobalPolynomialRing"], [199, 2, 1, "", "from_MonogenicFiniteExtension"], [199, 2, 1, "", "from_PolynomialRing"], [199, 2, 1, "", "from_QQ_gmpy"], [199, 2, 1, "", "from_QQ_python"], [199, 2, 1, "", "from_RealField"], [199, 2, 1, "", "from_ZZ_gmpy"], [199, 2, 1, "", "from_ZZ_python"], [199, 2, 1, "", "from_sympy"], [199, 2, 1, "", "gcd"], [199, 2, 1, "", "gcdex"], [199, 2, 1, "", "get_exact"], [199, 2, 1, "", "get_field"], [199, 2, 1, "", "get_ring"], [199, 2, 1, "", "half_gcdex"], [199, 5, 1, "", "has_assoc_Field"], [199, 5, 1, "", "has_assoc_Ring"], [199, 2, 1, "", "inject"], [199, 2, 1, "", "invert"], [199, 5, 1, "", "is_Field"], [199, 5, 1, "", "is_PID"], [199, 5, 1, "", "is_Ring"], [199, 2, 1, "", "is_negative"], [199, 2, 1, "", "is_nonnegative"], [199, 2, 1, "", "is_nonpositive"], [199, 2, 1, "", "is_one"], [199, 2, 1, "", "is_positive"], [199, 2, 1, "", "is_zero"], [199, 2, 1, "", "lcm"], [199, 2, 1, "", "log"], [199, 2, 1, "", "map"], [199, 2, 1, "", "mul"], [199, 2, 1, "", "n"], [199, 2, 1, "", "neg"], [199, 2, 1, "", "numer"], [199, 2, 1, "", "of_type"], [199, 2, 1, "", "old_frac_field"], [199, 2, 1, "", "old_poly_ring"], [199, 5, 1, "", "one"], [199, 2, 1, "", "poly_ring"], [199, 2, 1, "", "pos"], [199, 2, 1, "", "pow"], [199, 2, 1, "", "quo"], [199, 2, 1, "", "rem"], [199, 2, 1, "", "revert"], [199, 2, 1, "", "sqrt"], [199, 2, 1, "", "sub"], [199, 2, 1, "", "to_sympy"], [199, 4, 1, "", "tp"], [199, 2, 1, "", "unify"], [199, 5, 1, "", "zero"]], "sympy.polys.domains.domainelement": [[199, 1, 1, "", "DomainElement"]], "sympy.polys.domains.domainelement.DomainElement": [[199, 2, 1, "", "parent"]], "sympy.polys.domains.expressiondomain.ExpressionDomain": [[199, 1, 1, "", "Expression"]], "sympy.polys.domains.field": [[199, 1, 1, "", "Field"]], "sympy.polys.domains.field.Field": [[199, 2, 1, "", "div"], [199, 2, 1, "", "exquo"], [199, 2, 1, "", "gcd"], [199, 2, 1, "", "get_field"], [199, 2, 1, "", "get_ring"], [199, 2, 1, "", "is_unit"], [199, 2, 1, "", "lcm"], [199, 2, 1, "", "quo"], [199, 2, 1, "", "rem"], [199, 2, 1, "", "revert"]], "sympy.polys.domains.gaussiandomains": [[199, 1, 1, "", "GaussianDomain"], [199, 1, 1, "", "GaussianElement"], [199, 1, 1, "", "GaussianInteger"], [199, 1, 1, "", "GaussianIntegerRing"], [199, 1, 1, "", "GaussianRational"], [199, 1, 1, "", "GaussianRationalField"]], "sympy.polys.domains.gaussiandomains.GaussianDomain": [[199, 2, 1, "", "from_AlgebraicField"], [199, 2, 1, "", "from_QQ"], [199, 2, 1, "", "from_QQ_gmpy"], [199, 2, 1, "", "from_QQ_python"], [199, 2, 1, "", "from_ZZ"], [199, 2, 1, "", "from_ZZ_gmpy"], [199, 2, 1, "", "from_ZZ_python"], [199, 2, 1, "", "from_sympy"], [199, 2, 1, "", "inject"], [199, 2, 1, "", "is_negative"], [199, 2, 1, "", "is_nonnegative"], [199, 2, 1, "", "is_nonpositive"], [199, 2, 1, "", "is_positive"], [199, 2, 1, "", "to_sympy"]], "sympy.polys.domains.gaussiandomains.GaussianElement": [[199, 2, 1, "", "new"], [199, 2, 1, "", "parent"], [199, 2, 1, "", "quadrant"]], "sympy.polys.domains.gaussiandomains.GaussianIntegerRing": [[199, 5, 1, "", "dtype"], [199, 2, 1, "", "from_GaussianIntegerRing"], [199, 2, 1, "", "from_GaussianRationalField"], [199, 2, 1, "", "gcd"], [199, 2, 1, "", "get_field"], [199, 2, 1, "", "get_ring"], [199, 2, 1, "", "lcm"], [199, 2, 1, "", "normalize"]], "sympy.polys.domains.gaussiandomains.GaussianRationalField": [[199, 2, 1, "", "as_AlgebraicField"], [199, 2, 1, "", "denom"], [199, 5, 1, "", "dtype"], [199, 2, 1, "", "from_GaussianIntegerRing"], [199, 2, 1, "", "from_GaussianRationalField"], [199, 2, 1, "", "get_field"], [199, 2, 1, "", "get_ring"], [199, 2, 1, "", "numer"]], "sympy.polys.domains.mpelements": [[199, 1, 1, "", "ComplexElement"], [199, 1, 1, "", "RealElement"]], "sympy.polys.domains.quotientring": [[199, 1, 1, "", "QuotientRing"]], "sympy.polys.domains.ring": [[199, 1, 1, "", "Ring"]], "sympy.polys.domains.ring.Ring": [[199, 2, 1, "", "denom"], [199, 2, 1, "", "div"], [199, 2, 1, "", "exquo"], [199, 2, 1, "", "free_module"], [199, 2, 1, "", "get_ring"], [199, 2, 1, "", "ideal"], [199, 2, 1, "", "invert"], [199, 2, 1, "", "numer"], [199, 2, 1, "", "quo"], [199, 2, 1, "", "quotient_ring"], [199, 2, 1, "", "rem"], [199, 2, 1, "", "revert"]], "sympy.polys.domains.simpledomain": [[199, 1, 1, "", "SimpleDomain"]], "sympy.polys.domains.simpledomain.SimpleDomain": [[199, 2, 1, "", "inject"]], "sympy.polys.euclidtools": [[201, 3, 1, "", "dmp_cancel"], [201, 3, 1, "", "dmp_content"], [201, 3, 1, "", "dmp_discriminant"], [201, 3, 1, "", "dmp_euclidean_prs"], [201, 3, 1, "", "dmp_ff_prs_gcd"], [201, 3, 1, "", "dmp_gcd"], [201, 3, 1, "", "dmp_gcdex"], [201, 3, 1, "", "dmp_half_gcdex"], [201, 3, 1, "", "dmp_inner_gcd"], [201, 3, 1, "", "dmp_inner_subresultants"], [201, 3, 1, "", "dmp_invert"], [201, 3, 1, "", "dmp_lcm"], [201, 3, 1, "", "dmp_primitive"], [201, 3, 1, "", "dmp_primitive_prs"], [201, 3, 1, "", "dmp_prs_resultant"], [201, 3, 1, "", "dmp_qq_collins_resultant"], [201, 3, 1, "", "dmp_qq_heu_gcd"], [201, 3, 1, "", "dmp_resultant"], [201, 3, 1, "", "dmp_rr_prs_gcd"], [201, 3, 1, "", "dmp_subresultants"], [201, 3, 1, "", "dmp_zz_collins_resultant"], [201, 3, 1, "", "dmp_zz_heu_gcd"], [201, 3, 1, "", "dmp_zz_modular_resultant"]], "sympy.polys.factortools": [[201, 3, 1, "", "dmp_ext_factor"], [201, 3, 1, "", "dmp_factor_list"], [201, 3, 1, "", "dmp_factor_list_include"], [201, 3, 1, "", "dmp_irreducible_p"], [201, 3, 1, "", "dmp_trial_division"], [201, 3, 1, "", "dmp_zz_diophantine"], [201, 3, 1, "", "dmp_zz_factor"], [201, 3, 1, "", "dmp_zz_mignotte_bound"], [201, 3, 1, "", "dmp_zz_wang"], [201, 3, 1, "", "dmp_zz_wang_hensel_lifting"], [201, 3, 1, "", "dmp_zz_wang_lead_coeffs"], [201, 3, 1, "", "dmp_zz_wang_non_divisors"], [201, 3, 1, "", "dmp_zz_wang_test_points"], [201, 3, 1, "", "dup_cyclotomic_p"], [201, 3, 1, "", "dup_gf_factor"], [201, 3, 1, "", "dup_zz_cyclotomic_factor"], [201, 3, 1, "", "dup_zz_cyclotomic_poly"], [201, 3, 1, "", "dup_zz_factor"], [201, 3, 1, "", "dup_zz_factor_sqf"], [201, 3, 1, "", "dup_zz_hensel_lift"], [201, 3, 1, "", "dup_zz_hensel_step"], [201, 3, 1, "", "dup_zz_irreducible_p"], [201, 3, 1, "", "dup_zz_zassenhaus"]], "sympy.polys.fglmtools": [[201, 3, 1, "", "matrix_fglm"]], "sympy.polys.fields": [[199, 1, 1, "", "FracElement"], [199, 1, 1, "", "FracField"], [199, 3, 1, "", "field"], [199, 3, 1, "", "sfield"], [199, 3, 1, "", "vfield"], [199, 3, 1, "", "xfield"]], "sympy.polys.fields.FracElement": [[199, 2, 1, "", "diff"]], "sympy.polys.galoistools": [[201, 3, 1, "", "gf_LC"], [201, 3, 1, "", "gf_Qbasis"], [201, 3, 1, "", "gf_Qmatrix"], [201, 3, 1, "", "gf_TC"], [201, 3, 1, "", "gf_add"], [201, 3, 1, "", "gf_add_ground"], [201, 3, 1, "", "gf_add_mul"], [201, 3, 1, "", "gf_berlekamp"], [201, 3, 1, "", "gf_cofactors"], [201, 3, 1, "", "gf_compose"], [201, 3, 1, "", "gf_compose_mod"], [201, 3, 1, "", "gf_crt"], [201, 3, 1, "", "gf_crt1"], [201, 3, 1, "", "gf_crt2"], [201, 3, 1, "", "gf_csolve"], [201, 3, 1, "", "gf_degree"], [201, 3, 1, "", "gf_diff"], [201, 3, 1, "", "gf_div"], [201, 3, 1, "", "gf_eval"], [201, 3, 1, "", "gf_expand"], [201, 3, 1, "", "gf_exquo"], [201, 3, 1, "", "gf_factor"], [201, 3, 1, "", "gf_factor_sqf"], [201, 3, 1, "", "gf_from_dict"], [201, 3, 1, "", "gf_from_int_poly"], [201, 3, 1, "", "gf_gcd"], [201, 3, 1, "", "gf_gcdex"], [201, 3, 1, "", "gf_int"], [201, 3, 1, "", "gf_irreducible"], [201, 3, 1, "", "gf_irreducible_p"], [201, 3, 1, "", "gf_lcm"], [201, 3, 1, "", "gf_lshift"], [201, 3, 1, "", "gf_monic"], [201, 3, 1, "", "gf_mul"], [201, 3, 1, "", "gf_mul_ground"], [201, 3, 1, "", "gf_multi_eval"], [201, 3, 1, "", "gf_neg"], [201, 3, 1, "", "gf_normal"], [201, 3, 1, "", "gf_pow"], [201, 3, 1, "", "gf_pow_mod"], [201, 3, 1, "", "gf_quo"], [201, 3, 1, "", "gf_quo_ground"], [201, 3, 1, "", "gf_random"], [201, 3, 1, "", "gf_rem"], [201, 3, 1, "", "gf_rshift"], [201, 3, 1, "", "gf_shoup"], [201, 3, 1, "", "gf_sqf_list"], [201, 3, 1, "", "gf_sqf_p"], [201, 3, 1, "", "gf_sqf_part"], [201, 3, 1, "", "gf_sqr"], [201, 3, 1, "", "gf_strip"], [201, 3, 1, "", "gf_sub"], [201, 3, 1, "", "gf_sub_ground"], [201, 3, 1, "", "gf_sub_mul"], [201, 3, 1, "", "gf_to_dict"], [201, 3, 1, "", "gf_to_int_poly"], [201, 3, 1, "", "gf_trace_map"], [201, 3, 1, "", "gf_trunc"], [201, 3, 1, "", "gf_value"], [201, 3, 1, "", "gf_zassenhaus"]], "sympy.polys.groebnertools": [[201, 3, 1, "", "groebner"], [201, 3, 1, "", "is_groebner"], [201, 3, 1, "", "is_minimal"], [201, 3, 1, "", "is_reduced"], [201, 3, 1, "", "red_groebner"], [201, 3, 1, "", "spoly"]], "sympy.polys.matrices.ddm": [[197, 1, 1, "", "DDM"]], "sympy.polys.matrices.ddm.DDM": [[197, 2, 1, "", "add"], [197, 2, 1, "", "charpoly"], [197, 2, 1, "", "det"], [197, 2, 1, "", "hstack"], [197, 2, 1, "", "inv"], [197, 2, 1, "", "is_lower"], [197, 2, 1, "", "is_upper"], [197, 2, 1, "", "is_zero_matrix"], [197, 2, 1, "", "lu"], [197, 2, 1, "", "lu_solve"], [197, 2, 1, "", "matmul"], [197, 2, 1, "", "neg"], [197, 2, 1, "", "rref"], [197, 2, 1, "", "scc"], [197, 2, 1, "", "sub"], [197, 2, 1, "", "vstack"]], "sympy.polys.matrices.domainmatrix": [[197, 1, 1, "", "DomainMatrix"]], "sympy.polys.matrices.domainmatrix.DomainMatrix": [[197, 2, 1, "", "add"], [197, 2, 1, "", "charpoly"], [197, 2, 1, "", "columnspace"], [197, 2, 1, "", "convert_to"], [197, 2, 1, "", "det"], [197, 2, 1, "", "diag"], [197, 2, 1, "", "eye"], [197, 2, 1, "", "from_Matrix"], [197, 2, 1, "", "from_dict_sympy"], [197, 2, 1, "", "from_list"], [197, 2, 1, "", "from_list_sympy"], [197, 2, 1, "", "from_rep"], [197, 2, 1, "", "hstack"], [197, 2, 1, "", "inv"], [197, 4, 1, "", "is_lower"], [197, 4, 1, "", "is_upper"], [197, 2, 1, "", "lu"], [197, 2, 1, "", "lu_solve"], [197, 2, 1, "", "matmul"], [197, 2, 1, "", "mul"], [197, 2, 1, "", "neg"], [197, 2, 1, "", "nullspace"], [197, 2, 1, "", "ones"], [197, 2, 1, "", "pow"], [197, 2, 1, "", "rowspace"], [197, 2, 1, "", "rref"], [197, 2, 1, "", "scc"], [197, 2, 1, "", "sub"], [197, 2, 1, "", "to_Matrix"], [197, 2, 1, "", "to_dense"], [197, 2, 1, "", "to_field"], [197, 2, 1, "", "to_sparse"], [197, 2, 1, "", "transpose"], [197, 2, 1, "", "unify"], [197, 2, 1, "", "vstack"], [197, 2, 1, "", "zeros"]], "sympy.polys.matrices.normalforms": [[197, 3, 1, "", "hermite_normal_form"], [197, 3, 1, "", "smith_normal_form"]], "sympy.polys.matrices.sdm": [[197, 1, 1, "", "SDM"]], "sympy.polys.matrices.sdm.SDM": [[197, 2, 1, "", "add"], [197, 2, 1, "", "charpoly"], [197, 2, 1, "", "convert_to"], [197, 2, 1, "", "copy"], [197, 2, 1, "", "det"], [197, 2, 1, "", "eye"], [197, 2, 1, "", "from_ddm"], [197, 2, 1, "", "from_list"], [197, 2, 1, "", "hstack"], [197, 2, 1, "", "inv"], [197, 2, 1, "", "is_lower"], [197, 2, 1, "", "is_upper"], [197, 2, 1, "", "is_zero_matrix"], [197, 2, 1, "", "lu"], [197, 2, 1, "", "lu_solve"], [197, 2, 1, "", "matmul"], [197, 2, 1, "", "mul"], [197, 2, 1, "", "neg"], [197, 2, 1, "", "new"], [197, 2, 1, "", "nullspace"], [197, 2, 1, "", "rref"], [197, 2, 1, "", "scc"], [197, 2, 1, "", "sub"], [197, 2, 1, "", "to_ddm"], [197, 2, 1, "", "to_list"], [197, 2, 1, "", "transpose"], [197, 2, 1, "", "vstack"], [197, 2, 1, "", "zeros"]], "sympy.polys.modulargcd": [[201, 3, 1, "", "_modgcd_multivariate_p"], [201, 3, 1, "", "func_field_modgcd"], [201, 3, 1, "", "modgcd_bivariate"], [201, 3, 1, "", "modgcd_multivariate"], [201, 3, 1, "", "modgcd_univariate"]], "sympy.polys.monomials": [[204, 1, 1, "", "Monomial"], [204, 3, 1, "", "itermonomials"], [204, 3, 1, "", "monomial_count"]], "sympy.polys.monomials.Monomial": [[204, 2, 1, "", "as_expr"], [204, 2, 1, "", "gcd"], [204, 2, 1, "", "lcm"]], "sympy.polys.numberfields.basis": [[203, 3, 1, "", "round_two"]], "sympy.polys.numberfields.minpoly": [[203, 3, 1, "", "minimal_polynomial"], [203, 3, 1, "", "minpoly"]], "sympy.polys.numberfields": [[203, 0, 0, "-", "modules"], [203, 0, 0, "-", "subfield"]], "sympy.polys.numberfields.modules": [[203, 1, 1, "", "EndomorphismRing"], [203, 1, 1, "", "InnerEndomorphism"], [203, 1, 1, "", "Module"], [203, 1, 1, "", "ModuleElement"], [203, 1, 1, "", "ModuleEndomorphism"], [203, 1, 1, "", "ModuleHomomorphism"], [203, 1, 1, "", "PowerBasis"], [203, 1, 1, "", "PowerBasisElement"], [203, 1, 1, "", "Submodule"], [203, 3, 1, "", "find_min_poly"], [203, 3, 1, "", "make_mod_elt"]], "sympy.polys.numberfields.modules.EndomorphismRing": [[203, 2, 1, "", "__init__"], [203, 2, 1, "", "inner_endomorphism"], [203, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.InnerEndomorphism": [[203, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.Module": [[203, 2, 1, "", "__call__"], [203, 2, 1, "", "ancestors"], [203, 2, 1, "", "basis_elements"], [203, 2, 1, "", "element_from_rational"], [203, 2, 1, "", "endomorphism_ring"], [203, 2, 1, "", "is_compat_col"], [203, 2, 1, "", "mult_tab"], [203, 4, 1, "", "n"], [203, 2, 1, "", "nearest_common_ancestor"], [203, 4, 1, "", "number_field"], [203, 2, 1, "", "one"], [203, 4, 1, "", "parent"], [203, 2, 1, "", "power_basis_ancestor"], [203, 2, 1, "", "represent"], [203, 2, 1, "", "starts_with_unity"], [203, 2, 1, "", "submodule_from_gens"], [203, 2, 1, "", "submodule_from_matrix"], [203, 2, 1, "", "whole_submodule"], [203, 2, 1, "", "zero"]], "sympy.polys.numberfields.modules.ModuleElement": [[203, 4, 1, "", "QQ_col"], [203, 2, 1, "", "__add__"], [203, 2, 1, "", "__init__"], [203, 2, 1, "", "__mod__"], [203, 2, 1, "", "__mul__"], [203, 2, 1, "", "column"], [203, 2, 1, "", "equiv"], [203, 2, 1, "", "from_int_list"], [203, 2, 1, "", "is_compat"], [203, 4, 1, "", "n"], [203, 2, 1, "", "over_power_basis"], [203, 2, 1, "", "reduced"], [203, 2, 1, "", "reduced_mod_p"], [203, 2, 1, "", "to_ancestor"], [203, 2, 1, "", "to_parent"], [203, 2, 1, "", "unify"]], "sympy.polys.numberfields.modules.ModuleEndomorphism": [[203, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.ModuleHomomorphism": [[203, 2, 1, "", "__init__"], [203, 2, 1, "", "kernel"], [203, 2, 1, "", "matrix"]], "sympy.polys.numberfields.modules.PowerBasis": [[203, 2, 1, "", "__init__"], [203, 2, 1, "", "element_from_ANP"], [203, 2, 1, "", "element_from_alg_num"], [203, 2, 1, "", "element_from_poly"], [203, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.PowerBasisElement": [[203, 4, 1, "", "T"], [203, 2, 1, "", "as_expr"], [203, 4, 1, "", "generator"], [203, 4, 1, "", "is_rational"], [203, 2, 1, "", "norm"], [203, 2, 1, "", "numerator"], [203, 2, 1, "", "poly"], [203, 2, 1, "", "to_ANP"], [203, 2, 1, "", "to_alg_num"]], "sympy.polys.numberfields.modules.Submodule": [[203, 4, 1, "", "QQ_matrix"], [203, 2, 1, "", "__init__"], [203, 2, 1, "", "add"], [203, 2, 1, "", "basis_element_pullbacks"], [203, 2, 1, "", "discard_before"], [203, 2, 1, "", "mul"], [203, 2, 1, "", "reduce_element"], [203, 2, 1, "", "reduced"], [203, 2, 1, "", "represent"]], "sympy.polys.numberfields.primes": [[203, 1, 1, "", "PrimeIdeal"], [203, 3, 1, "", "prime_decomp"], [203, 3, 1, "", "prime_valuation"]], "sympy.polys.numberfields.primes.PrimeIdeal": [[203, 2, 1, "", "__add__"], [203, 2, 1, "", "__init__"], [203, 2, 1, "", "__mul__"], [203, 2, 1, "", "as_submodule"], [203, 4, 1, "", "is_inert"], [203, 2, 1, "", "reduce_ANP"], [203, 2, 1, "", "reduce_alg_num"], [203, 2, 1, "", "reduce_element"], [203, 2, 1, "", "repr"], [203, 2, 1, "", "test_factor"], [203, 2, 1, "", "valuation"]], "sympy.polys.numberfields.subfield": [[203, 3, 1, "", "field_isomorphism"], [203, 3, 1, "", "primitive_element"], [203, 3, 1, "", "to_number_field"]], "sympy.polys.numberfields.utilities": [[203, 1, 1, "", "AlgIntPowers"], [203, 3, 1, "", "coeff_search"], [203, 3, 1, "", "extract_fundamental_discriminant"], [203, 3, 1, "", "get_num_denom"], [203, 3, 1, "", "is_int"], [203, 3, 1, "", "is_rat"], [203, 3, 1, "", "isolate"], [203, 3, 1, "", "supplement_a_subspace"]], "sympy.polys.numberfields.utilities.AlgIntPowers": [[203, 2, 1, "", "__init__"]], "sympy.polys.orderings": [[204, 1, 1, "", "GradedLexOrder"], [204, 1, 1, "", "LexOrder"], [204, 1, 1, "", "MonomialOrder"], [204, 1, 1, "", "ReversedGradedLexOrder"]], "sympy.polys.orthopolys": [[204, 3, 1, "", "chebyshevt_poly"], [204, 3, 1, "", "chebyshevu_poly"], [204, 3, 1, "", "gegenbauer_poly"], [204, 3, 1, "", "hermite_poly"], [204, 3, 1, "", "hermite_prob_poly"], [204, 3, 1, "", "jacobi_poly"], [204, 3, 1, "", "laguerre_poly"], [204, 3, 1, "", "legendre_poly"], [204, 3, 1, "", "spherical_bessel_fn"]], "sympy.polys.partfrac": [[204, 3, 1, "", "apart"], [204, 3, 1, "", "apart_list"], [204, 3, 1, "", "assemble_partfrac_list"]], "sympy.polys.polyclasses": [[199, 1, 1, "", "ANP"], [199, 1, 1, "", "DMF"], [199, 1, 1, "", "DMP"]], "sympy.polys.polyclasses.ANP": [[199, 2, 1, "", "LC"], [199, 2, 1, "", "TC"], [199, 4, 1, "", "is_ground"], [199, 4, 1, "", "is_one"], [199, 4, 1, "", "is_zero"], [199, 2, 1, "", "pow"], [199, 2, 1, "", "to_dict"], [199, 2, 1, "", "to_list"], [199, 2, 1, "", "to_sympy_dict"], [199, 2, 1, "", "to_sympy_list"], [199, 2, 1, "", "to_tuple"], [199, 2, 1, "", "unify"]], "sympy.polys.polyclasses.DMF": [[199, 2, 1, "", "add"], [199, 2, 1, "", "cancel"], [199, 2, 1, "", "denom"], [199, 2, 1, "", "exquo"], [199, 2, 1, "", "frac_unify"], [199, 2, 1, "", "half_per"], [199, 2, 1, "", "invert"], [199, 4, 1, "", "is_one"], [199, 4, 1, "", "is_zero"], [199, 2, 1, "", "mul"], [199, 2, 1, "", "neg"], [199, 2, 1, "", "numer"], [199, 2, 1, "", "per"], [199, 2, 1, "", "poly_unify"], [199, 2, 1, "", "pow"], [199, 2, 1, "", "quo"], [199, 2, 1, "", "sub"]], "sympy.polys.polyclasses.DMP": [[199, 2, 1, "", "LC"], [199, 2, 1, "", "TC"], [199, 2, 1, "", "abs"], [199, 2, 1, "", "add"], [199, 2, 1, "", "add_ground"], [199, 2, 1, "", "all_coeffs"], [199, 2, 1, "", "all_monoms"], [199, 2, 1, "", "all_terms"], [199, 2, 1, "", "cancel"], [199, 2, 1, "", "cauchy_lower_bound"], [199, 2, 1, "", "cauchy_upper_bound"], [199, 2, 1, "", "clear_denoms"], [199, 2, 1, "", "coeffs"], [199, 2, 1, "", "cofactors"], [199, 2, 1, "", "compose"], [199, 2, 1, "", "content"], [199, 2, 1, "", "convert"], [199, 2, 1, "", "count_complex_roots"], [199, 2, 1, "", "count_real_roots"], [199, 2, 1, "", "decompose"], [199, 2, 1, "", "deflate"], [199, 2, 1, "", "degree"], [199, 2, 1, "", "degree_list"], [199, 2, 1, "", "diff"], [199, 2, 1, "", "discriminant"], [199, 2, 1, "", "div"], [199, 2, 1, "", "eject"], [199, 2, 1, "", "eval"], [199, 2, 1, "", "exclude"], [199, 2, 1, "", "exquo"], [199, 2, 1, "", "exquo_ground"], [199, 2, 1, "", "factor_list"], [199, 2, 1, "", "factor_list_include"], [199, 2, 1, "", "from_dict"], [199, 2, 1, "", "from_list"], [199, 2, 1, "", "from_sympy_list"], [199, 2, 1, "", "gcd"], [199, 2, 1, "", "gcdex"], [199, 2, 1, "", "gff_list"], [199, 2, 1, "", "half_gcdex"], [199, 2, 1, "", "homogeneous_order"], [199, 2, 1, "", "homogenize"], [199, 2, 1, "", "inject"], [199, 2, 1, "", "integrate"], [199, 2, 1, "", "intervals"], [199, 2, 1, "", "invert"], [199, 4, 1, "", "is_cyclotomic"], [199, 4, 1, "", "is_ground"], [199, 4, 1, "", "is_homogeneous"], [199, 4, 1, "", "is_irreducible"], [199, 4, 1, "", "is_linear"], [199, 4, 1, "", "is_monic"], [199, 4, 1, "", "is_monomial"], [199, 4, 1, "", "is_one"], [199, 4, 1, "", "is_primitive"], [199, 4, 1, "", "is_quadratic"], [199, 4, 1, "", "is_sqf"], [199, 4, 1, "", "is_zero"], [199, 2, 1, "", "l1_norm"], [199, 2, 1, "", "l2_norm_squared"], [199, 2, 1, "", "lcm"], [199, 2, 1, "", "lift"], [199, 2, 1, "", "max_norm"], [199, 2, 1, "", "mignotte_sep_bound_squared"], [199, 2, 1, "", "monic"], [199, 2, 1, "", "monoms"], [199, 2, 1, "", "mul"], [199, 2, 1, "", "mul_ground"], [199, 2, 1, "", "neg"], [199, 2, 1, "", "norm"], [199, 2, 1, "", "nth"], [199, 2, 1, "", "pdiv"], [199, 2, 1, "", "per"], [199, 2, 1, "", "permute"], [199, 2, 1, "", "pexquo"], [199, 2, 1, "", "pow"], [199, 2, 1, "", "pquo"], [199, 2, 1, "", "prem"], [199, 2, 1, "", "primitive"], [199, 2, 1, "", "quo"], [199, 2, 1, "", "quo_ground"], [199, 2, 1, "", "refine_root"], [199, 2, 1, "", "rem"], [199, 2, 1, "", "resultant"], [199, 2, 1, "", "revert"], [199, 2, 1, "", "shift"], [199, 2, 1, "", "slice"], [199, 2, 1, "", "sqf_list"], [199, 2, 1, "", "sqf_list_include"], [199, 2, 1, "", "sqf_norm"], [199, 2, 1, "", "sqf_part"], [199, 2, 1, "", "sqr"], [199, 2, 1, "", "sturm"], [199, 2, 1, "", "sub"], [199, 2, 1, "", "sub_ground"], [199, 2, 1, "", "subresultants"], [199, 2, 1, "", "terms"], [199, 2, 1, "", "terms_gcd"], [199, 2, 1, "", "to_dict"], [199, 2, 1, "", "to_exact"], [199, 2, 1, "", "to_field"], [199, 2, 1, "", "to_list"], [199, 2, 1, "", "to_ring"], [199, 2, 1, "", "to_sympy_dict"], [199, 2, 1, "", "to_sympy_list"], [199, 2, 1, "", "to_tuple"], [199, 2, 1, "", "total_degree"], [199, 2, 1, "", "transform"], [199, 2, 1, "", "trunc"], [199, 2, 1, "", "unify"]], "sympy.polys": [[201, 0, 0, "-", "polyconfig"], [201, 0, 0, "-", "polyoptions"], [206, 0, 0, "-", "solvers"]], "sympy.polys.polyconfig": [[201, 3, 1, "", "setup"]], "sympy.polys.polyerrors": [[201, 1, 1, "", "BasePolynomialError"], [201, 1, 1, "", "CoercionFailed"], [201, 1, 1, "", "ComputationFailed"], [201, 1, 1, "", "DomainError"], [201, 1, 1, "", "EvaluationFailed"], [201, 1, 1, "", "ExactQuotientFailed"], [201, 1, 1, "", "ExtraneousFactors"], [201, 1, 1, "", "FlagError"], [201, 1, 1, "", "GeneratorsError"], [201, 1, 1, "", "GeneratorsNeeded"], [201, 1, 1, "", "HeuristicGCDFailed"], [201, 1, 1, "", "HomomorphismFailed"], [201, 1, 1, "", "IsomorphismFailed"], [201, 1, 1, "", "MultivariatePolynomialError"], [201, 1, 1, "", "NotAlgebraic"], [201, 1, 1, "", "NotInvertible"], [201, 1, 1, "", "NotReversible"], [201, 1, 1, "", "OperationNotSupported"], [201, 1, 1, "", "OptionError"], [201, 1, 1, "", "PolificationFailed"], [201, 1, 1, "", "PolynomialError"], [201, 1, 1, "", "RefinementFailed"], [201, 1, 1, "", "UnificationFailed"], [201, 1, 1, "", "UnivariatePolynomialError"]], "sympy.polys.polyfuncs": [[204, 3, 1, "", "horner"], [204, 3, 1, "", "interpolate"], [204, 3, 1, "", "symmetrize"], [204, 3, 1, "", "viete"]], "sympy.polys.polyoptions": [[201, 1, 1, "", "Options"], [201, 3, 1, "", "build_options"]], "sympy.polys.polyoptions.Options": [[201, 2, 1, "", "clone"]], "sympy.polys.polyroots": [[204, 3, 1, "", "roots"]], "sympy.polys.polytools": [[204, 1, 1, "", "GroebnerBasis"], [204, 3, 1, "", "LC"], [204, 3, 1, "", "LM"], [204, 3, 1, "", "LT"], [204, 1, 1, "", "Poly"], [204, 1, 1, "", "PurePoly"], [204, 3, 1, "", "cancel"], [204, 3, 1, "", "cofactors"], [204, 3, 1, "", "compose"], [204, 3, 1, "", "content"], [204, 3, 1, "", "count_roots"], [204, 3, 1, "", "decompose"], [204, 3, 1, "", "degree"], [204, 3, 1, "", "degree_list"], [204, 3, 1, "", "discriminant"], [204, 3, 1, "", "div"], [204, 3, 1, "", "exquo"], [204, 3, 1, "", "factor"], [204, 3, 1, "", "factor_list"], [204, 3, 1, "", "gcd"], [204, 3, 1, "", "gcd_list"], [204, 3, 1, "", "gcdex"], [204, 3, 1, "", "gff"], [204, 3, 1, "", "gff_list"], [204, 3, 1, "", "groebner"], [204, 3, 1, "", "ground_roots"], [204, 3, 1, "", "half_gcdex"], [204, 3, 1, "", "intervals"], [204, 3, 1, "", "invert"], [204, 3, 1, "", "is_zero_dimensional"], [204, 3, 1, "", "lcm"], [204, 3, 1, "", "lcm_list"], [204, 3, 1, "", "monic"], [204, 3, 1, "", "nroots"], [204, 3, 1, "", "nth_power_roots_poly"], [204, 3, 1, "", "parallel_poly_from_expr"], [204, 3, 1, "", "pdiv"], [204, 3, 1, "", "pexquo"], [204, 3, 1, "", "poly"], [204, 3, 1, "", "poly_from_expr"], [204, 3, 1, "", "pquo"], [204, 3, 1, "", "prem"], [204, 3, 1, "", "primitive"], [204, 3, 1, "", "quo"], [204, 3, 1, "", "real_roots"], [204, 3, 1, "", "reduced"], [204, 3, 1, "", "refine_root"], [204, 3, 1, "", "rem"], [204, 3, 1, "", "resultant"], [204, 3, 1, "", "sqf"], [204, 3, 1, "", "sqf_list"], [204, 3, 1, "", "sqf_norm"], [204, 3, 1, "", "sqf_part"], [204, 3, 1, "", "sturm"], [204, 3, 1, "", "subresultants"], [204, 3, 1, "", "terms_gcd"], [204, 3, 1, "", "trunc"]], "sympy.polys.polytools.GroebnerBasis": [[204, 2, 1, "", "contains"], [204, 2, 1, "", "fglm"], [204, 4, 1, "", "is_zero_dimensional"], [204, 2, 1, "", "reduce"]], "sympy.polys.polytools.Poly": [[204, 2, 1, "", "EC"], [204, 2, 1, "", "EM"], [204, 2, 1, "", "ET"], [204, 2, 1, "", "LC"], [204, 2, 1, "", "LM"], [204, 2, 1, "", "LT"], [204, 2, 1, "", "TC"], [204, 2, 1, "", "abs"], [204, 2, 1, "", "add"], [204, 2, 1, "", "add_ground"], [204, 2, 1, "", "all_coeffs"], [204, 2, 1, "", "all_monoms"], [204, 2, 1, "", "all_roots"], [204, 2, 1, "", "all_terms"], [204, 2, 1, "", "as_dict"], [204, 2, 1, "", "as_expr"], [204, 2, 1, "", "as_list"], [204, 2, 1, "", "as_poly"], [204, 2, 1, "", "cancel"], [204, 2, 1, "", "clear_denoms"], [204, 2, 1, "", "coeff_monomial"], [204, 2, 1, "", "coeffs"], [204, 2, 1, "", "cofactors"], [204, 2, 1, "", "compose"], [204, 2, 1, "", "content"], [204, 2, 1, "", "count_roots"], [204, 2, 1, "", "decompose"], [204, 2, 1, "", "deflate"], [204, 2, 1, "", "degree"], [204, 2, 1, "", "degree_list"], [204, 2, 1, "", "diff"], [204, 2, 1, "", "discriminant"], [204, 2, 1, "", "dispersion"], [204, 2, 1, "", "dispersionset"], [204, 2, 1, "", "div"], [204, 4, 1, "", "domain"], [204, 2, 1, "", "eject"], [204, 2, 1, "", "eval"], [204, 2, 1, "", "exclude"], [204, 2, 1, "", "exquo"], [204, 2, 1, "", "exquo_ground"], [204, 2, 1, "", "factor_list"], [204, 2, 1, "", "factor_list_include"], [204, 4, 1, "", "free_symbols"], [204, 4, 1, "", "free_symbols_in_domain"], [204, 2, 1, "", "from_dict"], [204, 2, 1, "", "from_expr"], [204, 2, 1, "", "from_list"], [204, 2, 1, "", "from_poly"], [204, 2, 1, "", "gcd"], [204, 2, 1, "", "gcdex"], [204, 4, 1, "", "gen"], [204, 2, 1, "", "get_domain"], [204, 2, 1, "", "get_modulus"], [204, 2, 1, "", "gff_list"], [204, 2, 1, "", "ground_roots"], [204, 2, 1, "", "half_gcdex"], [204, 2, 1, "", "has_only_gens"], [204, 2, 1, "", "homogeneous_order"], [204, 2, 1, "", "homogenize"], [204, 2, 1, "", "inject"], [204, 2, 1, "", "integrate"], [204, 2, 1, "", "intervals"], [204, 2, 1, "", "invert"], [204, 4, 1, "", "is_cyclotomic"], [204, 4, 1, "", "is_ground"], [204, 4, 1, "", "is_homogeneous"], [204, 4, 1, "", "is_irreducible"], [204, 4, 1, "", "is_linear"], [204, 4, 1, "", "is_monic"], [204, 4, 1, "", "is_monomial"], [204, 4, 1, "", "is_multivariate"], [204, 4, 1, "", "is_one"], [204, 4, 1, "", "is_primitive"], [204, 4, 1, "", "is_quadratic"], [204, 4, 1, "", "is_sqf"], [204, 4, 1, "", "is_univariate"], [204, 4, 1, "", "is_zero"], [204, 2, 1, "", "l1_norm"], [204, 2, 1, "", "lcm"], [204, 2, 1, "", "length"], [204, 2, 1, "", "lift"], [204, 2, 1, "", "ltrim"], [204, 2, 1, "", "match"], [204, 2, 1, "", "max_norm"], [204, 2, 1, "", "monic"], [204, 2, 1, "", "monoms"], [204, 2, 1, "", "mul"], [204, 2, 1, "", "mul_ground"], [204, 2, 1, "", "neg"], [204, 2, 1, "", "new"], [204, 2, 1, "", "norm"], [204, 2, 1, "", "nroots"], [204, 2, 1, "", "nth"], [204, 2, 1, "", "nth_power_roots_poly"], [204, 4, 1, "", "one"], [204, 2, 1, "", "pdiv"], [204, 2, 1, "", "per"], [204, 2, 1, "", "pexquo"], [204, 2, 1, "", "pow"], [204, 2, 1, "", "pquo"], [204, 2, 1, "", "prem"], [204, 2, 1, "", "primitive"], [204, 2, 1, "", "quo"], [204, 2, 1, "", "quo_ground"], [204, 2, 1, "", "rat_clear_denoms"], [204, 2, 1, "", "real_roots"], [204, 2, 1, "", "refine_root"], [204, 2, 1, "", "rem"], [204, 2, 1, "", "reorder"], [204, 2, 1, "", "replace"], [204, 2, 1, "", "resultant"], [204, 2, 1, "", "retract"], [204, 2, 1, "", "revert"], [204, 2, 1, "", "root"], [204, 2, 1, "", "same_root"], [204, 2, 1, "", "set_domain"], [204, 2, 1, "", "set_modulus"], [204, 2, 1, "", "shift"], [204, 2, 1, "", "slice"], [204, 2, 1, "", "sqf_list"], [204, 2, 1, "", "sqf_list_include"], [204, 2, 1, "", "sqf_norm"], [204, 2, 1, "", "sqf_part"], [204, 2, 1, "", "sqr"], [204, 2, 1, "", "sturm"], [204, 2, 1, "", "sub"], [204, 2, 1, "", "sub_ground"], [204, 2, 1, "", "subresultants"], [204, 2, 1, "", "terms"], [204, 2, 1, "", "terms_gcd"], [204, 2, 1, "", "termwise"], [204, 2, 1, "", "to_exact"], [204, 2, 1, "", "to_field"], [204, 2, 1, "", "to_ring"], [204, 2, 1, "", "total_degree"], [204, 2, 1, "", "transform"], [204, 2, 1, "", "trunc"], [204, 2, 1, "", "unify"], [204, 4, 1, "", "unit"], [204, 4, 1, "", "zero"]], "sympy.polys.polytools.PurePoly": [[204, 4, 1, "", "free_symbols"]], "sympy.polys.rationaltools": [[204, 3, 1, "", "together"]], "sympy.polys.ring_series": [[205, 3, 1, "", "_tan1"], [205, 3, 1, "", "mul_xin"], [205, 3, 1, "", "pow_xin"], [205, 3, 1, "", "rs_LambertW"], [205, 3, 1, "", "rs_asin"], [205, 3, 1, "", "rs_atan"], [205, 3, 1, "", "rs_atanh"], [205, 3, 1, "", "rs_compose_add"], [205, 3, 1, "", "rs_cos"], [205, 3, 1, "", "rs_cos_sin"], [205, 3, 1, "", "rs_cosh"], [205, 3, 1, "", "rs_cot"], [205, 3, 1, "", "rs_diff"], [205, 3, 1, "", "rs_exp"], [205, 3, 1, "", "rs_fun"], [205, 3, 1, "", "rs_hadamard_exp"], [205, 3, 1, "", "rs_integrate"], [205, 3, 1, "", "rs_is_puiseux"], [205, 3, 1, "", "rs_log"], [205, 3, 1, "", "rs_mul"], [205, 3, 1, "", "rs_newton"], [205, 3, 1, "", "rs_nth_root"], [205, 3, 1, "", "rs_pow"], [205, 3, 1, "", "rs_puiseux"], [205, 3, 1, "", "rs_puiseux2"], [205, 3, 1, "", "rs_series_from_list"], [205, 3, 1, "", "rs_series_inversion"], [205, 3, 1, "", "rs_series_reversion"], [205, 3, 1, "", "rs_sin"], [205, 3, 1, "", "rs_sinh"], [205, 3, 1, "", "rs_square"], [205, 3, 1, "", "rs_subs"], [205, 3, 1, "", "rs_tan"], [205, 3, 1, "", "rs_tanh"], [205, 3, 1, "", "rs_trunc"]], "sympy.polys.rings": [[199, 1, 1, "", "PolyElement"], [199, 1, 1, "", "PolyRing"], [199, 3, 1, "", "ring"], [199, 3, 1, "", "sring"], [199, 3, 1, "", "vring"], [199, 3, 1, "", "xring"]], "sympy.polys.rings.PolyElement": [[199, 2, 1, "", "almosteq"], [199, 2, 1, "", "cancel"], [199, 2, 1, "", "coeff"], [199, 2, 1, "", "coeffs"], [199, 2, 1, "", "const"], [199, 2, 1, "", "content"], [199, 2, 1, "", "copy"], [199, 2, 1, "", "degree"], [199, 2, 1, "", "degrees"], [199, 2, 1, "", "diff"], [199, 2, 1, "", "div"], [199, 2, 1, "", "imul_num"], [199, 2, 1, "", "itercoeffs"], [199, 2, 1, "", "itermonoms"], [199, 2, 1, "", "iterterms"], [199, 2, 1, "", "leading_expv"], [199, 2, 1, "", "leading_monom"], [199, 2, 1, "", "leading_term"], [199, 2, 1, "", "listcoeffs"], [199, 2, 1, "", "listmonoms"], [199, 2, 1, "", "listterms"], [199, 2, 1, "", "monic"], [199, 2, 1, "", "monoms"], [199, 2, 1, "", "primitive"], [199, 2, 1, "", "square"], [199, 2, 1, "", "strip_zero"], [199, 2, 1, "", "tail_degree"], [199, 2, 1, "", "tail_degrees"], [199, 2, 1, "", "terms"]], "sympy.polys.rings.PolyRing": [[199, 2, 1, "", "add"], [199, 2, 1, "", "add_gens"], [199, 2, 1, "", "compose"], [199, 2, 1, "", "drop"], [199, 2, 1, "", "drop_to_ground"], [199, 2, 1, "", "index"], [199, 2, 1, "", "monomial_basis"], [199, 2, 1, "", "mul"]], "sympy.polys.rootoftools": [[204, 1, 1, "", "ComplexRootOf"], [204, 1, 1, "", "RootOf"], [204, 1, 1, "", "RootSum"], [204, 3, 1, "", "rootof"]], "sympy.polys.rootoftools.ComplexRootOf": [[204, 2, 1, "", "_all_roots"], [204, 2, 1, "", "_complexes_index"], [204, 2, 1, "", "_complexes_sorted"], [204, 2, 1, "", "_count_roots"], [204, 2, 1, "", "_ensure_complexes_init"], [204, 2, 1, "", "_ensure_reals_init"], [204, 2, 1, "", "_eval_evalf"], [204, 2, 1, "", "_eval_is_imaginary"], [204, 2, 1, "", "_eval_is_real"], [204, 2, 1, "", "_get_complexes"], [204, 2, 1, "", "_get_complexes_sqf"], [204, 2, 1, "", "_get_interval"], [204, 2, 1, "", "_get_reals"], [204, 2, 1, "", "_get_reals_sqf"], [204, 2, 1, "", "_get_roots"], [204, 2, 1, "", "_indexed_root"], [204, 2, 1, "", "_new"], [204, 2, 1, "", "_postprocess_root"], [204, 2, 1, "", "_preprocess_roots"], [204, 2, 1, "", "_real_roots"], [204, 2, 1, "", "_reals_index"], [204, 2, 1, "", "_reals_sorted"], [204, 2, 1, "", "_refine_complexes"], [204, 2, 1, "", "_reset"], [204, 2, 1, "", "_roots_trivial"], [204, 2, 1, "", "_set_interval"], [204, 2, 1, "", "all_roots"], [204, 2, 1, "", "clear_cache"], [204, 2, 1, "", "eval_approx"], [204, 2, 1, "", "eval_rational"], [204, 2, 1, "", "real_roots"]], "sympy.polys.rootoftools.RootSum": [[204, 2, 1, "", "new"]], "sympy.polys.solvers": [[206, 3, 1, "", "_solve_lin_sys"], [206, 3, 1, "", "_solve_lin_sys_component"], [206, 3, 1, "", "eqs_to_matrix"], [206, 3, 1, "", "solve_lin_sys"], [206, 3, 1, "", "sympy_eqs_to_ring"]], "sympy.polys.specialpolys": [[204, 3, 1, "", "cyclotomic_poly"], [204, 3, 1, "", "interpolating_poly"], [204, 3, 1, "", "random_poly"], [204, 3, 1, "", "swinnerton_dyer_poly"], [204, 3, 1, "", "symmetric_poly"]], "sympy.printing": [[208, 0, 0, "-", "aesaracode"], [208, 0, 0, "-", "c"], [208, 0, 0, "-", "codeprinter"], [208, 0, 0, "-", "conventions"], [208, 0, 0, "-", "cxx"], [208, 0, 0, "-", "fortran"], [208, 0, 0, "-", "gtk"], [208, 0, 0, "-", "jscode"], [208, 0, 0, "-", "julia"], [208, 0, 0, "-", "lambdarepr"], [208, 0, 0, "-", "latex"], [208, 0, 0, "-", "maple"], [208, 0, 0, "-", "mathematica"], [208, 0, 0, "-", "mathml"], [208, 0, 0, "-", "octave"], [208, 0, 0, "-", "precedence"], [208, 0, 0, "-", "pretty"], [208, 0, 0, "-", "preview"], [208, 0, 0, "-", "printer"], [208, 0, 0, "-", "pycode"], [208, 0, 0, "-", "python"], [208, 0, 0, "-", "rcode"], [208, 0, 0, "-", "repr"], [208, 0, 0, "-", "rust"], [208, 0, 0, "-", "smtlib"], [208, 0, 0, "-", "str"], [208, 0, 0, "-", "tree"]], "sympy.printing.aesaracode": [[208, 1, 1, "", "AesaraPrinter"], [208, 3, 1, "", "aesara_code"], [208, 3, 1, "", "aesara_function"], [208, 3, 1, "", "dim_handling"]], "sympy.printing.aesaracode.AesaraPrinter": [[208, 2, 1, "", "doprint"], [208, 5, 1, "", "printmethod"]], "sympy.printing.c": [[208, 1, 1, "", "C89CodePrinter"], [208, 1, 1, "", "C99CodePrinter"], [208, 3, 1, "", "ccode"], [208, 6, 1, "", "known_functions_C89"], [208, 6, 1, "", "known_functions_C99"], [208, 3, 1, "", "print_ccode"]], "sympy.printing.c.C89CodePrinter": [[208, 2, 1, "", "indent_code"], [208, 5, 1, "", "printmethod"]], "sympy.printing.c.C99CodePrinter": [[208, 5, 1, "", "printmethod"]], "sympy.printing.codeprinter": [[208, 7, 1, "", "AssignmentError"], [208, 1, 1, "", "CodePrinter"], [208, 3, 1, "", "cxxcode"]], "sympy.printing.codeprinter.CodePrinter": [[208, 2, 1, "", "doprint"], [208, 5, 1, "", "printmethod"]], "sympy.printing.conventions": [[208, 3, 1, "", "split_super_sub"]], "sympy.printing.cxx": [[208, 1, 1, "", "CXX11CodePrinter"], [208, 1, 1, "", "CXX98CodePrinter"]], "sympy.printing.cxx.CXX11CodePrinter": [[208, 5, 1, "", "printmethod"]], "sympy.printing.cxx.CXX98CodePrinter": [[208, 5, 1, "", "printmethod"]], "sympy.printing.dot": [[208, 3, 1, "", "dotprint"]], "sympy.printing.fortran": [[208, 1, 1, "", "FCodePrinter"], [208, 3, 1, "", "fcode"], [208, 3, 1, "", "print_fcode"]], "sympy.printing.fortran.FCodePrinter": [[208, 2, 1, "", "indent_code"], [208, 5, 1, "", "printmethod"]], "sympy.printing.gtk": [[208, 3, 1, "", "print_gtk"]], "sympy.printing.jscode": [[208, 1, 1, "", "JavascriptCodePrinter"], [208, 3, 1, "", "jscode"], [208, 6, 1, "", "known_functions"]], "sympy.printing.jscode.JavascriptCodePrinter": [[208, 2, 1, "", "indent_code"], [208, 5, 1, "", "printmethod"]], "sympy.printing.julia": [[208, 1, 1, "", "JuliaCodePrinter"], [208, 3, 1, "", "julia_code"], [208, 6, 1, "", "known_fcns_src1"], [208, 6, 1, "", "known_fcns_src2"]], "sympy.printing.julia.JuliaCodePrinter": [[208, 2, 1, "", "indent_code"], [208, 5, 1, "", "printmethod"]], "sympy.printing.lambdarepr": [[208, 1, 1, "", "LambdaPrinter"], [208, 3, 1, "", "lambdarepr"]], "sympy.printing.lambdarepr.LambdaPrinter": [[208, 5, 1, "", "printmethod"]], "sympy.printing.latex": [[208, 1, 1, "", "LatexPrinter"], [208, 6, 1, "", "accepted_latex_functions"], [208, 3, 1, "", "latex"], [208, 3, 1, "", "print_latex"]], "sympy.printing.latex.LatexPrinter": [[208, 2, 1, "", "parenthesize_super"], [208, 5, 1, "", "printmethod"]], "sympy.printing.maple": [[208, 1, 1, "", "MapleCodePrinter"], [208, 3, 1, "", "maple_code"], [208, 3, 1, "", "print_maple_code"]], "sympy.printing.maple.MapleCodePrinter": [[208, 5, 1, "", "printmethod"]], "sympy.printing.mathematica": [[208, 1, 1, "", "MCodePrinter"], [208, 6, 1, "", "known_functions"], [208, 3, 1, "", "mathematica_code"]], "sympy.printing.mathematica.MCodePrinter": [[208, 5, 1, "", "printmethod"]], "sympy.printing.mathml": [[208, 1, 1, "", "MathMLContentPrinter"], [208, 1, 1, "", "MathMLPresentationPrinter"], [208, 1, 1, "", "MathMLPrinterBase"], [208, 3, 1, "", "mathml"], [208, 3, 1, "", "print_mathml"]], "sympy.printing.mathml.MathMLContentPrinter": [[208, 2, 1, "", "mathml_tag"], [208, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPresentationPrinter": [[208, 2, 1, "", "mathml_tag"], [208, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPrinterBase": [[208, 2, 1, "", "doprint"]], "sympy.printing.octave": [[208, 1, 1, "", "OctaveCodePrinter"], [208, 6, 1, "", "known_fcns_src1"], [208, 6, 1, "", "known_fcns_src2"], [208, 3, 1, "", "octave_code"]], "sympy.printing.octave.OctaveCodePrinter": [[208, 2, 1, "", "indent_code"], [208, 5, 1, "", "printmethod"]], "sympy.printing.precedence": [[208, 6, 1, "", "PRECEDENCE"], [208, 6, 1, "", "PRECEDENCE_FUNCTIONS"], [208, 6, 1, "", "PRECEDENCE_VALUES"], [208, 3, 1, "", "precedence"]], "sympy.printing.pretty": [[208, 0, 0, "-", "pretty"], [208, 0, 0, "-", "pretty_symbology"], [208, 0, 0, "-", "stringpict"]], "sympy.printing.pretty.pretty": [[208, 1, 1, "", "PrettyPrinter"], [208, 3, 1, "", "pretty"], [208, 3, 1, "", "pretty_print"]], "sympy.printing.pretty.pretty.PrettyPrinter": [[208, 5, 1, "", "printmethod"]], "sympy.printing.pretty.pretty_symbology": [[208, 3, 1, "", "G"], [208, 3, 1, "", "U"], [208, 3, 1, "", "VF"], [208, 3, 1, "", "annotated"], [208, 6, 1, "", "atoms_table"], [208, 6, 1, "", "digit_2txt"], [208, 6, 1, "", "frac"], [208, 3, 1, "", "g"], [208, 6, 1, "", "greek_letters"], [208, 3, 1, "", "hobj"], [208, 3, 1, "", "pretty_atom"], [208, 3, 1, "", "pretty_symbol"], [208, 3, 1, "", "pretty_try_use_unicode"], [208, 3, 1, "", "pretty_use_unicode"], [208, 6, 1, "", "root"], [208, 6, 1, "", "sub"], [208, 6, 1, "", "sup"], [208, 6, 1, "", "symb_2txt"], [208, 3, 1, "", "vobj"], [208, 3, 1, "", "xobj"], [208, 3, 1, "", "xstr"], [208, 3, 1, "", "xsym"]], "sympy.printing.pretty.stringpict": [[208, 1, 1, "", "prettyForm"], [208, 1, 1, "", "stringPict"]], "sympy.printing.pretty.stringpict.prettyForm": [[208, 2, 1, "", "apply"]], "sympy.printing.pretty.stringpict.stringPict": [[208, 2, 1, "", "above"], [208, 2, 1, "", "below"], [208, 2, 1, "", "height"], [208, 2, 1, "", "left"], [208, 2, 1, "", "leftslash"], [208, 2, 1, "", "next"], [208, 2, 1, "", "parens"], [208, 2, 1, "", "render"], [208, 2, 1, "", "right"], [208, 2, 1, "", "root"], [208, 2, 1, "", "stack"], [208, 2, 1, "", "terminal_width"], [208, 2, 1, "", "width"]], "sympy.printing.preview": [[208, 3, 1, "", "preview"]], "sympy.printing.printer": [[208, 1, 1, "", "Printer"]], "sympy.printing.printer.Printer": [[208, 2, 1, "", "_print"], [208, 2, 1, "", "doprint"], [208, 5, 1, "", "printmethod"], [208, 2, 1, "", "set_global_settings"]], "sympy.printing.pycode": [[208, 1, 1, "", "MpmathPrinter"], [208, 3, 1, "", "pycode"]], "sympy.printing.rcode": [[208, 1, 1, "", "RCodePrinter"], [208, 6, 1, "", "known_functions"], [208, 3, 1, "", "print_rcode"], [208, 3, 1, "", "rcode"]], "sympy.printing.rcode.RCodePrinter": [[208, 2, 1, "", "indent_code"], [208, 5, 1, "", "printmethod"]], "sympy.printing.repr": [[208, 1, 1, "", "ReprPrinter"], [208, 3, 1, "", "srepr"]], "sympy.printing.repr.ReprPrinter": [[208, 2, 1, "", "emptyPrinter"], [208, 5, 1, "", "printmethod"], [208, 2, 1, "", "reprify"]], "sympy.printing.rust": [[208, 1, 1, "", "RustCodePrinter"], [208, 6, 1, "", "known_functions"], [208, 3, 1, "", "rust_code"]], "sympy.printing.rust.RustCodePrinter": [[208, 2, 1, "", "indent_code"], [208, 5, 1, "", "printmethod"]], "sympy.printing.smtlib": [[208, 1, 1, "", "SMTLibPrinter"], [208, 3, 1, "", "smtlib_code"]], "sympy.printing.smtlib.SMTLibPrinter": [[208, 5, 1, "", "_default_settings"], [208, 5, 1, "", "printmethod"]], "sympy.printing.str": [[208, 1, 1, "", "StrPrinter"], [208, 3, 1, "", "sstr"], [208, 3, 1, "", "sstrrepr"]], "sympy.printing.str.StrPrinter": [[208, 5, 1, "", "printmethod"]], "sympy.printing.tree": [[208, 3, 1, "", "pprint_nodes"], [208, 3, 1, "", "print_node"], [208, 3, 1, "", "print_tree"], [208, 3, 1, "", "tree"]], "sympy.series.acceleration": [[215, 3, 1, "", "richardson"], [215, 3, 1, "", "shanks"]], "sympy.series.formal": [[210, 1, 1, "", "FiniteFormalPowerSeries"], [210, 1, 1, "", "FormalPowerSeries"], [210, 1, 1, "", "FormalPowerSeriesCompose"], [210, 1, 1, "", "FormalPowerSeriesInverse"], [210, 1, 1, "", "FormalPowerSeriesProduct"], [210, 3, 1, "", "compute_fps"], [210, 3, 1, "", "exp_re"], [210, 3, 1, "", "fps"], [210, 3, 1, "", "hyper_algorithm"], [210, 3, 1, "", "hyper_re"], [210, 3, 1, "", "rational_algorithm"], [210, 3, 1, "", "rational_independent"], [210, 3, 1, "", "rsolve_hypergeometric"], [210, 3, 1, "", "simpleDE"], [210, 3, 1, "", "solve_de"]], "sympy.series.formal.FormalPowerSeries": [[210, 2, 1, "", "coeff_bell"], [210, 2, 1, "", "compose"], [210, 4, 1, "", "infinite"], [210, 2, 1, "", "integrate"], [210, 2, 1, "", "inverse"], [210, 2, 1, "", "polynomial"], [210, 2, 1, "", "product"], [210, 2, 1, "", "truncate"]], "sympy.series.formal.FormalPowerSeriesCompose": [[210, 4, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesInverse": [[210, 4, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesProduct": [[210, 4, 1, "", "function"]], "sympy.series.fourier": [[211, 1, 1, "", "FourierSeries"], [211, 3, 1, "", "fourier_series"]], "sympy.series.fourier.FourierSeries": [[211, 2, 1, "", "scale"], [211, 2, 1, "", "scalex"], [211, 2, 1, "", "shift"], [211, 2, 1, "", "shiftx"], [211, 2, 1, "", "sigma_approximation"], [211, 2, 1, "", "truncate"]], "sympy.series.gruntz": [[215, 1, 1, "", "SubsSet"], [215, 3, 1, "", "build_expression_tree"], [215, 3, 1, "", "calculate_series"], [215, 3, 1, "", "compare"], [215, 3, 1, "", "gruntz"], [215, 3, 1, "", "limitinf"], [215, 3, 1, "", "mrv"], [215, 3, 1, "", "mrv_leadterm"], [215, 3, 1, "", "mrv_max1"], [215, 3, 1, "", "mrv_max3"], [215, 3, 1, "", "rewrite"], [215, 3, 1, "", "sign"]], "sympy.series.gruntz.SubsSet": [[215, 2, 1, "", "copy"], [215, 2, 1, "", "do_subs"], [215, 2, 1, "", "meets"], [215, 2, 1, "", "union"]], "sympy.series.limits": [[215, 1, 1, "", "Limit"], [215, 3, 1, "", "limit"]], "sympy.series.limits.Limit": [[215, 2, 1, "", "doit"]], "sympy.series.limitseq": [[213, 3, 1, "", "difference_delta"], [213, 3, 1, "", "dominant"], [213, 3, 1, "", "limit_seq"]], "sympy.series.order": [[215, 1, 1, "", "Order"]], "sympy.series.order.Order": [[215, 2, 1, "", "contains"]], "sympy.series.residues": [[215, 3, 1, "", "residue"]], "sympy.series.sequences": [[214, 1, 1, "", "EmptySequence"], [214, 1, 1, "", "RecursiveSeq"], [214, 1, 1, "", "SeqAdd"], [214, 1, 1, "", "SeqBase"], [214, 1, 1, "", "SeqFormula"], [214, 1, 1, "", "SeqMul"], [214, 1, 1, "", "SeqPer"], [214, 3, 1, "", "sequence"]], "sympy.series.sequences.EmptySequence": [[214, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.RecursiveSeq": [[214, 4, 1, "", "initial"], [214, 4, 1, "", "interval"], [214, 4, 1, "", "n"], [214, 4, 1, "", "recurrence"], [214, 4, 1, "", "start"], [214, 4, 1, "", "stop"], [214, 4, 1, "", "y"], [214, 4, 1, "", "yn"]], "sympy.series.sequences.SeqAdd": [[214, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqBase": [[214, 2, 1, "", "coeff"], [214, 2, 1, "", "coeff_mul"], [214, 2, 1, "", "find_linear_recurrence"], [214, 4, 1, "", "free_symbols"], [214, 4, 1, "", "gen"], [214, 4, 1, "", "interval"], [214, 4, 1, "", "length"], [214, 4, 1, "", "start"], [214, 4, 1, "", "stop"], [214, 4, 1, "", "variables"]], "sympy.series.sequences.SeqFormula": [[214, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.SeqMul": [[214, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqPer": [[214, 2, 1, "", "coeff_mul"]], "sympy.series.series": [[215, 3, 1, "", "series"]], "sympy.sets": [[216, 0, 0, "-", "conditionset"], [216, 0, 0, "-", "fancysets"], [216, 0, 0, "-", "powerset"], [216, 0, 0, "-", "sets"]], "sympy.sets.conditionset": [[216, 1, 1, "", "ConditionSet"], [216, 1, 1, "", "Contains"], [216, 1, 1, "", "SetKind"]], "sympy.sets.fancysets": [[216, 1, 1, "", "CartesianComplexRegion"], [216, 1, 1, "", "ComplexRegion"], [216, 1, 1, "", "Complexes"], [216, 1, 1, "", "ImageSet"], [216, 1, 1, "", "Integers"], [216, 1, 1, "", "Naturals"], [216, 1, 1, "", "Naturals0"], [216, 1, 1, "", "PolarComplexRegion"], [216, 1, 1, "", "Range"], [216, 1, 1, "", "Rationals"], [216, 1, 1, "", "Reals"], [216, 3, 1, "", "normalize_theta_set"]], "sympy.sets.fancysets.ComplexRegion": [[216, 4, 1, "", "a_interval"], [216, 4, 1, "", "b_interval"], [216, 2, 1, "", "from_real"], [216, 4, 1, "", "psets"], [216, 4, 1, "", "sets"]], "sympy.sets.fancysets.Range": [[216, 2, 1, "", "as_relational"], [216, 4, 1, "", "reversed"]], "sympy.sets.powerset": [[216, 1, 1, "", "PowerSet"]], "sympy.sets.sets": [[216, 1, 1, "", "Complement"], [216, 1, 1, "", "DisjointUnion"], [216, 1, 1, "", "EmptySet"], [216, 1, 1, "", "FiniteSet"], [216, 1, 1, "", "Intersection"], [216, 1, 1, "", "Interval"], [216, 1, 1, "", "ProductSet"], [216, 1, 1, "", "Set"], [216, 1, 1, "", "SymmetricDifference"], [216, 1, 1, "", "Union"], [216, 1, 1, "", "UniversalSet"], [216, 3, 1, "", "imageset"]], "sympy.sets.sets.Complement": [[216, 2, 1, "", "as_relational"], [216, 2, 1, "", "reduce"]], "sympy.sets.sets.FiniteSet": [[216, 2, 1, "", "as_relational"]], "sympy.sets.sets.Intersection": [[216, 2, 1, "", "as_relational"]], "sympy.sets.sets.Interval": [[216, 2, 1, "", "Lopen"], [216, 2, 1, "", "Ropen"], [216, 2, 1, "", "as_relational"], [216, 4, 1, "", "end"], [216, 4, 1, "", "is_left_unbounded"], [216, 4, 1, "", "is_right_unbounded"], [216, 4, 1, "", "left_open"], [216, 2, 1, "", "open"], [216, 4, 1, "", "right_open"], [216, 4, 1, "", "start"]], "sympy.sets.sets.ProductSet": [[216, 4, 1, "", "is_iterable"]], "sympy.sets.sets.Set": [[216, 4, 1, "", "boundary"], [216, 4, 1, "", "closure"], [216, 2, 1, "", "complement"], [216, 2, 1, "", "contains"], [216, 4, 1, "", "inf"], [216, 4, 1, "", "interior"], [216, 2, 1, "", "intersect"], [216, 2, 1, "", "intersection"], [216, 4, 1, "", "is_closed"], [216, 2, 1, "", "is_disjoint"], [216, 4, 1, "", "is_open"], [216, 2, 1, "", "is_proper_subset"], [216, 2, 1, "", "is_proper_superset"], [216, 2, 1, "", "is_subset"], [216, 2, 1, "", "is_superset"], [216, 2, 1, "", "isdisjoint"], [216, 2, 1, "", "issubset"], [216, 2, 1, "", "issuperset"], [216, 4, 1, "", "kind"], [216, 4, 1, "", "measure"], [216, 2, 1, "", "powerset"], [216, 4, 1, "", "sup"], [216, 2, 1, "", "symmetric_difference"], [216, 2, 1, "", "union"]], "sympy.sets.sets.SymmetricDifference": [[216, 2, 1, "", "as_relational"]], "sympy.sets.sets.Union": [[216, 2, 1, "", "as_relational"]], "sympy.simplify": [[220, 0, 0, "-", "combsimp"], [220, 0, 0, "-", "cse_main"], [220, 0, 0, "-", "epathtools"], [220, 0, 0, "-", "hyperexpand"], [218, 0, 0, "-", "hyperexpand_doc"], [220, 0, 0, "-", "powsimp"], [220, 0, 0, "-", "radsimp"], [220, 0, 0, "-", "ratsimp"], [12, 0, 0, "-", "simplify"], [220, 0, 0, "-", "sqrtdenest"], [220, 0, 0, "-", "trigsimp"]], "sympy.simplify.combsimp": [[220, 3, 1, "", "combsimp"]], "sympy.simplify.cse_main": [[220, 3, 1, "", "cse"], [220, 3, 1, "", "opt_cse"], [220, 3, 1, "", "tree_cse"]], "sympy.simplify.epathtools": [[220, 1, 1, "", "EPath"], [220, 3, 1, "", "epath"]], "sympy.simplify.epathtools.EPath": [[220, 2, 1, "", "apply"], [220, 2, 1, "", "select"]], "sympy.simplify.fu": [[217, 3, 1, "", "TR0"], [217, 3, 1, "", "TR1"], [217, 3, 1, "", "TR10"], [217, 3, 1, "", "TR10i"], [217, 3, 1, "", "TR11"], [217, 3, 1, "", "TR111"], [217, 3, 1, "", "TR12"], [217, 3, 1, "", "TR12i"], [217, 3, 1, "", "TR13"], [217, 3, 1, "", "TR14"], [217, 3, 1, "", "TR15"], [217, 3, 1, "", "TR16"], [217, 3, 1, "", "TR2"], [217, 3, 1, "", "TR22"], [217, 3, 1, "", "TR2i"], [217, 3, 1, "", "TR3"], [217, 3, 1, "", "TR4"], [217, 3, 1, "", "TR5"], [217, 3, 1, "", "TR6"], [217, 3, 1, "", "TR7"], [217, 3, 1, "", "TR8"], [217, 3, 1, "", "TR9"], [217, 3, 1, "", "TRmorrie"], [217, 3, 1, "", "TRpower"], [217, 3, 1, "", "fu"]], "sympy.simplify.hyperexpand": [[220, 3, 1, "", "hyperexpand"]], "sympy.simplify.powsimp": [[220, 3, 1, "", "powdenest"], [220, 3, 1, "", "powsimp"]], "sympy.simplify.radsimp": [[220, 3, 1, "", "collect"], [220, 3, 1, "", "collect_const"], [220, 3, 1, "", "collect_sqrt"], [220, 3, 1, "", "fraction"], [220, 3, 1, "", "rad_rationalize"], [220, 3, 1, "", "radsimp"], [220, 3, 1, "", "rcollect"]], "sympy.simplify.ratsimp": [[220, 3, 1, "", "ratsimp"], [220, 3, 1, "", "ratsimpmodprime"]], "sympy.simplify.simplify": [[220, 3, 1, "", "besselsimp"], [220, 3, 1, "", "hypersimilar"], [220, 3, 1, "", "hypersimp"], [220, 3, 1, "", "kroneckersimp"], [220, 3, 1, "", "logcombine"], [220, 3, 1, "", "nsimplify"], [220, 3, 1, "", "nthroot"], [220, 3, 1, "", "posify"], [220, 3, 1, "", "separatevars"], [220, 3, 1, "", "simplify"]], "sympy.simplify.sqrtdenest": [[220, 3, 1, "", "sqrtdenest"]], "sympy.simplify.trigsimp": [[220, 3, 1, "", "trigsimp"]], "sympy.solvers.deutils": [[226, 3, 1, "", "ode_order"]], "sympy.solvers.diophantine.diophantine": [[221, 1, 1, "", "BinaryQuadratic"], [221, 1, 1, "", "CubicThue"], [221, 1, 1, "", "DiophantineEquationType"], [221, 1, 1, "", "DiophantineSolutionSet"], [221, 1, 1, "", "GeneralPythagorean"], [221, 1, 1, "", "GeneralSumOfEvenPowers"], [221, 1, 1, "", "GeneralSumOfSquares"], [221, 1, 1, "", "HomogeneousGeneralQuadratic"], [221, 1, 1, "", "HomogeneousTernaryQuadratic"], [221, 1, 1, "", "HomogeneousTernaryQuadraticNormal"], [221, 1, 1, "", "InhomogeneousGeneralQuadratic"], [221, 1, 1, "", "InhomogeneousTernaryQuadratic"], [221, 1, 1, "", "Linear"], [221, 3, 1, "", "PQa"], [221, 1, 1, "", "Univariate"], [221, 3, 1, "", "base_solution_linear"], [221, 3, 1, "", "classify_diop"], [221, 3, 1, "", "cornacchia"], [221, 3, 1, "", "descent"], [221, 3, 1, "", "diop_DN"], [221, 3, 1, "", "diop_bf_DN"], [221, 3, 1, "", "diop_general_pythagorean"], [221, 3, 1, "", "diop_general_sum_of_even_powers"], [221, 3, 1, "", "diop_general_sum_of_squares"], [221, 3, 1, "", "diop_linear"], [221, 3, 1, "", "diop_quadratic"], [221, 3, 1, "", "diop_solve"], [221, 3, 1, "", "diop_ternary_quadratic"], [221, 3, 1, "", "diop_ternary_quadratic_normal"], [221, 3, 1, "", "diophantine"], [221, 3, 1, "", "divisible"], [221, 3, 1, "", "equivalent"], [221, 3, 1, "", "find_DN"], [221, 3, 1, "", "gaussian_reduce"], [221, 3, 1, "", "holzer"], [221, 3, 1, "", "ldescent"], [221, 3, 1, "", "merge_solution"], [221, 3, 1, "", "parametrize_ternary_quadratic"], [221, 3, 1, "", "partition"], [221, 3, 1, "", "power_representation"], [221, 3, 1, "", "prime_as_sum_of_two_squares"], [221, 3, 1, "", "reconstruct"], [221, 3, 1, "", "sqf_normal"], [221, 3, 1, "", "square_factor"], [221, 3, 1, "", "sum_of_four_squares"], [221, 3, 1, "", "sum_of_powers"], [221, 3, 1, "", "sum_of_squares"], [221, 3, 1, "", "sum_of_three_squares"], [221, 3, 1, "", "transformation_to_DN"], [221, 3, 1, "", "transformation_to_normal"]], "sympy.solvers.diophantine.diophantine.DiophantineEquationType": [[221, 2, 1, "", "matches"]], "sympy.solvers": [[223, 0, 0, "-", "inequalities"], [224, 0, 0, "-", "ode"], [225, 0, 0, "-", "pde"], [226, 0, 0, "-", "recurr"], [227, 0, 0, "-", "solveset"]], "sympy.solvers.inequalities": [[223, 3, 1, "", "reduce_abs_inequalities"], [223, 3, 1, "", "reduce_abs_inequality"], [223, 3, 1, "", "reduce_inequalities"], [223, 3, 1, "", "reduce_rational_inequalities"], [223, 3, 1, "", "solve_poly_inequalities"], [223, 3, 1, "", "solve_poly_inequality"], [223, 3, 1, "", "solve_rational_inequalities"], [223, 3, 1, "", "solve_univariate_inequality"]], "sympy.solvers.ode": [[224, 6, 1, "", "allhints"], [224, 3, 1, "", "checkinfsol"], [224, 3, 1, "", "checkodesol"], [224, 3, 1, "", "classify_ode"], [224, 3, 1, "", "constantsimp"], [224, 3, 1, "", "dsolve"], [224, 3, 1, "", "homogeneous_order"], [224, 3, 1, "", "infinitesimals"], [224, 0, 0, "-", "ode"]], "sympy.solvers.ode.lie_group": [[224, 3, 1, "", "lie_heuristic_abaco1_product"], [224, 3, 1, "", "lie_heuristic_abaco1_simple"], [224, 3, 1, "", "lie_heuristic_abaco2_similar"], [224, 3, 1, "", "lie_heuristic_abaco2_unique_general"], [224, 3, 1, "", "lie_heuristic_abaco2_unique_unknown"], [224, 3, 1, "", "lie_heuristic_bivariate"], [224, 3, 1, "", "lie_heuristic_chi"], [224, 3, 1, "", "lie_heuristic_function_sum"], [224, 3, 1, "", "lie_heuristic_linear"]], "sympy.solvers.ode.ode": [[224, 3, 1, "", "_handle_Integral"], [224, 3, 1, "", "_linear_2eq_order1_type6"], [224, 3, 1, "", "_linear_2eq_order1_type7"], [224, 3, 1, "", "_nonlinear_2eq_order1_type1"], [224, 3, 1, "", "_nonlinear_2eq_order1_type2"], [224, 3, 1, "", "_nonlinear_2eq_order1_type3"], [224, 3, 1, "", "_nonlinear_2eq_order1_type4"], [224, 3, 1, "", "_nonlinear_2eq_order1_type5"], [224, 3, 1, "", "_nonlinear_3eq_order1_type1"], [224, 3, 1, "", "_nonlinear_3eq_order1_type2"], [224, 3, 1, "", "_nonlinear_3eq_order1_type3"], [224, 3, 1, "", "_nonlinear_3eq_order1_type4"], [224, 3, 1, "", "_nonlinear_3eq_order1_type5"], [224, 3, 1, "", "constant_renumber"], [224, 3, 1, "", "ode_1st_power_series"], [224, 3, 1, "", "ode_2nd_power_series_ordinary"], [224, 3, 1, "", "ode_2nd_power_series_regular"], [224, 3, 1, "", "ode_sol_simplicity"], [224, 3, 1, "", "odesimp"]], "sympy.solvers.ode.riccati": [[224, 3, 1, "", "compute_m_ybar"], [224, 3, 1, "", "construct_c"], [224, 3, 1, "", "construct_d"], [224, 3, 1, "", "get_gen_sol_from_part_sol"], [224, 3, 1, "", "rational_laurent_series"], [224, 3, 1, "", "remove_redundant_sols"], [224, 3, 1, "", "riccati_inverse_normal"], [224, 3, 1, "", "riccati_normal"], [224, 3, 1, "", "riccati_reduced"], [224, 3, 1, "", "solve_aux_eq"], [224, 3, 1, "", "solve_riccati"]], "sympy.solvers.ode.single": [[224, 1, 1, "", "AlmostLinear"], [224, 1, 1, "", "Bernoulli"], [224, 1, 1, "", "Factorable"], [224, 1, 1, "", "FirstExact"], [224, 1, 1, "", "FirstLinear"], [224, 1, 1, "", "HomogeneousCoeffBest"], [224, 1, 1, "", "HomogeneousCoeffSubsDepDivIndep"], [224, 1, 1, "", "HomogeneousCoeffSubsIndepDivDep"], [224, 1, 1, "", "LieGroup"], [224, 1, 1, "", "LinearCoefficients"], [224, 1, 1, "", "Liouville"], [224, 1, 1, "", "NthAlgebraic"], [224, 1, 1, "", "NthLinearConstantCoeffHomogeneous"], [224, 1, 1, "", "NthLinearConstantCoeffUndeterminedCoefficients"], [224, 1, 1, "", "NthLinearConstantCoeffVariationOfParameters"], [224, 1, 1, "", "NthLinearEulerEqHomogeneous"], [224, 1, 1, "", "NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"], [224, 1, 1, "", "NthLinearEulerEqNonhomogeneousVariationOfParameters"], [224, 1, 1, "", "NthOrderReducible"], [224, 1, 1, "", "RationalRiccati"], [224, 1, 1, "", "RiccatiSpecial"], [224, 1, 1, "", "SecondHypergeometric"], [224, 1, 1, "", "SecondLinearAiry"], [224, 1, 1, "", "SecondLinearBessel"], [224, 1, 1, "", "Separable"], [224, 1, 1, "", "SeparableReduced"]], "sympy.solvers.ode.systems": [[224, 3, 1, "", "canonical_odes"], [224, 3, 1, "", "dsolve_system"], [224, 3, 1, "", "linear_ode_to_matrix"], [224, 3, 1, "", "linodesolve"], [224, 3, 1, "", "linodesolve_type"], [224, 3, 1, "", "matrix_exp"], [224, 3, 1, "", "matrix_exp_jordan_form"]], "sympy.solvers.pde": [[225, 3, 1, "", "checkpdesol"], [225, 3, 1, "", "classify_pde"], [225, 3, 1, "", "pde_1st_linear_constant_coeff"], [225, 3, 1, "", "pde_1st_linear_constant_coeff_homogeneous"], [225, 3, 1, "", "pde_1st_linear_variable_coeff"], [225, 3, 1, "", "pde_separate"], [225, 3, 1, "", "pde_separate_add"], [225, 3, 1, "", "pde_separate_mul"], [225, 3, 1, "", "pdsolve"]], "sympy.solvers.polysys": [[226, 3, 1, "", "solve_poly_system"], [226, 3, 1, "", "solve_triangulated"]], "sympy.solvers.recurr": [[226, 3, 1, "", "rsolve"], [226, 3, 1, "", "rsolve_hyper"], [226, 3, 1, "", "rsolve_poly"], [226, 3, 1, "", "rsolve_ratio"]], "sympy.solvers.solvers": [[226, 3, 1, "", "checksol"], [226, 3, 1, "", "nsolve"], [226, 3, 1, "", "solve"], [226, 3, 1, "", "solve_linear"], [226, 3, 1, "", "solve_linear_system"], [226, 3, 1, "", "solve_linear_system_LU"], [226, 3, 1, "", "solve_undetermined_coeffs"], [226, 3, 1, "", "unrad"]], "sympy.solvers.solveset": [[227, 3, 1, "", "_is_exponential"], [227, 3, 1, "", "_is_logarithmic"], [227, 3, 1, "", "_solve_exponential"], [227, 3, 1, "", "_solve_logarithm"], [227, 3, 1, "", "_transolve"], [227, 3, 1, "", "domain_check"], [227, 3, 1, "", "invert_complex"], [227, 3, 1, "", "invert_real"], [227, 3, 1, "", "linear_eq_to_matrix"], [227, 3, 1, "", "linsolve"], [227, 3, 1, "", "nonlinsolve"], [227, 3, 1, "", "solveset"], [227, 3, 1, "", "solveset_complex"], [227, 3, 1, "", "solveset_real"], [227, 3, 1, "", "solvify"]], "sympy.stats": [[228, 3, 1, "", "Arcsin"], [228, 3, 1, "", "Benini"], [228, 3, 1, "", "Bernoulli"], [228, 1, 1, "", "BernoulliProcess"], [228, 3, 1, "", "Beta"], [228, 3, 1, "", "BetaBinomial"], [228, 3, 1, "", "BetaNoncentral"], [228, 3, 1, "", "BetaPrime"], [228, 3, 1, "", "Binomial"], [228, 3, 1, "", "BoundedPareto"], [228, 3, 1, "", "Cauchy"], [228, 1, 1, "", "CentralMoment"], [228, 3, 1, "", "Chi"], [228, 3, 1, "", "ChiNoncentral"], [228, 3, 1, "", "ChiSquared"], [228, 3, 1, "", "Coin"], [228, 1, 1, "", "ContinuousMarkovChain"], [228, 3, 1, "", "ContinuousRV"], [228, 1, 1, "", "Covariance"], [228, 1, 1, "", "CrossCovarianceMatrix"], [228, 3, 1, "", "Dagum"], [228, 3, 1, "", "Die"], [228, 1, 1, "", "DiscreteMarkovChain"], [228, 3, 1, "", "DiscreteUniform"], [228, 3, 1, "", "E"], [228, 3, 1, "", "Erlang"], [228, 3, 1, "", "ExGaussian"], [228, 1, 1, "", "Expectation"], [228, 1, 1, "", "ExpectationMatrix"], [228, 3, 1, "", "Exponential"], [228, 3, 1, "", "FDistribution"], [228, 3, 1, "", "FiniteRV"], [228, 3, 1, "", "FisherZ"], [228, 3, 1, "", "Frechet"], [228, 3, 1, "", "Gamma"], [228, 3, 1, "", "GammaInverse"], [228, 1, 1, "", "GammaProcess"], [228, 3, 1, "", "GeneralizedMultivariateLogGamma"], [228, 3, 1, "", "GeneralizedMultivariateLogGammaOmega"], [228, 3, 1, "", "Geometric"], [228, 3, 1, "", "Gompertz"], [228, 3, 1, "", "Gumbel"], [228, 3, 1, "", "Hermite"], [228, 3, 1, "", "Hypergeometric"], [228, 3, 1, "", "JointRV"], [228, 3, 1, "", "Kumaraswamy"], [228, 3, 1, "", "Laplace"], [228, 3, 1, "", "Levy"], [228, 3, 1, "", "LogLogistic"], [228, 3, 1, "", "LogNormal"], [228, 3, 1, "", "Logarithmic"], [228, 3, 1, "", "Logistic"], [228, 3, 1, "", "Lomax"], [228, 3, 1, "", "MatrixGamma"], [228, 3, 1, "", "MatrixNormal"], [228, 3, 1, "", "Maxwell"], [228, 1, 1, "", "Moment"], [228, 3, 1, "", "Moyal"], [228, 3, 1, "", "Multinomial"], [228, 3, 1, "", "MultivariateBeta"], [228, 3, 1, "", "MultivariateEwens"], [228, 3, 1, "", "MultivariateLaplace"], [228, 3, 1, "", "MultivariateNormal"], [228, 3, 1, "", "MultivariateT"], [228, 3, 1, "", "Nakagami"], [228, 3, 1, "", "NegativeBinomial"], [228, 3, 1, "", "NegativeMultinomial"], [228, 3, 1, "", "Normal"], [228, 3, 1, "", "NormalGamma"], [228, 3, 1, "", "P"], [228, 3, 1, "", "Pareto"], [228, 3, 1, "", "Poisson"], [228, 1, 1, "", "PoissonProcess"], [228, 3, 1, "", "PowerFunction"], [228, 1, 1, "", "Probability"], [228, 3, 1, "", "QuadraticU"], [228, 3, 1, "", "Rademacher"], [228, 3, 1, "", "RaisedCosine"], [228, 3, 1, "", "Rayleigh"], [228, 3, 1, "", "Reciprocal"], [228, 3, 1, "", "ShiftedGompertz"], [228, 3, 1, "", "Skellam"], [228, 3, 1, "", "StudentT"], [228, 3, 1, "", "Trapezoidal"], [228, 3, 1, "", "Triangular"], [228, 3, 1, "", "Uniform"], [228, 3, 1, "", "UniformSum"], [228, 1, 1, "", "Variance"], [228, 1, 1, "", "VarianceMatrix"], [228, 3, 1, "", "VonMises"], [228, 3, 1, "", "Wald"], [228, 3, 1, "", "Weibull"], [228, 1, 1, "", "WienerProcess"], [228, 3, 1, "", "WignerSemicircle"], [228, 3, 1, "", "Wishart"], [228, 3, 1, "", "YuleSimon"], [228, 3, 1, "", "Zeta"], [228, 3, 1, "", "cmoment"], [228, 3, 1, "", "correlation"], [228, 3, 1, "", "coskewness"], [228, 3, 1, "", "covariance"], [228, 0, 0, "-", "crv"], [228, 0, 0, "-", "crv_types"], [228, 3, 1, "", "density"], [228, 3, 1, "", "entropy"], [228, 3, 1, "", "factorial_moment"], [228, 0, 0, "-", "frv"], [228, 0, 0, "-", "frv_types"], [228, 3, 1, "", "given"], [228, 3, 1, "", "kurtosis"], [228, 3, 1, "", "marginal_distribution"], [228, 3, 1, "", "median"], [228, 3, 1, "", "moment"], [228, 3, 1, "", "quantile"], [228, 0, 0, "-", "rv"], [228, 3, 1, "", "sample"], [228, 3, 1, "", "sample_iter"], [228, 3, 1, "", "skewness"], [228, 3, 1, "", "std"], [228, 3, 1, "", "variance"], [228, 3, 1, "", "where"]], "sympy.stats.BernoulliProcess": [[228, 2, 1, "", "expectation"], [228, 2, 1, "", "probability"]], "sympy.stats.DiscreteMarkovChain": [[228, 2, 1, "", "absorbing_probabilities"], [228, 2, 1, "", "canonical_form"], [228, 2, 1, "", "communication_classes"], [228, 2, 1, "", "decompose"], [228, 2, 1, "", "fixed_row_vector"], [228, 2, 1, "", "fundamental_matrix"], [228, 4, 1, "", "limiting_distribution"], [228, 2, 1, "", "sample"], [228, 2, 1, "", "stationary_distribution"], [228, 4, 1, "", "transition_probabilities"]], "sympy.stats.compound_rv": [[228, 1, 1, "", "CompoundDistribution"]], "sympy.stats.crv": [[228, 1, 1, "", "ContinuousDomain"], [228, 1, 1, "", "ContinuousPSpace"]], "sympy.stats.crv_types": [[228, 1, 1, "", "NormalPSpace"]], "sympy.stats.crv_types.sympy.stats": [[228, 3, 1, "", "Die"], [228, 3, 1, "", "Normal"]], "sympy.stats.frv": [[228, 1, 1, "", "FiniteDomain"], [228, 1, 1, "", "FinitePSpace"]], "sympy.stats.frv_types": [[228, 1, 1, "", "DiePSpace"]], "sympy.stats.rv": [[228, 1, 1, "", "ConditionalDomain"], [228, 1, 1, "", "PSpace"], [228, 1, 1, "", "ProductDomain"], [228, 1, 1, "", "ProductPSpace"], [228, 1, 1, "", "RandomDomain"], [228, 1, 1, "", "RandomSymbol"], [228, 1, 1, "", "SingleDomain"], [228, 1, 1, "", "SinglePSpace"], [228, 3, 1, "", "pspace"], [228, 3, 1, "", "random_symbols"], [228, 3, 1, "", "rs_swap"], [228, 3, 1, "", "sampling_E"], [228, 3, 1, "", "sampling_P"], [228, 3, 1, "", "sampling_density"]], "sympy.tensor": [[229, 0, 0, "-", "array"], [232, 0, 0, "-", "index_methods"], [233, 0, 0, "-", "indexed"], [234, 0, 0, "-", "tensor"], [235, 0, 0, "-", "toperators"]], "sympy.tensor.array": [[229, 1, 1, "", "ImmutableDenseNDimArray"], [229, 1, 1, "", "ImmutableSparseNDimArray"], [229, 1, 1, "", "MutableDenseNDimArray"], [229, 1, 1, "", "MutableSparseNDimArray"], [229, 3, 1, "", "derive_by_array"], [230, 0, 0, "-", "expressions"], [229, 3, 1, "", "permutedims"], [229, 3, 1, "", "tensorcontraction"], [229, 3, 1, "", "tensordiagonal"], [229, 3, 1, "", "tensorproduct"]], "sympy.tensor.index_methods": [[232, 3, 1, "", "get_contraction_structure"], [232, 3, 1, "", "get_indices"]], "sympy.tensor.indexed": [[233, 1, 1, "", "Idx"], [233, 1, 1, "", "Indexed"], [233, 1, 1, "", "IndexedBase"]], "sympy.tensor.indexed.Idx": [[233, 4, 1, "", "label"], [233, 4, 1, "", "lower"], [233, 4, 1, "", "upper"]], "sympy.tensor.indexed.Indexed": [[233, 4, 1, "", "base"], [233, 4, 1, "", "indices"], [233, 4, 1, "", "ranges"], [233, 4, 1, "", "rank"], [233, 4, 1, "", "shape"]], "sympy.tensor.indexed.IndexedBase": [[233, 4, 1, "", "label"], [233, 4, 1, "", "offset"], [233, 4, 1, "", "shape"], [233, 4, 1, "", "strides"]], "sympy.tensor.tensor": [[234, 1, 1, "", "TensAdd"], [234, 1, 1, "", "TensExpr"], [234, 1, 1, "", "TensMul"], [234, 1, 1, "", "TensorHead"], [234, 1, 1, "", "TensorIndex"], [234, 1, 1, "", "TensorIndexType"], [234, 1, 1, "", "TensorSymmetry"], [234, 1, 1, "", "TensorType"], [234, 1, 1, "", "_TensorManager"], [234, 3, 1, "", "canon_bp"], [234, 3, 1, "", "riemann_cyclic"], [234, 3, 1, "", "riemann_cyclic_replace"], [234, 3, 1, "", "tensor_heads"], [234, 3, 1, "", "tensorsymmetry"]], "sympy.tensor.tensor.TensAdd": [[234, 2, 1, "", "canon_bp"], [234, 2, 1, "", "contract_metric"]], "sympy.tensor.tensor.TensExpr": [[234, 2, 1, "", "get_matrix"], [234, 2, 1, "", "replace_with_arrays"]], "sympy.tensor.tensor.TensMul": [[234, 2, 1, "", "canon_bp"], [234, 2, 1, "", "contract_metric"], [234, 2, 1, "", "get_free_indices"], [234, 2, 1, "", "get_indices"], [234, 2, 1, "", "perm2tensor"], [234, 2, 1, "", "sorted_components"], [234, 2, 1, "", "split"]], "sympy.tensor.tensor.TensorHead": [[234, 2, 1, "", "commutes_with"]], "sympy.tensor.tensor.TensorSymmetry": [[234, 2, 1, "", "direct_product"], [234, 2, 1, "", "fully_symmetric"], [234, 2, 1, "", "no_symmetry"], [234, 2, 1, "", "riemann"]], "sympy.tensor.tensor._TensorManager": [[234, 2, 1, "", "clear"], [234, 2, 1, "", "comm_i2symbol"], [234, 2, 1, "", "comm_symbols2i"], [234, 2, 1, "", "get_comm"], [234, 2, 1, "", "set_comm"], [234, 2, 1, "", "set_comms"]], "sympy.tensor.toperators": [[235, 1, 1, "", "PartialDerivative"]], "sympy.testing": [[237, 0, 0, "-", "pytest"], [238, 0, 0, "-", "randtest"], [239, 0, 0, "-", "runtests"]], "sympy.testing.pytest": [[237, 3, 1, "", "SKIP"], [237, 3, 1, "", "nocache_fail"], [237, 3, 1, "", "raises"], [237, 3, 1, "", "warns"], [237, 3, 1, "", "warns_deprecated_sympy"]], "sympy.testing.runtests": [[239, 1, 1, "", "PyTestReporter"], [239, 1, 1, "", "Reporter"], [239, 1, 1, "", "SymPyDocTestFinder"], [239, 1, 1, "", "SymPyDocTestRunner"], [239, 1, 1, "", "SymPyOutputChecker"], [239, 1, 1, "", "SymPyTestResults"], [239, 3, 1, "", "convert_to_native_paths"], [239, 3, 1, "", "doctest"], [239, 3, 1, "", "get_sympy_dir"], [239, 3, 1, "", "raise_on_deprecated"], [239, 3, 1, "", "run_all_tests"], [239, 3, 1, "", "run_in_subprocess_with_hash_randomization"], [239, 3, 1, "", "split_list"], [239, 3, 1, "", "sympytestfile"], [239, 3, 1, "", "test"]], "sympy.testing.runtests.PyTestReporter": [[239, 2, 1, "", "write"]], "sympy.testing.runtests.SymPyDocTestRunner": [[239, 2, 1, "", "run"]], "sympy.testing.runtests.SymPyOutputChecker": [[239, 2, 1, "", "check_output"]], "sympy.testing.runtests.SymPyTestResults": [[239, 5, 1, "", "attempted"], [239, 5, 1, "", "failed"]], "sympy.utilities": [[240, 0, 0, "-", "autowrap"], [241, 0, 0, "-", "codegen"], [242, 0, 0, "-", "decorator"], [243, 0, 0, "-", "enumerative"], [244, 0, 0, "-", "exceptions"], [246, 0, 0, "-", "iterables"], [247, 0, 0, "-", "lambdify"], [248, 0, 0, "-", "memoization"], [249, 0, 0, "-", "misc"], [250, 0, 0, "-", "pkgdata"], [251, 0, 0, "-", "source"], [252, 0, 0, "-", "timeutils"]], "sympy.utilities.autowrap": [[240, 1, 1, "", "CodeWrapper"], [240, 1, 1, "", "CythonCodeWrapper"], [240, 1, 1, "", "DummyWrapper"], [240, 1, 1, "", "F2PyCodeWrapper"], [240, 1, 1, "", "UfuncifyCodeWrapper"], [240, 3, 1, "", "autowrap"], [240, 3, 1, "", "binary_function"], [240, 3, 1, "", "ufuncify"]], "sympy.utilities.autowrap.CythonCodeWrapper": [[240, 2, 1, "", "dump_pyx"]], "sympy.utilities.autowrap.UfuncifyCodeWrapper": [[240, 2, 1, "", "dump_c"]], "sympy.utilities.codegen": [[241, 1, 1, "", "Argument"], [241, 1, 1, "", "CCodeGen"], [241, 1, 1, "", "CodeGen"], [241, 1, 1, "", "DataType"], [241, 1, 1, "", "FCodeGen"], [241, 1, 1, "", "JuliaCodeGen"], [241, 1, 1, "", "OctaveCodeGen"], [241, 1, 1, "", "OutputArgument"], [241, 1, 1, "", "Result"], [241, 1, 1, "", "Routine"], [241, 1, 1, "", "RustCodeGen"], [241, 3, 1, "", "codegen"], [241, 3, 1, "", "get_default_datatype"], [241, 3, 1, "", "make_routine"]], "sympy.utilities.codegen.CCodeGen": [[241, 2, 1, "", "dump_c"], [241, 2, 1, "", "dump_h"], [241, 2, 1, "", "get_prototype"]], "sympy.utilities.codegen.CodeGen": [[241, 2, 1, "", "dump_code"], [241, 2, 1, "", "routine"], [241, 2, 1, "", "write"]], "sympy.utilities.codegen.FCodeGen": [[241, 2, 1, "", "dump_f95"], [241, 2, 1, "", "dump_h"], [241, 2, 1, "", "get_interface"]], "sympy.utilities.codegen.JuliaCodeGen": [[241, 2, 1, "", "dump_jl"], [241, 2, 1, "", "routine"]], "sympy.utilities.codegen.OctaveCodeGen": [[241, 2, 1, "", "dump_m"], [241, 2, 1, "", "routine"]], "sympy.utilities.codegen.Routine": [[241, 4, 1, "", "result_variables"], [241, 4, 1, "", "variables"]], "sympy.utilities.codegen.RustCodeGen": [[241, 2, 1, "", "dump_rs"], [241, 2, 1, "", "get_prototype"], [241, 2, 1, "", "routine"]], "sympy.utilities.decorator": [[242, 3, 1, "", "conserve_mpmath_dps"], [242, 3, 1, "", "deprecated"], [242, 3, 1, "", "doctest_depends_on"], [242, 3, 1, "", "memoize_property"], [242, 1, 1, "", "no_attrs_in_subclass"], [242, 3, 1, "", "public"], [242, 3, 1, "", "threaded"], [242, 3, 1, "", "threaded_factory"], [242, 3, 1, "", "xthreaded"]], "sympy.utilities.enumerative": [[243, 1, 1, "", "MultisetPartitionTraverser"], [243, 3, 1, "", "factoring_visitor"], [243, 3, 1, "", "list_visitor"], [243, 3, 1, "", "multiset_partitions_taocp"]], "sympy.utilities.enumerative.MultisetPartitionTraverser": [[243, 2, 1, "", "count_partitions"], [243, 2, 1, "", "enum_all"], [243, 2, 1, "", "enum_large"], [243, 2, 1, "", "enum_range"], [243, 2, 1, "", "enum_small"]], "sympy.utilities.exceptions": [[244, 7, 1, "", "SymPyDeprecationWarning"], [244, 3, 1, "", "ignore_warnings"], [244, 3, 1, "", "sympy_deprecation_warning"]], "sympy.utilities.iterables": [[246, 1, 1, "", "NotIterable"], [246, 3, 1, "", "binary_partitions"], [246, 3, 1, "", "bracelets"], [246, 3, 1, "", "capture"], [246, 3, 1, "", "common_prefix"], [246, 3, 1, "", "common_suffix"], [246, 3, 1, "", "connected_components"], [246, 3, 1, "", "dict_merge"], [246, 3, 1, "", "filter_symbols"], [246, 3, 1, "", "flatten"], [246, 3, 1, "", "generate_bell"], [246, 3, 1, "", "generate_derangements"], [246, 3, 1, "", "generate_involutions"], [246, 3, 1, "", "generate_oriented_forest"], [246, 3, 1, "", "group"], [246, 3, 1, "", "has_dups"], [246, 3, 1, "", "has_variety"], [246, 3, 1, "", "ibin"], [246, 3, 1, "", "iproduct"], [246, 3, 1, "", "is_palindromic"], [246, 3, 1, "", "is_sequence"], [246, 3, 1, "", "iterable"], [246, 3, 1, "", "kbins"], [246, 3, 1, "", "least_rotation"], [246, 3, 1, "", "minlex"], [246, 3, 1, "", "multiset"], [246, 3, 1, "", "multiset_combinations"], [246, 3, 1, "", "multiset_derangements"], [246, 3, 1, "", "multiset_partitions"], [246, 3, 1, "", "multiset_permutations"], [246, 3, 1, "", "necklaces"], [246, 3, 1, "", "numbered_symbols"], [246, 3, 1, "", "ordered_partitions"], [246, 3, 1, "", "partitions"], [246, 3, 1, "", "permute_signs"], [246, 3, 1, "", "postfixes"], [246, 3, 1, "", "prefixes"], [246, 3, 1, "", "random_derangement"], [246, 3, 1, "", "reshape"], [246, 3, 1, "", "rotate_left"], [246, 3, 1, "", "rotate_right"], [246, 3, 1, "", "rotations"], [246, 3, 1, "", "roundrobin"], [246, 3, 1, "", "runs"], [246, 3, 1, "", "sift"], [246, 3, 1, "", "signed_permutations"], [246, 3, 1, "", "strongly_connected_components"], [246, 3, 1, "", "subsets"], [246, 3, 1, "", "take"], [246, 3, 1, "", "topological_sort"], [246, 3, 1, "", "unflatten"], [246, 3, 1, "", "uniq"], [246, 3, 1, "", "variations"]], "sympy.utilities.lambdify": [[247, 3, 1, "", "implemented_function"], [247, 3, 1, "", "lambdastr"], [247, 3, 1, "", "lambdify"]], "sympy.utilities.memoization": [[248, 3, 1, "", "assoc_recurrence_memo"], [248, 3, 1, "", "recurrence_memo"]], "sympy.utilities.misc": [[249, 3, 1, "", "as_int"], [249, 3, 1, "", "debug"], [249, 3, 1, "", "debug_decorator"], [249, 3, 1, "", "filldedent"], [249, 3, 1, "", "find_executable"], [249, 3, 1, "", "func_name"], [249, 3, 1, "", "ordinal"], [249, 3, 1, "", "rawlines"], [249, 3, 1, "", "replace"], [249, 3, 1, "", "strlines"], [249, 3, 1, "", "translate"]], "sympy.utilities.pkgdata": [[250, 3, 1, "", "get_resource"]], "sympy.utilities.source": [[251, 3, 1, "", "get_class"], [251, 3, 1, "", "get_mod_func"], [251, 3, 1, "", "source"]], "sympy.utilities.timeutils": [[252, 3, 1, "", "timed"]], "sympy.vector.coordsysrect": [[253, 1, 1, "", "CoordSys3D"]], "sympy.vector.coordsysrect.CoordSys3D": [[253, 2, 1, "", "__init__"], [253, 2, 1, "", "create_new"], [253, 2, 1, "", "locate_new"], [253, 2, 1, "", "orient_new"], [253, 2, 1, "", "orient_new_axis"], [253, 2, 1, "", "orient_new_body"], [253, 2, 1, "", "orient_new_quaternion"], [253, 2, 1, "", "orient_new_space"], [253, 2, 1, "", "position_wrt"], [253, 2, 1, "", "rotation_matrix"], [253, 2, 1, "", "scalar_map"]], "sympy.vector": [[256, 3, 1, "", "curl"], [256, 3, 1, "", "divergence"], [256, 3, 1, "", "express"], [256, 3, 1, "", "gradient"], [256, 3, 1, "", "is_conservative"], [256, 3, 1, "", "is_solenoidal"], [256, 3, 1, "", "matrix_to_vector"], [256, 3, 1, "", "scalar_potential"], [256, 3, 1, "", "scalar_potential_difference"]], "sympy.vector.deloperator": [[253, 1, 1, "", "Del"]], "sympy.vector.deloperator.Del": [[253, 2, 1, "", "cross"], [253, 2, 1, "", "dot"], [253, 2, 1, "", "gradient"]], "sympy.vector.dyadic": [[253, 1, 1, "", "Dyadic"]], "sympy.vector.dyadic.Dyadic": [[253, 4, 1, "", "components"], [253, 2, 1, "", "cross"], [253, 2, 1, "", "dot"], [253, 2, 1, "", "to_matrix"]], "sympy.vector.implicitregion": [[253, 1, 1, "", "ImplicitRegion"]], "sympy.vector.implicitregion.ImplicitRegion": [[253, 2, 1, "", "multiplicity"], [253, 2, 1, "", "rational_parametrization"], [253, 2, 1, "", "regular_point"], [253, 2, 1, "", "singular_points"]], "sympy.vector.integrals": [[253, 1, 1, "", "ParametricIntegral"], [256, 3, 1, "", "vector_integrate"]], "sympy.vector.orienters": [[255, 1, 1, "", "AxisOrienter"], [255, 1, 1, "", "BodyOrienter"], [255, 1, 1, "", "Orienter"], [255, 1, 1, "", "QuaternionOrienter"], [255, 1, 1, "", "SpaceOrienter"]], "sympy.vector.orienters.AxisOrienter": [[255, 2, 1, "", "__init__"], [255, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.BodyOrienter": [[255, 2, 1, "", "__init__"]], "sympy.vector.orienters.Orienter": [[255, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.QuaternionOrienter": [[255, 2, 1, "", "__init__"]], "sympy.vector.orienters.SpaceOrienter": [[255, 2, 1, "", "__init__"]], "sympy.vector.parametricregion": [[253, 1, 1, "", "ParametricRegion"]], "sympy.vector.vector": [[253, 1, 1, "", "Vector"]], "sympy.vector.vector.Vector": [[253, 4, 1, "", "components"], [253, 2, 1, "", "cross"], [253, 2, 1, "", "dot"], [253, 2, 1, "", "magnitude"], [253, 2, 1, "", "normalize"], [253, 2, 1, "", "outer"], [253, 2, 1, "", "projection"], [253, 2, 1, "", "separate"], [253, 2, 1, "", "to_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:attribute", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"cite": 0, "sympi": [0, 1, 5, 6, 10, 12, 15, 16, 17, 23, 25, 28, 30, 31, 41, 82, 101, 140, 189, 198, 253, 256, 257, 260, 274, 276, 279], "build": [1, 3], "document": [1, 3, 4, 6, 7, 30], "requir": [1, 4], "depend": [1, 3, 137, 198, 258], "docker": 1, "debian": 1, "ubuntu": 1, "fedora": 1, "mac": 1, "window": [1, 194], "10": [1, 10, 103], "doc": [1, 199], "local": 1, "instal": [1, 30, 31, 101, 283], "logo": 1, "view": 1, "auto": 1, "rebuild": 1, "live": 1, "server": 1, "pdf": 1, "debug": 2, "hard": 3, "option": [3, 25, 28, 29, 201], "recommend": [3, 7], "interact": [3, 87, 194], "us": [3, 7, 10, 16, 23, 24, 25, 26, 27, 28, 29, 41, 62, 83, 84, 100, 103, 132, 137, 138, 192, 194, 205, 227, 258], "print": [3, 10, 20, 41, 87, 113, 121, 182, 188, 208, 284], "pars": [3, 29, 101], "logic": [3, 19, 89, 264, 267], "plot": [3, 10, 107, 153, 194], "lambdifi": [3, 10, 100, 247, 274], "code": [3, 4, 5, 7, 10, 41, 43, 113, 192, 208, 251, 264, 266], "gener": [3, 6, 7, 41, 49, 51, 198, 203, 227, 259, 264, 266], "autowrap": [3, 41, 240], "printer": [3, 41, 208, 284], "test": [3, 5, 10, 56, 89, 207, 236, 238, 239, 281], "onli": [3, 23, 227], "statist": 3, "symengin": 3, "backend": [3, 194], "experiment": [3, 101], "rubi": 3, "integr": [3, 10, 63, 67, 81, 83, 84, 85, 86, 113, 196, 203, 263, 275], "sage": 3, "develop": [3, 5, 59], "get": [3, 5, 12], "sourc": [3, 10, 12, 251], "run": [3, 5, 31, 239], "benchmark": 3, "deprec": [4, 10], "polici": 4, "what": [4, 137, 197, 198, 227, 279, 282], "i": [4, 12, 27, 84, 100, 137, 197, 208, 227, 279], "try": 4, "avoid": 4, "backward": 4, "incompat": 4, "chang": [4, 10], "first": [4, 10], "place": 4, "when": [4, 29, 84], "doe": [4, 12, 227], "public": 4, "api": [4, 30, 80, 84, 86, 109, 116, 186, 227, 240, 241, 254, 264], "Not": [4, 23, 24, 25, 27, 28, 29], "The": [4, 10, 18, 20, 42, 49, 84, 137, 178, 190, 203, 215, 218, 259, 260, 279], "purpos": 4, "technic": 4, "possibl": [4, 25, 281], "how": [4, 21, 30, 84, 192, 227], "long": 4, "should": [4, 100], "last": 4, "checklist": 4, "ad": 4, "releas": 4, "note": [4, 20, 59, 71, 137, 215, 217, 277, 286], "entri": [4, 95], "environ": 5, "setup": 5, "git": [5, 31], "virtual": 5, "docstr": [6, 7, 102, 105, 114, 115, 117, 118, 119, 120, 121, 122, 184, 185, 187, 188, 253, 255, 256], "style": [6, 7], "guid": [6, 7, 21, 30, 133, 190, 261], "guidelin": [6, 7], "format": [6, 7, 10, 29], "section": 6, "1": [6, 10, 84, 103, 123, 137, 149], "singl": [6, 12, 14, 23], "sentenc": 6, "summari": 6, "2": [6, 10, 84, 103, 123, 137], "explan": [6, 13, 30], "3": [6, 10, 86, 103, 123, 174], "exampl": [6, 20, 23, 24, 27, 28, 32, 59, 71, 83, 86, 99, 103, 110, 124, 137, 141, 145, 176, 178, 192, 207, 208, 215, 218, 228, 229, 230, 233, 259, 279, 285], "4": [6, 10, 103], "paramet": [6, 24, 218, 227], "5": [6, 10, 103], "see": [6, 59, 246, 259], "also": [6, 59, 246], "6": [6, 10, 103], "refer": [6, 18, 30, 33, 40, 58, 59, 61, 71, 77, 84, 86, 92, 93, 95, 97, 99, 101, 116, 139, 145, 148, 178, 190, 192, 193, 194, 195, 199, 201, 203, 204, 205, 215, 217, 218, 221, 227, 240, 241, 261, 264], "sampl": [6, 10], "class": [6, 15, 40, 41, 58, 61, 93, 95, 97, 99, 137, 183, 194, 203, 208, 221, 229, 253, 255], "ar": [6, 23, 192, 198, 227], "mathemat": [6, 12, 140], "function": [6, 10, 12, 20, 23, 27, 29, 41, 49, 58, 59, 65, 66, 67, 77, 78, 81, 82, 84, 89, 95, 99, 101, 103, 113, 138, 160, 163, 184, 185, 189, 194, 196, 198, 199, 204, 207, 208, 218, 221, 224, 225, 229, 256, 260, 284, 285], "best": [6, 7, 20], "practic": [6, 7, 20], "write": [6, 7, 20], "import": [6, 10], "sphinx": 6, "cross": 6, "referenc": 6, "type": [7, 14, 23, 41, 67, 184, 227, 228], "narr": 7, "markdown": 7, "prefer": [7, 29], "math": [7, 41], "latex": [7, 101, 284], "head": 7, "spell": 7, "punctuat": 7, "capit": 7, "tone": 7, "contribut": [8, 9, 30, 205], "make": [9, 25, 29], "list": [10, 12, 14, 23], "activ": 10, "silenc": 10, "warn": [10, 244], "version": 10, "12": 10, "new": [10, 258], "joint": [10, 117, 134, 228], "coordin": [10, 113, 127, 137, 194, 257, 258, 260, 262], "intermedi": 10, "frame": [10, 192], "attach": 10, "point": [10, 20, 63, 74, 113, 182, 191, 257], "argument": [10, 12, 227], "11": [10, 103], "mathematica": [10, 208], "parser": [10, 123], "redund": 10, "static": 10, "method": [10, 16, 20, 26, 31, 118, 127, 130, 131, 132, 135, 136, 137, 208, 225, 227, 232, 258, 281], "carmichael": 10, "check": [10, 184], "hadamardproduct": 10, "matadd": 10, "matmul": 10, "some": [10, 140, 227], "travers": [10, 59], "have": [10, 25, 28, 207], "been": 10, "move": [10, 218], "core": [10, 59, 92], "trace": 10, "compat": [10, 230], "submodul": [10, 71], "9": [10, 103], "expr_free_symbol": 10, "stat": [10, 228], "numsampl": 10, "n": [10, 229, 230], "poli": [10, 197, 198, 199, 206], "solver": [10, 206, 222, 223, 224, 226, 227, 286], "rawmatrix": 10, "non": 10, "expr": [10, 59], "object": [10, 15, 233], "matrix": [10, 26, 37, 92, 95, 96, 137, 228, 281], "get_seg": 10, "attribut": [10, 42, 49], "mdft": 10, "physic": [10, 110, 113, 124, 134, 135, 136, 137, 138, 139, 140, 141, 180, 182, 186, 189, 190, 191, 192, 264, 270], "matric": [10, 16, 26, 90, 91, 92, 93, 94, 95, 97, 110, 112, 230, 264, 268, 281], "privat": 10, "sparsematrix": [10, 97], "_smat": 10, "densematrix": 10, "_mat": 10, "laplace_transform": 10, "nocond": 10, "fals": 10, "8": [10, 103], "theanocod": 10, "assumpt": [10, 15, 18, 20, 36, 59], "handler": [10, 18], "askhandl": 10, "relat": [10, 12, 14, 18, 23, 59, 67, 89, 189, 192, 260], "7": [10, 103], "call": [10, 23, 29], "stochasticprocess": 10, "distribut": [10, 201, 228], "randomindexedsymbol": 10, "discretemarkovchain": 10, "absorbing_probabilit": 10, "util": [10, 41, 56, 57, 76, 95, 146, 203, 226, 245, 252, 264, 272], "misc": [10, 36], "find_execut": 10, "mutabl": 10, "diffgeom": 10, "unicod": [10, 284], "pretti": [10, 208, 284], "stringpict": 10, "prettyform": 10, "pretty_symbologi": 10, "xstr": 10, "pass": 10, "set": [10, 15, 25, 28, 37, 71, 192, 216, 227, 284], "oper": [10, 12, 81, 95, 151, 160, 162, 163, 184, 189, 192, 218, 229, 235, 257, 259, 260, 274, 281], "longer": 10, "accept": 10, "arg": [10, 280], "variou": [10, 207], "randtest": 10, "mix": 10, "polynomi": [10, 67, 81, 196, 198, 199, 200, 201, 203, 204, 205, 207, 226, 285], "express": [10, 12, 24, 25, 27, 41, 71, 78, 81, 89, 92, 101, 115, 198, 207, 230, 258, 274, 280], "binari": 10, "print_cycl": 10, "flag": 10, "combinator": [10, 46], "permut": [10, 50, 51], "string": [10, 18, 29, 274], "fallback": 10, "sympifi": [10, 59], "creat": [10, 12, 20, 27, 95], "an": [10, 25, 27, 71, 123, 178, 218, 227, 280], "indefinit": 10, "eq": [10, 25], "tensor": [10, 55, 67, 172, 231, 234, 235], "fun_ev": 10, "__call__": 10, "tensortyp": 10, "dummy_fmt": 10, "tensorindextyp": 10, "metric": 10, "get_kronecker_delta": 10, "get_epsilon": 10, "tensorsymmetri": 10, "tensorhead": 10, "unit": [10, 177, 178, 179, 181], "quantiti": [10, 176, 178, 180, 258], "is_emptyset": 10, "productset": 10, "iter": [10, 216, 246], "set_potential_energi": 10, "mechan": [10, 18, 104, 113, 116, 124, 133, 134, 135, 136, 137, 138, 139, 140, 141, 160, 228], "condit": [10, 84, 216], "conditionset": 10, "max_degre": 10, "get_upper_degre": 10, "properti": [10, 18, 195], "multivariate_result": 10, "dixonresult": 10, "rh": 10, "default": 10, "0": 10, "tupl": [10, 12, 14, 23, 204], "lambda": 10, "evalu": [10, 12, 20, 63, 81, 140, 280], "differentiate_finit": 10, "data": 10, "clear_cach": 10, "clear_subproduct": 10, "keyword": [10, 12], "is_diagonaliz": 10, "row": [10, 281], "col": 10, "jordan_block": 10, "dimens": [10, 71, 175, 178], "scale_factor": 10, "quanit": 10, "classof": 10, "a2idx": 10, "from": [10, 12, 24, 25, 26, 29, 207, 230], "dot": [10, 284], "product": [10, 62, 161, 172, 229, 259], "column": [10, 281], "vector": [10, 26, 49, 133, 182, 184, 186, 189, 190, 191, 192, 201, 253, 254, 256, 257, 258, 260, 261, 262, 263], "geometri": [10, 61, 71, 195], "line3d": 10, "equat": [10, 22, 24, 25, 26, 27, 28, 29, 135, 136, 137, 176, 196, 221, 226, 227, 286], "need": [10, 178], "k": [10, 199], "modul": [10, 108, 143, 182, 190, 195, 196, 197, 198, 201, 203, 204, 221, 224, 225, 227, 240], "arrai": [10, 229, 230], "conv_": 10, "renam": 10, "from_": 10, "glossari": 11, "gotcha": [12, 18, 123, 277], "pitfal": 12, "introduct": [12, 16, 33, 40, 41, 42, 49, 61, 71, 89, 123, 140, 178, 189, 191, 194, 195, 196, 203, 207, 262, 279], "equal": [12, 24, 25, 277], "sign": [12, 277], "doubl": 12, "variabl": [12, 23, 29, 194, 228, 258], "assign": 12, "between": [12, 18, 180, 198], "symbol": [12, 18, 19, 20, 23, 24, 26, 59, 78, 137, 141, 193, 198, 204, 207, 227, 277, 279], "python": [12, 41], "number": [12, 37, 45, 59, 62, 63, 84, 99, 198, 203, 207, 264, 269], "v": [12, 19, 198], "float": [12, 63], "ration": [12, 198, 199, 204, 207, 210, 224, 285], "immut": [12, 93], "invers": [12, 20, 65, 84], "trig": 12, "sqrt": 12, "special": [12, 17, 41, 67, 204, 216, 285], "dictionari": [12, 14, 28], "help": 12, "within": 12, "solv": [14, 22, 23, 24, 25, 26, 27, 28, 29, 103, 196, 203, 226, 227, 286], "output": [14, 113, 227], "empti": 14, "Of": 14, "valu": [14, 19, 29], "boolean": [14, 19, 89], "classif": 15, "kind": [15, 59], "func": [15, 280], "finit": [16, 39, 42, 195, 198, 201, 203, 207, 218, 228, 275], "differ": [16, 18, 39, 140, 198, 258, 275], "approxim": [16, 41], "deriv": [16, 192, 229, 260, 275], "A": [16, 125, 126, 129, 130, 131, 132, 137, 279, 286], "direct": [16, 260], "topic": [17, 113, 182, 264, 271], "old": [18, 198], "system": [18, 23, 27, 28, 107, 128, 141, 175, 177, 178, 181, 224, 226, 257, 258, 260, 262], "appli": [18, 84, 218], "input": [18, 227], "predic": [18, 36, 37], "abov": 18, "definit": [18, 20, 77], "implic": 18, "interpret": 18, "other": [18, 20, 31, 78, 189, 258], "is_": 18, "implement": [18, 84, 189, 208, 218, 240, 241, 257, 260], "limit": [18, 23, 24, 83, 123, 213, 215, 275], "combin": [18, 81], "fuzzi": 19, "three": [19, 71], "bool": 19, "custom": [20, 194, 208], "easi": 20, "case": [20, 227], "fulli": 20, "defin": 20, "automat": [20, 207], "eval": 20, "remind": 20, "kei": [20, 140, 280], "numer": [20, 27, 29, 63, 81, 86, 100, 113, 140], "evalf": [20, 59, 100, 274], "rewrit": [20, 41, 209, 285], "simplif": [20, 63, 89, 217, 285], "doit": 20, "expand": [20, 207, 209, 285], "differenti": [20, 61, 81, 113, 226, 227, 286], "as_real_imag": 20, "miscellan": [20, 65, 71, 249], "_eval_": 20, "complet": [20, 123], "versin": 20, "divid": 20, "fuse": 20, "multipli": 20, "add": [20, 59], "fma": 20, "addit": [20, 81], "tip": [20, 274, 275, 277, 280, 281], "reduc": [23, 207], "One": [23, 27], "inequ": [23, 223, 226, 227], "algebra": [23, 24, 25, 26, 28, 33, 88, 95, 148, 192, 195, 198, 203, 207, 226, 286], "altern": [23, 24, 26, 27, 28, 192], "consid": [23, 24, 26, 27, 28], "guidanc": [23, 24, 25, 26, 27, 28, 29], "includ": [23, 29], "Be": [23, 24, 25, 26, 27], "result": [23, 24, 25, 26, 27, 28, 207], "extract": [23, 24, 26], "decompos": 23, "reduct": [23, 218], "can": [23, 24, 25, 27, 28, 29], "interest": [23, 279], "per": 23, "That": [23, 24, 25, 27, 28, 29], "all": [23, 24, 25, 27, 28], "return": [23, 227], "period": 23, "which": [23, 25, 28, 100, 208], "cannot": [23, 25, 28], "satisfi": 23, "analyt": [23, 160], "report": [23, 24, 26, 27], "problem": [23, 24, 26, 27, 103, 203, 259], "diophantin": [24, 221, 226, 227], "zero": [24, 25, 29, 107, 201, 207, 281], "specifi": [24, 194], "order": [24, 37, 204, 215, 218], "solut": [24, 25, 26, 27, 28, 29, 160, 227, 259], "work": [24, 26, 71, 207], "With": [24, 25, 26, 27, 28, 29], "verifi": [24, 263], "programmat": [24, 25], "No": [24, 25, 26], "your": 25, "Into": [25, 27, 28], "put": 25, "form": [25, 28, 29, 89, 96, 137, 230], "restrict": 25, "domain": [25, 196, 198, 199, 204, 207, 227], "explicitli": 25, "repres": [25, 29, 84, 168, 198, 203], "infinit": [25, 227], "substitut": [25, 27, 113, 182, 274], "solveset": [25, 227], "necessarili": 25, "interrog": 25, "speed": [25, 26, 28, 29, 113, 137], "up": [25, 26, 28, 29, 284], "close": [25, 28, 29], "usual": 26, "must": 26, "squar": [26, 196], "sever": 26, "same": 26, "element": [26, 137, 198, 203], "find": [27, 203, 204], "complex": [27, 65, 198], "root": [27, 204], "real": [27, 198], "ensur": [27, 29, 227], "found": 27, "given": [27, 28], "interv": [27, 194], "increas": 27, "precis": 27, "scipi": 27, "linear": [28, 81, 95, 113, 119, 137, 138, 178, 207], "nonlinear": 28, "you": 29, "might": 29, "exact": 29, "consist": 29, "ani": [29, 227], "denomin": 29, "do": [29, 227], "simplifi": [29, 41, 201, 219, 220, 285], "welcom": 30, "": [30, 118, 127, 130, 131, 132, 135, 136, 137, 158, 169, 207, 217, 226, 227, 258, 263, 282], "tutori": [30, 221, 273, 278], "anaconda": 31, "mpmath": 31, "question": 31, "abc": 32, "caveat": [32, 101], "quaternion": 33, "ask": 34, "assum": 35, "queri": 36, "content": [36, 46, 66, 79, 85, 200, 212, 222, 231], "perform": 36, "improv": [36, 123], "common": [37, 90, 113, 182, 207, 208, 209], "calculu": [37, 39, 192, 275], "theori": [37, 40, 99, 264, 269], "refin": 38, "singular": [39, 103], "weight": 39, "categori": 40, "base": [40, 61, 95, 195, 196, 207, 214, 227], "diagram": 40, "draw": 40, "codegen": [41, 241], "tool": [41, 98], "abstract": [41, 104, 108, 110, 133, 143, 160, 190, 199], "syntax": 41, "tree": [41, 198, 208, 280], "ast": [41, 123], "predefin": 41, "node": 41, "c": [41, 208], "cfunction": 41, "specif": 41, "cnode": 41, "cxxnode": 41, "fortran": [41, 208], "fnode": 41, "algorithm": [41, 42, 158, 169, 201, 204, 210, 215, 218], "pyutil": 41, "cutil": 41, "futil": 41, "present": [42, 49], "group": [42, 44, 47, 49, 50, 178], "overview": [42, 49, 84], "facil": 42, "construct": [42, 49, 230], "free": [42, 196], "word": [42, 49], "coset": 42, "enumer": [42, 64], "todd": 42, "coxet": 42, "cosett": 42, "compress": 42, "standard": 42, "subgroup": 42, "index": [42, 49, 230, 233], "low": 42, "reidemeist": 42, "schreier": 42, "bibliographi": [42, 49], "grai": 43, "constructor": [44, 204, 281], "nilpot": 45, "abelian": 45, "cyclic": 45, "name": 47, "partit": [48, 246], "polycycl": 49, "polycyclicgroup": 49, "collector": 49, "comput": [49, 84, 100, 160, 207, 279], "minim": [49, 203], "uncollect": 49, "subword": 49, "collect": [49, 209, 285], "expon": [49, 207], "depth": [49, 71], "lead": 49, "polyhedron": 52, "prufer": 53, "sequenc": [53, 81, 201, 204, 213, 214], "subset": [54, 62], "canonic": 55, "concret": 58, "hypergeometr": [58, 67, 78, 81, 210, 218], "term": [58, 207, 209, 215], "cach": 59, "basic": [59, 63, 95, 184, 196, 198, 204, 216, 257, 264, 265, 274, 281], "singleton": [59, 214, 216], "power": [59, 210, 216, 279, 285], "mul": 59, "mod": 59, "multidimension": 59, "contain": 59, "exprtool": 59, "sort": 59, "random": [59, 228], "cryptographi": 60, "discret": [62, 228], "transform": [62, 84, 86, 101, 258], "fast": 62, "fourier": [62, 211], "theoret": 62, "walsh": 62, "hadamard": 62, "m\u00f6biu": 62, "convolut": 62, "cover": 62, "intersect": [62, 71], "accuraci": 63, "error": [63, 67], "handl": [63, 227], "sum": 63, "combinatori": 64, "elementari": [65, 195, 214, 216], "trigonometr": [65, 67, 217, 285], "hyperbol": 65, "integ": [65, 198], "exponenti": [65, 67, 285], "piecewis": 65, "dirac": 67, "delta": 67, "discontinu": 67, "gamma": [67, 110], "beta": 67, "fresnel": 67, "logarithm": [67, 285], "bessel": 67, "airi": 67, "b": 67, "spline": 67, "riemann": 67, "zeta": 67, "ellipt": 67, "mathieu": 67, "orthogon": [67, 204, 260], "jacobi": 67, "gegenbau": 67, "chebyshev": 67, "legendr": 67, "hermit": 67, "laguerr": 67, "spheric": 67, "harmon": [67, 149, 174], "curv": 68, "ellips": 69, "entiti": [70, 71, 194], "avail": 71, "usag": [71, 123, 141, 198, 259], "median": 71, "pappu": 71, "hexagon": 71, "theorem": [71, 84, 263], "futur": [71, 113, 123, 182], "truth": [71, 89], "beyond": 71, "visual": [71, 140], "line": 72, "plane": [73, 84], "polygon": [75, 86], "about": [77, 227, 258, 286], "holonom": [77, 78, 79, 81, 82, 128], "convert": [78, 81, 198, 274], "represent": [78, 82, 178, 192, 198], "meijer": [78, 81, 84, 218], "g": [78, 81, 84, 218], "intern": [80, 84, 86, 198, 201, 203, 221], "multipl": [81, 192, 203], "composit": 81, "seri": [81, 194, 205, 210, 211, 212, 215, 275], "expans": [81, 215, 218, 275], "current": 83, "polar": [84, 145], "branch": 84, "argand": 84, "tabl": [84, 89, 218], "lookup": 84, "mellin": 84, "converg": 84, "laplac": 84, "thi": [84, 227], "valid": 84, "exist": 84, "formula": [84, 218], "todo": 86, "bug": 86, "over": [86, 207, 216], "polytop": 86, "For": 86, "2d": 86, "polyhedra": 86, "session": 87, "lie": [88, 224], "equival": [89, 140], "manipul": [89, 95, 115, 200, 201, 204, 205, 227, 280], "infer": 89, "dens": [91, 198, 199, 201], "block": 92, "immutablematrix": 93, "except": [95, 101, 201, 244], "numpi": 95, "normal": [96, 207], "spars": [97, 98, 198, 199, 201], "immutablesparsematrix": 97, "ntheori": 99, "ecm": 99, "q": 99, "sub": 100, "ufuncifi": 100, "aesara": [100, 208], "so": 100, "mathrm": [101, 284], "runtim": 101, "beam": [102, 103, 104], "bend": 103, "continuum": 104, "truss": [104, 105], "control": [106, 107, 108, 109, 194], "pole": 107, "bode": 107, "impuls": 107, "respons": [107, 208], "step": [107, 227], "ramp": 107, "lti": 109, "high": 110, "energi": [110, 138], "hydrogen": 111, "wavefunct": 111, "potenti": [113, 137, 138, 182, 189, 260], "issu": [113, 123, 137, 182, 281], "advanc": [113, 182, 207, 280, 281], "featur": [113, 182, 276], "choic": 113, "acceler": [113, 182, 191, 215], "interfac": [113, 182, 194, 228], "bodi": [114, 138, 263], "framework": [117, 134], "kane": [118, 127, 130, 131, 135, 137], "lagrang": [118, 127, 132, 136, 137], "mass": [120, 138, 263], "inertia": [120, 138, 182], "particl": [120, 138, 164], "rigidbodi": 120, "mechanics_print": 121, "mprint": 121, "mpprint": 121, "mlatex": 121, "symbolicsystem": [122, 141], "autolev": [123, 140], "dynam": 123, "onlin": 123, "fix": 123, "switch": 123, "bicycl": 125, "four": 126, "bar": 126, "linkag": 126, "nonminim": 127, "pendulum": 127, "multi": 128, "degre": 128, "freedom": 128, "roll": [129, 130, 131, 132], "disc": [129, 130, 131, 132], "constraint": 131, "forc": 131, "classic": [133, 201], "jointsmethod": 134, "structur": [135, 136, 178, 221], "background": 137, "directli": [137, 258], "new_method": 137, "kwarg": 137, "a_and_b": 137, "true": 137, "slow": 137, "ha": 137, "nan": 137, "zoo": 137, "oo": 137, "further": [137, 277], "rigid": 138, "dyadic": [138, 182, 257, 258], "momentum": 138, "angular": [138, 191], "momenta": 138, "kinet": 138, "lagrangian": 138, "user": [140, 221, 224, 225], "rough": 140, "link": 140, "gaussian": [142, 198, 199, 207], "optic": [142, 143], "medium": 144, "wave": 147, "pauli": 148, "quantum": [149, 160, 174], "oscil": [149, 174], "d": [149, 174], "anticommut": 150, "cartesian": 151, "state": [151, 160, 163, 171], "clebsch": 152, "gordan": 152, "coeffici": [152, 201], "circuit": 153, "commut": [154, 195], "constant": [155, 178], "dagger": 156, "gate": 157, "grover": 158, "hilbert": 159, "space": [159, 178, 218], "inner": 161, "helper": [163, 208], "box": 164, "qappli": 165, "qft": 166, "qubit": 167, "shor": 169, "spin": 170, "second": 173, "quantiz": 173, "dimension": 176, "analysi": 176, "philosophi": 178, "behind": 178, "literatur": [178, 202, 207], "prefix": 179, "convers": 180, "referencefram": [182, 192], "dynamicsymbol": 182, "essenti": [183, 185, 253, 256], "field": [184, 189, 198, 201, 203, 207, 260, 262], "kinemat": [187, 191], "kinematic_equ": 187, "scalar": [189, 260, 262], "curl": [189, 260], "diverg": [189, 260, 263], "gradient": [189, 260], "conserv": [189, 260], "solenoid": [189, 260], "veloc": 191, "basi": [192, 201, 203], "wigner": 193, "credit": 193, "copyright": 193, "author": 193, "plotgrid": 194, "pyglet": 194, "mode": 194, "color": 194, "geometr": 194, "ascii": [194, 284], "art": 194, "agca": 195, "ring": [195, 198, 199], "ideal": 195, "homomorph": [195, 203], "syzygi": 195, "extens": [195, 207], "concept": 196, "divis": 196, "factori": 196, "euclidean": 196, "gcd": [196, 201, 207], "lcm": 196, "factor": [196, 201, 207, 285], "groebner": [196, 201], "introduc": [197, 198], "domainmatrix": 197, "dup": 198, "dmp": 198, "polyr": 198, "polynomialr": 198, "choos": 198, "unifi": 198, "gf": 199, "p": [199, 203], "zz": 199, "qq": 199, "mpq": 199, "zz_i": 199, "qq_i": 199, "rr": 199, "cc": 199, "x": 199, "ex": 199, "quotient": 199, "level": 201, "multivari": [201, 207], "univari": [201, 207], "remaind": 201, "subresult": 201, "configur": 201, "modular": 201, "undocu": 201, "main": 203, "prime": 203, "decomposit": [203, 204, 207], "adic": 203, "valuat": 203, "subfield": 203, "As": 203, "arithmet": 203, "extra": 204, "monomi": 204, "encod": 204, "formal": [204, 210], "appel": 204, "partial": [204, 207, 226, 227], "fraction": [204, 207, 285], "dispers": 204, "rs_seri": 205, "wester": 207, "articl": 207, "simpl": 207, "support": 207, "back": 207, "cyclotom": 207, "gr\u00f6bner": 207, "mistak": 208, "prettyprint": 208, "rcodeprint": 208, "smt": 208, "lib": 208, "mapl": 208, "javascript": 208, "julia": 208, "octav": 208, "matlab": 208, "rust": 208, "gtk": 208, "lambdaprint": 208, "latexprint": 208, "mathmlprint": 208, "pythoncodeprint": 208, "pythonprint": 208, "srepr": [208, 284], "strprinter": 208, "preview": 208, "codeprint": 208, "preced": 208, "dotprint": 208, "subexpress": 209, "detect": 209, "compound": [214, 216, 228], "recurs": [214, 280], "gruntz": 215, "more": [215, 258, 279], "intuit": 215, "residu": 215, "setkind": 216, "hongguang": 217, "fu": 217, "rule": [217, 259], "notat": 218, "increment": 218, "decrement": 218, "indic": 218, "around": 218, "loos": 218, "end": 218, "confluenc": 218, "extend": 218, "od": [224, 226, 227], "hint": [224, 225], "heurist": 224, "riccati": 224, "inform": [224, 225], "pde": [225, 226, 227], "ordinari": [226, 227], "deutil": 226, "recurr": 226, "de": [226, 227], "wrong": 227, "why": [227, 279], "we": 227, "emploi": 227, "search": 227, "deal": 227, "where": 227, "known": 227, "plan": 227, "transolv": 227, "continu": [228, 285], "stochast": 228, "process": 228, "dim": [229, 230], "contract": 229, "diagon": [229, 281], "explicit": 230, "pytest": 237, "randomis": 238, "detail": [240, 241, 257], "routin": 241, "decor": 242, "enum": 243, "variat": 246, "memoiz": 248, "pkgdata": 250, "inspect": 251, "time": 252, "orient": [255, 258], "locat": 258, "coordsys3d": 258, "orient_new": 258, "AND": 258, "quadrilater": 259, "third": 259, "del": [259, 260], "curvilinear": 260, "applic": 263, "calcul": 263, "perimet": 263, "surfac": 263, "area": 263, "volum": 263, "flux": 263, "stoke": 263, "introductori": [273, 278], "quick": [274, 275, 277, 280, 281], "two": 277, "final": 277, "read": 277, "understand": 280, "through": 280, "invari": 280, "walk": 280, "prevent": 280, "shape": 281, "access": 281, "delet": 281, "insert": 281, "determin": 281, "rref": 281, "nullspac": 281, "columnspac": 281, "eigenvalu": 281, "eigenvector": 281, "next": 282, "preliminari": 283, "exercis": 283, "str": 284, "mathml": 284, "cancel": 285, "apart": 285, "trigsimp": 285, "expand_trig": 285, "powsimp": 285, "expand_power_exp": 285, "expand_power_bas": 285, "powdenest": 285, "expand_log": 285, "logcombin": 285, "expand_func": 285, "hyperexpand": 285, "combsimp": 285, "gammasimp": 285}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Citing SymPy": [[0, "citing-sympy"]], "Build the Documentation": [[1, "build-the-documentation"]], "Required dependencies": [[1, "required-dependencies"]], "Docker": [[1, "docker"], [1, "id3"], [1, "id4"]], "Debian/Ubuntu": [[1, "debian-ubuntu"]], "Fedora": [[1, "fedora"]], "Mac": [[1, "mac"]], "Windows 10": [[1, "windows-10"]], "Build the Docs": [[1, "build-the-docs"]], "Local Installation": [[1, "local-installation"], [1, "id5"]], "SymPy Logos": [[1, "sympy-logos"]], "View the Docs": [[1, "view-the-docs"]], "Auto-Rebuild with the Live Server": [[1, "auto-rebuild-with-the-live-server"]], "PDF Documentation": [[1, "pdf-documentation"]], "Debugging": [[2, "debugging"]], "Dependencies": [[3, "dependencies"]], "Hard Dependencies": [[3, "hard-dependencies"]], "Optional Dependencies": [[3, "optional-dependencies"]], "Recommended Optional Dependencies": [[3, "recommended-optional-dependencies"]], "Interactive Use": [[3, "interactive-use"]], "Printing": [[3, "printing"], [20, "printing"], [87, "module-sympy.interactive.printing"], [113, "printing"], [182, "printing"], [208, "printing"], [284, "printing"]], "Parsing": [[3, "parsing"], [101, "module-sympy.parsing"]], "Logic": [[3, "logic"], [89, "module-sympy.logic"], [264, "logic"], [267, "logic"]], "Plotting": [[3, "plotting"], [194, "module-sympy.plotting.plot"]], "lambdify": [[3, "lambdify"], [274, "lambdify"]], "Code Generation": [[3, "code-generation"], [41, "code-generation"], [264, "code-generation"], [266, "code-generation"]], "Autowrap": [[3, "autowrap"], [41, "autowrap"]], "Code Printers": [[3, "code-printers"]], "Testing-Only Dependencies": [[3, "testing-only-dependencies"]], "Statistics": [[3, "statistics"]], "Optional SymEngine Backend": [[3, "optional-symengine-backend"]], "Experimental Rubi Integrator": [[3, "experimental-rubi-integrator"]], "Sage": [[3, "sage"]], "Development Dependencies": [[3, "development-dependencies"]], "Getting the Source Code": [[3, "getting-the-source-code"]], "Running the Tests": [[3, "running-the-tests"]], "Building the Documentation": [[3, "building-the-documentation"]], "Running the Benchmarks": [[3, "running-the-benchmarks"]], "Deprecation Policy": [[4, "deprecation-policy"]], "What is a deprecation?": [[4, "what-is-a-deprecation"]], "Try to avoid backwards incompatible changes in the first place": [[4, "try-to-avoid-backwards-incompatible-changes-in-the-first-place"]], "When does a change require deprecation?": [[4, "when-does-a-change-require-deprecation"]], "Public API": [[4, null]], "Not Public API": [[4, null]], "The purpose of deprecation": [[4, "the-purpose-of-deprecation"]], "When it is not technically possible to deprecate": [[4, "when-it-is-not-technically-possible-to-deprecate"]], "How long should deprecations last?": [[4, "how-long-should-deprecations-last"]], "How to deprecate code": [[4, "how-to-deprecate-code"]], "Checklist": [[4, "checklist"]], "Adding the deprecation to the code": [[4, "adding-the-deprecation-to-the-code"]], "Documenting a deprecation": [[4, "documenting-a-deprecation"]], "Release notes entry": [[4, "release-notes-entry"]], "Development Environment Setup": [[5, "development-environment-setup"]], "Git Setup": [[5, "git-setup"]], "Get the SymPy Code": [[5, "get-the-sympy-code"]], "Virtual Environment Setup": [[5, "virtual-environment-setup"]], "Run the Tests": [[5, "run-the-tests"]], "SymPy Docstrings Style Guide": [[6, "sympy-docstrings-style-guide"]], "General Guidelines": [[6, "general-guidelines"], [7, "general-guidelines"]], "Formatting": [[6, "formatting"]], "Sections": [[6, "sections"]], "1. Single-Sentence Summary": [[6, "single-sentence-summary"]], "2. Explanation Section": [[6, "explanation-section"]], "3. Examples Section": [[6, "examples-section"]], "4. Parameters Section": [[6, "parameters-section"]], "5. See Also Section": [[6, "see-also-section"]], "6. References Section": [[6, "references-section"]], "Sample Docstring": [[6, "sample-docstring"]], "Docstrings for Classes that are Mathematical Functions": [[6, "docstrings-for-classes-that-are-mathematical-functions"]], "Best Practices for Writing Docstrings": [[6, "best-practices-for-writing-docstrings"]], "Importing Docstrings into the Sphinx Documentation": [[6, "importing-docstrings-into-the-sphinx-documentation"]], "Cross-Referencing": [[6, "cross-referencing"]], "Docstring Style Guide": [[7, "docstring-style-guide"]], "Types of Documentation": [[7, "types-of-documentation"]], "Narrative Documentation Guidelines": [[7, "narrative-documentation-guidelines"]], "Documentation using Markdown": [[7, "documentation-using-markdown"]], "Best Practices for Writing Documentation": [[7, "best-practices-for-writing-documentation"]], "Formatting Preferences": [[7, "formatting-preferences"]], "Math": [[7, "math"]], "LaTeX Recommendations": [[7, "latex-recommendations"]], "Code": [[7, "code"]], "Headings": [[7, "headings"]], "Style Preferences": [[7, "style-preferences"]], "Spelling and Punctuation": [[7, "spelling-and-punctuation"]], "Capitalization": [[7, "capitalization"]], "Tone Preferences": [[7, "tone-preferences"]], "Contributing": [[8, "contributing"], [30, "contributing"]], "Making a Contribution": [[9, "making-a-contribution"]], "List of active deprecations": [[10, "list-of-active-deprecations"]], "Silencing SymPy Deprecation Warnings": [[10, "silencing-sympy-deprecation-warnings"]], "Version 1.12": [[10, "version-1-12"]], "New Joint coordinate format": [[10, "new-joint-coordinate-format"]], "New Joint intermediate frames": [[10, "new-joint-intermediate-frames"]], "Change in joint attachment point argument": [[10, "change-in-joint-attachment-point-argument"]], "Version 1.11": [[10, "version-1-11"]], "New Mathematica code parser": [[10, "new-mathematica-code-parser"]], "Redundant static methods in carmichael": [[10, "redundant-static-methods-in-carmichael"]], "The check argument to HadamardProduct, MatAdd and MatMul": [[10, "the-check-argument-to-hadamardproduct-matadd-and-matmul"]], "Version 1.10": [[10, "version-1-10"]], "Some traversal functions have been moved": [[10, "some-traversal-functions-have-been-moved"]], "sympy.core.trace": [[10, "sympy-core-trace"]], "The sympy.core.compatibility submodule": [[10, "the-sympy-core-compatibility-submodule"]], "Version 1.9": [[10, "version-1-9"]], "expr_free_symbols": [[10, "expr-free-symbols"]], "sympy.stats.sample(numsamples=n)": [[10, "sympy-stats-sample-numsamples-n"]], "sympy.polys.solvers.RawMatrix": [[10, "sympy-polys-solvers-rawmatrix"]], "Non-Expr objects in a Matrix": [[10, "non-expr-objects-in-a-matrix"]], "The get_segments attribute of plotting objects": [[10, "the-get-segments-attribute-of-plotting-objects"]], "The mdft function in sympy.physics.matrices": [[10, "the-mdft-function-in-sympy-physics-matrices"]], "The private SparseMatrix._smat and DenseMatrix._mat attributes": [[10, "the-private-sparsematrix-smat-and-densematrix-mat-attributes"]], "laplace_transform of a Matrix with noconds=False": [[10, "laplace-transform-of-a-matrix-with-noconds-false"]], "Version 1.8": [[10, "version-1-8"]], "sympy.printing.theanocode": [[10, "sympy-printing-theanocode"]], "sympy.assumptions.handlers.AskHandler and related methods": [[10, "sympy-assumptions-handlers-askhandler-and-related-methods"]], "Version 1.7.1": [[10, "version-1-7-1"]], "Calling sympy.stats.StochasticProcess.distribution with RandomIndexedSymbol": [[10, "calling-sympy-stats-stochasticprocess-distribution-with-randomindexedsymbol"]], "Version 1.7": [[10, "version-1-7"]], "sympy.stats.DiscreteMarkovChain.absorbing_probabilites()": [[10, "sympy-stats-discretemarkovchain-absorbing-probabilites"]], "sympy.utilities.misc.find_executable()": [[10, "sympy-utilities-misc-find-executable"]], "Mutable attributes in sympy.diffgeom": [[10, "mutable-attributes-in-sympy-diffgeom"]], "The unicode argument and attribute to sympy.printing.pretty.stringpict.prettyForm and the sympy.printing.pretty.pretty_symbology.xstr function": [[10, "the-unicode-argument-and-attribute-to-sympy-printing-pretty-stringpict-prettyform-and-the-sympy-printing-pretty-pretty-symbology-xstr-function"]], "Passing the arguments to lambdify as a set": [[10, "passing-the-arguments-to-lambdify-as-a-set"]], "Core operators no longer accept non-Expr args": [[10, "core-operators-no-longer-accept-non-expr-args"]], "Version 1.6": [[10, "version-1-6"]], "Various sympy.utilities submodules have moved": [[10, "various-sympy-utilities-submodules-have-moved"]], "sympy.testing.randtest": [[10, "sympy-testing-randtest"]], "Mixing Poly and non-polynomial expressions in binary operations": [[10, "mixing-poly-and-non-polynomial-expressions-in-binary-operations"]], "The print_cyclic flag of sympy.combinatorics.Permutation": [[10, "the-print-cyclic-flag-of-sympy-combinatorics-permutation"]], "Using integrate with Poly": [[10, "using-integrate-with-poly"]], "The string fallback in sympify()": [[10, "the-string-fallback-in-sympify"]], "Creating an indefinite Integral with an Eq argument": [[10, "creating-an-indefinite-integral-with-an-eq-argument"]], "Version 1.5": [[10, "version-1-5"]], "Tensor.fun_eval and Tensor.__call__": [[10, "tensor-fun-eval-and-tensor-call"]], "TensorType": [[10, "tensortype"]], "The dummy_fmt argument to TensorIndexType": [[10, "the-dummy-fmt-argument-to-tensorindextype"]], "The metric argument to TensorIndexType": [[10, "the-metric-argument-to-tensorindextype"]], "The get_kronecker_delta() and get_epsilon() methods of TensorIndexType": [[10, "the-get-kronecker-delta-and-get-epsilon-methods-of-tensorindextype"]], "The tensorsymmetry() function": [[10, "the-tensorsymmetry-function"]], "The tensorhead() function": [[10, "the-tensorhead-function"]], "Methods to sympy.physics.units.Quantity": [[10, "methods-to-sympy-physics-units-quantity"]], "The is_EmptySet attribute of sets": [[10, "the-is-emptyset-attribute-of-sets"]], "ProductSet(iterable)": [[10, "productset-iterable"]], "The set_potential_energy method in sympy.physics.mechanics": [[10, "the-set-potential-energy-method-in-sympy-physics-mechanics"]], "Using a set for the condition in ConditionSet": [[10, "using-a-set-for-the-condition-in-conditionset"]], "The max_degree and get_upper_degree properties of sympy.polys.multivariate_resultants.DixonResultant": [[10, "the-max-degree-and-get-upper-degree-properties-of-sympy-polys-multivariate-resultants-dixonresultant"]], "Eq(expr) with the rhs defaulting to 0": [[10, "eq-expr-with-the-rhs-defaulting-to-0"]], "Non-tuple iterable for the first argument to Lambda": [[10, "non-tuple-iterable-for-the-first-argument-to-lambda"]], "The evaluate flag to differentiate_finite": [[10, "the-evaluate-flag-to-differentiate-finite"]], "Version 1.4": [[10, "version-1-4"]], "TensorIndexType.data and related methods": [[10, "tensorindextype-data-and-related-methods"]], "The clear_cache and clear_subproducts keywords to Matrix.is_diagonalizable": [[10, "the-clear-cache-and-clear-subproducts-keywords-to-matrix-is-diagonalizable"]], "The rows and cols keyword arguments to Matrix.jordan_block": [[10, "the-rows-and-cols-keyword-arguments-to-matrix-jordan-block"]], "Version 1.3": [[10, "version-1-3"]], "The source() function": [[10, "the-source-function"]], "The dimension and scale_factor arguments to sympy.physics.units.Quanitity": [[10, "the-dimension-and-scale-factor-arguments-to-sympy-physics-units-quanitity"]], "Importing classof and a2idx from sympy.matrices.matrices": [[10, "importing-classof-and-a2idx-from-sympy-matrices-matrices"]], "Version 1.2": [[10, "version-1-2"]], "Dot product of non-row/column vectors": [[10, "dot-product-of-non-row-column-vectors"]], "sympy.geometry.Line3D.equation no longer needs the k argument": [[10, "sympy-geometry-line3d-equation-no-longer-needs-the-k-argument"]], "Modules sympy.tensor.array.expressions.conv_* renamed to sympy.tensor.array.expressions.from_*": [[10, "modules-sympy-tensor-array-expressions-conv-renamed-to-sympy-tensor-array-expressions-from"]], "Glossary": [[11, "glossary"]], "Gotchas and Pitfalls": [[12, "gotchas-and-pitfalls"]], "Introduction": [[12, "introduction"], [16, "introduction"], [33, "introduction"], [40, "introduction"], [41, "introduction"], [42, "introduction"], [49, "introduction"], [61, "introduction"], [71, "introduction"], [89, "introduction"], [123, "introduction"], [140, "introduction"], [178, "introduction"], [189, "introduction"], [194, "introduction"], [195, "introduction"], [196, "introduction"], [203, "introduction"], [207, "introduction"], [262, "introduction"], [279, "introduction"]], "Equals Signs (=)": [[12, "equals-signs"]], "Single Equals Sign": [[12, "single-equals-sign"]], "Double Equals Signs": [[12, "double-equals-signs"]], "Variables": [[12, "variables"]], "Variables Assignment does not Create a Relation Between Expressions": [[12, "variables-assignment-does-not-create-a-relation-between-expressions"]], "Symbols": [[12, "symbols"], [277, "symbols"]], "Functions": [[12, "functions"], [66, "functions"], [229, "functions"]], "Symbolic Expressions": [[12, "symbolic-expressions"]], "Python numbers vs. SymPy Numbers": [[12, "python-numbers-vs-sympy-numbers"]], "Evaluating Expressions with Floats and Rationals": [[12, "evaluating-expressions-with-floats-and-rationals"]], "Immutability of Expressions": [[12, "immutability-of-expressions"]], "Mathematical Operators": [[12, "mathematical-operators"]], "Inverse Trig Functions": [[12, "inverse-trig-functions"]], "Sqrt is not a Function": [[12, "sqrt-is-not-a-function"]], "Special Symbols": [[12, "special-symbols"]], "Lists": [[12, "lists"]], "Dictionaries": [[12, "dictionaries"]], "Tuples": [[12, "tuples"]], "Keyword Arguments": [[12, "keyword-arguments"]], "Getting help from within SymPy": [[12, "getting-help-from-within-sympy"]], "help()": [[12, "help"]], "source()": [[12, "source"]], "Explanations": [[13, "explanations"], [30, "explanations"]], "Solve Output by Type": [[14, "solve-output-by-type"]], "Empty List": [[14, "empty-list"]], "List Of Values": [[14, "list-of-values"]], "Single Dictionary": [[14, "single-dictionary"]], "List of Tuples": [[14, "list-of-tuples"]], "List of Dictionaries": [[14, "list-of-dictionaries"]], "Boolean or Relational": [[14, "boolean-or-relational"]], "Classification of SymPy objects": [[15, "classification-of-sympy-objects"]], "class": [[15, "class"]], "kind": [[15, "kind"], [59, "module-sympy.core.kind"]], "sets and assumptions": [[15, "sets-and-assumptions"]], "func": [[15, "func"], [280, "func"]], "Finite Difference Approximations to Derivatives": [[16, "finite-difference-approximations-to-derivatives"]], "A Direct Method Using SymPy Matrices": [[16, "a-direct-method-using-sympy-matrices"]], "SymPy Special Topics": [[17, "sympy-special-topics"]], "Assumptions": [[18, "assumptions"], [20, "assumptions"], [36, "module-sympy.assumptions"]], "The (old) assumptions system": [[18, "the-old-assumptions-system"]], "Gotcha: symbols with different assumptions": [[18, "gotcha-symbols-with-different-assumptions"]], "Applying assumptions to string inputs": [[18, "applying-assumptions-to-string-inputs"]], "Predicates": [[18, "predicates"], [37, "id1"]], "Assumptions predicates for the (old) assumptions": [[18, "id28"]], "References for the above definitions": [[18, "references-for-the-above-definitions"]], "Implications": [[18, "implications"]], "Interpretation of the predicates": [[18, "interpretation-of-the-predicates"]], "Other is_* properties": [[18, "other-is-properties"]], "Implementing assumptions handlers": [[18, "implementing-assumptions-handlers"]], "Mechanism of the assumptions system": [[18, "mechanism-of-the-assumptions-system"]], "Limitations": [[18, "limitations"], [24, "limitations"], [83, "limitations"]], "Combining predicates with or": [[18, "combining-predicates-with-or"]], "Relations between different symbols": [[18, "relations-between-different-symbols"]], "Symbolic and fuzzy booleans": [[19, "symbolic-and-fuzzy-booleans"]], "Symbolic Boolean vs three valued bool": [[19, "symbolic-boolean-vs-three-valued-bool"]], "Three-valued logic with fuzzy bools": [[19, "three-valued-logic-with-fuzzy-bools"]], "Three-valued logic with symbolic Booleans": [[19, "three-valued-logic-with-symbolic-booleans"]], "Writing Custom Functions": [[20, "writing-custom-functions"]], "Easy Cases: Fully Symbolic or Fully Evaluated": [[20, "easy-cases-fully-symbolic-or-fully-evaluated"]], "The Fully Symbolic Case": [[20, "the-fully-symbolic-case"]], "The Fully Evaluated Case": [[20, "the-fully-evaluated-case"]], "Creating a Custom Function": [[20, "creating-a-custom-function"]], "Defining Automatic Evaluation with eval()": [[20, "defining-automatic-evaluation-with-eval"]], "Reminder": [[20, null]], "Best Practices for eval()": [[20, "best-practices-for-eval"]], "Key Point": [[20, null]], "Note": [[20, null]], "Numerical Evaluation with evalf()": [[20, "numerical-evaluation-with-evalf"]], "Rewriting and Simplification": [[20, "rewriting-and-simplification"]], "rewrite()": [[20, "rewrite"]], "doit()": [[20, "doit"]], "expand()": [[20, "expand"]], "Differentiation": [[20, "differentiation"]], "Other Methods": [[20, "other-methods"], [31, "other-methods"]], "inverse()": [[20, "inverse"]], "as_real_imag()": [[20, "as-real-imag"]], "Miscellaneous _eval_* methods": [[20, "miscellaneous-eval-methods"]], "Complete Examples": [[20, "complete-examples"]], "Versine": [[20, "versine"]], "Definition": [[20, "definition"], [20, "id2"], [20, "id4"], [77, "definition"]], "Examples": [[20, "examples"], [20, "id3"], [20, "id5"], [23, "examples"], [32, "examples"], [59, "examples"], [59, "id47"], [83, "examples"], [86, "examples"], [86, "id37"], [99, "examples"], [99, "id61"], [103, "examples"], [110, "examples"], [145, "examples"], [176, "examples"], [192, "examples"], [192, "id1"], [207, "examples"], [215, "examples"], [215, "id3"], [228, "examples"], [229, "examples"], [230, "examples"], [233, "examples"]], "divides": [[20, "divides"]], "Fused Multiply-Add (FMA)": [[20, "fused-multiply-add-fma"]], "Additional Tips": [[20, "additional-tips"]], "How-to Guides": [[21, "how-to-guides"], [30, "how-to-guides"]], "Solve Equations": [[22, "solve-equations"]], "Reduce One or a System of Inequalities for a Single Variable Algebraically": [[23, "reduce-one-or-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Alternatives to Consider": [[23, "alternatives-to-consider"], [24, "alternatives-to-consider"], [26, "alternatives-to-consider"], [27, "alternatives-to-consider"], [28, "alternatives-to-consider"]], "Reducing a System of Inequalities for a Single Variable Algebraically": [[23, "reducing-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Reducing One Inequality for a Single Variable Algebraically": [[23, "reducing-one-inequality-for-a-single-variable-algebraically"]], "Guidance": [[23, "guidance"], [24, "guidance"], [25, "guidance"], [26, "guidance"], [27, "guidance"], [28, "guidance"]], "Include the Variable to Be Reduced for in the Function Call": [[23, "include-the-variable-to-be-reduced-for-in-the-function-call"]], "Reduce a System of Inequalities Algebraically": [[23, "reduce-a-system-of-inequalities-algebraically"]], "Use the Result": [[23, "use-the-result"]], "Extract a List of Decomposed Relations": [[23, "extract-a-list-of-decomposed-relations"]], "Extract a Tuple of Relations": [[23, "extract-a-tuple-of-relations"]], "Limitations of Inequality Reduction Using SymPy": [[23, "limitations-of-inequality-reduction-using-sympy"]], "SymPy Can Reduce for Only One Symbol of Interest Per Inequality": [[23, "sympy-can-reduce-for-only-one-symbol-of-interest-per-inequality"]], "Limitations on Types of Inequalities That SymPy Can Solve": [[23, "limitations-on-types-of-inequalities-that-sympy-can-solve"]], "Not All Results Are Returned for Periodic Functions": [[23, "not-all-results-are-returned-for-periodic-functions"]], "Not All Systems of Inequalities Can Be Reduced": [[23, "not-all-systems-of-inequalities-can-be-reduced"]], "Systems of Inequalities Which Cannot Be Satisfied": [[23, "systems-of-inequalities-which-cannot-be-satisfied"]], "Systems of Inequalities That Cannot Be Reduced Analytically": [[23, "systems-of-inequalities-that-cannot-be-reduced-analytically"]], "Inequalities Which Can Be Reduced Analytically, and SymPy Cannot Reduce": [[23, "inequalities-which-can-be-reduced-analytically-and-sympy-cannot-reduce"]], "Report a Problem": [[23, "report-a-problem"], [24, "report-a-problem"], [26, "report-a-problem"], [27, "report-a-problem"]], "Solve a Diophantine Equation Algebraically": [[24, "solve-a-diophantine-equation-algebraically"]], "Example of Solving a Diophantine Equation": [[24, "example-of-solving-a-diophantine-equation"]], "Diophantine Equation Can be Expressed as Expression That Equals Zero": [[24, "diophantine-equation-can-be-expressed-as-expression-that-equals-zero"]], "Specify the Order of Symbols in the Result": [[24, "specify-the-order-of-symbols-in-the-result"]], "Use the Solution Result": [[24, "use-the-solution-result"], [25, "use-the-solution-result"], [26, "use-the-solution-result"], [27, "use-the-solution-result"]], "Extract Expressions From the Result": [[24, "extract-expressions-from-the-result"]], "Work With Parameters": [[24, "work-with-parameters"]], "Verify a Solution": [[24, "verify-a-solution"]], "Programmatically Extract Parameter Symbols": [[24, "programmatically-extract-parameter-symbols"]], "Not All Equations Can Be Solved": [[24, "not-all-equations-can-be-solved"], [25, "not-all-equations-can-be-solved"]], "Equations With No Solution": [[24, "equations-with-no-solution"], [26, "equations-with-no-solution"]], "Solve an Equation Algebraically": [[25, "solve-an-equation-algebraically"], [25, "id1"]], "Make Your Equation Into an Expression That Equals Zero": [[25, "make-your-equation-into-an-expression-that-equals-zero"]], "Put Your Equation Into Eq Form": [[25, "put-your-equation-into-eq-form"]], "Restrict the Domain of Solutions": [[25, "restrict-the-domain-of-solutions"]], "Explicitly Represent Infinite Sets of Possible Solutions": [[25, "explicitly-represent-infinite-sets-of-possible-solutions"]], "Substitute Solutions From solve() Into an Expression": [[25, "substitute-solutions-from-solve-into-an-expression"]], "solveset() Solution Sets Cannot Necessarily Be Interrogated Programmatically": [[25, "solveset-solution-sets-cannot-necessarily-be-interrogated-programmatically"]], "Options That Can Speed up solve()": [[25, "options-that-can-speed-up-solve"], [28, "options-that-can-speed-up-solve"], [29, "options-that-can-speed-up-solve"]], "Equations With No Closed-Form Solution": [[25, "equations-with-no-closed-form-solution"]], "Equations Which Have a Closed-Form Solution, and SymPy Cannot Solve": [[25, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"], [28, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"]], "Solve a Matrix Equation Algebraically": [[26, "solve-a-matrix-equation-algebraically"]], "Solve a Matrix Equation": [[26, "solve-a-matrix-equation"]], "Matrix Usually Must Be Square": [[26, "matrix-usually-must-be-square"]], "Methods for Solving Matrix Equations": [[26, "methods-for-solving-matrix-equations"]], "Solving Several Matrix Equations With the Same Matrix": [[26, "solving-several-matrix-equations-with-the-same-matrix"]], "Work With Symbolic Matrices": [[26, "work-with-symbolic-matrices"]], "Speed up Solving Matrix Equations": [[26, "speed-up-solving-matrix-equations"]], "Use the Solution as a Vector": [[26, "use-the-solution-as-a-vector"]], "Extract Elements From the Solution": [[26, "extract-elements-from-the-solution"]], "Solve One or a System of Equations Numerically": [[27, "solve-one-or-a-system-of-equations-numerically"]], "Example of Numerically Solving an Equation": [[27, "example-of-numerically-solving-an-equation"]], "Find Complex Roots of a Real Function": [[27, "find-complex-roots-of-a-real-function"]], "Ensure the Root Found is in a Given Interval": [[27, "ensure-the-root-found-is-in-a-given-interval"]], "Solve a System of Equations Numerically": [[27, "solve-a-system-of-equations-numerically"]], "Increase Precision of the Solution": [[27, "increase-precision-of-the-solution"]], "Create a Function That Can Be Solved With SciPy": [[27, "create-a-function-that-can-be-solved-with-scipy"]], "Substitute the Result Into an Expression": [[27, "substitute-the-result-into-an-expression"]], "Not all Equations Can be Solved": [[27, "not-all-equations-can-be-solved"]], "Equations With no Solution": [[27, "equations-with-no-solution"]], "Solve a System of Equations Algebraically": [[28, "solve-a-system-of-equations-algebraically"]], "Examples of Solving a System of Equations Algebraically": [[28, "examples-of-solving-a-system-of-equations-algebraically"]], "Solve a System of Linear Equations Algebraically": [[28, "solve-a-system-of-linear-equations-algebraically"]], "Solve a System of Nonlinear Equations Algebraically": [[28, "solve-a-system-of-nonlinear-equations-algebraically"]], "Solve and Use Results in a Dictionary": [[28, "solve-and-use-results-in-a-dictionary"]], "Solve Into a Solution Given as a Dictionary": [[28, "solve-into-a-solution-given-as-a-dictionary"]], "Use a Solution Given as a Dictionary": [[28, "use-a-solution-given-as-a-dictionary"]], "Solve Results in a Set": [[28, "solve-results-in-a-set"]], "Not All Systems of Equations Can be Solved": [[28, "not-all-systems-of-equations-can-be-solved"]], "Systems of Equations With no Solution": [[28, "systems-of-equations-with-no-solution"]], "Systems of Equations With no Closed-Form Solution": [[28, "systems-of-equations-with-no-closed-form-solution"]], "Solving Guidance": [[29, "solving-guidance"]], "Numeric Solutions": [[29, "numeric-solutions"]], "Equations With no Closed-Form Solution": [[29, "equations-with-no-closed-form-solution"]], "When You Might Prefer a Numeric Solution": [[29, "when-you-might-prefer-a-numeric-solution"]], "Use Exact Values": [[29, "use-exact-values"]], "Include the Variable to be Solved for in the Function Call": [[29, "include-the-variable-to-be-solved-for-in-the-function-call"]], "Ensure Consistent Formatting From solve()": [[29, "ensure-consistent-formatting-from-solve"]], "Include Solutions Making Any Denominator Zero": [[29, "include-solutions-making-any-denominator-zero"]], "Do Not Simplify Solutions": [[29, "do-not-simplify-solutions"]], "Parse a String Representing the Equation": [[29, "parse-a-string-representing-the-equation"]], "Welcome to SymPy\u2019s documentation!": [[30, "welcome-to-sympy-s-documentation"]], "Installation": [[30, "installation"], [31, "installation"], [283, "installation"]], "Tutorials": [[30, "tutorials"], [273, "tutorials"]], "API Reference": [[30, "api-reference"], [240, "module-sympy.utilities.autowrap"], [241, "module-sympy.utilities.codegen"], [264, "api-reference"]], "Anaconda": [[31, "anaconda"]], "Git": [[31, "git"]], "Run SymPy": [[31, "run-sympy"]], "mpmath": [[31, "mpmath"]], "Questions": [[31, "questions"]], "abc": [[32, "module-sympy.abc"]], "Caveats": [[32, "caveats"]], "Algebras": [[33, "algebras"]], "Quaternion Reference": [[33, "module-sympy.algebras"]], "Ask": [[34, "module-sympy.assumptions.ask"]], "Assume": [[35, "module-sympy.assumptions.assume"]], "Predicate": [[36, "predicate"]], "Querying": [[36, "querying"]], "Contents": [[36, "contents"], [46, "contents"], [66, "contents"], [79, "contents"], [85, "contents"], [200, "contents"], [212, "contents"], [222, "contents"], [231, "contents"]], "Performance improvements": [[36, "performance-improvements"]], "Misc": [[36, "misc"]], "Common": [[37, "common"]], "Calculus": [[37, "calculus"], [39, "module-sympy.calculus"], [275, "calculus"]], "Matrix": [[37, "matrix"]], "Number Theory": [[37, "number-theory"], [99, "module-sympy.ntheory.generate"], [264, "number-theory"], [269, "number-theory"]], "Order": [[37, "order"]], "Sets": [[37, "sets"], [216, "sets"]], "Refine": [[38, "module-sympy.assumptions.refine"]], "Singularities": [[39, "singularities"]], "Finite difference weights": [[39, "finite-difference-weights"]], "Category Theory": [[40, "category-theory"]], "Base Class Reference": [[40, "module-sympy.categories"], [61, "base-class-reference"]], "Diagram Drawing": [[40, "module-sympy.categories.diagram_drawing"]], "Code printers (sympy.printing)": [[41, "code-printers-sympy-printing"]], "Codegen (sympy.utilities.codegen)": [[41, "codegen-sympy-utilities-codegen"]], "Classes and functions for rewriting expressions (sympy.codegen.rewriting)": [[41, "module-sympy.codegen.rewriting"]], "Tools for simplifying expressions using approximations (sympy.codegen.approximations)": [[41, "module-sympy.codegen.approximations"]], "Classes for abstract syntax trees (sympy.codegen.ast)": [[41, "module-sympy.codegen.ast"]], "AST Type Tree": [[41, "ast-type-tree"]], "Predefined types": [[41, "predefined-types"]], "Using the nodes": [[41, "using-the-nodes"]], "Special C math functions (sympy.codegen.cfunctions)": [[41, "module-sympy.codegen.cfunctions"]], "C specific AST nodes (sympy.codegen.cnodes)": [[41, "module-sympy.codegen.cnodes"]], "C++ specific AST nodes (sympy.codegen.cxxnodes)": [[41, "module-sympy.codegen.cxxnodes"]], "Fortran specific AST nodes (sympy.codegen.fnodes)": [[41, "module-sympy.codegen.fnodes"]], "Algorithms (sympy.codegen.algorithms)": [[41, "module-sympy.codegen.algorithms"]], "Python utilities (sympy.codegen.pyutils)": [[41, "module-sympy.codegen.pyutils"]], "C utilities (sympy.codegen.cutils)": [[41, "module-sympy.codegen.cutils"]], "Fortran utilities (sympy.codegen.futils)": [[41, "module-sympy.codegen.futils"]], "Finitely Presented Groups": [[42, "finitely-presented-groups"]], "Overview of Facilities": [[42, "overview-of-facilities"]], "The Construction of Finitely Presented Groups": [[42, "the-construction-of-finitely-presented-groups"]], "Free Groups and Words": [[42, "free-groups-and-words"]], "Construction of a Free Group": [[42, "construction-of-a-free-group"]], "Construction of words": [[42, "construction-of-words"]], "Coset Enumeration: The Todd-Coxeter Algorithm": [[42, "coset-enumeration-the-todd-coxeter-algorithm"]], "CosetTable": [[42, "cosettable"]], "Attributes of CosetTable": [[42, "attributes-of-cosettable"]], "Compression and Standardization": [[42, "compression-and-standardization"]], "Subgroups of Finite Index": [[42, "subgroups-of-finite-index"]], "Low Index Subgroups": [[42, "low-index-subgroups"]], "Constructing a presentation for a subgroup": [[42, "constructing-a-presentation-for-a-subgroup"]], "Reidemeister Schreier algorithm": [[42, "reidemeister-schreier-algorithm"]], "Bibliography": [[42, "bibliography"], [49, "bibliography"]], "Gray Code": [[43, "module-sympy.combinatorics.graycode"]], "Group constructors": [[44, "module-sympy.combinatorics.group_constructs"]], "Nilpotent, Abelian and Cyclic Numbers": [[45, "module-sympy.combinatorics.group_numbers"]], "Combinatorics": [[46, "combinatorics"]], "Named Groups": [[47, "module-sympy.combinatorics.named_groups"]], "Partitions": [[48, "module-sympy.combinatorics.partitions"]], "Polycyclic Groups": [[49, "polycyclic-groups"]], "Overview of functionalities": [[49, "overview-of-functionalities"]], "The Construction of Polycyclic Groups": [[49, "the-construction-of-polycyclic-groups"]], "Attributes of PolycyclicGroup": [[49, "attributes-of-polycyclicgroup"]], "The Construction of Collector": [[49, "the-construction-of-collector"]], "Attributes of Collector": [[49, "attributes-of-collector"]], "Computation of Minimal Uncollected Subword": [[49, "computation-of-minimal-uncollected-subword"]], "Computation of Subword Index": [[49, "computation-of-subword-index"]], "Computation of Collected Word": [[49, "computation-of-collected-word"]], "Computation of Polycyclic Presentation": [[49, "computation-of-polycyclic-presentation"]], "Computation of Exponent Vector": [[49, "computation-of-exponent-vector"]], "Depth of Polycyclic generator": [[49, "depth-of-polycyclic-generator"]], "Computation of Leading Exponent": [[49, "computation-of-leading-exponent"]], "Permutation Groups": [[50, "module-sympy.combinatorics.perm_groups"]], "Permutations": [[51, "module-sympy.combinatorics.permutations"]], "Generators": [[51, "module-sympy.combinatorics.generators"]], "Polyhedron": [[52, "module-sympy.combinatorics.polyhedron"]], "Prufer Sequences": [[53, "module-sympy.combinatorics.prufer"]], "Subsets": [[54, "module-sympy.combinatorics.subsets"]], "Tensor Canonicalization": [[55, "module-sympy.combinatorics.tensor_can"]], "Test Utilities": [[56, "module-sympy.combinatorics.testutil"]], "Utilities": [[57, "module-sympy.combinatorics.util"], [146, "module-sympy.physics.optics.utils"], [203, "utilities"], [245, "module-sympy.utilities"], [264, "utilities"], [272, "utilities"]], "Concrete": [[58, "concrete"]], "Hypergeometric terms": [[58, "hypergeometric-terms"]], "Concrete Class Reference": [[58, "concrete-class-reference"]], "Concrete Functions Reference": [[58, "concrete-functions-reference"]], "Core": [[59, "core"]], "sympify": [[59, "module-sympy.core.sympify"]], "assumptions": [[59, "module-sympy.core.assumptions"]], "See Also": [[59, "see-also"], [246, "see-also"]], "Notes": [[59, "notes"], [215, "notes"], [217, "notes"]], "Developers Notes": [[59, "developers-notes"]], "References": [[59, "references"], [71, "references"], [77, "references"], [86, "references"], [145, "references"], [148, "references"], [193, "references"], [217, "references"], [218, "references"], [221, "references"], [227, "references"]], "cache": [[59, "module-sympy.core.cache"]], "basic": [[59, "module-sympy.core.basic"]], "singleton": [[59, "module-sympy.core.singleton"]], "expr": [[59, "module-sympy.core.expr"]], "symbol": [[59, "module-sympy.core.symbol"]], "numbers": [[59, "module-sympy.core.numbers"]], "power": [[59, "module-sympy.core.power"]], "mul": [[59, "module-sympy.core.mul"]], "add": [[59, "module-sympy.core.add"]], "mod": [[59, "module-sympy.core.mod"]], "relational": [[59, "module-sympy.core.relational"]], "multidimensional": [[59, "module-sympy.core.multidimensional"]], "function": [[59, "module-sympy.core.function"]], "evalf": [[59, "module-sympy.core.evalf"], [274, "evalf"]], "containers": [[59, "module-sympy.core.containers"]], "exprtools": [[59, "module-sympy.core.exprtools"]], "Sorting": [[59, "sorting"]], "Random": [[59, "module-sympy.core.random"]], "Traversal": [[59, "module-sympy.core.traversal"]], "Cryptography": [[60, "cryptography"]], "Differential Geometry": [[61, "module-sympy.diffgeom"]], "Discrete": [[62, "discrete"]], "Transforms": [[62, "module-sympy.discrete.transforms"]], "Fast Fourier Transform": [[62, "fast-fourier-transform"]], "Number Theoretic Transform": [[62, "number-theoretic-transform"]], "Fast Walsh Hadamard Transform": [[62, "fast-walsh-hadamard-transform"]], "M\u00f6bius Transform": [[62, "mobius-transform"]], "Convolutions": [[62, "module-sympy.discrete.convolutions"]], "Convolution": [[62, "convolution"]], "Convolution using Fast Fourier Transform": [[62, "convolution-using-fast-fourier-transform"]], "Convolution using Number Theoretic Transform": [[62, "convolution-using-number-theoretic-transform"]], "Convolution using Fast Walsh Hadamard Transform": [[62, "convolution-using-fast-walsh-hadamard-transform"]], "Subset Convolution": [[62, "subset-convolution"]], "Covering Product": [[62, "covering-product"]], "Intersecting Product": [[62, "intersecting-product"]], "Numerical Evaluation": [[63, "numerical-evaluation"]], "Basics": [[63, "basics"], [264, "basics"], [265, "basics"]], "Floating-point numbers": [[63, "floating-point-numbers"]], "Accuracy and error handling": [[63, "accuracy-and-error-handling"]], "Sums and integrals": [[63, "sums-and-integrals"]], "Numerical simplification": [[63, "numerical-simplification"]], "Combinatorial": [[64, "combinatorial"]], "Enumeration": [[64, "enumeration"]], "Elementary": [[65, "elementary"]], "Complex Functions": [[65, "complex-functions"]], "Trigonometric": [[65, "trigonometric"]], "Trigonometric Functions": [[65, "trigonometric-functions"]], "Trigonometric Inverses": [[65, "trigonometric-inverses"]], "Hyperbolic": [[65, "hyperbolic"]], "Hyperbolic Functions": [[65, "hyperbolic-functions"]], "Hyperbolic Inverses": [[65, "hyperbolic-inverses"]], "Integer Functions": [[65, "integer-functions"]], "Exponential": [[65, "exponential"]], "Piecewise": [[65, "piecewise"]], "Miscellaneous": [[65, "miscellaneous"], [249, "module-sympy.utilities.misc"]], "Special": [[67, "special"]], "Dirac Delta and Related Discontinuous Functions": [[67, "dirac-delta-and-related-discontinuous-functions"]], "Gamma, Beta and Related Functions": [[67, "module-sympy.functions.special.gamma_functions"]], "Error Functions and Fresnel Integrals": [[67, "module-sympy.functions.special.error_functions"]], "Exponential, Logarithmic and Trigonometric Integrals": [[67, "exponential-logarithmic-and-trigonometric-integrals"]], "Bessel Type Functions": [[67, "module-sympy.functions.special.bessel"]], "Airy Functions": [[67, "airy-functions"]], "B-Splines": [[67, "b-splines"]], "Riemann Zeta and Related Functions": [[67, "module-sympy.functions.special.zeta_functions"]], "Hypergeometric Functions": [[67, "hypergeometric-functions"]], "Elliptic integrals": [[67, "module-sympy.functions.special.elliptic_integrals"]], "Mathieu Functions": [[67, "module-sympy.functions.special.mathieu_functions"]], "Orthogonal Polynomials": [[67, "module-sympy.functions.special.polynomials"]], "Jacobi Polynomials": [[67, "jacobi-polynomials"]], "Gegenbauer Polynomials": [[67, "gegenbauer-polynomials"]], "Chebyshev Polynomials": [[67, "chebyshev-polynomials"]], "Legendre Polynomials": [[67, "legendre-polynomials"]], "Hermite Polynomials": [[67, "hermite-polynomials"]], "Laguerre Polynomials": [[67, "laguerre-polynomials"]], "Spherical Harmonics": [[67, "spherical-harmonics"]], "Tensor Functions": [[67, "tensor-functions"]], "Curves": [[68, "module-sympy.geometry.curve"]], "Ellipses": [[69, "module-sympy.geometry.ellipse"]], "Entities": [[70, "module-sympy.geometry.entity"]], "Geometry": [[71, "geometry"]], "Available Entities": [[71, "available-entities"]], "Example Usage": [[71, "example-usage"]], "Intersection of medians": [[71, "intersection-of-medians"]], "An in-depth example: Pappus\u2019 Hexagon Theorem": [[71, "an-in-depth-example-pappus-hexagon-theorem"]], "Miscellaneous Notes": [[71, "miscellaneous-notes"]], "Future Work": [[71, "future-work"]], "Truth Setting Expressions": [[71, "truth-setting-expressions"]], "Three Dimensions and Beyond": [[71, "three-dimensions-and-beyond"]], "Geometry Visualization": [[71, "geometry-visualization"]], "Submodules": [[71, "submodules"]], "Lines": [[72, "module-sympy.geometry.line"]], "Plane": [[73, "module-sympy.geometry.plane"]], "Points": [[74, "module-sympy.geometry.point"], [257, "points"]], "Polygons": [[75, "module-sympy.geometry.polygon"]], "Utils": [[76, "module-sympy.geometry.util"]], "About Holonomic Functions": [[77, "about-holonomic-functions"]], "Converting other representations to holonomic": [[78, "converting-other-representations-to-holonomic"]], "Converting hypergeometric functions": [[78, "converting-hypergeometric-functions"]], "Converting Meijer G-functions": [[78, "converting-meijer-g-functions"]], "Converting symbolic expressions": [[78, "converting-symbolic-expressions"]], "Holonomic": [[79, "module-sympy.holonomic"]], "Internal API": [[80, "internal-api"]], "Operations on holonomic functions": [[81, "operations-on-holonomic-functions"]], "Addition and Multiplication": [[81, "addition-and-multiplication"]], "Integration and Differentiation": [[81, "integration-and-differentiation"]], "Composition with polynomials": [[81, "composition-with-polynomials"]], "Convert to holonomic sequence": [[81, "convert-to-holonomic-sequence"]], "Series expansion": [[81, "series-expansion"]], "Numerical evaluation": [[81, "numerical-evaluation"]], "Convert to a linear combination of hypergeometric functions": [[81, "convert-to-a-linear-combination-of-hypergeometric-functions"]], "Convert to a linear combination of Meijer G-functions": [[81, "convert-to-a-linear-combination-of-meijer-g-functions"]], "Convert to expressions": [[81, "convert-to-expressions"]], "Representation of holonomic functions in SymPy": [[82, "representation-of-holonomic-functions-in-sympy"]], "Uses and Current limitations": [[83, "uses-and-current-limitations"]], "Integration": [[83, "integration"]], "Computing Integrals using Meijer G-Functions": [[84, "computing-integrals-using-meijer-g-functions"]], "Overview": [[84, "overview"]], "Polar Numbers and Branched Functions": [[84, "polar-numbers-and-branched-functions"]], "Representing Branched Functions on the Argand Plane": [[84, "representing-branched-functions-on-the-argand-plane"]], "Table Lookups and Inverse Mellin Transforms": [[84, "table-lookups-and-inverse-mellin-transforms"]], "Applying the Integral Theorems": [[84, "applying-the-integral-theorems"]], "The G-Function Integration Theorems": [[84, "the-g-function-integration-theorems"]], "Conditions of Convergence for Integral (1)": [[84, "conditions-of-convergence-for-integral-1"]], "Conditions of Convergence for Integral (2)": [[84, "conditions-of-convergence-for-integral-2"]], "The Inverse Laplace Transform of a G-function": [[84, "the-inverse-laplace-transform-of-a-g-function"]], "How to compute the integral": [[84, "how-to-compute-the-integral"]], "When this computation is valid": [[84, "when-this-computation-is-valid"]], "When the integral exists": [[84, "when-the-integral-exists"]], "Implemented G-Function Formulae": [[84, "implemented-g-function-formulae"]], "Internal API Reference": [[84, "module-sympy.integrals.meijerint"]], "Integrals": [[85, "integrals"], [86, "module-sympy.integrals"], [275, "integrals"]], "Integral Transforms": [[86, "module-sympy.integrals.transforms"]], "Internals": [[86, "internals"], [203, "internals"]], "API reference": [[86, "api-reference"], [86, "id38"]], "TODO and Bugs": [[86, "todo-and-bugs"]], "Numeric Integrals": [[86, "numeric-integrals"]], "Integration over Polytopes": [[86, "module-sympy.integrals.intpoly"]], "For 2D Polygons": [[86, "for-2d-polygons"]], "For 3-Polytopes/Polyhedra": [[86, "for-3-polytopes-polyhedra"]], "Interactive": [[87, "module-sympy.interactive"]], "Session": [[87, "module-sympy.interactive.session"]], "Lie Algebra": [[88, "module-sympy.liealgebras"]], "Forming logical expressions": [[89, "forming-logical-expressions"]], "Boolean functions": [[89, "boolean-functions"]], "Simplification and equivalence-testing": [[89, "simplification-and-equivalence-testing"]], "Manipulating expressions": [[89, "manipulating-expressions"]], "Truth tables and related functions": [[89, "truth-tables-and-related-functions"]], "Inference": [[89, "module-sympy.logic.inference"]], "Common Matrices": [[90, "module-sympy.matrices.common"]], "Dense Matrices": [[91, "dense-matrices"]], "Matrix Expressions": [[92, "module-sympy.matrices.expressions"]], "Matrix Expressions Core Reference": [[92, "matrix-expressions-core-reference"]], "Block Matrices": [[92, "block-matrices"]], "Immutable Matrices": [[93, "immutable-matrices"]], "ImmutableMatrix Class Reference": [[93, "module-sympy.matrices.immutable"]], "Matrices": [[94, "module-sympy.matrices"], [112, "module-sympy.physics.matrices"], [264, "matrices"], [268, "matrices"], [281, "matrices"]], "Matrices (linear algebra)": [[95, "module-sympy.matrices.matrices"]], "Creating Matrices": [[95, "creating-matrices"]], "Basic Manipulation": [[95, "basic-manipulation"]], "Operations on entries": [[95, "operations-on-entries"]], "Linear algebra": [[95, "linear-algebra"]], "Reference": [[95, "reference"], [195, "reference"], [201, "reference"], [205, "reference"], [215, "reference"], [215, "id2"], [215, "id4"], [215, "id7"], [215, "id8"]], "Matrix Base Classes": [[95, "matrix-base-classes"]], "Matrix Exceptions": [[95, "matrix-exceptions"]], "Matrix Functions": [[95, "matrix-functions"]], "Numpy Utility Functions": [[95, "numpy-utility-functions"]], "Matrix Normal Forms": [[96, "matrix-normal-forms"]], "Sparse Matrices": [[97, "module-sympy.matrices.sparse"]], "SparseMatrix Class Reference": [[97, "sparsematrix-class-reference"]], "ImmutableSparseMatrix Class Reference": [[97, "immutablesparsematrix-class-reference"]], "Sparse Tools": [[98, "module-sympy.matrices.sparsetools"]], "Ntheory Class Reference": [[99, "ntheory-class-reference"]], "Ntheory Functions Reference": [[99, "ntheory-functions-reference"]], "ECM function": [[99, "ecm-function"]], "QS function": [[99, "qs-function"]], "Numeric Computation": [[100, "numeric-computation"]], "Subs/evalf": [[100, "subs-evalf"]], "Lambdify": [[100, "lambdify"], [247, "module-sympy.utilities.lambdify"]], "uFuncify": [[100, "ufuncify"]], "Aesara": [[100, "aesara"]], "So Which Should I Use?": [[100, "so-which-should-i-use"]], "Parsing Functions Reference": [[101, "parsing-functions-reference"]], "Parsing Transformations Reference": [[101, "parsing-transformations-reference"]], "Experimental \\mathrm{\\LaTeX} Parsing": [[101, "experimental-mathrm-latex-parsing"]], "\\mathrm{\\LaTeX} Parsing Caveats": [[101, "mathrm-latex-parsing-caveats"]], "\\mathrm{\\LaTeX} Parsing Functions Reference": [[101, "mathrm-latex-parsing-functions-reference"]], "\\mathrm{\\LaTeX} Parsing Exceptions Reference": [[101, "mathrm-latex-parsing-exceptions-reference"]], "SymPy Expression Reference": [[101, "module-sympy.parsing.sym_expr"]], "Runtime Installation": [[101, "runtime-installation"]], "Beam (Docstrings)": [[102, "module-sympy.physics.continuum_mechanics.beam"]], "Solving Beam Bending Problems using Singularity Functions": [[103, "solving-beam-bending-problems-using-singularity-functions"]], "Beam": [[103, "beam"], [104, "beam"]], "Example 1": [[103, "example-1"]], "Example 2": [[103, "example-2"]], "Example 3": [[103, "example-3"]], "Example 4": [[103, "example-4"]], "Example 5": [[103, "example-5"]], "Example 6": [[103, "example-6"]], "Example 7": [[103, "example-7"]], "Example 8": [[103, "example-8"]], "Example 9": [[103, "example-9"]], "Example 10": [[103, "example-10"]], "Example 11": [[103, "example-11"]], "Continuum Mechanics": [[104, "continuum-mechanics"]], "Abstract": [[104, null], [108, null], [110, null], [133, null], [143, null], [160, null], [190, null]], "Truss": [[104, "truss"]], "Truss (Docstrings)": [[105, "module-sympy.physics.continuum_mechanics.truss"]], "Control": [[106, "control"]], "Control System Plots": [[107, "control-system-plots"]], "Pole-Zero Plot": [[107, "pole-zero-plot"]], "Bode Plot": [[107, "bode-plot"]], "Impulse-Response Plot": [[107, "impulse-response-plot"]], "Step-Response Plot": [[107, "step-response-plot"]], "Ramp-Response Plot": [[107, "ramp-response-plot"]], "Control Module": [[108, "module-sympy.physics.control"]], "Control API": [[109, "control-api"]], "lti": [[109, "module-sympy.physics.control.lti"]], "High energy physics": [[110, "high-energy-physics"]], "Gamma matrices": [[110, "module-sympy.physics.hep.gamma_matrices"]], "Hydrogen Wavefunctions": [[111, "module-sympy.physics.hydrogen"]], "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics": [[113, "potential-issues-advanced-topics-future-features-in-physics-mechanics"]], "Common Issues": [[113, "common-issues"], [182, "common-issues"]], "Numerically Integrating Code": [[113, "numerically-integrating-code"]], "Differentiating": [[113, "differentiating"]], "Choice of Coordinates and Speeds": [[113, "choice-of-coordinates-and-speeds"]], "Substitution": [[113, "substitution"], [182, "substitution"], [274, "substitution"]], "Linearization": [[113, "linearization"]], "Acceleration of Points": [[113, "acceleration-of-points"], [182, "acceleration-of-points"]], "Advanced Interfaces": [[113, "advanced-interfaces"], [182, "advanced-interfaces"]], "Advanced Functionality": [[113, "advanced-functionality"]], "Future Features": [[113, "future-features"]], "Code Output": [[113, "code-output"]], "Body (Docstrings)": [[114, "module-sympy.physics.mechanics.body"]], "Expression Manipulation (Docstrings)": [[115, "expression-manipulation-docstrings"]], "Mechanics API Reference": [[116, "mechanics-api-reference"]], "Joints Framework (Docstrings)": [[117, "joints-framework-docstrings"]], "Joint (Docstrings)": [[117, "module-sympy.physics.mechanics.joint"]], "Kane\u2019s Method & Lagrange\u2019s Method (Docstrings)": [[118, "module-sympy.physics.mechanics.kane"]], "Linearization (Docstrings)": [[119, "module-sympy.physics.mechanics.linearize"]], "Masses, Inertias & Particles, RigidBodys (Docstrings)": [[120, "module-sympy.physics.mechanics.particle"]], "Printing (Docstrings)": [[121, "printing-docstrings"], [188, "printing-docstrings"]], "mechanics_printing": [[121, "mechanics-printing"]], "mprint": [[121, "mprint"]], "mpprint": [[121, "mpprint"]], "mlatex": [[121, "mlatex"]], "SymbolicSystem (Docstrings)": [[122, "module-sympy.physics.mechanics.system"]], "Autolev Parser": [[123, "autolev-parser"]], "Usage": [[123, "usage"]], "Gotchas": [[123, "gotchas"], [277, "gotchas"]], "Limitations and Issues": [[123, "limitations-and-issues"]], "Future Improvements": [[123, "future-improvements"]], "1. Completing Dynamics Online": [[123, "completing-dynamics-online"]], "2. Fixing Issues": [[123, "fixing-issues"]], "3. Switching to an AST": [[123, "switching-to-an-ast"]], "Examples for Physics/Mechanics": [[124, "examples-for-physics-mechanics"]], "A bicycle": [[125, "a-bicycle"]], "A four bar linkage": [[126, "a-four-bar-linkage"]], "Nonminimal Coordinates Pendulum": [[127, "nonminimal-coordinates-pendulum"]], "Kane\u2019s Method": [[127, "kane-s-method"]], "Lagrange\u2019s Method": [[127, "lagrange-s-method"]], "Multi Degree of Freedom Holonomic System": [[128, "multi-degree-of-freedom-holonomic-system"]], "A rolling disc": [[129, "a-rolling-disc"]], "A rolling disc, with Kane\u2019s method": [[130, "a-rolling-disc-with-kane-s-method"]], "A rolling disc, with Kane\u2019s method and constraint forces": [[131, "a-rolling-disc-with-kane-s-method-and-constraint-forces"]], "A rolling disc using Lagrange\u2019s Method": [[132, "a-rolling-disc-using-lagrange-s-method"]], "Classical Mechanics": [[133, "classical-mechanics"]], "Vector": [[133, "vector"], [192, "vector"], [261, "vector"]], "Mechanics": [[133, "mechanics"], [228, "module-sympy.stats.rv"]], "Guide to Mechanics": [[133, "guide-to-mechanics"]], "Joints Framework in Physics/Mechanics": [[134, "joints-framework-in-physics-mechanics"]], "Joints in Physics/Mechanics": [[134, "joints-in-physics-mechanics"]], "JointsMethod in Physics/Mechanics": [[134, "jointsmethod-in-physics-mechanics"]], "Kane\u2019s Method in Physics/Mechanics": [[135, "kane-s-method-in-physics-mechanics"], [135, "id2"]], "Structure of Equations": [[135, "structure-of-equations"], [136, "structure-of-equations"]], "Lagrange\u2019s Method in Physics/Mechanics": [[136, "lagrange-s-method-in-physics-mechanics"], [136, "id1"]], "Linearization in Physics/Mechanics": [[137, "linearization-in-physics-mechanics"]], "Background": [[137, "background"]], "A Note on Dependent Coordinates and Speeds": [[137, null]], "Linearizing Kane\u2019s Equations": [[137, "linearizing-kane-s-equations"]], "1. Using the Linearizer class directly:": [[137, "using-the-linearizer-class-directly"], [137, "id2"]], "2. Using the linearize class method:": [[137, "using-the-linearize-class-method"], [137, "id3"]], "What\u2019s with the new_method kwarg?": [[137, null]], "Linearizing Lagrange\u2019s Equations": [[137, "linearizing-lagrange-s-equations"]], "Potential Issues": [[137, "potential-issues"]], "1. Symbolic linearization with A_and_B=True is slow": [[137, "symbolic-linearization-with-a-and-b-true-is-slow"]], "2. The linearized form has nan, zoo, or oo as matrix elements": [[137, "the-linearized-form-has-nan-zoo-or-oo-as-matrix-elements"]], "Further Examples": [[137, "further-examples"]], "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics": [[138, "masses-inertias-particles-and-rigid-bodies-in-physics-mechanics"]], "Mass": [[138, "mass"]], "Particle": [[138, "particle"]], "Inertia": [[138, "inertia"]], "Rigid Body": [[138, "rigid-body"]], "Dyadic": [[138, "dyadic"]], "Linear Momentum": [[138, "linear-momentum"]], "Angular Momentum": [[138, "angular-momentum"]], "Using momenta functions in Mechanics": [[138, "using-momenta-functions-in-mechanics"]], "Kinetic Energy": [[138, "kinetic-energy"]], "Potential Energy": [[138, "potential-energy"]], "Lagrangian": [[138, "lagrangian"]], "Using energy functions in Mechanics": [[138, "using-energy-functions-in-mechanics"]], "References for Physics/Mechanics": [[139, "references-for-physics-mechanics"]], "SymPy Mechanics for Autolev Users": [[140, "sympy-mechanics-for-autolev-users"]], "Some Key Differences": [[140, "some-key-differences"]], "Rough Autolev-SymPy Equivalents": [[140, "rough-autolev-sympy-equivalents"]], "Mathematical Equivalents": [[140, "mathematical-equivalents"]], "Physical Equivalents": [[140, "physical-equivalents"]], "Numerical Evaluation and Visualization": [[140, "numerical-evaluation-and-visualization"]], "Links": [[140, "links"]], "Symbolic Systems in Physics/Mechanics": [[141, "symbolic-systems-in-physics-mechanics"]], "SymbolicSystem Example Usage": [[141, "symbolicsystem-example-usage"]], "Gaussian Optics": [[142, "module-sympy.physics.optics.gaussopt"]], "Optics Module": [[143, "optics-module"]], "Medium": [[144, "module-sympy.physics.optics.medium"]], "Polarization": [[145, "module-sympy.physics.optics.polarization"]], "Waves": [[147, "module-sympy.physics.optics.waves"]], "Pauli Algebra": [[148, "module-sympy.physics.paulialgebra"]], "Quantum Harmonic Oscillator in 1-D": [[149, "module-sympy.physics.qho_1d"]], "Anticommutator": [[150, "module-sympy.physics.quantum.anticommutator"]], "Cartesian Operators and States": [[151, "module-sympy.physics.quantum.cartesian"]], "Clebsch-Gordan Coefficients": [[152, "module-sympy.physics.quantum.cg"]], "Circuit Plot": [[153, "module-sympy.physics.quantum.circuitplot"]], "Commutator": [[154, "module-sympy.physics.quantum.commutator"]], "Constants": [[155, "module-sympy.physics.quantum.constants"], [178, "constants"]], "Dagger": [[156, "module-sympy.physics.quantum.dagger"]], "Gates": [[157, "module-sympy.physics.quantum.gate"]], "Grover\u2019s Algorithm": [[158, "module-sympy.physics.quantum.grover"]], "Hilbert Space": [[159, "module-sympy.physics.quantum.hilbert"]], "Quantum Mechanics": [[160, "quantum-mechanics"]], "Quantum Functions": [[160, "quantum-functions"]], "States and Operators": [[160, "states-and-operators"]], "Quantum Computation": [[160, "quantum-computation"]], "Analytic Solutions": [[160, "analytic-solutions"]], "Inner Product": [[161, "module-sympy.physics.quantum.innerproduct"]], "Operator": [[162, "module-sympy.physics.quantum.operator"]], "Operator/State Helper Functions": [[163, "module-sympy.physics.quantum.operatorset"]], "Particle in a Box": [[164, "module-sympy.physics.quantum.piab"]], "Qapply": [[165, "module-sympy.physics.quantum.qapply"]], "QFT": [[166, "module-sympy.physics.quantum.qft"]], "Qubit": [[167, "module-sympy.physics.quantum.qubit"]], "Represent": [[168, "module-sympy.physics.quantum.represent"]], "Shor\u2019s Algorithm": [[169, "module-sympy.physics.quantum.shor"]], "Spin": [[170, "module-sympy.physics.quantum.spin"]], "State": [[171, "module-sympy.physics.quantum.state"]], "Tensor Product": [[172, "module-sympy.physics.quantum.tensorproduct"]], "Second Quantization": [[173, "module-sympy.physics.secondquant"]], "Quantum Harmonic Oscillator in 3-D": [[174, "module-sympy.physics.sho"]], "Dimensions and dimension systems": [[175, "module-sympy.physics.units.dimensions"]], "Dimensional analysis": [[176, "dimensional-analysis"]], "Equation with quantities": [[176, "equation-with-quantities"]], "Unit systems": [[177, "unit-systems"]], "Philosophy behind unit systems": [[178, "philosophy-behind-unit-systems"]], "Dimensions": [[178, "dimensions"]], "Group structure": [[178, "group-structure"]], "Linear space representation": [[178, "linear-space-representation"]], "An example": [[178, "an-example"], [218, "an-example"]], "Quantities": [[178, "quantities"]], "Units": [[178, "units"]], "The need for a reference": [[178, "the-need-for-a-reference"]], "Literature": [[178, "literature"], [202, "literature"], [207, "literature"]], "Unit prefixes": [[179, "module-sympy.physics.units.prefixes"]], "Physical quantities": [[180, "module-sympy.physics.units.quantities"]], "Conversion between quantities": [[180, "module-sympy.physics.units.util"]], "Units and unit systems": [[181, "module-sympy.physics.units.unitsystem"]], "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module": [[182, "potential-issues-advanced-topics-future-features-in-physics-vector-module"]], "Inertia (Dyadics)": [[182, "inertia-dyadics"]], "ReferenceFrame": [[182, "referenceframe"]], "dynamicsymbols": [[182, "dynamicsymbols"]], "Essential Classes": [[183, "essential-classes"]], "Docstrings for basic field functions": [[184, "docstrings-for-basic-field-functions"]], "Field operation functions": [[184, "field-operation-functions"]], "Checking the type of vector field": [[184, "checking-the-type-of-vector-field"]], "Essential Functions (Docstrings)": [[185, "essential-functions-docstrings"]], "Physics Vector API": [[186, "physics-vector-api"]], "Kinematics (Docstrings)": [[187, "module-sympy.physics.vector.point"]], "kinematic_equations": [[187, "module-sympy.physics.vector.functions"]], "Scalar and Vector Field Functionality": [[189, "scalar-and-vector-field-functionality"], [260, "scalar-and-vector-field-functionality"]], "Vectors and Scalars": [[189, "vectors-and-scalars"], [262, "vectors-and-scalars"]], "Fields": [[189, "fields"], [262, "fields"]], "Implementation of fields in sympy.physics.vector": [[189, "implementation-of-fields-in-sympy-physics-vector"]], "Field operators and other related functions": [[189, "field-operators-and-other-related-functions"]], "Curl": [[189, "curl"], [260, "curl"]], "Divergence": [[189, "divergence"], [260, "divergence"]], "Gradient": [[189, "gradient"], [260, "gradient"]], "Conservative and Solenoidal fields": [[189, "conservative-and-solenoidal-fields"], [260, "conservative-and-solenoidal-fields"]], "Scalar potential functions": [[189, "scalar-potential-functions"], [260, "scalar-potential-functions"]], "The Physics Vector Module": [[190, "the-physics-vector-module"]], "References for Physics/Vector": [[190, "references-for-physics-vector"]], "Guide to Vector": [[190, "guide-to-vector"], [261, "guide-to-vector"]], "Vector: Kinematics": [[191, "vector-kinematics"]], "Introduction to Kinematics": [[191, "introduction-to-kinematics"]], "Angular Velocity": [[191, "angular-velocity"]], "Angular Acceleration": [[191, "angular-acceleration"]], "Point Velocity & Acceleration": [[191, "point-velocity-acceleration"]], "Kinematics in physics.vector": [[191, "kinematics-in-physics-vector"]], "Vector & ReferenceFrame": [[192, "vector-referenceframe"]], "Vector Algebra": [[192, "vector-algebra"]], "Vector Operations": [[192, "vector-operations"]], "Alternative Representation": [[192, "alternative-representation"]], "Vector Calculus": [[192, "vector-calculus"]], "Derivatives of Vectors": [[192, "derivatives-of-vectors"]], "Relating Sets of Basis Vectors": [[192, "relating-sets-of-basis-vectors"]], "Derivatives with Multiple Frames": [[192, "derivatives-with-multiple-frames"]], "Using Vectors and Reference Frames": [[192, "using-vectors-and-reference-frames"]], "Vector Algebra, in physics.vector": [[192, "vector-algebra-in-physics-vector"]], "Vector Calculus, in physics.vector": [[192, "vector-calculus-in-physics-vector"]], "How Vectors are Coded": [[192, "how-vectors-are-coded"]], "Wigner Symbols": [[193, "module-sympy.physics.wigner"]], "Credits and Copyright": [[193, "credits-and-copyright"]], "Authors": [[193, "authors"]], "Plot Class": [[194, "plot-class"]], "Plotting Function Reference": [[194, "plotting-function-reference"]], "PlotGrid Class": [[194, "plotgrid-class"]], "Series Classes": [[194, "series-classes"]], "Backends": [[194, "backends"]], "Pyglet Plotting": [[194, "module-sympy.plotting.pygletplot"]], "Plot Window Controls": [[194, "plot-window-controls"]], "Coordinate Modes": [[194, "coordinate-modes"]], "Specifying Intervals for Variables": [[194, "specifying-intervals-for-variables"]], "Using the Interactive Interface": [[194, "using-the-interactive-interface"]], "Using Custom Color Functions": [[194, "using-custom-color-functions"]], "Plotting Geometric Entities": [[194, "plotting-geometric-entities"]], "Plotting with ASCII art": [[194, "plotting-with-ascii-art"]], "AGCA - Algebraic Geometry and Commutative Algebra Module": [[195, "agca-algebraic-geometry-and-commutative-algebra-module"]], "Base Rings": [[195, "base-rings"]], "Modules, Ideals and their Elementary Properties": [[195, "modules-ideals-and-their-elementary-properties"]], "Module Homomorphisms and Syzygies": [[195, "module-homomorphisms-and-syzygies"]], "Finite Extensions": [[195, "finite-extensions"]], "Basic functionality of the module": [[196, "basic-functionality-of-the-module"]], "Basic concepts": [[196, "basic-concepts"]], "Polynomials": [[196, "polynomials"]], "Divisibility": [[196, "divisibility"]], "Integral domains": [[196, "integral-domains"]], "Factorial domains": [[196, "factorial-domains"]], "Euclidean domains": [[196, "euclidean-domains"]], "Divisibility of polynomials": [[196, "divisibility-of-polynomials"]], "Basic functionality": [[196, "basic-functionality"]], "Division": [[196, "division"]], "GCD and LCM": [[196, "gcd-and-lcm"]], "Square-free factorization": [[196, "square-free-factorization"]], "Factorization": [[196, "factorization"]], "Groebner bases": [[196, "groebner-bases"]], "Solving Equations": [[196, "solving-equations"]], "Introducing the domainmatrix of the poly module": [[197, "introducing-the-domainmatrix-of-the-poly-module"]], "What is domainmatrix?": [[197, "what-is-domainmatrix"]], "Introducing the Domains of the poly module": [[198, "introducing-the-domains-of-the-poly-module"]], "What are the domains?": [[198, "what-are-the-domains"]], "Representing expressions symbolically": [[198, "representing-expressions-symbolically"]], "Tree representation": [[198, "tree-representation"]], "DUP representation": [[198, "dup-representation"]], "DMP representation": [[198, "dmp-representation"]], "Sparse polynomial representation": [[198, "sparse-polynomial-representation"]], "Basic usage of domains": [[198, "basic-usage-of-domains"]], "Domain elements vs sympy expressions": [[198, "domain-elements-vs-sympy-expressions"]], "Gaussian integers and Gaussian rationals": [[198, "gaussian-integers-and-gaussian-rationals"]], "Finite fields": [[198, "finite-fields"]], "Real and complex fields": [[198, "real-and-complex-fields"]], "Algebraic number fields": [[198, "algebraic-number-fields"], [203, "algebraic-number-fields"]], "Polynomial ring domains": [[198, "polynomial-ring-domains"]], "Old (dense) polynomial rings": [[198, "old-dense-polynomial-rings"]], "PolyRing vs PolynomialRing": [[198, "polyring-vs-polynomialring"]], "Rational function fields": [[198, "rational-function-fields"]], "Expression domain": [[198, "expression-domain"]], "Choosing a domain": [[198, "choosing-a-domain"]], "Converting elements between different domains": [[198, "converting-elements-between-different-domains"]], "Unifying domains": [[198, "unifying-domains"]], "Internals of a Poly": [[198, "internals-of-a-poly"]], "Choosing a domain for a Poly": [[198, "choosing-a-domain-for-a-poly"]], "Choosing generators": [[198, "choosing-generators"]], "Algebraically dependent generators": [[198, "algebraically-dependent-generators"]], "Reference docs for the Poly Domains": [[199, "reference-docs-for-the-poly-domains"]], "Domains": [[199, "domains"]], "Abstract Domains": [[199, "abstract-domains"]], "GF(p)": [[199, "gf-p"]], "ZZ": [[199, "zz"]], "QQ": [[199, "qq"]], "MPQ": [[199, "mpq"]], "Gaussian domains": [[199, "gaussian-domains"]], "ZZ_I": [[199, "zz-i"]], "QQ_I": [[199, "qq-i"]], "QQ<a>": [[199, "qq-a"]], "RR": [[199, "rr"]], "CC": [[199, "cc"]], "K[x]": [[199, "k-x"]], "K(x)": [[199, "id11"]], "EX": [[199, "ex"]], "Quotient ring": [[199, "quotient-ring"]], "Sparse polynomials": [[199, "sparse-polynomials"]], "Sparse rational functions": [[199, "sparse-rational-functions"]], "Dense polynomials": [[199, "dense-polynomials"]], "Polynomial Manipulation": [[200, "polynomial-manipulation"]], "Internals of the Polynomial Manipulation Module": [[201, "internals-of-the-polynomial-manipulation-module"]], "Level Zero": [[201, "level-zero"]], "Manipulation of dense, multivariate polynomials": [[201, "manipulation-of-dense-multivariate-polynomials"]], "Manipulation of dense, univariate polynomials with finite field coefficients": [[201, "manipulation-of-dense-univariate-polynomials-with-finite-field-coefficients"]], "Manipulation of sparse, distributed polynomials and vectors": [[201, "manipulation-of-sparse-distributed-polynomials-and-vectors"]], "Polynomial factorization algorithms": [[201, "polynomial-factorization-algorithms"]], "Classical remainder sequence": [[201, "classical-remainder-sequence"]], "Simplified remainder sequences": [[201, "simplified-remainder-sequences"]], "Subresultant sequence": [[201, "subresultant-sequence"]], "Groebner basis algorithms": [[201, "groebner-basis-algorithms"]], "Options": [[201, "module-sympy.polys.polyoptions"]], "Configuration": [[201, "module-sympy.polys.polyconfig"]], "Exceptions": [[201, "exceptions"]], "Modular GCD": [[201, "modular-gcd"]], "Undocumented": [[201, "undocumented"]], "Number Fields": [[203, "number-fields"]], "Solving the Main Problems": [[203, "solving-the-main-problems"]], "Integral Basis": [[203, "integral-basis"]], "Prime Decomposition": [[203, "prime-decomposition"]], "p-adic Valuation": [[203, "p-adic-valuation"]], "Finding Minimal Polynomials": [[203, "finding-minimal-polynomials"]], "The Subfield Problem": [[203, "the-subfield-problem"]], "Representing algebraic numbers": [[203, "representing-algebraic-numbers"]], "As number field elements": [[203, "as-number-field-elements"]], "As elements of finitely-generated modules": [[203, "as-elements-of-finitely-generated-modules"]], "Finitely-generated modules": [[203, "module-sympy.polys.numberfields.modules"]], "Arithmetic with module elements": [[203, "arithmetic-with-module-elements"]], "Multiplication": [[203, "multiplication"]], "Module Homomorphisms": [[203, "module-homomorphisms"]], "Class Reference": [[203, "class-reference"]], "Polynomials Manipulation Module Reference": [[204, "module-sympy.polys"]], "Basic polynomial manipulation functions": [[204, "basic-polynomial-manipulation-functions"]], "Extra polynomial manipulation functions": [[204, "extra-polynomial-manipulation-functions"]], "Domain constructors": [[204, "domain-constructors"]], "Monomials encoded as tuples": [[204, "monomials-encoded-as-tuples"]], "Orderings of monomials": [[204, "orderings-of-monomials"]], "Formal manipulation of roots of polynomials": [[204, "formal-manipulation-of-roots-of-polynomials"]], "Symbolic root-finding algorithms": [[204, "symbolic-root-finding-algorithms"]], "Special polynomials": [[204, "special-polynomials"]], "Orthogonal polynomials": [[204, "orthogonal-polynomials"]], "Appell sequences": [[204, "appell-sequences"]], "Manipulation of rational functions": [[204, "manipulation-of-rational-functions"]], "Partial fraction decomposition": [[204, "partial-fraction-decomposition"], [207, "partial-fraction-decomposition"]], "Dispersion of Polynomials": [[204, "dispersion-of-polynomials"]], "Series Manipulation using Polynomials": [[205, "series-manipulation-using-polynomials"]], "rs_series": [[205, "rs-series"]], "Contribute": [[205, "contribute"]], "Poly solvers": [[206, "poly-solvers"]], "Examples from Wester\u2019s Article": [[207, "examples-from-wester-s-article"]], "Simple univariate polynomial factorization": [[207, "simple-univariate-polynomial-factorization"]], "Univariate GCD, resultant and factorization": [[207, "univariate-gcd-resultant-and-factorization"]], "Multivariate GCD and factorization": [[207, "multivariate-gcd-and-factorization"]], "Support for symbols in exponents": [[207, "support-for-symbols-in-exponents"]], "Testing if polynomials have common zeros": [[207, "testing-if-polynomials-have-common-zeros"]], "Normalizing simple rational functions": [[207, "normalizing-simple-rational-functions"]], "Expanding expressions and factoring back": [[207, "expanding-expressions-and-factoring-back"]], "Factoring in terms of cyclotomic polynomials": [[207, "factoring-in-terms-of-cyclotomic-polynomials"]], "Univariate factoring over Gaussian numbers": [[207, "univariate-factoring-over-gaussian-numbers"]], "Computing with automatic field extensions": [[207, "computing-with-automatic-field-extensions"]], "Univariate factoring over various domains": [[207, "univariate-factoring-over-various-domains"]], "Factoring polynomials into linear factors": [[207, "factoring-polynomials-into-linear-factors"]], "Advanced factoring over finite fields": [[207, "advanced-factoring-over-finite-fields"]], "Working with expressions as polynomials": [[207, "working-with-expressions-as-polynomials"]], "Computing reduced Gr\u00f6bner bases": [[207, "computing-reduced-grobner-bases"]], "Multivariate factoring over algebraic numbers": [[207, "multivariate-factoring-over-algebraic-numbers"]], "Printer Class": [[208, "module-sympy.printing.printer"]], "Which Method is Responsible for Printing?": [[208, "which-method-is-responsible-for-printing"]], "Example of Custom Printer": [[208, "example-of-custom-printer"]], "Example of Custom Printing Method": [[208, "example-of-custom-printing-method"]], "Common mistakes": [[208, "common-mistakes"]], "PrettyPrinter Class": [[208, "prettyprinter-class"]], "C code printers": [[208, "module-sympy.printing.c"]], "C++ code printers": [[208, "module-sympy.printing.cxx"]], "RCodePrinter": [[208, "module-sympy.printing.rcode"]], "Fortran Printing": [[208, "fortran-printing"]], "SMT-Lib printing": [[208, "module-sympy.printing.smtlib"]], "Mathematica code printing": [[208, "module-sympy.printing.mathematica"]], "Maple code printing": [[208, "module-sympy.printing.maple"]], "Javascript Code printing": [[208, "module-sympy.printing.jscode"]], "Julia code printing": [[208, "module-sympy.printing.julia"]], "Octave (and Matlab) Code printing": [[208, "module-sympy.printing.octave"]], "Rust code printing": [[208, "module-sympy.printing.rust"]], "Aesara Code printing": [[208, "module-sympy.printing.aesaracode"]], "Gtk": [[208, "module-sympy.printing.gtk"]], "LambdaPrinter": [[208, "module-sympy.printing.lambdarepr"]], "LatexPrinter": [[208, "module-sympy.printing.latex"]], "MathMLPrinter": [[208, "module-sympy.printing.mathml"]], "PythonCodePrinter": [[208, "module-sympy.printing.pycode"]], "PythonPrinter": [[208, "module-sympy.printing.python"]], "srepr": [[208, "module-sympy.printing.repr"], [284, "srepr"]], "StrPrinter": [[208, "module-sympy.printing.str"]], "Tree Printing": [[208, "module-sympy.printing.tree"]], "Preview": [[208, "preview"]], "Implementation - Helper Classes/Functions": [[208, "module-sympy.printing.conventions"]], "CodePrinter": [[208, "module-sympy.printing.codeprinter"]], "Precedence": [[208, "module-sympy.printing.precedence"]], "Pretty-Printing Implementation Helpers": [[208, "module-sympy.printing.pretty.pretty_symbology"]], "dotprint": [[208, "dotprint"]], "Term Rewriting": [[209, "term-rewriting"]], "Expanding": [[209, "expanding"]], "Common Subexpression Detection and Collection": [[209, "common-subexpression-detection-and-collection"]], "Formal Power Series": [[210, "formal-power-series"]], "Rational Algorithm": [[210, "rational-algorithm"]], "Hypergeometric Algorithm": [[210, "hypergeometric-algorithm"]], "Fourier Series": [[211, "fourier-series"]], "Series": [[212, "series"]], "Limits of Sequences": [[213, "limits-of-sequences"]], "Sequences": [[214, "sequences"]], "Sequences Base": [[214, "sequences-base"]], "Elementary Sequences": [[214, "elementary-sequences"]], "Singleton Sequences": [[214, "singleton-sequences"]], "Compound Sequences": [[214, "compound-sequences"]], "Recursive Sequences": [[214, "recursive-sequences"]], "Series Expansions": [[215, "series-expansions"]], "Limits": [[215, "limits"], [275, "limits"]], "The Gruntz Algorithm": [[215, "the-gruntz-algorithm"]], "More Intuitive Series Expansion": [[215, "more-intuitive-series-expansion"]], "Order Terms": [[215, "order-terms"]], "Series Acceleration": [[215, "series-acceleration"]], "Residues": [[215, "residues"]], "Basic Sets": [[216, "module-sympy.sets.sets"]], "Elementary Sets": [[216, "elementary-sets"]], "Compound Sets": [[216, "compound-sets"]], "Singleton Sets": [[216, "singleton-sets"]], "Special Sets": [[216, "module-sympy.sets.fancysets"]], "Power sets": [[216, "module-sympy.sets.powerset"]], "Condition Sets": [[216, "module-sympy.sets.conditionset"]], "SetKind": [[216, "setkind"]], "Iteration over sets": [[216, "iteration-over-sets"]], "Hongguang Fu\u2019s Trigonometric Simplification": [[217, "hongguang-fu-s-trigonometric-simplification"]], "Rules": [[217, "rules"]], "Hypergeometric Expansion": [[218, "hypergeometric-expansion"]], "Hypergeometric Function Expansion Algorithm": [[218, "hypergeometric-function-expansion-algorithm"]], "Notation": [[218, "notation"]], "Incrementing and decrementing indices": [[218, "incrementing-and-decrementing-indices"]], "Reduction of Order": [[218, "reduction-of-order"]], "Moving Around in the Parameter Space": [[218, "moving-around-in-the-parameter-space"]], "Applying the Operators": [[218, "applying-the-operators"]], "Loose Ends": [[218, "loose-ends"]], "Meijer G-Functions of Finite Confluence": [[218, "meijer-g-functions-of-finite-confluence"]], "Extending The Hypergeometric Tables": [[218, "extending-the-hypergeometric-tables"]], "Implemented Hypergeometric Formulae": [[218, "implemented-hypergeometric-formulae"]], "Simplify": [[219, "simplify"], [220, "simplify"]], "Diophantine": [[221, "diophantine"]], "Diophantine equations": [[221, "diophantine-equations"]], "Module structure": [[221, "module-structure"]], "Tutorial": [[221, "tutorial"]], "User Functions": [[221, "user-functions"], [224, "user-functions"], [225, "user-functions"]], "Internal Functions": [[221, "internal-functions"]], "Internal Classes": [[221, "internal-classes"]], "Solvers": [[222, "solvers"], [226, "module-sympy.solvers"], [286, "solvers"]], "Inequality Solvers": [[223, "inequality-solvers"]], "ODE": [[224, "ode"]], "Hint Functions": [[224, "hint-functions"]], "Lie heuristics": [[224, "lie-heuristics"]], "Rational Riccati Solver": [[224, "rational-riccati-solver"]], "System of ODEs": [[224, "system-of-odes"]], "Information on the ode module": [[224, "module-sympy.solvers.ode.ode"]], "PDE": [[225, "pde"]], "Hint Methods": [[225, "hint-methods"]], "Information on the pde module": [[225, "module-sympy.solvers.pde"]], "Algebraic equations": [[226, "algebraic-equations"]], "Ordinary Differential equations (ODEs)": [[226, "ordinary-differential-equations-odes"], [227, "ordinary-differential-equations-odes"]], "Partial Differential Equations (PDEs)": [[226, "partial-differential-equations-pdes"], [227, "partial-differential-equations-pdes"]], "Deutils (Utilities for solving ODE\u2019s and PDE\u2019s)": [[226, "deutils-utilities-for-solving-ode-s-and-pde-s"]], "Recurrence Equations": [[226, "module-sympy.solvers.recurr"]], "Systems of Polynomial Equations": [[226, "systems-of-polynomial-equations"]], "Diophantine Equations (DEs)": [[226, "diophantine-equations-des"], [227, "diophantine-equations-des"]], "Inequalities": [[226, "inequalities"], [227, "inequalities"]], "Solveset": [[227, "solveset"]], "What\u2019s wrong with solve():": [[227, "what-s-wrong-with-solve"]], "Why Solveset?": [[227, "why-solveset"]], "Why do we use Sets as an output type?": [[227, "why-do-we-use-sets-as-an-output-type"]], "Input API of solveset": [[227, "input-api-of-solveset"]], "What is this domain argument about?": [[227, "what-is-this-domain-argument-about"]], "What are the general methods employed by solveset to solve an equation?": [[227, "what-are-the-general-methods-employed-by-solveset-to-solve-an-equation"]], "How do we manipulate and return an infinite solution?": [[227, "how-do-we-manipulate-and-return-an-infinite-solution"]], "How does solveset ensure that it is not returning any wrong solution?": [[227, "how-does-solveset-ensure-that-it-is-not-returning-any-wrong-solution"]], "Search based solver and step-by-step solution": [[227, "search-based-solver-and-step-by-step-solution"]], "How do we deal with cases where only some of the solutions are known?": [[227, "how-do-we-deal-with-cases-where-only-some-of-the-solutions-are-known"]], "What is the plan for solve and solveset?": [[227, "what-is-the-plan-for-solve-and-solveset"]], "How are symbolic parameters handled in solveset?": [[227, "how-are-symbolic-parameters-handled-in-solveset"]], "Solveset Module Reference": [[227, "solveset-module-reference"]], "transolve": [[227, "transolve"]], "Stats": [[228, "module-sympy.stats"]], "Random Variable Types": [[228, "random-variable-types"]], "Finite Types": [[228, "finite-types"]], "Discrete Types": [[228, "discrete-types"]], "Continuous Types": [[228, "continuous-types"]], "Joint Types": [[228, "joint-types"]], "Stochastic Processes": [[228, "stochastic-processes"]], "Matrix Distributions": [[228, "matrix-distributions"]], "Compound Distribution": [[228, "compound-distribution"]], "Interface": [[228, "interface"]], "N-dim array": [[229, "module-sympy.tensor.array"]], "Products and contractions": [[229, "products-and-contractions"]], "Diagonal operator": [[229, "diagonal-operator"]], "Derivatives by array": [[229, "derivatives-by-array"]], "Classes": [[229, "classes"]], "N-dim array expressions": [[230, "module-sympy.tensor.array.expressions"]], "Constructing array expressions from index-explicit forms": [[230, "constructing-array-expressions-from-index-explicit-forms"]], "Compatibility with matrices": [[230, "compatibility-with-matrices"]], "Tensor": [[231, "module-sympy.tensor"], [234, "module-sympy.tensor.tensor"]], "Methods": [[232, "module-sympy.tensor.index_methods"]], "Indexed Objects": [[233, "module-sympy.tensor.indexed"]], "Tensor Operators": [[235, "module-sympy.tensor.toperators"]], "Testing": [[236, "testing"]], "pytest": [[237, "module-sympy.testing.pytest"]], "Randomised Testing": [[238, "module-sympy.testing.randtest"]], "Run Tests": [[239, "module-sympy.testing.runtests"]], "Autowrap Module": [[240, "autowrap-module"]], "Implementation details": [[240, "implementation-details"]], "Codegen": [[241, "codegen"]], "Implementation Details": [[241, "implementation-details"]], "Routine": [[241, "routine"]], "Decorator": [[242, "module-sympy.utilities.decorator"]], "Enumerative": [[243, "module-sympy.utilities.enumerative"]], "Exceptions and Warnings": [[244, "module-sympy.utilities.exceptions"]], "Iterables": [[246, "module-sympy.utilities.iterables"]], "variations": [[246, "variations"]], "partitions": [[246, "partitions"]], "Memoization": [[248, "module-sympy.utilities.memoization"]], "PKGDATA": [[250, "module-sympy.utilities.pkgdata"]], "Source Code Inspection": [[251, "module-sympy.utilities.source"]], "Timing Utilities": [[252, "module-sympy.utilities.timeutils"]], "Essential Classes in sympy.vector (docstrings)": [[253, "essential-classes-in-sympy-vector-docstrings"]], "Vector API": [[254, "vector-api"]], "Orienter classes (docstrings)": [[255, "orienter-classes-docstrings"]], "Essential Functions in sympy.vector (docstrings)": [[256, "essential-functions-in-sympy-vector-docstrings"]], "Basic Implementation details": [[257, "basic-implementation-details"]], "Coordinate Systems and Vectors": [[257, "coordinate-systems-and-vectors"]], "SymPy operations on Vectors": [[257, "sympy-operations-on-vectors"]], "Dyadics": [[257, "dyadics"]], "More about Coordinate Systems": [[258, "more-about-coordinate-systems"]], "Locating new systems": [[258, "locating-new-systems"]], "Orienting new systems": [[258, "orienting-new-systems"]], "Using a method of CoordSys3D directly": [[258, "using-a-method-of-coordsys3d-directly"]], "Using Orienter(s) and the orient_new method": [[258, "using-orienter-s-and-the-orient-new-method"]], "Orienting AND Locating new systems": [[258, "orienting-and-locating-new-systems"]], "Transforming new system": [[258, "transforming-new-system"]], "Expression of quantities in different coordinate systems": [[258, "expression-of-quantities-in-different-coordinate-systems"]], "Vectors and Dyadics": [[258, "vectors-and-dyadics"]], "Coordinate Variables": [[258, "coordinate-variables"]], "Other expression-dependent methods": [[258, "other-expression-dependent-methods"]], "General examples of usage": [[259, "general-examples-of-usage"]], "Quadrilateral problem": [[259, "quadrilateral-problem"]], "The Problem": [[259, "the-problem"], [259, "id1"]], "Solution": [[259, "solution"], [259, "id2"]], "Third product rule for Del operator": [[259, "third-product-rule-for-del-operator"]], "See": [[259, "see"]], "Implementation in sympy.vector": [[260, "implementation-in-sympy-vector"]], "Scalar and vector fields": [[260, "scalar-and-vector-fields"]], "The Del operator": [[260, "the-del-operator"]], "Field operators and related functions": [[260, "field-operators-and-related-functions"]], "Directional Derivative": [[260, "directional-derivative"]], "Field operator in orthogonal curvilinear coordinate system": [[260, "field-operator-in-orthogonal-curvilinear-coordinate-system"]], "References for Vector": [[261, "references-for-vector"]], "Coordinate Systems": [[262, "coordinate-systems"]], "Applications of Vector Integrals": [[263, "applications-of-vector-integrals"]], "Calculation of Perimeter, Surface Area, and Volume": [[263, "calculation-of-perimeter-surface-area-and-volume"]], "Calculation of mass of a body": [[263, "calculation-of-mass-of-a-body"]], "Calculation of Flux": [[263, "calculation-of-flux"]], "Verifying Stoke\u2019s Theorem": [[263, "verifying-stoke-s-theorem"]], "Verifying Divergence Theorem": [[263, "verifying-divergence-theorem"]], "Physics": [[264, "physics"], [270, "module-sympy.physics"]], "Topics": [[264, "topics"], [271, "topics"]], "Introductory Tutorial": [[273, "introductory-tutorial"], [278, "introductory-tutorial"]], "Basic Operations": [[274, "basic-operations"], [281, "basic-operations"]], "Quick Tip": [[274, null], [275, null], [277, null], [280, null], [281, null]], "Converting Strings to SymPy Expressions": [[274, "converting-strings-to-sympy-expressions"]], "Derivatives": [[275, "derivatives"]], "Series Expansion": [[275, "series-expansion"]], "Finite differences": [[275, "finite-differences"]], "SymPy Features": [[276, "sympy-features"]], "Equals signs": [[277, "equals-signs"]], "Two Final Notes: ^ and /": [[277, "two-final-notes-and"]], "Further Reading": [[277, "further-reading"]], "What is Symbolic Computation?": [[279, "what-is-symbolic-computation"]], "A More Interesting Example": [[279, "a-more-interesting-example"]], "The Power of Symbolic Computation": [[279, "the-power-of-symbolic-computation"]], "Why SymPy?": [[279, "why-sympy"]], "Advanced Expression Manipulation": [[280, "advanced-expression-manipulation"]], "Understanding Expression Trees": [[280, "understanding-expression-trees"]], "Recursing through an Expression Tree": [[280, "recursing-through-an-expression-tree"]], "args": [[280, "args"]], "Key Invariant": [[280, null]], "Walking the Tree": [[280, "walking-the-tree"]], "Prevent expression evaluation": [[280, "prevent-expression-evaluation"]], "Shape": [[281, "shape"]], "Accessing Rows and Columns": [[281, "accessing-rows-and-columns"]], "Deleting and Inserting Rows and Columns": [[281, "deleting-and-inserting-rows-and-columns"]], "Basic Methods": [[281, "basic-methods"]], "Matrix Constructors": [[281, "matrix-constructors"]], "Advanced Methods": [[281, "advanced-methods"]], "Determinant": [[281, "determinant"]], "RREF": [[281, "rref"]], "Nullspace": [[281, "nullspace"]], "Columnspace": [[281, "columnspace"]], "Eigenvalues, Eigenvectors, and Diagonalization": [[281, "eigenvalues-eigenvectors-and-diagonalization"]], "Possible Issues": [[281, "possible-issues"]], "Zero Testing": [[281, "zero-testing"]], "What\u2019s Next": [[282, "whats-next"]], "Preliminaries": [[283, "preliminaries"]], "Exercises": [[283, "exercises"]], "Printers": [[284, "printers"]], "Setting up Pretty Printing": [[284, "setting-up-pretty-printing"]], "Printing Functions": [[284, "printing-functions"]], "str": [[284, "str"]], "ASCII Pretty Printer": [[284, "ascii-pretty-printer"]], "Unicode Pretty Printer": [[284, "unicode-pretty-printer"]], "\\mathrm{\\LaTeX}": [[284, "mathrm-latex"]], "MathML": [[284, "mathml"]], "Dot": [[284, "dot"]], "Simplification": [[285, "simplification"]], "simplify": [[285, "simplify"]], "Polynomial/Rational Function Simplification": [[285, "polynomial-rational-function-simplification"]], "expand": [[285, "expand"]], "factor": [[285, "factor"]], "collect": [[285, "collect"]], "cancel": [[285, "cancel"]], "apart": [[285, "apart"]], "Trigonometric Simplification": [[285, "trigonometric-simplification"]], "trigsimp": [[285, "trigsimp"]], "expand_trig": [[285, "expand-trig"]], "Powers": [[285, "powers"]], "powsimp": [[285, "powsimp"]], "expand_power_exp / expand_power_base": [[285, "expand-power-exp-expand-power-base"]], "powdenest": [[285, "powdenest"]], "Exponentials and logarithms": [[285, "exponentials-and-logarithms"]], "expand_log": [[285, "expand-log"]], "logcombine": [[285, "logcombine"]], "Special Functions": [[285, "special-functions"]], "rewrite": [[285, "rewrite"]], "expand_func": [[285, "expand-func"]], "hyperexpand": [[285, "hyperexpand"]], "combsimp": [[285, "combsimp"]], "gammasimp": [[285, "gammasimp"]], "Example: Continued Fractions": [[285, "example-continued-fractions"]], "A Note about Equations": [[286, "a-note-about-equations"]], "Solving Equations Algebraically": [[286, "solving-equations-algebraically"]], "Solving Differential Equations": [[286, "solving-differential-equations"]]}, "indexentries": {"antiderivative": [[11, "term-Antiderivative"]], "assumptions": [[11, "term-Assumptions"]], "atom": [[11, "term-Atom"]], "automatic simplification": [[11, "term-Automatic-Simplification"]], "basic": [[11, "term-Basic"]], "boolean": [[11, "term-Boolean"]], "bound symbols": [[11, "term-Bound-symbols"]], "canonical form": [[11, "term-Canonical-Form"]], "canonicalize": [[11, "term-Canonicalize"]], "code generation": [[11, "term-Code-Generation"]], "core": [[11, "term-Core"]], "dummy": [[11, "term-Dummy"]], "equation": [[11, "term-Equation"]], "evaluate": [[11, "term-Evaluate"]], "expr": [[11, "term-Expr"]], "expression": [[11, "term-Expression"]], "expression tree": [[11, "term-Expression-Tree"]], "free symbols": [[11, "term-Free-symbols"]], "function": [[11, "term-Function"]], "function (class)": [[11, "term-Function-class"]], "immutable": [[11, "term-Immutable"]], "interactive": [[11, "term-Interactive"]], "kind": [[11, "term-Kind"]], "matrix": [[11, "term-Matrix"]], "number": [[11, "term-Number"]], "numeric": [[11, "term-Numeric"]], "polys": [[11, "term-Polys"]], "printing": [[11, "term-Printing"]], "relational": [[11, "term-Relational"]], "s": [[11, "term-S"]], "simplification": [[11, "term-Simplification"]], "solve": [[11, "term-Solve"]], "solvers": [[11, "term-Solvers"]], "structural equality": [[11, "term-Structural-Equality"]], "subexpression": [[11, "term-Subexpression"]], "substitution": [[11, "term-Substitution"]], "symbol": [[11, "term-Symbol"]], "symbolic": [[11, "term-Symbolic"]], "three-valued logic": [[11, "term-Three-valued-logic"]], "undefined function": [[11, "term-Undefined-Function"]], "unevaluated": [[11, "term-Unevaluated"]], "_eval_*": [[11, "term-_eval_"]], "args": [[11, "term-args"]], "evalf": [[11, "term-evalf"]], "func": [[11, "term-func"]], "is_*": [[11, "term-is_"]], "isympy": [[11, "term-isympy"]], "lambdify()": [[11, "term-lambdify"]], "lamda": [[11, "term-lamda"]], "mpmath": [[11, "term-mpmath"]], "oo": [[11, "term-oo"]], "sympify()": [[11, "term-sympify"]], "zoo": [[11, "term-zoo"]], "module": [[12, "module-sympy.simplify.simplify"], [30, "module-sympy"], [32, "module-sympy.abc"], [33, "module-sympy.algebras"], [34, "module-sympy.assumptions.ask"], [35, "module-sympy.assumptions.assume"], [36, "module-sympy.assumptions"], [37, "module-sympy.assumptions.predicates"], [38, "module-sympy.assumptions.refine"], [39, "module-sympy.calculus"], [39, "module-sympy.calculus.euler"], [39, "module-sympy.calculus.finite_diff"], [39, "module-sympy.calculus.singularities"], [39, "module-sympy.calculus.util"], [40, "module-sympy.categories"], [40, "module-sympy.categories.diagram_drawing"], [41, "module-sympy.codegen.algorithms"], [41, "module-sympy.codegen.approximations"], [41, "module-sympy.codegen.ast"], [41, "module-sympy.codegen.cfunctions"], [41, "module-sympy.codegen.cnodes"], [41, "module-sympy.codegen.cutils"], [41, "module-sympy.codegen.cxxnodes"], [41, "module-sympy.codegen.fnodes"], [41, "module-sympy.codegen.futils"], [41, "module-sympy.codegen.matrix_nodes"], [41, "module-sympy.codegen.pyutils"], [41, "module-sympy.codegen.rewriting"], [43, "module-sympy.combinatorics.graycode"], [44, "module-sympy.combinatorics.group_constructs"], [45, "module-sympy.combinatorics.group_numbers"], [47, "module-sympy.combinatorics.named_groups"], [48, "module-sympy.combinatorics.partitions"], [50, "module-sympy.combinatorics.perm_groups"], [51, "module-sympy.combinatorics.generators"], [51, "module-sympy.combinatorics.permutations"], [52, "module-sympy.combinatorics.polyhedron"], [53, "module-sympy.combinatorics.prufer"], [54, "module-sympy.combinatorics.subsets"], [55, "module-sympy.combinatorics.tensor_can"], [56, "module-sympy.combinatorics.testutil"], [57, "module-sympy.combinatorics.util"], [59, "module-sympy.core.add"], [59, "module-sympy.core.assumptions"], [59, "module-sympy.core.basic"], [59, "module-sympy.core.cache"], [59, "module-sympy.core.containers"], [59, "module-sympy.core.evalf"], [59, "module-sympy.core.expr"], [59, "module-sympy.core.exprtools"], [59, "module-sympy.core.function"], [59, "module-sympy.core.kind"], [59, "module-sympy.core.mod"], [59, "module-sympy.core.mul"], [59, "module-sympy.core.multidimensional"], [59, "module-sympy.core.numbers"], [59, "module-sympy.core.power"], [59, "module-sympy.core.random"], [59, "module-sympy.core.relational"], [59, "module-sympy.core.singleton"], [59, "module-sympy.core.symbol"], [59, "module-sympy.core.sympify"], [59, "module-sympy.core.traversal"], [60, "module-sympy.crypto.crypto"], [61, "module-sympy.diffgeom"], [62, "module-sympy.discrete"], [62, "module-sympy.discrete.convolutions"], [62, "module-sympy.discrete.transforms"], [66, "module-sympy.functions"], [67, "module-sympy.functions.special.bessel"], [67, "module-sympy.functions.special.beta_functions"], [67, "module-sympy.functions.special.elliptic_integrals"], [67, "module-sympy.functions.special.error_functions"], [67, "module-sympy.functions.special.gamma_functions"], [67, "module-sympy.functions.special.mathieu_functions"], [67, "module-sympy.functions.special.polynomials"], [67, "module-sympy.functions.special.singularity_functions"], [67, "module-sympy.functions.special.zeta_functions"], [68, "module-sympy.geometry.curve"], [69, "module-sympy.geometry.ellipse"], [70, "module-sympy.geometry.entity"], [72, "module-sympy.geometry.line"], [73, "module-sympy.geometry.plane"], [74, "module-sympy.geometry.point"], [75, "module-sympy.geometry.polygon"], [76, "module-sympy.geometry.util"], [79, "module-sympy.holonomic"], [84, "module-sympy.integrals.meijerint"], [84, "module-sympy.integrals.meijerint_doc"], [86, "module-sympy.integrals"], [86, "module-sympy.integrals.intpoly"], [86, "module-sympy.integrals.transforms"], [87, "module-sympy.interactive"], [87, "module-sympy.interactive.printing"], [87, "module-sympy.interactive.session"], [88, "module-sympy.liealgebras"], [89, "module-sympy.logic"], [89, "module-sympy.logic.inference"], [90, "module-sympy.matrices.common"], [92, "module-sympy.matrices.expressions"], [92, "module-sympy.matrices.expressions.blockmatrix"], [93, "module-sympy.matrices.immutable"], [94, "module-sympy.matrices"], [95, "module-sympy.matrices.matrices"], [97, "module-sympy.matrices.sparse"], [98, "module-sympy.matrices.sparsetools"], [99, "module-sympy.ntheory.bbp_pi"], [99, "module-sympy.ntheory.continued_fraction"], [99, "module-sympy.ntheory.digits"], [99, "module-sympy.ntheory.ecm"], [99, "module-sympy.ntheory.egyptian_fraction"], [99, "module-sympy.ntheory.factor_"], [99, "module-sympy.ntheory.generate"], [99, "module-sympy.ntheory.modular"], [99, "module-sympy.ntheory.multinomial"], [99, "module-sympy.ntheory.partitions_"], [99, "module-sympy.ntheory.primetest"], [99, "module-sympy.ntheory.qs"], [99, "module-sympy.ntheory.residue_ntheory"], [101, "module-sympy.parsing"], [101, "module-sympy.parsing.sym_expr"], [102, "module-sympy.physics.continuum_mechanics.beam"], [105, "module-sympy.physics.continuum_mechanics.truss"], [108, "module-sympy.physics.control"], [109, "module-sympy.physics.control.lti"], [110, "module-sympy.physics.hep.gamma_matrices"], [111, "module-sympy.physics.hydrogen"], [112, "module-sympy.physics.matrices"], [114, "module-sympy.physics.mechanics.body"], [117, "module-sympy.physics.mechanics.joint"], [117, "module-sympy.physics.mechanics.jointsmethod"], [118, "module-sympy.physics.mechanics.kane"], [118, "module-sympy.physics.mechanics.lagrange"], [119, "module-sympy.physics.mechanics.linearize"], [120, "module-sympy.physics.mechanics.particle"], [120, "module-sympy.physics.mechanics.rigidbody"], [122, "module-sympy.physics.mechanics.system"], [133, "module-sympy.physics.mechanics"], [142, "module-sympy.physics.optics.gaussopt"], [144, "module-sympy.physics.optics.medium"], [145, "module-sympy.physics.optics.polarization"], [146, "module-sympy.physics.optics.utils"], [147, "module-sympy.physics.optics.waves"], [148, "module-sympy.physics.paulialgebra"], [149, "module-sympy.physics.qho_1d"], [150, "module-sympy.physics.quantum.anticommutator"], [151, "module-sympy.physics.quantum.cartesian"], [152, "module-sympy.physics.quantum.cg"], [153, "module-sympy.physics.quantum.circuitplot"], [154, "module-sympy.physics.quantum.commutator"], [155, "module-sympy.physics.quantum.constants"], [156, "module-sympy.physics.quantum.dagger"], [157, "module-sympy.physics.quantum.gate"], [158, "module-sympy.physics.quantum.grover"], [159, "module-sympy.physics.quantum.hilbert"], [161, "module-sympy.physics.quantum.innerproduct"], [162, "module-sympy.physics.quantum.operator"], [163, "module-sympy.physics.quantum.operatorset"], [164, "module-sympy.physics.quantum.piab"], [165, "module-sympy.physics.quantum.qapply"], [166, "module-sympy.physics.quantum.qft"], [167, "module-sympy.physics.quantum.qubit"], [168, "module-sympy.physics.quantum.represent"], [169, "module-sympy.physics.quantum.shor"], [170, "module-sympy.physics.quantum.spin"], [171, "module-sympy.physics.quantum.state"], [172, "module-sympy.physics.quantum.tensorproduct"], [173, "module-sympy.physics.secondquant"], [174, "module-sympy.physics.sho"], [175, "module-sympy.physics.units.dimensions"], [179, "module-sympy.physics.units.prefixes"], [180, "module-sympy.physics.units.quantities"], [180, "module-sympy.physics.units.util"], [181, "module-sympy.physics.units.unitsystem"], [187, "module-sympy.physics.vector.functions"], [187, "module-sympy.physics.vector.point"], [190, "module-sympy.physics.vector"], [193, "module-sympy.physics.wigner"], [194, "module-sympy.plotting.plot"], [194, "module-sympy.plotting.pygletplot"], [201, "module-sympy.polys.polyconfig"], [201, "module-sympy.polys.polyoptions"], [203, "module-sympy.polys.numberfields.modules"], [203, "module-sympy.polys.numberfields.subfield"], [204, "module-sympy.polys"], [206, "module-sympy.polys.solvers"], [208, "module-sympy.printing.aesaracode"], [208, "module-sympy.printing.c"], [208, "module-sympy.printing.codeprinter"], [208, "module-sympy.printing.conventions"], [208, "module-sympy.printing.cxx"], [208, "module-sympy.printing.fortran"], [208, "module-sympy.printing.gtk"], [208, "module-sympy.printing.jscode"], [208, "module-sympy.printing.julia"], [208, "module-sympy.printing.lambdarepr"], [208, "module-sympy.printing.latex"], [208, "module-sympy.printing.maple"], [208, "module-sympy.printing.mathematica"], [208, "module-sympy.printing.mathml"], [208, "module-sympy.printing.octave"], [208, "module-sympy.printing.precedence"], [208, "module-sympy.printing.pretty"], [208, "module-sympy.printing.pretty.pretty"], [208, "module-sympy.printing.pretty.pretty_symbology"], [208, "module-sympy.printing.pretty.stringpict"], [208, "module-sympy.printing.preview"], [208, "module-sympy.printing.printer"], [208, "module-sympy.printing.pycode"], [208, "module-sympy.printing.python"], [208, "module-sympy.printing.rcode"], [208, "module-sympy.printing.repr"], [208, "module-sympy.printing.rust"], [208, "module-sympy.printing.smtlib"], [208, "module-sympy.printing.str"], [208, "module-sympy.printing.tree"], [216, "module-sympy.sets.conditionset"], [216, "module-sympy.sets.fancysets"], [216, "module-sympy.sets.powerset"], [216, "module-sympy.sets.sets"], [218, "module-sympy.simplify.hyperexpand_doc"], [220, "module-sympy.simplify.combsimp"], [220, "module-sympy.simplify.cse_main"], [220, "module-sympy.simplify.epathtools"], [220, "module-sympy.simplify.hyperexpand"], [220, "module-sympy.simplify.powsimp"], [220, "module-sympy.simplify.radsimp"], [220, "module-sympy.simplify.ratsimp"], [220, "module-sympy.simplify.sqrtdenest"], [220, "module-sympy.simplify.trigsimp"], [223, "module-sympy.solvers.inequalities"], [224, "module-sympy.solvers.ode"], [224, "module-sympy.solvers.ode.ode"], [225, "module-sympy.solvers.pde"], [226, "module-sympy.solvers"], [226, "module-sympy.solvers.recurr"], [227, "module-sympy.solvers.solveset"], [228, "module-sympy.stats"], [228, "module-sympy.stats.crv"], [228, "module-sympy.stats.crv_types"], [228, "module-sympy.stats.frv"], [228, "module-sympy.stats.frv_types"], [228, "module-sympy.stats.rv"], [229, "module-sympy.tensor.array"], [230, "module-sympy.tensor.array.expressions"], [231, "module-sympy.tensor"], [232, "module-sympy.tensor.index_methods"], [233, "module-sympy.tensor.indexed"], [234, "module-sympy.tensor.tensor"], [235, "module-sympy.tensor.toperators"], [236, "module-sympy.testing"], [237, "module-sympy.testing.pytest"], [238, "module-sympy.testing.randtest"], [239, "module-sympy.testing.runtests"], [240, "module-sympy.utilities.autowrap"], [241, "module-sympy.utilities.codegen"], [242, "module-sympy.utilities.decorator"], [243, "module-sympy.utilities.enumerative"], [244, "module-sympy.utilities.exceptions"], [245, "module-sympy.utilities"], [246, "module-sympy.utilities.iterables"], [247, "module-sympy.utilities.lambdify"], [248, "module-sympy.utilities.memoization"], [249, "module-sympy.utilities.misc"], [250, "module-sympy.utilities.pkgdata"], [251, "module-sympy.utilities.source"], [252, "module-sympy.utilities.timeutils"], [261, "module-sympy.vector"], [270, "module-sympy.physics"]], "sympy.simplify.simplify": [[12, "module-sympy.simplify.simplify"]], "sympy": [[30, "module-sympy"]], "sympy.abc": [[32, "module-sympy.abc"]], "quaternion (class in sympy.algebras)": [[33, "sympy.algebras.Quaternion"]], "add() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.add"]], "angle() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.angle"]], "arc_coplanar() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.arc_coplanar"]], "axis() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.axis"]], "exp() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.exp"]], "from_axis_angle() (sympy.algebras.quaternion class method)": [[33, "sympy.algebras.Quaternion.from_axis_angle"]], "from_rotation_matrix() (sympy.algebras.quaternion class method)": [[33, "sympy.algebras.Quaternion.from_rotation_matrix"]], "index_vector() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.index_vector"]], "integrate() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.integrate"]], "inverse() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.inverse"]], "is_pure() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.is_pure"]], "is_zero_quaternion() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.is_zero_quaternion"]], "mensor() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.mensor"]], "mul() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.mul"]], "norm() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.norm"]], "normalize() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.normalize"]], "orthogonal() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.orthogonal"]], "parallel() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.parallel"]], "pow() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.pow"]], "pow_cos_sin() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.pow_cos_sin"]], "rotate_point() (sympy.algebras.quaternion static method)": [[33, "sympy.algebras.Quaternion.rotate_point"]], "scalar_part() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.scalar_part"]], "sympy.algebras": [[33, "module-sympy.algebras"]], "to_axis_angle() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.to_axis_angle"]], "to_rotation_matrix() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.to_rotation_matrix"]], "vector_coplanar() (sympy.algebras.quaternion class method)": [[33, "sympy.algebras.Quaternion.vector_coplanar"]], "vector_part() (sympy.algebras.quaternion method)": [[33, "sympy.algebras.Quaternion.vector_part"]], "assumptionkeys (class in sympy.assumptions.ask)": [[34, "sympy.assumptions.ask.AssumptionKeys"]], "ask() (in module sympy.assumptions.ask)": [[34, "sympy.assumptions.ask.ask"]], "register_handler() (in module sympy.assumptions.ask)": [[34, "sympy.assumptions.ask.register_handler"]], "remove_handler() (in module sympy.assumptions.ask)": [[34, "sympy.assumptions.ask.remove_handler"]], "sympy.assumptions.ask": [[34, "module-sympy.assumptions.ask"]], "appliedpredicate (class in sympy.assumptions.assume)": [[35, "sympy.assumptions.assume.AppliedPredicate"]], "assumptionscontext (class in sympy.assumptions.assume)": [[35, "sympy.assumptions.assume.AssumptionsContext"]], "predicate (class in sympy.assumptions.assume)": [[35, "sympy.assumptions.assume.Predicate"]], "undefinedpredicate (class in sympy.assumptions.assume)": [[35, "sympy.assumptions.assume.UndefinedPredicate"]], "add() (sympy.assumptions.assume.assumptionscontext method)": [[35, "sympy.assumptions.assume.AssumptionsContext.add"]], "arg (sympy.assumptions.assume.appliedpredicate property)": [[35, "sympy.assumptions.assume.AppliedPredicate.arg"]], "arguments (sympy.assumptions.assume.appliedpredicate property)": [[35, "sympy.assumptions.assume.AppliedPredicate.arguments"]], "assuming() (in module sympy.assumptions.assume)": [[35, "sympy.assumptions.assume.assuming"]], "eval() (sympy.assumptions.assume.predicate method)": [[35, "sympy.assumptions.assume.Predicate.eval"]], "function (sympy.assumptions.assume.appliedpredicate property)": [[35, "sympy.assumptions.assume.AppliedPredicate.function"]], "handler (sympy.assumptions.assume.predicate attribute)": [[35, "sympy.assumptions.assume.Predicate.handler"]], "register() (sympy.assumptions.assume.predicate class method)": [[35, "sympy.assumptions.assume.Predicate.register"]], "register_many() (sympy.assumptions.assume.predicate class method)": [[35, "sympy.assumptions.assume.Predicate.register_many"]], "sympy.assumptions.assume": [[35, "module-sympy.assumptions.assume"]], "sympy.assumptions": [[36, "module-sympy.assumptions"]], "algebraichandler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[37, "sympy.assumptions.predicates.sets.AlgebraicPredicate.AlgebraicHandler"]], "algebraicpredicate (class in sympy.assumptions.predicates.sets)": [[37, "sympy.assumptions.predicates.sets.AlgebraicPredicate"]], "antihermitianpredicate (class in sympy.assumptions.predicates.sets)": [[37, "sympy.assumptions.predicates.sets.AntihermitianPredicate"]], "commutativepredicate (class in sympy.assumptions.predicates.common)": [[37, "sympy.assumptions.predicates.common.CommutativePredicate"]], "complexelementspredicate (class in sympy.assumptions.predicates.matrices)": [[37, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate"]], "complexpredicate (class in sympy.assumptions.predicates.sets)": [[37, "sympy.assumptions.predicates.sets.ComplexPredicate"]], "compositepredicate (class in sympy.assumptions.predicates.ntheory)": [[37, "sympy.assumptions.predicates.ntheory.CompositePredicate"]], "diagonalpredicate (class in sympy.assumptions.predicates.matrices)": [[37, "sympy.assumptions.predicates.matrices.DiagonalPredicate"]], "evenpredicate (class in sympy.assumptions.predicates.ntheory)": [[37, "sympy.assumptions.predicates.ntheory.EvenPredicate"]], "extendedrealpredicate (class in sympy.assumptions.predicates.sets)": [[37, "sympy.assumptions.predicates.sets.ExtendedRealPredicate"]], "finitepredicate (class in sympy.assumptions.predicates.calculus)": [[37, "sympy.assumptions.predicates.calculus.FinitePredicate"]], "fullrankpredicate (class in sympy.assumptions.predicates.matrices)": [[37, "sympy.assumptions.predicates.matrices.FullRankPredicate"]], "hermitianpredicate (class in sympy.assumptions.predicates.sets)": [[37, "sympy.assumptions.predicates.sets.HermitianPredicate"]], "imaginarypredicate (class in sympy.assumptions.predicates.sets)": [[37, "sympy.assumptions.predicates.sets.ImaginaryPredicate"]], "infinitepredicate (class in sympy.assumptions.predicates.calculus)": [[37, "sympy.assumptions.predicates.calculus.InfinitePredicate"]], "integerelementspredicate (class in sympy.assumptions.predicates.matrices)": [[37, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate"]], "integerpredicate (class in sympy.assumptions.predicates.sets)": [[37, "sympy.assumptions.predicates.sets.IntegerPredicate"]], "invertiblepredicate (class in sympy.assumptions.predicates.matrices)": [[37, "sympy.assumptions.predicates.matrices.InvertiblePredicate"]], "irrationalpredicate (class in sympy.assumptions.predicates.sets)": [[37, "sympy.assumptions.predicates.sets.IrrationalPredicate"]], "istruepredicate (class in sympy.assumptions.predicates.common)": [[37, "sympy.assumptions.predicates.common.IsTruePredicate"]], "lowertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[37, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate"]], "negativepredicate (class in sympy.assumptions.predicates.order)": [[37, "sympy.assumptions.predicates.order.NegativePredicate"]], "nonnegativepredicate (class in sympy.assumptions.predicates.order)": [[37, "sympy.assumptions.predicates.order.NonNegativePredicate"]], "nonpositivepredicate (class in sympy.assumptions.predicates.order)": [[37, "sympy.assumptions.predicates.order.NonPositivePredicate"]], "nonzeropredicate (class in sympy.assumptions.predicates.order)": [[37, "sympy.assumptions.predicates.order.NonZeroPredicate"]], "normalpredicate (class in sympy.assumptions.predicates.matrices)": [[37, "sympy.assumptions.predicates.matrices.NormalPredicate"]], "oddpredicate (class in sympy.assumptions.predicates.ntheory)": [[37, "sympy.assumptions.predicates.ntheory.OddPredicate"]], "orthogonalpredicate (class in sympy.assumptions.predicates.matrices)": [[37, "sympy.assumptions.predicates.matrices.OrthogonalPredicate"]], "positivedefinitepredicate (class in sympy.assumptions.predicates.matrices)": [[37, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate"]], "positivepredicate (class in sympy.assumptions.predicates.order)": [[37, "sympy.assumptions.predicates.order.PositivePredicate"]], "primepredicate (class in sympy.assumptions.predicates.ntheory)": [[37, "sympy.assumptions.predicates.ntheory.PrimePredicate"]], "rationalpredicate (class in sympy.assumptions.predicates.sets)": [[37, "sympy.assumptions.predicates.sets.RationalPredicate"]], "realelementspredicate (class in sympy.assumptions.predicates.matrices)": [[37, "sympy.assumptions.predicates.matrices.RealElementsPredicate"]], "realpredicate (class in sympy.assumptions.predicates.sets)": [[37, "sympy.assumptions.predicates.sets.RealPredicate"]], "singularpredicate (class in sympy.assumptions.predicates.matrices)": [[37, "sympy.assumptions.predicates.matrices.SingularPredicate"]], "squarepredicate (class in sympy.assumptions.predicates.matrices)": [[37, "sympy.assumptions.predicates.matrices.SquarePredicate"]], "symmetricpredicate (class in sympy.assumptions.predicates.matrices)": [[37, "sympy.assumptions.predicates.matrices.SymmetricPredicate"]], "transcendentalpredicate (class in sympy.assumptions.predicates.sets)": [[37, "sympy.assumptions.predicates.sets.TranscendentalPredicate"]], "triangularpredicate (class in sympy.assumptions.predicates.matrices)": [[37, "sympy.assumptions.predicates.matrices.TriangularPredicate"]], "unittriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[37, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate"]], "unitarypredicate (class in sympy.assumptions.predicates.matrices)": [[37, "sympy.assumptions.predicates.matrices.UnitaryPredicate"]], "uppertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[37, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate"]], "zeropredicate (class in sympy.assumptions.predicates.order)": [[37, "sympy.assumptions.predicates.order.ZeroPredicate"]], "handler (sympy.assumptions.predicates.calculus.finitepredicate attribute)": [[37, "sympy.assumptions.predicates.calculus.FinitePredicate.handler"]], "handler (sympy.assumptions.predicates.calculus.infinitepredicate attribute)": [[37, "sympy.assumptions.predicates.calculus.InfinitePredicate.handler"]], "handler (sympy.assumptions.predicates.common.commutativepredicate attribute)": [[37, "sympy.assumptions.predicates.common.CommutativePredicate.handler"]], "handler (sympy.assumptions.predicates.common.istruepredicate attribute)": [[37, "sympy.assumptions.predicates.common.IsTruePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.complexelementspredicate attribute)": [[37, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.diagonalpredicate attribute)": [[37, "sympy.assumptions.predicates.matrices.DiagonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.fullrankpredicate attribute)": [[37, "sympy.assumptions.predicates.matrices.FullRankPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.integerelementspredicate attribute)": [[37, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.invertiblepredicate attribute)": [[37, "sympy.assumptions.predicates.matrices.InvertiblePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.lowertriangularpredicate attribute)": [[37, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.normalpredicate attribute)": [[37, "sympy.assumptions.predicates.matrices.NormalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.orthogonalpredicate attribute)": [[37, "sympy.assumptions.predicates.matrices.OrthogonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.positivedefinitepredicate attribute)": [[37, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.realelementspredicate attribute)": [[37, "sympy.assumptions.predicates.matrices.RealElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.singularpredicate attribute)": [[37, "sympy.assumptions.predicates.matrices.SingularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.squarepredicate attribute)": [[37, "sympy.assumptions.predicates.matrices.SquarePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.symmetricpredicate attribute)": [[37, "sympy.assumptions.predicates.matrices.SymmetricPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.triangularpredicate attribute)": [[37, "sympy.assumptions.predicates.matrices.TriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unittriangularpredicate attribute)": [[37, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unitarypredicate attribute)": [[37, "sympy.assumptions.predicates.matrices.UnitaryPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.uppertriangularpredicate attribute)": [[37, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.compositepredicate attribute)": [[37, "sympy.assumptions.predicates.ntheory.CompositePredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.evenpredicate attribute)": [[37, "sympy.assumptions.predicates.ntheory.EvenPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.oddpredicate attribute)": [[37, "sympy.assumptions.predicates.ntheory.OddPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.primepredicate attribute)": [[37, "sympy.assumptions.predicates.ntheory.PrimePredicate.handler"]], "handler (sympy.assumptions.predicates.order.negativepredicate attribute)": [[37, "sympy.assumptions.predicates.order.NegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonnegativepredicate attribute)": [[37, "sympy.assumptions.predicates.order.NonNegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonpositivepredicate attribute)": [[37, "sympy.assumptions.predicates.order.NonPositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonzeropredicate attribute)": [[37, "sympy.assumptions.predicates.order.NonZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.order.positivepredicate attribute)": [[37, "sympy.assumptions.predicates.order.PositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.zeropredicate attribute)": [[37, "sympy.assumptions.predicates.order.ZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[37, "sympy.assumptions.predicates.sets.AlgebraicPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.antihermitianpredicate attribute)": [[37, "sympy.assumptions.predicates.sets.AntihermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.complexpredicate attribute)": [[37, "sympy.assumptions.predicates.sets.ComplexPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.extendedrealpredicate attribute)": [[37, "sympy.assumptions.predicates.sets.ExtendedRealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.hermitianpredicate attribute)": [[37, "sympy.assumptions.predicates.sets.HermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.imaginarypredicate attribute)": [[37, "sympy.assumptions.predicates.sets.ImaginaryPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.integerpredicate attribute)": [[37, "sympy.assumptions.predicates.sets.IntegerPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.irrationalpredicate attribute)": [[37, "sympy.assumptions.predicates.sets.IrrationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.rationalpredicate attribute)": [[37, "sympy.assumptions.predicates.sets.RationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.realpredicate attribute)": [[37, "sympy.assumptions.predicates.sets.RealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.transcendentalpredicate attribute)": [[37, "sympy.assumptions.predicates.sets.TranscendentalPredicate.handler"]], "sympy.assumptions.predicates": [[37, "module-sympy.assumptions.predicates"]], "refine() (in module sympy.assumptions.refine)": [[38, "sympy.assumptions.refine.refine"]], "refine_pow() (in module sympy.assumptions.refine)": [[38, "sympy.assumptions.refine.refine_Pow"]], "refine_abs() (in module sympy.assumptions.refine)": [[38, "sympy.assumptions.refine.refine_abs"]], "refine_arg() (in module sympy.assumptions.refine)": [[38, "sympy.assumptions.refine.refine_arg"]], "refine_atan2() (in module sympy.assumptions.refine)": [[38, "sympy.assumptions.refine.refine_atan2"]], "refine_im() (in module sympy.assumptions.refine)": [[38, "sympy.assumptions.refine.refine_im"]], "refine_matrixelement() (in module sympy.assumptions.refine)": [[38, "sympy.assumptions.refine.refine_matrixelement"]], "refine_re() (in module sympy.assumptions.refine)": [[38, "sympy.assumptions.refine.refine_re"]], "refine_sign() (in module sympy.assumptions.refine)": [[38, "sympy.assumptions.refine.refine_sign"]], "sympy.assumptions.refine": [[38, "module-sympy.assumptions.refine"]], "apply_finite_diff() (in module sympy.calculus.finite_diff)": [[39, "sympy.calculus.finite_diff.apply_finite_diff"]], "continuous_domain() (in module sympy.calculus.util)": [[39, "sympy.calculus.util.continuous_domain"]], "differentiate_finite() (in module sympy.calculus.finite_diff)": [[39, "sympy.calculus.finite_diff.differentiate_finite"]], "euler_equations() (in module sympy.calculus.euler)": [[39, "sympy.calculus.euler.euler_equations"]], "finite_diff_weights() (in module sympy.calculus.finite_diff)": [[39, "sympy.calculus.finite_diff.finite_diff_weights"]], "function_range() (in module sympy.calculus.util)": [[39, "sympy.calculus.util.function_range"]], "is_convex() (in module sympy.calculus.util)": [[39, "sympy.calculus.util.is_convex"]], "is_decreasing() (in module sympy.calculus.singularities)": [[39, "sympy.calculus.singularities.is_decreasing"]], "is_increasing() (in module sympy.calculus.singularities)": [[39, "sympy.calculus.singularities.is_increasing"]], "is_monotonic() (in module sympy.calculus.singularities)": [[39, "sympy.calculus.singularities.is_monotonic"]], "is_strictly_decreasing() (in module sympy.calculus.singularities)": [[39, "sympy.calculus.singularities.is_strictly_decreasing"]], "is_strictly_increasing() (in module sympy.calculus.singularities)": [[39, "sympy.calculus.singularities.is_strictly_increasing"]], "lcim() (in module sympy.calculus.util)": [[39, "sympy.calculus.util.lcim"]], "maximum() (in module sympy.calculus.util)": [[39, "sympy.calculus.util.maximum"]], "minimum() (in module sympy.calculus.util)": [[39, "sympy.calculus.util.minimum"]], "monotonicity_helper() (in module sympy.calculus.singularities)": [[39, "sympy.calculus.singularities.monotonicity_helper"]], "not_empty_in() (in module sympy.calculus.util)": [[39, "sympy.calculus.util.not_empty_in"]], "periodicity() (in module sympy.calculus.util)": [[39, "sympy.calculus.util.periodicity"]], "singularities() (in module sympy.calculus.singularities)": [[39, "sympy.calculus.singularities.singularities"]], "stationary_points() (in module sympy.calculus.util)": [[39, "sympy.calculus.util.stationary_points"]], "sympy.calculus": [[39, "module-sympy.calculus"]], "sympy.calculus.euler": [[39, "module-sympy.calculus.euler"]], "sympy.calculus.finite_diff": [[39, "module-sympy.calculus.finite_diff"]], "sympy.calculus.singularities": [[39, "module-sympy.calculus.singularities"]], "sympy.calculus.util": [[39, "module-sympy.calculus.util"]], "arrowstringdescription (class in sympy.categories.diagram_drawing)": [[40, "sympy.categories.diagram_drawing.ArrowStringDescription"]], "category (class in sympy.categories)": [[40, "sympy.categories.Category"]], "compositemorphism (class in sympy.categories)": [[40, "sympy.categories.CompositeMorphism"]], "diagram (class in sympy.categories)": [[40, "sympy.categories.Diagram"]], "diagramgrid (class in sympy.categories.diagram_drawing)": [[40, "sympy.categories.diagram_drawing.DiagramGrid"]], "identitymorphism (class in sympy.categories)": [[40, "sympy.categories.IdentityMorphism"]], "morphism (class in sympy.categories)": [[40, "sympy.categories.Morphism"]], "namedmorphism (class in sympy.categories)": [[40, "sympy.categories.NamedMorphism"]], "object (class in sympy.categories)": [[40, "sympy.categories.Object"]], "xypicdiagramdrawer (class in sympy.categories.diagram_drawing)": [[40, "sympy.categories.diagram_drawing.XypicDiagramDrawer"]], "codomain (sympy.categories.compositemorphism property)": [[40, "sympy.categories.CompositeMorphism.codomain"]], "codomain (sympy.categories.morphism property)": [[40, "sympy.categories.Morphism.codomain"]], "commutative_diagrams (sympy.categories.category property)": [[40, "sympy.categories.Category.commutative_diagrams"]], "components (sympy.categories.compositemorphism property)": [[40, "sympy.categories.CompositeMorphism.components"]], "compose() (sympy.categories.morphism method)": [[40, "sympy.categories.Morphism.compose"]], "conclusions (sympy.categories.diagram property)": [[40, "sympy.categories.Diagram.conclusions"]], "domain (sympy.categories.compositemorphism property)": [[40, "sympy.categories.CompositeMorphism.domain"]], "domain (sympy.categories.morphism property)": [[40, "sympy.categories.Morphism.domain"]], "draw() (sympy.categories.diagram_drawing.xypicdiagramdrawer method)": [[40, "sympy.categories.diagram_drawing.XypicDiagramDrawer.draw"]], "flatten() (sympy.categories.compositemorphism method)": [[40, "sympy.categories.CompositeMorphism.flatten"]], "height (sympy.categories.diagram_drawing.diagramgrid property)": [[40, "sympy.categories.diagram_drawing.DiagramGrid.height"]], "hom() (sympy.categories.diagram method)": [[40, "sympy.categories.Diagram.hom"]], "is_subdiagram() (sympy.categories.diagram method)": [[40, "sympy.categories.Diagram.is_subdiagram"]], "morphisms (sympy.categories.diagram_drawing.diagramgrid property)": [[40, "sympy.categories.diagram_drawing.DiagramGrid.morphisms"]], "name (sympy.categories.category property)": [[40, "sympy.categories.Category.name"]], "name (sympy.categories.namedmorphism property)": [[40, "sympy.categories.NamedMorphism.name"]], "objects (sympy.categories.category property)": [[40, "sympy.categories.Category.objects"]], "objects (sympy.categories.diagram property)": [[40, "sympy.categories.Diagram.objects"]], "premises (sympy.categories.diagram property)": [[40, "sympy.categories.Diagram.premises"]], "preview_diagram() (in module sympy.categories.diagram_drawing)": [[40, "sympy.categories.diagram_drawing.preview_diagram"]], "subdiagram_from_objects() (sympy.categories.diagram method)": [[40, "sympy.categories.Diagram.subdiagram_from_objects"]], "sympy.categories": [[40, "module-sympy.categories"]], "sympy.categories.diagram_drawing": [[40, "module-sympy.categories.diagram_drawing"]], "width (sympy.categories.diagram_drawing.diagramgrid property)": [[40, "sympy.categories.diagram_drawing.DiagramGrid.width"]], "xypic_draw_diagram() (in module sympy.categories.diagram_drawing)": [[40, "sympy.categories.diagram_drawing.xypic_draw_diagram"]], "arrayconstructor (class in sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.ArrayConstructor"]], "assignment (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.Assignment"]], "assignmentbase (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.AssignmentBase"]], "attribute (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.Attribute"]], "augmentedassignment (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.AugmentedAssignment"]], "breaktoken (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.BreakToken"]], "cbrt (class in sympy.codegen.cfunctions)": [[41, "sympy.codegen.cfunctions.Cbrt"]], "codeblock (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.CodeBlock"]], "commaoperator (class in sympy.codegen.cnodes)": [[41, "sympy.codegen.cnodes.CommaOperator"]], "comment (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.Comment"]], "complextype (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.ComplexType"]], "continuetoken (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.ContinueToken"]], "declaration (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.Declaration"]], "do (class in sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.Do"]], "element (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.Element"]], "extent (class in sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.Extent"]], "floatbasetype (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.FloatBaseType"]], "floattype (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.FloatType"]], "for (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.For"]], "fortranreturn (class in sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.FortranReturn"]], "funcminusoneoptim (class in sympy.codegen.rewriting)": [[41, "sympy.codegen.rewriting.FuncMinusOneOptim"]], "functioncall (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.FunctionCall"]], "functiondefinition (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.FunctionDefinition"]], "functionprototype (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.FunctionPrototype"]], "goto (class in sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.GoTo"]], "implieddoloop (class in sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.ImpliedDoLoop"]], "intbasetype (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.IntBaseType"]], "label (class in sympy.codegen.cnodes)": [[41, "sympy.codegen.cnodes.Label"]], "matrixsolve (class in sympy.codegen.matrix_nodes)": [[41, "sympy.codegen.matrix_nodes.MatrixSolve"]], "module (class in sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.Module"]], "node (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.Node"]], "nonetoken (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.NoneToken"]], "optimization (class in sympy.codegen.rewriting)": [[41, "sympy.codegen.rewriting.Optimization"]], "pointer (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.Pointer"]], "postdecrement (class in sympy.codegen.cnodes)": [[41, "sympy.codegen.cnodes.PostDecrement"]], "postincrement (class in sympy.codegen.cnodes)": [[41, "sympy.codegen.cnodes.PostIncrement"]], "predecrement (class in sympy.codegen.cnodes)": [[41, "sympy.codegen.cnodes.PreDecrement"]], "preincrement (class in sympy.codegen.cnodes)": [[41, "sympy.codegen.cnodes.PreIncrement"]], "print (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.Print"]], "program (class in sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.Program"]], "quotedstring (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.QuotedString"]], "replaceoptim (class in sympy.codegen.rewriting)": [[41, "sympy.codegen.rewriting.ReplaceOptim"]], "return (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.Return"]], "scope (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.Scope"]], "seriesapprox (class in sympy.codegen.approximations)": [[41, "sympy.codegen.approximations.SeriesApprox"]], "signedinttype (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.SignedIntType"]], "sqrt (class in sympy.codegen.cfunctions)": [[41, "sympy.codegen.cfunctions.Sqrt"]], "stream (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.Stream"]], "string (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.String"]], "subroutine (class in sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.Subroutine"]], "subroutinecall (class in sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.SubroutineCall"]], "sumapprox (class in sympy.codegen.approximations)": [[41, "sympy.codegen.approximations.SumApprox"]], "token (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.Token"]], "type (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.Type"]], "unsignedinttype (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.UnsignedIntType"]], "variable (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.Variable"]], "while (class in sympy.codegen.ast)": [[41, "sympy.codegen.ast.While"]], "alignof() (in module sympy.codegen.cnodes)": [[41, "sympy.codegen.cnodes.alignof"]], "allocated() (in module sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.allocated"]], "array() (in module sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.array"]], "as_declaration() (sympy.codegen.ast.variable method)": [[41, "sympy.codegen.ast.Variable.as_Declaration"]], "attr_params() (sympy.codegen.ast.node method)": [[41, "sympy.codegen.ast.Node.attr_params"]], "aug_assign() (in module sympy.codegen.ast)": [[41, "sympy.codegen.ast.aug_assign"]], "bind_c() (in module sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.bind_C"]], "cast_check() (sympy.codegen.ast.type method)": [[41, "sympy.codegen.ast.Type.cast_check"]], "cast_nocheck (sympy.codegen.ast.floatbasetype attribute)": [[41, "sympy.codegen.ast.FloatBaseType.cast_nocheck"]], "cast_nocheck() (sympy.codegen.ast.floattype method)": [[41, "sympy.codegen.ast.FloatType.cast_nocheck"]], "cmplx (class in sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.cmplx"]], "create_expand_pow_optimization() (in module sympy.codegen.rewriting)": [[41, "sympy.codegen.rewriting.create_expand_pow_optimization"]], "cse() (sympy.codegen.ast.codeblock method)": [[41, "sympy.codegen.ast.CodeBlock.cse"]], "decimal_dig (sympy.codegen.ast.floattype property)": [[41, "sympy.codegen.ast.FloatType.decimal_dig"]], "deduced() (sympy.codegen.ast.variable class method)": [[41, "sympy.codegen.ast.Variable.deduced"]], "dig (sympy.codegen.ast.floattype property)": [[41, "sympy.codegen.ast.FloatType.dig"]], "dimension() (in module sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.dimension"]], "dsign (class in sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.dsign"]], "eps (sympy.codegen.ast.floattype property)": [[41, "sympy.codegen.ast.FloatType.eps"]], "exp2 (class in sympy.codegen.cfunctions)": [[41, "sympy.codegen.cfunctions.exp2"]], "expm1 (class in sympy.codegen.cfunctions)": [[41, "sympy.codegen.cfunctions.expm1"]], "fdiff() (sympy.codegen.cfunctions.cbrt method)": [[41, "sympy.codegen.cfunctions.Cbrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.sqrt method)": [[41, "sympy.codegen.cfunctions.Sqrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.exp2 method)": [[41, "sympy.codegen.cfunctions.exp2.fdiff"]], "fdiff() (sympy.codegen.cfunctions.expm1 method)": [[41, "sympy.codegen.cfunctions.expm1.fdiff"]], "fdiff() (sympy.codegen.cfunctions.fma method)": [[41, "sympy.codegen.cfunctions.fma.fdiff"]], "fdiff() (sympy.codegen.cfunctions.hypot method)": [[41, "sympy.codegen.cfunctions.hypot.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log10 method)": [[41, "sympy.codegen.cfunctions.log10.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log1p method)": [[41, "sympy.codegen.cfunctions.log1p.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log2 method)": [[41, "sympy.codegen.cfunctions.log2.fdiff"]], "fma (class in sympy.codegen.cfunctions)": [[41, "sympy.codegen.cfunctions.fma"]], "from_expr() (sympy.codegen.ast.type class method)": [[41, "sympy.codegen.ast.Type.from_expr"]], "goto (class in sympy.codegen.cnodes)": [[41, "sympy.codegen.cnodes.goto"]], "hypot (class in sympy.codegen.cfunctions)": [[41, "sympy.codegen.cfunctions.hypot"]], "isign (class in sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.isign"]], "kind (class in sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.kind"]], "kwargs() (sympy.codegen.ast.token method)": [[41, "sympy.codegen.ast.Token.kwargs"]], "lbound() (in module sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.lbound"]], "literal_dp (class in sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.literal_dp"]], "literal_sp (class in sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.literal_sp"]], "log10 (class in sympy.codegen.cfunctions)": [[41, "sympy.codegen.cfunctions.log10"]], "log1p (class in sympy.codegen.cfunctions)": [[41, "sympy.codegen.cfunctions.log1p"]], "log2 (class in sympy.codegen.cfunctions)": [[41, "sympy.codegen.cfunctions.log2"]], "max (sympy.codegen.ast.floattype property)": [[41, "sympy.codegen.ast.FloatType.max"]], "max_exponent (sympy.codegen.ast.floattype property)": [[41, "sympy.codegen.ast.FloatType.max_exponent"]], "merge (class in sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.merge"]], "min_exponent (sympy.codegen.ast.floattype property)": [[41, "sympy.codegen.ast.FloatType.min_exponent"]], "newtons_method() (in module sympy.codegen.algorithms)": [[41, "sympy.codegen.algorithms.newtons_method"]], "newtons_method_function() (in module sympy.codegen.algorithms)": [[41, "sympy.codegen.algorithms.newtons_method_function"]], "optimize() (in module sympy.codegen.rewriting)": [[41, "sympy.codegen.rewriting.optimize"]], "render_as_module() (in module sympy.codegen.futils)": [[41, "sympy.codegen.futils.render_as_module"]], "render_as_module() (in module sympy.codegen.pyutils)": [[41, "sympy.codegen.pyutils.render_as_module"]], "render_as_source_file() (in module sympy.codegen.cutils)": [[41, "sympy.codegen.cutils.render_as_source_file"]], "replace_in_add() (sympy.codegen.rewriting.funcminusoneoptim method)": [[41, "sympy.codegen.rewriting.FuncMinusOneOptim.replace_in_Add"]], "reshape() (in module sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.reshape"]], "shape() (in module sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.shape"]], "size() (in module sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.size"]], "sizeof() (in module sympy.codegen.cnodes)": [[41, "sympy.codegen.cnodes.sizeof"]], "struct (class in sympy.codegen.cnodes)": [[41, "sympy.codegen.cnodes.struct"]], "sympy.codegen.algorithms": [[41, "module-sympy.codegen.algorithms"]], "sympy.codegen.approximations": [[41, "module-sympy.codegen.approximations"]], "sympy.codegen.ast": [[41, "module-sympy.codegen.ast"]], "sympy.codegen.cfunctions": [[41, "module-sympy.codegen.cfunctions"]], "sympy.codegen.cnodes": [[41, "module-sympy.codegen.cnodes"]], "sympy.codegen.cutils": [[41, "module-sympy.codegen.cutils"]], "sympy.codegen.cxxnodes": [[41, "module-sympy.codegen.cxxnodes"]], "sympy.codegen.fnodes": [[41, "module-sympy.codegen.fnodes"]], "sympy.codegen.futils": [[41, "module-sympy.codegen.futils"]], "sympy.codegen.matrix_nodes": [[41, "module-sympy.codegen.matrix_nodes"]], "sympy.codegen.pyutils": [[41, "module-sympy.codegen.pyutils"]], "sympy.codegen.rewriting": [[41, "module-sympy.codegen.rewriting"]], "tiny (sympy.codegen.ast.floattype property)": [[41, "sympy.codegen.ast.FloatType.tiny"]], "topological_sort() (sympy.codegen.ast.codeblock class method)": [[41, "sympy.codegen.ast.CodeBlock.topological_sort"]], "union (class in sympy.codegen.cnodes)": [[41, "sympy.codegen.cnodes.union"]], "use (class in sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.use"]], "use_rename (class in sympy.codegen.fnodes)": [[41, "sympy.codegen.fnodes.use_rename"]], "using (class in sympy.codegen.cxxnodes)": [[41, "sympy.codegen.cxxnodes.using"]], "graycode (class in sympy.combinatorics.graycode)": [[43, "sympy.combinatorics.graycode.GrayCode"]], "bin_to_gray() (sympy.combinatorics.graycode method)": [[43, "sympy.combinatorics.graycode.bin_to_gray"]], "current (sympy.combinatorics.graycode.graycode property)": [[43, "sympy.combinatorics.graycode.GrayCode.current"]], "generate_gray() (sympy.combinatorics.graycode.graycode method)": [[43, "sympy.combinatorics.graycode.GrayCode.generate_gray"]], "get_subset_from_bitstring() (sympy.combinatorics.graycode method)": [[43, "sympy.combinatorics.graycode.get_subset_from_bitstring"]], "gray_to_bin() (sympy.combinatorics.graycode method)": [[43, "sympy.combinatorics.graycode.gray_to_bin"]], "graycode_subsets() (sympy.combinatorics.graycode method)": [[43, "sympy.combinatorics.graycode.graycode_subsets"]], "n (sympy.combinatorics.graycode.graycode property)": [[43, "sympy.combinatorics.graycode.GrayCode.n"]], "next() (sympy.combinatorics.graycode.graycode method)": [[43, "sympy.combinatorics.graycode.GrayCode.next"]], "random_bitstring() (sympy.combinatorics.graycode method)": [[43, "sympy.combinatorics.graycode.random_bitstring"]], "rank (sympy.combinatorics.graycode.graycode property)": [[43, "sympy.combinatorics.graycode.GrayCode.rank"]], "selections (sympy.combinatorics.graycode.graycode property)": [[43, "sympy.combinatorics.graycode.GrayCode.selections"]], "skip() (sympy.combinatorics.graycode.graycode method)": [[43, "sympy.combinatorics.graycode.GrayCode.skip"]], "sympy.combinatorics.graycode": [[43, "module-sympy.combinatorics.graycode"]], "unrank() (sympy.combinatorics.graycode.graycode class method)": [[43, "sympy.combinatorics.graycode.GrayCode.unrank"]], "directproduct() (in module sympy.combinatorics.group_constructs)": [[44, "sympy.combinatorics.group_constructs.DirectProduct"]], "sympy.combinatorics.group_constructs": [[44, "module-sympy.combinatorics.group_constructs"]], "is_abelian_number() (in module sympy.combinatorics.group_numbers)": [[45, "sympy.combinatorics.group_numbers.is_abelian_number"]], "is_cyclic_number() (in module sympy.combinatorics.group_numbers)": [[45, "sympy.combinatorics.group_numbers.is_cyclic_number"]], "is_nilpotent_number() (in module sympy.combinatorics.group_numbers)": [[45, "sympy.combinatorics.group_numbers.is_nilpotent_number"]], "sympy.combinatorics.group_numbers": [[45, "module-sympy.combinatorics.group_numbers"]], "abeliangroup() (in module sympy.combinatorics.named_groups)": [[47, "sympy.combinatorics.named_groups.AbelianGroup"]], "alternatinggroup() (in module sympy.combinatorics.named_groups)": [[47, "sympy.combinatorics.named_groups.AlternatingGroup"]], "cyclicgroup() (in module sympy.combinatorics.named_groups)": [[47, "sympy.combinatorics.named_groups.CyclicGroup"]], "dihedralgroup() (in module sympy.combinatorics.named_groups)": [[47, "sympy.combinatorics.named_groups.DihedralGroup"]], "symmetricgroup() (in module sympy.combinatorics.named_groups)": [[47, "sympy.combinatorics.named_groups.SymmetricGroup"]], "sympy.combinatorics.named_groups": [[47, "module-sympy.combinatorics.named_groups"]], "integerpartition (class in sympy.combinatorics.partitions)": [[48, "sympy.combinatorics.partitions.IntegerPartition"]], "partition (class in sympy.combinatorics.partitions)": [[48, "sympy.combinatorics.partitions.Partition"]], "rgs (sympy.combinatorics.partitions.partition property)": [[48, "sympy.combinatorics.partitions.Partition.RGS"]], "rgs_enum() (in module sympy.combinatorics.partitions)": [[48, "sympy.combinatorics.partitions.RGS_enum"]], "rgs_generalized() (in module sympy.combinatorics.partitions)": [[48, "sympy.combinatorics.partitions.RGS_generalized"]], "rgs_rank() (in module sympy.combinatorics.partitions)": [[48, "sympy.combinatorics.partitions.RGS_rank"]], "rgs_unrank() (in module sympy.combinatorics.partitions)": [[48, "sympy.combinatorics.partitions.RGS_unrank"]], "as_dict() (sympy.combinatorics.partitions.integerpartition method)": [[48, "sympy.combinatorics.partitions.IntegerPartition.as_dict"]], "as_ferrers() (sympy.combinatorics.partitions.integerpartition method)": [[48, "sympy.combinatorics.partitions.IntegerPartition.as_ferrers"]], "conjugate (sympy.combinatorics.partitions.integerpartition property)": [[48, "sympy.combinatorics.partitions.IntegerPartition.conjugate"]], "from_rgs() (sympy.combinatorics.partitions.partition class method)": [[48, "sympy.combinatorics.partitions.Partition.from_rgs"]], "next_lex() (sympy.combinatorics.partitions.integerpartition method)": [[48, "sympy.combinatorics.partitions.IntegerPartition.next_lex"]], "partition (sympy.combinatorics.partitions.partition property)": [[48, "sympy.combinatorics.partitions.Partition.partition"]], "prev_lex() (sympy.combinatorics.partitions.integerpartition method)": [[48, "sympy.combinatorics.partitions.IntegerPartition.prev_lex"]], "random_integer_partition() (in module sympy.combinatorics.partitions)": [[48, "sympy.combinatorics.partitions.random_integer_partition"]], "rank (sympy.combinatorics.partitions.partition property)": [[48, "sympy.combinatorics.partitions.Partition.rank"]], "sort_key() (sympy.combinatorics.partitions.partition method)": [[48, "sympy.combinatorics.partitions.Partition.sort_key"]], "sympy.combinatorics.partitions": [[48, "module-sympy.combinatorics.partitions"]], "permutationgroup (class in sympy.combinatorics.perm_groups)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup"]], "__contains__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.__contains__"]], "__mul__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.__mul__"]], "__new__() (sympy.combinatorics.perm_groups.permutationgroup static method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.__new__"]], "__weakref__ (sympy.combinatorics.perm_groups.permutationgroup attribute)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.__weakref__"]], "_coset_representative() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup._coset_representative"]], "_distinct_primes_lemma() (sympy.combinatorics.perm_groups.permutationgroup class method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup._distinct_primes_lemma"]], "_elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup._elements"]], "_eval_is_alt_sym_monte_carlo() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_monte_carlo"]], "_eval_is_alt_sym_naive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_naive"]], "_p_elements_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup._p_elements_group"]], "_random_pr_init() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup._random_pr_init"]], "_sylow_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup._sylow_alt_sym"]], "_union_find_merge() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge"]], "_union_find_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep"]], "_verify() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup._verify"]], "abelian_invariants() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.abelian_invariants"]], "base (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.base"]], "baseswap() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.baseswap"]], "basic_orbits (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits"]], "basic_stabilizers (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers"]], "basic_transversals (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals"]], "center() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.center"]], "centralizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.centralizer"]], "commutator() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.commutator"]], "composition_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.composition_series"]], "conjugacy_class() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_class"]], "conjugacy_classes() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_classes"]], "contains() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.contains"]], "coset_factor() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.coset_factor"]], "coset_rank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.coset_rank"]], "coset_table() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.coset_table"]], "coset_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.coset_transversal"]], "coset_unrank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.coset_unrank"]], "degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.degree"]], "derived_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.derived_series"]], "derived_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup"]], "elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.elements"]], "equals() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.equals"]], "generate() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.generate"]], "generate_dimino() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.generate_dimino"]], "generate_schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.generate_schreier_sims"]], "generator_product() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.generator_product"]], "generators (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.generators"]], "identity (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.identity"]], "index() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.index"]], "is_abelian (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.is_abelian"]], "is_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym"]], "is_alternating (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.is_alternating"]], "is_cyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.is_cyclic"]], "is_elementary() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.is_elementary"]], "is_nilpotent (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.is_nilpotent"]], "is_normal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.is_normal"]], "is_perfect (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.is_perfect"]], "is_polycyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.is_polycyclic"]], "is_primitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.is_primitive"]], "is_solvable (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.is_solvable"]], "is_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.is_subgroup"]], "is_symmetric (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.is_symmetric"]], "is_transitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.is_transitive"]], "is_trivial (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.is_trivial"]], "lower_central_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.lower_central_series"]], "make_perm() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.make_perm"]], "max_div (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.max_div"]], "minimal_block() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"]], "minimal_blocks() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_blocks"]], "normal_closure() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.normal_closure"]], "orbit() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.orbit"]], "orbit_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_rep"]], "orbit_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_transversal"]], "orbits() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.orbits"]], "order() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.order"]], "pointwise_stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.pointwise_stabilizer"]], "polycyclic_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.polycyclic_group"]], "presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.presentation"]], "random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.random"]], "random_pr() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.random_pr"]], "random_stab() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.random_stab"]], "schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims"]], "schreier_sims_incremental() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental"]], "schreier_sims_random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random"]], "schreier_vector() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_vector"]], "stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.stabilizer"]], "strong_gens (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens"]], "strong_presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.strong_presentation"]], "subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup"]], "subgroup_search() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup_search"]], "sylow_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.sylow_subgroup"]], "sympy.combinatorics.perm_groups": [[50, "module-sympy.combinatorics.perm_groups"]], "transitivity_degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[50, "sympy.combinatorics.perm_groups.PermutationGroup.transitivity_degree"]], "cycle (class in sympy.combinatorics.permutations)": [[51, "sympy.combinatorics.permutations.Cycle"]], "permutation (class in sympy.combinatorics.permutations)": [[51, "sympy.combinatorics.permutations.Permutation"]], "_af_parity() (in module sympy.combinatorics.permutations)": [[51, "sympy.combinatorics.permutations._af_parity"]], "alternating() (sympy.combinatorics.generators method)": [[51, "sympy.combinatorics.generators.alternating"]], "apply() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.apply"]], "array_form (sympy.combinatorics.permutations.permutation property)": [[51, "sympy.combinatorics.permutations.Permutation.array_form"]], "ascents() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.ascents"]], "atoms() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.atoms"]], "cardinality (sympy.combinatorics.permutations.permutation property)": [[51, "sympy.combinatorics.permutations.Permutation.cardinality"]], "commutator() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.commutator"]], "commutes_with() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.commutes_with"]], "cycle_structure (sympy.combinatorics.permutations.permutation property)": [[51, "sympy.combinatorics.permutations.Permutation.cycle_structure"]], "cycles (sympy.combinatorics.permutations.permutation property)": [[51, "sympy.combinatorics.permutations.Permutation.cycles"]], "cyclic() (sympy.combinatorics.generators method)": [[51, "sympy.combinatorics.generators.cyclic"]], "cyclic_form (sympy.combinatorics.permutations.permutation property)": [[51, "sympy.combinatorics.permutations.Permutation.cyclic_form"]], "descents() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.descents"]], "dihedral() (sympy.combinatorics.generators method)": [[51, "sympy.combinatorics.generators.dihedral"]], "from_inversion_vector() (sympy.combinatorics.permutations.permutation class method)": [[51, "sympy.combinatorics.permutations.Permutation.from_inversion_vector"]], "from_sequence() (sympy.combinatorics.permutations.permutation class method)": [[51, "sympy.combinatorics.permutations.Permutation.from_sequence"]], "full_cyclic_form (sympy.combinatorics.permutations.permutation property)": [[51, "sympy.combinatorics.permutations.Permutation.full_cyclic_form"]], "get_adjacency_distance() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.get_adjacency_distance"]], "get_adjacency_matrix() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix"]], "get_positional_distance() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.get_positional_distance"]], "get_precedence_distance() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.get_precedence_distance"]], "get_precedence_matrix() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"]], "index() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.index"]], "inversion_vector() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.inversion_vector"]], "inversions() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.inversions"]], "is_empty (sympy.combinatorics.permutations.permutation property)": [[51, "sympy.combinatorics.permutations.Permutation.is_Empty"]], "is_identity (sympy.combinatorics.permutations.permutation property)": [[51, "sympy.combinatorics.permutations.Permutation.is_Identity"]], "is_singleton (sympy.combinatorics.permutations.permutation property)": [[51, "sympy.combinatorics.permutations.Permutation.is_Singleton"]], "is_even (sympy.combinatorics.permutations.permutation property)": [[51, "sympy.combinatorics.permutations.Permutation.is_even"]], "is_odd (sympy.combinatorics.permutations.permutation property)": [[51, "sympy.combinatorics.permutations.Permutation.is_odd"]], "josephus() (sympy.combinatorics.permutations.permutation class method)": [[51, "sympy.combinatorics.permutations.Permutation.josephus"]], "length() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.length"]], "list() (sympy.combinatorics.permutations.cycle method)": [[51, "sympy.combinatorics.permutations.Cycle.list"]], "list() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.list"]], "max() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.max"]], "min() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.min"]], "mul_inv() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.mul_inv"]], "next_lex() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.next_lex"]], "next_nonlex() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.next_nonlex"]], "next_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.next_trotterjohnson"]], "order() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.order"]], "parity() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.parity"]], "random() (sympy.combinatorics.permutations.permutation class method)": [[51, "sympy.combinatorics.permutations.Permutation.random"]], "rank() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.rank"]], "rank_nonlex() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.rank_nonlex"]], "rank_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.rank_trotterjohnson"]], "resize() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.resize"]], "rmul() (sympy.combinatorics.permutations.permutation static method)": [[51, "sympy.combinatorics.permutations.Permutation.rmul"]], "rmul_with_af() (sympy.combinatorics.permutations.permutation class method)": [[51, "sympy.combinatorics.permutations.Permutation.rmul_with_af"]], "runs() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.runs"]], "signature() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.signature"]], "size (sympy.combinatorics.permutations.permutation property)": [[51, "sympy.combinatorics.permutations.Permutation.size"]], "support() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.support"]], "symmetric() (sympy.combinatorics.generators method)": [[51, "sympy.combinatorics.generators.symmetric"]], "sympy.combinatorics.generators": [[51, "module-sympy.combinatorics.generators"]], "sympy.combinatorics.permutations": [[51, "module-sympy.combinatorics.permutations"]], "transpositions() (sympy.combinatorics.permutations.permutation method)": [[51, "sympy.combinatorics.permutations.Permutation.transpositions"]], "unrank_lex() (sympy.combinatorics.permutations.permutation class method)": [[51, "sympy.combinatorics.permutations.Permutation.unrank_lex"]], "unrank_nonlex() (sympy.combinatorics.permutations.permutation class method)": [[51, "sympy.combinatorics.permutations.Permutation.unrank_nonlex"]], "unrank_trotterjohnson() (sympy.combinatorics.permutations.permutation class method)": [[51, "sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson"]], "polyhedron (class in sympy.combinatorics.polyhedron)": [[52, "sympy.combinatorics.polyhedron.Polyhedron"]], "array_form (sympy.combinatorics.polyhedron.polyhedron property)": [[52, "sympy.combinatorics.polyhedron.Polyhedron.array_form"]], "corners (sympy.combinatorics.polyhedron.polyhedron property)": [[52, "sympy.combinatorics.polyhedron.Polyhedron.corners"]], "cyclic_form (sympy.combinatorics.polyhedron.polyhedron property)": [[52, "sympy.combinatorics.polyhedron.Polyhedron.cyclic_form"]], "edges (sympy.combinatorics.polyhedron.polyhedron property)": [[52, "sympy.combinatorics.polyhedron.Polyhedron.edges"]], "faces (sympy.combinatorics.polyhedron.polyhedron property)": [[52, "sympy.combinatorics.polyhedron.Polyhedron.faces"]], "pgroup (sympy.combinatorics.polyhedron.polyhedron property)": [[52, "sympy.combinatorics.polyhedron.Polyhedron.pgroup"]], "reset() (sympy.combinatorics.polyhedron.polyhedron method)": [[52, "sympy.combinatorics.polyhedron.Polyhedron.reset"]], "rotate() (sympy.combinatorics.polyhedron.polyhedron method)": [[52, "sympy.combinatorics.polyhedron.Polyhedron.rotate"]], "size (sympy.combinatorics.polyhedron.polyhedron property)": [[52, "sympy.combinatorics.polyhedron.Polyhedron.size"]], "sympy.combinatorics.polyhedron": [[52, "module-sympy.combinatorics.polyhedron"]], "vertices (sympy.combinatorics.polyhedron.polyhedron property)": [[52, "sympy.combinatorics.polyhedron.Polyhedron.vertices"]], "prufer (class in sympy.combinatorics.prufer)": [[53, "sympy.combinatorics.prufer.Prufer"]], "edges() (sympy.combinatorics.prufer.prufer static method)": [[53, "sympy.combinatorics.prufer.Prufer.edges"]], "next() (sympy.combinatorics.prufer.prufer method)": [[53, "sympy.combinatorics.prufer.Prufer.next"]], "nodes (sympy.combinatorics.prufer.prufer property)": [[53, "sympy.combinatorics.prufer.Prufer.nodes"]], "prev() (sympy.combinatorics.prufer.prufer method)": [[53, "sympy.combinatorics.prufer.Prufer.prev"]], "prufer_rank() (sympy.combinatorics.prufer.prufer method)": [[53, "sympy.combinatorics.prufer.Prufer.prufer_rank"]], "prufer_repr (sympy.combinatorics.prufer.prufer property)": [[53, "sympy.combinatorics.prufer.Prufer.prufer_repr"]], "rank (sympy.combinatorics.prufer.prufer property)": [[53, "sympy.combinatorics.prufer.Prufer.rank"]], "size (sympy.combinatorics.prufer.prufer property)": [[53, "sympy.combinatorics.prufer.Prufer.size"]], "sympy.combinatorics.prufer": [[53, "module-sympy.combinatorics.prufer"]], "to_prufer() (sympy.combinatorics.prufer.prufer static method)": [[53, "sympy.combinatorics.prufer.Prufer.to_prufer"]], "to_tree() (sympy.combinatorics.prufer.prufer static method)": [[53, "sympy.combinatorics.prufer.Prufer.to_tree"]], "tree_repr (sympy.combinatorics.prufer.prufer property)": [[53, "sympy.combinatorics.prufer.Prufer.tree_repr"]], "unrank() (sympy.combinatorics.prufer.prufer class method)": [[53, "sympy.combinatorics.prufer.Prufer.unrank"]], "subset (class in sympy.combinatorics.subsets)": [[54, "sympy.combinatorics.subsets.Subset"]], "bitlist_from_subset() (sympy.combinatorics.subsets.subset class method)": [[54, "sympy.combinatorics.subsets.Subset.bitlist_from_subset"]], "cardinality (sympy.combinatorics.subsets.subset property)": [[54, "sympy.combinatorics.subsets.Subset.cardinality"]], "iterate_binary() (sympy.combinatorics.subsets.subset method)": [[54, "sympy.combinatorics.subsets.Subset.iterate_binary"]], "iterate_graycode() (sympy.combinatorics.subsets.subset method)": [[54, "sympy.combinatorics.subsets.Subset.iterate_graycode"]], "ksubsets() (sympy.combinatorics.subsets method)": [[54, "sympy.combinatorics.subsets.ksubsets"]], "next_binary() (sympy.combinatorics.subsets.subset method)": [[54, "sympy.combinatorics.subsets.Subset.next_binary"]], "next_gray() (sympy.combinatorics.subsets.subset method)": [[54, "sympy.combinatorics.subsets.Subset.next_gray"]], "next_lexicographic() (sympy.combinatorics.subsets.subset method)": [[54, "sympy.combinatorics.subsets.Subset.next_lexicographic"]], "prev_binary() (sympy.combinatorics.subsets.subset method)": [[54, "sympy.combinatorics.subsets.Subset.prev_binary"]], "prev_gray() (sympy.combinatorics.subsets.subset method)": [[54, "sympy.combinatorics.subsets.Subset.prev_gray"]], "prev_lexicographic() (sympy.combinatorics.subsets.subset method)": [[54, "sympy.combinatorics.subsets.Subset.prev_lexicographic"]], "rank_binary (sympy.combinatorics.subsets.subset property)": [[54, "sympy.combinatorics.subsets.Subset.rank_binary"]], "rank_gray (sympy.combinatorics.subsets.subset property)": [[54, "sympy.combinatorics.subsets.Subset.rank_gray"]], "rank_lexicographic (sympy.combinatorics.subsets.subset property)": [[54, "sympy.combinatorics.subsets.Subset.rank_lexicographic"]], "size (sympy.combinatorics.subsets.subset property)": [[54, "sympy.combinatorics.subsets.Subset.size"]], "subset (sympy.combinatorics.subsets.subset property)": [[54, "sympy.combinatorics.subsets.Subset.subset"]], "subset_from_bitlist() (sympy.combinatorics.subsets.subset class method)": [[54, "sympy.combinatorics.subsets.Subset.subset_from_bitlist"]], "subset_indices() (sympy.combinatorics.subsets.subset class method)": [[54, "sympy.combinatorics.subsets.Subset.subset_indices"]], "superset (sympy.combinatorics.subsets.subset property)": [[54, "sympy.combinatorics.subsets.Subset.superset"]], "superset_size (sympy.combinatorics.subsets.subset property)": [[54, "sympy.combinatorics.subsets.Subset.superset_size"]], "sympy.combinatorics.subsets": [[54, "module-sympy.combinatorics.subsets"]], "unrank_binary() (sympy.combinatorics.subsets.subset class method)": [[54, "sympy.combinatorics.subsets.Subset.unrank_binary"]], "unrank_gray() (sympy.combinatorics.subsets.subset class method)": [[54, "sympy.combinatorics.subsets.Subset.unrank_gray"]], "bsgs_direct_product() (in module sympy.combinatorics.tensor_can)": [[55, "sympy.combinatorics.tensor_can.bsgs_direct_product"]], "canonicalize() (in module sympy.combinatorics.tensor_can)": [[55, "sympy.combinatorics.tensor_can.canonicalize"]], "double_coset_can_rep() (in module sympy.combinatorics.tensor_can)": [[55, "sympy.combinatorics.tensor_can.double_coset_can_rep"]], "get_symmetric_group_sgs() (in module sympy.combinatorics.tensor_can)": [[55, "sympy.combinatorics.tensor_can.get_symmetric_group_sgs"]], "sympy.combinatorics.tensor_can": [[55, "module-sympy.combinatorics.tensor_can"]], "_cmp_perm_lists() (in module sympy.combinatorics.testutil)": [[56, "sympy.combinatorics.testutil._cmp_perm_lists"]], "_naive_list_centralizer() (in module sympy.combinatorics.testutil)": [[56, "sympy.combinatorics.testutil._naive_list_centralizer"]], "_verify_bsgs() (in module sympy.combinatorics.testutil)": [[56, "sympy.combinatorics.testutil._verify_bsgs"]], "_verify_centralizer() (in module sympy.combinatorics.testutil)": [[56, "sympy.combinatorics.testutil._verify_centralizer"]], "_verify_normal_closure() (in module sympy.combinatorics.testutil)": [[56, "sympy.combinatorics.testutil._verify_normal_closure"]], "sympy.combinatorics.testutil": [[56, "module-sympy.combinatorics.testutil"]], "_base_ordering() (in module sympy.combinatorics.util)": [[57, "sympy.combinatorics.util._base_ordering"]], "_check_cycles_alt_sym() (in module sympy.combinatorics.util)": [[57, "sympy.combinatorics.util._check_cycles_alt_sym"]], "_distribute_gens_by_base() (in module sympy.combinatorics.util)": [[57, "sympy.combinatorics.util._distribute_gens_by_base"]], "_handle_precomputed_bsgs() (in module sympy.combinatorics.util)": [[57, "sympy.combinatorics.util._handle_precomputed_bsgs"]], "_orbits_transversals_from_bsgs() (in module sympy.combinatorics.util)": [[57, "sympy.combinatorics.util._orbits_transversals_from_bsgs"]], "_remove_gens() (in module sympy.combinatorics.util)": [[57, "sympy.combinatorics.util._remove_gens"]], "_strip() (in module sympy.combinatorics.util)": [[57, "sympy.combinatorics.util._strip"]], "_strong_gens_from_distr() (in module sympy.combinatorics.util)": [[57, "sympy.combinatorics.util._strong_gens_from_distr"]], "sympy.combinatorics.util": [[57, "module-sympy.combinatorics.util"]], "exprwithintlimits (class in sympy.concrete.expr_with_intlimits)": [[58, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits"]], "product (class in sympy.concrete.products)": [[58, "sympy.concrete.products.Product"]], "sum (class in sympy.concrete.summations)": [[58, "sympy.concrete.summations.Sum"]], "change_index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[58, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.change_index"]], "euler_maclaurin() (sympy.concrete.summations.sum method)": [[58, "sympy.concrete.summations.Sum.euler_maclaurin"]], "eval_zeta_function() (sympy.concrete.summations.sum method)": [[58, "sympy.concrete.summations.Sum.eval_zeta_function"]], "gosper_normal() (in module sympy.concrete.gosper)": [[58, "sympy.concrete.gosper.gosper_normal"]], "gosper_sum() (in module sympy.concrete.gosper)": [[58, "sympy.concrete.gosper.gosper_sum"]], "gosper_term() (in module sympy.concrete.gosper)": [[58, "sympy.concrete.gosper.gosper_term"]], "has_empty_sequence (sympy.concrete.expr_with_intlimits.exprwithintlimits property)": [[58, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.has_empty_sequence"]], "index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[58, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.index"]], "is_absolutely_convergent() (sympy.concrete.summations.sum method)": [[58, "sympy.concrete.summations.Sum.is_absolutely_convergent"]], "is_convergent() (sympy.concrete.products.product method)": [[58, "sympy.concrete.products.Product.is_convergent"]], "is_convergent() (sympy.concrete.summations.sum method)": [[58, "sympy.concrete.summations.Sum.is_convergent"]], "product() (in module sympy.concrete.products)": [[58, "sympy.concrete.products.product"]], "reorder() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[58, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder"]], "reorder_limit() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[58, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder_limit"]], "reverse_order() (sympy.concrete.products.product method)": [[58, "sympy.concrete.products.Product.reverse_order"]], "reverse_order() (sympy.concrete.summations.sum method)": [[58, "sympy.concrete.summations.Sum.reverse_order"]], "summation() (in module sympy.concrete.summations)": [[58, "sympy.concrete.summations.summation"]], "add (class in sympy.core.add)": [[59, "sympy.core.add.Add"]], "algebraicnumber (class in sympy.core.numbers)": [[59, "sympy.core.numbers.AlgebraicNumber"]], "atom (class in sympy.core.basic)": [[59, "sympy.core.basic.Atom"]], "atomicexpr (class in sympy.core.expr)": [[59, "sympy.core.expr.AtomicExpr"]], "basic (class in sympy.core.basic)": [[59, "sympy.core.basic.Basic"]], "booleankind (in module sympy.core.kind)": [[59, "sympy.core.kind.BooleanKind"]], "catalan (class in sympy.core.numbers)": [[59, "sympy.core.numbers.Catalan"]], "complexinfinity (class in sympy.core.numbers)": [[59, "sympy.core.numbers.ComplexInfinity"]], "derivative (class in sympy.core.function)": [[59, "sympy.core.function.Derivative"]], "dict (class in sympy.core.containers)": [[59, "sympy.core.containers.Dict"]], "dummy (class in sympy.core.symbol)": [[59, "sympy.core.symbol.Dummy"]], "eq (in module sympy.core.relational)": [[59, "sympy.core.relational.Eq"]], "equality (class in sympy.core.relational)": [[59, "sympy.core.relational.Equality"]], "eulergamma (class in sympy.core.numbers)": [[59, "sympy.core.numbers.EulerGamma"]], "evalfmixin (class in sympy.core.evalf)": [[59, "sympy.core.evalf.EvalfMixin"]], "exp1 (class in sympy.core.numbers)": [[59, "sympy.core.numbers.Exp1"]], "expr (class in sympy.core.expr)": [[59, "sympy.core.expr.Expr"]], "float (class in sympy.core.numbers)": [[59, "sympy.core.numbers.Float"]], "function (class in sympy.core.function)": [[59, "sympy.core.function.Function"]], "functionclass (class in sympy.core.function)": [[59, "sympy.core.function.FunctionClass"]], "ge (in module sympy.core.relational)": [[59, "sympy.core.relational.Ge"]], "goldenratio (class in sympy.core.numbers)": [[59, "sympy.core.numbers.GoldenRatio"]], "greaterthan (class in sympy.core.relational)": [[59, "sympy.core.relational.GreaterThan"]], "gt (in module sympy.core.relational)": [[59, "sympy.core.relational.Gt"]], "half (class in sympy.core.numbers)": [[59, "sympy.core.numbers.Half"]], "imaginaryunit (class in sympy.core.numbers)": [[59, "sympy.core.numbers.ImaginaryUnit"]], "infinity (class in sympy.core.numbers)": [[59, "sympy.core.numbers.Infinity"]], "integer (class in sympy.core.numbers)": [[59, "sympy.core.numbers.Integer"]], "kind (class in sympy.core.kind)": [[59, "sympy.core.kind.Kind"]], "lambda (class in sympy.core.function)": [[59, "sympy.core.function.Lambda"]], "le (in module sympy.core.relational)": [[59, "sympy.core.relational.Le"]], "lessthan (class in sympy.core.relational)": [[59, "sympy.core.relational.LessThan"]], "lt (in module sympy.core.relational)": [[59, "sympy.core.relational.Lt"]], "mod (class in sympy.core.mod)": [[59, "sympy.core.mod.Mod"]], "mul (class in sympy.core.mul)": [[59, "sympy.core.mul.Mul"]], "n() (in module sympy.core.evalf)": [[59, "sympy.core.evalf.N"]], "nan (class in sympy.core.numbers)": [[59, "sympy.core.numbers.NaN"]], "ne (in module sympy.core.relational)": [[59, "sympy.core.relational.Ne"]], "negativeinfinity (class in sympy.core.numbers)": [[59, "sympy.core.numbers.NegativeInfinity"]], "negativeone (class in sympy.core.numbers)": [[59, "sympy.core.numbers.NegativeOne"]], "number (class in sympy.core.numbers)": [[59, "sympy.core.numbers.Number"]], "numberkind (in module sympy.core.kind)": [[59, "sympy.core.kind.NumberKind"]], "numbersymbol (class in sympy.core.numbers)": [[59, "sympy.core.numbers.NumberSymbol"]], "one (class in sympy.core.numbers)": [[59, "sympy.core.numbers.One"]], "pep 335": [[59, "index-0"], [59, "index-1"], [59, "index-2"], [59, "index-3"]], "pi (class in sympy.core.numbers)": [[59, "sympy.core.numbers.Pi"]], "poleerror (class in sympy.core.function)": [[59, "sympy.core.function.PoleError"]], "pow (class in sympy.core.power)": [[59, "sympy.core.power.Pow"]], "precisionexhausted (class in sympy.core.evalf)": [[59, "sympy.core.evalf.PrecisionExhausted"]], "python enhancement proposals": [[59, "index-0"], [59, "index-1"], [59, "index-2"], [59, "index-3"]], "rational (class in sympy.core.numbers)": [[59, "sympy.core.numbers.Rational"]], "realnumber (in module sympy.core.numbers)": [[59, "sympy.core.numbers.RealNumber"]], "rel (in module sympy.core.relational)": [[59, "sympy.core.relational.Rel"]], "relational (class in sympy.core.relational)": [[59, "sympy.core.relational.Relational"]], "singleton (class in sympy.core.singleton)": [[59, "sympy.core.singleton.Singleton"]], "singletonregistry (class in sympy.core.singleton)": [[59, "sympy.core.singleton.SingletonRegistry"]], "strictgreaterthan (class in sympy.core.relational)": [[59, "sympy.core.relational.StrictGreaterThan"]], "strictlessthan (class in sympy.core.relational)": [[59, "sympy.core.relational.StrictLessThan"]], "subs (class in sympy.core.function)": [[59, "sympy.core.function.Subs"]], "symbol (class in sympy.core.symbol)": [[59, "sympy.core.symbol.Symbol"]], "tribonacciconstant (class in sympy.core.numbers)": [[59, "sympy.core.numbers.TribonacciConstant"]], "tuple (class in sympy.core.containers)": [[59, "sympy.core.containers.Tuple"]], "tuplekind (class in sympy.core.containers)": [[59, "sympy.core.containers.TupleKind"]], "undefinedkind (in module sympy.core.kind)": [[59, "sympy.core.kind.UndefinedKind"]], "unequality (class in sympy.core.relational)": [[59, "sympy.core.relational.Unequality"]], "unevaluatedexpr (class in sympy.core.expr)": [[59, "sympy.core.expr.UnevaluatedExpr"]], "wild (class in sympy.core.symbol)": [[59, "sympy.core.symbol.Wild"]], "wildfunction (class in sympy.core.function)": [[59, "sympy.core.function.WildFunction"]], "zero (class in sympy.core.numbers)": [[59, "sympy.core.numbers.Zero"]], "__cacheit() (in module sympy.core.cache)": [[59, "sympy.core.cache.__cacheit"]], "__new__() (sympy.core.numbers.algebraicnumber static method)": [[59, "sympy.core.numbers.AlgebraicNumber.__new__"]], "_diff_wrt (sympy.core.function.derivative property)": [[59, "sympy.core.function.Derivative._diff_wrt"]], "_randint() (in module sympy.core.random)": [[59, "sympy.core.random._randint"]], "_randrange() (in module sympy.core.random)": [[59, "sympy.core.random._randrange"]], "_sort_variable_count() (sympy.core.function.derivative class method)": [[59, "sympy.core.function.Derivative._sort_variable_count"]], "algebraic": [[59, "term-algebraic"]], "antihermitian": [[59, "term-antihermitian"]], "apart() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.apart"]], "approximation() (sympy.core.numbers.numbersymbol method)": [[59, "sympy.core.numbers.NumberSymbol.approximation"]], "args (sympy.core.basic.basic property)": [[59, "sympy.core.basic.Basic.args"]], "args_cnc() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.args_cnc"]], "as_base_exp() (sympy.core.function.function method)": [[59, "sympy.core.function.Function.as_base_exp"]], "as_base_exp() (sympy.core.power.pow method)": [[59, "sympy.core.power.Pow.as_base_exp"]], "as_coeff_add() (sympy.core.add.add method)": [[59, "sympy.core.add.Add.as_coeff_Add"], [59, "sympy.core.add.Add.as_coeff_add"]], "as_coeff_add() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.as_coeff_Add"], [59, "sympy.core.expr.Expr.as_coeff_add"]], "as_coeff_add() (sympy.core.numbers.number method)": [[59, "sympy.core.numbers.Number.as_coeff_Add"]], "as_coeff_add() (sympy.core.numbers.rational method)": [[59, "sympy.core.numbers.Rational.as_coeff_Add"]], "as_coeff_mul() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.as_coeff_Mul"], [59, "sympy.core.expr.Expr.as_coeff_mul"]], "as_coeff_mul() (sympy.core.mul.mul method)": [[59, "sympy.core.mul.Mul.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.number method)": [[59, "sympy.core.numbers.Number.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.rational method)": [[59, "sympy.core.numbers.Rational.as_coeff_Mul"]], "as_coeff_exponent() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.as_coeff_exponent"]], "as_coefficient() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.as_coefficient"]], "as_coefficients_dict() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.as_coefficients_dict"]], "as_content_primitive() (sympy.core.add.add method)": [[59, "sympy.core.add.Add.as_content_primitive"]], "as_content_primitive() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.as_content_primitive"]], "as_content_primitive() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.as_content_primitive"]], "as_content_primitive() (sympy.core.mul.mul method)": [[59, "sympy.core.mul.Mul.as_content_primitive"]], "as_content_primitive() (sympy.core.numbers.rational method)": [[59, "sympy.core.numbers.Rational.as_content_primitive"]], "as_content_primitive() (sympy.core.power.pow method)": [[59, "sympy.core.power.Pow.as_content_primitive"]], "as_dummy() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.as_dummy"]], "as_expr() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.as_expr"]], "as_expr() (sympy.core.numbers.algebraicnumber method)": [[59, "sympy.core.numbers.AlgebraicNumber.as_expr"]], "as_finite_difference() (sympy.core.function.derivative method)": [[59, "sympy.core.function.Derivative.as_finite_difference"]], "as_independent() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.as_independent"]], "as_leading_term() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.as_leading_term"]], "as_numer_denom() (sympy.core.add.add method)": [[59, "sympy.core.add.Add.as_numer_denom"]], "as_numer_denom() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.as_numer_denom"]], "as_ordered_factors() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.as_ordered_factors"]], "as_ordered_factors() (sympy.core.mul.mul method)": [[59, "sympy.core.mul.Mul.as_ordered_factors"]], "as_ordered_terms() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.as_ordered_terms"]], "as_poly() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.as_poly"]], "as_poly() (sympy.core.numbers.algebraicnumber method)": [[59, "sympy.core.numbers.AlgebraicNumber.as_poly"]], "as_poly() (sympy.core.relational.equality method)": [[59, "sympy.core.relational.Equality.as_poly"]], "as_powers_dict() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.as_powers_dict"]], "as_real_imag() (sympy.core.add.add method)": [[59, "sympy.core.add.Add.as_real_imag"]], "as_real_imag() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.as_real_imag"]], "as_terms() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.as_terms"]], "as_two_terms() (sympy.core.add.add method)": [[59, "sympy.core.add.Add.as_two_terms"]], "as_two_terms() (sympy.core.mul.mul method)": [[59, "sympy.core.mul.Mul.as_two_terms"]], "aseries() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.aseries"]], "assumptions0 (sympy.core.basic.basic property)": [[59, "sympy.core.basic.Basic.assumptions0"]], "atoms() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.atoms"]], "bottom_up() (in module sympy.core.traversal)": [[59, "sympy.core.traversal.bottom_up"]], "bound_symbols (sympy.core.function.lambda property)": [[59, "sympy.core.function.Lambda.bound_symbols"]], "bound_symbols (sympy.core.function.subs property)": [[59, "sympy.core.function.Subs.bound_symbols"]], "cancel() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.cancel"]], "canonical (sympy.core.relational.relational property)": [[59, "sympy.core.relational.Relational.canonical"]], "canonical_variables (sympy.core.basic.basic property)": [[59, "sympy.core.basic.Basic.canonical_variables"]], "class_key() (sympy.core.add.add class method)": [[59, "sympy.core.add.Add.class_key"]], "class_key() (sympy.core.basic.basic class method)": [[59, "sympy.core.basic.Basic.class_key"]], "coeff() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.coeff"]], "coeffs() (sympy.core.numbers.algebraicnumber method)": [[59, "sympy.core.numbers.AlgebraicNumber.coeffs"]], "cofactors() (sympy.core.numbers.number method)": [[59, "sympy.core.numbers.Number.cofactors"]], "collect() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.collect"]], "combsimp() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.combsimp"]], "commutative": [[59, "term-commutative"]], "compare() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.compare"]], "complex": [[59, "term-complex"]], "composite": [[59, "term-composite"]], "compute_leading_term() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.compute_leading_term"]], "conjugate() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.conjugate"]], "could_extract_minus_sign() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.could_extract_minus_sign"]], "count() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.count"]], "count_ops() (in module sympy.core.function)": [[59, "sympy.core.function.count_ops"]], "count_ops() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.count_ops"]], "count_ops() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.count_ops"]], "default_sort_key() (in module sympy.core.sorting)": [[59, "sympy.core.sorting.default_sort_key"]], "diff() (in module sympy.core.function)": [[59, "sympy.core.function.diff"]], "doit() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.doit"]], "doit_numerically() (sympy.core.function.derivative method)": [[59, "sympy.core.function.Derivative.doit_numerically"]], "dummy_eq() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.dummy_eq"]], "equals() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.equals"]], "equals() (sympy.core.relational.relational method)": [[59, "sympy.core.relational.Relational.equals"]], "evalf() (sympy.core.evalf.evalfmixin method)": [[59, "sympy.core.evalf.EvalfMixin.evalf"]], "even": [[59, "term-even"]], "expand() (in module sympy.core.function)": [[59, "sympy.core.function.expand"]], "expand() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.expand"]], "expand_complex() (in module sympy.core.function)": [[59, "sympy.core.function.expand_complex"]], "expand_func() (in module sympy.core.function)": [[59, "sympy.core.function.expand_func"]], "expand_log() (in module sympy.core.function)": [[59, "sympy.core.function.expand_log"]], "expand_mul() (in module sympy.core.function)": [[59, "sympy.core.function.expand_mul"]], "expand_multinomial() (in module sympy.core.function)": [[59, "sympy.core.function.expand_multinomial"]], "expand_power_base() (in module sympy.core.function)": [[59, "sympy.core.function.expand_power_base"]], "expand_power_exp() (in module sympy.core.function)": [[59, "sympy.core.function.expand_power_exp"]], "expand_trig() (in module sympy.core.function)": [[59, "sympy.core.function.expand_trig"]], "expr (sympy.core.function.lambda property)": [[59, "sympy.core.function.Lambda.expr"]], "expr (sympy.core.function.subs property)": [[59, "sympy.core.function.Subs.expr"]], "expr_free_symbols (sympy.core.expr.expr property)": [[59, "sympy.core.expr.Expr.expr_free_symbols"]], "extended_negative": [[59, "term-extended_negative"]], "extended_nonnegative": [[59, "term-extended_nonnegative"]], "extended_nonpositive": [[59, "term-extended_nonpositive"]], "extended_nonzero": [[59, "term-extended_nonzero"]], "extended_positive": [[59, "term-extended_positive"]], "extended_real": [[59, "term-extended_real"]], "extract_additively() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.extract_additively"]], "extract_branch_factor() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.extract_branch_factor"]], "extract_leading_order() (sympy.core.add.add method)": [[59, "sympy.core.add.Add.extract_leading_order"]], "extract_multiplicatively() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.extract_multiplicatively"]], "factor() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.factor"]], "factor_terms() (in module sympy.core.exprtools)": [[59, "sympy.core.exprtools.factor_terms"]], "factors() (sympy.core.numbers.rational method)": [[59, "sympy.core.numbers.Rational.factors"]], "fdiff() (sympy.core.function.function method)": [[59, "sympy.core.function.Function.fdiff"]], "field_element() (sympy.core.numbers.algebraicnumber method)": [[59, "sympy.core.numbers.AlgebraicNumber.field_element"]], "find() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.find"]], "finite": [[59, "term-finite"]], "flatten() (sympy.core.add.add class method)": [[59, "sympy.core.add.Add.flatten"]], "flatten() (sympy.core.mul.mul class method)": [[59, "sympy.core.mul.Mul.flatten"]], "fourier_series() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.fourier_series"]], "fps() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.fps"]], "free_symbols (sympy.core.basic.basic property)": [[59, "sympy.core.basic.Basic.free_symbols"]], "fromiter() (sympy.core.basic.basic class method)": [[59, "sympy.core.basic.Basic.fromiter"]], "func (sympy.core.basic.basic property)": [[59, "sympy.core.basic.Basic.func"]], "gammasimp() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.gammasimp"]], "gcd() (sympy.core.numbers.number method)": [[59, "sympy.core.numbers.Number.gcd"]], "gcd_terms() (in module sympy.core.exprtools)": [[59, "sympy.core.exprtools.gcd_terms"]], "get() (sympy.core.containers.dict method)": [[59, "sympy.core.containers.Dict.get"]], "geto() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.getO"]], "getn() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.getn"]], "has() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.has"]], "has_free() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.has_free"]], "has_xfree() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.has_xfree"]], "hermitian": [[59, "term-hermitian"]], "igcd() (in module sympy.core.numbers)": [[59, "sympy.core.numbers.igcd"]], "ilcm() (in module sympy.core.numbers)": [[59, "sympy.core.numbers.ilcm"]], "imaginary": [[59, "term-imaginary"]], "index() (sympy.core.containers.tuple method)": [[59, "sympy.core.containers.Tuple.index"]], "infinite": [[59, "term-infinite"]], "integer": [[59, "term-integer"]], "integer_log() (in module sympy.core.power)": [[59, "sympy.core.power.integer_log"]], "integer_nthroot() (in module sympy.core.power)": [[59, "sympy.core.power.integer_nthroot"]], "integrate() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.integrate"]], "integrate() (sympy.core.relational.equality method)": [[59, "sympy.core.relational.Equality.integrate"]], "invert() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.invert"]], "irrational": [[59, "term-irrational"]], "is_algebraic_expr() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.is_algebraic_expr"]], "is_aliased (sympy.core.numbers.algebraicnumber property)": [[59, "sympy.core.numbers.AlgebraicNumber.is_aliased"]], "is_comparable (sympy.core.basic.basic property)": [[59, "sympy.core.basic.Basic.is_comparable"]], "is_constant() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.is_constant"]], "is_identity (sympy.core.function.lambda property)": [[59, "sympy.core.function.Lambda.is_identity"]], "is_meromorphic() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.is_meromorphic"]], "is_number (sympy.core.expr.expr property)": [[59, "sympy.core.expr.Expr.is_number"]], "is_polynomial() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.is_polynomial"]], "is_primitive_element (sympy.core.numbers.algebraicnumber property)": [[59, "sympy.core.numbers.AlgebraicNumber.is_primitive_element"]], "is_rational_function() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.is_rational_function"]], "is_singular() (sympy.core.function.function class method)": [[59, "sympy.core.function.Function.is_singular"]], "items() (sympy.core.containers.dict method)": [[59, "sympy.core.containers.Dict.items"]], "keys() (sympy.core.containers.dict method)": [[59, "sympy.core.containers.Dict.keys"]], "kind (sympy.core.containers.tuple property)": [[59, "sympy.core.containers.Tuple.kind"]], "lcm() (sympy.core.numbers.number method)": [[59, "sympy.core.numbers.Number.lcm"]], "leadterm() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.leadterm"]], "lhs (sympy.core.relational.relational property)": [[59, "sympy.core.relational.Relational.lhs"]], "limit() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.limit"]], "limit_denominator() (sympy.core.numbers.rational method)": [[59, "sympy.core.numbers.Rational.limit_denominator"]], "lseries() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.lseries"]], "match() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.match"]], "matches() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.matches"]], "minpoly_of_element() (sympy.core.numbers.algebraicnumber method)": [[59, "sympy.core.numbers.AlgebraicNumber.minpoly_of_element"]], "mod_inverse() (in module sympy.core.numbers)": [[59, "sympy.core.numbers.mod_inverse"]], "n() (sympy.core.evalf.evalfmixin method)": [[59, "sympy.core.evalf.EvalfMixin.n"]], "nargs (sympy.core.function.functionclass property)": [[59, "sympy.core.function.FunctionClass.nargs"]], "native_coeffs() (sympy.core.numbers.algebraicnumber method)": [[59, "sympy.core.numbers.AlgebraicNumber.native_coeffs"]], "negated (sympy.core.relational.relational property)": [[59, "sympy.core.relational.Relational.negated"]], "negative": [[59, "term-negative"]], "nfloat() (in module sympy.core.function)": [[59, "sympy.core.function.nfloat"]], "nonnegative": [[59, "term-nonnegative"]], "nonpositive": [[59, "term-nonpositive"]], "nonzero": [[59, "term-nonzero"]], "normal() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.normal"]], "nseries() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.nseries"]], "nsimplify() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.nsimplify"]], "odd": [[59, "term-odd"]], "ordered() (in module sympy.core.sorting)": [[59, "sympy.core.sorting.ordered"]], "point (sympy.core.function.subs property)": [[59, "sympy.core.function.Subs.point"]], "positive": [[59, "term-positive"]], "postorder_traversal() (in module sympy.core.traversal)": [[59, "sympy.core.traversal.postorder_traversal"]], "powsimp() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.powsimp"]], "preorder_traversal() (in module sympy.core.traversal)": [[59, "sympy.core.traversal.preorder_traversal"]], "prime": [[59, "term-prime"]], "primitive() (sympy.core.add.add method)": [[59, "sympy.core.add.Add.primitive"]], "primitive() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.primitive"]], "primitive_element() (sympy.core.numbers.algebraicnumber method)": [[59, "sympy.core.numbers.AlgebraicNumber.primitive_element"]], "prod() (in module sympy.core.mul)": [[59, "sympy.core.mul.prod"]], "radsimp() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.radsimp"]], "random_complex_number() (in module sympy.core.random)": [[59, "sympy.core.random.random_complex_number"]], "rational": [[59, "term-rational"]], "ratsimp() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.ratsimp"]], "rcall() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.rcall"]], "real": [[59, "term-real"]], "refine() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.refine"]], "removeo() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.removeO"]], "replace() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.replace"]], "reversed (sympy.core.relational.relational property)": [[59, "sympy.core.relational.Relational.reversed"]], "reversedsign (sympy.core.relational.relational property)": [[59, "sympy.core.relational.Relational.reversedsign"]], "rewrite() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.rewrite"]], "rhs (sympy.core.relational.relational property)": [[59, "sympy.core.relational.Relational.rhs"]], "round() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.round"]], "separate() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.separate"]], "series() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.series"]], "seterr() (in module sympy.core.numbers)": [[59, "sympy.core.numbers.seterr"]], "signature (sympy.core.function.lambda property)": [[59, "sympy.core.function.Lambda.signature"]], "simplify() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.simplify"]], "sort_key() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.sort_key"]], "strict (sympy.core.relational.relational property)": [[59, "sympy.core.relational.Relational.strict"]], "subs() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.subs"]], "symbols() (in module sympy.core.symbol)": [[59, "sympy.core.symbol.symbols"]], "sympify() (in module sympy.core.sympify)": [[59, "sympy.core.sympify.sympify"]], "sympy.core.add": [[59, "module-sympy.core.add"]], "sympy.core.assumptions": [[59, "module-sympy.core.assumptions"]], "sympy.core.basic": [[59, "module-sympy.core.basic"]], "sympy.core.cache": [[59, "module-sympy.core.cache"]], "sympy.core.containers": [[59, "module-sympy.core.containers"]], "sympy.core.evalf": [[59, "module-sympy.core.evalf"]], "sympy.core.expr": [[59, "module-sympy.core.expr"]], "sympy.core.exprtools": [[59, "module-sympy.core.exprtools"]], "sympy.core.function": [[59, "module-sympy.core.function"]], "sympy.core.kind": [[59, "module-sympy.core.kind"]], "sympy.core.mod": [[59, "module-sympy.core.mod"]], "sympy.core.mul": [[59, "module-sympy.core.mul"]], "sympy.core.multidimensional": [[59, "module-sympy.core.multidimensional"]], "sympy.core.numbers": [[59, "module-sympy.core.numbers"]], "sympy.core.power": [[59, "module-sympy.core.power"]], "sympy.core.random": [[59, "module-sympy.core.random"]], "sympy.core.relational": [[59, "module-sympy.core.relational"]], "sympy.core.singleton": [[59, "module-sympy.core.singleton"]], "sympy.core.symbol": [[59, "module-sympy.core.symbol"]], "sympy.core.sympify": [[59, "module-sympy.core.sympify"]], "sympy.core.traversal": [[59, "module-sympy.core.traversal"]], "taylor_term() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.taylor_term"]], "test_derivative_numerically() (in module sympy.core.random)": [[59, "sympy.core.random.test_derivative_numerically"]], "to_algebraic_integer() (sympy.core.numbers.algebraicnumber method)": [[59, "sympy.core.numbers.AlgebraicNumber.to_algebraic_integer"]], "to_primitive_element() (sympy.core.numbers.algebraicnumber method)": [[59, "sympy.core.numbers.AlgebraicNumber.to_primitive_element"]], "to_root() (sympy.core.numbers.algebraicnumber method)": [[59, "sympy.core.numbers.AlgebraicNumber.to_root"]], "together() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.together"]], "transcendental": [[59, "term-transcendental"]], "trigsimp() (sympy.core.expr.expr method)": [[59, "sympy.core.expr.Expr.trigsimp"]], "tuple_count() (sympy.core.containers.tuple method)": [[59, "sympy.core.containers.Tuple.tuple_count"]], "use() (in module sympy.core.traversal)": [[59, "sympy.core.traversal.use"]], "values() (sympy.core.containers.dict method)": [[59, "sympy.core.containers.Dict.values"]], "var() (in module sympy.core.symbol)": [[59, "sympy.core.symbol.var"]], "variables (sympy.core.function.lambda property)": [[59, "sympy.core.function.Lambda.variables"]], "variables (sympy.core.function.subs property)": [[59, "sympy.core.function.Subs.variables"]], "vectorize (class in sympy.core.multidimensional)": [[59, "sympy.core.multidimensional.vectorize"]], "verify_numerically() (in module sympy.core.random)": [[59, "sympy.core.random.verify_numerically"]], "walk() (in module sympy.core.traversal)": [[59, "sympy.core.traversal.walk"]], "weak (sympy.core.relational.relational property)": [[59, "sympy.core.relational.Relational.weak"]], "xreplace() (sympy.core.basic.basic method)": [[59, "sympy.core.basic.Basic.xreplace"]], "zero": [[59, "term-zero"]], "az() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.AZ"]], "bifid5_square() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.bifid5_square"]], "bifid6_square() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.bifid6_square"]], "check_and_join() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.check_and_join"]], "cycle_list() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.cycle_list"]], "decipher_affine() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.decipher_affine"]], "decipher_atbash() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.decipher_atbash"]], "decipher_bifid() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.decipher_bifid"]], "decipher_bifid5() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.decipher_bifid5"]], "decipher_bifid6() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.decipher_bifid6"]], "decipher_elgamal() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.decipher_elgamal"]], "decipher_gm() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.decipher_gm"]], "decipher_hill() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.decipher_hill"]], "decipher_kid_rsa() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.decipher_kid_rsa"]], "decipher_railfence() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.decipher_railfence"]], "decipher_rot13() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.decipher_rot13"]], "decipher_rsa() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.decipher_rsa"]], "decipher_shift() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.decipher_shift"]], "decipher_vigenere() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.decipher_vigenere"]], "decode_morse() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.decode_morse"]], "dh_private_key() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.dh_private_key"]], "dh_public_key() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.dh_public_key"]], "dh_shared_key() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.dh_shared_key"]], "elgamal_private_key() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.elgamal_private_key"]], "elgamal_public_key() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.elgamal_public_key"]], "encipher_affine() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.encipher_affine"]], "encipher_atbash() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.encipher_atbash"]], "encipher_bifid() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.encipher_bifid"]], "encipher_bifid5() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.encipher_bifid5"]], "encipher_bifid6() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.encipher_bifid6"]], "encipher_elgamal() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.encipher_elgamal"]], "encipher_gm() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.encipher_gm"]], "encipher_hill() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.encipher_hill"]], "encipher_kid_rsa() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.encipher_kid_rsa"]], "encipher_railfence() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.encipher_railfence"]], "encipher_rot13() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.encipher_rot13"]], "encipher_rsa() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.encipher_rsa"]], "encipher_shift() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.encipher_shift"]], "encipher_substitution() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.encipher_substitution"]], "encipher_vigenere() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.encipher_vigenere"]], "encode_morse() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.encode_morse"]], "gm_private_key() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.gm_private_key"]], "gm_public_key() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.gm_public_key"]], "kid_rsa_private_key() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.kid_rsa_private_key"]], "kid_rsa_public_key() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.kid_rsa_public_key"]], "lfsr_autocorrelation() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.lfsr_autocorrelation"]], "lfsr_connection_polynomial() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.lfsr_connection_polynomial"]], "lfsr_sequence() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.lfsr_sequence"]], "padded_key() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.padded_key"]], "rsa_private_key() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.rsa_private_key"]], "rsa_public_key() (in module sympy.crypto.crypto)": [[60, "sympy.crypto.crypto.rsa_public_key"]], "sympy.crypto.crypto": [[60, "module-sympy.crypto.crypto"]], "basecovarderivativeop (class in sympy.diffgeom)": [[61, "sympy.diffgeom.BaseCovarDerivativeOp"]], "basescalarfield (class in sympy.diffgeom)": [[61, "sympy.diffgeom.BaseScalarField"]], "basevectorfield (class in sympy.diffgeom)": [[61, "sympy.diffgeom.BaseVectorField"]], "commutator (class in sympy.diffgeom)": [[61, "sympy.diffgeom.Commutator"]], "coordsystem (class in sympy.diffgeom)": [[61, "sympy.diffgeom.CoordSystem"]], "coordinatesymbol (class in sympy.diffgeom)": [[61, "sympy.diffgeom.CoordinateSymbol"]], "covarderivativeop (class in sympy.diffgeom)": [[61, "sympy.diffgeom.CovarDerivativeOp"]], "differential (class in sympy.diffgeom)": [[61, "sympy.diffgeom.Differential"]], "liederivative (class in sympy.diffgeom)": [[61, "sympy.diffgeom.LieDerivative"]], "manifold (class in sympy.diffgeom)": [[61, "sympy.diffgeom.Manifold"]], "patch (class in sympy.diffgeom)": [[61, "sympy.diffgeom.Patch"]], "point (class in sympy.diffgeom)": [[61, "sympy.diffgeom.Point"]], "tensorproduct (class in sympy.diffgeom)": [[61, "sympy.diffgeom.TensorProduct"]], "wedgeproduct (class in sympy.diffgeom)": [[61, "sympy.diffgeom.WedgeProduct"]], "base_oneform() (sympy.diffgeom.coordsystem method)": [[61, "sympy.diffgeom.CoordSystem.base_oneform"]], "base_oneforms() (sympy.diffgeom.coordsystem method)": [[61, "sympy.diffgeom.CoordSystem.base_oneforms"]], "base_scalar() (sympy.diffgeom.coordsystem method)": [[61, "sympy.diffgeom.CoordSystem.base_scalar"]], "base_scalars() (sympy.diffgeom.coordsystem method)": [[61, "sympy.diffgeom.CoordSystem.base_scalars"]], "base_vector() (sympy.diffgeom.coordsystem method)": [[61, "sympy.diffgeom.CoordSystem.base_vector"]], "base_vectors() (sympy.diffgeom.coordsystem method)": [[61, "sympy.diffgeom.CoordSystem.base_vectors"]], "coord_function() (sympy.diffgeom.coordsystem method)": [[61, "sympy.diffgeom.CoordSystem.coord_function"]], "coord_functions() (sympy.diffgeom.coordsystem method)": [[61, "sympy.diffgeom.CoordSystem.coord_functions"]], "coord_tuple_transform_to() (sympy.diffgeom.coordsystem method)": [[61, "sympy.diffgeom.CoordSystem.coord_tuple_transform_to"]], "coords() (sympy.diffgeom.point method)": [[61, "sympy.diffgeom.Point.coords"]], "intcurve_diffequ() (in module sympy.diffgeom)": [[61, "sympy.diffgeom.intcurve_diffequ"]], "intcurve_series() (in module sympy.diffgeom)": [[61, "sympy.diffgeom.intcurve_series"]], "jacobian() (sympy.diffgeom.coordsystem method)": [[61, "sympy.diffgeom.CoordSystem.jacobian"]], "jacobian_determinant() (sympy.diffgeom.coordsystem method)": [[61, "sympy.diffgeom.CoordSystem.jacobian_determinant"]], "jacobian_matrix() (sympy.diffgeom.coordsystem method)": [[61, "sympy.diffgeom.CoordSystem.jacobian_matrix"]], "metric_to_christoffel_1st() (in module sympy.diffgeom)": [[61, "sympy.diffgeom.metric_to_Christoffel_1st"]], "metric_to_christoffel_2nd() (in module sympy.diffgeom)": [[61, "sympy.diffgeom.metric_to_Christoffel_2nd"]], "metric_to_ricci_components() (in module sympy.diffgeom)": [[61, "sympy.diffgeom.metric_to_Ricci_components"]], "metric_to_riemann_components() (in module sympy.diffgeom)": [[61, "sympy.diffgeom.metric_to_Riemann_components"]], "point() (sympy.diffgeom.coordsystem method)": [[61, "sympy.diffgeom.CoordSystem.point"]], "point_to_coords() (sympy.diffgeom.coordsystem method)": [[61, "sympy.diffgeom.CoordSystem.point_to_coords"]], "sympy.diffgeom": [[61, "module-sympy.diffgeom"]], "transform() (sympy.diffgeom.coordsystem method)": [[61, "sympy.diffgeom.CoordSystem.transform"]], "transformation() (sympy.diffgeom.coordsystem method)": [[61, "sympy.diffgeom.CoordSystem.transformation"]], "twoform_to_matrix() (in module sympy.diffgeom)": [[61, "sympy.diffgeom.twoform_to_matrix"]], "vectors_in_basis() (in module sympy.diffgeom)": [[61, "sympy.diffgeom.vectors_in_basis"]], "convolution() (in module sympy.discrete.convolutions)": [[62, "sympy.discrete.convolutions.convolution"]], "convolution_fft() (in module sympy.discrete.convolutions)": [[62, "sympy.discrete.convolutions.convolution_fft"]], "convolution_fwht() (in module sympy.discrete.convolutions)": [[62, "sympy.discrete.convolutions.convolution_fwht"]], "convolution_ntt() (in module sympy.discrete.convolutions)": [[62, "sympy.discrete.convolutions.convolution_ntt"]], "convolution_subset() (in module sympy.discrete.convolutions)": [[62, "sympy.discrete.convolutions.convolution_subset"]], "covering_product() (in module sympy.discrete.convolutions)": [[62, "sympy.discrete.convolutions.covering_product"]], "fft() (in module sympy.discrete.transforms)": [[62, "sympy.discrete.transforms.fft"]], "fwht() (in module sympy.discrete.transforms)": [[62, "sympy.discrete.transforms.fwht"]], "ifft() (in module sympy.discrete.transforms)": [[62, "sympy.discrete.transforms.ifft"]], "ifwht() (in module sympy.discrete.transforms)": [[62, "sympy.discrete.transforms.ifwht"]], "intersecting_product() (in module sympy.discrete.convolutions)": [[62, "sympy.discrete.convolutions.intersecting_product"]], "intt() (in module sympy.discrete.transforms)": [[62, "sympy.discrete.transforms.intt"]], "inverse_mobius_transform() (in module sympy.discrete.transforms)": [[62, "sympy.discrete.transforms.inverse_mobius_transform"]], "mobius_transform() (in module sympy.discrete.transforms)": [[62, "sympy.discrete.transforms.mobius_transform"]], "ntt() (in module sympy.discrete.transforms)": [[62, "sympy.discrete.transforms.ntt"]], "sympy.discrete": [[62, "module-sympy.discrete"]], "sympy.discrete.convolutions": [[62, "module-sympy.discrete.convolutions"]], "sympy.discrete.transforms": [[62, "module-sympy.discrete.transforms"]], "fallingfactorial (class in sympy.functions.combinatorial.factorials)": [[64, "sympy.functions.combinatorial.factorials.FallingFactorial"]], "multifactorial (class in sympy.functions.combinatorial.factorials)": [[64, "sympy.functions.combinatorial.factorials.MultiFactorial"]], "risingfactorial (class in sympy.functions.combinatorial.factorials)": [[64, "sympy.functions.combinatorial.factorials.RisingFactorial"]], "andre (class in sympy.functions.combinatorial.numbers)": [[64, "sympy.functions.combinatorial.numbers.andre"]], "bell (class in sympy.functions.combinatorial.numbers)": [[64, "sympy.functions.combinatorial.numbers.bell"]], "bernoulli (class in sympy.functions.combinatorial.numbers)": [[64, "sympy.functions.combinatorial.numbers.bernoulli"]], "binomial (class in sympy.functions.combinatorial.factorials)": [[64, "sympy.functions.combinatorial.factorials.binomial"]], "catalan (class in sympy.functions.combinatorial.numbers)": [[64, "sympy.functions.combinatorial.numbers.catalan"]], "euler (class in sympy.functions.combinatorial.numbers)": [[64, "sympy.functions.combinatorial.numbers.euler"]], "factorial (class in sympy.functions.combinatorial.factorials)": [[64, "sympy.functions.combinatorial.factorials.factorial"]], "factorial2 (class in sympy.functions.combinatorial.factorials)": [[64, "sympy.functions.combinatorial.factorials.factorial2"]], "fibonacci (class in sympy.functions.combinatorial.numbers)": [[64, "sympy.functions.combinatorial.numbers.fibonacci"]], "genocchi (class in sympy.functions.combinatorial.numbers)": [[64, "sympy.functions.combinatorial.numbers.genocchi"]], "harmonic (class in sympy.functions.combinatorial.numbers)": [[64, "sympy.functions.combinatorial.numbers.harmonic"]], "lucas (class in sympy.functions.combinatorial.numbers)": [[64, "sympy.functions.combinatorial.numbers.lucas"]], "nc() (in module sympy.functions.combinatorial.numbers)": [[64, "sympy.functions.combinatorial.numbers.nC"]], "np() (in module sympy.functions.combinatorial.numbers)": [[64, "sympy.functions.combinatorial.numbers.nP"]], "nt() (in module sympy.functions.combinatorial.numbers)": [[64, "sympy.functions.combinatorial.numbers.nT"]], "partition (class in sympy.functions.combinatorial.numbers)": [[64, "sympy.functions.combinatorial.numbers.partition"]], "stirling() (in module sympy.functions.combinatorial.numbers)": [[64, "sympy.functions.combinatorial.numbers.stirling"]], "subfactorial (class in sympy.functions.combinatorial.factorials)": [[64, "sympy.functions.combinatorial.factorials.subfactorial"]], "tribonacci (class in sympy.functions.combinatorial.numbers)": [[64, "sympy.functions.combinatorial.numbers.tribonacci"]], "abs (class in sympy.functions.elementary.complexes)": [[65, "sympy.functions.elementary.complexes.Abs"]], "exprcondpair (class in sympy.functions.elementary.piecewise)": [[65, "sympy.functions.elementary.piecewise.ExprCondPair"]], "hyperbolicfunction (class in sympy.functions.elementary.hyperbolic)": [[65, "sympy.functions.elementary.hyperbolic.HyperbolicFunction"]], "identityfunction (class in sympy.functions.elementary.miscellaneous)": [[65, "sympy.functions.elementary.miscellaneous.IdentityFunction"]], "lambertw (class in sympy.functions.elementary.exponential)": [[65, "sympy.functions.elementary.exponential.LambertW"]], "max (class in sympy.functions.elementary.miscellaneous)": [[65, "sympy.functions.elementary.miscellaneous.Max"]], "min (class in sympy.functions.elementary.miscellaneous)": [[65, "sympy.functions.elementary.miscellaneous.Min"]], "piecewise (class in sympy.functions.elementary.piecewise)": [[65, "sympy.functions.elementary.piecewise.Piecewise"]], "roundfunction (class in sympy.functions.elementary.integers)": [[65, "sympy.functions.elementary.integers.RoundFunction"]], "_eval_integral() (sympy.functions.elementary.piecewise.piecewise method)": [[65, "sympy.functions.elementary.piecewise.Piecewise._eval_integral"]], "acos (class in sympy.functions.elementary.trigonometric)": [[65, "sympy.functions.elementary.trigonometric.acos"]], "acosh (class in sympy.functions.elementary.hyperbolic)": [[65, "sympy.functions.elementary.hyperbolic.acosh"]], "acot (class in sympy.functions.elementary.trigonometric)": [[65, "sympy.functions.elementary.trigonometric.acot"]], "acoth (class in sympy.functions.elementary.hyperbolic)": [[65, "sympy.functions.elementary.hyperbolic.acoth"]], "acsc (class in sympy.functions.elementary.trigonometric)": [[65, "sympy.functions.elementary.trigonometric.acsc"]], "acsch (class in sympy.functions.elementary.hyperbolic)": [[65, "sympy.functions.elementary.hyperbolic.acsch"]], "arg (class in sympy.functions.elementary.complexes)": [[65, "sympy.functions.elementary.complexes.arg"]], "as_base_exp() (sympy.functions.elementary.exponential.log method)": [[65, "sympy.functions.elementary.exponential.log.as_base_exp"]], "as_expr_set_pairs() (sympy.functions.elementary.piecewise.piecewise method)": [[65, "sympy.functions.elementary.piecewise.Piecewise.as_expr_set_pairs"]], "as_real_imag() (sympy.functions.elementary.complexes.im method)": [[65, "sympy.functions.elementary.complexes.im.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.complexes.re method)": [[65, "sympy.functions.elementary.complexes.re.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.exp method)": [[65, "sympy.functions.elementary.exponential.exp.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.log method)": [[65, "sympy.functions.elementary.exponential.log.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.hyperbolic.sinh method)": [[65, "sympy.functions.elementary.hyperbolic.sinh.as_real_imag"]], "asec (class in sympy.functions.elementary.trigonometric)": [[65, "sympy.functions.elementary.trigonometric.asec"]], "asech (class in sympy.functions.elementary.hyperbolic)": [[65, "sympy.functions.elementary.hyperbolic.asech"]], "asin (class in sympy.functions.elementary.trigonometric)": [[65, "sympy.functions.elementary.trigonometric.asin"]], "asinh (class in sympy.functions.elementary.hyperbolic)": [[65, "sympy.functions.elementary.hyperbolic.asinh"]], "atan (class in sympy.functions.elementary.trigonometric)": [[65, "sympy.functions.elementary.trigonometric.atan"]], "atan2 (class in sympy.functions.elementary.trigonometric)": [[65, "sympy.functions.elementary.trigonometric.atan2"]], "atanh (class in sympy.functions.elementary.hyperbolic)": [[65, "sympy.functions.elementary.hyperbolic.atanh"]], "base (sympy.functions.elementary.exponential.exp property)": [[65, "sympy.functions.elementary.exponential.exp.base"]], "cbrt() (in module sympy.functions.elementary.miscellaneous)": [[65, "sympy.functions.elementary.miscellaneous.cbrt"]], "ceiling (class in sympy.functions.elementary.integers)": [[65, "sympy.functions.elementary.integers.ceiling"]], "cond (sympy.functions.elementary.piecewise.exprcondpair property)": [[65, "sympy.functions.elementary.piecewise.ExprCondPair.cond"]], "conjugate (class in sympy.functions.elementary.complexes)": [[65, "sympy.functions.elementary.complexes.conjugate"]], "cos (class in sympy.functions.elementary.trigonometric)": [[65, "sympy.functions.elementary.trigonometric.cos"]], "cosh (class in sympy.functions.elementary.hyperbolic)": [[65, "sympy.functions.elementary.hyperbolic.cosh"]], "cot (class in sympy.functions.elementary.trigonometric)": [[65, "sympy.functions.elementary.trigonometric.cot"]], "coth (class in sympy.functions.elementary.hyperbolic)": [[65, "sympy.functions.elementary.hyperbolic.coth"]], "csc (class in sympy.functions.elementary.trigonometric)": [[65, "sympy.functions.elementary.trigonometric.csc"]], "csch (class in sympy.functions.elementary.hyperbolic)": [[65, "sympy.functions.elementary.hyperbolic.csch"]], "doit() (sympy.functions.elementary.piecewise.piecewise method)": [[65, "sympy.functions.elementary.piecewise.Piecewise.doit"]], "eval() (sympy.functions.elementary.piecewise.piecewise class method)": [[65, "sympy.functions.elementary.piecewise.Piecewise.eval"]], "exp (class in sympy.functions.elementary.exponential)": [[65, "sympy.functions.elementary.exponential.exp"]], "exp_polar (class in sympy.functions.elementary.exponential)": [[65, "sympy.functions.elementary.exponential.exp_polar"]], "expr (sympy.functions.elementary.piecewise.exprcondpair property)": [[65, "sympy.functions.elementary.piecewise.ExprCondPair.expr"]], "fdiff() (sympy.functions.elementary.complexes.abs method)": [[65, "sympy.functions.elementary.complexes.Abs.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.lambertw method)": [[65, "sympy.functions.elementary.exponential.LambertW.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.exp method)": [[65, "sympy.functions.elementary.exponential.exp.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.log method)": [[65, "sympy.functions.elementary.exponential.log.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.csch method)": [[65, "sympy.functions.elementary.hyperbolic.csch.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.sinh method)": [[65, "sympy.functions.elementary.hyperbolic.sinh.fdiff"]], "floor (class in sympy.functions.elementary.integers)": [[65, "sympy.functions.elementary.integers.floor"]], "frac (class in sympy.functions.elementary.integers)": [[65, "sympy.functions.elementary.integers.frac"]], "im (class in sympy.functions.elementary.complexes)": [[65, "sympy.functions.elementary.complexes.im"]], "inverse() (sympy.functions.elementary.exponential.log method)": [[65, "sympy.functions.elementary.exponential.log.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acosh method)": [[65, "sympy.functions.elementary.hyperbolic.acosh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acoth method)": [[65, "sympy.functions.elementary.hyperbolic.acoth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acsch method)": [[65, "sympy.functions.elementary.hyperbolic.acsch.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asech method)": [[65, "sympy.functions.elementary.hyperbolic.asech.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asinh method)": [[65, "sympy.functions.elementary.hyperbolic.asinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.atanh method)": [[65, "sympy.functions.elementary.hyperbolic.atanh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.coth method)": [[65, "sympy.functions.elementary.hyperbolic.coth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.sinh method)": [[65, "sympy.functions.elementary.hyperbolic.sinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.tanh method)": [[65, "sympy.functions.elementary.hyperbolic.tanh.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acos method)": [[65, "sympy.functions.elementary.trigonometric.acos.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acot method)": [[65, "sympy.functions.elementary.trigonometric.acot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acsc method)": [[65, "sympy.functions.elementary.trigonometric.acsc.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asec method)": [[65, "sympy.functions.elementary.trigonometric.asec.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asin method)": [[65, "sympy.functions.elementary.trigonometric.asin.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.atan method)": [[65, "sympy.functions.elementary.trigonometric.atan.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.cot method)": [[65, "sympy.functions.elementary.trigonometric.cot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.tan method)": [[65, "sympy.functions.elementary.trigonometric.tan.inverse"]], "log (class in sympy.functions.elementary.exponential)": [[65, "sympy.functions.elementary.exponential.log"]], "periodic_argument (class in sympy.functions.elementary.complexes)": [[65, "sympy.functions.elementary.complexes.periodic_argument"]], "piecewise_exclusive() (in module sympy.functions.elementary.piecewise)": [[65, "sympy.functions.elementary.piecewise.piecewise_exclusive"]], "piecewise_fold() (in module sympy.functions.elementary.piecewise)": [[65, "sympy.functions.elementary.piecewise.piecewise_fold"]], "piecewise_integrate() (sympy.functions.elementary.piecewise.piecewise method)": [[65, "sympy.functions.elementary.piecewise.Piecewise.piecewise_integrate"]], "polar_lift (class in sympy.functions.elementary.complexes)": [[65, "sympy.functions.elementary.complexes.polar_lift"]], "principal_branch (class in sympy.functions.elementary.complexes)": [[65, "sympy.functions.elementary.complexes.principal_branch"]], "re (class in sympy.functions.elementary.complexes)": [[65, "sympy.functions.elementary.complexes.re"]], "real_root() (in module sympy.functions.elementary.miscellaneous)": [[65, "sympy.functions.elementary.miscellaneous.real_root"]], "root() (in module sympy.functions.elementary.miscellaneous)": [[65, "sympy.functions.elementary.miscellaneous.root"]], "sec (class in sympy.functions.elementary.trigonometric)": [[65, "sympy.functions.elementary.trigonometric.sec"]], "sech (class in sympy.functions.elementary.hyperbolic)": [[65, "sympy.functions.elementary.hyperbolic.sech"]], "sign (class in sympy.functions.elementary.complexes)": [[65, "sympy.functions.elementary.complexes.sign"]], "sin (class in sympy.functions.elementary.trigonometric)": [[65, "sympy.functions.elementary.trigonometric.sin"]], "sinc (class in sympy.functions.elementary.trigonometric)": [[65, "sympy.functions.elementary.trigonometric.sinc"]], "sinh (class in sympy.functions.elementary.hyperbolic)": [[65, "sympy.functions.elementary.hyperbolic.sinh"]], "sqrt() (in module sympy.functions.elementary.miscellaneous)": [[65, "sympy.functions.elementary.miscellaneous.sqrt"]], "tan (class in sympy.functions.elementary.trigonometric)": [[65, "sympy.functions.elementary.trigonometric.tan"]], "tanh (class in sympy.functions.elementary.hyperbolic)": [[65, "sympy.functions.elementary.hyperbolic.tanh"]], "taylor_term() (sympy.functions.elementary.exponential.exp static method)": [[65, "sympy.functions.elementary.exponential.exp.taylor_term"]], "taylor_term() (sympy.functions.elementary.exponential.log static method)": [[65, "sympy.functions.elementary.exponential.log.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.csch static method)": [[65, "sympy.functions.elementary.hyperbolic.csch.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.sinh static method)": [[65, "sympy.functions.elementary.hyperbolic.sinh.taylor_term"]], "sympy.functions": [[66, "module-sympy.functions"]], "airybase (class in sympy.functions.special.bessel)": [[67, "sympy.functions.special.bessel.AiryBase"]], "besselbase (class in sympy.functions.special.bessel)": [[67, "sympy.functions.special.bessel.BesselBase"]], "chi (class in sympy.functions.special.error_functions)": [[67, "sympy.functions.special.error_functions.Chi"]], "ci (class in sympy.functions.special.error_functions)": [[67, "sympy.functions.special.error_functions.Ci"]], "diracdelta (class in sympy.functions.special.delta_functions)": [[67, "sympy.functions.special.delta_functions.DiracDelta"]], "e1() (in module sympy.functions.special.error_functions)": [[67, "sympy.functions.special.error_functions.E1"]], "ei (class in sympy.functions.special.error_functions)": [[67, "sympy.functions.special.error_functions.Ei"]], "eijk() (in module sympy.functions.special.tensor_functions)": [[67, "sympy.functions.special.tensor_functions.Eijk"]], "fresnelintegral (class in sympy.functions.special.error_functions)": [[67, "sympy.functions.special.error_functions.FresnelIntegral"]], "heaviside (class in sympy.functions.special.delta_functions)": [[67, "sympy.functions.special.delta_functions.Heaviside"]], "kroneckerdelta (class in sympy.functions.special.tensor_functions)": [[67, "sympy.functions.special.tensor_functions.KroneckerDelta"]], "levicivita (class in sympy.functions.special.tensor_functions)": [[67, "sympy.functions.special.tensor_functions.LeviCivita"]], "li (class in sympy.functions.special.error_functions)": [[67, "sympy.functions.special.error_functions.Li"], [67, "sympy.functions.special.error_functions.li"]], "mathieubase (class in sympy.functions.special.mathieu_functions)": [[67, "sympy.functions.special.mathieu_functions.MathieuBase"]], "shi (class in sympy.functions.special.error_functions)": [[67, "sympy.functions.special.error_functions.Shi"]], "si (class in sympy.functions.special.error_functions)": [[67, "sympy.functions.special.error_functions.Si"]], "singularityfunction (class in sympy.functions.special.singularity_functions)": [[67, "sympy.functions.special.singularity_functions.SingularityFunction"]], "ynm (class in sympy.functions.special.spherical_harmonics)": [[67, "sympy.functions.special.spherical_harmonics.Ynm"]], "ynm_c() (in module sympy.functions.special.spherical_harmonics)": [[67, "sympy.functions.special.spherical_harmonics.Ynm_c"]], "znm (class in sympy.functions.special.spherical_harmonics)": [[67, "sympy.functions.special.spherical_harmonics.Znm"]], "airyai (class in sympy.functions.special.bessel)": [[67, "sympy.functions.special.bessel.airyai"]], "airyaiprime (class in sympy.functions.special.bessel)": [[67, "sympy.functions.special.bessel.airyaiprime"]], "airybi (class in sympy.functions.special.bessel)": [[67, "sympy.functions.special.bessel.airybi"]], "airybiprime (class in sympy.functions.special.bessel)": [[67, "sympy.functions.special.bessel.airybiprime"]], "an (sympy.functions.special.hyper.meijerg property)": [[67, "sympy.functions.special.hyper.meijerg.an"]], "aother (sympy.functions.special.hyper.meijerg property)": [[67, "sympy.functions.special.hyper.meijerg.aother"]], "ap (sympy.functions.special.hyper.hyper property)": [[67, "sympy.functions.special.hyper.hyper.ap"]], "ap (sympy.functions.special.hyper.meijerg property)": [[67, "sympy.functions.special.hyper.meijerg.ap"]], "appellf1 (class in sympy.functions.special.hyper)": [[67, "sympy.functions.special.hyper.appellf1"]], "argument (sympy.functions.special.bessel.besselbase property)": [[67, "sympy.functions.special.bessel.BesselBase.argument"]], "argument (sympy.functions.special.hyper.hyper property)": [[67, "sympy.functions.special.hyper.hyper.argument"]], "argument (sympy.functions.special.hyper.meijerg property)": [[67, "sympy.functions.special.hyper.meijerg.argument"]], "assoc_laguerre (class in sympy.functions.special.polynomials)": [[67, "sympy.functions.special.polynomials.assoc_laguerre"]], "assoc_legendre (class in sympy.functions.special.polynomials)": [[67, "sympy.functions.special.polynomials.assoc_legendre"]], "besseli (class in sympy.functions.special.bessel)": [[67, "sympy.functions.special.bessel.besseli"]], "besselj (class in sympy.functions.special.bessel)": [[67, "sympy.functions.special.bessel.besselj"]], "besselk (class in sympy.functions.special.bessel)": [[67, "sympy.functions.special.bessel.besselk"]], "bessely (class in sympy.functions.special.bessel)": [[67, "sympy.functions.special.bessel.bessely"]], "beta (class in sympy.functions.special.beta_functions)": [[67, "sympy.functions.special.beta_functions.beta"]], "bm (sympy.functions.special.hyper.meijerg property)": [[67, "sympy.functions.special.hyper.meijerg.bm"]], "bother (sympy.functions.special.hyper.meijerg property)": [[67, "sympy.functions.special.hyper.meijerg.bother"]], "bq (sympy.functions.special.hyper.hyper property)": [[67, "sympy.functions.special.hyper.hyper.bq"]], "bq (sympy.functions.special.hyper.meijerg property)": [[67, "sympy.functions.special.hyper.meijerg.bq"]], "bspline_basis() (in module sympy.functions.special.bsplines)": [[67, "sympy.functions.special.bsplines.bspline_basis"]], "bspline_basis_set() (in module sympy.functions.special.bsplines)": [[67, "sympy.functions.special.bsplines.bspline_basis_set"]], "chebyshevt (class in sympy.functions.special.polynomials)": [[67, "sympy.functions.special.polynomials.chebyshevt"]], "chebyshevt_root (class in sympy.functions.special.polynomials)": [[67, "sympy.functions.special.polynomials.chebyshevt_root"]], "chebyshevu (class in sympy.functions.special.polynomials)": [[67, "sympy.functions.special.polynomials.chebyshevu"]], "chebyshevu_root (class in sympy.functions.special.polynomials)": [[67, "sympy.functions.special.polynomials.chebyshevu_root"]], "convergence_statement (sympy.functions.special.hyper.hyper property)": [[67, "sympy.functions.special.hyper.hyper.convergence_statement"]], "delta (sympy.functions.special.hyper.meijerg property)": [[67, "sympy.functions.special.hyper.meijerg.delta"]], "digamma (class in sympy.functions.special.gamma_functions)": [[67, "sympy.functions.special.gamma_functions.digamma"]], "dirichlet_eta (class in sympy.functions.special.zeta_functions)": [[67, "sympy.functions.special.zeta_functions.dirichlet_eta"]], "elliptic_e (class in sympy.functions.special.elliptic_integrals)": [[67, "sympy.functions.special.elliptic_integrals.elliptic_e"]], "elliptic_f (class in sympy.functions.special.elliptic_integrals)": [[67, "sympy.functions.special.elliptic_integrals.elliptic_f"]], "elliptic_k (class in sympy.functions.special.elliptic_integrals)": [[67, "sympy.functions.special.elliptic_integrals.elliptic_k"]], "elliptic_pi (class in sympy.functions.special.elliptic_integrals)": [[67, "sympy.functions.special.elliptic_integrals.elliptic_pi"]], "erf (class in sympy.functions.special.error_functions)": [[67, "sympy.functions.special.error_functions.erf"]], "erf2 (class in sympy.functions.special.error_functions)": [[67, "sympy.functions.special.error_functions.erf2"]], "erf2inv (class in sympy.functions.special.error_functions)": [[67, "sympy.functions.special.error_functions.erf2inv"]], "erfc (class in sympy.functions.special.error_functions)": [[67, "sympy.functions.special.error_functions.erfc"]], "erfcinv (class in sympy.functions.special.error_functions)": [[67, "sympy.functions.special.error_functions.erfcinv"]], "erfi (class in sympy.functions.special.error_functions)": [[67, "sympy.functions.special.error_functions.erfi"]], "erfinv (class in sympy.functions.special.error_functions)": [[67, "sympy.functions.special.error_functions.erfinv"]], "eta (sympy.functions.special.hyper.hyper property)": [[67, "sympy.functions.special.hyper.hyper.eta"]], "eval() (sympy.functions.special.delta_functions.diracdelta class method)": [[67, "sympy.functions.special.delta_functions.DiracDelta.eval"]], "eval() (sympy.functions.special.delta_functions.heaviside class method)": [[67, "sympy.functions.special.delta_functions.Heaviside.eval"]], "eval() (sympy.functions.special.singularity_functions.singularityfunction class method)": [[67, "sympy.functions.special.singularity_functions.SingularityFunction.eval"]], "eval() (sympy.functions.special.tensor_functions.kroneckerdelta class method)": [[67, "sympy.functions.special.tensor_functions.KroneckerDelta.eval"]], "eval_levicivita() (in module sympy.functions.special.tensor_functions)": [[67, "sympy.functions.special.tensor_functions.eval_levicivita"]], "expint (class in sympy.functions.special.error_functions)": [[67, "sympy.functions.special.error_functions.expint"]], "fdiff() (sympy.functions.special.delta_functions.diracdelta method)": [[67, "sympy.functions.special.delta_functions.DiracDelta.fdiff"]], "fdiff() (sympy.functions.special.delta_functions.heaviside method)": [[67, "sympy.functions.special.delta_functions.Heaviside.fdiff"]], "fdiff() (sympy.functions.special.singularity_functions.singularityfunction method)": [[67, "sympy.functions.special.singularity_functions.SingularityFunction.fdiff"]], "fresnelc (class in sympy.functions.special.error_functions)": [[67, "sympy.functions.special.error_functions.fresnelc"]], "fresnels (class in sympy.functions.special.error_functions)": [[67, "sympy.functions.special.error_functions.fresnels"]], "gamma (class in sympy.functions.special.gamma_functions)": [[67, "sympy.functions.special.gamma_functions.gamma"]], "gegenbauer (class in sympy.functions.special.polynomials)": [[67, "sympy.functions.special.polynomials.gegenbauer"]], "get_period() (sympy.functions.special.hyper.meijerg method)": [[67, "sympy.functions.special.hyper.meijerg.get_period"]], "hankel1 (class in sympy.functions.special.bessel)": [[67, "sympy.functions.special.bessel.hankel1"]], "hankel2 (class in sympy.functions.special.bessel)": [[67, "sympy.functions.special.bessel.hankel2"]], "hermite (class in sympy.functions.special.polynomials)": [[67, "sympy.functions.special.polynomials.hermite"]], "hermite_prob (class in sympy.functions.special.polynomials)": [[67, "sympy.functions.special.polynomials.hermite_prob"]], "hyper (class in sympy.functions.special.hyper)": [[67, "sympy.functions.special.hyper.hyper"]], "indices_contain_equal_information (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[67, "sympy.functions.special.tensor_functions.KroneckerDelta.indices_contain_equal_information"]], "integrand() (sympy.functions.special.hyper.meijerg method)": [[67, "sympy.functions.special.hyper.meijerg.integrand"]], "interpolating_spline() (in module sympy.functions.special.bsplines)": [[67, "sympy.functions.special.bsplines.interpolating_spline"]], "inverse() (sympy.functions.special.error_functions.erf method)": [[67, "sympy.functions.special.error_functions.erf.inverse"]], "inverse() (sympy.functions.special.error_functions.erfc method)": [[67, "sympy.functions.special.error_functions.erfc.inverse"]], "inverse() (sympy.functions.special.error_functions.erfcinv method)": [[67, "sympy.functions.special.error_functions.erfcinv.inverse"]], "inverse() (sympy.functions.special.error_functions.erfinv method)": [[67, "sympy.functions.special.error_functions.erfinv.inverse"]], "is_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[67, "sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[67, "sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi"]], "is_number (sympy.functions.special.hyper.meijerg property)": [[67, "sympy.functions.special.hyper.meijerg.is_number"]], "is_only_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[67, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[67, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi"]], "is_simple() (sympy.functions.special.delta_functions.diracdelta method)": [[67, "sympy.functions.special.delta_functions.DiracDelta.is_simple"]], "jacobi (class in sympy.functions.special.polynomials)": [[67, "sympy.functions.special.polynomials.jacobi"]], "jacobi_normalized() (in module sympy.functions.special.polynomials)": [[67, "sympy.functions.special.polynomials.jacobi_normalized"]], "jn (class in sympy.functions.special.bessel)": [[67, "sympy.functions.special.bessel.jn"]], "jn_zeros() (in module sympy.functions.special.bessel)": [[67, "sympy.functions.special.bessel.jn_zeros"]], "killable_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[67, "sympy.functions.special.tensor_functions.KroneckerDelta.killable_index"]], "laguerre (class in sympy.functions.special.polynomials)": [[67, "sympy.functions.special.polynomials.laguerre"]], "legendre (class in sympy.functions.special.polynomials)": [[67, "sympy.functions.special.polynomials.legendre"]], "lerchphi (class in sympy.functions.special.zeta_functions)": [[67, "sympy.functions.special.zeta_functions.lerchphi"]], "loggamma (class in sympy.functions.special.gamma_functions)": [[67, "sympy.functions.special.gamma_functions.loggamma"]], "lowergamma (class in sympy.functions.special.gamma_functions)": [[67, "sympy.functions.special.gamma_functions.lowergamma"]], "marcumq (class in sympy.functions.special.bessel)": [[67, "sympy.functions.special.bessel.marcumq"]], "mathieuc (class in sympy.functions.special.mathieu_functions)": [[67, "sympy.functions.special.mathieu_functions.mathieuc"]], "mathieucprime (class in sympy.functions.special.mathieu_functions)": [[67, "sympy.functions.special.mathieu_functions.mathieucprime"]], "mathieus (class in sympy.functions.special.mathieu_functions)": [[67, "sympy.functions.special.mathieu_functions.mathieus"]], "mathieusprime (class in sympy.functions.special.mathieu_functions)": [[67, "sympy.functions.special.mathieu_functions.mathieusprime"]], "meijerg (class in sympy.functions.special.hyper)": [[67, "sympy.functions.special.hyper.meijerg"]], "multigamma (class in sympy.functions.special.gamma_functions)": [[67, "sympy.functions.special.gamma_functions.multigamma"]], "nu (sympy.functions.special.hyper.meijerg property)": [[67, "sympy.functions.special.hyper.meijerg.nu"]], "order (sympy.functions.special.bessel.besselbase property)": [[67, "sympy.functions.special.bessel.BesselBase.order"]], "pargs (sympy.functions.special.delta_functions.heaviside property)": [[67, "sympy.functions.special.delta_functions.Heaviside.pargs"]], "polygamma (class in sympy.functions.special.gamma_functions)": [[67, "sympy.functions.special.gamma_functions.polygamma"]], "polylog (class in sympy.functions.special.zeta_functions)": [[67, "sympy.functions.special.zeta_functions.polylog"]], "preferred_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[67, "sympy.functions.special.tensor_functions.KroneckerDelta.preferred_index"]], "radius_of_convergence (sympy.functions.special.hyper.hyper property)": [[67, "sympy.functions.special.hyper.hyper.radius_of_convergence"]], "stieltjes (class in sympy.functions.special.zeta_functions)": [[67, "sympy.functions.special.zeta_functions.stieltjes"]], "sympy.functions.special.bessel": [[67, "module-sympy.functions.special.bessel"]], "sympy.functions.special.beta_functions": [[67, "module-sympy.functions.special.beta_functions"]], "sympy.functions.special.elliptic_integrals": [[67, "module-sympy.functions.special.elliptic_integrals"]], "sympy.functions.special.error_functions": [[67, "module-sympy.functions.special.error_functions"]], "sympy.functions.special.gamma_functions": [[67, "module-sympy.functions.special.gamma_functions"]], "sympy.functions.special.mathieu_functions": [[67, "module-sympy.functions.special.mathieu_functions"]], "sympy.functions.special.polynomials": [[67, "module-sympy.functions.special.polynomials"]], "sympy.functions.special.singularity_functions": [[67, "module-sympy.functions.special.singularity_functions"]], "sympy.functions.special.zeta_functions": [[67, "module-sympy.functions.special.zeta_functions"]], "trigamma (class in sympy.functions.special.gamma_functions)": [[67, "sympy.functions.special.gamma_functions.trigamma"]], "uppergamma (class in sympy.functions.special.gamma_functions)": [[67, "sympy.functions.special.gamma_functions.uppergamma"]], "yn (class in sympy.functions.special.bessel)": [[67, "sympy.functions.special.bessel.yn"]], "zeta (class in sympy.functions.special.zeta_functions)": [[67, "sympy.functions.special.zeta_functions.zeta"]], "curve (class in sympy.geometry.curve)": [[68, "sympy.geometry.curve.Curve"]], "ambient_dimension (sympy.geometry.curve.curve property)": [[68, "sympy.geometry.curve.Curve.ambient_dimension"]], "arbitrary_point() (sympy.geometry.curve.curve method)": [[68, "sympy.geometry.curve.Curve.arbitrary_point"]], "free_symbols (sympy.geometry.curve.curve property)": [[68, "sympy.geometry.curve.Curve.free_symbols"]], "functions (sympy.geometry.curve.curve property)": [[68, "sympy.geometry.curve.Curve.functions"]], "length (sympy.geometry.curve.curve property)": [[68, "sympy.geometry.curve.Curve.length"]], "limits (sympy.geometry.curve.curve property)": [[68, "sympy.geometry.curve.Curve.limits"]], "parameter (sympy.geometry.curve.curve property)": [[68, "sympy.geometry.curve.Curve.parameter"]], "plot_interval() (sympy.geometry.curve.curve method)": [[68, "sympy.geometry.curve.Curve.plot_interval"]], "rotate() (sympy.geometry.curve.curve method)": [[68, "sympy.geometry.curve.Curve.rotate"]], "scale() (sympy.geometry.curve.curve method)": [[68, "sympy.geometry.curve.Curve.scale"]], "sympy.geometry.curve": [[68, "module-sympy.geometry.curve"]], "translate() (sympy.geometry.curve.curve method)": [[68, "sympy.geometry.curve.Curve.translate"]], "circle (class in sympy.geometry.ellipse)": [[69, "sympy.geometry.ellipse.Circle"]], "ellipse (class in sympy.geometry.ellipse)": [[69, "sympy.geometry.ellipse.Ellipse"]], "apoapsis (sympy.geometry.ellipse.ellipse property)": [[69, "sympy.geometry.ellipse.Ellipse.apoapsis"]], "arbitrary_point() (sympy.geometry.ellipse.ellipse method)": [[69, "sympy.geometry.ellipse.Ellipse.arbitrary_point"]], "area (sympy.geometry.ellipse.ellipse property)": [[69, "sympy.geometry.ellipse.Ellipse.area"]], "auxiliary_circle() (sympy.geometry.ellipse.ellipse method)": [[69, "sympy.geometry.ellipse.Ellipse.auxiliary_circle"]], "bounds (sympy.geometry.ellipse.ellipse property)": [[69, "sympy.geometry.ellipse.Ellipse.bounds"]], "center (sympy.geometry.ellipse.ellipse property)": [[69, "sympy.geometry.ellipse.Ellipse.center"]], "circumference (sympy.geometry.ellipse.circle property)": [[69, "sympy.geometry.ellipse.Circle.circumference"]], "circumference (sympy.geometry.ellipse.ellipse property)": [[69, "sympy.geometry.ellipse.Ellipse.circumference"]], "director_circle() (sympy.geometry.ellipse.ellipse method)": [[69, "sympy.geometry.ellipse.Ellipse.director_circle"]], "eccentricity (sympy.geometry.ellipse.ellipse property)": [[69, "sympy.geometry.ellipse.Ellipse.eccentricity"]], "encloses_point() (sympy.geometry.ellipse.ellipse method)": [[69, "sympy.geometry.ellipse.Ellipse.encloses_point"]], "equation() (sympy.geometry.ellipse.circle method)": [[69, "sympy.geometry.ellipse.Circle.equation"]], "equation() (sympy.geometry.ellipse.ellipse method)": [[69, "sympy.geometry.ellipse.Ellipse.equation"]], "evolute() (sympy.geometry.ellipse.ellipse method)": [[69, "sympy.geometry.ellipse.Ellipse.evolute"]], "foci (sympy.geometry.ellipse.ellipse property)": [[69, "sympy.geometry.ellipse.Ellipse.foci"]], "focus_distance (sympy.geometry.ellipse.ellipse property)": [[69, "sympy.geometry.ellipse.Ellipse.focus_distance"]], "hradius (sympy.geometry.ellipse.ellipse property)": [[69, "sympy.geometry.ellipse.Ellipse.hradius"]], "intersection() (sympy.geometry.ellipse.circle method)": [[69, "sympy.geometry.ellipse.Circle.intersection"]], "intersection() (sympy.geometry.ellipse.ellipse method)": [[69, "sympy.geometry.ellipse.Ellipse.intersection"]], "is_tangent() (sympy.geometry.ellipse.ellipse method)": [[69, "sympy.geometry.ellipse.Ellipse.is_tangent"]], "major (sympy.geometry.ellipse.ellipse property)": [[69, "sympy.geometry.ellipse.Ellipse.major"]], "minor (sympy.geometry.ellipse.ellipse property)": [[69, "sympy.geometry.ellipse.Ellipse.minor"]], "normal_lines() (sympy.geometry.ellipse.ellipse method)": [[69, "sympy.geometry.ellipse.Ellipse.normal_lines"]], "periapsis (sympy.geometry.ellipse.ellipse property)": [[69, "sympy.geometry.ellipse.Ellipse.periapsis"]], "plot_interval() (sympy.geometry.ellipse.ellipse method)": [[69, "sympy.geometry.ellipse.Ellipse.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[69, "sympy.geometry.ellipse.Ellipse.polar_second_moment_of_area"]], "radius (sympy.geometry.ellipse.circle property)": [[69, "sympy.geometry.ellipse.Circle.radius"]], "random_point() (sympy.geometry.ellipse.ellipse method)": [[69, "sympy.geometry.ellipse.Ellipse.random_point"]], "reflect() (sympy.geometry.ellipse.circle method)": [[69, "sympy.geometry.ellipse.Circle.reflect"]], "reflect() (sympy.geometry.ellipse.ellipse method)": [[69, "sympy.geometry.ellipse.Ellipse.reflect"]], "rotate() (sympy.geometry.ellipse.ellipse method)": [[69, "sympy.geometry.ellipse.Ellipse.rotate"]], "scale() (sympy.geometry.ellipse.circle method)": [[69, "sympy.geometry.ellipse.Circle.scale"]], "scale() (sympy.geometry.ellipse.ellipse method)": [[69, "sympy.geometry.ellipse.Ellipse.scale"]], "second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[69, "sympy.geometry.ellipse.Ellipse.second_moment_of_area"]], "section_modulus() (sympy.geometry.ellipse.ellipse method)": [[69, "sympy.geometry.ellipse.Ellipse.section_modulus"]], "semilatus_rectum (sympy.geometry.ellipse.ellipse property)": [[69, "sympy.geometry.ellipse.Ellipse.semilatus_rectum"]], "sympy.geometry.ellipse": [[69, "module-sympy.geometry.ellipse"]], "tangent_lines() (sympy.geometry.ellipse.ellipse method)": [[69, "sympy.geometry.ellipse.Ellipse.tangent_lines"]], "vradius (sympy.geometry.ellipse.circle property)": [[69, "sympy.geometry.ellipse.Circle.vradius"]], "vradius (sympy.geometry.ellipse.ellipse property)": [[69, "sympy.geometry.ellipse.Ellipse.vradius"]], "geometryentity (class in sympy.geometry.entity)": [[70, "sympy.geometry.entity.GeometryEntity"]], "ambient_dimension (sympy.geometry.entity.geometryentity property)": [[70, "sympy.geometry.entity.GeometryEntity.ambient_dimension"]], "bounds (sympy.geometry.entity.geometryentity property)": [[70, "sympy.geometry.entity.GeometryEntity.bounds"]], "encloses() (sympy.geometry.entity.geometryentity method)": [[70, "sympy.geometry.entity.GeometryEntity.encloses"]], "intersection() (sympy.geometry.entity.geometryentity method)": [[70, "sympy.geometry.entity.GeometryEntity.intersection"]], "is_similar() (sympy.geometry.entity.geometryentity method)": [[70, "sympy.geometry.entity.GeometryEntity.is_similar"]], "parameter_value() (sympy.geometry.entity.geometryentity method)": [[70, "sympy.geometry.entity.GeometryEntity.parameter_value"]], "reflect() (sympy.geometry.entity.geometryentity method)": [[70, "sympy.geometry.entity.GeometryEntity.reflect"]], "rotate() (sympy.geometry.entity.geometryentity method)": [[70, "sympy.geometry.entity.GeometryEntity.rotate"]], "scale() (sympy.geometry.entity.geometryentity method)": [[70, "sympy.geometry.entity.GeometryEntity.scale"]], "sympy.geometry.entity": [[70, "module-sympy.geometry.entity"]], "translate() (sympy.geometry.entity.geometryentity method)": [[70, "sympy.geometry.entity.GeometryEntity.translate"]], "line (class in sympy.geometry.line)": [[72, "sympy.geometry.line.Line"]], "line2d (class in sympy.geometry.line)": [[72, "sympy.geometry.line.Line2D"]], "line3d (class in sympy.geometry.line)": [[72, "sympy.geometry.line.Line3D"]], "linearentity (class in sympy.geometry.line)": [[72, "sympy.geometry.line.LinearEntity"]], "linearentity2d (class in sympy.geometry.line)": [[72, "sympy.geometry.line.LinearEntity2D"]], "linearentity3d (class in sympy.geometry.line)": [[72, "sympy.geometry.line.LinearEntity3D"]], "ray (class in sympy.geometry.line)": [[72, "sympy.geometry.line.Ray"]], "ray2d (class in sympy.geometry.line)": [[72, "sympy.geometry.line.Ray2D"]], "ray3d (class in sympy.geometry.line)": [[72, "sympy.geometry.line.Ray3D"]], "segment (class in sympy.geometry.line)": [[72, "sympy.geometry.line.Segment"]], "segment2d (class in sympy.geometry.line)": [[72, "sympy.geometry.line.Segment2D"]], "segment3d (class in sympy.geometry.line)": [[72, "sympy.geometry.line.Segment3D"]], "ambient_dimension (sympy.geometry.line.linearentity property)": [[72, "sympy.geometry.line.LinearEntity.ambient_dimension"]], "angle_between() (sympy.geometry.line.linearentity method)": [[72, "sympy.geometry.line.LinearEntity.angle_between"]], "arbitrary_point() (sympy.geometry.line.linearentity method)": [[72, "sympy.geometry.line.LinearEntity.arbitrary_point"]], "are_concurrent() (sympy.geometry.line.linearentity static method)": [[72, "sympy.geometry.line.LinearEntity.are_concurrent"]], "bisectors() (sympy.geometry.line.linearentity method)": [[72, "sympy.geometry.line.LinearEntity.bisectors"]], "bounds (sympy.geometry.line.linearentity2d property)": [[72, "sympy.geometry.line.LinearEntity2D.bounds"]], "closing_angle() (sympy.geometry.line.ray2d method)": [[72, "sympy.geometry.line.Ray2D.closing_angle"]], "coefficients (sympy.geometry.line.line2d property)": [[72, "sympy.geometry.line.Line2D.coefficients"]], "contains() (sympy.geometry.line.line method)": [[72, "sympy.geometry.line.Line.contains"]], "contains() (sympy.geometry.line.linearentity method)": [[72, "sympy.geometry.line.LinearEntity.contains"]], "contains() (sympy.geometry.line.ray method)": [[72, "sympy.geometry.line.Ray.contains"]], "contains() (sympy.geometry.line.segment method)": [[72, "sympy.geometry.line.Segment.contains"]], "direction (sympy.geometry.line.linearentity property)": [[72, "sympy.geometry.line.LinearEntity.direction"]], "direction_cosine (sympy.geometry.line.linearentity3d property)": [[72, "sympy.geometry.line.LinearEntity3D.direction_cosine"]], "direction_ratio (sympy.geometry.line.linearentity3d property)": [[72, "sympy.geometry.line.LinearEntity3D.direction_ratio"]], "distance() (sympy.geometry.line.line method)": [[72, "sympy.geometry.line.Line.distance"]], "distance() (sympy.geometry.line.ray method)": [[72, "sympy.geometry.line.Ray.distance"]], "distance() (sympy.geometry.line.segment method)": [[72, "sympy.geometry.line.Segment.distance"]], "equals() (sympy.geometry.line.line method)": [[72, "sympy.geometry.line.Line.equals"]], "equals() (sympy.geometry.line.ray method)": [[72, "sympy.geometry.line.Ray.equals"]], "equals() (sympy.geometry.line.segment method)": [[72, "sympy.geometry.line.Segment.equals"]], "equation() (sympy.geometry.line.line2d method)": [[72, "sympy.geometry.line.Line2D.equation"]], "equation() (sympy.geometry.line.line3d method)": [[72, "sympy.geometry.line.Line3D.equation"]], "intersection() (sympy.geometry.line.linearentity method)": [[72, "sympy.geometry.line.LinearEntity.intersection"]], "is_parallel() (sympy.geometry.line.linearentity method)": [[72, "sympy.geometry.line.LinearEntity.is_parallel"]], "is_perpendicular() (sympy.geometry.line.linearentity method)": [[72, "sympy.geometry.line.LinearEntity.is_perpendicular"]], "is_similar() (sympy.geometry.line.linearentity method)": [[72, "sympy.geometry.line.LinearEntity.is_similar"]], "length (sympy.geometry.line.linearentity property)": [[72, "sympy.geometry.line.LinearEntity.length"]], "length (sympy.geometry.line.segment property)": [[72, "sympy.geometry.line.Segment.length"]], "midpoint (sympy.geometry.line.segment property)": [[72, "sympy.geometry.line.Segment.midpoint"]], "p1 (sympy.geometry.line.linearentity property)": [[72, "sympy.geometry.line.LinearEntity.p1"]], "p2 (sympy.geometry.line.linearentity property)": [[72, "sympy.geometry.line.LinearEntity.p2"]], "parallel_line() (sympy.geometry.line.linearentity method)": [[72, "sympy.geometry.line.LinearEntity.parallel_line"]], "perpendicular_bisector() (sympy.geometry.line.segment method)": [[72, "sympy.geometry.line.Segment.perpendicular_bisector"]], "perpendicular_line() (sympy.geometry.line.linearentity method)": [[72, "sympy.geometry.line.LinearEntity.perpendicular_line"]], "perpendicular_line() (sympy.geometry.line.linearentity2d method)": [[72, "sympy.geometry.line.LinearEntity2D.perpendicular_line"]], "perpendicular_segment() (sympy.geometry.line.linearentity method)": [[72, "sympy.geometry.line.LinearEntity.perpendicular_segment"]], "plot_interval() (sympy.geometry.line.line method)": [[72, "sympy.geometry.line.Line.plot_interval"]], "plot_interval() (sympy.geometry.line.ray method)": [[72, "sympy.geometry.line.Ray.plot_interval"]], "plot_interval() (sympy.geometry.line.segment method)": [[72, "sympy.geometry.line.Segment.plot_interval"]], "points (sympy.geometry.line.linearentity property)": [[72, "sympy.geometry.line.LinearEntity.points"]], "projection() (sympy.geometry.line.linearentity method)": [[72, "sympy.geometry.line.LinearEntity.projection"]], "random_point() (sympy.geometry.line.linearentity method)": [[72, "sympy.geometry.line.LinearEntity.random_point"]], "slope (sympy.geometry.line.linearentity2d property)": [[72, "sympy.geometry.line.LinearEntity2D.slope"]], "smallest_angle_between() (sympy.geometry.line.linearentity method)": [[72, "sympy.geometry.line.LinearEntity.smallest_angle_between"]], "source (sympy.geometry.line.ray property)": [[72, "sympy.geometry.line.Ray.source"]], "sympy.geometry.line": [[72, "module-sympy.geometry.line"]], "xdirection (sympy.geometry.line.ray2d property)": [[72, "sympy.geometry.line.Ray2D.xdirection"]], "xdirection (sympy.geometry.line.ray3d property)": [[72, "sympy.geometry.line.Ray3D.xdirection"]], "ydirection (sympy.geometry.line.ray2d property)": [[72, "sympy.geometry.line.Ray2D.ydirection"]], "ydirection (sympy.geometry.line.ray3d property)": [[72, "sympy.geometry.line.Ray3D.ydirection"]], "zdirection (sympy.geometry.line.ray3d property)": [[72, "sympy.geometry.line.Ray3D.zdirection"]], "plane (class in sympy.geometry.plane)": [[73, "sympy.geometry.plane.Plane"]], "angle_between() (sympy.geometry.plane.plane method)": [[73, "sympy.geometry.plane.Plane.angle_between"]], "arbitrary_point() (sympy.geometry.plane.plane method)": [[73, "sympy.geometry.plane.Plane.arbitrary_point"]], "are_concurrent() (sympy.geometry.plane.plane static method)": [[73, "sympy.geometry.plane.Plane.are_concurrent"]], "distance() (sympy.geometry.plane.plane method)": [[73, "sympy.geometry.plane.Plane.distance"]], "equals() (sympy.geometry.plane.plane method)": [[73, "sympy.geometry.plane.Plane.equals"]], "equation() (sympy.geometry.plane.plane method)": [[73, "sympy.geometry.plane.Plane.equation"]], "intersection() (sympy.geometry.plane.plane method)": [[73, "sympy.geometry.plane.Plane.intersection"]], "is_coplanar() (sympy.geometry.plane.plane method)": [[73, "sympy.geometry.plane.Plane.is_coplanar"]], "is_parallel() (sympy.geometry.plane.plane method)": [[73, "sympy.geometry.plane.Plane.is_parallel"]], "is_perpendicular() (sympy.geometry.plane.plane method)": [[73, "sympy.geometry.plane.Plane.is_perpendicular"]], "normal_vector (sympy.geometry.plane.plane property)": [[73, "sympy.geometry.plane.Plane.normal_vector"]], "p1 (sympy.geometry.plane.plane property)": [[73, "sympy.geometry.plane.Plane.p1"]], "parallel_plane() (sympy.geometry.plane.plane method)": [[73, "sympy.geometry.plane.Plane.parallel_plane"]], "parameter_value() (sympy.geometry.plane.plane method)": [[73, "sympy.geometry.plane.Plane.parameter_value"]], "perpendicular_line() (sympy.geometry.plane.plane method)": [[73, "sympy.geometry.plane.Plane.perpendicular_line"]], "perpendicular_plane() (sympy.geometry.plane.plane method)": [[73, "sympy.geometry.plane.Plane.perpendicular_plane"]], "projection() (sympy.geometry.plane.plane method)": [[73, "sympy.geometry.plane.Plane.projection"]], "projection_line() (sympy.geometry.plane.plane method)": [[73, "sympy.geometry.plane.Plane.projection_line"]], "random_point() (sympy.geometry.plane.plane method)": [[73, "sympy.geometry.plane.Plane.random_point"]], "sympy.geometry.plane": [[73, "module-sympy.geometry.plane"]], "point (class in sympy.geometry.point)": [[74, "sympy.geometry.point.Point"]], "point2d (class in sympy.geometry.point)": [[74, "sympy.geometry.point.Point2D"]], "point3d (class in sympy.geometry.point)": [[74, "sympy.geometry.point.Point3D"]], "affine_rank() (sympy.geometry.point.point static method)": [[74, "sympy.geometry.point.Point.affine_rank"]], "ambient_dimension (sympy.geometry.point.point property)": [[74, "sympy.geometry.point.Point.ambient_dimension"]], "are_collinear() (sympy.geometry.point.point3d static method)": [[74, "sympy.geometry.point.Point3D.are_collinear"]], "are_coplanar() (sympy.geometry.point.point class method)": [[74, "sympy.geometry.point.Point.are_coplanar"]], "bounds (sympy.geometry.point.point2d property)": [[74, "sympy.geometry.point.Point2D.bounds"]], "canberra_distance() (sympy.geometry.point.point method)": [[74, "sympy.geometry.point.Point.canberra_distance"]], "coordinates (sympy.geometry.point.point2d property)": [[74, "sympy.geometry.point.Point2D.coordinates"]], "coordinates (sympy.geometry.point.point3d property)": [[74, "sympy.geometry.point.Point3D.coordinates"]], "direction_cosine() (sympy.geometry.point.point3d method)": [[74, "sympy.geometry.point.Point3D.direction_cosine"]], "direction_ratio() (sympy.geometry.point.point3d method)": [[74, "sympy.geometry.point.Point3D.direction_ratio"]], "distance() (sympy.geometry.point.point method)": [[74, "sympy.geometry.point.Point.distance"]], "dot() (sympy.geometry.point.point method)": [[74, "sympy.geometry.point.Point.dot"]], "equals() (sympy.geometry.point.point method)": [[74, "sympy.geometry.point.Point.equals"]], "intersection() (sympy.geometry.point.point method)": [[74, "sympy.geometry.point.Point.intersection"]], "intersection() (sympy.geometry.point.point3d method)": [[74, "sympy.geometry.point.Point3D.intersection"]], "is_collinear() (sympy.geometry.point.point method)": [[74, "sympy.geometry.point.Point.is_collinear"]], "is_concyclic() (sympy.geometry.point.point method)": [[74, "sympy.geometry.point.Point.is_concyclic"]], "is_nonzero (sympy.geometry.point.point property)": [[74, "sympy.geometry.point.Point.is_nonzero"]], "is_scalar_multiple() (sympy.geometry.point.point method)": [[74, "sympy.geometry.point.Point.is_scalar_multiple"]], "is_zero (sympy.geometry.point.point property)": [[74, "sympy.geometry.point.Point.is_zero"]], "length (sympy.geometry.point.point property)": [[74, "sympy.geometry.point.Point.length"]], "midpoint() (sympy.geometry.point.point method)": [[74, "sympy.geometry.point.Point.midpoint"]], "origin (sympy.geometry.point.point property)": [[74, "sympy.geometry.point.Point.origin"]], "orthogonal_direction (sympy.geometry.point.point property)": [[74, "sympy.geometry.point.Point.orthogonal_direction"]], "project() (sympy.geometry.point.point static method)": [[74, "sympy.geometry.point.Point.project"]], "rotate() (sympy.geometry.point.point2d method)": [[74, "sympy.geometry.point.Point2D.rotate"]], "scale() (sympy.geometry.point.point2d method)": [[74, "sympy.geometry.point.Point2D.scale"]], "scale() (sympy.geometry.point.point3d method)": [[74, "sympy.geometry.point.Point3D.scale"]], "sympy.geometry.point": [[74, "module-sympy.geometry.point"]], "taxicab_distance() (sympy.geometry.point.point method)": [[74, "sympy.geometry.point.Point.taxicab_distance"]], "transform() (sympy.geometry.point.point2d method)": [[74, "sympy.geometry.point.Point2D.transform"]], "transform() (sympy.geometry.point.point3d method)": [[74, "sympy.geometry.point.Point3D.transform"]], "translate() (sympy.geometry.point.point2d method)": [[74, "sympy.geometry.point.Point2D.translate"]], "translate() (sympy.geometry.point.point3d method)": [[74, "sympy.geometry.point.Point3D.translate"]], "unit (sympy.geometry.point.point property)": [[74, "sympy.geometry.point.Point.unit"]], "x (sympy.geometry.point.point2d property)": [[74, "sympy.geometry.point.Point2D.x"]], "x (sympy.geometry.point.point3d property)": [[74, "sympy.geometry.point.Point3D.x"]], "y (sympy.geometry.point.point2d property)": [[74, "sympy.geometry.point.Point2D.y"]], "y (sympy.geometry.point.point3d property)": [[74, "sympy.geometry.point.Point3D.y"]], "z (sympy.geometry.point.point3d property)": [[74, "sympy.geometry.point.Point3D.z"]], "polygon (class in sympy.geometry.polygon)": [[75, "sympy.geometry.polygon.Polygon"]], "regularpolygon (class in sympy.geometry.polygon)": [[75, "sympy.geometry.polygon.RegularPolygon"]], "triangle (class in sympy.geometry.polygon)": [[75, "sympy.geometry.polygon.Triangle"]], "altitudes (sympy.geometry.polygon.triangle property)": [[75, "sympy.geometry.polygon.Triangle.altitudes"]], "angles (sympy.geometry.polygon.polygon property)": [[75, "sympy.geometry.polygon.Polygon.angles"]], "angles (sympy.geometry.polygon.regularpolygon property)": [[75, "sympy.geometry.polygon.RegularPolygon.angles"]], "apothem (sympy.geometry.polygon.regularpolygon property)": [[75, "sympy.geometry.polygon.RegularPolygon.apothem"]], "arbitrary_point() (sympy.geometry.polygon.polygon method)": [[75, "sympy.geometry.polygon.Polygon.arbitrary_point"]], "area (sympy.geometry.polygon.polygon property)": [[75, "sympy.geometry.polygon.Polygon.area"]], "area (sympy.geometry.polygon.regularpolygon property)": [[75, "sympy.geometry.polygon.RegularPolygon.area"]], "args (sympy.geometry.polygon.regularpolygon property)": [[75, "sympy.geometry.polygon.RegularPolygon.args"]], "bisectors() (sympy.geometry.polygon.polygon method)": [[75, "sympy.geometry.polygon.Polygon.bisectors"]], "bisectors() (sympy.geometry.polygon.triangle method)": [[75, "sympy.geometry.polygon.Triangle.bisectors"]], "bounds (sympy.geometry.polygon.polygon property)": [[75, "sympy.geometry.polygon.Polygon.bounds"]], "center (sympy.geometry.polygon.regularpolygon property)": [[75, "sympy.geometry.polygon.RegularPolygon.center"]], "centroid (sympy.geometry.polygon.polygon property)": [[75, "sympy.geometry.polygon.Polygon.centroid"]], "centroid (sympy.geometry.polygon.regularpolygon property)": [[75, "sympy.geometry.polygon.RegularPolygon.centroid"]], "circumcenter (sympy.geometry.polygon.regularpolygon property)": [[75, "sympy.geometry.polygon.RegularPolygon.circumcenter"]], "circumcenter (sympy.geometry.polygon.triangle property)": [[75, "sympy.geometry.polygon.Triangle.circumcenter"]], "circumcircle (sympy.geometry.polygon.regularpolygon property)": [[75, "sympy.geometry.polygon.RegularPolygon.circumcircle"]], "circumcircle (sympy.geometry.polygon.triangle property)": [[75, "sympy.geometry.polygon.Triangle.circumcircle"]], "circumradius (sympy.geometry.polygon.regularpolygon property)": [[75, "sympy.geometry.polygon.RegularPolygon.circumradius"]], "circumradius (sympy.geometry.polygon.triangle property)": [[75, "sympy.geometry.polygon.Triangle.circumradius"]], "cut_section() (sympy.geometry.polygon.polygon method)": [[75, "sympy.geometry.polygon.Polygon.cut_section"]], "distance() (sympy.geometry.polygon.polygon method)": [[75, "sympy.geometry.polygon.Polygon.distance"]], "encloses_point() (sympy.geometry.polygon.polygon method)": [[75, "sympy.geometry.polygon.Polygon.encloses_point"]], "encloses_point() (sympy.geometry.polygon.regularpolygon method)": [[75, "sympy.geometry.polygon.RegularPolygon.encloses_point"]], "eulerline (sympy.geometry.polygon.triangle property)": [[75, "sympy.geometry.polygon.Triangle.eulerline"]], "excenters (sympy.geometry.polygon.triangle property)": [[75, "sympy.geometry.polygon.Triangle.excenters"]], "exradii (sympy.geometry.polygon.triangle property)": [[75, "sympy.geometry.polygon.Triangle.exradii"]], "exterior_angle (sympy.geometry.polygon.regularpolygon property)": [[75, "sympy.geometry.polygon.RegularPolygon.exterior_angle"]], "first_moment_of_area() (sympy.geometry.polygon.polygon method)": [[75, "sympy.geometry.polygon.Polygon.first_moment_of_area"]], "incenter (sympy.geometry.polygon.triangle property)": [[75, "sympy.geometry.polygon.Triangle.incenter"]], "incircle (sympy.geometry.polygon.regularpolygon property)": [[75, "sympy.geometry.polygon.RegularPolygon.incircle"]], "incircle (sympy.geometry.polygon.triangle property)": [[75, "sympy.geometry.polygon.Triangle.incircle"]], "inradius (sympy.geometry.polygon.regularpolygon property)": [[75, "sympy.geometry.polygon.RegularPolygon.inradius"]], "inradius (sympy.geometry.polygon.triangle property)": [[75, "sympy.geometry.polygon.Triangle.inradius"]], "interior_angle (sympy.geometry.polygon.regularpolygon property)": [[75, "sympy.geometry.polygon.RegularPolygon.interior_angle"]], "intersection() (sympy.geometry.polygon.polygon method)": [[75, "sympy.geometry.polygon.Polygon.intersection"]], "is_convex() (sympy.geometry.polygon.polygon method)": [[75, "sympy.geometry.polygon.Polygon.is_convex"]], "is_equilateral() (sympy.geometry.polygon.triangle method)": [[75, "sympy.geometry.polygon.Triangle.is_equilateral"]], "is_isosceles() (sympy.geometry.polygon.triangle method)": [[75, "sympy.geometry.polygon.Triangle.is_isosceles"]], "is_right() (sympy.geometry.polygon.triangle method)": [[75, "sympy.geometry.polygon.Triangle.is_right"]], "is_scalene() (sympy.geometry.polygon.triangle method)": [[75, "sympy.geometry.polygon.Triangle.is_scalene"]], "is_similar() (sympy.geometry.polygon.triangle method)": [[75, "sympy.geometry.polygon.Triangle.is_similar"]], "length (sympy.geometry.polygon.regularpolygon property)": [[75, "sympy.geometry.polygon.RegularPolygon.length"]], "medial (sympy.geometry.polygon.triangle property)": [[75, "sympy.geometry.polygon.Triangle.medial"]], "medians (sympy.geometry.polygon.triangle property)": [[75, "sympy.geometry.polygon.Triangle.medians"]], "nine_point_circle (sympy.geometry.polygon.triangle property)": [[75, "sympy.geometry.polygon.Triangle.nine_point_circle"]], "orthocenter (sympy.geometry.polygon.triangle property)": [[75, "sympy.geometry.polygon.Triangle.orthocenter"]], "perimeter (sympy.geometry.polygon.polygon property)": [[75, "sympy.geometry.polygon.Polygon.perimeter"]], "plot_interval() (sympy.geometry.polygon.polygon method)": [[75, "sympy.geometry.polygon.Polygon.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[75, "sympy.geometry.polygon.Polygon.polar_second_moment_of_area"]], "radius (sympy.geometry.polygon.regularpolygon property)": [[75, "sympy.geometry.polygon.RegularPolygon.radius"]], "reflect() (sympy.geometry.polygon.regularpolygon method)": [[75, "sympy.geometry.polygon.RegularPolygon.reflect"]], "rotate() (sympy.geometry.polygon.regularpolygon method)": [[75, "sympy.geometry.polygon.RegularPolygon.rotate"]], "rotation (sympy.geometry.polygon.regularpolygon property)": [[75, "sympy.geometry.polygon.RegularPolygon.rotation"]], "scale() (sympy.geometry.polygon.regularpolygon method)": [[75, "sympy.geometry.polygon.RegularPolygon.scale"]], "second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[75, "sympy.geometry.polygon.Polygon.second_moment_of_area"]], "section_modulus() (sympy.geometry.polygon.polygon method)": [[75, "sympy.geometry.polygon.Polygon.section_modulus"]], "sides (sympy.geometry.polygon.polygon property)": [[75, "sympy.geometry.polygon.Polygon.sides"]], "spin() (sympy.geometry.polygon.regularpolygon method)": [[75, "sympy.geometry.polygon.RegularPolygon.spin"]], "sympy.geometry.polygon": [[75, "module-sympy.geometry.polygon"]], "vertices (sympy.geometry.polygon.polygon property)": [[75, "sympy.geometry.polygon.Polygon.vertices"]], "vertices (sympy.geometry.polygon.regularpolygon property)": [[75, "sympy.geometry.polygon.RegularPolygon.vertices"]], "vertices (sympy.geometry.polygon.triangle property)": [[75, "sympy.geometry.polygon.Triangle.vertices"]], "are_similar() (in module sympy.geometry.util)": [[76, "sympy.geometry.util.are_similar"]], "centroid() (in module sympy.geometry.util)": [[76, "sympy.geometry.util.centroid"]], "convex_hull() (in module sympy.geometry.util)": [[76, "sympy.geometry.util.convex_hull"]], "idiff() (in module sympy.geometry.util)": [[76, "sympy.geometry.util.idiff"]], "intersection() (in module sympy.geometry.util)": [[76, "sympy.geometry.util.intersection"]], "sympy.geometry.util": [[76, "module-sympy.geometry.util"]], "expr_to_holonomic() (in module sympy.holonomic.holonomic)": [[78, "sympy.holonomic.holonomic.expr_to_holonomic"]], "from_hyper() (in module sympy.holonomic.holonomic)": [[78, "sympy.holonomic.holonomic.from_hyper"]], "from_meijerg() (in module sympy.holonomic.holonomic)": [[78, "sympy.holonomic.holonomic.from_meijerg"]], "sympy.holonomic": [[79, "module-sympy.holonomic"]], "_convert_poly_rat_alg() (in module sympy.holonomic.holonomic)": [[80, "sympy.holonomic.holonomic._convert_poly_rat_alg"]], "_create_table() (in module sympy.holonomic.holonomic)": [[80, "sympy.holonomic.holonomic._create_table"]], "composition() (sympy.holonomic.holonomic.holonomicfunction method)": [[81, "sympy.holonomic.holonomic.HolonomicFunction.composition"]], "diff() (sympy.holonomic.holonomic.holonomicfunction method)": [[81, "sympy.holonomic.holonomic.HolonomicFunction.diff"]], "evalf() (sympy.holonomic.holonomic.holonomicfunction method)": [[81, "sympy.holonomic.holonomic.HolonomicFunction.evalf"]], "integrate() (sympy.holonomic.holonomic.holonomicfunction method)": [[81, "sympy.holonomic.holonomic.HolonomicFunction.integrate"]], "series() (sympy.holonomic.holonomic.holonomicfunction method)": [[81, "sympy.holonomic.holonomic.HolonomicFunction.series"]], "to_expr() (sympy.holonomic.holonomic.holonomicfunction method)": [[81, "sympy.holonomic.holonomic.HolonomicFunction.to_expr"]], "to_hyper() (sympy.holonomic.holonomic.holonomicfunction method)": [[81, "sympy.holonomic.holonomic.HolonomicFunction.to_hyper"]], "to_meijerg() (sympy.holonomic.holonomic.holonomicfunction method)": [[81, "sympy.holonomic.holonomic.HolonomicFunction.to_meijerg"]], "to_sequence() (sympy.holonomic.holonomic.holonomicfunction method)": [[81, "sympy.holonomic.holonomic.HolonomicFunction.to_sequence"]], "differentialoperator (class in sympy.holonomic.holonomic)": [[82, "sympy.holonomic.holonomic.DifferentialOperator"]], "differentialoperatoralgebra (class in sympy.holonomic.holonomic)": [[82, "sympy.holonomic.holonomic.DifferentialOperatorAlgebra"]], "differentialoperators() (in module sympy.holonomic.holonomic)": [[82, "sympy.holonomic.holonomic.DifferentialOperators"]], "holonomicfunction (class in sympy.holonomic.holonomic)": [[82, "sympy.holonomic.holonomic.HolonomicFunction"]], "is_singular() (sympy.holonomic.holonomic.differentialoperator method)": [[82, "sympy.holonomic.holonomic.DifferentialOperator.is_singular"]], "_coeffexpvalueerror": [[84, "sympy.integrals.meijerint._CoeffExpValueError"]], "_check_antecedents() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._check_antecedents"]], "_check_antecedents_1() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._check_antecedents_1"]], "_check_antecedents_inversion() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._check_antecedents_inversion"]], "_condsimp() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._condsimp"]], "_create_lookup_table() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._create_lookup_table"]], "_dummy() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._dummy"]], "_dummy_() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._dummy_"]], "_eval_cond() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._eval_cond"]], "_exponents() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._exponents"]], "_find_splitting_points() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._find_splitting_points"]], "_flip_g() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._flip_g"]], "_functions() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._functions"]], "_get_coeff_exp() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._get_coeff_exp"]], "_guess_expansion() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._guess_expansion"]], "_inflate_fox_h() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._inflate_fox_h"]], "_inflate_g() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._inflate_g"]], "_int0oo() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._int0oo"]], "_int0oo_1() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._int0oo_1"]], "_int_inversion() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._int_inversion"]], "_is_analytic() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._is_analytic"]], "_meijerint_definite_2() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._meijerint_definite_2"]], "_meijerint_definite_3() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._meijerint_definite_3"]], "_meijerint_definite_4() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._meijerint_definite_4"]], "_meijerint_indefinite_1() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._meijerint_indefinite_1"]], "_mul_args() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._mul_args"]], "_mul_as_two_parts() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._mul_as_two_parts"]], "_my_principal_branch() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._my_principal_branch"]], "_mytype() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._mytype"]], "_rewrite1() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._rewrite1"]], "_rewrite2() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._rewrite2"]], "_rewrite_inversion() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._rewrite_inversion"]], "_rewrite_saxena() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._rewrite_saxena"]], "_rewrite_saxena_1() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._rewrite_saxena_1"]], "_rewrite_single() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._rewrite_single"]], "_split_mul() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint._split_mul"]], "meijerint_definite() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint.meijerint_definite"]], "meijerint_indefinite() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint.meijerint_indefinite"]], "meijerint_inversion() (in module sympy.integrals.meijerint)": [[84, "sympy.integrals.meijerint.meijerint_inversion"]], "sympy.integrals.meijerint": [[84, "module-sympy.integrals.meijerint"]], "sympy.integrals.meijerint_doc": [[84, "module-sympy.integrals.meijerint_doc"]], "cosinetransform (class in sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.CosineTransform"]], "exprwithlimits (class in sympy.concrete.expr_with_limits)": [[86, "sympy.concrete.expr_with_limits.ExprWithLimits"]], "fouriertransform (class in sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.FourierTransform"]], "hankeltransform (class in sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.HankelTransform"]], "integral (class in sympy.integrals.integrals)": [[86, "sympy.integrals.integrals.Integral"]], "integral.is_commutative (in module sympy.integrals.integrals)": [[86, "sympy.integrals.integrals.Integral.is_commutative"]], "integraltransform (class in sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.IntegralTransform"]], "integraltransformerror": [[86, "sympy.integrals.transforms.IntegralTransformError"]], "inversecosinetransform (class in sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.InverseCosineTransform"]], "inversefouriertransform (class in sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.InverseFourierTransform"]], "inversehankeltransform (class in sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.InverseHankelTransform"]], "inverselaplacetransform (class in sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.InverseLaplaceTransform"]], "inversemellintransform (class in sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.InverseMellinTransform"]], "inversesinetransform (class in sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.InverseSineTransform"]], "laplacetransform (class in sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.LaplaceTransform"]], "mellintransform (class in sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.MellinTransform"]], "nonelementaryintegral (class in sympy.integrals.risch)": [[86, "sympy.integrals.risch.NonElementaryIntegral"]], "sinetransform (class in sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.SineTransform"]], "_fast_inverse_laplace() (in module sympy.integrals.transforms)": [[86, "sympy.integrals.transforms._fast_inverse_laplace"]], "_fourier_transform() (in module sympy.integrals.transforms)": [[86, "sympy.integrals.transforms._fourier_transform"]], "as_sum() (sympy.integrals.integrals.integral method)": [[86, "sympy.integrals.integrals.Integral.as_sum"]], "bound_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[86, "sympy.concrete.expr_with_limits.ExprWithLimits.bound_symbols"]], "components() (in module sympy.integrals.heurisch)": [[86, "sympy.integrals.heurisch.components"]], "cosine_transform() (in module sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.cosine_transform"]], "deltaintegrate() (in module sympy.integrals.deltafunctions)": [[86, "sympy.integrals.deltafunctions.deltaintegrate"]], "doit() (sympy.integrals.integrals.integral method)": [[86, "sympy.integrals.integrals.Integral.doit"]], "doit() (sympy.integrals.transforms.integraltransform method)": [[86, "sympy.integrals.transforms.IntegralTransform.doit"]], "fourier_transform() (in module sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.fourier_transform"]], "free_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[86, "sympy.concrete.expr_with_limits.ExprWithLimits.free_symbols"]], "free_symbols (sympy.integrals.integrals.integral property)": [[86, "sympy.integrals.integrals.Integral.free_symbols"]], "function (sympy.concrete.expr_with_limits.exprwithlimits property)": [[86, "sympy.concrete.expr_with_limits.ExprWithLimits.function"]], "function (sympy.integrals.transforms.integraltransform property)": [[86, "sympy.integrals.transforms.IntegralTransform.function"]], "function_variable (sympy.integrals.transforms.integraltransform property)": [[86, "sympy.integrals.transforms.IntegralTransform.function_variable"]], "gauss_chebyshev_t() (in module sympy.integrals.quadrature)": [[86, "sympy.integrals.quadrature.gauss_chebyshev_t"]], "gauss_chebyshev_u() (in module sympy.integrals.quadrature)": [[86, "sympy.integrals.quadrature.gauss_chebyshev_u"]], "gauss_gen_laguerre() (in module sympy.integrals.quadrature)": [[86, "sympy.integrals.quadrature.gauss_gen_laguerre"]], "gauss_hermite() (in module sympy.integrals.quadrature)": [[86, "sympy.integrals.quadrature.gauss_hermite"]], "gauss_jacobi() (in module sympy.integrals.quadrature)": [[86, "sympy.integrals.quadrature.gauss_jacobi"]], "gauss_laguerre() (in module sympy.integrals.quadrature)": [[86, "sympy.integrals.quadrature.gauss_laguerre"]], "gauss_legendre() (in module sympy.integrals.quadrature)": [[86, "sympy.integrals.quadrature.gauss_legendre"]], "gauss_lobatto() (in module sympy.integrals.quadrature)": [[86, "sympy.integrals.quadrature.gauss_lobatto"]], "hankel_transform() (in module sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.hankel_transform"]], "has_finite_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[86, "sympy.concrete.expr_with_limits.ExprWithLimits.has_finite_limits"]], "has_reversed_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[86, "sympy.concrete.expr_with_limits.ExprWithLimits.has_reversed_limits"]], "heurisch() (in module sympy.integrals.heurisch)": [[86, "sympy.integrals.heurisch.heurisch"]], "integral_steps() (in module sympy.integrals.manualintegrate)": [[86, "sympy.integrals.manualintegrate.integral_steps"]], "integrate() (in module sympy.integrals.integrals)": [[86, "sympy.integrals.integrals.integrate"]], "inverse_cosine_transform() (in module sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.inverse_cosine_transform"]], "inverse_fourier_transform() (in module sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.inverse_fourier_transform"]], "inverse_hankel_transform() (in module sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.inverse_hankel_transform"]], "inverse_laplace_transform() (in module sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.inverse_laplace_transform"]], "inverse_mellin_transform() (in module sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.inverse_mellin_transform"]], "inverse_sine_transform() (in module sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.inverse_sine_transform"]], "is_number (sympy.concrete.expr_with_limits.exprwithlimits property)": [[86, "sympy.concrete.expr_with_limits.ExprWithLimits.is_number"]], "laplace_transform() (in module sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.laplace_transform"]], "limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[86, "sympy.concrete.expr_with_limits.ExprWithLimits.limits"]], "line_integrate() (in module sympy.integrals.integrals)": [[86, "sympy.integrals.integrals.line_integrate"]], "manualintegrate() (in module sympy.integrals.manualintegrate)": [[86, "sympy.integrals.manualintegrate.manualintegrate"]], "mellin_transform() (in module sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.mellin_transform"]], "polytope_integrate() (in module sympy.integrals.intpoly)": [[86, "sympy.integrals.intpoly.polytope_integrate"]], "principal_value() (sympy.integrals.integrals.integral method)": [[86, "sympy.integrals.integrals.Integral.principal_value"]], "ratint() (in module sympy.integrals.rationaltools)": [[86, "sympy.integrals.rationaltools.ratint"]], "ratint_logpart() (in module sympy.integrals.rationaltools)": [[86, "sympy.integrals.rationaltools.ratint_logpart"]], "ratint_ratpart() (in module sympy.integrals.rationaltools)": [[86, "sympy.integrals.rationaltools.ratint_ratpart"]], "risch_integrate() (in module sympy.integrals.risch)": [[86, "sympy.integrals.risch.risch_integrate"]], "sine_transform() (in module sympy.integrals.transforms)": [[86, "sympy.integrals.transforms.sine_transform"]], "singularityintegrate() (in module sympy.integrals.singularityfunctions)": [[86, "sympy.integrals.singularityfunctions.singularityintegrate"]], "sympy.integrals": [[86, "module-sympy.integrals"]], "sympy.integrals.intpoly": [[86, "module-sympy.integrals.intpoly"]], "sympy.integrals.transforms": [[86, "module-sympy.integrals.transforms"]], "transform() (sympy.integrals.integrals.integral method)": [[86, "sympy.integrals.integrals.Integral.transform"]], "transform_variable (sympy.integrals.transforms.integraltransform property)": [[86, "sympy.integrals.transforms.IntegralTransform.transform_variable"]], "trigintegrate() (in module sympy.integrals.trigonometry)": [[86, "sympy.integrals.trigonometry.trigintegrate"]], "variables (sympy.concrete.expr_with_limits.exprwithlimits property)": [[86, "sympy.concrete.expr_with_limits.ExprWithLimits.variables"]], "enable_automatic_int_sympification() (in module sympy.interactive.session)": [[87, "sympy.interactive.session.enable_automatic_int_sympification"]], "enable_automatic_symbols() (in module sympy.interactive.session)": [[87, "sympy.interactive.session.enable_automatic_symbols"]], "init_ipython_session() (in module sympy.interactive.session)": [[87, "sympy.interactive.session.init_ipython_session"]], "init_printing() (in module sympy.interactive.printing)": [[87, "sympy.interactive.printing.init_printing"]], "init_python_session() (in module sympy.interactive.session)": [[87, "sympy.interactive.session.init_python_session"]], "init_session() (in module sympy.interactive.session)": [[87, "sympy.interactive.session.init_session"]], "int_to_integer() (in module sympy.interactive.session)": [[87, "sympy.interactive.session.int_to_Integer"]], "sympy.interactive": [[87, "module-sympy.interactive"]], "sympy.interactive.printing": [[87, "module-sympy.interactive.printing"]], "sympy.interactive.session": [[87, "module-sympy.interactive.session"]], "cartanmatrix() (in module sympy.liealgebras.cartan_matrix)": [[88, "sympy.liealgebras.cartan_matrix.CartanMatrix"]], "cartantype_generator (class in sympy.liealgebras.cartan_type)": [[88, "sympy.liealgebras.cartan_type.CartanType_generator"]], "dynkindiagram() (in module sympy.liealgebras.dynkin_diagram)": [[88, "sympy.liealgebras.dynkin_diagram.DynkinDiagram"]], "rootsystem (class in sympy.liealgebras.root_system)": [[88, "sympy.liealgebras.root_system.RootSystem"]], "standard_cartan (class in sympy.liealgebras.cartan_type)": [[88, "sympy.liealgebras.cartan_type.Standard_Cartan"]], "typea (class in sympy.liealgebras.type_a)": [[88, "sympy.liealgebras.type_a.TypeA"]], "typeb (class in sympy.liealgebras.type_b)": [[88, "sympy.liealgebras.type_b.TypeB"]], "typec (class in sympy.liealgebras.type_c)": [[88, "sympy.liealgebras.type_c.TypeC"]], "typed (class in sympy.liealgebras.type_d)": [[88, "sympy.liealgebras.type_d.TypeD"]], "typee (class in sympy.liealgebras.type_e)": [[88, "sympy.liealgebras.type_e.TypeE"]], "typef (class in sympy.liealgebras.type_f)": [[88, "sympy.liealgebras.type_f.TypeF"]], "typeg (class in sympy.liealgebras.type_g)": [[88, "sympy.liealgebras.type_g.TypeG"]], "weylgroup (class in sympy.liealgebras.weyl_group)": [[88, "sympy.liealgebras.weyl_group.WeylGroup"]], "add_as_roots() (sympy.liealgebras.root_system.rootsystem method)": [[88, "sympy.liealgebras.root_system.RootSystem.add_as_roots"]], "add_simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[88, "sympy.liealgebras.root_system.RootSystem.add_simple_roots"]], "all_roots() (sympy.liealgebras.root_system.rootsystem method)": [[88, "sympy.liealgebras.root_system.RootSystem.all_roots"]], "basic_root() (sympy.liealgebras.type_a.typea method)": [[88, "sympy.liealgebras.type_a.TypeA.basic_root"]], "basic_root() (sympy.liealgebras.type_b.typeb method)": [[88, "sympy.liealgebras.type_b.TypeB.basic_root"]], "basic_root() (sympy.liealgebras.type_c.typec method)": [[88, "sympy.liealgebras.type_c.TypeC.basic_root"]], "basic_root() (sympy.liealgebras.type_d.typed method)": [[88, "sympy.liealgebras.type_d.TypeD.basic_root"]], "basic_root() (sympy.liealgebras.type_e.typee method)": [[88, "sympy.liealgebras.type_e.TypeE.basic_root"]], "basic_root() (sympy.liealgebras.type_f.typef method)": [[88, "sympy.liealgebras.type_f.TypeF.basic_root"]], "basis() (sympy.liealgebras.type_a.typea method)": [[88, "sympy.liealgebras.type_a.TypeA.basis"]], "basis() (sympy.liealgebras.type_b.typeb method)": [[88, "sympy.liealgebras.type_b.TypeB.basis"]], "basis() (sympy.liealgebras.type_c.typec method)": [[88, "sympy.liealgebras.type_c.TypeC.basis"]], "basis() (sympy.liealgebras.type_d.typed method)": [[88, "sympy.liealgebras.type_d.TypeD.basis"]], "basis() (sympy.liealgebras.type_e.typee method)": [[88, "sympy.liealgebras.type_e.TypeE.basis"]], "basis() (sympy.liealgebras.type_f.typef method)": [[88, "sympy.liealgebras.type_f.TypeF.basis"]], "basis() (sympy.liealgebras.type_g.typeg method)": [[88, "sympy.liealgebras.type_g.TypeG.basis"]], "cartan_matrix() (sympy.liealgebras.root_system.rootsystem method)": [[88, "sympy.liealgebras.root_system.RootSystem.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_a.typea method)": [[88, "sympy.liealgebras.type_a.TypeA.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_b.typeb method)": [[88, "sympy.liealgebras.type_b.TypeB.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_c.typec method)": [[88, "sympy.liealgebras.type_c.TypeC.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_d.typed method)": [[88, "sympy.liealgebras.type_d.TypeD.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_e.typee method)": [[88, "sympy.liealgebras.type_e.TypeE.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_f.typef method)": [[88, "sympy.liealgebras.type_f.TypeF.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_g.typeg method)": [[88, "sympy.liealgebras.type_g.TypeG.cartan_matrix"]], "coxeter_diagram() (sympy.liealgebras.weyl_group.weylgroup method)": [[88, "sympy.liealgebras.weyl_group.WeylGroup.coxeter_diagram"]], "delete_doubles() (sympy.liealgebras.weyl_group.weylgroup method)": [[88, "sympy.liealgebras.weyl_group.WeylGroup.delete_doubles"]], "dimension() (sympy.liealgebras.type_a.typea method)": [[88, "sympy.liealgebras.type_a.TypeA.dimension"]], "dimension() (sympy.liealgebras.type_b.typeb method)": [[88, "sympy.liealgebras.type_b.TypeB.dimension"]], "dimension() (sympy.liealgebras.type_c.typec method)": [[88, "sympy.liealgebras.type_c.TypeC.dimension"]], "dimension() (sympy.liealgebras.type_d.typed method)": [[88, "sympy.liealgebras.type_d.TypeD.dimension"]], "dimension() (sympy.liealgebras.type_e.typee method)": [[88, "sympy.liealgebras.type_e.TypeE.dimension"]], "dimension() (sympy.liealgebras.type_f.typef method)": [[88, "sympy.liealgebras.type_f.TypeF.dimension"]], "dimension() (sympy.liealgebras.type_g.typeg method)": [[88, "sympy.liealgebras.type_g.TypeG.dimension"]], "dynkin_diagram() (sympy.liealgebras.root_system.rootsystem method)": [[88, "sympy.liealgebras.root_system.RootSystem.dynkin_diagram"]], "element_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[88, "sympy.liealgebras.weyl_group.WeylGroup.element_order"]], "generators() (sympy.liealgebras.weyl_group.weylgroup method)": [[88, "sympy.liealgebras.weyl_group.WeylGroup.generators"]], "group_name() (sympy.liealgebras.weyl_group.weylgroup method)": [[88, "sympy.liealgebras.weyl_group.WeylGroup.group_name"]], "group_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[88, "sympy.liealgebras.weyl_group.WeylGroup.group_order"]], "highest_root() (sympy.liealgebras.type_a.typea method)": [[88, "sympy.liealgebras.type_a.TypeA.highest_root"]], "lie_algebra() (sympy.liealgebras.type_a.typea method)": [[88, "sympy.liealgebras.type_a.TypeA.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_b.typeb method)": [[88, "sympy.liealgebras.type_b.TypeB.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_c.typec method)": [[88, "sympy.liealgebras.type_c.TypeC.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_d.typed method)": [[88, "sympy.liealgebras.type_d.TypeD.lie_algebra"]], "matrix_form() (sympy.liealgebras.weyl_group.weylgroup method)": [[88, "sympy.liealgebras.weyl_group.WeylGroup.matrix_form"]], "positive_roots() (sympy.liealgebras.type_a.typea method)": [[88, "sympy.liealgebras.type_a.TypeA.positive_roots"]], "positive_roots() (sympy.liealgebras.type_b.typeb method)": [[88, "sympy.liealgebras.type_b.TypeB.positive_roots"]], "positive_roots() (sympy.liealgebras.type_c.typec method)": [[88, "sympy.liealgebras.type_c.TypeC.positive_roots"]], "positive_roots() (sympy.liealgebras.type_d.typed method)": [[88, "sympy.liealgebras.type_d.TypeD.positive_roots"]], "positive_roots() (sympy.liealgebras.type_e.typee method)": [[88, "sympy.liealgebras.type_e.TypeE.positive_roots"]], "positive_roots() (sympy.liealgebras.type_f.typef method)": [[88, "sympy.liealgebras.type_f.TypeF.positive_roots"]], "positive_roots() (sympy.liealgebras.type_g.typeg method)": [[88, "sympy.liealgebras.type_g.TypeG.positive_roots"]], "rank() (sympy.liealgebras.cartan_type.standard_cartan method)": [[88, "sympy.liealgebras.cartan_type.Standard_Cartan.rank"]], "root_space() (sympy.liealgebras.root_system.rootsystem method)": [[88, "sympy.liealgebras.root_system.RootSystem.root_space"]], "roots() (sympy.liealgebras.type_a.typea method)": [[88, "sympy.liealgebras.type_a.TypeA.roots"]], "roots() (sympy.liealgebras.type_b.typeb method)": [[88, "sympy.liealgebras.type_b.TypeB.roots"]], "roots() (sympy.liealgebras.type_c.typec method)": [[88, "sympy.liealgebras.type_c.TypeC.roots"]], "roots() (sympy.liealgebras.type_d.typed method)": [[88, "sympy.liealgebras.type_d.TypeD.roots"]], "roots() (sympy.liealgebras.type_e.typee method)": [[88, "sympy.liealgebras.type_e.TypeE.roots"]], "roots() (sympy.liealgebras.type_f.typef method)": [[88, "sympy.liealgebras.type_f.TypeF.roots"]], "roots() (sympy.liealgebras.type_g.typeg method)": [[88, "sympy.liealgebras.type_g.TypeG.roots"]], "series() (sympy.liealgebras.cartan_type.standard_cartan method)": [[88, "sympy.liealgebras.cartan_type.Standard_Cartan.series"]], "simple_root() (sympy.liealgebras.type_a.typea method)": [[88, "sympy.liealgebras.type_a.TypeA.simple_root"]], "simple_root() (sympy.liealgebras.type_b.typeb method)": [[88, "sympy.liealgebras.type_b.TypeB.simple_root"]], "simple_root() (sympy.liealgebras.type_c.typec method)": [[88, "sympy.liealgebras.type_c.TypeC.simple_root"]], "simple_root() (sympy.liealgebras.type_d.typed method)": [[88, "sympy.liealgebras.type_d.TypeD.simple_root"]], "simple_root() (sympy.liealgebras.type_e.typee method)": [[88, "sympy.liealgebras.type_e.TypeE.simple_root"]], "simple_root() (sympy.liealgebras.type_f.typef method)": [[88, "sympy.liealgebras.type_f.TypeF.simple_root"]], "simple_root() (sympy.liealgebras.type_g.typeg method)": [[88, "sympy.liealgebras.type_g.TypeG.simple_root"]], "simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[88, "sympy.liealgebras.root_system.RootSystem.simple_roots"]], "sympy.liealgebras": [[88, "module-sympy.liealgebras"]], "anfform() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.ANFform"]], "and (class in sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.And"]], "boolean (class in sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.Boolean"]], "booleanfalse (class in sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.BooleanFalse"]], "booleantrue (class in sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.BooleanTrue"]], "equivalent (class in sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.Equivalent"]], "exclusive (class in sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.Exclusive"]], "ite (class in sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.ITE"]], "implies (class in sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.Implies"]], "nand (class in sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.Nand"]], "nor (class in sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.Nor"]], "not (class in sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.Not"]], "or (class in sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.Or"]], "posform() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.POSform"]], "sopform() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.SOPform"]], "xnor (class in sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.Xnor"]], "xor (class in sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.Xor"]], "anf_coeffs() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.anf_coeffs"]], "as_set() (sympy.logic.boolalg.boolean method)": [[89, "sympy.logic.boolalg.Boolean.as_set"]], "as_set() (sympy.logic.boolalg.booleanfalse method)": [[89, "sympy.logic.boolalg.BooleanFalse.as_set"]], "as_set() (sympy.logic.boolalg.booleantrue method)": [[89, "sympy.logic.boolalg.BooleanTrue.as_set"]], "bool_map() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.bool_map"]], "bool_maxterm() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.bool_maxterm"]], "bool_minterm() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.bool_minterm"]], "bool_monomial() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.bool_monomial"]], "distribute_and_over_or() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.distribute_and_over_or"]], "distribute_or_over_and() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.distribute_or_over_and"]], "distribute_xor_over_and() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.distribute_xor_over_and"]], "eliminate_implications() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.eliminate_implications"]], "equals() (sympy.logic.boolalg.boolean method)": [[89, "sympy.logic.boolalg.Boolean.equals"]], "gateinputcount() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.gateinputcount"]], "integer_to_term() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.integer_to_term"]], "is_anf() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.is_anf"]], "is_cnf() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.is_cnf"]], "is_dnf() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.is_dnf"]], "is_nnf() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.is_nnf"]], "satisfiable() (in module sympy.logic.inference)": [[89, "sympy.logic.inference.satisfiable"]], "simplify_logic() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.simplify_logic"]], "sympy.logic": [[89, "module-sympy.logic"]], "sympy.logic.inference": [[89, "module-sympy.logic.inference"]], "term_to_integer() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.term_to_integer"]], "to_anf() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.to_anf"]], "to_cnf() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.to_cnf"]], "to_dnf() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.to_dnf"]], "to_int_repr() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.to_int_repr"]], "to_nnf() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.to_nnf"]], "truth_table() (in module sympy.logic.boolalg)": [[89, "sympy.logic.boolalg.truth_table"]], "c (sympy.matrices.common.matrixcommon property)": [[90, "sympy.matrices.common.MatrixCommon.C"]], "h (sympy.matrices.common.matrixcommon property)": [[90, "sympy.matrices.common.MatrixCommon.H"]], "matrixcommon (class in sympy.matrices.common)": [[90, "sympy.matrices.common.MatrixCommon"]], "matrixkind (class in sympy.matrices.common)": [[90, "sympy.matrices.common.MatrixKind"]], "t (sympy.matrices.common.matrixcommon property)": [[90, "sympy.matrices.common.MatrixCommon.T"]], "__abs__() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.__abs__"]], "__add__() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.__add__"]], "__getitem__() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.__getitem__"]], "__len__() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.__len__"]], "__mul__() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.__mul__"]], "__pow__() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.__pow__"]], "__weakref__ (sympy.matrices.common.matrixcommon attribute)": [[90, "sympy.matrices.common.MatrixCommon.__weakref__"]], "adjoint() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.adjoint"]], "applyfunc() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.applyfunc"]], "as_real_imag() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.as_real_imag"]], "atoms() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.atoms"]], "col() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.col"]], "col_del() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.col_del"]], "col_insert() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.col_insert"]], "col_join() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.col_join"]], "companion() (sympy.matrices.common.matrixcommon class method)": [[90, "sympy.matrices.common.MatrixCommon.companion"]], "conjugate() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.conjugate"]], "diag() (sympy.matrices.common.matrixcommon class method)": [[90, "sympy.matrices.common.MatrixCommon.diag"]], "diagonal() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.diagonal"]], "evalf() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.evalf"]], "expand() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.expand"]], "extract() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.extract"]], "eye() (sympy.matrices.common.matrixcommon class method)": [[90, "sympy.matrices.common.MatrixCommon.eye"]], "free_symbols (sympy.matrices.common.matrixcommon property)": [[90, "sympy.matrices.common.MatrixCommon.free_symbols"]], "get_diag_blocks() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.get_diag_blocks"]], "has() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.has"]], "hstack() (sympy.matrices.common.matrixcommon class method)": [[90, "sympy.matrices.common.MatrixCommon.hstack"]], "is_anti_symmetric() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.is_anti_symmetric"]], "is_diagonal() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.is_diagonal"]], "is_hermitian (sympy.matrices.common.matrixcommon property)": [[90, "sympy.matrices.common.MatrixCommon.is_hermitian"]], "is_lower (sympy.matrices.common.matrixcommon property)": [[90, "sympy.matrices.common.MatrixCommon.is_lower"]], "is_lower_hessenberg (sympy.matrices.common.matrixcommon property)": [[90, "sympy.matrices.common.MatrixCommon.is_lower_hessenberg"]], "is_square (sympy.matrices.common.matrixcommon property)": [[90, "sympy.matrices.common.MatrixCommon.is_square"]], "is_strongly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[90, "sympy.matrices.common.MatrixCommon.is_strongly_diagonally_dominant"]], "is_symbolic() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.is_symbolic"]], "is_symmetric() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.is_symmetric"]], "is_upper (sympy.matrices.common.matrixcommon property)": [[90, "sympy.matrices.common.MatrixCommon.is_upper"]], "is_upper_hessenberg (sympy.matrices.common.matrixcommon property)": [[90, "sympy.matrices.common.MatrixCommon.is_upper_hessenberg"]], "is_weakly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[90, "sympy.matrices.common.MatrixCommon.is_weakly_diagonally_dominant"]], "is_zero_matrix (sympy.matrices.common.matrixcommon property)": [[90, "sympy.matrices.common.MatrixCommon.is_zero_matrix"]], "jordan_block() (sympy.matrices.common.matrixcommon class method)": [[90, "sympy.matrices.common.MatrixCommon.jordan_block"]], "lower_triangular() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.lower_triangular"]], "multiply() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.multiply"]], "multiply_elementwise() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.multiply_elementwise"]], "n() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.n"]], "ones() (sympy.matrices.common.matrixcommon class method)": [[90, "sympy.matrices.common.MatrixCommon.ones"]], "permute() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.permute"]], "permute_cols() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.permute_cols"]], "permute_rows() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.permute_rows"]], "pow() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.pow"]], "refine() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.refine"]], "replace() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.replace"]], "reshape() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.reshape"]], "rmultiply() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.rmultiply"]], "rot90() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.rot90"]], "row() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.row"]], "row_del() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.row_del"]], "row_insert() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.row_insert"]], "row_join() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.row_join"]], "shape (sympy.matrices.common.matrixcommon property)": [[90, "sympy.matrices.common.MatrixCommon.shape"]], "simplify() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.simplify"]], "subs() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.subs"]], "sympy.matrices.common": [[90, "module-sympy.matrices.common"]], "todod() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.todod"]], "todok() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.todok"]], "tolist() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.tolist"]], "trace() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.trace"]], "transpose() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.transpose"]], "upper_triangular() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.upper_triangular"]], "values() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.values"]], "vec() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.vec"]], "vech() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.vech"]], "vstack() (sympy.matrices.common.matrixcommon class method)": [[90, "sympy.matrices.common.MatrixCommon.vstack"]], "wilkinson() (sympy.matrices.common.matrixcommon class method)": [[90, "sympy.matrices.common.MatrixCommon.wilkinson"]], "xreplace() (sympy.matrices.common.matrixcommon method)": [[90, "sympy.matrices.common.MatrixCommon.xreplace"]], "zeros() (sympy.matrices.common.matrixcommon class method)": [[90, "sympy.matrices.common.MatrixCommon.zeros"]], "densematrix (class in sympy.matrices.dense)": [[91, "sympy.matrices.dense.DenseMatrix"]], "ldldecomposition() (sympy.matrices.dense.densematrix method)": [[91, "sympy.matrices.dense.DenseMatrix.LDLdecomposition"]], "matrix (in module sympy.matrices.dense)": [[91, "sympy.matrices.dense.Matrix"]], "mutabledensematrix (class in sympy.matrices.dense)": [[91, "sympy.matrices.dense.MutableDenseMatrix"]], "as_immutable() (sympy.matrices.dense.densematrix method)": [[91, "sympy.matrices.dense.DenseMatrix.as_immutable"]], "as_mutable() (sympy.matrices.dense.densematrix method)": [[91, "sympy.matrices.dense.DenseMatrix.as_mutable"]], "cholesky() (sympy.matrices.dense.densematrix method)": [[91, "sympy.matrices.dense.DenseMatrix.cholesky"]], "lower_triangular_solve() (sympy.matrices.dense.densematrix method)": [[91, "sympy.matrices.dense.DenseMatrix.lower_triangular_solve"]], "simplify() (sympy.matrices.dense.mutabledensematrix method)": [[91, "sympy.matrices.dense.MutableDenseMatrix.simplify"]], "upper_triangular_solve() (sympy.matrices.dense.densematrix method)": [[91, "sympy.matrices.dense.DenseMatrix.upper_triangular_solve"]], "blockdiagmatrix (class in sympy.matrices.expressions.blockmatrix)": [[92, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix"]], "blockmatrix (class in sympy.matrices.expressions.blockmatrix)": [[92, "sympy.matrices.expressions.blockmatrix.BlockMatrix"]], "companionmatrix (class in sympy.matrices.expressions)": [[92, "sympy.matrices.expressions.CompanionMatrix"]], "functionmatrix (class in sympy.matrices.expressions)": [[92, "sympy.matrices.expressions.FunctionMatrix"]], "hadamardpower (class in sympy.matrices.expressions)": [[92, "sympy.matrices.expressions.HadamardPower"]], "hadamardproduct (class in sympy.matrices.expressions)": [[92, "sympy.matrices.expressions.HadamardProduct"]], "identity (class in sympy.matrices.expressions)": [[92, "sympy.matrices.expressions.Identity"]], "inverse (class in sympy.matrices.expressions)": [[92, "sympy.matrices.expressions.Inverse"]], "ldudecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[92, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LDUdecomposition"]], "ludecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[92, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LUdecomposition"]], "matadd (class in sympy.matrices.expressions)": [[92, "sympy.matrices.expressions.MatAdd"]], "matmul (class in sympy.matrices.expressions)": [[92, "sympy.matrices.expressions.MatMul"]], "matpow (class in sympy.matrices.expressions)": [[92, "sympy.matrices.expressions.MatPow"]], "matrixexpr (class in sympy.matrices.expressions)": [[92, "sympy.matrices.expressions.MatrixExpr"]], "matrixpermute (class in sympy.matrices.expressions)": [[92, "sympy.matrices.expressions.MatrixPermute"]], "matrixset (class in sympy.matrices.expressions)": [[92, "sympy.matrices.expressions.MatrixSet"]], "matrixsymbol (class in sympy.matrices.expressions)": [[92, "sympy.matrices.expressions.MatrixSymbol"]], "permutationmatrix (class in sympy.matrices.expressions)": [[92, "sympy.matrices.expressions.PermutationMatrix"]], "t (sympy.matrices.expressions.matrixexpr property)": [[92, "sympy.matrices.expressions.MatrixExpr.T"]], "trace (class in sympy.matrices.expressions)": [[92, "sympy.matrices.expressions.Trace"]], "transpose (class in sympy.matrices.expressions)": [[92, "sympy.matrices.expressions.Transpose"]], "udldecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[92, "sympy.matrices.expressions.blockmatrix.BlockMatrix.UDLdecomposition"]], "zeromatrix (class in sympy.matrices.expressions)": [[92, "sympy.matrices.expressions.ZeroMatrix"]], "as_coeff_mul() (sympy.matrices.expressions.matrixexpr method)": [[92, "sympy.matrices.expressions.MatrixExpr.as_coeff_Mul"]], "as_explicit() (sympy.matrices.expressions.matrixexpr method)": [[92, "sympy.matrices.expressions.MatrixExpr.as_explicit"]], "as_mutable() (sympy.matrices.expressions.matrixexpr method)": [[92, "sympy.matrices.expressions.MatrixExpr.as_mutable"]], "block_collapse() (in module sympy.matrices.expressions.blockmatrix)": [[92, "sympy.matrices.expressions.blockmatrix.block_collapse"]], "equals() (sympy.matrices.expressions.matrixexpr method)": [[92, "sympy.matrices.expressions.MatrixExpr.equals"]], "from_index_summation() (sympy.matrices.expressions.matrixexpr static method)": [[92, "sympy.matrices.expressions.MatrixExpr.from_index_summation"]], "get_diag_blocks() (sympy.matrices.expressions.blockmatrix.blockdiagmatrix method)": [[92, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.get_diag_blocks"]], "hadamard_product() (in module sympy.matrices.expressions)": [[92, "sympy.matrices.expressions.hadamard_product"]], "schur() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[92, "sympy.matrices.expressions.blockmatrix.BlockMatrix.schur"]], "sympy.matrices.expressions": [[92, "module-sympy.matrices.expressions"]], "sympy.matrices.expressions.blockmatrix": [[92, "module-sympy.matrices.expressions.blockmatrix"]], "transpose() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[92, "sympy.matrices.expressions.blockmatrix.BlockMatrix.transpose"]], "immutabledensematrix (class in sympy.matrices.immutable)": [[93, "sympy.matrices.immutable.ImmutableDenseMatrix"]], "immutablematrix (in module sympy.matrices.immutable)": [[93, "sympy.matrices.immutable.ImmutableMatrix"]], "sympy.matrices.immutable": [[93, "module-sympy.matrices.immutable"]], "sympy.matrices": [[94, "module-sympy.matrices"]], "d (sympy.matrices.matrices.matrixbase property)": [[95, "sympy.matrices.matrices.MatrixBase.D"]], "gramschmidt() (in module sympy.matrices.dense)": [[95, "sympy.matrices.dense.GramSchmidt"]], "ldldecomposition() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.LDLdecomposition"]], "ldlsolve() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.LDLsolve"]], "ludecomposition() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.LUdecomposition"]], "ludecompositionff() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.LUdecompositionFF"]], "ludecomposition_simple() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.LUdecomposition_Simple"]], "lusolve() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.LUsolve"]], "matrixbase (class in sympy.matrices.matrices)": [[95, "sympy.matrices.matrices.MatrixBase"]], "matrixcalculus (class in sympy.matrices.matrices)": [[95, "sympy.matrices.matrices.MatrixCalculus"]], "matrixdeterminant (class in sympy.matrices.matrices)": [[95, "sympy.matrices.matrices.MatrixDeterminant"]], "matrixeigen (class in sympy.matrices.matrices)": [[95, "sympy.matrices.matrices.MatrixEigen"]], "matrixerror (class in sympy.matrices.matrices)": [[95, "sympy.matrices.matrices.MatrixError"]], "matrixreductions (class in sympy.matrices.matrices)": [[95, "sympy.matrices.matrices.MatrixReductions"]], "matrixsubspaces (class in sympy.matrices.matrices)": [[95, "sympy.matrices.matrices.MatrixSubspaces"]], "nonsquarematrixerror (class in sympy.matrices.matrices)": [[95, "sympy.matrices.matrices.NonSquareMatrixError"]], "qrdecomposition() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.QRdecomposition"]], "qrsolve() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.QRsolve"]], "shapeerror (class in sympy.matrices.matrices)": [[95, "sympy.matrices.matrices.ShapeError"]], "a2idx() (in module sympy.matrices.matrices)": [[95, "sympy.matrices.matrices.a2idx"]], "add() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.add"]], "adjugate() (sympy.matrices.matrices.matrixdeterminant method)": [[95, "sympy.matrices.matrices.MatrixDeterminant.adjugate"]], "analytic_func() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.analytic_func"]], "bidiagonal_decomposition() (sympy.matrices.matrices.matrixeigen method)": [[95, "sympy.matrices.matrices.MatrixEigen.bidiagonal_decomposition"]], "bidiagonalize() (sympy.matrices.matrices.matrixeigen method)": [[95, "sympy.matrices.matrices.MatrixEigen.bidiagonalize"]], "casoratian() (in module sympy.matrices.dense)": [[95, "sympy.matrices.dense.casoratian"]], "charpoly() (sympy.matrices.matrices.matrixdeterminant method)": [[95, "sympy.matrices.matrices.MatrixDeterminant.charpoly"]], "cholesky() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.cholesky"]], "cholesky_solve() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.cholesky_solve"]], "cofactor() (sympy.matrices.matrices.matrixdeterminant method)": [[95, "sympy.matrices.matrices.MatrixDeterminant.cofactor"]], "cofactor_matrix() (sympy.matrices.matrices.matrixdeterminant method)": [[95, "sympy.matrices.matrices.MatrixDeterminant.cofactor_matrix"]], "columnspace() (sympy.matrices.matrices.matrixsubspaces method)": [[95, "sympy.matrices.matrices.MatrixSubspaces.columnspace"]], "condition_number() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.condition_number"]], "connected_components() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.connected_components"]], "connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.connected_components_decomposition"]], "copy() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.copy"]], "cross() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.cross"]], "det() (sympy.matrices.matrices.matrixdeterminant method)": [[95, "sympy.matrices.matrices.MatrixDeterminant.det"]], "diag() (in module sympy.matrices.dense)": [[95, "sympy.matrices.dense.diag"]], "diagonal_solve() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.diagonal_solve"]], "diagonalize() (sympy.matrices.matrices.matrixeigen method)": [[95, "sympy.matrices.matrices.MatrixEigen.diagonalize"]], "diff() (sympy.matrices.matrices.matrixcalculus method)": [[95, "sympy.matrices.matrices.MatrixCalculus.diff"]], "dot() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.dot"]], "dual() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.dual"]], "echelon_form() (sympy.matrices.matrices.matrixreductions method)": [[95, "sympy.matrices.matrices.MatrixReductions.echelon_form"]], "eigenvals() (sympy.matrices.matrices.matrixeigen method)": [[95, "sympy.matrices.matrices.MatrixEigen.eigenvals"]], "eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[95, "sympy.matrices.matrices.MatrixEigen.eigenvects"]], "elementary_col_op() (sympy.matrices.matrices.matrixreductions method)": [[95, "sympy.matrices.matrices.MatrixReductions.elementary_col_op"]], "elementary_row_op() (sympy.matrices.matrices.matrixreductions method)": [[95, "sympy.matrices.matrices.MatrixReductions.elementary_row_op"]], "exp() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.exp"]], "eye() (in module sympy.matrices.dense)": [[95, "sympy.matrices.dense.eye"]], "gauss_jordan_solve() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.gauss_jordan_solve"]], "hessian() (in module sympy.matrices.dense)": [[95, "sympy.matrices.dense.hessian"]], "integrate() (sympy.matrices.matrices.matrixcalculus method)": [[95, "sympy.matrices.matrices.MatrixCalculus.integrate"]], "inv() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.inv"]], "inv_mod() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.inv_mod"]], "inverse_adj() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.inverse_ADJ"]], "inverse_block() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.inverse_BLOCK"]], "inverse_ch() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.inverse_CH"]], "inverse_ge() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.inverse_GE"]], "inverse_ldl() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.inverse_LDL"]], "inverse_lu() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.inverse_LU"]], "inverse_qr() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.inverse_QR"]], "irregular() (sympy.matrices.matrices.matrixbase class method)": [[95, "sympy.matrices.matrices.MatrixBase.irregular"]], "is_diagonalizable() (sympy.matrices.matrices.matrixeigen method)": [[95, "sympy.matrices.matrices.MatrixEigen.is_diagonalizable"]], "is_echelon (sympy.matrices.matrices.matrixreductions property)": [[95, "sympy.matrices.matrices.MatrixReductions.is_echelon"]], "is_indefinite (sympy.matrices.matrices.matrixeigen property)": [[95, "sympy.matrices.matrices.MatrixEigen.is_indefinite"]], "is_negative_definite (sympy.matrices.matrices.matrixeigen property)": [[95, "sympy.matrices.matrices.MatrixEigen.is_negative_definite"]], "is_negative_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[95, "sympy.matrices.matrices.MatrixEigen.is_negative_semidefinite"]], "is_nilpotent() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.is_nilpotent"]], "is_positive_definite (sympy.matrices.matrices.matrixeigen property)": [[95, "sympy.matrices.matrices.MatrixEigen.is_positive_definite"]], "is_positive_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[95, "sympy.matrices.matrices.MatrixEigen.is_positive_semidefinite"]], "jacobian() (sympy.matrices.matrices.matrixcalculus method)": [[95, "sympy.matrices.matrices.MatrixCalculus.jacobian"]], "jordan_cell() (in module sympy.matrices.dense)": [[95, "sympy.matrices.dense.jordan_cell"]], "jordan_form() (sympy.matrices.matrices.matrixeigen method)": [[95, "sympy.matrices.matrices.MatrixEigen.jordan_form"]], "key2bounds() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.key2bounds"]], "key2ij() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.key2ij"]], "left_eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[95, "sympy.matrices.matrices.MatrixEigen.left_eigenvects"]], "limit() (sympy.matrices.matrices.matrixcalculus method)": [[95, "sympy.matrices.matrices.MatrixCalculus.limit"]], "list2numpy() (in module sympy.matrices.dense)": [[95, "sympy.matrices.dense.list2numpy"]], "log() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.log"]], "lower_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.lower_triangular_solve"]], "matrix2numpy() (in module sympy.matrices.dense)": [[95, "sympy.matrices.dense.matrix2numpy"]], "matrix_multiply_elementwise() (in module sympy.matrices.dense)": [[95, "sympy.matrices.dense.matrix_multiply_elementwise"]], "minor() (sympy.matrices.matrices.matrixdeterminant method)": [[95, "sympy.matrices.matrices.MatrixDeterminant.minor"]], "minor_submatrix() (sympy.matrices.matrices.matrixdeterminant method)": [[95, "sympy.matrices.matrices.MatrixDeterminant.minor_submatrix"]], "norm() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.norm"]], "normalized() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.normalized"]], "nullspace() (sympy.matrices.matrices.matrixsubspaces method)": [[95, "sympy.matrices.matrices.MatrixSubspaces.nullspace"]], "ones() (in module sympy.matrices.dense)": [[95, "sympy.matrices.dense.ones"]], "orthogonalize() (sympy.matrices.matrices.matrixsubspaces class method)": [[95, "sympy.matrices.matrices.MatrixSubspaces.orthogonalize"]], "per() (sympy.matrices.matrices.matrixdeterminant method)": [[95, "sympy.matrices.matrices.MatrixDeterminant.per"]], "pinv() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.pinv"]], "pinv_solve() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.pinv_solve"]], "print_nonzero() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.print_nonzero"]], "project() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.project"]], "randmatrix() (in module sympy.matrices.dense)": [[95, "sympy.matrices.dense.randMatrix"]], "rank() (sympy.matrices.matrices.matrixreductions method)": [[95, "sympy.matrices.matrices.MatrixReductions.rank"]], "rank_decomposition() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.rank_decomposition"]], "rot_axis1() (in module sympy.matrices.dense)": [[95, "sympy.matrices.dense.rot_axis1"]], "rot_axis2() (in module sympy.matrices.dense)": [[95, "sympy.matrices.dense.rot_axis2"]], "rot_axis3() (in module sympy.matrices.dense)": [[95, "sympy.matrices.dense.rot_axis3"]], "rowspace() (sympy.matrices.matrices.matrixsubspaces method)": [[95, "sympy.matrices.matrices.MatrixSubspaces.rowspace"]], "rref() (sympy.matrices.matrices.matrixreductions method)": [[95, "sympy.matrices.matrices.MatrixReductions.rref"]], "singular_value_decomposition() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.singular_value_decomposition"]], "singular_values() (sympy.matrices.matrices.matrixeigen method)": [[95, "sympy.matrices.matrices.MatrixEigen.singular_values"]], "solve() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.solve"]], "solve_least_squares() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.solve_least_squares"]], "strongly_connected_components() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.strongly_connected_components"]], "strongly_connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.strongly_connected_components_decomposition"]], "symarray() (in module sympy.matrices.dense)": [[95, "sympy.matrices.dense.symarray"]], "sympy.matrices.matrices": [[95, "module-sympy.matrices.matrices"]], "table() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.table"]], "upper_hessenberg_decomposition() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.upper_hessenberg_decomposition"]], "upper_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[95, "sympy.matrices.matrices.MatrixBase.upper_triangular_solve"]], "wronskian() (in module sympy.matrices.dense)": [[95, "sympy.matrices.dense.wronskian"]], "zeros() (in module sympy.matrices.dense)": [[95, "sympy.matrices.dense.zeros"]], "hermite_normal_form() (in module sympy.matrices.normalforms)": [[96, "sympy.matrices.normalforms.hermite_normal_form"]], "smith_normal_form() (in module sympy.matrices.normalforms)": [[96, "sympy.matrices.normalforms.smith_normal_form"]], "immutablesparsematrix (class in sympy.matrices.immutable)": [[97, "sympy.matrices.immutable.ImmutableSparseMatrix"]], "mutablesparsematrix (class in sympy.matrices.sparse)": [[97, "sympy.matrices.sparse.MutableSparseMatrix"]], "sparsematrix (in module sympy.matrices.sparse)": [[97, "sympy.matrices.sparse.SparseMatrix"]], "sympy.matrices.sparse": [[97, "module-sympy.matrices.sparse"]], "_csrtodok() (in module sympy.matrices.sparsetools)": [[98, "sympy.matrices.sparsetools._csrtodok"]], "_doktocsr() (in module sympy.matrices.sparsetools)": [[98, "sympy.matrices.sparsetools._doktocsr"]], "banded() (in module sympy.matrices.sparsetools)": [[98, "sympy.matrices.sparsetools.banded"]], "sympy.matrices.sparsetools": [[98, "module-sympy.matrices.sparsetools"]], "sieve (class in sympy.ntheory.generate)": [[99, "sympy.ntheory.generate.Sieve"]], "abundance() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.abundance"]], "antidivisor_count() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.antidivisor_count"]], "antidivisors() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.antidivisors"]], "binomial_coefficients() (in module sympy.ntheory.multinomial)": [[99, "sympy.ntheory.multinomial.binomial_coefficients"]], "binomial_coefficients_list() (in module sympy.ntheory.multinomial)": [[99, "sympy.ntheory.multinomial.binomial_coefficients_list"]], "composite() (in module sympy.ntheory.generate)": [[99, "sympy.ntheory.generate.composite"]], "compositepi() (in module sympy.ntheory.generate)": [[99, "sympy.ntheory.generate.compositepi"]], "continued_fraction() (in module sympy.ntheory.continued_fraction)": [[99, "sympy.ntheory.continued_fraction.continued_fraction"]], "continued_fraction_convergents() (in module sympy.ntheory.continued_fraction)": [[99, "sympy.ntheory.continued_fraction.continued_fraction_convergents"]], "continued_fraction_iterator() (in module sympy.ntheory.continued_fraction)": [[99, "sympy.ntheory.continued_fraction.continued_fraction_iterator"]], "continued_fraction_periodic() (in module sympy.ntheory.continued_fraction)": [[99, "sympy.ntheory.continued_fraction.continued_fraction_periodic"]], "continued_fraction_reduce() (in module sympy.ntheory.continued_fraction)": [[99, "sympy.ntheory.continued_fraction.continued_fraction_reduce"]], "core() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.core"]], "count_digits() (in module sympy.ntheory.digits)": [[99, "sympy.ntheory.digits.count_digits"]], "crt() (in module sympy.ntheory.modular)": [[99, "sympy.ntheory.modular.crt"]], "crt1() (in module sympy.ntheory.modular)": [[99, "sympy.ntheory.modular.crt1"]], "crt2() (in module sympy.ntheory.modular)": [[99, "sympy.ntheory.modular.crt2"]], "cycle_length() (in module sympy.ntheory.generate)": [[99, "sympy.ntheory.generate.cycle_length"]], "digits() (in module sympy.ntheory.digits)": [[99, "sympy.ntheory.digits.digits"]], "digits() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.digits"]], "discrete_log() (in module sympy.ntheory.residue_ntheory)": [[99, "sympy.ntheory.residue_ntheory.discrete_log"]], "divisor_count() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.divisor_count"]], "divisor_sigma (class in sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.divisor_sigma"]], "divisors() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.divisors"]], "ecm() (in module sympy.ntheory.ecm)": [[99, "sympy.ntheory.ecm.ecm"]], "egyptian_fraction() (in module sympy.ntheory.egyptian_fraction)": [[99, "sympy.ntheory.egyptian_fraction.egyptian_fraction"]], "extend() (sympy.ntheory.generate.sieve method)": [[99, "sympy.ntheory.generate.Sieve.extend"]], "extend_to_no() (sympy.ntheory.generate.sieve method)": [[99, "sympy.ntheory.generate.Sieve.extend_to_no"]], "factorint() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.factorint"]], "factorrat() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.factorrat"]], "is_abundant() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.is_abundant"]], "is_amicable() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.is_amicable"]], "is_deficient() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.is_deficient"]], "is_euler_pseudoprime() (in module sympy.ntheory.primetest)": [[99, "sympy.ntheory.primetest.is_euler_pseudoprime"]], "is_extra_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[99, "sympy.ntheory.primetest.is_extra_strong_lucas_prp"]], "is_gaussian_prime() (in module sympy.ntheory.primetest)": [[99, "sympy.ntheory.primetest.is_gaussian_prime"]], "is_lucas_prp() (in module sympy.ntheory.primetest)": [[99, "sympy.ntheory.primetest.is_lucas_prp"]], "is_mersenne_prime() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.is_mersenne_prime"]], "is_nthpow_residue() (in module sympy.ntheory.residue_ntheory)": [[99, "sympy.ntheory.residue_ntheory.is_nthpow_residue"]], "is_palindromic() (in module sympy.ntheory.digits)": [[99, "sympy.ntheory.digits.is_palindromic"]], "is_perfect() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.is_perfect"]], "is_primitive_root() (in module sympy.ntheory.residue_ntheory)": [[99, "sympy.ntheory.residue_ntheory.is_primitive_root"]], "is_quad_residue() (in module sympy.ntheory.residue_ntheory)": [[99, "sympy.ntheory.residue_ntheory.is_quad_residue"]], "is_square() (in module sympy.ntheory.primetest)": [[99, "sympy.ntheory.primetest.is_square"]], "is_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[99, "sympy.ntheory.primetest.is_strong_lucas_prp"]], "isprime() (in module sympy.ntheory.primetest)": [[99, "sympy.ntheory.primetest.isprime"]], "jacobi_symbol() (in module sympy.ntheory.residue_ntheory)": [[99, "sympy.ntheory.residue_ntheory.jacobi_symbol"]], "legendre_symbol() (in module sympy.ntheory.residue_ntheory)": [[99, "sympy.ntheory.residue_ntheory.legendre_symbol"]], "mersenne_prime_exponent() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.mersenne_prime_exponent"]], "mobius (class in sympy.ntheory)": [[99, "sympy.ntheory.mobius"]], "mobiusrange() (sympy.ntheory.generate.sieve method)": [[99, "sympy.ntheory.generate.Sieve.mobiusrange"]], "mr() (in module sympy.ntheory.primetest)": [[99, "sympy.ntheory.primetest.mr"]], "multinomial_coefficients() (in module sympy.ntheory.multinomial)": [[99, "sympy.ntheory.multinomial.multinomial_coefficients"]], "multinomial_coefficients_iterator() (in module sympy.ntheory.multinomial)": [[99, "sympy.ntheory.multinomial.multinomial_coefficients_iterator"]], "multiplicity() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.multiplicity"]], "n_order() (in module sympy.ntheory.residue_ntheory)": [[99, "sympy.ntheory.residue_ntheory.n_order"]], "nextprime() (in module sympy.ntheory.generate)": [[99, "sympy.ntheory.generate.nextprime"]], "npartitions() (in module sympy.ntheory.partitions_)": [[99, "sympy.ntheory.partitions_.npartitions"]], "nthroot_mod() (in module sympy.ntheory.residue_ntheory)": [[99, "sympy.ntheory.residue_ntheory.nthroot_mod"]], "perfect_power() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.perfect_power"]], "pi_hex_digits() (in module sympy.ntheory.bbp_pi)": [[99, "sympy.ntheory.bbp_pi.pi_hex_digits"]], "pollard_pm1() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.pollard_pm1"]], "pollard_rho() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.pollard_rho"]], "prevprime() (in module sympy.ntheory.generate)": [[99, "sympy.ntheory.generate.prevprime"]], "prime() (in module sympy.ntheory.generate)": [[99, "sympy.ntheory.generate.prime"]], "primefactors() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.primefactors"]], "primenu (class in sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.primenu"]], "primeomega (class in sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.primeomega"]], "primepi() (in module sympy.ntheory.generate)": [[99, "sympy.ntheory.generate.primepi"]], "primerange() (in module sympy.ntheory.generate)": [[99, "sympy.ntheory.generate.primerange"]], "primerange() (sympy.ntheory.generate.sieve method)": [[99, "sympy.ntheory.generate.Sieve.primerange"]], "primitive_root() (in module sympy.ntheory.residue_ntheory)": [[99, "sympy.ntheory.residue_ntheory.primitive_root"]], "primorial() (in module sympy.ntheory.generate)": [[99, "sympy.ntheory.generate.primorial"]], "proper_divisor_count() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.proper_divisor_count"]], "proper_divisors() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.proper_divisors"]], "qs() (in module sympy.ntheory.qs)": [[99, "sympy.ntheory.qs.qs"]], "quadratic_residues() (in module sympy.ntheory.residue_ntheory)": [[99, "sympy.ntheory.residue_ntheory.quadratic_residues"]], "randprime() (in module sympy.ntheory.generate)": [[99, "sympy.ntheory.generate.randprime"]], "reduced_totient (class in sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.reduced_totient"]], "search() (sympy.ntheory.generate.sieve method)": [[99, "sympy.ntheory.generate.Sieve.search"]], "smoothness() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.smoothness"]], "smoothness_p() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.smoothness_p"]], "solve_congruence() (in module sympy.ntheory.modular)": [[99, "sympy.ntheory.modular.solve_congruence"]], "sqrt_mod() (in module sympy.ntheory.residue_ntheory)": [[99, "sympy.ntheory.residue_ntheory.sqrt_mod"]], "sqrt_mod_iter() (in module sympy.ntheory.residue_ntheory)": [[99, "sympy.ntheory.residue_ntheory.sqrt_mod_iter"]], "symmetric_residue() (in module sympy.ntheory.modular)": [[99, "sympy.ntheory.modular.symmetric_residue"]], "sympy.ntheory.bbp_pi": [[99, "module-sympy.ntheory.bbp_pi"]], "sympy.ntheory.continued_fraction": [[99, "module-sympy.ntheory.continued_fraction"]], "sympy.ntheory.digits": [[99, "module-sympy.ntheory.digits"]], "sympy.ntheory.ecm": [[99, "module-sympy.ntheory.ecm"]], "sympy.ntheory.egyptian_fraction": [[99, "module-sympy.ntheory.egyptian_fraction"]], "sympy.ntheory.factor_": [[99, "module-sympy.ntheory.factor_"]], "sympy.ntheory.generate": [[99, "module-sympy.ntheory.generate"]], "sympy.ntheory.modular": [[99, "module-sympy.ntheory.modular"]], "sympy.ntheory.multinomial": [[99, "module-sympy.ntheory.multinomial"]], "sympy.ntheory.partitions_": [[99, "module-sympy.ntheory.partitions_"]], "sympy.ntheory.primetest": [[99, "module-sympy.ntheory.primetest"]], "sympy.ntheory.qs": [[99, "module-sympy.ntheory.qs"]], "sympy.ntheory.residue_ntheory": [[99, "module-sympy.ntheory.residue_ntheory"]], "totient (class in sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.totient"]], "totientrange() (sympy.ntheory.generate.sieve method)": [[99, "sympy.ntheory.generate.Sieve.totientrange"]], "trailing() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.trailing"]], "udivisor_count() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.udivisor_count"]], "udivisor_sigma (class in sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.udivisor_sigma"]], "udivisors() (in module sympy.ntheory.factor_)": [[99, "sympy.ntheory.factor_.udivisors"]], "latexparsingerror (class in sympy.parsing.latex)": [[101, "sympy.parsing.latex.LaTeXParsingError"]], "sympyexpression (class in sympy.parsing.sym_expr)": [[101, "sympy.parsing.sym_expr.SymPyExpression"]], "auto_number() (in module sympy.parsing.sympy_parser)": [[101, "sympy.parsing.sympy_parser.auto_number"]], "auto_symbol() (in module sympy.parsing.sympy_parser)": [[101, "sympy.parsing.sympy_parser.auto_symbol"]], "convert_to_c() (sympy.parsing.sym_expr.sympyexpression method)": [[101, "sympy.parsing.sym_expr.SymPyExpression.convert_to_c"]], "convert_to_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[101, "sympy.parsing.sym_expr.SymPyExpression.convert_to_expr"]], "convert_to_fortran() (sympy.parsing.sym_expr.sympyexpression method)": [[101, "sympy.parsing.sym_expr.SymPyExpression.convert_to_fortran"]], "convert_to_python() (sympy.parsing.sym_expr.sympyexpression method)": [[101, "sympy.parsing.sym_expr.SymPyExpression.convert_to_python"]], "convert_xor() (in module sympy.parsing.sympy_parser)": [[101, "sympy.parsing.sympy_parser.convert_xor"]], "eval_expr() (in module sympy.parsing.sympy_parser)": [[101, "sympy.parsing.sympy_parser.eval_expr"]], "factorial_notation() (in module sympy.parsing.sympy_parser)": [[101, "sympy.parsing.sympy_parser.factorial_notation"]], "function_exponentiation() (in module sympy.parsing.sympy_parser)": [[101, "sympy.parsing.sympy_parser.function_exponentiation"]], "implicit_application() (in module sympy.parsing.sympy_parser)": [[101, "sympy.parsing.sympy_parser.implicit_application"]], "implicit_multiplication() (in module sympy.parsing.sympy_parser)": [[101, "sympy.parsing.sympy_parser.implicit_multiplication"]], "implicit_multiplication_application() (in module sympy.parsing.sympy_parser)": [[101, "sympy.parsing.sympy_parser.implicit_multiplication_application"]], "lambda_notation() (in module sympy.parsing.sympy_parser)": [[101, "sympy.parsing.sympy_parser.lambda_notation"]], "parse_expr() (in module sympy.parsing.sympy_parser)": [[101, "sympy.parsing.sympy_parser.parse_expr"]], "parse_latex() (in module sympy.parsing.latex)": [[101, "sympy.parsing.latex.parse_latex"]], "parse_mathematica() (in module sympy.parsing.mathematica)": [[101, "sympy.parsing.mathematica.parse_mathematica"]], "parse_maxima() (in module sympy.parsing.maxima)": [[101, "sympy.parsing.maxima.parse_maxima"]], "rationalize() (in module sympy.parsing.sympy_parser)": [[101, "sympy.parsing.sympy_parser.rationalize"]], "repeated_decimals() (in module sympy.parsing.sympy_parser)": [[101, "sympy.parsing.sympy_parser.repeated_decimals"]], "return_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[101, "sympy.parsing.sym_expr.SymPyExpression.return_expr"]], "split_symbols() (in module sympy.parsing.sympy_parser)": [[101, "sympy.parsing.sympy_parser.split_symbols"]], "split_symbols_custom() (in module sympy.parsing.sympy_parser)": [[101, "sympy.parsing.sympy_parser.split_symbols_custom"]], "standard_transformations (in module sympy.parsing.sympy_parser)": [[101, "sympy.parsing.sympy_parser.standard_transformations"]], "stringify_expr() (in module sympy.parsing.sympy_parser)": [[101, "sympy.parsing.sympy_parser.stringify_expr"]], "sympy.parsing": [[101, "module-sympy.parsing"]], "sympy.parsing.sym_expr": [[101, "module-sympy.parsing.sym_expr"]], "beam (class in sympy.physics.continuum_mechanics.beam)": [[102, "sympy.physics.continuum_mechanics.beam.Beam"]], "beam3d (class in sympy.physics.continuum_mechanics.beam)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D"]], "angular_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.angular_deflection"]], "applied_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.applied_loads"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.apply_load"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_load"]], "apply_moment_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_moment_load"]], "apply_support() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.apply_support"]], "area (sympy.physics.continuum_mechanics.beam.beam property)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.area"]], "area (sympy.physics.continuum_mechanics.beam.beam3d property)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.area"]], "axial_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_force"]], "axial_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_stress"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.bending_moment"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.bending_moment"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam property)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.boundary_conditions"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam3d property)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.boundary_conditions"]], "cross_section (sympy.physics.continuum_mechanics.beam.beam property)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.cross_section"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.deflection"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.deflection"]], "draw() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.draw"]], "elastic_modulus (sympy.physics.continuum_mechanics.beam.beam property)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.elastic_modulus"]], "ild_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.ild_moment"]], "ild_reactions (sympy.physics.continuum_mechanics.beam.beam property)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.ild_reactions"]], "ild_shear (sympy.physics.continuum_mechanics.beam.beam property)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.ild_shear"]], "join() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.join"]], "length (sympy.physics.continuum_mechanics.beam.beam property)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.length"]], "load (sympy.physics.continuum_mechanics.beam.beam property)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.load"]], "load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.load_vector"]], "max_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bending_moment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.max_bmoment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bmoment"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.max_deflection"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.max_deflection"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.max_shear_force"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.max_shear_force"]], "moment_load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.moment_load_vector"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.plot_bending_moment"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_bending_moment"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.plot_deflection"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_deflection"]], "plot_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_moment"]], "plot_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_reactions"]], "plot_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_shear"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.plot_loading_results"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_loading_results"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_force"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_force"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_stress"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_stress"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.plot_slope"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_slope"]], "point_cflexure() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.point_cflexure"]], "polar_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.polar_moment"]], "reaction_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.remove_load"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.second_moment"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam3d property)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.second_moment"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.shear_force"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_force"]], "shear_modulus (sympy.physics.continuum_mechanics.beam.beam3d property)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_modulus"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.shear_stress"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_stress"]], "slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.slope"]], "slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.slope"]], "solve_for_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_moment"]], "solve_for_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_reactions"]], "solve_for_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_shear"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_reaction_loads"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_reaction_loads"]], "solve_for_torsion() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_torsion"]], "sympy.physics.continuum_mechanics.beam": [[102, "module-sympy.physics.continuum_mechanics.beam"]], "torsional_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[102, "sympy.physics.continuum_mechanics.beam.Beam3D.torsional_moment"]], "variable (sympy.physics.continuum_mechanics.beam.beam property)": [[102, "sympy.physics.continuum_mechanics.beam.Beam.variable"]], "truss (class in sympy.physics.continuum_mechanics.truss)": [[105, "sympy.physics.continuum_mechanics.truss.Truss"]], "add_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[105, "sympy.physics.continuum_mechanics.truss.Truss.add_member"]], "add_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[105, "sympy.physics.continuum_mechanics.truss.Truss.add_node"]], "apply_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[105, "sympy.physics.continuum_mechanics.truss.Truss.apply_load"]], "apply_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[105, "sympy.physics.continuum_mechanics.truss.Truss.apply_support"]], "change_member_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[105, "sympy.physics.continuum_mechanics.truss.Truss.change_member_label"]], "change_node_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[105, "sympy.physics.continuum_mechanics.truss.Truss.change_node_label"]], "internal_forces (sympy.physics.continuum_mechanics.truss.truss property)": [[105, "sympy.physics.continuum_mechanics.truss.Truss.internal_forces"]], "loads (sympy.physics.continuum_mechanics.truss.truss property)": [[105, "sympy.physics.continuum_mechanics.truss.Truss.loads"]], "member_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[105, "sympy.physics.continuum_mechanics.truss.Truss.member_labels"]], "members (sympy.physics.continuum_mechanics.truss.truss property)": [[105, "sympy.physics.continuum_mechanics.truss.Truss.members"]], "node_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[105, "sympy.physics.continuum_mechanics.truss.Truss.node_labels"]], "node_positions (sympy.physics.continuum_mechanics.truss.truss property)": [[105, "sympy.physics.continuum_mechanics.truss.Truss.node_positions"]], "nodes (sympy.physics.continuum_mechanics.truss.truss property)": [[105, "sympy.physics.continuum_mechanics.truss.Truss.nodes"]], "reaction_loads (sympy.physics.continuum_mechanics.truss.truss property)": [[105, "sympy.physics.continuum_mechanics.truss.Truss.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[105, "sympy.physics.continuum_mechanics.truss.Truss.remove_load"]], "remove_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[105, "sympy.physics.continuum_mechanics.truss.Truss.remove_member"]], "remove_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[105, "sympy.physics.continuum_mechanics.truss.Truss.remove_node"]], "remove_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[105, "sympy.physics.continuum_mechanics.truss.Truss.remove_support"]], "solve() (sympy.physics.continuum_mechanics.truss.truss method)": [[105, "sympy.physics.continuum_mechanics.truss.Truss.solve"]], "supports (sympy.physics.continuum_mechanics.truss.truss property)": [[105, "sympy.physics.continuum_mechanics.truss.Truss.supports"]], "sympy.physics.continuum_mechanics.truss": [[105, "module-sympy.physics.continuum_mechanics.truss"]], "bode_magnitude_numerical_data() (sympy.physics.control.control_plots method)": [[107, "sympy.physics.control.control_plots.bode_magnitude_numerical_data"]], "bode_magnitude_plot() (sympy.physics.control.control_plots method)": [[107, "sympy.physics.control.control_plots.bode_magnitude_plot"]], "bode_phase_numerical_data() (sympy.physics.control.control_plots method)": [[107, "sympy.physics.control.control_plots.bode_phase_numerical_data"]], "bode_phase_plot() (sympy.physics.control.control_plots method)": [[107, "sympy.physics.control.control_plots.bode_phase_plot"]], "bode_plot() (sympy.physics.control.control_plots method)": [[107, "sympy.physics.control.control_plots.bode_plot"]], "impulse_response_numerical_data() (sympy.physics.control.control_plots method)": [[107, "sympy.physics.control.control_plots.impulse_response_numerical_data"]], "impulse_response_plot() (sympy.physics.control.control_plots method)": [[107, "sympy.physics.control.control_plots.impulse_response_plot"]], "pole_zero_numerical_data() (sympy.physics.control.control_plots method)": [[107, "sympy.physics.control.control_plots.pole_zero_numerical_data"]], "pole_zero_plot() (sympy.physics.control.control_plots method)": [[107, "sympy.physics.control.control_plots.pole_zero_plot"]], "ramp_response_numerical_data() (sympy.physics.control.control_plots method)": [[107, "sympy.physics.control.control_plots.ramp_response_numerical_data"]], "ramp_response_plot() (sympy.physics.control.control_plots method)": [[107, "sympy.physics.control.control_plots.ramp_response_plot"]], "step_response_numerical_data() (sympy.physics.control.control_plots method)": [[107, "sympy.physics.control.control_plots.step_response_numerical_data"]], "step_response_plot() (sympy.physics.control.control_plots method)": [[107, "sympy.physics.control.control_plots.step_response_plot"]], "sympy.physics.control": [[108, "module-sympy.physics.control"]], "feedback (class in sympy.physics.control.lti)": [[109, "sympy.physics.control.lti.Feedback"]], "mimofeedback (class in sympy.physics.control.lti)": [[109, "sympy.physics.control.lti.MIMOFeedback"]], "mimoparallel (class in sympy.physics.control.lti)": [[109, "sympy.physics.control.lti.MIMOParallel"]], "mimoseries (class in sympy.physics.control.lti)": [[109, "sympy.physics.control.lti.MIMOSeries"]], "parallel (class in sympy.physics.control.lti)": [[109, "sympy.physics.control.lti.Parallel"]], "series (class in sympy.physics.control.lti)": [[109, "sympy.physics.control.lti.Series"]], "transferfunction (class in sympy.physics.control.lti)": [[109, "sympy.physics.control.lti.TransferFunction"]], "transferfunctionmatrix (class in sympy.physics.control.lti)": [[109, "sympy.physics.control.lti.TransferFunctionMatrix"]], "dc_gain() (sympy.physics.control.lti.transferfunction method)": [[109, "sympy.physics.control.lti.TransferFunction.dc_gain"]], "den (sympy.physics.control.lti.transferfunction property)": [[109, "sympy.physics.control.lti.TransferFunction.den"]], "doit() (sympy.physics.control.lti.feedback method)": [[109, "sympy.physics.control.lti.Feedback.doit"]], "doit() (sympy.physics.control.lti.mimofeedback method)": [[109, "sympy.physics.control.lti.MIMOFeedback.doit"]], "doit() (sympy.physics.control.lti.mimoparallel method)": [[109, "sympy.physics.control.lti.MIMOParallel.doit"]], "doit() (sympy.physics.control.lti.mimoseries method)": [[109, "sympy.physics.control.lti.MIMOSeries.doit"]], "doit() (sympy.physics.control.lti.parallel method)": [[109, "sympy.physics.control.lti.Parallel.doit"]], "doit() (sympy.physics.control.lti.series method)": [[109, "sympy.physics.control.lti.Series.doit"]], "elem_poles() (sympy.physics.control.lti.transferfunctionmatrix method)": [[109, "sympy.physics.control.lti.TransferFunctionMatrix.elem_poles"]], "elem_zeros() (sympy.physics.control.lti.transferfunctionmatrix method)": [[109, "sympy.physics.control.lti.TransferFunctionMatrix.elem_zeros"]], "expand() (sympy.physics.control.lti.transferfunction method)": [[109, "sympy.physics.control.lti.TransferFunction.expand"]], "expand() (sympy.physics.control.lti.transferfunctionmatrix method)": [[109, "sympy.physics.control.lti.TransferFunctionMatrix.expand"]], "from_matrix() (sympy.physics.control.lti.transferfunctionmatrix class method)": [[109, "sympy.physics.control.lti.TransferFunctionMatrix.from_Matrix"]], "from_rational_expression() (sympy.physics.control.lti.transferfunction class method)": [[109, "sympy.physics.control.lti.TransferFunction.from_rational_expression"]], "is_biproper (sympy.physics.control.lti.parallel property)": [[109, "sympy.physics.control.lti.Parallel.is_biproper"]], "is_biproper (sympy.physics.control.lti.series property)": [[109, "sympy.physics.control.lti.Series.is_biproper"]], "is_biproper (sympy.physics.control.lti.transferfunction property)": [[109, "sympy.physics.control.lti.TransferFunction.is_biproper"]], "is_proper (sympy.physics.control.lti.parallel property)": [[109, "sympy.physics.control.lti.Parallel.is_proper"]], "is_proper (sympy.physics.control.lti.series property)": [[109, "sympy.physics.control.lti.Series.is_proper"]], "is_proper (sympy.physics.control.lti.transferfunction property)": [[109, "sympy.physics.control.lti.TransferFunction.is_proper"]], "is_stable() (sympy.physics.control.lti.transferfunction method)": [[109, "sympy.physics.control.lti.TransferFunction.is_stable"]], "is_strictly_proper (sympy.physics.control.lti.parallel property)": [[109, "sympy.physics.control.lti.Parallel.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.series property)": [[109, "sympy.physics.control.lti.Series.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.transferfunction property)": [[109, "sympy.physics.control.lti.TransferFunction.is_strictly_proper"]], "num (sympy.physics.control.lti.transferfunction property)": [[109, "sympy.physics.control.lti.TransferFunction.num"]], "num_inputs (sympy.physics.control.lti.mimoparallel property)": [[109, "sympy.physics.control.lti.MIMOParallel.num_inputs"]], "num_inputs (sympy.physics.control.lti.mimoseries property)": [[109, "sympy.physics.control.lti.MIMOSeries.num_inputs"]], "num_inputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[109, "sympy.physics.control.lti.TransferFunctionMatrix.num_inputs"]], "num_outputs (sympy.physics.control.lti.mimoparallel property)": [[109, "sympy.physics.control.lti.MIMOParallel.num_outputs"]], "num_outputs (sympy.physics.control.lti.mimoseries property)": [[109, "sympy.physics.control.lti.MIMOSeries.num_outputs"]], "num_outputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[109, "sympy.physics.control.lti.TransferFunctionMatrix.num_outputs"]], "poles() (sympy.physics.control.lti.transferfunction method)": [[109, "sympy.physics.control.lti.TransferFunction.poles"]], "sensitivity (sympy.physics.control.lti.feedback property)": [[109, "sympy.physics.control.lti.Feedback.sensitivity"]], "sensitivity (sympy.physics.control.lti.mimofeedback property)": [[109, "sympy.physics.control.lti.MIMOFeedback.sensitivity"]], "shape (sympy.physics.control.lti.mimoparallel property)": [[109, "sympy.physics.control.lti.MIMOParallel.shape"]], "shape (sympy.physics.control.lti.mimoseries property)": [[109, "sympy.physics.control.lti.MIMOSeries.shape"]], "shape (sympy.physics.control.lti.transferfunctionmatrix property)": [[109, "sympy.physics.control.lti.TransferFunctionMatrix.shape"]], "sign (sympy.physics.control.lti.feedback property)": [[109, "sympy.physics.control.lti.Feedback.sign"]], "sign (sympy.physics.control.lti.mimofeedback property)": [[109, "sympy.physics.control.lti.MIMOFeedback.sign"]], "sympy.physics.control.lti": [[109, "module-sympy.physics.control.lti"]], "sys1 (sympy.physics.control.lti.feedback property)": [[109, "sympy.physics.control.lti.Feedback.sys1"]], "sys1 (sympy.physics.control.lti.mimofeedback property)": [[109, "sympy.physics.control.lti.MIMOFeedback.sys1"]], "sys2 (sympy.physics.control.lti.feedback property)": [[109, "sympy.physics.control.lti.Feedback.sys2"]], "sys2 (sympy.physics.control.lti.mimofeedback property)": [[109, "sympy.physics.control.lti.MIMOFeedback.sys2"]], "to_expr() (sympy.physics.control.lti.parallel method)": [[109, "sympy.physics.control.lti.Parallel.to_expr"]], "to_expr() (sympy.physics.control.lti.series method)": [[109, "sympy.physics.control.lti.Series.to_expr"]], "to_expr() (sympy.physics.control.lti.transferfunction method)": [[109, "sympy.physics.control.lti.TransferFunction.to_expr"]], "transpose() (sympy.physics.control.lti.transferfunctionmatrix method)": [[109, "sympy.physics.control.lti.TransferFunctionMatrix.transpose"]], "var (sympy.physics.control.lti.feedback property)": [[109, "sympy.physics.control.lti.Feedback.var"]], "var (sympy.physics.control.lti.mimofeedback property)": [[109, "sympy.physics.control.lti.MIMOFeedback.var"]], "var (sympy.physics.control.lti.mimoparallel property)": [[109, "sympy.physics.control.lti.MIMOParallel.var"]], "var (sympy.physics.control.lti.mimoseries property)": [[109, "sympy.physics.control.lti.MIMOSeries.var"]], "var (sympy.physics.control.lti.parallel property)": [[109, "sympy.physics.control.lti.Parallel.var"]], "var (sympy.physics.control.lti.series property)": [[109, "sympy.physics.control.lti.Series.var"]], "var (sympy.physics.control.lti.transferfunction property)": [[109, "sympy.physics.control.lti.TransferFunction.var"]], "var (sympy.physics.control.lti.transferfunctionmatrix property)": [[109, "sympy.physics.control.lti.TransferFunctionMatrix.var"]], "zeros() (sympy.physics.control.lti.transferfunction method)": [[109, "sympy.physics.control.lti.TransferFunction.zeros"]], "extract_type_tens() (in module sympy.physics.hep.gamma_matrices)": [[110, "sympy.physics.hep.gamma_matrices.extract_type_tens"]], "gamma_trace() (in module sympy.physics.hep.gamma_matrices)": [[110, "sympy.physics.hep.gamma_matrices.gamma_trace"]], "kahane_simplify() (in module sympy.physics.hep.gamma_matrices)": [[110, "sympy.physics.hep.gamma_matrices.kahane_simplify"]], "simplify_gpgp() (in module sympy.physics.hep.gamma_matrices)": [[110, "sympy.physics.hep.gamma_matrices.simplify_gpgp"]], "sympy.physics.hep.gamma_matrices": [[110, "module-sympy.physics.hep.gamma_matrices"]], "e_nl() (in module sympy.physics.hydrogen)": [[111, "sympy.physics.hydrogen.E_nl"]], "e_nl_dirac() (in module sympy.physics.hydrogen)": [[111, "sympy.physics.hydrogen.E_nl_dirac"]], "psi_nlm() (in module sympy.physics.hydrogen)": [[111, "sympy.physics.hydrogen.Psi_nlm"]], "r_nl() (in module sympy.physics.hydrogen)": [[111, "sympy.physics.hydrogen.R_nl"]], "sympy.physics.hydrogen": [[111, "module-sympy.physics.hydrogen"]], "mdft() (in module sympy.physics.matrices)": [[112, "sympy.physics.matrices.mdft"]], "mgamma() (in module sympy.physics.matrices)": [[112, "sympy.physics.matrices.mgamma"]], "msigma() (in module sympy.physics.matrices)": [[112, "sympy.physics.matrices.msigma"]], "pat_matrix() (in module sympy.physics.matrices)": [[112, "sympy.physics.matrices.pat_matrix"]], "sympy.physics.matrices": [[112, "module-sympy.physics.matrices"]], "body (class in sympy.physics.mechanics.body)": [[114, "sympy.physics.mechanics.body.Body"]], "ang_vel_in() (sympy.physics.mechanics.body.body method)": [[114, "sympy.physics.mechanics.body.Body.ang_vel_in"]], "apply_force() (sympy.physics.mechanics.body.body method)": [[114, "sympy.physics.mechanics.body.Body.apply_force"]], "apply_torque() (sympy.physics.mechanics.body.body method)": [[114, "sympy.physics.mechanics.body.Body.apply_torque"]], "clear_loads() (sympy.physics.mechanics.body.body method)": [[114, "sympy.physics.mechanics.body.Body.clear_loads"]], "dcm() (sympy.physics.mechanics.body.body method)": [[114, "sympy.physics.mechanics.body.Body.dcm"]], "inertia (sympy.physics.mechanics.body.body property)": [[114, "sympy.physics.mechanics.body.Body.inertia"]], "kinetic_energy() (sympy.physics.mechanics.body.body method)": [[114, "sympy.physics.mechanics.body.Body.kinetic_energy"]], "masscenter_vel() (sympy.physics.mechanics.body.body method)": [[114, "sympy.physics.mechanics.body.Body.masscenter_vel"]], "parallel_axis() (sympy.physics.mechanics.body.body method)": [[114, "sympy.physics.mechanics.body.Body.parallel_axis"]], "remove_load() (sympy.physics.mechanics.body.body method)": [[114, "sympy.physics.mechanics.body.Body.remove_load"]], "sympy.physics.mechanics.body": [[114, "module-sympy.physics.mechanics.body"]], "x (sympy.physics.mechanics.body.body property)": [[114, "sympy.physics.mechanics.body.Body.x"]], "y (sympy.physics.mechanics.body.body property)": [[114, "sympy.physics.mechanics.body.Body.y"]], "z (sympy.physics.mechanics.body.body property)": [[114, "sympy.physics.mechanics.body.Body.z"]], "find_dynamicsymbols() (in module sympy.physics.mechanics)": [[115, "sympy.physics.mechanics.find_dynamicsymbols"]], "msubs() (in module sympy.physics.mechanics)": [[115, "sympy.physics.mechanics.msubs"]], "cylindricaljoint (class in sympy.physics.mechanics.joint)": [[117, "sympy.physics.mechanics.joint.CylindricalJoint"]], "joint (class in sympy.physics.mechanics.joint)": [[117, "sympy.physics.mechanics.joint.Joint"]], "jointsmethod (class in sympy.physics.mechanics.jointsmethod)": [[117, "sympy.physics.mechanics.jointsmethod.JointsMethod"]], "pinjoint (class in sympy.physics.mechanics.joint)": [[117, "sympy.physics.mechanics.joint.PinJoint"]], "planarjoint (class in sympy.physics.mechanics.joint)": [[117, "sympy.physics.mechanics.joint.PlanarJoint"]], "prismaticjoint (class in sympy.physics.mechanics.joint)": [[117, "sympy.physics.mechanics.joint.PrismaticJoint"]], "sphericaljoint (class in sympy.physics.mechanics.joint)": [[117, "sympy.physics.mechanics.joint.SphericalJoint"]], "weldjoint (class in sympy.physics.mechanics.joint)": [[117, "sympy.physics.mechanics.joint.WeldJoint"]], "bodies (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[117, "sympy.physics.mechanics.jointsmethod.JointsMethod.bodies"]], "child (sympy.physics.mechanics.joint.joint property)": [[117, "sympy.physics.mechanics.joint.Joint.child"]], "child_axis (sympy.physics.mechanics.joint.joint property)": [[117, "sympy.physics.mechanics.joint.Joint.child_axis"]], "child_point (sympy.physics.mechanics.joint.joint property)": [[117, "sympy.physics.mechanics.joint.Joint.child_point"]], "coordinates (sympy.physics.mechanics.joint.joint property)": [[117, "sympy.physics.mechanics.joint.Joint.coordinates"]], "forcing (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[117, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing"]], "forcing_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[117, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing_full"]], "form_eoms() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[117, "sympy.physics.mechanics.jointsmethod.JointsMethod.form_eoms"]], "joint_axis (sympy.physics.mechanics.joint.cylindricaljoint property)": [[117, "sympy.physics.mechanics.joint.CylindricalJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.pinjoint property)": [[117, "sympy.physics.mechanics.joint.PinJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.prismaticjoint property)": [[117, "sympy.physics.mechanics.joint.PrismaticJoint.joint_axis"]], "kdes (sympy.physics.mechanics.joint.joint property)": [[117, "sympy.physics.mechanics.joint.Joint.kdes"]], "kdes (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[117, "sympy.physics.mechanics.jointsmethod.JointsMethod.kdes"]], "loads (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[117, "sympy.physics.mechanics.jointsmethod.JointsMethod.loads"]], "mass_matrix (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[117, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[117, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix_full"]], "method (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[117, "sympy.physics.mechanics.jointsmethod.JointsMethod.method"]], "name (sympy.physics.mechanics.joint.joint property)": [[117, "sympy.physics.mechanics.joint.Joint.name"]], "parent (sympy.physics.mechanics.joint.joint property)": [[117, "sympy.physics.mechanics.joint.Joint.parent"]], "parent_axis (sympy.physics.mechanics.joint.joint property)": [[117, "sympy.physics.mechanics.joint.Joint.parent_axis"]], "parent_point (sympy.physics.mechanics.joint.joint property)": [[117, "sympy.physics.mechanics.joint.Joint.parent_point"]], "planar_coordinates (sympy.physics.mechanics.joint.planarjoint property)": [[117, "sympy.physics.mechanics.joint.PlanarJoint.planar_coordinates"]], "planar_speeds (sympy.physics.mechanics.joint.planarjoint property)": [[117, "sympy.physics.mechanics.joint.PlanarJoint.planar_speeds"]], "planar_vectors (sympy.physics.mechanics.joint.planarjoint property)": [[117, "sympy.physics.mechanics.joint.PlanarJoint.planar_vectors"]], "q (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[117, "sympy.physics.mechanics.jointsmethod.JointsMethod.q"]], "rhs() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[117, "sympy.physics.mechanics.jointsmethod.JointsMethod.rhs"]], "rotation_axis (sympy.physics.mechanics.joint.planarjoint property)": [[117, "sympy.physics.mechanics.joint.PlanarJoint.rotation_axis"]], "rotation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[117, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_coordinate"]], "rotation_coordinate (sympy.physics.mechanics.joint.planarjoint property)": [[117, "sympy.physics.mechanics.joint.PlanarJoint.rotation_coordinate"]], "rotation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[117, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_speed"]], "rotation_speed (sympy.physics.mechanics.joint.planarjoint property)": [[117, "sympy.physics.mechanics.joint.PlanarJoint.rotation_speed"]], "speeds (sympy.physics.mechanics.joint.joint property)": [[117, "sympy.physics.mechanics.joint.Joint.speeds"]], "sympy.physics.mechanics.joint": [[117, "module-sympy.physics.mechanics.joint"]], "sympy.physics.mechanics.jointsmethod": [[117, "module-sympy.physics.mechanics.jointsmethod"]], "translation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[117, "sympy.physics.mechanics.joint.CylindricalJoint.translation_coordinate"]], "translation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[117, "sympy.physics.mechanics.joint.CylindricalJoint.translation_speed"]], "u (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[117, "sympy.physics.mechanics.jointsmethod.JointsMethod.u"]], "kanesmethod (class in sympy.physics.mechanics.kane)": [[118, "sympy.physics.mechanics.kane.KanesMethod"]], "lagrangesmethod (class in sympy.physics.mechanics.lagrange)": [[118, "sympy.physics.mechanics.lagrange.LagrangesMethod"]], "auxiliary_eqs (sympy.physics.mechanics.kane.kanesmethod property)": [[118, "sympy.physics.mechanics.kane.KanesMethod.auxiliary_eqs"]], "forcing (sympy.physics.mechanics.kane.kanesmethod property)": [[118, "sympy.physics.mechanics.kane.KanesMethod.forcing"]], "forcing (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[118, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing"]], "forcing_full (sympy.physics.mechanics.kane.kanesmethod property)": [[118, "sympy.physics.mechanics.kane.KanesMethod.forcing_full"]], "forcing_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[118, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing_full"]], "forcing_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[118, "sympy.physics.mechanics.kane.KanesMethod.forcing_kin"]], "form_lagranges_equations() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[118, "sympy.physics.mechanics.lagrange.LagrangesMethod.form_lagranges_equations"]], "kanes_equations() (sympy.physics.mechanics.kane.kanesmethod method)": [[118, "sympy.physics.mechanics.kane.KanesMethod.kanes_equations"]], "kindiffdict() (sympy.physics.mechanics.kane.kanesmethod method)": [[118, "sympy.physics.mechanics.kane.KanesMethod.kindiffdict"]], "linearize() (sympy.physics.mechanics.kane.kanesmethod method)": [[118, "sympy.physics.mechanics.kane.KanesMethod.linearize"]], "linearize() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[118, "sympy.physics.mechanics.lagrange.LagrangesMethod.linearize"]], "mass_matrix (sympy.physics.mechanics.kane.kanesmethod property)": [[118, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix"]], "mass_matrix (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[118, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.kane.kanesmethod property)": [[118, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_full"]], "mass_matrix_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[118, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix_full"]], "mass_matrix_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[118, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_kin"]], "rhs() (sympy.physics.mechanics.kane.kanesmethod method)": [[118, "sympy.physics.mechanics.kane.KanesMethod.rhs"]], "rhs() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[118, "sympy.physics.mechanics.lagrange.LagrangesMethod.rhs"]], "solve_multipliers() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[118, "sympy.physics.mechanics.lagrange.LagrangesMethod.solve_multipliers"]], "sympy.physics.mechanics.kane": [[118, "module-sympy.physics.mechanics.kane"]], "sympy.physics.mechanics.lagrange": [[118, "module-sympy.physics.mechanics.lagrange"]], "to_linearizer() (sympy.physics.mechanics.kane.kanesmethod method)": [[118, "sympy.physics.mechanics.kane.KanesMethod.to_linearizer"]], "to_linearizer() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[118, "sympy.physics.mechanics.lagrange.LagrangesMethod.to_linearizer"]], "linearizer (class in sympy.physics.mechanics.linearize)": [[119, "sympy.physics.mechanics.linearize.Linearizer"]], "linearize() (sympy.physics.mechanics.linearize.linearizer method)": [[119, "sympy.physics.mechanics.linearize.Linearizer.linearize"]], "sympy.physics.mechanics.linearize": [[119, "module-sympy.physics.mechanics.linearize"]], "lagrangian() (in module sympy.physics.mechanics.functions)": [[120, "sympy.physics.mechanics.functions.Lagrangian"]], "particle (class in sympy.physics.mechanics.particle)": [[120, "sympy.physics.mechanics.particle.Particle"]], "rigidbody (class in sympy.physics.mechanics.rigidbody)": [[120, "sympy.physics.mechanics.rigidbody.RigidBody"]], "angular_momentum() (in module sympy.physics.mechanics.functions)": [[120, "sympy.physics.mechanics.functions.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.particle.particle method)": [[120, "sympy.physics.mechanics.particle.Particle.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[120, "sympy.physics.mechanics.rigidbody.RigidBody.angular_momentum"]], "central_inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[120, "sympy.physics.mechanics.rigidbody.RigidBody.central_inertia"]], "frame (sympy.physics.mechanics.rigidbody.rigidbody property)": [[120, "sympy.physics.mechanics.rigidbody.RigidBody.frame"]], "inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[120, "sympy.physics.mechanics.rigidbody.RigidBody.inertia"]], "inertia() (in module sympy.physics.mechanics.functions)": [[120, "sympy.physics.mechanics.functions.inertia"]], "inertia_of_point_mass() (in module sympy.physics.mechanics.functions)": [[120, "sympy.physics.mechanics.functions.inertia_of_point_mass"]], "kinetic_energy() (in module sympy.physics.mechanics.functions)": [[120, "sympy.physics.mechanics.functions.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.particle.particle method)": [[120, "sympy.physics.mechanics.particle.Particle.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[120, "sympy.physics.mechanics.rigidbody.RigidBody.kinetic_energy"]], "linear_momentum() (in module sympy.physics.mechanics.functions)": [[120, "sympy.physics.mechanics.functions.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.particle.particle method)": [[120, "sympy.physics.mechanics.particle.Particle.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[120, "sympy.physics.mechanics.rigidbody.RigidBody.linear_momentum"]], "mass (sympy.physics.mechanics.particle.particle property)": [[120, "sympy.physics.mechanics.particle.Particle.mass"]], "mass (sympy.physics.mechanics.rigidbody.rigidbody property)": [[120, "sympy.physics.mechanics.rigidbody.RigidBody.mass"]], "masscenter (sympy.physics.mechanics.rigidbody.rigidbody property)": [[120, "sympy.physics.mechanics.rigidbody.RigidBody.masscenter"]], "parallel_axis() (sympy.physics.mechanics.particle.particle method)": [[120, "sympy.physics.mechanics.particle.Particle.parallel_axis"]], "parallel_axis() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[120, "sympy.physics.mechanics.rigidbody.RigidBody.parallel_axis"]], "point (sympy.physics.mechanics.particle.particle property)": [[120, "sympy.physics.mechanics.particle.Particle.point"]], "potential_energy (sympy.physics.mechanics.particle.particle property)": [[120, "sympy.physics.mechanics.particle.Particle.potential_energy"]], "potential_energy (sympy.physics.mechanics.rigidbody.rigidbody property)": [[120, "sympy.physics.mechanics.rigidbody.RigidBody.potential_energy"]], "potential_energy() (in module sympy.physics.mechanics.functions)": [[120, "sympy.physics.mechanics.functions.potential_energy"]], "sympy.physics.mechanics.particle": [[120, "module-sympy.physics.mechanics.particle"]], "sympy.physics.mechanics.rigidbody": [[120, "module-sympy.physics.mechanics.rigidbody"]], "symbolicsystem (class in sympy.physics.mechanics.system)": [[122, "sympy.physics.mechanics.system.SymbolicSystem"]], "alg_con (sympy.physics.mechanics.system.symbolicsystem property)": [[122, "sympy.physics.mechanics.system.SymbolicSystem.alg_con"]], "bodies (sympy.physics.mechanics.system.symbolicsystem property)": [[122, "sympy.physics.mechanics.system.SymbolicSystem.bodies"]], "comb_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[122, "sympy.physics.mechanics.system.SymbolicSystem.comb_explicit_rhs"]], "comb_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[122, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_mat"]], "comb_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[122, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_rhs"]], "compute_explicit_form() (sympy.physics.mechanics.system.symbolicsystem method)": [[122, "sympy.physics.mechanics.system.SymbolicSystem.compute_explicit_form"]], "constant_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[122, "sympy.physics.mechanics.system.SymbolicSystem.constant_symbols"]], "coordinates (sympy.physics.mechanics.system.symbolicsystem property)": [[122, "sympy.physics.mechanics.system.SymbolicSystem.coordinates"]], "dyn_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[122, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_mat"]], "dyn_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[122, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_rhs"]], "dynamic_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[122, "sympy.physics.mechanics.system.SymbolicSystem.dynamic_symbols"]], "kin_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[122, "sympy.physics.mechanics.system.SymbolicSystem.kin_explicit_rhs"]], "loads (sympy.physics.mechanics.system.symbolicsystem property)": [[122, "sympy.physics.mechanics.system.SymbolicSystem.loads"]], "speeds (sympy.physics.mechanics.system.symbolicsystem property)": [[122, "sympy.physics.mechanics.system.SymbolicSystem.speeds"]], "states (sympy.physics.mechanics.system.symbolicsystem property)": [[122, "sympy.physics.mechanics.system.SymbolicSystem.states"]], "sympy.physics.mechanics.system": [[122, "module-sympy.physics.mechanics.system"]], "sympy.physics.mechanics": [[133, "module-sympy.physics.mechanics"]], "a (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[142, "sympy.physics.optics.gaussopt.RayTransferMatrix.A"]], "b (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[142, "sympy.physics.optics.gaussopt.RayTransferMatrix.B"]], "beamparameter (class in sympy.physics.optics.gaussopt)": [[142, "sympy.physics.optics.gaussopt.BeamParameter"]], "c (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[142, "sympy.physics.optics.gaussopt.RayTransferMatrix.C"]], "curvedmirror (class in sympy.physics.optics.gaussopt)": [[142, "sympy.physics.optics.gaussopt.CurvedMirror"]], "curvedrefraction (class in sympy.physics.optics.gaussopt)": [[142, "sympy.physics.optics.gaussopt.CurvedRefraction"]], "d (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[142, "sympy.physics.optics.gaussopt.RayTransferMatrix.D"]], "flatmirror (class in sympy.physics.optics.gaussopt)": [[142, "sympy.physics.optics.gaussopt.FlatMirror"]], "flatrefraction (class in sympy.physics.optics.gaussopt)": [[142, "sympy.physics.optics.gaussopt.FlatRefraction"]], "freespace (class in sympy.physics.optics.gaussopt)": [[142, "sympy.physics.optics.gaussopt.FreeSpace"]], "geometricray (class in sympy.physics.optics.gaussopt)": [[142, "sympy.physics.optics.gaussopt.GeometricRay"]], "raytransfermatrix (class in sympy.physics.optics.gaussopt)": [[142, "sympy.physics.optics.gaussopt.RayTransferMatrix"]], "thinlens (class in sympy.physics.optics.gaussopt)": [[142, "sympy.physics.optics.gaussopt.ThinLens"]], "angle (sympy.physics.optics.gaussopt.geometricray property)": [[142, "sympy.physics.optics.gaussopt.GeometricRay.angle"]], "conjugate_gauss_beams() (in module sympy.physics.optics.gaussopt)": [[142, "sympy.physics.optics.gaussopt.conjugate_gauss_beams"]], "divergence (sympy.physics.optics.gaussopt.beamparameter property)": [[142, "sympy.physics.optics.gaussopt.BeamParameter.divergence"]], "gaussian_conj() (in module sympy.physics.optics.gaussopt)": [[142, "sympy.physics.optics.gaussopt.gaussian_conj"]], "geometric_conj_ab() (in module sympy.physics.optics.gaussopt)": [[142, "sympy.physics.optics.gaussopt.geometric_conj_ab"]], "geometric_conj_af() (in module sympy.physics.optics.gaussopt)": [[142, "sympy.physics.optics.gaussopt.geometric_conj_af"]], "geometric_conj_bf() (in module sympy.physics.optics.gaussopt)": [[142, "sympy.physics.optics.gaussopt.geometric_conj_bf"]], "gouy (sympy.physics.optics.gaussopt.beamparameter property)": [[142, "sympy.physics.optics.gaussopt.BeamParameter.gouy"]], "height (sympy.physics.optics.gaussopt.geometricray property)": [[142, "sympy.physics.optics.gaussopt.GeometricRay.height"]], "q (sympy.physics.optics.gaussopt.beamparameter property)": [[142, "sympy.physics.optics.gaussopt.BeamParameter.q"]], "radius (sympy.physics.optics.gaussopt.beamparameter property)": [[142, "sympy.physics.optics.gaussopt.BeamParameter.radius"]], "rayleigh2waist() (in module sympy.physics.optics.gaussopt)": [[142, "sympy.physics.optics.gaussopt.rayleigh2waist"]], "sympy.physics.optics.gaussopt": [[142, "module-sympy.physics.optics.gaussopt"]], "w (sympy.physics.optics.gaussopt.beamparameter property)": [[142, "sympy.physics.optics.gaussopt.BeamParameter.w"]], "w_0 (sympy.physics.optics.gaussopt.beamparameter property)": [[142, "sympy.physics.optics.gaussopt.BeamParameter.w_0"]], "waist2rayleigh() (in module sympy.physics.optics.gaussopt)": [[142, "sympy.physics.optics.gaussopt.waist2rayleigh"]], "waist_approximation_limit (sympy.physics.optics.gaussopt.beamparameter property)": [[142, "sympy.physics.optics.gaussopt.BeamParameter.waist_approximation_limit"]], "medium (class in sympy.physics.optics.medium)": [[144, "sympy.physics.optics.medium.Medium"]], "refractive_index (sympy.physics.optics.medium.medium property)": [[144, "sympy.physics.optics.medium.Medium.refractive_index"]], "speed (sympy.physics.optics.medium.medium property)": [[144, "sympy.physics.optics.medium.Medium.speed"]], "sympy.physics.optics.medium": [[144, "module-sympy.physics.optics.medium"]], "half_wave_retarder() (in module sympy.physics.optics.polarization)": [[145, "sympy.physics.optics.polarization.half_wave_retarder"]], "jones_2_stokes() (in module sympy.physics.optics.polarization)": [[145, "sympy.physics.optics.polarization.jones_2_stokes"]], "jones_vector() (in module sympy.physics.optics.polarization)": [[145, "sympy.physics.optics.polarization.jones_vector"]], "linear_polarizer() (in module sympy.physics.optics.polarization)": [[145, "sympy.physics.optics.polarization.linear_polarizer"]], "mueller_matrix() (in module sympy.physics.optics.polarization)": [[145, "sympy.physics.optics.polarization.mueller_matrix"]], "phase_retarder() (in module sympy.physics.optics.polarization)": [[145, "sympy.physics.optics.polarization.phase_retarder"]], "polarizing_beam_splitter() (in module sympy.physics.optics.polarization)": [[145, "sympy.physics.optics.polarization.polarizing_beam_splitter"]], "quarter_wave_retarder() (in module sympy.physics.optics.polarization)": [[145, "sympy.physics.optics.polarization.quarter_wave_retarder"]], "reflective_filter() (in module sympy.physics.optics.polarization)": [[145, "sympy.physics.optics.polarization.reflective_filter"]], "stokes_vector() (in module sympy.physics.optics.polarization)": [[145, "sympy.physics.optics.polarization.stokes_vector"]], "sympy.physics.optics.polarization": [[145, "module-sympy.physics.optics.polarization"]], "transmissive_filter() (in module sympy.physics.optics.polarization)": [[145, "sympy.physics.optics.polarization.transmissive_filter"]], "brewster_angle() (in module sympy.physics.optics.utils)": [[146, "sympy.physics.optics.utils.brewster_angle"]], "critical_angle() (in module sympy.physics.optics.utils)": [[146, "sympy.physics.optics.utils.critical_angle"]], "deviation() (in module sympy.physics.optics.utils)": [[146, "sympy.physics.optics.utils.deviation"]], "fresnel_coefficients() (in module sympy.physics.optics.utils)": [[146, "sympy.physics.optics.utils.fresnel_coefficients"]], "hyperfocal_distance() (in module sympy.physics.optics.utils)": [[146, "sympy.physics.optics.utils.hyperfocal_distance"]], "lens_formula() (in module sympy.physics.optics.utils)": [[146, "sympy.physics.optics.utils.lens_formula"]], "lens_makers_formula() (in module sympy.physics.optics.utils)": [[146, "sympy.physics.optics.utils.lens_makers_formula"]], "mirror_formula() (in module sympy.physics.optics.utils)": [[146, "sympy.physics.optics.utils.mirror_formula"]], "refraction_angle() (in module sympy.physics.optics.utils)": [[146, "sympy.physics.optics.utils.refraction_angle"]], "sympy.physics.optics.utils": [[146, "module-sympy.physics.optics.utils"]], "transverse_magnification() (in module sympy.physics.optics.utils)": [[146, "sympy.physics.optics.utils.transverse_magnification"]], "twave (class in sympy.physics.optics.waves)": [[147, "sympy.physics.optics.waves.TWave"]], "amplitude (sympy.physics.optics.waves.twave property)": [[147, "sympy.physics.optics.waves.TWave.amplitude"]], "angular_velocity (sympy.physics.optics.waves.twave property)": [[147, "sympy.physics.optics.waves.TWave.angular_velocity"]], "frequency (sympy.physics.optics.waves.twave property)": [[147, "sympy.physics.optics.waves.TWave.frequency"]], "n (sympy.physics.optics.waves.twave property)": [[147, "sympy.physics.optics.waves.TWave.n"]], "phase (sympy.physics.optics.waves.twave property)": [[147, "sympy.physics.optics.waves.TWave.phase"]], "speed (sympy.physics.optics.waves.twave property)": [[147, "sympy.physics.optics.waves.TWave.speed"]], "sympy.physics.optics.waves": [[147, "module-sympy.physics.optics.waves"]], "time_period (sympy.physics.optics.waves.twave property)": [[147, "sympy.physics.optics.waves.TWave.time_period"]], "wavelength (sympy.physics.optics.waves.twave property)": [[147, "sympy.physics.optics.waves.TWave.wavelength"]], "wavenumber (sympy.physics.optics.waves.twave property)": [[147, "sympy.physics.optics.waves.TWave.wavenumber"]], "evaluate_pauli_product() (in module sympy.physics.paulialgebra)": [[148, "sympy.physics.paulialgebra.evaluate_pauli_product"]], "sympy.physics.paulialgebra": [[148, "module-sympy.physics.paulialgebra"]], "e_n() (in module sympy.physics.qho_1d)": [[149, "sympy.physics.qho_1d.E_n"]], "coherent_state() (in module sympy.physics.qho_1d)": [[149, "sympy.physics.qho_1d.coherent_state"]], "psi_n() (in module sympy.physics.qho_1d)": [[149, "sympy.physics.qho_1d.psi_n"]], "sympy.physics.qho_1d": [[149, "module-sympy.physics.qho_1d"]], "anticommutator (class in sympy.physics.quantum.anticommutator)": [[150, "sympy.physics.quantum.anticommutator.AntiCommutator"]], "doit() (sympy.physics.quantum.anticommutator.anticommutator method)": [[150, "sympy.physics.quantum.anticommutator.AntiCommutator.doit"]], "sympy.physics.quantum.anticommutator": [[150, "module-sympy.physics.quantum.anticommutator"]], "positionbra3d (class in sympy.physics.quantum.cartesian)": [[151, "sympy.physics.quantum.cartesian.PositionBra3D"]], "positionket3d (class in sympy.physics.quantum.cartesian)": [[151, "sympy.physics.quantum.cartesian.PositionKet3D"]], "positionstate3d (class in sympy.physics.quantum.cartesian)": [[151, "sympy.physics.quantum.cartesian.PositionState3D"]], "pxbra (class in sympy.physics.quantum.cartesian)": [[151, "sympy.physics.quantum.cartesian.PxBra"]], "pxket (class in sympy.physics.quantum.cartesian)": [[151, "sympy.physics.quantum.cartesian.PxKet"]], "pxop (class in sympy.physics.quantum.cartesian)": [[151, "sympy.physics.quantum.cartesian.PxOp"]], "xbra (class in sympy.physics.quantum.cartesian)": [[151, "sympy.physics.quantum.cartesian.XBra"]], "xket (class in sympy.physics.quantum.cartesian)": [[151, "sympy.physics.quantum.cartesian.XKet"]], "xop (class in sympy.physics.quantum.cartesian)": [[151, "sympy.physics.quantum.cartesian.XOp"]], "yop (class in sympy.physics.quantum.cartesian)": [[151, "sympy.physics.quantum.cartesian.YOp"]], "zop (class in sympy.physics.quantum.cartesian)": [[151, "sympy.physics.quantum.cartesian.ZOp"]], "momentum (sympy.physics.quantum.cartesian.pxbra property)": [[151, "sympy.physics.quantum.cartesian.PxBra.momentum"]], "momentum (sympy.physics.quantum.cartesian.pxket property)": [[151, "sympy.physics.quantum.cartesian.PxKet.momentum"]], "position (sympy.physics.quantum.cartesian.xbra property)": [[151, "sympy.physics.quantum.cartesian.XBra.position"]], "position (sympy.physics.quantum.cartesian.xket property)": [[151, "sympy.physics.quantum.cartesian.XKet.position"]], "position_x (sympy.physics.quantum.cartesian.positionstate3d property)": [[151, "sympy.physics.quantum.cartesian.PositionState3D.position_x"]], "position_y (sympy.physics.quantum.cartesian.positionstate3d property)": [[151, "sympy.physics.quantum.cartesian.PositionState3D.position_y"]], "position_z (sympy.physics.quantum.cartesian.positionstate3d property)": [[151, "sympy.physics.quantum.cartesian.PositionState3D.position_z"]], "sympy.physics.quantum.cartesian": [[151, "module-sympy.physics.quantum.cartesian"]], "cg (class in sympy.physics.quantum.cg)": [[152, "sympy.physics.quantum.cg.CG"]], "wigner3j (class in sympy.physics.quantum.cg)": [[152, "sympy.physics.quantum.cg.Wigner3j"]], "wigner6j (class in sympy.physics.quantum.cg)": [[152, "sympy.physics.quantum.cg.Wigner6j"]], "wigner9j (class in sympy.physics.quantum.cg)": [[152, "sympy.physics.quantum.cg.Wigner9j"]], "cg_simp() (in module sympy.physics.quantum.cg)": [[152, "sympy.physics.quantum.cg.cg_simp"]], "sympy.physics.quantum.cg": [[152, "module-sympy.physics.quantum.cg"]], "circuitplot (class in sympy.physics.quantum.circuitplot)": [[153, "sympy.physics.quantum.circuitplot.CircuitPlot"]], "createcgate() (in module sympy.physics.quantum.circuitplot)": [[153, "sympy.physics.quantum.circuitplot.CreateCGate"]], "mx (class in sympy.physics.quantum.circuitplot)": [[153, "sympy.physics.quantum.circuitplot.Mx"]], "mz (class in sympy.physics.quantum.circuitplot)": [[153, "sympy.physics.quantum.circuitplot.Mz"]], "circuit_plot() (in module sympy.physics.quantum.circuitplot)": [[153, "sympy.physics.quantum.circuitplot.circuit_plot"]], "control_line() (sympy.physics.quantum.circuitplot.circuitplot method)": [[153, "sympy.physics.quantum.circuitplot.CircuitPlot.control_line"]], "control_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[153, "sympy.physics.quantum.circuitplot.CircuitPlot.control_point"]], "labeller() (in module sympy.physics.quantum.circuitplot)": [[153, "sympy.physics.quantum.circuitplot.labeller"]], "not_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[153, "sympy.physics.quantum.circuitplot.CircuitPlot.not_point"]], "one_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[153, "sympy.physics.quantum.circuitplot.CircuitPlot.one_qubit_box"]], "swap_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[153, "sympy.physics.quantum.circuitplot.CircuitPlot.swap_point"]], "sympy.physics.quantum.circuitplot": [[153, "module-sympy.physics.quantum.circuitplot"]], "two_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[153, "sympy.physics.quantum.circuitplot.CircuitPlot.two_qubit_box"]], "update() (sympy.physics.quantum.circuitplot.circuitplot method)": [[153, "sympy.physics.quantum.circuitplot.CircuitPlot.update"]], "commutator (class in sympy.physics.quantum.commutator)": [[154, "sympy.physics.quantum.commutator.Commutator"]], "doit() (sympy.physics.quantum.commutator.commutator method)": [[154, "sympy.physics.quantum.commutator.Commutator.doit"]], "sympy.physics.quantum.commutator": [[154, "module-sympy.physics.quantum.commutator"]], "hbar (class in sympy.physics.quantum.constants)": [[155, "sympy.physics.quantum.constants.HBar"]], "sympy.physics.quantum.constants": [[155, "module-sympy.physics.quantum.constants"]], "dagger (class in sympy.physics.quantum.dagger)": [[156, "sympy.physics.quantum.dagger.Dagger"]], "sympy.physics.quantum.dagger": [[156, "module-sympy.physics.quantum.dagger"]], "cgate (class in sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.CGate"]], "cgates (class in sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.CGateS"]], "cnot (in module sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.CNOT"]], "cnotgate (class in sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.CNotGate"]], "gate (class in sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.Gate"]], "h (in module sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.H"]], "hadamardgate (class in sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.HadamardGate"]], "identitygate (class in sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.IdentityGate"]], "onequbitgate (class in sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.OneQubitGate"]], "phase (in module sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.Phase"]], "phasegate (class in sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.PhaseGate"]], "s (in module sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.S"]], "swap (in module sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.SWAP"]], "swapgate (class in sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.SwapGate"]], "t (in module sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.T"]], "tgate (class in sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.TGate"]], "twoqubitgate (class in sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.TwoQubitGate"]], "ugate (class in sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.UGate"]], "x (in module sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.X"]], "xgate (class in sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.XGate"]], "y (in module sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.Y"]], "ygate (class in sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.YGate"]], "z (in module sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.Z"]], "zgate (class in sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.ZGate"]], "controls (sympy.physics.quantum.gate.cgate property)": [[157, "sympy.physics.quantum.gate.CGate.controls"]], "controls (sympy.physics.quantum.gate.cnotgate property)": [[157, "sympy.physics.quantum.gate.CNotGate.controls"]], "decompose() (sympy.physics.quantum.gate.cgate method)": [[157, "sympy.physics.quantum.gate.CGate.decompose"]], "decompose() (sympy.physics.quantum.gate.swapgate method)": [[157, "sympy.physics.quantum.gate.SwapGate.decompose"]], "eval_controls() (sympy.physics.quantum.gate.cgate method)": [[157, "sympy.physics.quantum.gate.CGate.eval_controls"]], "gate (sympy.physics.quantum.gate.cgate property)": [[157, "sympy.physics.quantum.gate.CGate.gate"]], "gate (sympy.physics.quantum.gate.cnotgate property)": [[157, "sympy.physics.quantum.gate.CNotGate.gate"]], "gate_simp() (in module sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.gate_simp"]], "gate_sort() (in module sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.gate_sort"]], "get_target_matrix() (sympy.physics.quantum.gate.gate method)": [[157, "sympy.physics.quantum.gate.Gate.get_target_matrix"]], "get_target_matrix() (sympy.physics.quantum.gate.ugate method)": [[157, "sympy.physics.quantum.gate.UGate.get_target_matrix"]], "min_qubits (sympy.physics.quantum.gate.cgate property)": [[157, "sympy.physics.quantum.gate.CGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.cnotgate property)": [[157, "sympy.physics.quantum.gate.CNotGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.gate property)": [[157, "sympy.physics.quantum.gate.Gate.min_qubits"]], "normalized() (in module sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.normalized"]], "nqubits (sympy.physics.quantum.gate.cgate property)": [[157, "sympy.physics.quantum.gate.CGate.nqubits"]], "nqubits (sympy.physics.quantum.gate.gate property)": [[157, "sympy.physics.quantum.gate.Gate.nqubits"]], "plot_gate() (sympy.physics.quantum.gate.cgate method)": [[157, "sympy.physics.quantum.gate.CGate.plot_gate"]], "random_circuit() (in module sympy.physics.quantum.gate)": [[157, "sympy.physics.quantum.gate.random_circuit"]], "sympy.physics.quantum.gate": [[157, "module-sympy.physics.quantum.gate"]], "targets (sympy.physics.quantum.gate.cgate property)": [[157, "sympy.physics.quantum.gate.CGate.targets"]], "targets (sympy.physics.quantum.gate.cnotgate property)": [[157, "sympy.physics.quantum.gate.CNotGate.targets"]], "targets (sympy.physics.quantum.gate.gate property)": [[157, "sympy.physics.quantum.gate.Gate.targets"]], "targets (sympy.physics.quantum.gate.ugate property)": [[157, "sympy.physics.quantum.gate.UGate.targets"]], "oraclegate (class in sympy.physics.quantum.grover)": [[158, "sympy.physics.quantum.grover.OracleGate"]], "wgate (class in sympy.physics.quantum.grover)": [[158, "sympy.physics.quantum.grover.WGate"]], "apply_grover() (in module sympy.physics.quantum.grover)": [[158, "sympy.physics.quantum.grover.apply_grover"]], "grover_iteration() (in module sympy.physics.quantum.grover)": [[158, "sympy.physics.quantum.grover.grover_iteration"]], "search_function (sympy.physics.quantum.grover.oraclegate property)": [[158, "sympy.physics.quantum.grover.OracleGate.search_function"]], "superposition_basis() (in module sympy.physics.quantum.grover)": [[158, "sympy.physics.quantum.grover.superposition_basis"]], "sympy.physics.quantum.grover": [[158, "module-sympy.physics.quantum.grover"]], "targets (sympy.physics.quantum.grover.oraclegate property)": [[158, "sympy.physics.quantum.grover.OracleGate.targets"]], "complexspace (class in sympy.physics.quantum.hilbert)": [[159, "sympy.physics.quantum.hilbert.ComplexSpace"]], "directsumhilbertspace (class in sympy.physics.quantum.hilbert)": [[159, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace"]], "fockspace (class in sympy.physics.quantum.hilbert)": [[159, "sympy.physics.quantum.hilbert.FockSpace"]], "hilbertspace (class in sympy.physics.quantum.hilbert)": [[159, "sympy.physics.quantum.hilbert.HilbertSpace"]], "l2 (class in sympy.physics.quantum.hilbert)": [[159, "sympy.physics.quantum.hilbert.L2"]], "tensorpowerhilbertspace (class in sympy.physics.quantum.hilbert)": [[159, "sympy.physics.quantum.hilbert.TensorPowerHilbertSpace"]], "tensorproducthilbertspace (class in sympy.physics.quantum.hilbert)": [[159, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace"]], "dimension (sympy.physics.quantum.hilbert.hilbertspace property)": [[159, "sympy.physics.quantum.hilbert.HilbertSpace.dimension"]], "eval() (sympy.physics.quantum.hilbert.directsumhilbertspace class method)": [[159, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.eval"]], "eval() (sympy.physics.quantum.hilbert.tensorproducthilbertspace class method)": [[159, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.eval"]], "spaces (sympy.physics.quantum.hilbert.directsumhilbertspace property)": [[159, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.spaces"]], "spaces (sympy.physics.quantum.hilbert.tensorproducthilbertspace property)": [[159, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.spaces"]], "sympy.physics.quantum.hilbert": [[159, "module-sympy.physics.quantum.hilbert"]], "innerproduct (class in sympy.physics.quantum.innerproduct)": [[161, "sympy.physics.quantum.innerproduct.InnerProduct"]], "sympy.physics.quantum.innerproduct": [[161, "module-sympy.physics.quantum.innerproduct"]], "differentialoperator (class in sympy.physics.quantum.operator)": [[162, "sympy.physics.quantum.operator.DifferentialOperator"]], "hermitianoperator (class in sympy.physics.quantum.operator)": [[162, "sympy.physics.quantum.operator.HermitianOperator"]], "identityoperator (class in sympy.physics.quantum.operator)": [[162, "sympy.physics.quantum.operator.IdentityOperator"]], "operator (class in sympy.physics.quantum.operator)": [[162, "sympy.physics.quantum.operator.Operator"]], "outerproduct (class in sympy.physics.quantum.operator)": [[162, "sympy.physics.quantum.operator.OuterProduct"]], "unitaryoperator (class in sympy.physics.quantum.operator)": [[162, "sympy.physics.quantum.operator.UnitaryOperator"]], "bra (sympy.physics.quantum.operator.outerproduct property)": [[162, "sympy.physics.quantum.operator.OuterProduct.bra"]], "expr (sympy.physics.quantum.operator.differentialoperator property)": [[162, "sympy.physics.quantum.operator.DifferentialOperator.expr"]], "free_symbols (sympy.physics.quantum.operator.differentialoperator property)": [[162, "sympy.physics.quantum.operator.DifferentialOperator.free_symbols"]], "function (sympy.physics.quantum.operator.differentialoperator property)": [[162, "sympy.physics.quantum.operator.DifferentialOperator.function"]], "ket (sympy.physics.quantum.operator.outerproduct property)": [[162, "sympy.physics.quantum.operator.OuterProduct.ket"]], "sympy.physics.quantum.operator": [[162, "module-sympy.physics.quantum.operator"]], "variables (sympy.physics.quantum.operator.differentialoperator property)": [[162, "sympy.physics.quantum.operator.DifferentialOperator.variables"]], "operators_to_state() (in module sympy.physics.quantum.operatorset)": [[163, "sympy.physics.quantum.operatorset.operators_to_state"]], "state_to_operators() (in module sympy.physics.quantum.operatorset)": [[163, "sympy.physics.quantum.operatorset.state_to_operators"]], "sympy.physics.quantum.operatorset": [[163, "module-sympy.physics.quantum.operatorset"]], "piabbra (class in sympy.physics.quantum.piab)": [[164, "sympy.physics.quantum.piab.PIABBra"]], "piabhamiltonian (class in sympy.physics.quantum.piab)": [[164, "sympy.physics.quantum.piab.PIABHamiltonian"]], "piabket (class in sympy.physics.quantum.piab)": [[164, "sympy.physics.quantum.piab.PIABKet"]], "sympy.physics.quantum.piab": [[164, "module-sympy.physics.quantum.piab"]], "qapply() (in module sympy.physics.quantum.qapply)": [[165, "sympy.physics.quantum.qapply.qapply"]], "sympy.physics.quantum.qapply": [[165, "module-sympy.physics.quantum.qapply"]], "iqft (class in sympy.physics.quantum.qft)": [[166, "sympy.physics.quantum.qft.IQFT"]], "qft (class in sympy.physics.quantum.qft)": [[166, "sympy.physics.quantum.qft.QFT"]], "rk (in module sympy.physics.quantum.qft)": [[166, "sympy.physics.quantum.qft.Rk"]], "rkgate (class in sympy.physics.quantum.qft)": [[166, "sympy.physics.quantum.qft.RkGate"]], "decompose() (sympy.physics.quantum.qft.iqft method)": [[166, "sympy.physics.quantum.qft.IQFT.decompose"]], "decompose() (sympy.physics.quantum.qft.qft method)": [[166, "sympy.physics.quantum.qft.QFT.decompose"]], "sympy.physics.quantum.qft": [[166, "module-sympy.physics.quantum.qft"]], "intqubit (class in sympy.physics.quantum.qubit)": [[167, "sympy.physics.quantum.qubit.IntQubit"]], "intqubitbra (class in sympy.physics.quantum.qubit)": [[167, "sympy.physics.quantum.qubit.IntQubitBra"]], "qubit (class in sympy.physics.quantum.qubit)": [[167, "sympy.physics.quantum.qubit.Qubit"]], "qubitbra (class in sympy.physics.quantum.qubit)": [[167, "sympy.physics.quantum.qubit.QubitBra"]], "matrix_to_density() (in module sympy.physics.quantum.qubit)": [[167, "sympy.physics.quantum.qubit.matrix_to_density"]], "matrix_to_qubit() (in module sympy.physics.quantum.qubit)": [[167, "sympy.physics.quantum.qubit.matrix_to_qubit"]], "measure_all() (in module sympy.physics.quantum.qubit)": [[167, "sympy.physics.quantum.qubit.measure_all"]], "measure_all_oneshot() (in module sympy.physics.quantum.qubit)": [[167, "sympy.physics.quantum.qubit.measure_all_oneshot"]], "measure_partial() (in module sympy.physics.quantum.qubit)": [[167, "sympy.physics.quantum.qubit.measure_partial"]], "measure_partial_oneshot() (in module sympy.physics.quantum.qubit)": [[167, "sympy.physics.quantum.qubit.measure_partial_oneshot"]], "qubit_to_matrix() (in module sympy.physics.quantum.qubit)": [[167, "sympy.physics.quantum.qubit.qubit_to_matrix"]], "sympy.physics.quantum.qubit": [[167, "module-sympy.physics.quantum.qubit"]], "enumerate_states() (in module sympy.physics.quantum.represent)": [[168, "sympy.physics.quantum.represent.enumerate_states"]], "get_basis() (in module sympy.physics.quantum.represent)": [[168, "sympy.physics.quantum.represent.get_basis"]], "integrate_result() (in module sympy.physics.quantum.represent)": [[168, "sympy.physics.quantum.represent.integrate_result"]], "rep_expectation() (in module sympy.physics.quantum.represent)": [[168, "sympy.physics.quantum.represent.rep_expectation"]], "rep_innerproduct() (in module sympy.physics.quantum.represent)": [[168, "sympy.physics.quantum.represent.rep_innerproduct"]], "represent() (in module sympy.physics.quantum.represent)": [[168, "sympy.physics.quantum.represent.represent"]], "sympy.physics.quantum.represent": [[168, "module-sympy.physics.quantum.represent"]], "cmod (class in sympy.physics.quantum.shor)": [[169, "sympy.physics.quantum.shor.CMod"]], "n (sympy.physics.quantum.shor.cmod property)": [[169, "sympy.physics.quantum.shor.CMod.N"]], "a (sympy.physics.quantum.shor.cmod property)": [[169, "sympy.physics.quantum.shor.CMod.a"]], "period_find() (in module sympy.physics.quantum.shor)": [[169, "sympy.physics.quantum.shor.period_find"]], "shor() (in module sympy.physics.quantum.shor)": [[169, "sympy.physics.quantum.shor.shor"]], "sympy.physics.quantum.shor": [[169, "module-sympy.physics.quantum.shor"]], "t (sympy.physics.quantum.shor.cmod property)": [[169, "sympy.physics.quantum.shor.CMod.t"]], "d() (sympy.physics.quantum.spin.rotation class method)": [[170, "sympy.physics.quantum.spin.Rotation.D"], [170, "sympy.physics.quantum.spin.Rotation.d"]], "j2op (class in sympy.physics.quantum.spin)": [[170, "sympy.physics.quantum.spin.J2Op"]], "jxbra (class in sympy.physics.quantum.spin)": [[170, "sympy.physics.quantum.spin.JxBra"]], "jxbracoupled (class in sympy.physics.quantum.spin)": [[170, "sympy.physics.quantum.spin.JxBraCoupled"]], "jxket (class in sympy.physics.quantum.spin)": [[170, "sympy.physics.quantum.spin.JxKet"]], "jxketcoupled (class in sympy.physics.quantum.spin)": [[170, "sympy.physics.quantum.spin.JxKetCoupled"]], "jybra (class in sympy.physics.quantum.spin)": [[170, "sympy.physics.quantum.spin.JyBra"]], "jybracoupled (class in sympy.physics.quantum.spin)": [[170, "sympy.physics.quantum.spin.JyBraCoupled"]], "jyket (class in sympy.physics.quantum.spin)": [[170, "sympy.physics.quantum.spin.JyKet"]], "jyketcoupled (class in sympy.physics.quantum.spin)": [[170, "sympy.physics.quantum.spin.JyKetCoupled"]], "jzbra (class in sympy.physics.quantum.spin)": [[170, "sympy.physics.quantum.spin.JzBra"]], "jzbracoupled (class in sympy.physics.quantum.spin)": [[170, "sympy.physics.quantum.spin.JzBraCoupled"]], "jzket (class in sympy.physics.quantum.spin)": [[170, "sympy.physics.quantum.spin.JzKet"]], "jzketcoupled (class in sympy.physics.quantum.spin)": [[170, "sympy.physics.quantum.spin.JzKetCoupled"]], "jzop (class in sympy.physics.quantum.spin)": [[170, "sympy.physics.quantum.spin.JzOp"]], "rotation (class in sympy.physics.quantum.spin)": [[170, "sympy.physics.quantum.spin.Rotation"]], "wignerd (class in sympy.physics.quantum.spin)": [[170, "sympy.physics.quantum.spin.WignerD"]], "couple() (in module sympy.physics.quantum.spin)": [[170, "sympy.physics.quantum.spin.couple"]], "sympy.physics.quantum.spin": [[170, "module-sympy.physics.quantum.spin"]], "uncouple() (in module sympy.physics.quantum.spin)": [[170, "sympy.physics.quantum.spin.uncouple"]], "bra (class in sympy.physics.quantum.state)": [[171, "sympy.physics.quantum.state.Bra"]], "brabase (class in sympy.physics.quantum.state)": [[171, "sympy.physics.quantum.state.BraBase"]], "ket (class in sympy.physics.quantum.state)": [[171, "sympy.physics.quantum.state.Ket"]], "ketbase (class in sympy.physics.quantum.state)": [[171, "sympy.physics.quantum.state.KetBase"]], "orthogonalbra (class in sympy.physics.quantum.state)": [[171, "sympy.physics.quantum.state.OrthogonalBra"]], "orthogonalket (class in sympy.physics.quantum.state)": [[171, "sympy.physics.quantum.state.OrthogonalKet"]], "orthogonalstate (class in sympy.physics.quantum.state)": [[171, "sympy.physics.quantum.state.OrthogonalState"]], "state (class in sympy.physics.quantum.state)": [[171, "sympy.physics.quantum.state.State"]], "statebase (class in sympy.physics.quantum.state)": [[171, "sympy.physics.quantum.state.StateBase"]], "timedepbra (class in sympy.physics.quantum.state)": [[171, "sympy.physics.quantum.state.TimeDepBra"]], "timedepket (class in sympy.physics.quantum.state)": [[171, "sympy.physics.quantum.state.TimeDepKet"]], "timedepstate (class in sympy.physics.quantum.state)": [[171, "sympy.physics.quantum.state.TimeDepState"]], "wavefunction (class in sympy.physics.quantum.state)": [[171, "sympy.physics.quantum.state.Wavefunction"]], "dual (sympy.physics.quantum.state.statebase property)": [[171, "sympy.physics.quantum.state.StateBase.dual"]], "dual_class() (sympy.physics.quantum.state.statebase class method)": [[171, "sympy.physics.quantum.state.StateBase.dual_class"]], "expr (sympy.physics.quantum.state.wavefunction property)": [[171, "sympy.physics.quantum.state.Wavefunction.expr"]], "is_commutative (sympy.physics.quantum.state.wavefunction property)": [[171, "sympy.physics.quantum.state.Wavefunction.is_commutative"]], "is_normalized (sympy.physics.quantum.state.wavefunction property)": [[171, "sympy.physics.quantum.state.Wavefunction.is_normalized"]], "label (sympy.physics.quantum.state.timedepstate property)": [[171, "sympy.physics.quantum.state.TimeDepState.label"]], "limits (sympy.physics.quantum.state.wavefunction property)": [[171, "sympy.physics.quantum.state.Wavefunction.limits"]], "norm (sympy.physics.quantum.state.wavefunction property)": [[171, "sympy.physics.quantum.state.Wavefunction.norm"]], "normalize() (sympy.physics.quantum.state.wavefunction method)": [[171, "sympy.physics.quantum.state.Wavefunction.normalize"]], "operators (sympy.physics.quantum.state.statebase property)": [[171, "sympy.physics.quantum.state.StateBase.operators"]], "prob() (sympy.physics.quantum.state.wavefunction method)": [[171, "sympy.physics.quantum.state.Wavefunction.prob"]], "sympy.physics.quantum.state": [[171, "module-sympy.physics.quantum.state"]], "time (sympy.physics.quantum.state.timedepstate property)": [[171, "sympy.physics.quantum.state.TimeDepState.time"]], "variables (sympy.physics.quantum.state.wavefunction property)": [[171, "sympy.physics.quantum.state.Wavefunction.variables"]], "tensorproduct (class in sympy.physics.quantum.tensorproduct)": [[172, "sympy.physics.quantum.tensorproduct.TensorProduct"]], "sympy.physics.quantum.tensorproduct": [[172, "module-sympy.physics.quantum.tensorproduct"]], "tensor_product_simp() (in module sympy.physics.quantum.tensorproduct)": [[172, "sympy.physics.quantum.tensorproduct.tensor_product_simp"]], "annihilateboson (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.AnnihilateBoson"]], "annihilatefermion (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.AnnihilateFermion"]], "antisymmetrictensor (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.AntiSymmetricTensor"]], "b (in module sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.B"]], "bbra (in module sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.BBra"]], "bket (in module sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.BKet"]], "bd (in module sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.Bd"]], "bosonicbasis (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.BosonicBasis"]], "commutator (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.Commutator"]], "createboson (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.CreateBoson"]], "createfermion (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.CreateFermion"]], "dagger (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.Dagger"]], "f (in module sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.F"]], "fbra (in module sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.FBra"]], "fket (in module sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.FKet"]], "fd (in module sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.Fd"]], "fixedbosonicbasis (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.FixedBosonicBasis"]], "fockstate (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.FockState"]], "fockstatebosonbra (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.FockStateBosonBra"]], "fockstatebosonket (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.FockStateBosonKet"]], "fockstatebra (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.FockStateBra"]], "fockstatefermionbra (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.FockStateFermionBra"]], "fockstatefermionket (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.FockStateFermionKet"]], "fockstateket (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.FockStateKet"]], "innerproduct (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.InnerProduct"]], "kroneckerdelta (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.KroneckerDelta"]], "no (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.NO"]], "permutationoperator (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.PermutationOperator"]], "varbosonicbasis (class in sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.VarBosonicBasis"]], "apply_operator() (sympy.physics.secondquant.annihilateboson method)": [[173, "sympy.physics.secondquant.AnnihilateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.annihilatefermion method)": [[173, "sympy.physics.secondquant.AnnihilateFermion.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createboson method)": [[173, "sympy.physics.secondquant.CreateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createfermion method)": [[173, "sympy.physics.secondquant.CreateFermion.apply_operator"]], "apply_operators() (in module sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.apply_operators"]], "bra (sympy.physics.secondquant.innerproduct property)": [[173, "sympy.physics.secondquant.InnerProduct.bra"]], "contraction() (in module sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.contraction"]], "doit() (sympy.physics.secondquant.commutator method)": [[173, "sympy.physics.secondquant.Commutator.doit"]], "doit() (sympy.physics.secondquant.no method)": [[173, "sympy.physics.secondquant.NO.doit"]], "eval() (sympy.physics.secondquant.commutator class method)": [[173, "sympy.physics.secondquant.Commutator.eval"]], "eval() (sympy.physics.secondquant.dagger class method)": [[173, "sympy.physics.secondquant.Dagger.eval"]], "eval() (sympy.physics.secondquant.kroneckerdelta class method)": [[173, "sympy.physics.secondquant.KroneckerDelta.eval"]], "evaluate_deltas() (in module sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.evaluate_deltas"]], "get_permuted() (sympy.physics.secondquant.permutationoperator method)": [[173, "sympy.physics.secondquant.PermutationOperator.get_permuted"]], "get_subno() (sympy.physics.secondquant.no method)": [[173, "sympy.physics.secondquant.NO.get_subNO"]], "has_q_annihilators (sympy.physics.secondquant.no property)": [[173, "sympy.physics.secondquant.NO.has_q_annihilators"]], "has_q_creators (sympy.physics.secondquant.no property)": [[173, "sympy.physics.secondquant.NO.has_q_creators"]], "index() (sympy.physics.secondquant.fixedbosonicbasis method)": [[173, "sympy.physics.secondquant.FixedBosonicBasis.index"]], "index() (sympy.physics.secondquant.varbosonicbasis method)": [[173, "sympy.physics.secondquant.VarBosonicBasis.index"]], "indices_contain_equal_information (sympy.physics.secondquant.kroneckerdelta property)": [[173, "sympy.physics.secondquant.KroneckerDelta.indices_contain_equal_information"]], "is_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[173, "sympy.physics.secondquant.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[173, "sympy.physics.secondquant.KroneckerDelta.is_below_fermi"]], "is_only_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[173, "sympy.physics.secondquant.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[173, "sympy.physics.secondquant.KroneckerDelta.is_only_below_fermi"]], "is_only_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[173, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_annihilator"]], "is_only_q_annihilator (sympy.physics.secondquant.createfermion property)": [[173, "sympy.physics.secondquant.CreateFermion.is_only_q_annihilator"]], "is_only_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[173, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_creator"]], "is_only_q_creator (sympy.physics.secondquant.createfermion property)": [[173, "sympy.physics.secondquant.CreateFermion.is_only_q_creator"]], "is_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[173, "sympy.physics.secondquant.AnnihilateFermion.is_q_annihilator"]], "is_q_annihilator (sympy.physics.secondquant.createfermion property)": [[173, "sympy.physics.secondquant.CreateFermion.is_q_annihilator"]], "is_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[173, "sympy.physics.secondquant.AnnihilateFermion.is_q_creator"]], "is_q_creator (sympy.physics.secondquant.createfermion property)": [[173, "sympy.physics.secondquant.CreateFermion.is_q_creator"]], "iter_q_annihilators() (sympy.physics.secondquant.no method)": [[173, "sympy.physics.secondquant.NO.iter_q_annihilators"]], "iter_q_creators() (sympy.physics.secondquant.no method)": [[173, "sympy.physics.secondquant.NO.iter_q_creators"]], "ket (sympy.physics.secondquant.innerproduct property)": [[173, "sympy.physics.secondquant.InnerProduct.ket"]], "killable_index (sympy.physics.secondquant.kroneckerdelta property)": [[173, "sympy.physics.secondquant.KroneckerDelta.killable_index"]], "lower (sympy.physics.secondquant.antisymmetrictensor property)": [[173, "sympy.physics.secondquant.AntiSymmetricTensor.lower"]], "matrix_rep() (in module sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.matrix_rep"]], "preferred_index (sympy.physics.secondquant.kroneckerdelta property)": [[173, "sympy.physics.secondquant.KroneckerDelta.preferred_index"]], "simplify_index_permutations() (in module sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.simplify_index_permutations"]], "state() (sympy.physics.secondquant.fixedbosonicbasis method)": [[173, "sympy.physics.secondquant.FixedBosonicBasis.state"]], "state() (sympy.physics.secondquant.varbosonicbasis method)": [[173, "sympy.physics.secondquant.VarBosonicBasis.state"]], "substitute_dummies() (in module sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.substitute_dummies"]], "symbol (sympy.physics.secondquant.antisymmetrictensor property)": [[173, "sympy.physics.secondquant.AntiSymmetricTensor.symbol"]], "sympy.physics.secondquant": [[173, "module-sympy.physics.secondquant"]], "upper (sympy.physics.secondquant.antisymmetrictensor property)": [[173, "sympy.physics.secondquant.AntiSymmetricTensor.upper"]], "wicks() (in module sympy.physics.secondquant)": [[173, "sympy.physics.secondquant.wicks"]], "e_nl() (in module sympy.physics.sho)": [[174, "sympy.physics.sho.E_nl"]], "r_nl() (in module sympy.physics.sho)": [[174, "sympy.physics.sho.R_nl"]], "sympy.physics.sho": [[174, "module-sympy.physics.sho"]], "dimension (class in sympy.physics.units.dimensions)": [[175, "sympy.physics.units.dimensions.Dimension"]], "dimensionsystem (class in sympy.physics.units.dimensions)": [[175, "sympy.physics.units.dimensions.DimensionSystem"]], "can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[175, "sympy.physics.units.dimensions.DimensionSystem.can_transf_matrix"]], "dim (sympy.physics.units.dimensions.dimensionsystem property)": [[175, "sympy.physics.units.dimensions.DimensionSystem.dim"]], "dim_can_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[175, "sympy.physics.units.dimensions.DimensionSystem.dim_can_vector"]], "dim_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[175, "sympy.physics.units.dimensions.DimensionSystem.dim_vector"]], "has_integer_powers() (sympy.physics.units.dimensions.dimension method)": [[175, "sympy.physics.units.dimensions.Dimension.has_integer_powers"]], "inv_can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[175, "sympy.physics.units.dimensions.DimensionSystem.inv_can_transf_matrix"]], "is_consistent (sympy.physics.units.dimensions.dimensionsystem property)": [[175, "sympy.physics.units.dimensions.DimensionSystem.is_consistent"]], "is_dimensionless() (sympy.physics.units.dimensions.dimensionsystem method)": [[175, "sympy.physics.units.dimensions.DimensionSystem.is_dimensionless"]], "list_can_dims (sympy.physics.units.dimensions.dimensionsystem property)": [[175, "sympy.physics.units.dimensions.DimensionSystem.list_can_dims"]], "print_dim_base() (sympy.physics.units.dimensions.dimensionsystem method)": [[175, "sympy.physics.units.dimensions.DimensionSystem.print_dim_base"]], "sympy.physics.units.dimensions": [[175, "module-sympy.physics.units.dimensions"]], "prefix (class in sympy.physics.units.prefixes)": [[179, "sympy.physics.units.prefixes.Prefix"]], "sympy.physics.units.prefixes": [[179, "module-sympy.physics.units.prefixes"]], "quantity (class in sympy.physics.units.quantities)": [[180, "sympy.physics.units.quantities.Quantity"]], "abbrev (sympy.physics.units.quantities.quantity property)": [[180, "sympy.physics.units.quantities.Quantity.abbrev"]], "convert_to() (in module sympy.physics.units.util)": [[180, "sympy.physics.units.util.convert_to"]], "convert_to() (sympy.physics.units.quantities.quantity method)": [[180, "sympy.physics.units.quantities.Quantity.convert_to"]], "free_symbols (sympy.physics.units.quantities.quantity property)": [[180, "sympy.physics.units.quantities.Quantity.free_symbols"]], "is_prefixed (sympy.physics.units.quantities.quantity property)": [[180, "sympy.physics.units.quantities.Quantity.is_prefixed"]], "scale_factor (sympy.physics.units.quantities.quantity property)": [[180, "sympy.physics.units.quantities.Quantity.scale_factor"]], "set_global_relative_scale_factor() (sympy.physics.units.quantities.quantity method)": [[180, "sympy.physics.units.quantities.Quantity.set_global_relative_scale_factor"]], "sympy.physics.units.quantities": [[180, "module-sympy.physics.units.quantities"]], "sympy.physics.units.util": [[180, "module-sympy.physics.units.util"]], "unitsystem (class in sympy.physics.units.unitsystem)": [[181, "sympy.physics.units.unitsystem.UnitSystem"]], "dim (sympy.physics.units.unitsystem.unitsystem property)": [[181, "sympy.physics.units.unitsystem.UnitSystem.dim"]], "extend() (sympy.physics.units.unitsystem.unitsystem method)": [[181, "sympy.physics.units.unitsystem.UnitSystem.extend"]], "get_units_non_prefixed() (sympy.physics.units.unitsystem.unitsystem method)": [[181, "sympy.physics.units.unitsystem.UnitSystem.get_units_non_prefixed"]], "is_consistent (sympy.physics.units.unitsystem.unitsystem property)": [[181, "sympy.physics.units.unitsystem.UnitSystem.is_consistent"]], "sympy.physics.units.unitsystem": [[181, "module-sympy.physics.units.unitsystem"]], "coordinatesym (class in sympy.physics.vector.frame)": [[183, "sympy.physics.vector.frame.CoordinateSym"]], "dyadic (class in sympy.physics.vector.dyadic)": [[183, "sympy.physics.vector.dyadic.Dyadic"]], "referenceframe (class in sympy.physics.vector.frame)": [[183, "sympy.physics.vector.frame.ReferenceFrame"]], "vector (class in sympy.physics.vector.vector)": [[183, "sympy.physics.vector.vector.Vector"]], "ang_acc_in() (sympy.physics.vector.frame.referenceframe method)": [[183, "sympy.physics.vector.frame.ReferenceFrame.ang_acc_in"]], "ang_vel_in() (sympy.physics.vector.frame.referenceframe method)": [[183, "sympy.physics.vector.frame.ReferenceFrame.ang_vel_in"]], "angle_between() (sympy.physics.vector.vector.vector method)": [[183, "sympy.physics.vector.vector.Vector.angle_between"]], "applyfunc() (sympy.physics.vector.dyadic.dyadic method)": [[183, "sympy.physics.vector.dyadic.Dyadic.applyfunc"]], "applyfunc() (sympy.physics.vector.vector.vector method)": [[183, "sympy.physics.vector.vector.Vector.applyfunc"]], "cross() (sympy.physics.vector.dyadic.dyadic method)": [[183, "sympy.physics.vector.dyadic.Dyadic.cross"]], "cross() (sympy.physics.vector.vector.vector method)": [[183, "sympy.physics.vector.vector.Vector.cross"]], "dcm() (sympy.physics.vector.frame.referenceframe method)": [[183, "sympy.physics.vector.frame.ReferenceFrame.dcm"]], "diff() (sympy.physics.vector.vector.vector method)": [[183, "sympy.physics.vector.vector.Vector.diff"]], "doit() (sympy.physics.vector.dyadic.dyadic method)": [[183, "sympy.physics.vector.dyadic.Dyadic.doit"]], "doit() (sympy.physics.vector.vector.vector method)": [[183, "sympy.physics.vector.vector.Vector.doit"]], "dot() (sympy.physics.vector.dyadic.dyadic method)": [[183, "sympy.physics.vector.dyadic.Dyadic.dot"]], "dot() (sympy.physics.vector.vector.vector method)": [[183, "sympy.physics.vector.vector.Vector.dot"]], "dt() (sympy.physics.vector.dyadic.dyadic method)": [[183, "sympy.physics.vector.dyadic.Dyadic.dt"]], "dt() (sympy.physics.vector.vector.vector method)": [[183, "sympy.physics.vector.vector.Vector.dt"]], "express() (sympy.physics.vector.dyadic.dyadic method)": [[183, "sympy.physics.vector.dyadic.Dyadic.express"]], "express() (sympy.physics.vector.vector.vector method)": [[183, "sympy.physics.vector.vector.Vector.express"]], "free_dynamicsymbols() (sympy.physics.vector.vector.vector method)": [[183, "sympy.physics.vector.vector.Vector.free_dynamicsymbols"]], "free_symbols() (sympy.physics.vector.vector.vector method)": [[183, "sympy.physics.vector.vector.Vector.free_symbols"]], "func (sympy.physics.vector.dyadic.dyadic property)": [[183, "sympy.physics.vector.dyadic.Dyadic.func"]], "func (sympy.physics.vector.vector.vector property)": [[183, "sympy.physics.vector.vector.Vector.func"]], "magnitude() (sympy.physics.vector.vector.vector method)": [[183, "sympy.physics.vector.vector.Vector.magnitude"]], "normalize() (sympy.physics.vector.vector.vector method)": [[183, "sympy.physics.vector.vector.Vector.normalize"]], "orient() (sympy.physics.vector.frame.referenceframe method)": [[183, "sympy.physics.vector.frame.ReferenceFrame.orient"]], "orient_axis() (sympy.physics.vector.frame.referenceframe method)": [[183, "sympy.physics.vector.frame.ReferenceFrame.orient_axis"]], "orient_body_fixed() (sympy.physics.vector.frame.referenceframe method)": [[183, "sympy.physics.vector.frame.ReferenceFrame.orient_body_fixed"]], "orient_explicit() (sympy.physics.vector.frame.referenceframe method)": [[183, "sympy.physics.vector.frame.ReferenceFrame.orient_explicit"]], "orient_quaternion() (sympy.physics.vector.frame.referenceframe method)": [[183, "sympy.physics.vector.frame.ReferenceFrame.orient_quaternion"]], "orient_space_fixed() (sympy.physics.vector.frame.referenceframe method)": [[183, "sympy.physics.vector.frame.ReferenceFrame.orient_space_fixed"]], "orientnew() (sympy.physics.vector.frame.referenceframe method)": [[183, "sympy.physics.vector.frame.ReferenceFrame.orientnew"]], "outer() (sympy.physics.vector.vector.vector method)": [[183, "sympy.physics.vector.vector.Vector.outer"]], "partial_velocity() (sympy.physics.vector.frame.referenceframe method)": [[183, "sympy.physics.vector.frame.ReferenceFrame.partial_velocity"]], "separate() (sympy.physics.vector.vector.vector method)": [[183, "sympy.physics.vector.vector.Vector.separate"]], "set_ang_acc() (sympy.physics.vector.frame.referenceframe method)": [[183, "sympy.physics.vector.frame.ReferenceFrame.set_ang_acc"]], "set_ang_vel() (sympy.physics.vector.frame.referenceframe method)": [[183, "sympy.physics.vector.frame.ReferenceFrame.set_ang_vel"]], "simplify() (sympy.physics.vector.dyadic.dyadic method)": [[183, "sympy.physics.vector.dyadic.Dyadic.simplify"]], "simplify() (sympy.physics.vector.vector.vector method)": [[183, "sympy.physics.vector.vector.Vector.simplify"]], "subs() (sympy.physics.vector.dyadic.dyadic method)": [[183, "sympy.physics.vector.dyadic.Dyadic.subs"]], "subs() (sympy.physics.vector.vector.vector method)": [[183, "sympy.physics.vector.vector.Vector.subs"]], "to_matrix() (sympy.physics.vector.dyadic.dyadic method)": [[183, "sympy.physics.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.physics.vector.vector.vector method)": [[183, "sympy.physics.vector.vector.Vector.to_matrix"]], "variable_map() (sympy.physics.vector.frame.referenceframe method)": [[183, "sympy.physics.vector.frame.ReferenceFrame.variable_map"]], "x (sympy.physics.vector.frame.referenceframe property)": [[183, "sympy.physics.vector.frame.ReferenceFrame.x"]], "xreplace() (sympy.physics.vector.dyadic.dyadic method)": [[183, "sympy.physics.vector.dyadic.Dyadic.xreplace"]], "xreplace() (sympy.physics.vector.vector.vector method)": [[183, "sympy.physics.vector.vector.Vector.xreplace"]], "y (sympy.physics.vector.frame.referenceframe property)": [[183, "sympy.physics.vector.frame.ReferenceFrame.y"]], "z (sympy.physics.vector.frame.referenceframe property)": [[183, "sympy.physics.vector.frame.ReferenceFrame.z"]], "curl() (in module sympy.physics.vector.fieldfunctions)": [[184, "sympy.physics.vector.fieldfunctions.curl"]], "divergence() (in module sympy.physics.vector.fieldfunctions)": [[184, "sympy.physics.vector.fieldfunctions.divergence"]], "gradient() (in module sympy.physics.vector.fieldfunctions)": [[184, "sympy.physics.vector.fieldfunctions.gradient"]], "is_conservative() (in module sympy.physics.vector.fieldfunctions)": [[184, "sympy.physics.vector.fieldfunctions.is_conservative"]], "is_solenoidal() (in module sympy.physics.vector.fieldfunctions)": [[184, "sympy.physics.vector.fieldfunctions.is_solenoidal"]], "scalar_potential() (in module sympy.physics.vector.fieldfunctions)": [[184, "sympy.physics.vector.fieldfunctions.scalar_potential"]], "scalar_potential_difference() (in module sympy.physics.vector.fieldfunctions)": [[184, "sympy.physics.vector.fieldfunctions.scalar_potential_difference"]], "cross() (in module sympy.physics.vector.functions)": [[185, "sympy.physics.vector.functions.cross"]], "dot() (in module sympy.physics.vector.functions)": [[185, "sympy.physics.vector.functions.dot"]], "dynamicsymbols() (in module sympy.physics.vector)": [[185, "sympy.physics.vector.dynamicsymbols"]], "express() (in module sympy.physics.vector.functions)": [[185, "sympy.physics.vector.functions.express"]], "outer() (in module sympy.physics.vector.functions)": [[185, "sympy.physics.vector.functions.outer"]], "time_derivative() (in module sympy.physics.vector.functions)": [[185, "sympy.physics.vector.functions.time_derivative"]], "point (class in sympy.physics.vector.point)": [[187, "sympy.physics.vector.point.Point"]], "a1pt_theory() (sympy.physics.vector.point.point method)": [[187, "sympy.physics.vector.point.Point.a1pt_theory"]], "a2pt_theory() (sympy.physics.vector.point.point method)": [[187, "sympy.physics.vector.point.Point.a2pt_theory"]], "acc() (sympy.physics.vector.point.point method)": [[187, "sympy.physics.vector.point.Point.acc"]], "get_motion_params() (in module sympy.physics.vector.functions)": [[187, "sympy.physics.vector.functions.get_motion_params"]], "kinematic_equations() (in module sympy.physics.vector.functions)": [[187, "sympy.physics.vector.functions.kinematic_equations"]], "locatenew() (sympy.physics.vector.point.point method)": [[187, "sympy.physics.vector.point.Point.locatenew"]], "partial_velocity() (in module sympy.physics.vector.functions)": [[187, "sympy.physics.vector.functions.partial_velocity"]], "partial_velocity() (sympy.physics.vector.point.point method)": [[187, "sympy.physics.vector.point.Point.partial_velocity"]], "pos_from() (sympy.physics.vector.point.point method)": [[187, "sympy.physics.vector.point.Point.pos_from"]], "set_acc() (sympy.physics.vector.point.point method)": [[187, "sympy.physics.vector.point.Point.set_acc"]], "set_pos() (sympy.physics.vector.point.point method)": [[187, "sympy.physics.vector.point.Point.set_pos"]], "set_vel() (sympy.physics.vector.point.point method)": [[187, "sympy.physics.vector.point.Point.set_vel"]], "sympy.physics.vector.functions": [[187, "module-sympy.physics.vector.functions"]], "sympy.physics.vector.point": [[187, "module-sympy.physics.vector.point"]], "v1pt_theory() (sympy.physics.vector.point.point method)": [[187, "sympy.physics.vector.point.Point.v1pt_theory"]], "v2pt_theory() (sympy.physics.vector.point.point method)": [[187, "sympy.physics.vector.point.Point.v2pt_theory"]], "vel() (sympy.physics.vector.point.point method)": [[187, "sympy.physics.vector.point.Point.vel"]], "init_vprinting() (in module sympy.physics.vector.printing)": [[188, "sympy.physics.vector.printing.init_vprinting"]], "vlatex() (in module sympy.physics.vector.printing)": [[188, "sympy.physics.vector.printing.vlatex"]], "vpprint() (in module sympy.physics.vector.printing)": [[188, "sympy.physics.vector.printing.vpprint"]], "vprint() (in module sympy.physics.vector.printing)": [[188, "sympy.physics.vector.printing.vprint"]], "sympy.physics.vector": [[190, "module-sympy.physics.vector"]], "clebsch_gordan() (in module sympy.physics.wigner)": [[193, "sympy.physics.wigner.clebsch_gordan"]], "dot_rot_grad_ynm() (in module sympy.physics.wigner)": [[193, "sympy.physics.wigner.dot_rot_grad_Ynm"]], "gaunt() (in module sympy.physics.wigner)": [[193, "sympy.physics.wigner.gaunt"]], "racah() (in module sympy.physics.wigner)": [[193, "sympy.physics.wigner.racah"]], "real_gaunt() (in module sympy.physics.wigner)": [[193, "sympy.physics.wigner.real_gaunt"]], "sympy.physics.wigner": [[193, "module-sympy.physics.wigner"]], "wigner_3j() (in module sympy.physics.wigner)": [[193, "sympy.physics.wigner.wigner_3j"]], "wigner_6j() (in module sympy.physics.wigner)": [[193, "sympy.physics.wigner.wigner_6j"]], "wigner_9j() (in module sympy.physics.wigner)": [[193, "sympy.physics.wigner.wigner_9j"]], "wigner_d() (in module sympy.physics.wigner)": [[193, "sympy.physics.wigner.wigner_d"]], "wigner_d_small() (in module sympy.physics.wigner)": [[193, "sympy.physics.wigner.wigner_d_small"]], "basebackend (class in sympy.plotting.plot)": [[194, "sympy.plotting.plot.BaseBackend"]], "baseseries (class in sympy.plotting.plot)": [[194, "sympy.plotting.plot.BaseSeries"]], "implicitseries (class in sympy.plotting.plot_implicit)": [[194, "sympy.plotting.plot_implicit.ImplicitSeries"]], "line2dbaseseries (class in sympy.plotting.plot)": [[194, "sympy.plotting.plot.Line2DBaseSeries"]], "line3dbaseseries (class in sympy.plotting.plot)": [[194, "sympy.plotting.plot.Line3DBaseSeries"]], "lineover1drangeseries (class in sympy.plotting.plot)": [[194, "sympy.plotting.plot.LineOver1DRangeSeries"]], "matplotlibbackend (class in sympy.plotting.plot)": [[194, "sympy.plotting.plot.MatplotlibBackend"]], "parametric2dlineseries (class in sympy.plotting.plot)": [[194, "sympy.plotting.plot.Parametric2DLineSeries"]], "parametric3dlineseries (class in sympy.plotting.plot)": [[194, "sympy.plotting.plot.Parametric3DLineSeries"]], "parametricsurfaceseries (class in sympy.plotting.plot)": [[194, "sympy.plotting.plot.ParametricSurfaceSeries"]], "plot (class in sympy.plotting.plot)": [[194, "sympy.plotting.plot.Plot"]], "plotgrid (class in sympy.plotting.plot)": [[194, "sympy.plotting.plot.PlotGrid"]], "surfacebaseseries (class in sympy.plotting.plot)": [[194, "sympy.plotting.plot.SurfaceBaseSeries"]], "surfaceover2drangeseries (class in sympy.plotting.plot)": [[194, "sympy.plotting.plot.SurfaceOver2DRangeSeries"]], "textbackend (class in sympy.plotting.plot)": [[194, "sympy.plotting.plot.TextBackend"]], "append() (sympy.plotting.plot.plot method)": [[194, "sympy.plotting.plot.Plot.append"]], "extend() (sympy.plotting.plot.plot method)": [[194, "sympy.plotting.plot.Plot.extend"]], "get_data() (sympy.plotting.plot.line2dbaseseries method)": [[194, "sympy.plotting.plot.Line2DBaseSeries.get_data"]], "get_points() (sympy.plotting.plot.lineover1drangeseries method)": [[194, "sympy.plotting.plot.LineOver1DRangeSeries.get_points"]], "get_points() (sympy.plotting.plot.parametric2dlineseries method)": [[194, "sympy.plotting.plot.Parametric2DLineSeries.get_points"]], "get_segments() (sympy.plotting.plot.matplotlibbackend static method)": [[194, "sympy.plotting.plot.MatplotlibBackend.get_segments"]], "plot() (in module sympy.plotting.plot)": [[194, "sympy.plotting.plot.plot"]], "plot3d() (in module sympy.plotting.plot)": [[194, "sympy.plotting.plot.plot3d"]], "plot3d_parametric_line() (in module sympy.plotting.plot)": [[194, "sympy.plotting.plot.plot3d_parametric_line"]], "plot3d_parametric_surface() (in module sympy.plotting.plot)": [[194, "sympy.plotting.plot.plot3d_parametric_surface"]], "plot_implicit() (in module sympy.plotting.plot_implicit)": [[194, "sympy.plotting.plot_implicit.plot_implicit"]], "plot_parametric() (in module sympy.plotting.plot)": [[194, "sympy.plotting.plot.plot_parametric"]], "process_series() (sympy.plotting.plot.matplotlibbackend method)": [[194, "sympy.plotting.plot.MatplotlibBackend.process_series"]], "sympy.plotting.plot": [[194, "module-sympy.plotting.plot"]], "sympy.plotting.pygletplot": [[194, "module-sympy.plotting.pygletplot"]], "textplot() (in module sympy.plotting.textplot)": [[194, "sympy.plotting.textplot.textplot"]], "extensionelement (class in sympy.polys.agca.extensions)": [[195, "sympy.polys.agca.extensions.ExtensionElement"]], "freemodule (class in sympy.polys.agca.modules)": [[195, "sympy.polys.agca.modules.FreeModule"]], "freemoduleelement (class in sympy.polys.agca.modules)": [[195, "sympy.polys.agca.modules.FreeModuleElement"]], "ideal (class in sympy.polys.agca.ideals)": [[195, "sympy.polys.agca.ideals.Ideal"]], "module (class in sympy.polys.agca.modules)": [[195, "sympy.polys.agca.modules.Module"]], "modulehomomorphism (class in sympy.polys.agca.homomorphisms)": [[195, "sympy.polys.agca.homomorphisms.ModuleHomomorphism"]], "monogenicfiniteextension (class in sympy.polys.agca.extensions)": [[195, "sympy.polys.agca.extensions.MonogenicFiniteExtension"]], "quotientmodule (class in sympy.polys.agca.modules)": [[195, "sympy.polys.agca.modules.QuotientModule"]], "quotientmoduleelement (class in sympy.polys.agca.modules)": [[195, "sympy.polys.agca.modules.QuotientModuleElement"]], "submodule (class in sympy.polys.agca.modules)": [[195, "sympy.polys.agca.modules.SubModule"]], "subquotientmodule (class in sympy.polys.agca.modules)": [[195, "sympy.polys.agca.modules.SubQuotientModule"]], "basis() (sympy.polys.agca.modules.freemodule method)": [[195, "sympy.polys.agca.modules.FreeModule.basis"]], "contains() (sympy.polys.agca.ideals.ideal method)": [[195, "sympy.polys.agca.ideals.Ideal.contains"]], "contains() (sympy.polys.agca.modules.module method)": [[195, "sympy.polys.agca.modules.Module.contains"]], "convert() (sympy.polys.agca.modules.freemodule method)": [[195, "sympy.polys.agca.modules.FreeModule.convert"]], "convert() (sympy.polys.agca.modules.module method)": [[195, "sympy.polys.agca.modules.Module.convert"]], "convert() (sympy.polys.agca.modules.quotientmodule method)": [[195, "sympy.polys.agca.modules.QuotientModule.convert"]], "convert() (sympy.polys.agca.modules.submodule method)": [[195, "sympy.polys.agca.modules.SubModule.convert"]], "depth() (sympy.polys.agca.ideals.ideal method)": [[195, "sympy.polys.agca.ideals.Ideal.depth"]], "dtype (sympy.polys.agca.extensions.monogenicfiniteextension attribute)": [[195, "sympy.polys.agca.extensions.MonogenicFiniteExtension.dtype"]], "dtype (sympy.polys.agca.modules.freemodule attribute)": [[195, "sympy.polys.agca.modules.FreeModule.dtype"]], "dtype (sympy.polys.agca.modules.quotientmodule attribute)": [[195, "sympy.polys.agca.modules.QuotientModule.dtype"]], "eq() (sympy.polys.agca.modules.quotientmoduleelement method)": [[195, "sympy.polys.agca.modules.QuotientModuleElement.eq"]], "height() (sympy.polys.agca.ideals.ideal method)": [[195, "sympy.polys.agca.ideals.Ideal.height"]], "homomorphism() (in module sympy.polys.agca.homomorphisms)": [[195, "sympy.polys.agca.homomorphisms.homomorphism"]], "identity_hom() (sympy.polys.agca.modules.freemodule method)": [[195, "sympy.polys.agca.modules.FreeModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.module method)": [[195, "sympy.polys.agca.modules.Module.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.quotientmodule method)": [[195, "sympy.polys.agca.modules.QuotientModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.submodule method)": [[195, "sympy.polys.agca.modules.SubModule.identity_hom"]], "image() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[195, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.image"]], "in_terms_of_generators() (sympy.polys.agca.modules.submodule method)": [[195, "sympy.polys.agca.modules.SubModule.in_terms_of_generators"]], "inclusion_hom() (sympy.polys.agca.modules.submodule method)": [[195, "sympy.polys.agca.modules.SubModule.inclusion_hom"]], "intersect() (sympy.polys.agca.ideals.ideal method)": [[195, "sympy.polys.agca.ideals.Ideal.intersect"]], "intersect() (sympy.polys.agca.modules.submodule method)": [[195, "sympy.polys.agca.modules.SubModule.intersect"]], "inverse() (sympy.polys.agca.extensions.extensionelement method)": [[195, "sympy.polys.agca.extensions.ExtensionElement.inverse"]], "is_full_module() (sympy.polys.agca.modules.submodule method)": [[195, "sympy.polys.agca.modules.SubModule.is_full_module"]], "is_full_module() (sympy.polys.agca.modules.subquotientmodule method)": [[195, "sympy.polys.agca.modules.SubQuotientModule.is_full_module"]], "is_injective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[195, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_injective"]], "is_isomorphism() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[195, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_isomorphism"]], "is_maximal() (sympy.polys.agca.ideals.ideal method)": [[195, "sympy.polys.agca.ideals.Ideal.is_maximal"]], "is_primary() (sympy.polys.agca.ideals.ideal method)": [[195, "sympy.polys.agca.ideals.Ideal.is_primary"]], "is_prime() (sympy.polys.agca.ideals.ideal method)": [[195, "sympy.polys.agca.ideals.Ideal.is_prime"]], "is_principal() (sympy.polys.agca.ideals.ideal method)": [[195, "sympy.polys.agca.ideals.Ideal.is_principal"]], "is_radical() (sympy.polys.agca.ideals.ideal method)": [[195, "sympy.polys.agca.ideals.Ideal.is_radical"]], "is_submodule() (sympy.polys.agca.modules.freemodule method)": [[195, "sympy.polys.agca.modules.FreeModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.module method)": [[195, "sympy.polys.agca.modules.Module.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.quotientmodule method)": [[195, "sympy.polys.agca.modules.QuotientModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.submodule method)": [[195, "sympy.polys.agca.modules.SubModule.is_submodule"]], "is_surjective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[195, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_surjective"]], "is_whole_ring() (sympy.polys.agca.ideals.ideal method)": [[195, "sympy.polys.agca.ideals.Ideal.is_whole_ring"]], "is_zero() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[195, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_zero"]], "is_zero() (sympy.polys.agca.ideals.ideal method)": [[195, "sympy.polys.agca.ideals.Ideal.is_zero"]], "is_zero() (sympy.polys.agca.modules.freemodule method)": [[195, "sympy.polys.agca.modules.FreeModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.module method)": [[195, "sympy.polys.agca.modules.Module.is_zero"]], "is_zero() (sympy.polys.agca.modules.quotientmodule method)": [[195, "sympy.polys.agca.modules.QuotientModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.submodule method)": [[195, "sympy.polys.agca.modules.SubModule.is_zero"]], "kernel() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[195, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.kernel"]], "module_quotient() (sympy.polys.agca.modules.submodule method)": [[195, "sympy.polys.agca.modules.SubModule.module_quotient"]], "multiply_ideal() (sympy.polys.agca.modules.freemodule method)": [[195, "sympy.polys.agca.modules.FreeModule.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.module method)": [[195, "sympy.polys.agca.modules.Module.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.submodule method)": [[195, "sympy.polys.agca.modules.SubModule.multiply_ideal"]], "product() (sympy.polys.agca.ideals.ideal method)": [[195, "sympy.polys.agca.ideals.Ideal.product"]], "quotient() (sympy.polys.agca.ideals.ideal method)": [[195, "sympy.polys.agca.ideals.Ideal.quotient"]], "quotient_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[195, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_codomain"]], "quotient_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[195, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_domain"]], "quotient_hom() (sympy.polys.agca.modules.quotientmodule method)": [[195, "sympy.polys.agca.modules.QuotientModule.quotient_hom"]], "quotient_hom() (sympy.polys.agca.modules.subquotientmodule method)": [[195, "sympy.polys.agca.modules.SubQuotientModule.quotient_hom"]], "quotient_module() (sympy.polys.agca.modules.freemodule method)": [[195, "sympy.polys.agca.modules.FreeModule.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.module method)": [[195, "sympy.polys.agca.modules.Module.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.submodule method)": [[195, "sympy.polys.agca.modules.SubModule.quotient_module"]], "radical() (sympy.polys.agca.ideals.ideal method)": [[195, "sympy.polys.agca.ideals.Ideal.radical"]], "reduce_element() (sympy.polys.agca.ideals.ideal method)": [[195, "sympy.polys.agca.ideals.Ideal.reduce_element"]], "reduce_element() (sympy.polys.agca.modules.submodule method)": [[195, "sympy.polys.agca.modules.SubModule.reduce_element"]], "restrict_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[195, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_codomain"]], "restrict_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[195, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_domain"]], "saturate() (sympy.polys.agca.ideals.ideal method)": [[195, "sympy.polys.agca.ideals.Ideal.saturate"]], "submodule() (sympy.polys.agca.modules.module method)": [[195, "sympy.polys.agca.modules.Module.submodule"]], "submodule() (sympy.polys.agca.modules.quotientmodule method)": [[195, "sympy.polys.agca.modules.QuotientModule.submodule"]], "submodule() (sympy.polys.agca.modules.submodule method)": [[195, "sympy.polys.agca.modules.SubModule.submodule"]], "subset() (sympy.polys.agca.ideals.ideal method)": [[195, "sympy.polys.agca.ideals.Ideal.subset"]], "subset() (sympy.polys.agca.modules.module method)": [[195, "sympy.polys.agca.modules.Module.subset"]], "syzygy_module() (sympy.polys.agca.modules.submodule method)": [[195, "sympy.polys.agca.modules.SubModule.syzygy_module"]], "union() (sympy.polys.agca.ideals.ideal method)": [[195, "sympy.polys.agca.ideals.Ideal.union"]], "union() (sympy.polys.agca.modules.submodule method)": [[195, "sympy.polys.agca.modules.SubModule.union"]], "ddm (class in sympy.polys.matrices.ddm)": [[197, "sympy.polys.matrices.ddm.DDM"]], "domainmatrix (class in sympy.polys.matrices.domainmatrix)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix"]], "sdm (class in sympy.polys.matrices.sdm)": [[197, "sympy.polys.matrices.sdm.SDM"]], "add() (sympy.polys.matrices.ddm.ddm method)": [[197, "sympy.polys.matrices.ddm.DDM.add"]], "add() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.add"]], "add() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.add"]], "charpoly() (sympy.polys.matrices.ddm.ddm method)": [[197, "sympy.polys.matrices.ddm.DDM.charpoly"]], "charpoly() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly"]], "charpoly() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.charpoly"]], "columnspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.columnspace"]], "convert_to() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.convert_to"]], "convert_to() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.convert_to"]], "copy() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.copy"]], "det() (sympy.polys.matrices.ddm.ddm method)": [[197, "sympy.polys.matrices.ddm.DDM.det"]], "det() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.det"]], "det() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.det"]], "diag() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.diag"]], "eye() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.eye"]], "eye() (sympy.polys.matrices.sdm.sdm class method)": [[197, "sympy.polys.matrices.sdm.SDM.eye"]], "from_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix"]], "from_ddm() (sympy.polys.matrices.sdm.sdm class method)": [[197, "sympy.polys.matrices.sdm.SDM.from_ddm"]], "from_dict_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dict_sympy"]], "from_list() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list"]], "from_list() (sympy.polys.matrices.sdm.sdm class method)": [[197, "sympy.polys.matrices.sdm.SDM.from_list"]], "from_list_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_sympy"]], "from_rep() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_rep"]], "hermite_normal_form() (in module sympy.polys.matrices.normalforms)": [[197, "sympy.polys.matrices.normalforms.hermite_normal_form"]], "hstack() (sympy.polys.matrices.ddm.ddm method)": [[197, "sympy.polys.matrices.ddm.DDM.hstack"]], "hstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.hstack"]], "hstack() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.hstack"]], "inv() (sympy.polys.matrices.ddm.ddm method)": [[197, "sympy.polys.matrices.ddm.DDM.inv"]], "inv() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.inv"]], "inv() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.inv"]], "is_lower (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_lower"]], "is_lower() (sympy.polys.matrices.ddm.ddm method)": [[197, "sympy.polys.matrices.ddm.DDM.is_lower"]], "is_lower() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.is_lower"]], "is_upper (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_upper"]], "is_upper() (sympy.polys.matrices.ddm.ddm method)": [[197, "sympy.polys.matrices.ddm.DDM.is_upper"]], "is_upper() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.is_upper"]], "is_zero_matrix() (sympy.polys.matrices.ddm.ddm method)": [[197, "sympy.polys.matrices.ddm.DDM.is_zero_matrix"]], "is_zero_matrix() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.is_zero_matrix"]], "lu() (sympy.polys.matrices.ddm.ddm method)": [[197, "sympy.polys.matrices.ddm.DDM.lu"]], "lu() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu"]], "lu() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.lu"]], "lu_solve() (sympy.polys.matrices.ddm.ddm method)": [[197, "sympy.polys.matrices.ddm.DDM.lu_solve"]], "lu_solve() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve"]], "lu_solve() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.lu_solve"]], "matmul() (sympy.polys.matrices.ddm.ddm method)": [[197, "sympy.polys.matrices.ddm.DDM.matmul"]], "matmul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.matmul"]], "matmul() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.matmul"]], "mul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.mul"]], "mul() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.mul"]], "neg() (sympy.polys.matrices.ddm.ddm method)": [[197, "sympy.polys.matrices.ddm.DDM.neg"]], "neg() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.neg"]], "neg() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.neg"]], "new() (sympy.polys.matrices.sdm.sdm class method)": [[197, "sympy.polys.matrices.sdm.SDM.new"]], "nullspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace"]], "nullspace() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.nullspace"]], "ones() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.ones"]], "pow() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.pow"]], "rowspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.rowspace"]], "rref() (sympy.polys.matrices.ddm.ddm method)": [[197, "sympy.polys.matrices.ddm.DDM.rref"]], "rref() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.rref"]], "rref() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.rref"]], "scc() (sympy.polys.matrices.ddm.ddm method)": [[197, "sympy.polys.matrices.ddm.DDM.scc"]], "scc() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.scc"]], "scc() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.scc"]], "smith_normal_form() (in module sympy.polys.matrices.normalforms)": [[197, "sympy.polys.matrices.normalforms.smith_normal_form"]], "sub() (sympy.polys.matrices.ddm.ddm method)": [[197, "sympy.polys.matrices.ddm.DDM.sub"]], "sub() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.sub"]], "sub() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.sub"]], "to_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_Matrix"]], "to_ddm() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.to_ddm"]], "to_dense() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense"]], "to_field() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_field"]], "to_list() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.to_list"]], "to_sparse() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_sparse"]], "transpose() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.transpose"]], "transpose() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.transpose"]], "unify() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.unify"]], "vstack() (sympy.polys.matrices.ddm.ddm method)": [[197, "sympy.polys.matrices.ddm.DDM.vstack"]], "vstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.vstack"]], "vstack() (sympy.polys.matrices.sdm.sdm method)": [[197, "sympy.polys.matrices.sdm.SDM.vstack"]], "zeros() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[197, "sympy.polys.matrices.domainmatrix.DomainMatrix.zeros"]], "zeros() (sympy.polys.matrices.sdm.sdm class method)": [[197, "sympy.polys.matrices.sdm.SDM.zeros"]], "anp (class in sympy.polys.polyclasses)": [[199, "sympy.polys.polyclasses.ANP"]], "algebraicfield (class in sympy.polys.domains)": [[199, "sympy.polys.domains.AlgebraicField"]], "complexelement (class in sympy.polys.domains.mpelements)": [[199, "sympy.polys.domains.mpelements.ComplexElement"]], "complexfield (class in sympy.polys.domains)": [[199, "sympy.polys.domains.ComplexField"]], "compositedomain (class in sympy.polys.domains.compositedomain)": [[199, "sympy.polys.domains.compositedomain.CompositeDomain"]], "dmf (class in sympy.polys.polyclasses)": [[199, "sympy.polys.polyclasses.DMF"]], "dmp (class in sympy.polys.polyclasses)": [[199, "sympy.polys.polyclasses.DMP"]], "domain (class in sympy.polys.domains.domain)": [[199, "sympy.polys.domains.domain.Domain"]], "domainelement (class in sympy.polys.domains.domainelement)": [[199, "sympy.polys.domains.domainelement.DomainElement"]], "expressiondomain (class in sympy.polys.domains)": [[199, "sympy.polys.domains.ExpressionDomain"]], "expressiondomain.expression (class in sympy.polys.domains)": [[199, "sympy.polys.domains.ExpressionDomain.Expression"]], "expressiondomain.expression (class in sympy.polys.domains.expressiondomain)": [[199, "sympy.polys.domains.expressiondomain.ExpressionDomain.Expression"]], "field (class in sympy.polys.domains.field)": [[199, "sympy.polys.domains.field.Field"]], "finitefield (class in sympy.polys.domains)": [[199, "sympy.polys.domains.FiniteField"]], "fracelement (class in sympy.polys.fields)": [[199, "sympy.polys.fields.FracElement"]], "fracfield (class in sympy.polys.fields)": [[199, "sympy.polys.fields.FracField"]], "fractionfield (class in sympy.polys.domains)": [[199, "sympy.polys.domains.FractionField"]], "gmpyfinitefield (class in sympy.polys.domains)": [[199, "sympy.polys.domains.GMPYFiniteField"]], "gmpyintegerring (class in sympy.polys.domains)": [[199, "sympy.polys.domains.GMPYIntegerRing"]], "gmpyrationalfield (class in sympy.polys.domains)": [[199, "sympy.polys.domains.GMPYRationalField"]], "gaussiandomain (class in sympy.polys.domains.gaussiandomains)": [[199, "sympy.polys.domains.gaussiandomains.GaussianDomain"]], "gaussianelement (class in sympy.polys.domains.gaussiandomains)": [[199, "sympy.polys.domains.gaussiandomains.GaussianElement"]], "gaussianinteger (class in sympy.polys.domains.gaussiandomains)": [[199, "sympy.polys.domains.gaussiandomains.GaussianInteger"]], "gaussianintegerring (class in sympy.polys.domains.gaussiandomains)": [[199, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing"]], "gaussianrational (class in sympy.polys.domains.gaussiandomains)": [[199, "sympy.polys.domains.gaussiandomains.GaussianRational"]], "gaussianrationalfield (class in sympy.polys.domains.gaussiandomains)": [[199, "sympy.polys.domains.gaussiandomains.GaussianRationalField"]], "integerring (class in sympy.polys.domains)": [[199, "sympy.polys.domains.IntegerRing"]], "lc() (sympy.polys.polyclasses.anp method)": [[199, "sympy.polys.polyclasses.ANP.LC"]], "lc() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.LC"]], "polyelement (class in sympy.polys.rings)": [[199, "sympy.polys.rings.PolyElement"]], "polyring (class in sympy.polys.rings)": [[199, "sympy.polys.rings.PolyRing"]], "polynomialring (class in sympy.polys.domains)": [[199, "sympy.polys.domains.PolynomialRing"]], "pythonfinitefield (class in sympy.polys.domains)": [[199, "sympy.polys.domains.PythonFiniteField"]], "pythonintegerring (class in sympy.polys.domains)": [[199, "sympy.polys.domains.PythonIntegerRing"]], "pythonmpq (class in sympy.external.pythonmpq)": [[199, "sympy.external.pythonmpq.PythonMPQ"]], "pythonrationalfield (class in sympy.polys.domains)": [[199, "sympy.polys.domains.PythonRationalField"]], "quotientring (class in sympy.polys.domains.quotientring)": [[199, "sympy.polys.domains.quotientring.QuotientRing"]], "rationalfield (class in sympy.polys.domains)": [[199, "sympy.polys.domains.RationalField"]], "realelement (class in sympy.polys.domains.mpelements)": [[199, "sympy.polys.domains.mpelements.RealElement"]], "realfield (class in sympy.polys.domains)": [[199, "sympy.polys.domains.RealField"]], "ring (class in sympy.polys.domains.ring)": [[199, "sympy.polys.domains.ring.Ring"]], "simpledomain (class in sympy.polys.domains.simpledomain)": [[199, "sympy.polys.domains.simpledomain.SimpleDomain"]], "tc() (sympy.polys.polyclasses.anp method)": [[199, "sympy.polys.polyclasses.ANP.TC"]], "tc() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.TC"]], "abs() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.abs"]], "abs() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.abs"]], "add() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.add"]], "add() (sympy.polys.polyclasses.dmf method)": [[199, "sympy.polys.polyclasses.DMF.add"]], "add() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.add"]], "add() (sympy.polys.rings.polyring method)": [[199, "sympy.polys.rings.PolyRing.add"]], "add_gens() (sympy.polys.rings.polyring method)": [[199, "sympy.polys.rings.PolyRing.add_gens"]], "add_ground() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.add_ground"]], "alg_field_from_poly() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.alg_field_from_poly"]], "algebraic_field() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.algebraic_field"]], "algebraic_field() (sympy.polys.domains.rationalfield method)": [[199, "sympy.polys.domains.RationalField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.algebraic_field"]], "all_coeffs() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.all_coeffs"]], "all_monoms() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.all_monoms"]], "all_terms() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.all_terms"]], "almosteq() (sympy.polys.domains.complexfield method)": [[199, "sympy.polys.domains.ComplexField.almosteq"]], "almosteq() (sympy.polys.domains.realfield method)": [[199, "sympy.polys.domains.RealField.almosteq"]], "almosteq() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.almosteq"]], "almosteq() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.almosteq"]], "as_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianRationalField.as_AlgebraicField"]], "cancel() (sympy.polys.polyclasses.dmf method)": [[199, "sympy.polys.polyclasses.DMF.cancel"]], "cancel() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.cancel"]], "cancel() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.cancel"]], "cauchy_lower_bound() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.cauchy_lower_bound"]], "cauchy_upper_bound() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.cauchy_upper_bound"]], "characteristic() (sympy.polys.domains.finitefield method)": [[199, "sympy.polys.domains.FiniteField.characteristic"]], "characteristic() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.characteristic"]], "clear_denoms() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.clear_denoms"]], "coeff() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.coeff"]], "coeffs() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.coeffs"]], "coeffs() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.coeffs"]], "cofactors() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.cofactors"]], "cofactors() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.cofactors"]], "compose() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.compose"]], "compose() (sympy.polys.rings.polyring method)": [[199, "sympy.polys.rings.PolyRing.compose"]], "const() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.const"]], "content() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.content"]], "content() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.content"]], "convert() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.convert"]], "convert() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.convert"]], "convert_from() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.convert_from"]], "copy() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.copy"]], "count_complex_roots() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.count_complex_roots"]], "count_real_roots() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.count_real_roots"]], "cyclotomic_field() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.cyclotomic_field"]], "decompose() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.decompose"]], "deflate() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.deflate"]], "degree() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.degree"]], "degree() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.degree"]], "degree_list() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.degree_list"]], "degrees() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.degrees"]], "denom() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.denom"]], "denom() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.denom"]], "denom() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.denom"]], "denom() (sympy.polys.domains.gmpyrationalfield method)": [[199, "sympy.polys.domains.GMPYRationalField.denom"]], "denom() (sympy.polys.domains.rationalfield method)": [[199, "sympy.polys.domains.RationalField.denom"]], "denom() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.denom"]], "denom() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianRationalField.denom"]], "denom() (sympy.polys.domains.ring.ring method)": [[199, "sympy.polys.domains.ring.Ring.denom"]], "denom() (sympy.polys.polyclasses.dmf method)": [[199, "sympy.polys.polyclasses.DMF.denom"]], "diff() (sympy.polys.fields.fracelement method)": [[199, "sympy.polys.fields.FracElement.diff"]], "diff() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.diff"]], "diff() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.diff"]], "discriminant() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.discriminant"]], "discriminant() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.discriminant"]], "div() (sympy.polys.domains.gmpyrationalfield method)": [[199, "sympy.polys.domains.GMPYRationalField.div"]], "div() (sympy.polys.domains.rationalfield method)": [[199, "sympy.polys.domains.RationalField.div"]], "div() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.div"]], "div() (sympy.polys.domains.field.field method)": [[199, "sympy.polys.domains.field.Field.div"]], "div() (sympy.polys.domains.ring.ring method)": [[199, "sympy.polys.domains.ring.Ring.div"]], "div() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.div"]], "div() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.div"]], "drop() (sympy.polys.domains.compositedomain.compositedomain method)": [[199, "sympy.polys.domains.compositedomain.CompositeDomain.drop"]], "drop() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.drop"]], "drop() (sympy.polys.rings.polyring method)": [[199, "sympy.polys.rings.PolyRing.drop"]], "drop_to_ground() (sympy.polys.rings.polyring method)": [[199, "sympy.polys.rings.PolyRing.drop_to_ground"]], "dtype (sympy.polys.domains.algebraicfield attribute)": [[199, "sympy.polys.domains.AlgebraicField.dtype"]], "dtype (sympy.polys.domains.expressiondomain attribute)": [[199, "sympy.polys.domains.ExpressionDomain.dtype"]], "dtype (sympy.polys.domains.domain.domain attribute)": [[199, "sympy.polys.domains.domain.Domain.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianintegerring attribute)": [[199, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianrationalfield attribute)": [[199, "sympy.polys.domains.gaussiandomains.GaussianRationalField.dtype"]], "eject() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.eject"]], "eval() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.eval"]], "evalf() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.evalf"]], "exclude() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.exclude"]], "exquo() (sympy.polys.domains.gmpyrationalfield method)": [[199, "sympy.polys.domains.GMPYRationalField.exquo"]], "exquo() (sympy.polys.domains.rationalfield method)": [[199, "sympy.polys.domains.RationalField.exquo"]], "exquo() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.exquo"]], "exquo() (sympy.polys.domains.field.field method)": [[199, "sympy.polys.domains.field.Field.exquo"]], "exquo() (sympy.polys.domains.ring.ring method)": [[199, "sympy.polys.domains.ring.Ring.exquo"]], "exquo() (sympy.polys.polyclasses.dmf method)": [[199, "sympy.polys.polyclasses.DMF.exquo"]], "exquo() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.exquo"]], "exquo_ground() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.exquo_ground"]], "ext (sympy.polys.domains.algebraicfield attribute)": [[199, "sympy.polys.domains.AlgebraicField.ext"]], "factor_list() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.factor_list"]], "factor_list_include() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.factor_list_include"]], "factorial() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.factorial"]], "factorial() (sympy.polys.domains.gmpyintegerring method)": [[199, "sympy.polys.domains.GMPYIntegerRing.factorial"]], "factorial() (sympy.polys.domains.gmpyrationalfield method)": [[199, "sympy.polys.domains.GMPYRationalField.factorial"]], "factorial() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.factorial"]], "factorial() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.factorial"]], "field() (in module sympy.polys.fields)": [[199, "sympy.polys.fields.field"]], "frac_field() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.frac_field"]], "frac_unify() (sympy.polys.polyclasses.dmf method)": [[199, "sympy.polys.polyclasses.DMF.frac_unify"]], "free_module() (sympy.polys.domains.ring.ring method)": [[199, "sympy.polys.domains.ring.Ring.free_module"]], "from_algebraicfield() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.rationalfield method)": [[199, "sympy.polys.domains.RationalField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_AlgebraicField"]], "from_complexfield() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.from_ComplexField"]], "from_expressiondomain() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.from_ExpressionDomain"]], "from_expressiondomain() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.from_ExpressionDomain"]], "from_expressionrawdomain() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.from_ExpressionRawDomain"]], "from_ff() (sympy.polys.domains.finitefield method)": [[199, "sympy.polys.domains.FiniteField.from_FF"]], "from_ff() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.from_FF"]], "from_ff() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.from_FF"]], "from_ff_gmpy() (sympy.polys.domains.finitefield method)": [[199, "sympy.polys.domains.FiniteField.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[199, "sympy.polys.domains.GMPYIntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.from_FF_gmpy"]], "from_ff_python() (sympy.polys.domains.finitefield method)": [[199, "sympy.polys.domains.FiniteField.from_FF_python"]], "from_ff_python() (sympy.polys.domains.gmpyintegerring method)": [[199, "sympy.polys.domains.GMPYIntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.from_FF_python"]], "from_fractionfield() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.from_FractionField"]], "from_gaussianintegerring() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianIntegerRing"]], "from_gaussianrationalfield() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gmpyrationalfield method)": [[199, "sympy.polys.domains.GMPYRationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.rationalfield method)": [[199, "sympy.polys.domains.RationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianRationalField"]], "from_globalpolynomialring() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.from_GlobalPolynomialRing"]], "from_globalpolynomialring() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.from_GlobalPolynomialRing"]], "from_monogenicfiniteextension() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.from_MonogenicFiniteExtension"]], "from_polynomialring() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.from_PolynomialRing"]], "from_qq() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.from_QQ"]], "from_qq() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.from_QQ"]], "from_qq() (sympy.polys.domains.finitefield method)": [[199, "sympy.polys.domains.FiniteField.from_QQ"]], "from_qq() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.from_QQ"]], "from_qq() (sympy.polys.domains.gmpyintegerring method)": [[199, "sympy.polys.domains.GMPYIntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.from_QQ"]], "from_qq() (sympy.polys.domains.rationalfield method)": [[199, "sympy.polys.domains.RationalField.from_QQ"]], "from_qq() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ"]], "from_qq_gmpy() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.finitefield method)": [[199, "sympy.polys.domains.FiniteField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[199, "sympy.polys.domains.GMPYIntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[199, "sympy.polys.domains.GMPYRationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.rationalfield method)": [[199, "sympy.polys.domains.RationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_gmpy"]], "from_qq_python() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.finitefield method)": [[199, "sympy.polys.domains.FiniteField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyintegerring method)": [[199, "sympy.polys.domains.GMPYIntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyrationalfield method)": [[199, "sympy.polys.domains.GMPYRationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.rationalfield method)": [[199, "sympy.polys.domains.RationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_python"]], "from_realfield() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.from_RealField"]], "from_realfield() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.from_RealField"]], "from_realfield() (sympy.polys.domains.finitefield method)": [[199, "sympy.polys.domains.FiniteField.from_RealField"]], "from_realfield() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyintegerring method)": [[199, "sympy.polys.domains.GMPYIntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyrationalfield method)": [[199, "sympy.polys.domains.GMPYRationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.from_RealField"]], "from_realfield() (sympy.polys.domains.rationalfield method)": [[199, "sympy.polys.domains.RationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.from_RealField"]], "from_zz() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.from_ZZ"]], "from_zz() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.from_ZZ"]], "from_zz() (sympy.polys.domains.finitefield method)": [[199, "sympy.polys.domains.FiniteField.from_ZZ"]], "from_zz() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.from_ZZ"]], "from_zz() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.from_ZZ"]], "from_zz() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.from_ZZ"]], "from_zz() (sympy.polys.domains.rationalfield method)": [[199, "sympy.polys.domains.RationalField.from_ZZ"]], "from_zz() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ"]], "from_zz_gmpy() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.finitefield method)": [[199, "sympy.polys.domains.FiniteField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[199, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[199, "sympy.polys.domains.GMPYRationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.rationalfield method)": [[199, "sympy.polys.domains.RationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_gmpy"]], "from_zz_python() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.finitefield method)": [[199, "sympy.polys.domains.FiniteField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyintegerring method)": [[199, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyrationalfield method)": [[199, "sympy.polys.domains.GMPYRationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.rationalfield method)": [[199, "sympy.polys.domains.RationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_python"]], "from_dict() (sympy.polys.polyclasses.dmp class method)": [[199, "sympy.polys.polyclasses.DMP.from_dict"]], "from_list() (sympy.polys.polyclasses.dmp class method)": [[199, "sympy.polys.polyclasses.DMP.from_list"]], "from_sympy() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.from_sympy"]], "from_sympy() (sympy.polys.domains.complexfield method)": [[199, "sympy.polys.domains.ComplexField.from_sympy"]], "from_sympy() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.from_sympy"]], "from_sympy() (sympy.polys.domains.finitefield method)": [[199, "sympy.polys.domains.FiniteField.from_sympy"]], "from_sympy() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyintegerring method)": [[199, "sympy.polys.domains.GMPYIntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[199, "sympy.polys.domains.GMPYRationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.from_sympy"]], "from_sympy() (sympy.polys.domains.rationalfield method)": [[199, "sympy.polys.domains.RationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.realfield method)": [[199, "sympy.polys.domains.RealField.from_sympy"]], "from_sympy() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.from_sympy"]], "from_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_sympy"]], "from_sympy_list() (sympy.polys.polyclasses.dmp class method)": [[199, "sympy.polys.polyclasses.DMP.from_sympy_list"]], "gcd() (sympy.polys.domains.complexfield method)": [[199, "sympy.polys.domains.ComplexField.gcd"]], "gcd() (sympy.polys.domains.gmpyintegerring method)": [[199, "sympy.polys.domains.GMPYIntegerRing.gcd"]], "gcd() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.gcd"]], "gcd() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.gcd"]], "gcd() (sympy.polys.domains.realfield method)": [[199, "sympy.polys.domains.RealField.gcd"]], "gcd() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.gcd"]], "gcd() (sympy.polys.domains.field.field method)": [[199, "sympy.polys.domains.field.Field.gcd"]], "gcd() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.gcd"]], "gcd() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.gcd"]], "gcdex() (sympy.polys.domains.gmpyintegerring method)": [[199, "sympy.polys.domains.GMPYIntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.gcdex"]], "gcdex() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.gcdex"]], "gcdex() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.gcdex"]], "get_exact() (sympy.polys.domains.complexfield method)": [[199, "sympy.polys.domains.ComplexField.get_exact"]], "get_exact() (sympy.polys.domains.realfield method)": [[199, "sympy.polys.domains.RealField.get_exact"]], "get_exact() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.get_exact"]], "get_field() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.get_field"]], "get_field() (sympy.polys.domains.finitefield method)": [[199, "sympy.polys.domains.FiniteField.get_field"]], "get_field() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.get_field"]], "get_field() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.get_field"]], "get_field() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.get_field"]], "get_field() (sympy.polys.domains.field.field method)": [[199, "sympy.polys.domains.field.Field.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_field"]], "get_ring() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.get_ring"]], "get_ring() (sympy.polys.domains.complexfield method)": [[199, "sympy.polys.domains.ComplexField.get_ring"]], "get_ring() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.get_ring"]], "get_ring() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.get_ring"]], "get_ring() (sympy.polys.domains.gmpyrationalfield method)": [[199, "sympy.polys.domains.GMPYRationalField.get_ring"]], "get_ring() (sympy.polys.domains.rationalfield method)": [[199, "sympy.polys.domains.RationalField.get_ring"]], "get_ring() (sympy.polys.domains.realfield method)": [[199, "sympy.polys.domains.RealField.get_ring"]], "get_ring() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.get_ring"]], "get_ring() (sympy.polys.domains.field.field method)": [[199, "sympy.polys.domains.field.Field.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_ring"]], "get_ring() (sympy.polys.domains.ring.ring method)": [[199, "sympy.polys.domains.ring.Ring.get_ring"]], "gff_list() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.gff_list"]], "half_gcdex() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.half_gcdex"]], "half_gcdex() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.half_gcdex"]], "half_per() (sympy.polys.polyclasses.dmf method)": [[199, "sympy.polys.polyclasses.DMF.half_per"]], "has_assoc_field (sympy.polys.domains.domain.domain attribute)": [[199, "sympy.polys.domains.domain.Domain.has_assoc_Field"]], "has_assoc_ring (sympy.polys.domains.domain.domain attribute)": [[199, "sympy.polys.domains.domain.Domain.has_assoc_Ring"]], "homogeneous_order() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.homogeneous_order"]], "homogenize() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.homogenize"]], "ideal() (sympy.polys.domains.ring.ring method)": [[199, "sympy.polys.domains.ring.Ring.ideal"]], "imul_num() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.imul_num"]], "index() (sympy.polys.rings.polyring method)": [[199, "sympy.polys.rings.PolyRing.index"]], "inject() (sympy.polys.domains.compositedomain.compositedomain method)": [[199, "sympy.polys.domains.compositedomain.CompositeDomain.inject"]], "inject() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.inject"]], "inject() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianDomain.inject"]], "inject() (sympy.polys.domains.simpledomain.simpledomain method)": [[199, "sympy.polys.domains.simpledomain.SimpleDomain.inject"]], "inject() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.inject"]], "integral_basis() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.integral_basis"]], "integrate() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.integrate"]], "intervals() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.intervals"]], "invert() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.invert"]], "invert() (sympy.polys.domains.ring.ring method)": [[199, "sympy.polys.domains.ring.Ring.invert"]], "invert() (sympy.polys.polyclasses.dmf method)": [[199, "sympy.polys.polyclasses.DMF.invert"]], "invert() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.invert"]], "is_field (sympy.polys.domains.domain.domain attribute)": [[199, "sympy.polys.domains.domain.Domain.is_Field"]], "is_pid (sympy.polys.domains.domain.domain attribute)": [[199, "sympy.polys.domains.domain.Domain.is_PID"]], "is_ring (sympy.polys.domains.domain.domain attribute)": [[199, "sympy.polys.domains.domain.Domain.is_Ring"]], "is_cyclotomic (sympy.polys.polyclasses.dmp property)": [[199, "sympy.polys.polyclasses.DMP.is_cyclotomic"]], "is_ground (sympy.polys.polyclasses.anp property)": [[199, "sympy.polys.polyclasses.ANP.is_ground"]], "is_ground (sympy.polys.polyclasses.dmp property)": [[199, "sympy.polys.polyclasses.DMP.is_ground"]], "is_homogeneous (sympy.polys.polyclasses.dmp property)": [[199, "sympy.polys.polyclasses.DMP.is_homogeneous"]], "is_irreducible (sympy.polys.polyclasses.dmp property)": [[199, "sympy.polys.polyclasses.DMP.is_irreducible"]], "is_linear (sympy.polys.polyclasses.dmp property)": [[199, "sympy.polys.polyclasses.DMP.is_linear"]], "is_monic (sympy.polys.polyclasses.dmp property)": [[199, "sympy.polys.polyclasses.DMP.is_monic"]], "is_monomial (sympy.polys.polyclasses.dmp property)": [[199, "sympy.polys.polyclasses.DMP.is_monomial"]], "is_negative() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.is_negative"]], "is_negative() (sympy.polys.domains.complexfield method)": [[199, "sympy.polys.domains.ComplexField.is_negative"]], "is_negative() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.is_negative"]], "is_negative() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.is_negative"]], "is_negative() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.is_negative"]], "is_negative() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.is_negative"]], "is_negative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_negative"]], "is_nonnegative() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.complexfield method)": [[199, "sympy.polys.domains.ComplexField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonnegative"]], "is_nonpositive() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.complexfield method)": [[199, "sympy.polys.domains.ComplexField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonpositive"]], "is_one (sympy.polys.polyclasses.anp property)": [[199, "sympy.polys.polyclasses.ANP.is_one"]], "is_one (sympy.polys.polyclasses.dmf property)": [[199, "sympy.polys.polyclasses.DMF.is_one"]], "is_one (sympy.polys.polyclasses.dmp property)": [[199, "sympy.polys.polyclasses.DMP.is_one"]], "is_one() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.is_one"]], "is_positive() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.is_positive"]], "is_positive() (sympy.polys.domains.complexfield method)": [[199, "sympy.polys.domains.ComplexField.is_positive"]], "is_positive() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.is_positive"]], "is_positive() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.is_positive"]], "is_positive() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.is_positive"]], "is_positive() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.is_positive"]], "is_positive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_positive"]], "is_primitive (sympy.polys.polyclasses.dmp property)": [[199, "sympy.polys.polyclasses.DMP.is_primitive"]], "is_quadratic (sympy.polys.polyclasses.dmp property)": [[199, "sympy.polys.polyclasses.DMP.is_quadratic"]], "is_sqf (sympy.polys.polyclasses.dmp property)": [[199, "sympy.polys.polyclasses.DMP.is_sqf"]], "is_unit() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.is_unit"]], "is_unit() (sympy.polys.domains.field.field method)": [[199, "sympy.polys.domains.field.Field.is_unit"]], "is_zero (sympy.polys.polyclasses.anp property)": [[199, "sympy.polys.polyclasses.ANP.is_zero"]], "is_zero (sympy.polys.polyclasses.dmf property)": [[199, "sympy.polys.polyclasses.DMF.is_zero"]], "is_zero (sympy.polys.polyclasses.dmp property)": [[199, "sympy.polys.polyclasses.DMP.is_zero"]], "is_zero() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.is_zero"]], "itercoeffs() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.itercoeffs"]], "itermonoms() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.itermonoms"]], "iterterms() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.iterterms"]], "l1_norm() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.l1_norm"]], "l2_norm_squared() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.l2_norm_squared"]], "lcm() (sympy.polys.domains.complexfield method)": [[199, "sympy.polys.domains.ComplexField.lcm"]], "lcm() (sympy.polys.domains.gmpyintegerring method)": [[199, "sympy.polys.domains.GMPYIntegerRing.lcm"]], "lcm() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.lcm"]], "lcm() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.lcm"]], "lcm() (sympy.polys.domains.realfield method)": [[199, "sympy.polys.domains.RealField.lcm"]], "lcm() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.lcm"]], "lcm() (sympy.polys.domains.field.field method)": [[199, "sympy.polys.domains.field.Field.lcm"]], "lcm() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.lcm"]], "lcm() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.lcm"]], "leading_expv() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.leading_expv"]], "leading_monom() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.leading_monom"]], "leading_term() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.leading_term"]], "lift() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.lift"]], "listcoeffs() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.listcoeffs"]], "listmonoms() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.listmonoms"]], "listterms() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.listterms"]], "log() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.log"]], "log() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.log"]], "map() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.map"]], "max_norm() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.max_norm"]], "maximal_order() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.maximal_order"]], "mignotte_sep_bound_squared() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.mignotte_sep_bound_squared"]], "mod (sympy.polys.domains.algebraicfield attribute)": [[199, "sympy.polys.domains.AlgebraicField.mod"]], "monic() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.monic"]], "monic() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.monic"]], "monomial_basis() (sympy.polys.rings.polyring method)": [[199, "sympy.polys.rings.PolyRing.monomial_basis"]], "monoms() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.monoms"]], "monoms() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.monoms"]], "mul() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.mul"]], "mul() (sympy.polys.polyclasses.dmf method)": [[199, "sympy.polys.polyclasses.DMF.mul"]], "mul() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.mul"]], "mul() (sympy.polys.rings.polyring method)": [[199, "sympy.polys.rings.PolyRing.mul"]], "mul_ground() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.mul_ground"]], "n() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.n"]], "neg() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.neg"]], "neg() (sympy.polys.polyclasses.dmf method)": [[199, "sympy.polys.polyclasses.DMF.neg"]], "neg() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.neg"]], "new() (sympy.polys.domains.gaussiandomains.gaussianelement class method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianElement.new"]], "norm() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.norm"]], "normalize() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.normalize"]], "nth() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.nth"]], "numer() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.numer"]], "numer() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.numer"]], "numer() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.numer"]], "numer() (sympy.polys.domains.gmpyrationalfield method)": [[199, "sympy.polys.domains.GMPYRationalField.numer"]], "numer() (sympy.polys.domains.rationalfield method)": [[199, "sympy.polys.domains.RationalField.numer"]], "numer() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.numer"]], "numer() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianRationalField.numer"]], "numer() (sympy.polys.domains.ring.ring method)": [[199, "sympy.polys.domains.ring.Ring.numer"]], "numer() (sympy.polys.polyclasses.dmf method)": [[199, "sympy.polys.polyclasses.DMF.numer"]], "of_type() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.of_type"]], "old_frac_field() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.old_frac_field"]], "old_poly_ring() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.old_poly_ring"]], "one (sympy.polys.domains.domain.domain attribute)": [[199, "sympy.polys.domains.domain.Domain.one"]], "orig_ext (sympy.polys.domains.algebraicfield attribute)": [[199, "sympy.polys.domains.AlgebraicField.orig_ext"]], "parent() (sympy.polys.domains.domainelement.domainelement method)": [[199, "sympy.polys.domains.domainelement.DomainElement.parent"]], "parent() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianElement.parent"]], "pdiv() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.pdiv"]], "per() (sympy.polys.polyclasses.dmf method)": [[199, "sympy.polys.polyclasses.DMF.per"]], "per() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.per"]], "permute() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.permute"]], "pexquo() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.pexquo"]], "poly_ring() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.poly_ring"]], "poly_unify() (sympy.polys.polyclasses.dmf method)": [[199, "sympy.polys.polyclasses.DMF.poly_unify"]], "pos() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.pos"]], "pow() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.pow"]], "pow() (sympy.polys.polyclasses.anp method)": [[199, "sympy.polys.polyclasses.ANP.pow"]], "pow() (sympy.polys.polyclasses.dmf method)": [[199, "sympy.polys.polyclasses.DMF.pow"]], "pow() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.pow"]], "pquo() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.pquo"]], "prem() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.prem"]], "primes_above() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.primes_above"]], "primitive() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.primitive"]], "primitive() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.primitive"]], "quadrant() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianElement.quadrant"]], "quo() (sympy.polys.domains.gmpyrationalfield method)": [[199, "sympy.polys.domains.GMPYRationalField.quo"]], "quo() (sympy.polys.domains.rationalfield method)": [[199, "sympy.polys.domains.RationalField.quo"]], "quo() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.quo"]], "quo() (sympy.polys.domains.field.field method)": [[199, "sympy.polys.domains.field.Field.quo"]], "quo() (sympy.polys.domains.ring.ring method)": [[199, "sympy.polys.domains.ring.Ring.quo"]], "quo() (sympy.polys.polyclasses.dmf method)": [[199, "sympy.polys.polyclasses.DMF.quo"]], "quo() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.quo"]], "quo_ground() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.quo_ground"]], "quotient_ring() (sympy.polys.domains.ring.ring method)": [[199, "sympy.polys.domains.ring.Ring.quotient_ring"]], "refine_root() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.refine_root"]], "rem() (sympy.polys.domains.gmpyrationalfield method)": [[199, "sympy.polys.domains.GMPYRationalField.rem"]], "rem() (sympy.polys.domains.rationalfield method)": [[199, "sympy.polys.domains.RationalField.rem"]], "rem() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.rem"]], "rem() (sympy.polys.domains.field.field method)": [[199, "sympy.polys.domains.field.Field.rem"]], "rem() (sympy.polys.domains.ring.ring method)": [[199, "sympy.polys.domains.ring.Ring.rem"]], "rem() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.rem"]], "resultant() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.resultant"]], "revert() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.revert"]], "revert() (sympy.polys.domains.field.field method)": [[199, "sympy.polys.domains.field.Field.revert"]], "revert() (sympy.polys.domains.ring.ring method)": [[199, "sympy.polys.domains.ring.Ring.revert"]], "revert() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.revert"]], "ring() (in module sympy.polys.rings)": [[199, "sympy.polys.rings.ring"]], "sfield() (in module sympy.polys.fields)": [[199, "sympy.polys.fields.sfield"]], "shift() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.shift"]], "slice() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.slice"]], "sqf_list() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.sqf_list"]], "sqf_list_include() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.sqf_list_include"]], "sqf_norm() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.sqf_norm"]], "sqf_part() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.sqf_part"]], "sqr() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.sqr"]], "sqrt() (sympy.polys.domains.gmpyintegerring method)": [[199, "sympy.polys.domains.GMPYIntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.sqrt"]], "square() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.square"]], "sring() (in module sympy.polys.rings)": [[199, "sympy.polys.rings.sring"]], "strip_zero() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.strip_zero"]], "sturm() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.sturm"]], "sub() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.sub"]], "sub() (sympy.polys.polyclasses.dmf method)": [[199, "sympy.polys.polyclasses.DMF.sub"]], "sub() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.sub"]], "sub_ground() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.sub_ground"]], "subresultants() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.subresultants"]], "tail_degree() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.tail_degree"]], "tail_degrees() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.tail_degrees"]], "terms() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.terms"]], "terms() (sympy.polys.rings.polyelement method)": [[199, "sympy.polys.rings.PolyElement.terms"]], "terms_gcd() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.terms_gcd"]], "to_alg_num() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.to_alg_num"]], "to_dict() (sympy.polys.polyclasses.anp method)": [[199, "sympy.polys.polyclasses.ANP.to_dict"]], "to_dict() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.to_dict"]], "to_exact() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.to_exact"]], "to_field() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.to_field"]], "to_list() (sympy.polys.polyclasses.anp method)": [[199, "sympy.polys.polyclasses.ANP.to_list"]], "to_list() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.to_list"]], "to_rational() (sympy.polys.domains.realfield method)": [[199, "sympy.polys.domains.RealField.to_rational"]], "to_ring() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.to_ring"]], "to_sympy() (sympy.polys.domains.algebraicfield method)": [[199, "sympy.polys.domains.AlgebraicField.to_sympy"]], "to_sympy() (sympy.polys.domains.complexfield method)": [[199, "sympy.polys.domains.ComplexField.to_sympy"]], "to_sympy() (sympy.polys.domains.expressiondomain method)": [[199, "sympy.polys.domains.ExpressionDomain.to_sympy"]], "to_sympy() (sympy.polys.domains.finitefield method)": [[199, "sympy.polys.domains.FiniteField.to_sympy"]], "to_sympy() (sympy.polys.domains.fractionfield method)": [[199, "sympy.polys.domains.FractionField.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyintegerring method)": [[199, "sympy.polys.domains.GMPYIntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[199, "sympy.polys.domains.GMPYRationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.integerring method)": [[199, "sympy.polys.domains.IntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.polynomialring method)": [[199, "sympy.polys.domains.PolynomialRing.to_sympy"]], "to_sympy() (sympy.polys.domains.rationalfield method)": [[199, "sympy.polys.domains.RationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.realfield method)": [[199, "sympy.polys.domains.RealField.to_sympy"]], "to_sympy() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.to_sympy"]], "to_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[199, "sympy.polys.domains.gaussiandomains.GaussianDomain.to_sympy"]], "to_sympy_dict() (sympy.polys.polyclasses.anp method)": [[199, "sympy.polys.polyclasses.ANP.to_sympy_dict"]], "to_sympy_dict() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.to_sympy_dict"]], "to_sympy_list() (sympy.polys.polyclasses.anp method)": [[199, "sympy.polys.polyclasses.ANP.to_sympy_list"]], "to_sympy_list() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.to_sympy_list"]], "to_tuple() (sympy.polys.polyclasses.anp method)": [[199, "sympy.polys.polyclasses.ANP.to_tuple"]], "to_tuple() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.to_tuple"]], "total_degree() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.total_degree"]], "tp (sympy.polys.domains.domain.domain property)": [[199, "sympy.polys.domains.domain.Domain.tp"]], "transform() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.transform"]], "trunc() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.trunc"]], "unify() (sympy.polys.domains.domain.domain method)": [[199, "sympy.polys.domains.domain.Domain.unify"]], "unify() (sympy.polys.polyclasses.anp method)": [[199, "sympy.polys.polyclasses.ANP.unify"]], "unify() (sympy.polys.polyclasses.dmp method)": [[199, "sympy.polys.polyclasses.DMP.unify"]], "vfield() (in module sympy.polys.fields)": [[199, "sympy.polys.fields.vfield"]], "vring() (in module sympy.polys.rings)": [[199, "sympy.polys.rings.vring"]], "xfield() (in module sympy.polys.fields)": [[199, "sympy.polys.fields.xfield"]], "xring() (in module sympy.polys.rings)": [[199, "sympy.polys.rings.xring"]], "zero (sympy.polys.domains.domain.domain attribute)": [[199, "sympy.polys.domains.domain.Domain.zero"]], "basepolynomialerror (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.BasePolynomialError"]], "coercionfailed (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.CoercionFailed"]], "computationfailed (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.ComputationFailed"]], "domainerror (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.DomainError"]], "evaluationfailed (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.EvaluationFailed"]], "exactquotientfailed (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.ExactQuotientFailed"]], "extraneousfactors (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.ExtraneousFactors"]], "flagerror (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.FlagError"]], "generatorserror (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.GeneratorsError"]], "generatorsneeded (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.GeneratorsNeeded"]], "heuristicgcdfailed (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.HeuristicGCDFailed"]], "homomorphismfailed (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.HomomorphismFailed"]], "isomorphismfailed (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.IsomorphismFailed"]], "multivariatepolynomialerror (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.MultivariatePolynomialError"]], "notalgebraic (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.NotAlgebraic"]], "notinvertible (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.NotInvertible"]], "notreversible (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.NotReversible"]], "operationnotsupported (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.OperationNotSupported"]], "optionerror (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.OptionError"]], "options (class in sympy.polys.polyoptions)": [[201, "sympy.polys.polyoptions.Options"]], "polificationfailed (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.PolificationFailed"]], "polynomialerror (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.PolynomialError"]], "refinementfailed (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.RefinementFailed"]], "unificationfailed (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.UnificationFailed"]], "univariatepolynomialerror (class in sympy.polys.polyerrors)": [[201, "sympy.polys.polyerrors.UnivariatePolynomialError"]], "_modgcd_multivariate_p() (in module sympy.polys.modulargcd)": [[201, "sympy.polys.modulargcd._modgcd_multivariate_p"]], "build_options() (in module sympy.polys.polyoptions)": [[201, "sympy.polys.polyoptions.build_options"]], "clone() (sympy.polys.polyoptions.options method)": [[201, "sympy.polys.polyoptions.Options.clone"]], "dmp_lc() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_LC"]], "dmp_tc() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_TC"]], "dmp_abs() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_abs"]], "dmp_add() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_add"]], "dmp_add_ground() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_add_ground"]], "dmp_add_mul() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_add_mul"]], "dmp_add_term() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_add_term"]], "dmp_apply_pairs() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_apply_pairs"]], "dmp_cancel() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_cancel"]], "dmp_clear_denoms() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dmp_clear_denoms"]], "dmp_compose() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dmp_compose"]], "dmp_content() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_content"]], "dmp_convert() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_convert"]], "dmp_copy() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_copy"]], "dmp_deflate() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_deflate"]], "dmp_degree() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_degree"]], "dmp_degree_in() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_degree_in"]], "dmp_degree_list() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_degree_list"]], "dmp_diff() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dmp_diff"]], "dmp_diff_eval_in() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dmp_diff_eval_in"]], "dmp_diff_in() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dmp_diff_in"]], "dmp_discriminant() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_discriminant"]], "dmp_div() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_div"]], "dmp_eject() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_eject"]], "dmp_euclidean_prs() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_euclidean_prs"]], "dmp_eval() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dmp_eval"]], "dmp_eval_in() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dmp_eval_in"]], "dmp_eval_tail() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dmp_eval_tail"]], "dmp_exclude() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_exclude"]], "dmp_expand() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_expand"]], "dmp_exquo() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_exquo"]], "dmp_exquo_ground() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_exquo_ground"]], "dmp_ext_factor() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dmp_ext_factor"]], "dmp_factor_list() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dmp_factor_list"]], "dmp_factor_list_include() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dmp_factor_list_include"]], "dmp_ff_div() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_ff_div"]], "dmp_ff_prs_gcd() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_ff_prs_gcd"]], "dmp_from_dict() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_from_dict"]], "dmp_from_sympy() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_from_sympy"]], "dmp_gcd() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_gcd"]], "dmp_gcdex() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_gcdex"]], "dmp_ground() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_ground"]], "dmp_ground_lc() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_ground_LC"]], "dmp_ground_tc() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_ground_TC"]], "dmp_ground_content() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dmp_ground_content"]], "dmp_ground_extract() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dmp_ground_extract"]], "dmp_ground_monic() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dmp_ground_monic"]], "dmp_ground_nth() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_ground_nth"]], "dmp_ground_p() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_ground_p"]], "dmp_ground_primitive() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dmp_ground_primitive"]], "dmp_ground_trunc() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dmp_ground_trunc"]], "dmp_grounds() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_grounds"]], "dmp_half_gcdex() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_half_gcdex"]], "dmp_include() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_include"]], "dmp_inflate() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_inflate"]], "dmp_inject() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_inject"]], "dmp_inner_gcd() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_inner_gcd"]], "dmp_inner_subresultants() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_inner_subresultants"]], "dmp_integrate() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dmp_integrate"]], "dmp_integrate_in() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dmp_integrate_in"]], "dmp_invert() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_invert"]], "dmp_irreducible_p() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dmp_irreducible_p"]], "dmp_l1_norm() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_l1_norm"]], "dmp_lcm() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_lcm"]], "dmp_lift() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dmp_lift"]], "dmp_list_terms() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_list_terms"]], "dmp_max_norm() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_max_norm"]], "dmp_mul() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_mul"]], "dmp_mul_ground() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_mul_ground"]], "dmp_mul_term() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_mul_term"]], "dmp_multi_deflate() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_multi_deflate"]], "dmp_neg() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_neg"]], "dmp_negative_p() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_negative_p"]], "dmp_nest() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_nest"]], "dmp_normal() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_normal"]], "dmp_nth() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_nth"]], "dmp_one() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_one"]], "dmp_one_p() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_one_p"]], "dmp_pdiv() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_pdiv"]], "dmp_permute() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_permute"]], "dmp_pexquo() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_pexquo"]], "dmp_positive_p() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_positive_p"]], "dmp_pow() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_pow"]], "dmp_pquo() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_pquo"]], "dmp_prem() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_prem"]], "dmp_primitive() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_primitive"]], "dmp_primitive_prs() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_primitive_prs"]], "dmp_prs_resultant() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_prs_resultant"]], "dmp_qq_collins_resultant() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_qq_collins_resultant"]], "dmp_qq_heu_gcd() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_qq_heu_gcd"]], "dmp_quo() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_quo"]], "dmp_quo_ground() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_quo_ground"]], "dmp_raise() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_raise"]], "dmp_rem() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_rem"]], "dmp_resultant() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_resultant"]], "dmp_revert() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dmp_revert"]], "dmp_rr_div() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_rr_div"]], "dmp_rr_prs_gcd() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_rr_prs_gcd"]], "dmp_slice() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_slice"]], "dmp_sqr() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_sqr"]], "dmp_strip() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_strip"]], "dmp_sub() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_sub"]], "dmp_sub_ground() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_sub_ground"]], "dmp_sub_mul() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_sub_mul"]], "dmp_sub_term() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dmp_sub_term"]], "dmp_subresultants() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_subresultants"]], "dmp_swap() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_swap"]], "dmp_terms_gcd() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_terms_gcd"]], "dmp_to_dict() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_to_dict"]], "dmp_to_tuple() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_to_tuple"]], "dmp_trial_division() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dmp_trial_division"]], "dmp_true_lt() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_true_LT"]], "dmp_trunc() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dmp_trunc"]], "dmp_validate() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_validate"]], "dmp_zero() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_zero"]], "dmp_zero_p() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_zero_p"]], "dmp_zeros() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dmp_zeros"]], "dmp_zz_collins_resultant() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_zz_collins_resultant"]], "dmp_zz_diophantine() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dmp_zz_diophantine"]], "dmp_zz_factor() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dmp_zz_factor"]], "dmp_zz_heu_gcd() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_zz_heu_gcd"]], "dmp_zz_mignotte_bound() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dmp_zz_mignotte_bound"]], "dmp_zz_modular_resultant() (in module sympy.polys.euclidtools)": [[201, "sympy.polys.euclidtools.dmp_zz_modular_resultant"]], "dmp_zz_wang() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dmp_zz_wang"]], "dmp_zz_wang_hensel_lifting() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dmp_zz_wang_hensel_lifting"]], "dmp_zz_wang_lead_coeffs() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dmp_zz_wang_lead_coeffs"]], "dmp_zz_wang_non_divisors() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dmp_zz_wang_non_divisors"]], "dmp_zz_wang_test_points() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dmp_zz_wang_test_points"]], "dup_content() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dup_content"]], "dup_cyclotomic_p() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dup_cyclotomic_p"]], "dup_decompose() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dup_decompose"]], "dup_extract() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dup_extract"]], "dup_gf_factor() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dup_gf_factor"]], "dup_lshift() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dup_lshift"]], "dup_mirror() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dup_mirror"]], "dup_monic() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dup_monic"]], "dup_primitive() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dup_primitive"]], "dup_random() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dup_random"]], "dup_real_imag() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dup_real_imag"]], "dup_reverse() (in module sympy.polys.densebasic)": [[201, "sympy.polys.densebasic.dup_reverse"]], "dup_rshift() (in module sympy.polys.densearith)": [[201, "sympy.polys.densearith.dup_rshift"]], "dup_scale() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dup_scale"]], "dup_shift() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dup_shift"]], "dup_sign_variations() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dup_sign_variations"]], "dup_transform() (in module sympy.polys.densetools)": [[201, "sympy.polys.densetools.dup_transform"]], "dup_zz_cyclotomic_factor() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dup_zz_cyclotomic_factor"]], "dup_zz_cyclotomic_poly() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dup_zz_cyclotomic_poly"]], "dup_zz_factor() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dup_zz_factor"]], "dup_zz_factor_sqf() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dup_zz_factor_sqf"]], "dup_zz_hensel_lift() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dup_zz_hensel_lift"]], "dup_zz_hensel_step() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dup_zz_hensel_step"]], "dup_zz_irreducible_p() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dup_zz_irreducible_p"]], "dup_zz_zassenhaus() (in module sympy.polys.factortools)": [[201, "sympy.polys.factortools.dup_zz_zassenhaus"]], "func_field_modgcd() (in module sympy.polys.modulargcd)": [[201, "sympy.polys.modulargcd.func_field_modgcd"]], "gf_lc() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_LC"]], "gf_qbasis() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_Qbasis"]], "gf_qmatrix() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_Qmatrix"]], "gf_tc() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_TC"]], "gf_add() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_add"]], "gf_add_ground() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_add_ground"]], "gf_add_mul() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_add_mul"]], "gf_berlekamp() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_berlekamp"]], "gf_cofactors() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_cofactors"]], "gf_compose() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_compose"]], "gf_compose_mod() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_compose_mod"]], "gf_crt() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_crt"]], "gf_crt1() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_crt1"]], "gf_crt2() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_crt2"]], "gf_csolve() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_csolve"]], "gf_degree() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_degree"]], "gf_diff() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_diff"]], "gf_div() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_div"]], "gf_eval() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_eval"]], "gf_expand() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_expand"]], "gf_exquo() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_exquo"]], "gf_factor() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_factor"]], "gf_factor_sqf() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_factor_sqf"]], "gf_from_dict() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_from_dict"]], "gf_from_int_poly() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_from_int_poly"]], "gf_gcd() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_gcd"]], "gf_gcdex() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_gcdex"]], "gf_int() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_int"]], "gf_irreducible() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_irreducible"]], "gf_irreducible_p() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_irreducible_p"]], "gf_lcm() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_lcm"]], "gf_lshift() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_lshift"]], "gf_monic() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_monic"]], "gf_mul() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_mul"]], "gf_mul_ground() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_mul_ground"]], "gf_multi_eval() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_multi_eval"]], "gf_neg() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_neg"]], "gf_normal() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_normal"]], "gf_pow() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_pow"]], "gf_pow_mod() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_pow_mod"]], "gf_quo() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_quo"]], "gf_quo_ground() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_quo_ground"]], "gf_random() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_random"]], "gf_rem() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_rem"]], "gf_rshift() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_rshift"]], "gf_shoup() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_shoup"]], "gf_sqf_list() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_sqf_list"]], "gf_sqf_p() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_sqf_p"]], "gf_sqf_part() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_sqf_part"]], "gf_sqr() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_sqr"]], "gf_strip() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_strip"]], "gf_sub() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_sub"]], "gf_sub_ground() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_sub_ground"]], "gf_sub_mul() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_sub_mul"]], "gf_to_dict() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_to_dict"]], "gf_to_int_poly() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_to_int_poly"]], "gf_trace_map() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_trace_map"]], "gf_trunc() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_trunc"]], "gf_value() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_value"]], "gf_zassenhaus() (in module sympy.polys.galoistools)": [[201, "sympy.polys.galoistools.gf_zassenhaus"]], "groebner() (in module sympy.polys.groebnertools)": [[201, "sympy.polys.groebnertools.groebner"]], "is_groebner() (in module sympy.polys.groebnertools)": [[201, "sympy.polys.groebnertools.is_groebner"]], "is_minimal() (in module sympy.polys.groebnertools)": [[201, "sympy.polys.groebnertools.is_minimal"]], "is_reduced() (in module sympy.polys.groebnertools)": [[201, "sympy.polys.groebnertools.is_reduced"]], "matrix_fglm() (in module sympy.polys.fglmtools)": [[201, "sympy.polys.fglmtools.matrix_fglm"]], "modgcd_bivariate() (in module sympy.polys.modulargcd)": [[201, "sympy.polys.modulargcd.modgcd_bivariate"]], "modgcd_multivariate() (in module sympy.polys.modulargcd)": [[201, "sympy.polys.modulargcd.modgcd_multivariate"]], "modgcd_univariate() (in module sympy.polys.modulargcd)": [[201, "sympy.polys.modulargcd.modgcd_univariate"]], "red_groebner() (in module sympy.polys.groebnertools)": [[201, "sympy.polys.groebnertools.red_groebner"]], "sdm_lc() (in module sympy.polys.distributedmodules)": [[201, "sympy.polys.distributedmodules.sdm_LC"]], "sdm_lm() (in module sympy.polys.distributedmodules)": [[201, "sympy.polys.distributedmodules.sdm_LM"]], "sdm_lt() (in module sympy.polys.distributedmodules)": [[201, "sympy.polys.distributedmodules.sdm_LT"]], "sdm_add() (in module sympy.polys.distributedmodules)": [[201, "sympy.polys.distributedmodules.sdm_add"]], "sdm_deg() (in module sympy.polys.distributedmodules)": [[201, "sympy.polys.distributedmodules.sdm_deg"]], "sdm_ecart() (in module sympy.polys.distributedmodules)": [[201, "sympy.polys.distributedmodules.sdm_ecart"]], "sdm_from_dict() (in module sympy.polys.distributedmodules)": [[201, "sympy.polys.distributedmodules.sdm_from_dict"]], "sdm_from_vector() (in module sympy.polys.distributedmodules)": [[201, "sympy.polys.distributedmodules.sdm_from_vector"]], "sdm_groebner() (in module sympy.polys.distributedmodules)": [[201, "sympy.polys.distributedmodules.sdm_groebner"]], "sdm_monomial_deg() (in module sympy.polys.distributedmodules)": [[201, "sympy.polys.distributedmodules.sdm_monomial_deg"]], "sdm_monomial_divides() (in module sympy.polys.distributedmodules)": [[201, "sympy.polys.distributedmodules.sdm_monomial_divides"]], "sdm_monomial_mul() (in module sympy.polys.distributedmodules)": [[201, "sympy.polys.distributedmodules.sdm_monomial_mul"]], "sdm_mul_term() (in module sympy.polys.distributedmodules)": [[201, "sympy.polys.distributedmodules.sdm_mul_term"]], "sdm_nf_mora() (in module sympy.polys.distributedmodules)": [[201, "sympy.polys.distributedmodules.sdm_nf_mora"]], "sdm_spoly() (in module sympy.polys.distributedmodules)": [[201, "sympy.polys.distributedmodules.sdm_spoly"]], "sdm_to_dict() (in module sympy.polys.distributedmodules)": [[201, "sympy.polys.distributedmodules.sdm_to_dict"]], "sdm_to_vector() (in module sympy.polys.distributedmodules)": [[201, "sympy.polys.distributedmodules.sdm_to_vector"]], "sdm_zero() (in module sympy.polys.distributedmodules)": [[201, "sympy.polys.distributedmodules.sdm_zero"]], "setup() (in module sympy.polys.polyconfig)": [[201, "sympy.polys.polyconfig.setup"]], "spoly() (in module sympy.polys.groebnertools)": [[201, "sympy.polys.groebnertools.spoly"]], "sympy.polys.polyconfig": [[201, "module-sympy.polys.polyconfig"]], "sympy.polys.polyoptions": [[201, "module-sympy.polys.polyoptions"]], "algintpowers (class in sympy.polys.numberfields.utilities)": [[203, "sympy.polys.numberfields.utilities.AlgIntPowers"]], "endomorphismring (class in sympy.polys.numberfields.modules)": [[203, "sympy.polys.numberfields.modules.EndomorphismRing"]], "innerendomorphism (class in sympy.polys.numberfields.modules)": [[203, "sympy.polys.numberfields.modules.InnerEndomorphism"]], "module (class in sympy.polys.numberfields.modules)": [[203, "sympy.polys.numberfields.modules.Module"]], "moduleelement (class in sympy.polys.numberfields.modules)": [[203, "sympy.polys.numberfields.modules.ModuleElement"]], "moduleendomorphism (class in sympy.polys.numberfields.modules)": [[203, "sympy.polys.numberfields.modules.ModuleEndomorphism"]], "modulehomomorphism (class in sympy.polys.numberfields.modules)": [[203, "sympy.polys.numberfields.modules.ModuleHomomorphism"]], "powerbasis (class in sympy.polys.numberfields.modules)": [[203, "sympy.polys.numberfields.modules.PowerBasis"]], "powerbasiselement (class in sympy.polys.numberfields.modules)": [[203, "sympy.polys.numberfields.modules.PowerBasisElement"]], "primeideal (class in sympy.polys.numberfields.primes)": [[203, "sympy.polys.numberfields.primes.PrimeIdeal"]], "qq_col (sympy.polys.numberfields.modules.moduleelement property)": [[203, "sympy.polys.numberfields.modules.ModuleElement.QQ_col"]], "qq_matrix (sympy.polys.numberfields.modules.submodule property)": [[203, "sympy.polys.numberfields.modules.Submodule.QQ_matrix"]], "submodule (class in sympy.polys.numberfields.modules)": [[203, "sympy.polys.numberfields.modules.Submodule"]], "t (sympy.polys.numberfields.modules.powerbasiselement property)": [[203, "sympy.polys.numberfields.modules.PowerBasisElement.T"]], "__add__() (sympy.polys.numberfields.modules.moduleelement method)": [[203, "sympy.polys.numberfields.modules.ModuleElement.__add__"]], "__add__() (sympy.polys.numberfields.primes.primeideal method)": [[203, "sympy.polys.numberfields.primes.PrimeIdeal.__add__"]], "__call__() (sympy.polys.numberfields.modules.module method)": [[203, "sympy.polys.numberfields.modules.Module.__call__"]], "__init__() (sympy.polys.numberfields.modules.endomorphismring method)": [[203, "sympy.polys.numberfields.modules.EndomorphismRing.__init__"]], "__init__() (sympy.polys.numberfields.modules.innerendomorphism method)": [[203, "sympy.polys.numberfields.modules.InnerEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleelement method)": [[203, "sympy.polys.numberfields.modules.ModuleElement.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleendomorphism method)": [[203, "sympy.polys.numberfields.modules.ModuleEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[203, "sympy.polys.numberfields.modules.ModuleHomomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.powerbasis method)": [[203, "sympy.polys.numberfields.modules.PowerBasis.__init__"]], "__init__() (sympy.polys.numberfields.modules.submodule method)": [[203, "sympy.polys.numberfields.modules.Submodule.__init__"]], "__init__() (sympy.polys.numberfields.primes.primeideal method)": [[203, "sympy.polys.numberfields.primes.PrimeIdeal.__init__"]], "__init__() (sympy.polys.numberfields.utilities.algintpowers method)": [[203, "sympy.polys.numberfields.utilities.AlgIntPowers.__init__"]], "__mod__() (sympy.polys.numberfields.modules.moduleelement method)": [[203, "sympy.polys.numberfields.modules.ModuleElement.__mod__"]], "__mul__() (sympy.polys.numberfields.modules.moduleelement method)": [[203, "sympy.polys.numberfields.modules.ModuleElement.__mul__"]], "__mul__() (sympy.polys.numberfields.primes.primeideal method)": [[203, "sympy.polys.numberfields.primes.PrimeIdeal.__mul__"]], "add() (sympy.polys.numberfields.modules.submodule method)": [[203, "sympy.polys.numberfields.modules.Submodule.add"]], "ancestors() (sympy.polys.numberfields.modules.module method)": [[203, "sympy.polys.numberfields.modules.Module.ancestors"]], "as_expr() (sympy.polys.numberfields.modules.powerbasiselement method)": [[203, "sympy.polys.numberfields.modules.PowerBasisElement.as_expr"]], "as_submodule() (sympy.polys.numberfields.primes.primeideal method)": [[203, "sympy.polys.numberfields.primes.PrimeIdeal.as_submodule"]], "basis_element_pullbacks() (sympy.polys.numberfields.modules.submodule method)": [[203, "sympy.polys.numberfields.modules.Submodule.basis_element_pullbacks"]], "basis_elements() (sympy.polys.numberfields.modules.module method)": [[203, "sympy.polys.numberfields.modules.Module.basis_elements"]], "coeff_search() (in module sympy.polys.numberfields.utilities)": [[203, "sympy.polys.numberfields.utilities.coeff_search"]], "column() (sympy.polys.numberfields.modules.moduleelement method)": [[203, "sympy.polys.numberfields.modules.ModuleElement.column"]], "discard_before() (sympy.polys.numberfields.modules.submodule method)": [[203, "sympy.polys.numberfields.modules.Submodule.discard_before"]], "element_from_anp() (sympy.polys.numberfields.modules.powerbasis method)": [[203, "sympy.polys.numberfields.modules.PowerBasis.element_from_ANP"]], "element_from_alg_num() (sympy.polys.numberfields.modules.powerbasis method)": [[203, "sympy.polys.numberfields.modules.PowerBasis.element_from_alg_num"]], "element_from_poly() (sympy.polys.numberfields.modules.powerbasis method)": [[203, "sympy.polys.numberfields.modules.PowerBasis.element_from_poly"]], "element_from_rational() (sympy.polys.numberfields.modules.module method)": [[203, "sympy.polys.numberfields.modules.Module.element_from_rational"]], "endomorphism_ring() (sympy.polys.numberfields.modules.module method)": [[203, "sympy.polys.numberfields.modules.Module.endomorphism_ring"]], "equiv() (sympy.polys.numberfields.modules.moduleelement method)": [[203, "sympy.polys.numberfields.modules.ModuleElement.equiv"]], "extract_fundamental_discriminant() (in module sympy.polys.numberfields.utilities)": [[203, "sympy.polys.numberfields.utilities.extract_fundamental_discriminant"]], "field_isomorphism() (in module sympy.polys.numberfields.subfield)": [[203, "sympy.polys.numberfields.subfield.field_isomorphism"]], "find_min_poly() (in module sympy.polys.numberfields.modules)": [[203, "sympy.polys.numberfields.modules.find_min_poly"]], "from_int_list() (sympy.polys.numberfields.modules.moduleelement class method)": [[203, "sympy.polys.numberfields.modules.ModuleElement.from_int_list"]], "generator (sympy.polys.numberfields.modules.powerbasiselement property)": [[203, "sympy.polys.numberfields.modules.PowerBasisElement.generator"]], "get_num_denom() (in module sympy.polys.numberfields.utilities)": [[203, "sympy.polys.numberfields.utilities.get_num_denom"]], "inner_endomorphism() (sympy.polys.numberfields.modules.endomorphismring method)": [[203, "sympy.polys.numberfields.modules.EndomorphismRing.inner_endomorphism"]], "is_compat() (sympy.polys.numberfields.modules.moduleelement method)": [[203, "sympy.polys.numberfields.modules.ModuleElement.is_compat"]], "is_compat_col() (sympy.polys.numberfields.modules.module method)": [[203, "sympy.polys.numberfields.modules.Module.is_compat_col"]], "is_inert (sympy.polys.numberfields.primes.primeideal property)": [[203, "sympy.polys.numberfields.primes.PrimeIdeal.is_inert"]], "is_int() (in module sympy.polys.numberfields.utilities)": [[203, "sympy.polys.numberfields.utilities.is_int"]], "is_rat() (in module sympy.polys.numberfields.utilities)": [[203, "sympy.polys.numberfields.utilities.is_rat"]], "is_rational (sympy.polys.numberfields.modules.powerbasiselement property)": [[203, "sympy.polys.numberfields.modules.PowerBasisElement.is_rational"]], "isolate() (in module sympy.polys.numberfields.utilities)": [[203, "sympy.polys.numberfields.utilities.isolate"]], "kernel() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[203, "sympy.polys.numberfields.modules.ModuleHomomorphism.kernel"]], "make_mod_elt() (in module sympy.polys.numberfields.modules)": [[203, "sympy.polys.numberfields.modules.make_mod_elt"]], "matrix() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[203, "sympy.polys.numberfields.modules.ModuleHomomorphism.matrix"]], "minimal_polynomial() (in module sympy.polys.numberfields.minpoly)": [[203, "sympy.polys.numberfields.minpoly.minimal_polynomial"]], "minpoly() (in module sympy.polys.numberfields.minpoly)": [[203, "sympy.polys.numberfields.minpoly.minpoly"]], "mul() (sympy.polys.numberfields.modules.submodule method)": [[203, "sympy.polys.numberfields.modules.Submodule.mul"]], "mult_tab() (sympy.polys.numberfields.modules.module method)": [[203, "sympy.polys.numberfields.modules.Module.mult_tab"]], "n (sympy.polys.numberfields.modules.module property)": [[203, "sympy.polys.numberfields.modules.Module.n"]], "n (sympy.polys.numberfields.modules.moduleelement property)": [[203, "sympy.polys.numberfields.modules.ModuleElement.n"]], "nearest_common_ancestor() (sympy.polys.numberfields.modules.module method)": [[203, "sympy.polys.numberfields.modules.Module.nearest_common_ancestor"]], "norm() (sympy.polys.numberfields.modules.powerbasiselement method)": [[203, "sympy.polys.numberfields.modules.PowerBasisElement.norm"]], "number_field (sympy.polys.numberfields.modules.module property)": [[203, "sympy.polys.numberfields.modules.Module.number_field"]], "numerator() (sympy.polys.numberfields.modules.powerbasiselement method)": [[203, "sympy.polys.numberfields.modules.PowerBasisElement.numerator"]], "one() (sympy.polys.numberfields.modules.module method)": [[203, "sympy.polys.numberfields.modules.Module.one"]], "over_power_basis() (sympy.polys.numberfields.modules.moduleelement method)": [[203, "sympy.polys.numberfields.modules.ModuleElement.over_power_basis"]], "parent (sympy.polys.numberfields.modules.module property)": [[203, "sympy.polys.numberfields.modules.Module.parent"]], "poly() (sympy.polys.numberfields.modules.powerbasiselement method)": [[203, "sympy.polys.numberfields.modules.PowerBasisElement.poly"]], "power_basis_ancestor() (sympy.polys.numberfields.modules.module method)": [[203, "sympy.polys.numberfields.modules.Module.power_basis_ancestor"]], "prime_decomp() (in module sympy.polys.numberfields.primes)": [[203, "sympy.polys.numberfields.primes.prime_decomp"]], "prime_valuation() (in module sympy.polys.numberfields.primes)": [[203, "sympy.polys.numberfields.primes.prime_valuation"]], "primitive_element() (in module sympy.polys.numberfields.subfield)": [[203, "sympy.polys.numberfields.subfield.primitive_element"]], "reduce_anp() (sympy.polys.numberfields.primes.primeideal method)": [[203, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP"]], "reduce_alg_num() (sympy.polys.numberfields.primes.primeideal method)": [[203, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num"]], "reduce_element() (sympy.polys.numberfields.modules.submodule method)": [[203, "sympy.polys.numberfields.modules.Submodule.reduce_element"]], "reduce_element() (sympy.polys.numberfields.primes.primeideal method)": [[203, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_element"]], "reduced() (sympy.polys.numberfields.modules.moduleelement method)": [[203, "sympy.polys.numberfields.modules.ModuleElement.reduced"]], "reduced() (sympy.polys.numberfields.modules.submodule method)": [[203, "sympy.polys.numberfields.modules.Submodule.reduced"]], "reduced_mod_p() (sympy.polys.numberfields.modules.moduleelement method)": [[203, "sympy.polys.numberfields.modules.ModuleElement.reduced_mod_p"]], "repr() (sympy.polys.numberfields.primes.primeideal method)": [[203, "sympy.polys.numberfields.primes.PrimeIdeal.repr"]], "represent() (sympy.polys.numberfields.modules.endomorphismring method)": [[203, "sympy.polys.numberfields.modules.EndomorphismRing.represent"]], "represent() (sympy.polys.numberfields.modules.module method)": [[203, "sympy.polys.numberfields.modules.Module.represent"]], "represent() (sympy.polys.numberfields.modules.powerbasis method)": [[203, "sympy.polys.numberfields.modules.PowerBasis.represent"]], "represent() (sympy.polys.numberfields.modules.submodule method)": [[203, "sympy.polys.numberfields.modules.Submodule.represent"]], "round_two() (in module sympy.polys.numberfields.basis)": [[203, "sympy.polys.numberfields.basis.round_two"]], "starts_with_unity() (sympy.polys.numberfields.modules.module method)": [[203, "sympy.polys.numberfields.modules.Module.starts_with_unity"]], "submodule_from_gens() (sympy.polys.numberfields.modules.module method)": [[203, "sympy.polys.numberfields.modules.Module.submodule_from_gens"]], "submodule_from_matrix() (sympy.polys.numberfields.modules.module method)": [[203, "sympy.polys.numberfields.modules.Module.submodule_from_matrix"]], "supplement_a_subspace() (in module sympy.polys.numberfields.utilities)": [[203, "sympy.polys.numberfields.utilities.supplement_a_subspace"]], "sympy.polys.numberfields.modules": [[203, "module-sympy.polys.numberfields.modules"]], "sympy.polys.numberfields.subfield": [[203, "module-sympy.polys.numberfields.subfield"]], "test_factor() (sympy.polys.numberfields.primes.primeideal method)": [[203, "sympy.polys.numberfields.primes.PrimeIdeal.test_factor"]], "to_anp() (sympy.polys.numberfields.modules.powerbasiselement method)": [[203, "sympy.polys.numberfields.modules.PowerBasisElement.to_ANP"]], "to_alg_num() (sympy.polys.numberfields.modules.powerbasiselement method)": [[203, "sympy.polys.numberfields.modules.PowerBasisElement.to_alg_num"]], "to_ancestor() (sympy.polys.numberfields.modules.moduleelement method)": [[203, "sympy.polys.numberfields.modules.ModuleElement.to_ancestor"]], "to_number_field() (in module sympy.polys.numberfields.subfield)": [[203, "sympy.polys.numberfields.subfield.to_number_field"]], "to_parent() (sympy.polys.numberfields.modules.moduleelement method)": [[203, "sympy.polys.numberfields.modules.ModuleElement.to_parent"]], "unify() (sympy.polys.numberfields.modules.moduleelement method)": [[203, "sympy.polys.numberfields.modules.ModuleElement.unify"]], "valuation() (sympy.polys.numberfields.primes.primeideal method)": [[203, "sympy.polys.numberfields.primes.PrimeIdeal.valuation"]], "whole_submodule() (sympy.polys.numberfields.modules.module method)": [[203, "sympy.polys.numberfields.modules.Module.whole_submodule"]], "zero() (sympy.polys.numberfields.modules.module method)": [[203, "sympy.polys.numberfields.modules.Module.zero"]], "complexrootof (class in sympy.polys.rootoftools)": [[204, "sympy.polys.rootoftools.ComplexRootOf"]], "ec() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.EC"]], "em() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.EM"]], "et() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.ET"]], "gradedlexorder (class in sympy.polys.orderings)": [[204, "sympy.polys.orderings.GradedLexOrder"]], "groebnerbasis (class in sympy.polys.polytools)": [[204, "sympy.polys.polytools.GroebnerBasis"]], "lc() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.LC"]], "lc() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.LC"]], "lm() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.LM"]], "lm() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.LM"]], "lt() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.LT"]], "lt() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.LT"]], "lexorder (class in sympy.polys.orderings)": [[204, "sympy.polys.orderings.LexOrder"]], "monomial (class in sympy.polys.monomials)": [[204, "sympy.polys.monomials.Monomial"]], "monomialorder (class in sympy.polys.orderings)": [[204, "sympy.polys.orderings.MonomialOrder"]], "poly (class in sympy.polys.polytools)": [[204, "sympy.polys.polytools.Poly"]], "purepoly (class in sympy.polys.polytools)": [[204, "sympy.polys.polytools.PurePoly"]], "reversedgradedlexorder (class in sympy.polys.orderings)": [[204, "sympy.polys.orderings.ReversedGradedLexOrder"]], "rootof (class in sympy.polys.rootoftools)": [[204, "sympy.polys.rootoftools.RootOf"]], "rootsum (class in sympy.polys.rootoftools)": [[204, "sympy.polys.rootoftools.RootSum"]], "tc() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.TC"]], "_all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._all_roots"]], "_complexes_index() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._complexes_index"]], "_complexes_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._complexes_sorted"]], "_count_roots() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._count_roots"]], "_ensure_complexes_init() (sympy.polys.rootoftools.complexrootof method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._ensure_complexes_init"]], "_ensure_reals_init() (sympy.polys.rootoftools.complexrootof method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._ensure_reals_init"]], "_eval_evalf() (sympy.polys.rootoftools.complexrootof method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._eval_evalf"]], "_eval_is_imaginary() (sympy.polys.rootoftools.complexrootof method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._eval_is_imaginary"]], "_eval_is_real() (sympy.polys.rootoftools.complexrootof method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._eval_is_real"]], "_get_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._get_complexes"]], "_get_complexes_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._get_complexes_sqf"]], "_get_interval() (sympy.polys.rootoftools.complexrootof method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._get_interval"]], "_get_reals() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._get_reals"]], "_get_reals_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._get_reals_sqf"]], "_get_roots() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._get_roots"]], "_indexed_root() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._indexed_root"]], "_new() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._new"]], "_postprocess_root() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._postprocess_root"]], "_preprocess_roots() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._preprocess_roots"]], "_real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._real_roots"]], "_reals_index() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._reals_index"]], "_reals_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._reals_sorted"]], "_refine_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._refine_complexes"]], "_reset() (sympy.polys.rootoftools.complexrootof method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._reset"]], "_roots_trivial() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._roots_trivial"]], "_set_interval() (sympy.polys.rootoftools.complexrootof method)": [[204, "sympy.polys.rootoftools.ComplexRootOf._set_interval"]], "abs() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.abs"]], "add() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.add"]], "add_ground() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.add_ground"]], "all_coeffs() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.all_coeffs"]], "all_monoms() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.all_monoms"]], "all_roots() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.all_roots"]], "all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf.all_roots"]], "all_terms() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.all_terms"]], "andre_poly() (in module sympy.polys.appellseqs)": [[204, "sympy.polys.appellseqs.andre_poly"]], "apart() (in module sympy.polys.partfrac)": [[204, "sympy.polys.partfrac.apart"]], "apart_list() (in module sympy.polys.partfrac)": [[204, "sympy.polys.partfrac.apart_list"]], "as_dict() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.as_dict"]], "as_expr() (sympy.polys.monomials.monomial method)": [[204, "sympy.polys.monomials.Monomial.as_expr"]], "as_expr() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.as_expr"]], "as_list() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.as_list"]], "as_poly() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.as_poly"]], "assemble_partfrac_list() (in module sympy.polys.partfrac)": [[204, "sympy.polys.partfrac.assemble_partfrac_list"]], "bernoulli_c_poly() (in module sympy.polys.appellseqs)": [[204, "sympy.polys.appellseqs.bernoulli_c_poly"]], "bernoulli_poly() (in module sympy.polys.appellseqs)": [[204, "sympy.polys.appellseqs.bernoulli_poly"]], "cancel() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.cancel"]], "cancel() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.cancel"]], "chebyshevt_poly() (in module sympy.polys.orthopolys)": [[204, "sympy.polys.orthopolys.chebyshevt_poly"]], "chebyshevu_poly() (in module sympy.polys.orthopolys)": [[204, "sympy.polys.orthopolys.chebyshevu_poly"]], "clear_cache() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf.clear_cache"]], "clear_denoms() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.clear_denoms"]], "coeff_monomial() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.coeff_monomial"]], "coeffs() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.coeffs"]], "cofactors() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.cofactors"]], "cofactors() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.cofactors"]], "compose() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.compose"]], "compose() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.compose"]], "construct_domain() (in module sympy.polys.constructor)": [[204, "sympy.polys.constructor.construct_domain"]], "contains() (sympy.polys.polytools.groebnerbasis method)": [[204, "sympy.polys.polytools.GroebnerBasis.contains"]], "content() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.content"]], "content() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.content"]], "count_roots() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.count_roots"]], "count_roots() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.count_roots"]], "cyclotomic_poly() (in module sympy.polys.specialpolys)": [[204, "sympy.polys.specialpolys.cyclotomic_poly"]], "decompose() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.decompose"]], "decompose() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.decompose"]], "deflate() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.deflate"]], "degree() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.degree"]], "degree() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.degree"]], "degree_list() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.degree_list"]], "degree_list() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.degree_list"]], "diff() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.diff"]], "discriminant() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.discriminant"]], "discriminant() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.discriminant"]], "dispersion() (in module sympy.polys.dispersion)": [[204, "sympy.polys.dispersion.dispersion"]], "dispersion() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.dispersion"]], "dispersionset() (in module sympy.polys.dispersion)": [[204, "sympy.polys.dispersion.dispersionset"]], "dispersionset() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.dispersionset"]], "div() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.div"]], "div() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.div"]], "domain (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.domain"]], "eject() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.eject"]], "euler_poly() (in module sympy.polys.appellseqs)": [[204, "sympy.polys.appellseqs.euler_poly"]], "eval() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.eval"]], "eval_approx() (sympy.polys.rootoftools.complexrootof method)": [[204, "sympy.polys.rootoftools.ComplexRootOf.eval_approx"]], "eval_rational() (sympy.polys.rootoftools.complexrootof method)": [[204, "sympy.polys.rootoftools.ComplexRootOf.eval_rational"]], "exclude() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.exclude"]], "exquo() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.exquo"]], "exquo() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.exquo"]], "exquo_ground() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.exquo_ground"]], "factor() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.factor"]], "factor_list() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.factor_list"]], "factor_list() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.factor_list"]], "factor_list_include() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.factor_list_include"]], "fglm() (sympy.polys.polytools.groebnerbasis method)": [[204, "sympy.polys.polytools.GroebnerBasis.fglm"]], "free_symbols (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.free_symbols"]], "free_symbols (sympy.polys.polytools.purepoly property)": [[204, "sympy.polys.polytools.PurePoly.free_symbols"]], "free_symbols_in_domain (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.free_symbols_in_domain"]], "from_dict() (sympy.polys.polytools.poly class method)": [[204, "sympy.polys.polytools.Poly.from_dict"]], "from_expr() (sympy.polys.polytools.poly class method)": [[204, "sympy.polys.polytools.Poly.from_expr"]], "from_list() (sympy.polys.polytools.poly class method)": [[204, "sympy.polys.polytools.Poly.from_list"]], "from_poly() (sympy.polys.polytools.poly class method)": [[204, "sympy.polys.polytools.Poly.from_poly"]], "gcd() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.gcd"]], "gcd() (sympy.polys.monomials.monomial method)": [[204, "sympy.polys.monomials.Monomial.gcd"]], "gcd() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.gcd"]], "gcd_list() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.gcd_list"]], "gcdex() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.gcdex"]], "gcdex() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.gcdex"]], "gegenbauer_poly() (in module sympy.polys.orthopolys)": [[204, "sympy.polys.orthopolys.gegenbauer_poly"]], "gen (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.gen"]], "genocchi_poly() (in module sympy.polys.appellseqs)": [[204, "sympy.polys.appellseqs.genocchi_poly"]], "get_domain() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.get_domain"]], "get_modulus() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.get_modulus"]], "gff() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.gff"]], "gff_list() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.gff_list"]], "gff_list() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.gff_list"]], "groebner() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.groebner"]], "ground_roots() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.ground_roots"]], "ground_roots() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.ground_roots"]], "half_gcdex() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.half_gcdex"]], "half_gcdex() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.half_gcdex"]], "has_only_gens() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.has_only_gens"]], "hermite_poly() (in module sympy.polys.orthopolys)": [[204, "sympy.polys.orthopolys.hermite_poly"]], "hermite_prob_poly() (in module sympy.polys.orthopolys)": [[204, "sympy.polys.orthopolys.hermite_prob_poly"]], "homogeneous_order() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.homogeneous_order"]], "homogenize() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.homogenize"]], "horner() (in module sympy.polys.polyfuncs)": [[204, "sympy.polys.polyfuncs.horner"]], "inject() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.inject"]], "integrate() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.integrate"]], "interpolate() (in module sympy.polys.polyfuncs)": [[204, "sympy.polys.polyfuncs.interpolate"]], "interpolating_poly() (in module sympy.polys.specialpolys)": [[204, "sympy.polys.specialpolys.interpolating_poly"]], "intervals() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.intervals"]], "intervals() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.intervals"]], "invert() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.invert"]], "invert() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.invert"]], "is_cyclotomic (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.is_cyclotomic"]], "is_ground (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.is_ground"]], "is_homogeneous (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.is_homogeneous"]], "is_irreducible (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.is_irreducible"]], "is_linear (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.is_linear"]], "is_monic (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.is_monic"]], "is_monomial (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.is_monomial"]], "is_multivariate (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.is_multivariate"]], "is_one (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.is_one"]], "is_primitive (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.is_primitive"]], "is_quadratic (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.is_quadratic"]], "is_sqf (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.is_sqf"]], "is_univariate (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.is_univariate"]], "is_zero (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.is_zero"]], "is_zero_dimensional (sympy.polys.polytools.groebnerbasis property)": [[204, "sympy.polys.polytools.GroebnerBasis.is_zero_dimensional"]], "is_zero_dimensional() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.is_zero_dimensional"]], "itermonomials() (in module sympy.polys.monomials)": [[204, "sympy.polys.monomials.itermonomials"]], "jacobi_poly() (in module sympy.polys.orthopolys)": [[204, "sympy.polys.orthopolys.jacobi_poly"]], "l1_norm() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.l1_norm"]], "laguerre_poly() (in module sympy.polys.orthopolys)": [[204, "sympy.polys.orthopolys.laguerre_poly"]], "lcm() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.lcm"]], "lcm() (sympy.polys.monomials.monomial method)": [[204, "sympy.polys.monomials.Monomial.lcm"]], "lcm() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.lcm"]], "lcm_list() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.lcm_list"]], "legendre_poly() (in module sympy.polys.orthopolys)": [[204, "sympy.polys.orthopolys.legendre_poly"]], "length() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.length"]], "lift() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.lift"]], "ltrim() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.ltrim"]], "match() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.match"]], "max_norm() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.max_norm"]], "monic() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.monic"]], "monic() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.monic"]], "monomial_count() (in module sympy.polys.monomials)": [[204, "sympy.polys.monomials.monomial_count"]], "monoms() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.monoms"]], "mul() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.mul"]], "mul_ground() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.mul_ground"]], "neg() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.neg"]], "new() (sympy.polys.polytools.poly class method)": [[204, "sympy.polys.polytools.Poly.new"]], "new() (sympy.polys.rootoftools.rootsum class method)": [[204, "sympy.polys.rootoftools.RootSum.new"]], "norm() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.norm"]], "nroots() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.nroots"]], "nroots() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.nroots"]], "nth() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.nth"]], "nth_power_roots_poly() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.nth_power_roots_poly"]], "nth_power_roots_poly() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.nth_power_roots_poly"]], "one (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.one"]], "parallel_poly_from_expr() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.parallel_poly_from_expr"]], "pdiv() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.pdiv"]], "pdiv() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.pdiv"]], "per() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.per"]], "pexquo() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.pexquo"]], "pexquo() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.pexquo"]], "poly() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.poly"]], "poly_from_expr() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.poly_from_expr"]], "pow() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.pow"]], "pquo() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.pquo"]], "pquo() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.pquo"]], "prem() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.prem"]], "prem() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.prem"]], "primitive() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.primitive"]], "primitive() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.primitive"]], "quo() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.quo"]], "quo() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.quo"]], "quo_ground() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.quo_ground"]], "random_poly() (in module sympy.polys.specialpolys)": [[204, "sympy.polys.specialpolys.random_poly"]], "rat_clear_denoms() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.rat_clear_denoms"]], "real_roots() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.real_roots"]], "real_roots() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.real_roots"]], "real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[204, "sympy.polys.rootoftools.ComplexRootOf.real_roots"]], "reduce() (sympy.polys.polytools.groebnerbasis method)": [[204, "sympy.polys.polytools.GroebnerBasis.reduce"]], "reduced() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.reduced"]], "refine_root() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.refine_root"]], "refine_root() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.refine_root"]], "rem() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.rem"]], "rem() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.rem"]], "reorder() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.reorder"]], "replace() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.replace"]], "resultant() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.resultant"]], "resultant() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.resultant"]], "retract() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.retract"]], "revert() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.revert"]], "root() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.root"]], "rootof() (in module sympy.polys.rootoftools)": [[204, "sympy.polys.rootoftools.rootof"]], "roots() (in module sympy.polys.polyroots)": [[204, "sympy.polys.polyroots.roots"]], "same_root() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.same_root"]], "set_domain() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.set_domain"]], "set_modulus() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.set_modulus"]], "shift() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.shift"]], "slice() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.slice"]], "spherical_bessel_fn() (in module sympy.polys.orthopolys)": [[204, "sympy.polys.orthopolys.spherical_bessel_fn"]], "sqf() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.sqf"]], "sqf_list() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.sqf_list"]], "sqf_list() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.sqf_list"]], "sqf_list_include() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.sqf_list_include"]], "sqf_norm() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.sqf_norm"]], "sqf_norm() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.sqf_norm"]], "sqf_part() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.sqf_part"]], "sqf_part() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.sqf_part"]], "sqr() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.sqr"]], "sturm() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.sturm"]], "sturm() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.sturm"]], "sub() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.sub"]], "sub_ground() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.sub_ground"]], "subresultants() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.subresultants"]], "subresultants() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.subresultants"]], "swinnerton_dyer_poly() (in module sympy.polys.specialpolys)": [[204, "sympy.polys.specialpolys.swinnerton_dyer_poly"]], "symmetric_poly() (in module sympy.polys.specialpolys)": [[204, "sympy.polys.specialpolys.symmetric_poly"]], "symmetrize() (in module sympy.polys.polyfuncs)": [[204, "sympy.polys.polyfuncs.symmetrize"]], "sympy.polys": [[204, "module-sympy.polys"]], "terms() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.terms"]], "terms_gcd() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.terms_gcd"]], "terms_gcd() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.terms_gcd"]], "termwise() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.termwise"]], "to_exact() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.to_exact"]], "to_field() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.to_field"]], "to_ring() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.to_ring"]], "together() (in module sympy.polys.rationaltools)": [[204, "sympy.polys.rationaltools.together"]], "total_degree() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.total_degree"]], "transform() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.transform"]], "trunc() (in module sympy.polys.polytools)": [[204, "sympy.polys.polytools.trunc"]], "trunc() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.trunc"]], "unify() (sympy.polys.polytools.poly method)": [[204, "sympy.polys.polytools.Poly.unify"]], "unit (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.unit"]], "viete() (in module sympy.polys.polyfuncs)": [[204, "sympy.polys.polyfuncs.viete"]], "zero (sympy.polys.polytools.poly property)": [[204, "sympy.polys.polytools.Poly.zero"]], "_tan1() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series._tan1"]], "mul_xin() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.mul_xin"]], "pow_xin() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.pow_xin"]], "rs_lambertw() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_LambertW"]], "rs_asin() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_asin"]], "rs_atan() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_atan"]], "rs_atanh() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_atanh"]], "rs_compose_add() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_compose_add"]], "rs_cos() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_cos"]], "rs_cos_sin() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_cos_sin"]], "rs_cosh() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_cosh"]], "rs_cot() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_cot"]], "rs_diff() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_diff"]], "rs_exp() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_exp"]], "rs_fun() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_fun"]], "rs_hadamard_exp() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_hadamard_exp"]], "rs_integrate() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_integrate"]], "rs_is_puiseux() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_is_puiseux"]], "rs_log() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_log"]], "rs_mul() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_mul"]], "rs_newton() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_newton"]], "rs_nth_root() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_nth_root"]], "rs_pow() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_pow"]], "rs_puiseux() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_puiseux"]], "rs_puiseux2() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_puiseux2"]], "rs_series_from_list() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_series_from_list"]], "rs_series_inversion() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_series_inversion"]], "rs_series_reversion() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_series_reversion"]], "rs_sin() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_sin"]], "rs_sinh() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_sinh"]], "rs_square() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_square"]], "rs_subs() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_subs"]], "rs_tan() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_tan"]], "rs_tanh() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_tanh"]], "rs_trunc() (in module sympy.polys.ring_series)": [[205, "sympy.polys.ring_series.rs_trunc"]], "_solve_lin_sys() (in module sympy.polys.solvers)": [[206, "sympy.polys.solvers._solve_lin_sys"]], "_solve_lin_sys_component() (in module sympy.polys.solvers)": [[206, "sympy.polys.solvers._solve_lin_sys_component"]], "eqs_to_matrix() (in module sympy.polys.solvers)": [[206, "sympy.polys.solvers.eqs_to_matrix"]], "solve_lin_sys() (in module sympy.polys.solvers)": [[206, "sympy.polys.solvers.solve_lin_sys"]], "sympy.polys.solvers": [[206, "module-sympy.polys.solvers"]], "sympy_eqs_to_ring() (in module sympy.polys.solvers)": [[206, "sympy.polys.solvers.sympy_eqs_to_ring"]], "aesaraprinter (class in sympy.printing.aesaracode)": [[208, "sympy.printing.aesaracode.AesaraPrinter"]], "assignmenterror": [[208, "sympy.printing.codeprinter.AssignmentError"]], "c89codeprinter (class in sympy.printing.c)": [[208, "sympy.printing.c.C89CodePrinter"]], "c99codeprinter (class in sympy.printing.c)": [[208, "sympy.printing.c.C99CodePrinter"]], "cxx11codeprinter (class in sympy.printing.cxx)": [[208, "sympy.printing.cxx.CXX11CodePrinter"]], "cxx98codeprinter (class in sympy.printing.cxx)": [[208, "sympy.printing.cxx.CXX98CodePrinter"]], "codeprinter (class in sympy.printing.codeprinter)": [[208, "sympy.printing.codeprinter.CodePrinter"]], "fcodeprinter (class in sympy.printing.fortran)": [[208, "sympy.printing.fortran.FCodePrinter"]], "g() (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.G"], [208, "sympy.printing.pretty.pretty_symbology.g"]], "javascriptcodeprinter (class in sympy.printing.jscode)": [[208, "sympy.printing.jscode.JavascriptCodePrinter"]], "juliacodeprinter (class in sympy.printing.julia)": [[208, "sympy.printing.julia.JuliaCodePrinter"]], "lambdaprinter (class in sympy.printing.lambdarepr)": [[208, "sympy.printing.lambdarepr.LambdaPrinter"]], "latexprinter (class in sympy.printing.latex)": [[208, "sympy.printing.latex.LatexPrinter"]], "mcodeprinter (class in sympy.printing.mathematica)": [[208, "sympy.printing.mathematica.MCodePrinter"]], "maplecodeprinter (class in sympy.printing.maple)": [[208, "sympy.printing.maple.MapleCodePrinter"]], "mathmlcontentprinter (class in sympy.printing.mathml)": [[208, "sympy.printing.mathml.MathMLContentPrinter"]], "mathmlpresentationprinter (class in sympy.printing.mathml)": [[208, "sympy.printing.mathml.MathMLPresentationPrinter"]], "mathmlprinterbase (class in sympy.printing.mathml)": [[208, "sympy.printing.mathml.MathMLPrinterBase"]], "mpmathprinter (class in sympy.printing.pycode)": [[208, "sympy.printing.pycode.MpmathPrinter"]], "octavecodeprinter (class in sympy.printing.octave)": [[208, "sympy.printing.octave.OctaveCodePrinter"]], "precedence (in module sympy.printing.precedence)": [[208, "sympy.printing.precedence.PRECEDENCE"]], "precedence_functions (in module sympy.printing.precedence)": [[208, "sympy.printing.precedence.PRECEDENCE_FUNCTIONS"]], "precedence_values (in module sympy.printing.precedence)": [[208, "sympy.printing.precedence.PRECEDENCE_VALUES"]], "prettyprinter (class in sympy.printing.pretty.pretty)": [[208, "sympy.printing.pretty.pretty.PrettyPrinter"]], "printer (class in sympy.printing.printer)": [[208, "sympy.printing.printer.Printer"]], "rcodeprinter (class in sympy.printing.rcode)": [[208, "sympy.printing.rcode.RCodePrinter"]], "reprprinter (class in sympy.printing.repr)": [[208, "sympy.printing.repr.ReprPrinter"]], "rustcodeprinter (class in sympy.printing.rust)": [[208, "sympy.printing.rust.RustCodePrinter"]], "smtlibprinter (class in sympy.printing.smtlib)": [[208, "sympy.printing.smtlib.SMTLibPrinter"]], "strprinter (class in sympy.printing.str)": [[208, "sympy.printing.str.StrPrinter"]], "u() (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.U"]], "vf() (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.VF"]], "_default_settings (sympy.printing.smtlib.smtlibprinter attribute)": [[208, "sympy.printing.smtlib.SMTLibPrinter._default_settings"]], "_print() (sympy.printing.printer.printer method)": [[208, "sympy.printing.printer.Printer._print"]], "above() (sympy.printing.pretty.stringpict.stringpict method)": [[208, "sympy.printing.pretty.stringpict.stringPict.above"]], "accepted_latex_functions (in module sympy.printing.latex)": [[208, "sympy.printing.latex.accepted_latex_functions"]], "aesara_code() (in module sympy.printing.aesaracode)": [[208, "sympy.printing.aesaracode.aesara_code"]], "aesara_function() (in module sympy.printing.aesaracode)": [[208, "sympy.printing.aesaracode.aesara_function"]], "annotated() (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.annotated"]], "apply() (sympy.printing.pretty.stringpict.prettyform static method)": [[208, "sympy.printing.pretty.stringpict.prettyForm.apply"]], "atoms_table (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.atoms_table"]], "below() (sympy.printing.pretty.stringpict.stringpict method)": [[208, "sympy.printing.pretty.stringpict.stringPict.below"]], "ccode() (in module sympy.printing.c)": [[208, "sympy.printing.c.ccode"]], "cxxcode() (in module sympy.printing.codeprinter)": [[208, "sympy.printing.codeprinter.cxxcode"]], "digit_2txt (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.digit_2txt"]], "dim_handling() (in module sympy.printing.aesaracode)": [[208, "sympy.printing.aesaracode.dim_handling"]], "doprint() (sympy.printing.aesaracode.aesaraprinter method)": [[208, "sympy.printing.aesaracode.AesaraPrinter.doprint"]], "doprint() (sympy.printing.codeprinter.codeprinter method)": [[208, "sympy.printing.codeprinter.CodePrinter.doprint"]], "doprint() (sympy.printing.mathml.mathmlprinterbase method)": [[208, "sympy.printing.mathml.MathMLPrinterBase.doprint"]], "doprint() (sympy.printing.printer.printer method)": [[208, "sympy.printing.printer.Printer.doprint"]], "dotprint() (in module sympy.printing.dot)": [[208, "sympy.printing.dot.dotprint"]], "emptyprinter() (sympy.printing.repr.reprprinter method)": [[208, "sympy.printing.repr.ReprPrinter.emptyPrinter"]], "fcode() (in module sympy.printing.fortran)": [[208, "sympy.printing.fortran.fcode"]], "frac (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.frac"]], "greek_letters (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.greek_letters"]], "height() (sympy.printing.pretty.stringpict.stringpict method)": [[208, "sympy.printing.pretty.stringpict.stringPict.height"]], "hobj() (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.hobj"]], "indent_code() (sympy.printing.c.c89codeprinter method)": [[208, "sympy.printing.c.C89CodePrinter.indent_code"]], "indent_code() (sympy.printing.fortran.fcodeprinter method)": [[208, "sympy.printing.fortran.FCodePrinter.indent_code"]], "indent_code() (sympy.printing.jscode.javascriptcodeprinter method)": [[208, "sympy.printing.jscode.JavascriptCodePrinter.indent_code"]], "indent_code() (sympy.printing.julia.juliacodeprinter method)": [[208, "sympy.printing.julia.JuliaCodePrinter.indent_code"]], "indent_code() (sympy.printing.octave.octavecodeprinter method)": [[208, "sympy.printing.octave.OctaveCodePrinter.indent_code"]], "indent_code() (sympy.printing.rcode.rcodeprinter method)": [[208, "sympy.printing.rcode.RCodePrinter.indent_code"]], "indent_code() (sympy.printing.rust.rustcodeprinter method)": [[208, "sympy.printing.rust.RustCodePrinter.indent_code"]], "jscode() (in module sympy.printing.jscode)": [[208, "sympy.printing.jscode.jscode"]], "julia_code() (in module sympy.printing.julia)": [[208, "sympy.printing.julia.julia_code"]], "known_fcns_src1 (in module sympy.printing.julia)": [[208, "sympy.printing.julia.known_fcns_src1"]], "known_fcns_src1 (in module sympy.printing.octave)": [[208, "sympy.printing.octave.known_fcns_src1"]], "known_fcns_src2 (in module sympy.printing.julia)": [[208, "sympy.printing.julia.known_fcns_src2"]], "known_fcns_src2 (in module sympy.printing.octave)": [[208, "sympy.printing.octave.known_fcns_src2"]], "known_functions (in module sympy.printing.jscode)": [[208, "sympy.printing.jscode.known_functions"]], "known_functions (in module sympy.printing.mathematica)": [[208, "sympy.printing.mathematica.known_functions"]], "known_functions (in module sympy.printing.rcode)": [[208, "sympy.printing.rcode.known_functions"]], "known_functions (in module sympy.printing.rust)": [[208, "sympy.printing.rust.known_functions"]], "known_functions_c89 (in module sympy.printing.c)": [[208, "sympy.printing.c.known_functions_C89"]], "known_functions_c99 (in module sympy.printing.c)": [[208, "sympy.printing.c.known_functions_C99"]], "lambdarepr() (in module sympy.printing.lambdarepr)": [[208, "sympy.printing.lambdarepr.lambdarepr"]], "latex() (in module sympy.printing.latex)": [[208, "sympy.printing.latex.latex"]], "left() (sympy.printing.pretty.stringpict.stringpict method)": [[208, "sympy.printing.pretty.stringpict.stringPict.left"]], "leftslash() (sympy.printing.pretty.stringpict.stringpict method)": [[208, "sympy.printing.pretty.stringpict.stringPict.leftslash"]], "maple_code() (in module sympy.printing.maple)": [[208, "sympy.printing.maple.maple_code"]], "mathematica_code() (in module sympy.printing.mathematica)": [[208, "sympy.printing.mathematica.mathematica_code"]], "mathml() (in module sympy.printing.mathml)": [[208, "sympy.printing.mathml.mathml"]], "mathml_tag() (sympy.printing.mathml.mathmlcontentprinter method)": [[208, "sympy.printing.mathml.MathMLContentPrinter.mathml_tag"]], "mathml_tag() (sympy.printing.mathml.mathmlpresentationprinter method)": [[208, "sympy.printing.mathml.MathMLPresentationPrinter.mathml_tag"]], "next() (sympy.printing.pretty.stringpict.stringpict static method)": [[208, "sympy.printing.pretty.stringpict.stringPict.next"]], "octave_code() (in module sympy.printing.octave)": [[208, "sympy.printing.octave.octave_code"]], "parens() (sympy.printing.pretty.stringpict.stringpict method)": [[208, "sympy.printing.pretty.stringpict.stringPict.parens"]], "parenthesize_super() (sympy.printing.latex.latexprinter method)": [[208, "sympy.printing.latex.LatexPrinter.parenthesize_super"]], "pprint_nodes() (in module sympy.printing.tree)": [[208, "sympy.printing.tree.pprint_nodes"]], "precedence() (in module sympy.printing.precedence)": [[208, "sympy.printing.precedence.precedence"]], "pretty() (in module sympy.printing.pretty.pretty)": [[208, "sympy.printing.pretty.pretty.pretty"]], "prettyform (class in sympy.printing.pretty.stringpict)": [[208, "sympy.printing.pretty.stringpict.prettyForm"]], "pretty_atom() (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.pretty_atom"]], "pretty_print() (in module sympy.printing.pretty.pretty)": [[208, "sympy.printing.pretty.pretty.pretty_print"]], "pretty_symbol() (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.pretty_symbol"]], "pretty_try_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.pretty_try_use_unicode"]], "pretty_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.pretty_use_unicode"]], "preview() (in module sympy.printing.preview)": [[208, "sympy.printing.preview.preview"]], "print_ccode() (in module sympy.printing.c)": [[208, "sympy.printing.c.print_ccode"]], "print_fcode() (in module sympy.printing.fortran)": [[208, "sympy.printing.fortran.print_fcode"]], "print_gtk() (in module sympy.printing.gtk)": [[208, "sympy.printing.gtk.print_gtk"]], "print_latex() (in module sympy.printing.latex)": [[208, "sympy.printing.latex.print_latex"]], "print_maple_code() (in module sympy.printing.maple)": [[208, "sympy.printing.maple.print_maple_code"]], "print_mathml() (in module sympy.printing.mathml)": [[208, "sympy.printing.mathml.print_mathml"]], "print_node() (in module sympy.printing.tree)": [[208, "sympy.printing.tree.print_node"]], "print_rcode() (in module sympy.printing.rcode)": [[208, "sympy.printing.rcode.print_rcode"]], "print_tree() (in module sympy.printing.tree)": [[208, "sympy.printing.tree.print_tree"]], "printmethod (sympy.printing.aesaracode.aesaraprinter attribute)": [[208, "sympy.printing.aesaracode.AesaraPrinter.printmethod"]], "printmethod (sympy.printing.c.c89codeprinter attribute)": [[208, "sympy.printing.c.C89CodePrinter.printmethod"]], "printmethod (sympy.printing.c.c99codeprinter attribute)": [[208, "sympy.printing.c.C99CodePrinter.printmethod"]], "printmethod (sympy.printing.codeprinter.codeprinter attribute)": [[208, "sympy.printing.codeprinter.CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx11codeprinter attribute)": [[208, "sympy.printing.cxx.CXX11CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx98codeprinter attribute)": [[208, "sympy.printing.cxx.CXX98CodePrinter.printmethod"]], "printmethod (sympy.printing.fortran.fcodeprinter attribute)": [[208, "sympy.printing.fortran.FCodePrinter.printmethod"]], "printmethod (sympy.printing.jscode.javascriptcodeprinter attribute)": [[208, "sympy.printing.jscode.JavascriptCodePrinter.printmethod"]], "printmethod (sympy.printing.julia.juliacodeprinter attribute)": [[208, "sympy.printing.julia.JuliaCodePrinter.printmethod"]], "printmethod (sympy.printing.lambdarepr.lambdaprinter attribute)": [[208, "sympy.printing.lambdarepr.LambdaPrinter.printmethod"]], "printmethod (sympy.printing.latex.latexprinter attribute)": [[208, "sympy.printing.latex.LatexPrinter.printmethod"]], "printmethod (sympy.printing.maple.maplecodeprinter attribute)": [[208, "sympy.printing.maple.MapleCodePrinter.printmethod"]], "printmethod (sympy.printing.mathematica.mcodeprinter attribute)": [[208, "sympy.printing.mathematica.MCodePrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlcontentprinter attribute)": [[208, "sympy.printing.mathml.MathMLContentPrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlpresentationprinter attribute)": [[208, "sympy.printing.mathml.MathMLPresentationPrinter.printmethod"]], "printmethod (sympy.printing.octave.octavecodeprinter attribute)": [[208, "sympy.printing.octave.OctaveCodePrinter.printmethod"]], "printmethod (sympy.printing.pretty.pretty.prettyprinter attribute)": [[208, "sympy.printing.pretty.pretty.PrettyPrinter.printmethod"]], "printmethod (sympy.printing.printer.printer attribute)": [[208, "sympy.printing.printer.Printer.printmethod"]], "printmethod (sympy.printing.rcode.rcodeprinter attribute)": [[208, "sympy.printing.rcode.RCodePrinter.printmethod"]], "printmethod (sympy.printing.repr.reprprinter attribute)": [[208, "sympy.printing.repr.ReprPrinter.printmethod"]], "printmethod (sympy.printing.rust.rustcodeprinter attribute)": [[208, "sympy.printing.rust.RustCodePrinter.printmethod"]], "printmethod (sympy.printing.smtlib.smtlibprinter attribute)": [[208, "sympy.printing.smtlib.SMTLibPrinter.printmethod"]], "printmethod (sympy.printing.str.strprinter attribute)": [[208, "sympy.printing.str.StrPrinter.printmethod"]], "pycode() (in module sympy.printing.pycode)": [[208, "sympy.printing.pycode.pycode"]], "rcode() (in module sympy.printing.rcode)": [[208, "sympy.printing.rcode.rcode"]], "render() (sympy.printing.pretty.stringpict.stringpict method)": [[208, "sympy.printing.pretty.stringpict.stringPict.render"]], "reprify() (sympy.printing.repr.reprprinter method)": [[208, "sympy.printing.repr.ReprPrinter.reprify"]], "right() (sympy.printing.pretty.stringpict.stringpict method)": [[208, "sympy.printing.pretty.stringpict.stringPict.right"]], "root (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.root"]], "root() (sympy.printing.pretty.stringpict.stringpict method)": [[208, "sympy.printing.pretty.stringpict.stringPict.root"]], "rust_code() (in module sympy.printing.rust)": [[208, "sympy.printing.rust.rust_code"]], "set_global_settings() (sympy.printing.printer.printer class method)": [[208, "sympy.printing.printer.Printer.set_global_settings"]], "smtlib_code() (in module sympy.printing.smtlib)": [[208, "sympy.printing.smtlib.smtlib_code"]], "split_super_sub() (in module sympy.printing.conventions)": [[208, "sympy.printing.conventions.split_super_sub"]], "srepr() (in module sympy.printing.repr)": [[208, "sympy.printing.repr.srepr"]], "sstr() (in module sympy.printing.str)": [[208, "sympy.printing.str.sstr"]], "sstrrepr() (in module sympy.printing.str)": [[208, "sympy.printing.str.sstrrepr"]], "stack() (sympy.printing.pretty.stringpict.stringpict static method)": [[208, "sympy.printing.pretty.stringpict.stringPict.stack"]], "stringpict (class in sympy.printing.pretty.stringpict)": [[208, "sympy.printing.pretty.stringpict.stringPict"]], "sub (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.sub"]], "sup (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.sup"]], "symb_2txt (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.symb_2txt"]], "sympy.printing.aesaracode": [[208, "module-sympy.printing.aesaracode"]], "sympy.printing.c": [[208, "module-sympy.printing.c"]], "sympy.printing.codeprinter": [[208, "module-sympy.printing.codeprinter"]], "sympy.printing.conventions": [[208, "module-sympy.printing.conventions"]], "sympy.printing.cxx": [[208, "module-sympy.printing.cxx"]], "sympy.printing.fortran": [[208, "module-sympy.printing.fortran"]], "sympy.printing.gtk": [[208, "module-sympy.printing.gtk"]], "sympy.printing.jscode": [[208, "module-sympy.printing.jscode"]], "sympy.printing.julia": [[208, "module-sympy.printing.julia"]], "sympy.printing.lambdarepr": [[208, "module-sympy.printing.lambdarepr"]], "sympy.printing.latex": [[208, "module-sympy.printing.latex"]], "sympy.printing.maple": [[208, "module-sympy.printing.maple"]], "sympy.printing.mathematica": [[208, "module-sympy.printing.mathematica"]], "sympy.printing.mathml": [[208, "module-sympy.printing.mathml"]], "sympy.printing.octave": [[208, "module-sympy.printing.octave"]], "sympy.printing.precedence": [[208, "module-sympy.printing.precedence"]], "sympy.printing.pretty": [[208, "module-sympy.printing.pretty"]], "sympy.printing.pretty.pretty": [[208, "module-sympy.printing.pretty.pretty"]], "sympy.printing.pretty.pretty_symbology": [[208, "module-sympy.printing.pretty.pretty_symbology"]], "sympy.printing.pretty.stringpict": [[208, "module-sympy.printing.pretty.stringpict"]], "sympy.printing.preview": [[208, "module-sympy.printing.preview"]], "sympy.printing.printer": [[208, "module-sympy.printing.printer"]], "sympy.printing.pycode": [[208, "module-sympy.printing.pycode"]], "sympy.printing.python": [[208, "module-sympy.printing.python"]], "sympy.printing.rcode": [[208, "module-sympy.printing.rcode"]], "sympy.printing.repr": [[208, "module-sympy.printing.repr"]], "sympy.printing.rust": [[208, "module-sympy.printing.rust"]], "sympy.printing.smtlib": [[208, "module-sympy.printing.smtlib"]], "sympy.printing.str": [[208, "module-sympy.printing.str"]], "sympy.printing.tree": [[208, "module-sympy.printing.tree"]], "terminal_width() (sympy.printing.pretty.stringpict.stringpict method)": [[208, "sympy.printing.pretty.stringpict.stringPict.terminal_width"]], "tree() (in module sympy.printing.tree)": [[208, "sympy.printing.tree.tree"]], "vobj() (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.vobj"]], "width() (sympy.printing.pretty.stringpict.stringpict method)": [[208, "sympy.printing.pretty.stringpict.stringPict.width"]], "xobj() (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.xobj"]], "xstr() (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.xstr"]], "xsym() (in module sympy.printing.pretty.pretty_symbology)": [[208, "sympy.printing.pretty.pretty_symbology.xsym"]], "finiteformalpowerseries (class in sympy.series.formal)": [[210, "sympy.series.formal.FiniteFormalPowerSeries"]], "formalpowerseries (class in sympy.series.formal)": [[210, "sympy.series.formal.FormalPowerSeries"]], "formalpowerseriescompose (class in sympy.series.formal)": [[210, "sympy.series.formal.FormalPowerSeriesCompose"]], "formalpowerseriesinverse (class in sympy.series.formal)": [[210, "sympy.series.formal.FormalPowerSeriesInverse"]], "formalpowerseriesproduct (class in sympy.series.formal)": [[210, "sympy.series.formal.FormalPowerSeriesProduct"]], "coeff_bell() (sympy.series.formal.formalpowerseries method)": [[210, "sympy.series.formal.FormalPowerSeries.coeff_bell"]], "compose() (sympy.series.formal.formalpowerseries method)": [[210, "sympy.series.formal.FormalPowerSeries.compose"]], "compute_fps() (in module sympy.series.formal)": [[210, "sympy.series.formal.compute_fps"]], "exp_re() (in module sympy.series.formal)": [[210, "sympy.series.formal.exp_re"]], "fps() (in module sympy.series.formal)": [[210, "sympy.series.formal.fps"]], "function (sympy.series.formal.formalpowerseriescompose property)": [[210, "sympy.series.formal.FormalPowerSeriesCompose.function"]], "function (sympy.series.formal.formalpowerseriesinverse property)": [[210, "sympy.series.formal.FormalPowerSeriesInverse.function"]], "function (sympy.series.formal.formalpowerseriesproduct property)": [[210, "sympy.series.formal.FormalPowerSeriesProduct.function"]], "hyper_algorithm() (in module sympy.series.formal)": [[210, "sympy.series.formal.hyper_algorithm"]], "hyper_re() (in module sympy.series.formal)": [[210, "sympy.series.formal.hyper_re"]], "infinite (sympy.series.formal.formalpowerseries property)": [[210, "sympy.series.formal.FormalPowerSeries.infinite"]], "integrate() (sympy.series.formal.formalpowerseries method)": [[210, "sympy.series.formal.FormalPowerSeries.integrate"]], "inverse() (sympy.series.formal.formalpowerseries method)": [[210, "sympy.series.formal.FormalPowerSeries.inverse"]], "polynomial() (sympy.series.formal.formalpowerseries method)": [[210, "sympy.series.formal.FormalPowerSeries.polynomial"]], "product() (sympy.series.formal.formalpowerseries method)": [[210, "sympy.series.formal.FormalPowerSeries.product"]], "rational_algorithm() (in module sympy.series.formal)": [[210, "sympy.series.formal.rational_algorithm"]], "rational_independent() (in module sympy.series.formal)": [[210, "sympy.series.formal.rational_independent"]], "rsolve_hypergeometric() (in module sympy.series.formal)": [[210, "sympy.series.formal.rsolve_hypergeometric"]], "simplede() (in module sympy.series.formal)": [[210, "sympy.series.formal.simpleDE"]], "solve_de() (in module sympy.series.formal)": [[210, "sympy.series.formal.solve_de"]], "truncate() (sympy.series.formal.formalpowerseries method)": [[210, "sympy.series.formal.FormalPowerSeries.truncate"]], "fourierseries (class in sympy.series.fourier)": [[211, "sympy.series.fourier.FourierSeries"]], "fourier_series() (in module sympy.series.fourier)": [[211, "sympy.series.fourier.fourier_series"]], "scale() (sympy.series.fourier.fourierseries method)": [[211, "sympy.series.fourier.FourierSeries.scale"]], "scalex() (sympy.series.fourier.fourierseries method)": [[211, "sympy.series.fourier.FourierSeries.scalex"]], "shift() (sympy.series.fourier.fourierseries method)": [[211, "sympy.series.fourier.FourierSeries.shift"]], "shiftx() (sympy.series.fourier.fourierseries method)": [[211, "sympy.series.fourier.FourierSeries.shiftx"]], "sigma_approximation() (sympy.series.fourier.fourierseries method)": [[211, "sympy.series.fourier.FourierSeries.sigma_approximation"]], "truncate() (sympy.series.fourier.fourierseries method)": [[211, "sympy.series.fourier.FourierSeries.truncate"]], "difference_delta() (in module sympy.series.limitseq)": [[213, "sympy.series.limitseq.difference_delta"]], "dominant() (in module sympy.series.limitseq)": [[213, "sympy.series.limitseq.dominant"]], "limit_seq() (in module sympy.series.limitseq)": [[213, "sympy.series.limitseq.limit_seq"]], "emptysequence (class in sympy.series.sequences)": [[214, "sympy.series.sequences.EmptySequence"]], "recursiveseq (class in sympy.series.sequences)": [[214, "sympy.series.sequences.RecursiveSeq"]], "seqadd (class in sympy.series.sequences)": [[214, "sympy.series.sequences.SeqAdd"]], "seqbase (class in sympy.series.sequences)": [[214, "sympy.series.sequences.SeqBase"]], "seqformula (class in sympy.series.sequences)": [[214, "sympy.series.sequences.SeqFormula"]], "seqmul (class in sympy.series.sequences)": [[214, "sympy.series.sequences.SeqMul"]], "seqper (class in sympy.series.sequences)": [[214, "sympy.series.sequences.SeqPer"]], "coeff() (sympy.series.sequences.seqbase method)": [[214, "sympy.series.sequences.SeqBase.coeff"]], "coeff_mul() (sympy.series.sequences.emptysequence method)": [[214, "sympy.series.sequences.EmptySequence.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqbase method)": [[214, "sympy.series.sequences.SeqBase.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqformula method)": [[214, "sympy.series.sequences.SeqFormula.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqper method)": [[214, "sympy.series.sequences.SeqPer.coeff_mul"]], "find_linear_recurrence() (sympy.series.sequences.seqbase method)": [[214, "sympy.series.sequences.SeqBase.find_linear_recurrence"]], "free_symbols (sympy.series.sequences.seqbase property)": [[214, "sympy.series.sequences.SeqBase.free_symbols"]], "gen (sympy.series.sequences.seqbase property)": [[214, "sympy.series.sequences.SeqBase.gen"]], "initial (sympy.series.sequences.recursiveseq property)": [[214, "sympy.series.sequences.RecursiveSeq.initial"]], "interval (sympy.series.sequences.recursiveseq property)": [[214, "sympy.series.sequences.RecursiveSeq.interval"]], "interval (sympy.series.sequences.seqbase property)": [[214, "sympy.series.sequences.SeqBase.interval"]], "length (sympy.series.sequences.seqbase property)": [[214, "sympy.series.sequences.SeqBase.length"]], "n (sympy.series.sequences.recursiveseq property)": [[214, "sympy.series.sequences.RecursiveSeq.n"]], "recurrence (sympy.series.sequences.recursiveseq property)": [[214, "sympy.series.sequences.RecursiveSeq.recurrence"]], "reduce() (sympy.series.sequences.seqadd static method)": [[214, "sympy.series.sequences.SeqAdd.reduce"]], "reduce() (sympy.series.sequences.seqmul static method)": [[214, "sympy.series.sequences.SeqMul.reduce"]], "sequence() (in module sympy.series.sequences)": [[214, "sympy.series.sequences.sequence"]], "start (sympy.series.sequences.recursiveseq property)": [[214, "sympy.series.sequences.RecursiveSeq.start"]], "start (sympy.series.sequences.seqbase property)": [[214, "sympy.series.sequences.SeqBase.start"]], "stop (sympy.series.sequences.recursiveseq property)": [[214, "sympy.series.sequences.RecursiveSeq.stop"]], "stop (sympy.series.sequences.seqbase property)": [[214, "sympy.series.sequences.SeqBase.stop"]], "variables (sympy.series.sequences.seqbase property)": [[214, "sympy.series.sequences.SeqBase.variables"]], "y (sympy.series.sequences.recursiveseq property)": [[214, "sympy.series.sequences.RecursiveSeq.y"]], "yn (sympy.series.sequences.recursiveseq property)": [[214, "sympy.series.sequences.RecursiveSeq.yn"]], "limit (class in sympy.series.limits)": [[215, "sympy.series.limits.Limit"]], "order (class in sympy.series.order)": [[215, "sympy.series.order.Order"]], "subsset (class in sympy.series.gruntz)": [[215, "sympy.series.gruntz.SubsSet"]], "build_expression_tree() (in module sympy.series.gruntz)": [[215, "sympy.series.gruntz.build_expression_tree"]], "calculate_series() (in module sympy.series.gruntz)": [[215, "sympy.series.gruntz.calculate_series"]], "compare() (in module sympy.series.gruntz)": [[215, "sympy.series.gruntz.compare"]], "contains() (sympy.series.order.order method)": [[215, "sympy.series.order.Order.contains"]], "copy() (sympy.series.gruntz.subsset method)": [[215, "sympy.series.gruntz.SubsSet.copy"]], "do_subs() (sympy.series.gruntz.subsset method)": [[215, "sympy.series.gruntz.SubsSet.do_subs"]], "doit() (sympy.series.limits.limit method)": [[215, "sympy.series.limits.Limit.doit"]], "gruntz() (in module sympy.series.gruntz)": [[215, "sympy.series.gruntz.gruntz"]], "limit() (in module sympy.series.limits)": [[215, "sympy.series.limits.limit"]], "limitinf() (in module sympy.series.gruntz)": [[215, "sympy.series.gruntz.limitinf"]], "meets() (sympy.series.gruntz.subsset method)": [[215, "sympy.series.gruntz.SubsSet.meets"]], "mrv() (in module sympy.series.gruntz)": [[215, "sympy.series.gruntz.mrv"]], "mrv_leadterm() (in module sympy.series.gruntz)": [[215, "sympy.series.gruntz.mrv_leadterm"]], "mrv_max1() (in module sympy.series.gruntz)": [[215, "sympy.series.gruntz.mrv_max1"]], "mrv_max3() (in module sympy.series.gruntz)": [[215, "sympy.series.gruntz.mrv_max3"]], "residue() (in module sympy.series.residues)": [[215, "sympy.series.residues.residue"]], "rewrite() (in module sympy.series.gruntz)": [[215, "sympy.series.gruntz.rewrite"]], "richardson() (in module sympy.series.acceleration)": [[215, "sympy.series.acceleration.richardson"]], "series() (in module sympy.series.series)": [[215, "sympy.series.series.series"]], "shanks() (in module sympy.series.acceleration)": [[215, "sympy.series.acceleration.shanks"]], "sign() (in module sympy.series.gruntz)": [[215, "sympy.series.gruntz.sign"]], "union() (sympy.series.gruntz.subsset method)": [[215, "sympy.series.gruntz.SubsSet.union"]], "cartesiancomplexregion (class in sympy.sets.fancysets)": [[216, "sympy.sets.fancysets.CartesianComplexRegion"]], "complement (class in sympy.sets.sets)": [[216, "sympy.sets.sets.Complement"]], "complexregion (class in sympy.sets.fancysets)": [[216, "sympy.sets.fancysets.ComplexRegion"]], "complexes (class in sympy.sets.fancysets)": [[216, "sympy.sets.fancysets.Complexes"]], "conditionset (class in sympy.sets.conditionset)": [[216, "sympy.sets.conditionset.ConditionSet"]], "contains (class in sympy.sets.conditionset)": [[216, "sympy.sets.conditionset.Contains"]], "disjointunion (class in sympy.sets.sets)": [[216, "sympy.sets.sets.DisjointUnion"]], "emptyset (class in sympy.sets.sets)": [[216, "sympy.sets.sets.EmptySet"]], "finiteset (class in sympy.sets.sets)": [[216, "sympy.sets.sets.FiniteSet"]], "imageset (class in sympy.sets.fancysets)": [[216, "sympy.sets.fancysets.ImageSet"]], "integers (class in sympy.sets.fancysets)": [[216, "sympy.sets.fancysets.Integers"]], "intersection (class in sympy.sets.sets)": [[216, "sympy.sets.sets.Intersection"]], "interval (class in sympy.sets.sets)": [[216, "sympy.sets.sets.Interval"]], "lopen() (sympy.sets.sets.interval class method)": [[216, "sympy.sets.sets.Interval.Lopen"]], "naturals (class in sympy.sets.fancysets)": [[216, "sympy.sets.fancysets.Naturals"]], "naturals0 (class in sympy.sets.fancysets)": [[216, "sympy.sets.fancysets.Naturals0"]], "polarcomplexregion (class in sympy.sets.fancysets)": [[216, "sympy.sets.fancysets.PolarComplexRegion"]], "powerset (class in sympy.sets.powerset)": [[216, "sympy.sets.powerset.PowerSet"]], "productset (class in sympy.sets.sets)": [[216, "sympy.sets.sets.ProductSet"]], "range (class in sympy.sets.fancysets)": [[216, "sympy.sets.fancysets.Range"]], "rationals (class in sympy.sets.fancysets)": [[216, "sympy.sets.fancysets.Rationals"]], "reals (class in sympy.sets.fancysets)": [[216, "sympy.sets.fancysets.Reals"]], "ropen() (sympy.sets.sets.interval class method)": [[216, "sympy.sets.sets.Interval.Ropen"]], "set (class in sympy.sets.sets)": [[216, "sympy.sets.sets.Set"]], "setkind (class in sympy.sets.conditionset)": [[216, "sympy.sets.conditionset.SetKind"]], "symmetricdifference (class in sympy.sets.sets)": [[216, "sympy.sets.sets.SymmetricDifference"]], "union (class in sympy.sets.sets)": [[216, "sympy.sets.sets.Union"]], "universalset (class in sympy.sets.sets)": [[216, "sympy.sets.sets.UniversalSet"]], "a_interval (sympy.sets.fancysets.complexregion property)": [[216, "sympy.sets.fancysets.ComplexRegion.a_interval"]], "as_relational() (sympy.sets.fancysets.range method)": [[216, "sympy.sets.fancysets.Range.as_relational"]], "as_relational() (sympy.sets.sets.complement method)": [[216, "sympy.sets.sets.Complement.as_relational"]], "as_relational() (sympy.sets.sets.finiteset method)": [[216, "sympy.sets.sets.FiniteSet.as_relational"]], "as_relational() (sympy.sets.sets.intersection method)": [[216, "sympy.sets.sets.Intersection.as_relational"]], "as_relational() (sympy.sets.sets.interval method)": [[216, "sympy.sets.sets.Interval.as_relational"]], "as_relational() (sympy.sets.sets.symmetricdifference method)": [[216, "sympy.sets.sets.SymmetricDifference.as_relational"]], "as_relational() (sympy.sets.sets.union method)": [[216, "sympy.sets.sets.Union.as_relational"]], "b_interval (sympy.sets.fancysets.complexregion property)": [[216, "sympy.sets.fancysets.ComplexRegion.b_interval"]], "boundary (sympy.sets.sets.set property)": [[216, "sympy.sets.sets.Set.boundary"]], "closure (sympy.sets.sets.set property)": [[216, "sympy.sets.sets.Set.closure"]], "complement() (sympy.sets.sets.set method)": [[216, "sympy.sets.sets.Set.complement"]], "contains() (sympy.sets.sets.set method)": [[216, "sympy.sets.sets.Set.contains"]], "end (sympy.sets.sets.interval property)": [[216, "sympy.sets.sets.Interval.end"]], "from_real() (sympy.sets.fancysets.complexregion class method)": [[216, "sympy.sets.fancysets.ComplexRegion.from_real"]], "imageset() (in module sympy.sets.sets)": [[216, "sympy.sets.sets.imageset"]], "inf (sympy.sets.sets.set property)": [[216, "sympy.sets.sets.Set.inf"]], "interior (sympy.sets.sets.set property)": [[216, "sympy.sets.sets.Set.interior"]], "intersect() (sympy.sets.sets.set method)": [[216, "sympy.sets.sets.Set.intersect"]], "intersection() (sympy.sets.sets.set method)": [[216, "sympy.sets.sets.Set.intersection"]], "is_closed (sympy.sets.sets.set property)": [[216, "sympy.sets.sets.Set.is_closed"]], "is_disjoint() (sympy.sets.sets.set method)": [[216, "sympy.sets.sets.Set.is_disjoint"]], "is_iterable (sympy.sets.sets.productset property)": [[216, "sympy.sets.sets.ProductSet.is_iterable"]], "is_left_unbounded (sympy.sets.sets.interval property)": [[216, "sympy.sets.sets.Interval.is_left_unbounded"]], "is_open (sympy.sets.sets.set property)": [[216, "sympy.sets.sets.Set.is_open"]], "is_proper_subset() (sympy.sets.sets.set method)": [[216, "sympy.sets.sets.Set.is_proper_subset"]], "is_proper_superset() (sympy.sets.sets.set method)": [[216, "sympy.sets.sets.Set.is_proper_superset"]], "is_right_unbounded (sympy.sets.sets.interval property)": [[216, "sympy.sets.sets.Interval.is_right_unbounded"]], "is_subset() (sympy.sets.sets.set method)": [[216, "sympy.sets.sets.Set.is_subset"]], "is_superset() (sympy.sets.sets.set method)": [[216, "sympy.sets.sets.Set.is_superset"]], "isdisjoint() (sympy.sets.sets.set method)": [[216, "sympy.sets.sets.Set.isdisjoint"]], "issubset() (sympy.sets.sets.set method)": [[216, "sympy.sets.sets.Set.issubset"]], "issuperset() (sympy.sets.sets.set method)": [[216, "sympy.sets.sets.Set.issuperset"]], "kind (sympy.sets.sets.set property)": [[216, "sympy.sets.sets.Set.kind"]], "left_open (sympy.sets.sets.interval property)": [[216, "sympy.sets.sets.Interval.left_open"]], "measure (sympy.sets.sets.set property)": [[216, "sympy.sets.sets.Set.measure"]], "normalize_theta_set() (in module sympy.sets.fancysets)": [[216, "sympy.sets.fancysets.normalize_theta_set"]], "open() (sympy.sets.sets.interval class method)": [[216, "sympy.sets.sets.Interval.open"]], "powerset() (sympy.sets.sets.set method)": [[216, "sympy.sets.sets.Set.powerset"]], "psets (sympy.sets.fancysets.complexregion property)": [[216, "sympy.sets.fancysets.ComplexRegion.psets"]], "reduce() (sympy.sets.sets.complement static method)": [[216, "sympy.sets.sets.Complement.reduce"]], "reversed (sympy.sets.fancysets.range property)": [[216, "sympy.sets.fancysets.Range.reversed"]], "right_open (sympy.sets.sets.interval property)": [[216, "sympy.sets.sets.Interval.right_open"]], "sets (sympy.sets.fancysets.complexregion property)": [[216, "sympy.sets.fancysets.ComplexRegion.sets"]], "start (sympy.sets.sets.interval property)": [[216, "sympy.sets.sets.Interval.start"]], "sup (sympy.sets.sets.set property)": [[216, "sympy.sets.sets.Set.sup"]], "symmetric_difference() (sympy.sets.sets.set method)": [[216, "sympy.sets.sets.Set.symmetric_difference"]], "sympy.sets.conditionset": [[216, "module-sympy.sets.conditionset"]], "sympy.sets.fancysets": [[216, "module-sympy.sets.fancysets"]], "sympy.sets.powerset": [[216, "module-sympy.sets.powerset"]], "sympy.sets.sets": [[216, "module-sympy.sets.sets"]], "union() (sympy.sets.sets.set method)": [[216, "sympy.sets.sets.Set.union"]], "tr0() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR0"]], "tr1() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR1"]], "tr10() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR10"]], "tr10i() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR10i"]], "tr11() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR11"]], "tr111() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR111"]], "tr12() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR12"]], "tr12i() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR12i"]], "tr13() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR13"]], "tr14() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR14"]], "tr15() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR15"]], "tr16() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR16"]], "tr2() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR2"]], "tr22() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR22"]], "tr2i() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR2i"]], "tr3() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR3"]], "tr4() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR4"]], "tr5() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR5"]], "tr6() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR6"]], "tr7() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR7"]], "tr8() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR8"]], "tr9() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TR9"]], "trmorrie() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TRmorrie"]], "trpower() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.TRpower"]], "fu() (in module sympy.simplify.fu)": [[217, "sympy.simplify.fu.fu"]], "sympy.simplify.hyperexpand_doc": [[218, "module-sympy.simplify.hyperexpand_doc"]], "epath (class in sympy.simplify.epathtools)": [[220, "sympy.simplify.epathtools.EPath"]], "apply() (sympy.simplify.epathtools.epath method)": [[220, "sympy.simplify.epathtools.EPath.apply"]], "besselsimp() (in module sympy.simplify.simplify)": [[220, "sympy.simplify.simplify.besselsimp"]], "collect() (in module sympy.simplify.radsimp)": [[220, "sympy.simplify.radsimp.collect"]], "collect_const() (in module sympy.simplify.radsimp)": [[220, "sympy.simplify.radsimp.collect_const"]], "collect_sqrt() (in module sympy.simplify.radsimp)": [[220, "sympy.simplify.radsimp.collect_sqrt"]], "combsimp() (in module sympy.simplify.combsimp)": [[220, "sympy.simplify.combsimp.combsimp"]], "cse() (in module sympy.simplify.cse_main)": [[220, "sympy.simplify.cse_main.cse"]], "epath() (in module sympy.simplify.epathtools)": [[220, "sympy.simplify.epathtools.epath"]], "fraction() (in module sympy.simplify.radsimp)": [[220, "sympy.simplify.radsimp.fraction"]], "hyperexpand() (in module sympy.simplify.hyperexpand)": [[220, "sympy.simplify.hyperexpand.hyperexpand"]], "hypersimilar() (in module sympy.simplify.simplify)": [[220, "sympy.simplify.simplify.hypersimilar"]], "hypersimp() (in module sympy.simplify.simplify)": [[220, "sympy.simplify.simplify.hypersimp"]], "kroneckersimp() (in module sympy.simplify.simplify)": [[220, "sympy.simplify.simplify.kroneckersimp"]], "logcombine() (in module sympy.simplify.simplify)": [[220, "sympy.simplify.simplify.logcombine"]], "nsimplify() (in module sympy.simplify.simplify)": [[220, "sympy.simplify.simplify.nsimplify"]], "nthroot() (in module sympy.simplify.simplify)": [[220, "sympy.simplify.simplify.nthroot"]], "opt_cse() (in module sympy.simplify.cse_main)": [[220, "sympy.simplify.cse_main.opt_cse"]], "posify() (in module sympy.simplify.simplify)": [[220, "sympy.simplify.simplify.posify"]], "powdenest() (in module sympy.simplify.powsimp)": [[220, "sympy.simplify.powsimp.powdenest"]], "powsimp() (in module sympy.simplify.powsimp)": [[220, "sympy.simplify.powsimp.powsimp"]], "rad_rationalize() (in module sympy.simplify.radsimp)": [[220, "sympy.simplify.radsimp.rad_rationalize"]], "radsimp() (in module sympy.simplify.radsimp)": [[220, "sympy.simplify.radsimp.radsimp"]], "ratsimp() (in module sympy.simplify.ratsimp)": [[220, "sympy.simplify.ratsimp.ratsimp"]], "ratsimpmodprime() (in module sympy.simplify.ratsimp)": [[220, "sympy.simplify.ratsimp.ratsimpmodprime"]], "rcollect() (in module sympy.simplify.radsimp)": [[220, "sympy.simplify.radsimp.rcollect"]], "select() (sympy.simplify.epathtools.epath method)": [[220, "sympy.simplify.epathtools.EPath.select"]], "separatevars() (in module sympy.simplify.simplify)": [[220, "sympy.simplify.simplify.separatevars"]], "simplify() (in module sympy.simplify.simplify)": [[220, "sympy.simplify.simplify.simplify"]], "sqrtdenest() (in module sympy.simplify.sqrtdenest)": [[220, "sympy.simplify.sqrtdenest.sqrtdenest"]], "sympy.simplify.combsimp": [[220, "module-sympy.simplify.combsimp"]], "sympy.simplify.cse_main": [[220, "module-sympy.simplify.cse_main"]], "sympy.simplify.epathtools": [[220, "module-sympy.simplify.epathtools"]], "sympy.simplify.hyperexpand": [[220, "module-sympy.simplify.hyperexpand"]], "sympy.simplify.powsimp": [[220, "module-sympy.simplify.powsimp"]], "sympy.simplify.radsimp": [[220, "module-sympy.simplify.radsimp"]], "sympy.simplify.ratsimp": [[220, "module-sympy.simplify.ratsimp"]], "sympy.simplify.sqrtdenest": [[220, "module-sympy.simplify.sqrtdenest"]], "sympy.simplify.trigsimp": [[220, "module-sympy.simplify.trigsimp"]], "tree_cse() (in module sympy.simplify.cse_main)": [[220, "sympy.simplify.cse_main.tree_cse"]], "trigsimp() (in module sympy.simplify.trigsimp)": [[220, "sympy.simplify.trigsimp.trigsimp"]], "binaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.BinaryQuadratic"]], "cubicthue (class in sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.CubicThue"]], "diophantineequationtype (class in sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.DiophantineEquationType"]], "diophantinesolutionset (class in sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.DiophantineSolutionSet"]], "generalpythagorean (class in sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.GeneralPythagorean"]], "generalsumofevenpowers (class in sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.GeneralSumOfEvenPowers"]], "generalsumofsquares (class in sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.GeneralSumOfSquares"]], "homogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.HomogeneousGeneralQuadratic"]], "homogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadratic"]], "homogeneousternaryquadraticnormal (class in sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadraticNormal"]], "inhomogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.InhomogeneousGeneralQuadratic"]], "inhomogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.InhomogeneousTernaryQuadratic"]], "linear (class in sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.Linear"]], "pqa() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.PQa"]], "univariate (class in sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.Univariate"]], "base_solution_linear() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.base_solution_linear"]], "classify_diop() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.classify_diop"]], "cornacchia() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.cornacchia"]], "descent() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.descent"]], "diop_dn() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.diop_DN"]], "diop_bf_dn() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.diop_bf_DN"]], "diop_general_pythagorean() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.diop_general_pythagorean"]], "diop_general_sum_of_even_powers() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_even_powers"]], "diop_general_sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_squares"]], "diop_linear() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.diop_linear"]], "diop_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.diop_quadratic"]], "diop_solve() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.diop_solve"]], "diop_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic"]], "diop_ternary_quadratic_normal() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic_normal"]], "diophantine() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.diophantine"]], "divisible() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.divisible"]], "equivalent() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.equivalent"]], "find_dn() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.find_DN"]], "gaussian_reduce() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.gaussian_reduce"]], "holzer() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.holzer"]], "ldescent() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.ldescent"]], "matches() (sympy.solvers.diophantine.diophantine.diophantineequationtype method)": [[221, "sympy.solvers.diophantine.diophantine.DiophantineEquationType.matches"]], "merge_solution() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.merge_solution"]], "parametrize_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.parametrize_ternary_quadratic"]], "partition() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.partition"]], "power_representation() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.power_representation"]], "prime_as_sum_of_two_squares() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.prime_as_sum_of_two_squares"]], "reconstruct() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.reconstruct"]], "sqf_normal() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.sqf_normal"]], "square_factor() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.square_factor"]], "sum_of_four_squares() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.sum_of_four_squares"]], "sum_of_powers() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.sum_of_powers"]], "sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.sum_of_squares"]], "sum_of_three_squares() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.sum_of_three_squares"]], "transformation_to_dn() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.transformation_to_DN"]], "transformation_to_normal() (in module sympy.solvers.diophantine.diophantine)": [[221, "sympy.solvers.diophantine.diophantine.transformation_to_normal"]], "reduce_abs_inequalities() (in module sympy.solvers.inequalities)": [[223, "sympy.solvers.inequalities.reduce_abs_inequalities"]], "reduce_abs_inequality() (in module sympy.solvers.inequalities)": [[223, "sympy.solvers.inequalities.reduce_abs_inequality"]], "reduce_inequalities() (in module sympy.solvers.inequalities)": [[223, "sympy.solvers.inequalities.reduce_inequalities"]], "reduce_rational_inequalities() (in module sympy.solvers.inequalities)": [[223, "sympy.solvers.inequalities.reduce_rational_inequalities"]], "solve_poly_inequalities() (in module sympy.solvers.inequalities)": [[223, "sympy.solvers.inequalities.solve_poly_inequalities"]], "solve_poly_inequality() (in module sympy.solvers.inequalities)": [[223, "sympy.solvers.inequalities.solve_poly_inequality"]], "solve_rational_inequalities() (in module sympy.solvers.inequalities)": [[223, "sympy.solvers.inequalities.solve_rational_inequalities"]], "solve_univariate_inequality() (in module sympy.solvers.inequalities)": [[223, "sympy.solvers.inequalities.solve_univariate_inequality"]], "sympy.solvers.inequalities": [[223, "module-sympy.solvers.inequalities"]], "almostlinear (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.AlmostLinear"]], "bernoulli (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.Bernoulli"]], "factorable (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.Factorable"]], "firstexact (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.FirstExact"]], "firstlinear (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.FirstLinear"]], "homogeneouscoeffbest (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.HomogeneousCoeffBest"]], "homogeneouscoeffsubsdepdivindep (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep"]], "homogeneouscoeffsubsindepdivdep (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep"]], "liegroup (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.LieGroup"]], "linearcoefficients (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.LinearCoefficients"]], "liouville (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.Liouville"]], "nthalgebraic (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.NthAlgebraic"]], "nthlinearconstantcoeffhomogeneous (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.NthLinearConstantCoeffHomogeneous"]], "nthlinearconstantcoeffundeterminedcoefficients (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.NthLinearConstantCoeffUndeterminedCoefficients"]], "nthlinearconstantcoeffvariationofparameters (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.NthLinearConstantCoeffVariationOfParameters"]], "nthlineareulereqhomogeneous (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.NthLinearEulerEqHomogeneous"]], "nthlineareulereqnonhomogeneousundeterminedcoefficients (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"]], "nthlineareulereqnonhomogeneousvariationofparameters (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousVariationOfParameters"]], "nthorderreducible (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.NthOrderReducible"]], "rationalriccati (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.RationalRiccati"]], "riccatispecial (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.RiccatiSpecial"]], "secondhypergeometric (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.SecondHypergeometric"]], "secondlinearairy (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.SecondLinearAiry"]], "secondlinearbessel (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.SecondLinearBessel"]], "separable (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.Separable"]], "separablereduced (class in sympy.solvers.ode.single)": [[224, "sympy.solvers.ode.single.SeparableReduced"]], "_handle_integral() (in module sympy.solvers.ode.ode)": [[224, "sympy.solvers.ode.ode._handle_Integral"]], "_linear_2eq_order1_type6() (in module sympy.solvers.ode.ode)": [[224, "sympy.solvers.ode.ode._linear_2eq_order1_type6"]], "_linear_2eq_order1_type7() (in module sympy.solvers.ode.ode)": [[224, "sympy.solvers.ode.ode._linear_2eq_order1_type7"]], "_nonlinear_2eq_order1_type1() (in module sympy.solvers.ode.ode)": [[224, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type1"]], "_nonlinear_2eq_order1_type2() (in module sympy.solvers.ode.ode)": [[224, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type2"]], "_nonlinear_2eq_order1_type3() (in module sympy.solvers.ode.ode)": [[224, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type3"]], "_nonlinear_2eq_order1_type4() (in module sympy.solvers.ode.ode)": [[224, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type4"]], "_nonlinear_2eq_order1_type5() (in module sympy.solvers.ode.ode)": [[224, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type5"]], "_nonlinear_3eq_order1_type1() (in module sympy.solvers.ode.ode)": [[224, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type1"]], "_nonlinear_3eq_order1_type2() (in module sympy.solvers.ode.ode)": [[224, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type2"]], "_nonlinear_3eq_order1_type3() (in module sympy.solvers.ode.ode)": [[224, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type3"]], "_nonlinear_3eq_order1_type4() (in module sympy.solvers.ode.ode)": [[224, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type4"]], "_nonlinear_3eq_order1_type5() (in module sympy.solvers.ode.ode)": [[224, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type5"]], "allhints (in module sympy.solvers.ode)": [[224, "sympy.solvers.ode.allhints"]], "canonical_odes() (in module sympy.solvers.ode.systems)": [[224, "sympy.solvers.ode.systems.canonical_odes"]], "checkinfsol() (in module sympy.solvers.ode)": [[224, "sympy.solvers.ode.checkinfsol"]], "checkodesol() (in module sympy.solvers.ode)": [[224, "sympy.solvers.ode.checkodesol"]], "classify_ode() (in module sympy.solvers.ode)": [[224, "sympy.solvers.ode.classify_ode"]], "compute_m_ybar() (in module sympy.solvers.ode.riccati)": [[224, "sympy.solvers.ode.riccati.compute_m_ybar"]], "constant_renumber() (in module sympy.solvers.ode.ode)": [[224, "sympy.solvers.ode.ode.constant_renumber"]], "constantsimp() (in module sympy.solvers.ode)": [[224, "sympy.solvers.ode.constantsimp"]], "construct_c() (in module sympy.solvers.ode.riccati)": [[224, "sympy.solvers.ode.riccati.construct_c"]], "construct_d() (in module sympy.solvers.ode.riccati)": [[224, "sympy.solvers.ode.riccati.construct_d"]], "dsolve() (in module sympy.solvers.ode)": [[224, "sympy.solvers.ode.dsolve"]], "dsolve_system() (in module sympy.solvers.ode.systems)": [[224, "sympy.solvers.ode.systems.dsolve_system"]], "get_gen_sol_from_part_sol() (in module sympy.solvers.ode.riccati)": [[224, "sympy.solvers.ode.riccati.get_gen_sol_from_part_sol"]], "homogeneous_order() (in module sympy.solvers.ode)": [[224, "sympy.solvers.ode.homogeneous_order"]], "infinitesimals() (in module sympy.solvers.ode)": [[224, "sympy.solvers.ode.infinitesimals"]], "lie_heuristic_abaco1_product() (in module sympy.solvers.ode.lie_group)": [[224, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_product"]], "lie_heuristic_abaco1_simple() (in module sympy.solvers.ode.lie_group)": [[224, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_simple"]], "lie_heuristic_abaco2_similar() (in module sympy.solvers.ode.lie_group)": [[224, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_similar"]], "lie_heuristic_abaco2_unique_general() (in module sympy.solvers.ode.lie_group)": [[224, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_general"]], "lie_heuristic_abaco2_unique_unknown() (in module sympy.solvers.ode.lie_group)": [[224, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_unknown"]], "lie_heuristic_bivariate() (in module sympy.solvers.ode.lie_group)": [[224, "sympy.solvers.ode.lie_group.lie_heuristic_bivariate"]], "lie_heuristic_chi() (in module sympy.solvers.ode.lie_group)": [[224, "sympy.solvers.ode.lie_group.lie_heuristic_chi"]], "lie_heuristic_function_sum() (in module sympy.solvers.ode.lie_group)": [[224, "sympy.solvers.ode.lie_group.lie_heuristic_function_sum"]], "lie_heuristic_linear() (in module sympy.solvers.ode.lie_group)": [[224, "sympy.solvers.ode.lie_group.lie_heuristic_linear"]], "linear_ode_to_matrix() (in module sympy.solvers.ode.systems)": [[224, "sympy.solvers.ode.systems.linear_ode_to_matrix"]], "linodesolve() (in module sympy.solvers.ode.systems)": [[224, "sympy.solvers.ode.systems.linodesolve"]], "linodesolve_type() (in module sympy.solvers.ode.systems)": [[224, "sympy.solvers.ode.systems.linodesolve_type"]], "matrix_exp() (in module sympy.solvers.ode.systems)": [[224, "sympy.solvers.ode.systems.matrix_exp"]], "matrix_exp_jordan_form() (in module sympy.solvers.ode.systems)": [[224, "sympy.solvers.ode.systems.matrix_exp_jordan_form"]], "ode_1st_power_series() (in module sympy.solvers.ode.ode)": [[224, "sympy.solvers.ode.ode.ode_1st_power_series"]], "ode_2nd_power_series_ordinary() (in module sympy.solvers.ode.ode)": [[224, "sympy.solvers.ode.ode.ode_2nd_power_series_ordinary"]], "ode_2nd_power_series_regular() (in module sympy.solvers.ode.ode)": [[224, "sympy.solvers.ode.ode.ode_2nd_power_series_regular"]], "ode_sol_simplicity() (in module sympy.solvers.ode.ode)": [[224, "sympy.solvers.ode.ode.ode_sol_simplicity"]], "odesimp() (in module sympy.solvers.ode.ode)": [[224, "sympy.solvers.ode.ode.odesimp"]], "rational_laurent_series() (in module sympy.solvers.ode.riccati)": [[224, "sympy.solvers.ode.riccati.rational_laurent_series"]], "remove_redundant_sols() (in module sympy.solvers.ode.riccati)": [[224, "sympy.solvers.ode.riccati.remove_redundant_sols"]], "riccati_inverse_normal() (in module sympy.solvers.ode.riccati)": [[224, "sympy.solvers.ode.riccati.riccati_inverse_normal"]], "riccati_normal() (in module sympy.solvers.ode.riccati)": [[224, "sympy.solvers.ode.riccati.riccati_normal"]], "riccati_reduced() (in module sympy.solvers.ode.riccati)": [[224, "sympy.solvers.ode.riccati.riccati_reduced"]], "solve_aux_eq() (in module sympy.solvers.ode.riccati)": [[224, "sympy.solvers.ode.riccati.solve_aux_eq"]], "solve_riccati() (in module sympy.solvers.ode.riccati)": [[224, "sympy.solvers.ode.riccati.solve_riccati"]], "sympy.solvers.ode": [[224, "module-sympy.solvers.ode"]], "sympy.solvers.ode.ode": [[224, "module-sympy.solvers.ode.ode"]], "checkpdesol() (in module sympy.solvers.pde)": [[225, "sympy.solvers.pde.checkpdesol"]], "classify_pde() (in module sympy.solvers.pde)": [[225, "sympy.solvers.pde.classify_pde"]], "pde_1st_linear_constant_coeff() (in module sympy.solvers.pde)": [[225, "sympy.solvers.pde.pde_1st_linear_constant_coeff"]], "pde_1st_linear_constant_coeff_homogeneous() (in module sympy.solvers.pde)": [[225, "sympy.solvers.pde.pde_1st_linear_constant_coeff_homogeneous"]], "pde_1st_linear_variable_coeff() (in module sympy.solvers.pde)": [[225, "sympy.solvers.pde.pde_1st_linear_variable_coeff"]], "pde_separate() (in module sympy.solvers.pde)": [[225, "sympy.solvers.pde.pde_separate"]], "pde_separate_add() (in module sympy.solvers.pde)": [[225, "sympy.solvers.pde.pde_separate_add"]], "pde_separate_mul() (in module sympy.solvers.pde)": [[225, "sympy.solvers.pde.pde_separate_mul"]], "pdsolve() (in module sympy.solvers.pde)": [[225, "sympy.solvers.pde.pdsolve"]], "sympy.solvers.pde": [[225, "module-sympy.solvers.pde"]], "checksol() (in module sympy.solvers.solvers)": [[226, "sympy.solvers.solvers.checksol"]], "nsolve() (in module sympy.solvers.solvers)": [[226, "sympy.solvers.solvers.nsolve"]], "ode_order() (in module sympy.solvers.deutils)": [[226, "sympy.solvers.deutils.ode_order"]], "rsolve() (in module sympy.solvers.recurr)": [[226, "sympy.solvers.recurr.rsolve"]], "rsolve_hyper() (in module sympy.solvers.recurr)": [[226, "sympy.solvers.recurr.rsolve_hyper"]], "rsolve_poly() (in module sympy.solvers.recurr)": [[226, "sympy.solvers.recurr.rsolve_poly"]], "rsolve_ratio() (in module sympy.solvers.recurr)": [[226, "sympy.solvers.recurr.rsolve_ratio"]], "solve() (in module sympy.solvers.solvers)": [[226, "sympy.solvers.solvers.solve"]], "solve_linear() (in module sympy.solvers.solvers)": [[226, "sympy.solvers.solvers.solve_linear"]], "solve_linear_system() (in module sympy.solvers.solvers)": [[226, "sympy.solvers.solvers.solve_linear_system"]], "solve_linear_system_lu() (in module sympy.solvers.solvers)": [[226, "sympy.solvers.solvers.solve_linear_system_LU"]], "solve_poly_system() (in module sympy.solvers.polysys)": [[226, "sympy.solvers.polysys.solve_poly_system"]], "solve_triangulated() (in module sympy.solvers.polysys)": [[226, "sympy.solvers.polysys.solve_triangulated"]], "solve_undetermined_coeffs() (in module sympy.solvers.solvers)": [[226, "sympy.solvers.solvers.solve_undetermined_coeffs"]], "sympy.solvers": [[226, "module-sympy.solvers"]], "sympy.solvers.recurr": [[226, "module-sympy.solvers.recurr"]], "unrad() (in module sympy.solvers.solvers)": [[226, "sympy.solvers.solvers.unrad"]], "_is_exponential() (in module sympy.solvers.solveset)": [[227, "sympy.solvers.solveset._is_exponential"]], "_is_logarithmic() (in module sympy.solvers.solveset)": [[227, "sympy.solvers.solveset._is_logarithmic"]], "_solve_exponential() (in module sympy.solvers.solveset)": [[227, "sympy.solvers.solveset._solve_exponential"]], "_solve_logarithm() (in module sympy.solvers.solveset)": [[227, "sympy.solvers.solveset._solve_logarithm"]], "_transolve() (in module sympy.solvers.solveset)": [[227, "sympy.solvers.solveset._transolve"]], "domain_check() (in module sympy.solvers.solveset)": [[227, "sympy.solvers.solveset.domain_check"]], "invert_complex() (in module sympy.solvers.solveset)": [[227, "sympy.solvers.solveset.invert_complex"]], "invert_real() (in module sympy.solvers.solveset)": [[227, "sympy.solvers.solveset.invert_real"]], "linear_eq_to_matrix() (in module sympy.solvers.solveset)": [[227, "sympy.solvers.solveset.linear_eq_to_matrix"]], "linsolve() (in module sympy.solvers.solveset)": [[227, "sympy.solvers.solveset.linsolve"]], "nonlinsolve() (in module sympy.solvers.solveset)": [[227, "sympy.solvers.solveset.nonlinsolve"]], "solveset() (in module sympy.solvers.solveset)": [[227, "sympy.solvers.solveset.solveset"]], "solveset_complex() (in module sympy.solvers.solveset)": [[227, "sympy.solvers.solveset.solveset_complex"]], "solveset_real() (in module sympy.solvers.solveset)": [[227, "sympy.solvers.solveset.solveset_real"]], "solvify() (in module sympy.solvers.solveset)": [[227, "sympy.solvers.solveset.solvify"]], "sympy.solvers.solveset": [[227, "module-sympy.solvers.solveset"]], "arcsin() (in module sympy.stats)": [[228, "sympy.stats.Arcsin"]], "benini() (in module sympy.stats)": [[228, "sympy.stats.Benini"]], "bernoulli() (in module sympy.stats)": [[228, "sympy.stats.Bernoulli"]], "bernoulliprocess (class in sympy.stats)": [[228, "sympy.stats.BernoulliProcess"]], "beta() (in module sympy.stats)": [[228, "sympy.stats.Beta"]], "betabinomial() (in module sympy.stats)": [[228, "sympy.stats.BetaBinomial"]], "betanoncentral() (in module sympy.stats)": [[228, "sympy.stats.BetaNoncentral"]], "betaprime() (in module sympy.stats)": [[228, "sympy.stats.BetaPrime"]], "binomial() (in module sympy.stats)": [[228, "sympy.stats.Binomial"]], "boundedpareto() (in module sympy.stats)": [[228, "sympy.stats.BoundedPareto"]], "cauchy() (in module sympy.stats)": [[228, "sympy.stats.Cauchy"]], "centralmoment (class in sympy.stats)": [[228, "sympy.stats.CentralMoment"]], "chi() (in module sympy.stats)": [[228, "sympy.stats.Chi"]], "chinoncentral() (in module sympy.stats)": [[228, "sympy.stats.ChiNoncentral"]], "chisquared() (in module sympy.stats)": [[228, "sympy.stats.ChiSquared"]], "coin() (in module sympy.stats)": [[228, "sympy.stats.Coin"]], "compounddistribution (class in sympy.stats.compound_rv)": [[228, "sympy.stats.compound_rv.CompoundDistribution"]], "conditionaldomain (class in sympy.stats.rv)": [[228, "sympy.stats.rv.ConditionalDomain"]], "continuousdomain (class in sympy.stats.crv)": [[228, "sympy.stats.crv.ContinuousDomain"]], "continuousmarkovchain (class in sympy.stats)": [[228, "sympy.stats.ContinuousMarkovChain"]], "continuouspspace (class in sympy.stats.crv)": [[228, "sympy.stats.crv.ContinuousPSpace"]], "continuousrv() (in module sympy.stats)": [[228, "sympy.stats.ContinuousRV"]], "covariance (class in sympy.stats)": [[228, "sympy.stats.Covariance"]], "crosscovariancematrix (class in sympy.stats)": [[228, "sympy.stats.CrossCovarianceMatrix"]], "dagum() (in module sympy.stats)": [[228, "sympy.stats.Dagum"]], "die() (in module sympy.stats)": [[228, "sympy.stats.Die"]], "diepspace (class in sympy.stats.frv_types)": [[228, "sympy.stats.frv_types.DiePSpace"]], "discretemarkovchain (class in sympy.stats)": [[228, "sympy.stats.DiscreteMarkovChain"]], "discreteuniform() (in module sympy.stats)": [[228, "sympy.stats.DiscreteUniform"]], "e() (in module sympy.stats)": [[228, "sympy.stats.E"]], "erlang() (in module sympy.stats)": [[228, "sympy.stats.Erlang"]], "exgaussian() (in module sympy.stats)": [[228, "sympy.stats.ExGaussian"]], "expectation (class in sympy.stats)": [[228, "sympy.stats.Expectation"]], "expectationmatrix (class in sympy.stats)": [[228, "sympy.stats.ExpectationMatrix"]], "exponential() (in module sympy.stats)": [[228, "sympy.stats.Exponential"]], "fdistribution() (in module sympy.stats)": [[228, "sympy.stats.FDistribution"]], "finitedomain (class in sympy.stats.frv)": [[228, "sympy.stats.frv.FiniteDomain"]], "finitepspace (class in sympy.stats.frv)": [[228, "sympy.stats.frv.FinitePSpace"]], "finiterv() (in module sympy.stats)": [[228, "sympy.stats.FiniteRV"]], "fisherz() (in module sympy.stats)": [[228, "sympy.stats.FisherZ"]], "frechet() (in module sympy.stats)": [[228, "sympy.stats.Frechet"]], "gamma() (in module sympy.stats)": [[228, "sympy.stats.Gamma"]], "gammainverse() (in module sympy.stats)": [[228, "sympy.stats.GammaInverse"]], "gammaprocess (class in sympy.stats)": [[228, "sympy.stats.GammaProcess"]], "generalizedmultivariateloggamma() (in module sympy.stats)": [[228, "sympy.stats.GeneralizedMultivariateLogGamma"]], "generalizedmultivariateloggammaomega() (in module sympy.stats)": [[228, "sympy.stats.GeneralizedMultivariateLogGammaOmega"]], "geometric() (in module sympy.stats)": [[228, "sympy.stats.Geometric"]], "gompertz() (in module sympy.stats)": [[228, "sympy.stats.Gompertz"]], "gumbel() (in module sympy.stats)": [[228, "sympy.stats.Gumbel"]], "hermite() (in module sympy.stats)": [[228, "sympy.stats.Hermite"]], "hypergeometric() (in module sympy.stats)": [[228, "sympy.stats.Hypergeometric"]], "jointrv() (in module sympy.stats)": [[228, "sympy.stats.JointRV"]], "kumaraswamy() (in module sympy.stats)": [[228, "sympy.stats.Kumaraswamy"]], "laplace() (in module sympy.stats)": [[228, "sympy.stats.Laplace"]], "levy() (in module sympy.stats)": [[228, "sympy.stats.Levy"]], "loglogistic() (in module sympy.stats)": [[228, "sympy.stats.LogLogistic"]], "lognormal() (in module sympy.stats)": [[228, "sympy.stats.LogNormal"]], "logarithmic() (in module sympy.stats)": [[228, "sympy.stats.Logarithmic"]], "logistic() (in module sympy.stats)": [[228, "sympy.stats.Logistic"]], "lomax() (in module sympy.stats)": [[228, "sympy.stats.Lomax"]], "matrixgamma() (in module sympy.stats)": [[228, "sympy.stats.MatrixGamma"]], "matrixnormal() (in module sympy.stats)": [[228, "sympy.stats.MatrixNormal"]], "maxwell() (in module sympy.stats)": [[228, "sympy.stats.Maxwell"]], "moment (class in sympy.stats)": [[228, "sympy.stats.Moment"]], "moyal() (in module sympy.stats)": [[228, "sympy.stats.Moyal"]], "multinomial() (in module sympy.stats)": [[228, "sympy.stats.Multinomial"]], "multivariatebeta() (in module sympy.stats)": [[228, "sympy.stats.MultivariateBeta"]], "multivariateewens() (in module sympy.stats)": [[228, "sympy.stats.MultivariateEwens"]], "multivariatelaplace() (in module sympy.stats)": [[228, "sympy.stats.MultivariateLaplace"]], "multivariatenormal() (in module sympy.stats)": [[228, "sympy.stats.MultivariateNormal"]], "multivariatet() (in module sympy.stats)": [[228, "sympy.stats.MultivariateT"]], "nakagami() (in module sympy.stats)": [[228, "sympy.stats.Nakagami"]], "negativebinomial() (in module sympy.stats)": [[228, "sympy.stats.NegativeBinomial"]], "negativemultinomial() (in module sympy.stats)": [[228, "sympy.stats.NegativeMultinomial"]], "normal() (in module sympy.stats)": [[228, "sympy.stats.Normal"]], "normalgamma() (in module sympy.stats)": [[228, "sympy.stats.NormalGamma"]], "normalpspace (class in sympy.stats.crv_types)": [[228, "sympy.stats.crv_types.NormalPSpace"]], "p() (in module sympy.stats)": [[228, "sympy.stats.P"]], "pspace (class in sympy.stats.rv)": [[228, "sympy.stats.rv.PSpace"]], "pareto() (in module sympy.stats)": [[228, "sympy.stats.Pareto"]], "poisson() (in module sympy.stats)": [[228, "sympy.stats.Poisson"]], "poissonprocess (class in sympy.stats)": [[228, "sympy.stats.PoissonProcess"]], "powerfunction() (in module sympy.stats)": [[228, "sympy.stats.PowerFunction"]], "probability (class in sympy.stats)": [[228, "sympy.stats.Probability"]], "productdomain (class in sympy.stats.rv)": [[228, "sympy.stats.rv.ProductDomain"]], "productpspace (class in sympy.stats.rv)": [[228, "sympy.stats.rv.ProductPSpace"]], "quadraticu() (in module sympy.stats)": [[228, "sympy.stats.QuadraticU"]], "rademacher() (in module sympy.stats)": [[228, "sympy.stats.Rademacher"]], "raisedcosine() (in module sympy.stats)": [[228, "sympy.stats.RaisedCosine"]], "randomdomain (class in sympy.stats.rv)": [[228, "sympy.stats.rv.RandomDomain"]], "randomsymbol (class in sympy.stats.rv)": [[228, "sympy.stats.rv.RandomSymbol"]], "rayleigh() (in module sympy.stats)": [[228, "sympy.stats.Rayleigh"]], "reciprocal() (in module sympy.stats)": [[228, "sympy.stats.Reciprocal"]], "shiftedgompertz() (in module sympy.stats)": [[228, "sympy.stats.ShiftedGompertz"]], "singledomain (class in sympy.stats.rv)": [[228, "sympy.stats.rv.SingleDomain"]], "singlepspace (class in sympy.stats.rv)": [[228, "sympy.stats.rv.SinglePSpace"]], "skellam() (in module sympy.stats)": [[228, "sympy.stats.Skellam"]], "studentt() (in module sympy.stats)": [[228, "sympy.stats.StudentT"]], "trapezoidal() (in module sympy.stats)": [[228, "sympy.stats.Trapezoidal"]], "triangular() (in module sympy.stats)": [[228, "sympy.stats.Triangular"]], "uniform() (in module sympy.stats)": [[228, "sympy.stats.Uniform"]], "uniformsum() (in module sympy.stats)": [[228, "sympy.stats.UniformSum"]], "variance (class in sympy.stats)": [[228, "sympy.stats.Variance"]], "variancematrix (class in sympy.stats)": [[228, "sympy.stats.VarianceMatrix"]], "vonmises() (in module sympy.stats)": [[228, "sympy.stats.VonMises"]], "wald() (in module sympy.stats)": [[228, "sympy.stats.Wald"]], "weibull() (in module sympy.stats)": [[228, "sympy.stats.Weibull"]], "wienerprocess (class in sympy.stats)": [[228, "sympy.stats.WienerProcess"]], "wignersemicircle() (in module sympy.stats)": [[228, "sympy.stats.WignerSemicircle"]], "wishart() (in module sympy.stats)": [[228, "sympy.stats.Wishart"]], "yulesimon() (in module sympy.stats)": [[228, "sympy.stats.YuleSimon"]], "zeta() (in module sympy.stats)": [[228, "sympy.stats.Zeta"]], "absorbing_probabilities() (sympy.stats.discretemarkovchain method)": [[228, "sympy.stats.DiscreteMarkovChain.absorbing_probabilities"]], "canonical_form() (sympy.stats.discretemarkovchain method)": [[228, "sympy.stats.DiscreteMarkovChain.canonical_form"]], "cmoment() (in module sympy.stats)": [[228, "sympy.stats.cmoment"]], "communication_classes() (sympy.stats.discretemarkovchain method)": [[228, "sympy.stats.DiscreteMarkovChain.communication_classes"]], "correlation() (in module sympy.stats)": [[228, "sympy.stats.correlation"]], "coskewness() (in module sympy.stats)": [[228, "sympy.stats.coskewness"]], "covariance() (in module sympy.stats)": [[228, "sympy.stats.covariance"]], "decompose() (sympy.stats.discretemarkovchain method)": [[228, "sympy.stats.DiscreteMarkovChain.decompose"]], "density() (in module sympy.stats)": [[228, "sympy.stats.density"]], "entropy() (in module sympy.stats)": [[228, "sympy.stats.entropy"]], "expectation() (sympy.stats.bernoulliprocess method)": [[228, "sympy.stats.BernoulliProcess.expectation"]], "factorial_moment() (in module sympy.stats)": [[228, "sympy.stats.factorial_moment"]], "fixed_row_vector() (sympy.stats.discretemarkovchain method)": [[228, "sympy.stats.DiscreteMarkovChain.fixed_row_vector"]], "fundamental_matrix() (sympy.stats.discretemarkovchain method)": [[228, "sympy.stats.DiscreteMarkovChain.fundamental_matrix"]], "given() (in module sympy.stats)": [[228, "sympy.stats.given"]], "kurtosis() (in module sympy.stats)": [[228, "sympy.stats.kurtosis"]], "limiting_distribution (sympy.stats.discretemarkovchain property)": [[228, "sympy.stats.DiscreteMarkovChain.limiting_distribution"]], "marginal_distribution() (in module sympy.stats)": [[228, "sympy.stats.marginal_distribution"]], "median() (in module sympy.stats)": [[228, "sympy.stats.median"]], "moment() (in module sympy.stats)": [[228, "sympy.stats.moment"]], "probability() (sympy.stats.bernoulliprocess method)": [[228, "sympy.stats.BernoulliProcess.probability"]], "pspace() (in module sympy.stats.rv)": [[228, "sympy.stats.rv.pspace"]], "quantile() (in module sympy.stats)": [[228, "sympy.stats.quantile"]], "random_symbols() (in module sympy.stats.rv)": [[228, "sympy.stats.rv.random_symbols"]], "rs_swap() (in module sympy.stats.rv)": [[228, "sympy.stats.rv.rs_swap"]], "sample() (in module sympy.stats)": [[228, "sympy.stats.sample"]], "sample() (sympy.stats.discretemarkovchain method)": [[228, "sympy.stats.DiscreteMarkovChain.sample"]], "sample_iter() (in module sympy.stats)": [[228, "sympy.stats.sample_iter"]], "sampling_e() (in module sympy.stats.rv)": [[228, "sympy.stats.rv.sampling_E"]], "sampling_p() (in module sympy.stats.rv)": [[228, "sympy.stats.rv.sampling_P"]], "sampling_density() (in module sympy.stats.rv)": [[228, "sympy.stats.rv.sampling_density"]], "skewness() (in module sympy.stats)": [[228, "sympy.stats.skewness"]], "stationary_distribution() (sympy.stats.discretemarkovchain method)": [[228, "sympy.stats.DiscreteMarkovChain.stationary_distribution"]], "std() (in module sympy.stats)": [[228, "sympy.stats.std"]], "sympy.stats": [[228, "module-sympy.stats"]], "sympy.stats.die() (in module sympy.stats.crv_types)": [[228, "sympy.stats.crv_types.sympy.stats.Die"]], "sympy.stats.normal() (in module sympy.stats.crv_types)": [[228, "sympy.stats.crv_types.sympy.stats.Normal"]], "sympy.stats.crv": [[228, "module-sympy.stats.crv"]], "sympy.stats.crv_types": [[228, "module-sympy.stats.crv_types"]], "sympy.stats.frv": [[228, "module-sympy.stats.frv"]], "sympy.stats.frv_types": [[228, "module-sympy.stats.frv_types"]], "sympy.stats.rv": [[228, "module-sympy.stats.rv"]], "transition_probabilities (sympy.stats.discretemarkovchain property)": [[228, "sympy.stats.DiscreteMarkovChain.transition_probabilities"]], "variance() (in module sympy.stats)": [[228, "sympy.stats.variance"]], "where() (in module sympy.stats)": [[228, "sympy.stats.where"]], "immutabledensendimarray (class in sympy.tensor.array)": [[229, "sympy.tensor.array.ImmutableDenseNDimArray"]], "immutablesparsendimarray (class in sympy.tensor.array)": [[229, "sympy.tensor.array.ImmutableSparseNDimArray"]], "mutabledensendimarray (class in sympy.tensor.array)": [[229, "sympy.tensor.array.MutableDenseNDimArray"]], "mutablesparsendimarray (class in sympy.tensor.array)": [[229, "sympy.tensor.array.MutableSparseNDimArray"]], "derive_by_array() (in module sympy.tensor.array)": [[229, "sympy.tensor.array.derive_by_array"]], "permutedims() (in module sympy.tensor.array)": [[229, "sympy.tensor.array.permutedims"]], "sympy.tensor.array": [[229, "module-sympy.tensor.array"]], "tensorcontraction() (in module sympy.tensor.array)": [[229, "sympy.tensor.array.tensorcontraction"]], "tensordiagonal() (in module sympy.tensor.array)": [[229, "sympy.tensor.array.tensordiagonal"]], "tensorproduct() (in module sympy.tensor.array)": [[229, "sympy.tensor.array.tensorproduct"]], "sympy.tensor.array.expressions": [[230, "module-sympy.tensor.array.expressions"]], "sympy.tensor": [[231, "module-sympy.tensor"]], "get_contraction_structure() (in module sympy.tensor.index_methods)": [[232, "sympy.tensor.index_methods.get_contraction_structure"]], "get_indices() (in module sympy.tensor.index_methods)": [[232, "sympy.tensor.index_methods.get_indices"]], "sympy.tensor.index_methods": [[232, "module-sympy.tensor.index_methods"]], "idx (class in sympy.tensor.indexed)": [[233, "sympy.tensor.indexed.Idx"]], "indexed (class in sympy.tensor.indexed)": [[233, "sympy.tensor.indexed.Indexed"]], "indexedbase (class in sympy.tensor.indexed)": [[233, "sympy.tensor.indexed.IndexedBase"]], "base (sympy.tensor.indexed.indexed property)": [[233, "sympy.tensor.indexed.Indexed.base"]], "indices (sympy.tensor.indexed.indexed property)": [[233, "sympy.tensor.indexed.Indexed.indices"]], "label (sympy.tensor.indexed.idx property)": [[233, "sympy.tensor.indexed.Idx.label"]], "label (sympy.tensor.indexed.indexedbase property)": [[233, "sympy.tensor.indexed.IndexedBase.label"]], "lower (sympy.tensor.indexed.idx property)": [[233, "sympy.tensor.indexed.Idx.lower"]], "offset (sympy.tensor.indexed.indexedbase property)": [[233, "sympy.tensor.indexed.IndexedBase.offset"]], "ranges (sympy.tensor.indexed.indexed property)": [[233, "sympy.tensor.indexed.Indexed.ranges"]], "rank (sympy.tensor.indexed.indexed property)": [[233, "sympy.tensor.indexed.Indexed.rank"]], "shape (sympy.tensor.indexed.indexed property)": [[233, "sympy.tensor.indexed.Indexed.shape"]], "shape (sympy.tensor.indexed.indexedbase property)": [[233, "sympy.tensor.indexed.IndexedBase.shape"]], "strides (sympy.tensor.indexed.indexedbase property)": [[233, "sympy.tensor.indexed.IndexedBase.strides"]], "sympy.tensor.indexed": [[233, "module-sympy.tensor.indexed"]], "upper (sympy.tensor.indexed.idx property)": [[233, "sympy.tensor.indexed.Idx.upper"]], "tensadd (class in sympy.tensor.tensor)": [[234, "sympy.tensor.tensor.TensAdd"]], "tensexpr (class in sympy.tensor.tensor)": [[234, "sympy.tensor.tensor.TensExpr"]], "tensmul (class in sympy.tensor.tensor)": [[234, "sympy.tensor.tensor.TensMul"]], "tensorhead (class in sympy.tensor.tensor)": [[234, "sympy.tensor.tensor.TensorHead"]], "tensorindex (class in sympy.tensor.tensor)": [[234, "sympy.tensor.tensor.TensorIndex"]], "tensorindextype (class in sympy.tensor.tensor)": [[234, "sympy.tensor.tensor.TensorIndexType"]], "tensorsymmetry (class in sympy.tensor.tensor)": [[234, "sympy.tensor.tensor.TensorSymmetry"]], "tensortype (class in sympy.tensor.tensor)": [[234, "sympy.tensor.tensor.TensorType"]], "_tensormanager (class in sympy.tensor.tensor)": [[234, "sympy.tensor.tensor._TensorManager"]], "canon_bp() (in module sympy.tensor.tensor)": [[234, "sympy.tensor.tensor.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensadd method)": [[234, "sympy.tensor.tensor.TensAdd.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensmul method)": [[234, "sympy.tensor.tensor.TensMul.canon_bp"]], "clear() (sympy.tensor.tensor._tensormanager method)": [[234, "sympy.tensor.tensor._TensorManager.clear"]], "comm_i2symbol() (sympy.tensor.tensor._tensormanager method)": [[234, "sympy.tensor.tensor._TensorManager.comm_i2symbol"]], "comm_symbols2i() (sympy.tensor.tensor._tensormanager method)": [[234, "sympy.tensor.tensor._TensorManager.comm_symbols2i"]], "commutes_with() (sympy.tensor.tensor.tensorhead method)": [[234, "sympy.tensor.tensor.TensorHead.commutes_with"]], "contract_metric() (sympy.tensor.tensor.tensadd method)": [[234, "sympy.tensor.tensor.TensAdd.contract_metric"]], "contract_metric() (sympy.tensor.tensor.tensmul method)": [[234, "sympy.tensor.tensor.TensMul.contract_metric"]], "direct_product() (sympy.tensor.tensor.tensorsymmetry class method)": [[234, "sympy.tensor.tensor.TensorSymmetry.direct_product"]], "fully_symmetric() (sympy.tensor.tensor.tensorsymmetry class method)": [[234, "sympy.tensor.tensor.TensorSymmetry.fully_symmetric"]], "get_comm() (sympy.tensor.tensor._tensormanager method)": [[234, "sympy.tensor.tensor._TensorManager.get_comm"]], "get_free_indices() (sympy.tensor.tensor.tensmul method)": [[234, "sympy.tensor.tensor.TensMul.get_free_indices"]], "get_indices() (sympy.tensor.tensor.tensmul method)": [[234, "sympy.tensor.tensor.TensMul.get_indices"]], "get_matrix() (sympy.tensor.tensor.tensexpr method)": [[234, "sympy.tensor.tensor.TensExpr.get_matrix"]], "no_symmetry() (sympy.tensor.tensor.tensorsymmetry class method)": [[234, "sympy.tensor.tensor.TensorSymmetry.no_symmetry"]], "perm2tensor() (sympy.tensor.tensor.tensmul method)": [[234, "sympy.tensor.tensor.TensMul.perm2tensor"]], "replace_with_arrays() (sympy.tensor.tensor.tensexpr method)": [[234, "sympy.tensor.tensor.TensExpr.replace_with_arrays"]], "riemann() (sympy.tensor.tensor.tensorsymmetry class method)": [[234, "sympy.tensor.tensor.TensorSymmetry.riemann"]], "riemann_cyclic() (in module sympy.tensor.tensor)": [[234, "sympy.tensor.tensor.riemann_cyclic"]], "riemann_cyclic_replace() (in module sympy.tensor.tensor)": [[234, "sympy.tensor.tensor.riemann_cyclic_replace"]], "set_comm() (sympy.tensor.tensor._tensormanager method)": [[234, "sympy.tensor.tensor._TensorManager.set_comm"]], "set_comms() (sympy.tensor.tensor._tensormanager method)": [[234, "sympy.tensor.tensor._TensorManager.set_comms"]], "sorted_components() (sympy.tensor.tensor.tensmul method)": [[234, "sympy.tensor.tensor.TensMul.sorted_components"]], "split() (sympy.tensor.tensor.tensmul method)": [[234, "sympy.tensor.tensor.TensMul.split"]], "sympy.tensor.tensor": [[234, "module-sympy.tensor.tensor"]], "tensor_heads() (in module sympy.tensor.tensor)": [[234, "sympy.tensor.tensor.tensor_heads"]], "tensorsymmetry() (in module sympy.tensor.tensor)": [[234, "sympy.tensor.tensor.tensorsymmetry"]], "partialderivative (class in sympy.tensor.toperators)": [[235, "sympy.tensor.toperators.PartialDerivative"]], "sympy.tensor.toperators": [[235, "module-sympy.tensor.toperators"]], "sympy.testing": [[236, "module-sympy.testing"]], "skip() (in module sympy.testing.pytest)": [[237, "sympy.testing.pytest.SKIP"]], "nocache_fail() (in module sympy.testing.pytest)": [[237, "sympy.testing.pytest.nocache_fail"]], "raises() (in module sympy.testing.pytest)": [[237, "sympy.testing.pytest.raises"]], "sympy.testing.pytest": [[237, "module-sympy.testing.pytest"]], "warns() (in module sympy.testing.pytest)": [[237, "sympy.testing.pytest.warns"]], "warns_deprecated_sympy() (in module sympy.testing.pytest)": [[237, "sympy.testing.pytest.warns_deprecated_sympy"]], "sympy.testing.randtest": [[238, "module-sympy.testing.randtest"]], "pytestreporter (class in sympy.testing.runtests)": [[239, "sympy.testing.runtests.PyTestReporter"]], "reporter (class in sympy.testing.runtests)": [[239, "sympy.testing.runtests.Reporter"]], "sympydoctestfinder (class in sympy.testing.runtests)": [[239, "sympy.testing.runtests.SymPyDocTestFinder"]], "sympydoctestrunner (class in sympy.testing.runtests)": [[239, "sympy.testing.runtests.SymPyDocTestRunner"]], "sympyoutputchecker (class in sympy.testing.runtests)": [[239, "sympy.testing.runtests.SymPyOutputChecker"]], "sympytestresults (class in sympy.testing.runtests)": [[239, "sympy.testing.runtests.SymPyTestResults"]], "attempted (sympy.testing.runtests.sympytestresults attribute)": [[239, "sympy.testing.runtests.SymPyTestResults.attempted"]], "check_output() (sympy.testing.runtests.sympyoutputchecker method)": [[239, "sympy.testing.runtests.SymPyOutputChecker.check_output"]], "convert_to_native_paths() (in module sympy.testing.runtests)": [[239, "sympy.testing.runtests.convert_to_native_paths"]], "doctest() (in module sympy.testing.runtests)": [[239, "sympy.testing.runtests.doctest"]], "failed (sympy.testing.runtests.sympytestresults attribute)": [[239, "sympy.testing.runtests.SymPyTestResults.failed"]], "get_sympy_dir() (in module sympy.testing.runtests)": [[239, "sympy.testing.runtests.get_sympy_dir"]], "raise_on_deprecated() (in module sympy.testing.runtests)": [[239, "sympy.testing.runtests.raise_on_deprecated"]], "run() (sympy.testing.runtests.sympydoctestrunner method)": [[239, "sympy.testing.runtests.SymPyDocTestRunner.run"]], "run_all_tests() (in module sympy.testing.runtests)": [[239, "sympy.testing.runtests.run_all_tests"]], "run_in_subprocess_with_hash_randomization() (in module sympy.testing.runtests)": [[239, "sympy.testing.runtests.run_in_subprocess_with_hash_randomization"]], "split_list() (in module sympy.testing.runtests)": [[239, "sympy.testing.runtests.split_list"]], "sympy.testing.runtests": [[239, "module-sympy.testing.runtests"]], "sympytestfile() (in module sympy.testing.runtests)": [[239, "sympy.testing.runtests.sympytestfile"]], "test() (in module sympy.testing.runtests)": [[239, "sympy.testing.runtests.test"]], "write() (sympy.testing.runtests.pytestreporter method)": [[239, "sympy.testing.runtests.PyTestReporter.write"]], "codewrapper (class in sympy.utilities.autowrap)": [[240, "sympy.utilities.autowrap.CodeWrapper"]], "cythoncodewrapper (class in sympy.utilities.autowrap)": [[240, "sympy.utilities.autowrap.CythonCodeWrapper"]], "dummywrapper (class in sympy.utilities.autowrap)": [[240, "sympy.utilities.autowrap.DummyWrapper"]], "f2pycodewrapper (class in sympy.utilities.autowrap)": [[240, "sympy.utilities.autowrap.F2PyCodeWrapper"]], "ufuncifycodewrapper (class in sympy.utilities.autowrap)": [[240, "sympy.utilities.autowrap.UfuncifyCodeWrapper"]], "autowrap() (in module sympy.utilities.autowrap)": [[240, "sympy.utilities.autowrap.autowrap"]], "binary_function() (in module sympy.utilities.autowrap)": [[240, "sympy.utilities.autowrap.binary_function"]], "dump_c() (sympy.utilities.autowrap.ufuncifycodewrapper method)": [[240, "sympy.utilities.autowrap.UfuncifyCodeWrapper.dump_c"]], "dump_pyx() (sympy.utilities.autowrap.cythoncodewrapper method)": [[240, "sympy.utilities.autowrap.CythonCodeWrapper.dump_pyx"]], "sympy.utilities.autowrap": [[240, "module-sympy.utilities.autowrap"]], "ufuncify() (in module sympy.utilities.autowrap)": [[240, "sympy.utilities.autowrap.ufuncify"]], "argument (class in sympy.utilities.codegen)": [[241, "sympy.utilities.codegen.Argument"]], "ccodegen (class in sympy.utilities.codegen)": [[241, "sympy.utilities.codegen.CCodeGen"]], "codegen (class in sympy.utilities.codegen)": [[241, "sympy.utilities.codegen.CodeGen"]], "datatype (class in sympy.utilities.codegen)": [[241, "sympy.utilities.codegen.DataType"]], "fcodegen (class in sympy.utilities.codegen)": [[241, "sympy.utilities.codegen.FCodeGen"]], "juliacodegen (class in sympy.utilities.codegen)": [[241, "sympy.utilities.codegen.JuliaCodeGen"]], "octavecodegen (class in sympy.utilities.codegen)": [[241, "sympy.utilities.codegen.OctaveCodeGen"]], "outputargument (class in sympy.utilities.codegen)": [[241, "sympy.utilities.codegen.OutputArgument"]], "result (class in sympy.utilities.codegen)": [[241, "sympy.utilities.codegen.Result"]], "routine (class in sympy.utilities.codegen)": [[241, "sympy.utilities.codegen.Routine"]], "rustcodegen (class in sympy.utilities.codegen)": [[241, "sympy.utilities.codegen.RustCodeGen"]], "codegen() (in module sympy.utilities.codegen)": [[241, "sympy.utilities.codegen.codegen"]], "dump_c() (sympy.utilities.codegen.ccodegen method)": [[241, "sympy.utilities.codegen.CCodeGen.dump_c"]], "dump_code() (sympy.utilities.codegen.codegen method)": [[241, "sympy.utilities.codegen.CodeGen.dump_code"]], "dump_f95() (sympy.utilities.codegen.fcodegen method)": [[241, "sympy.utilities.codegen.FCodeGen.dump_f95"]], "dump_h() (sympy.utilities.codegen.ccodegen method)": [[241, "sympy.utilities.codegen.CCodeGen.dump_h"]], "dump_h() (sympy.utilities.codegen.fcodegen method)": [[241, "sympy.utilities.codegen.FCodeGen.dump_h"]], "dump_jl() (sympy.utilities.codegen.juliacodegen method)": [[241, "sympy.utilities.codegen.JuliaCodeGen.dump_jl"]], "dump_m() (sympy.utilities.codegen.octavecodegen method)": [[241, "sympy.utilities.codegen.OctaveCodeGen.dump_m"]], "dump_rs() (sympy.utilities.codegen.rustcodegen method)": [[241, "sympy.utilities.codegen.RustCodeGen.dump_rs"]], "get_default_datatype() (in module sympy.utilities.codegen)": [[241, "sympy.utilities.codegen.get_default_datatype"]], "get_interface() (sympy.utilities.codegen.fcodegen method)": [[241, "sympy.utilities.codegen.FCodeGen.get_interface"]], "get_prototype() (sympy.utilities.codegen.ccodegen method)": [[241, "sympy.utilities.codegen.CCodeGen.get_prototype"]], "get_prototype() (sympy.utilities.codegen.rustcodegen method)": [[241, "sympy.utilities.codegen.RustCodeGen.get_prototype"]], "make_routine() (in module sympy.utilities.codegen)": [[241, "sympy.utilities.codegen.make_routine"]], "result_variables (sympy.utilities.codegen.routine property)": [[241, "sympy.utilities.codegen.Routine.result_variables"]], "routine() (sympy.utilities.codegen.codegen method)": [[241, "sympy.utilities.codegen.CodeGen.routine"]], "routine() (sympy.utilities.codegen.juliacodegen method)": [[241, "sympy.utilities.codegen.JuliaCodeGen.routine"]], "routine() (sympy.utilities.codegen.octavecodegen method)": [[241, "sympy.utilities.codegen.OctaveCodeGen.routine"]], "routine() (sympy.utilities.codegen.rustcodegen method)": [[241, "sympy.utilities.codegen.RustCodeGen.routine"]], "sympy.utilities.codegen": [[241, "module-sympy.utilities.codegen"]], "variables (sympy.utilities.codegen.routine property)": [[241, "sympy.utilities.codegen.Routine.variables"]], "write() (sympy.utilities.codegen.codegen method)": [[241, "sympy.utilities.codegen.CodeGen.write"]], "conserve_mpmath_dps() (in module sympy.utilities.decorator)": [[242, "sympy.utilities.decorator.conserve_mpmath_dps"]], "deprecated() (in module sympy.utilities.decorator)": [[242, "sympy.utilities.decorator.deprecated"]], "doctest_depends_on() (in module sympy.utilities.decorator)": [[242, "sympy.utilities.decorator.doctest_depends_on"]], "memoize_property() (in module sympy.utilities.decorator)": [[242, "sympy.utilities.decorator.memoize_property"]], "no_attrs_in_subclass (class in sympy.utilities.decorator)": [[242, "sympy.utilities.decorator.no_attrs_in_subclass"]], "public() (in module sympy.utilities.decorator)": [[242, "sympy.utilities.decorator.public"]], "sympy.utilities.decorator": [[242, "module-sympy.utilities.decorator"]], "threaded() (in module sympy.utilities.decorator)": [[242, "sympy.utilities.decorator.threaded"]], "threaded_factory() (in module sympy.utilities.decorator)": [[242, "sympy.utilities.decorator.threaded_factory"]], "xthreaded() (in module sympy.utilities.decorator)": [[242, "sympy.utilities.decorator.xthreaded"]], "multisetpartitiontraverser (class in sympy.utilities.enumerative)": [[243, "sympy.utilities.enumerative.MultisetPartitionTraverser"]], "count_partitions() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[243, "sympy.utilities.enumerative.MultisetPartitionTraverser.count_partitions"]], "enum_all() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[243, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all"]], "enum_large() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[243, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large"]], "enum_range() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[243, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range"]], "enum_small() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[243, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small"]], "factoring_visitor() (in module sympy.utilities.enumerative)": [[243, "sympy.utilities.enumerative.factoring_visitor"]], "list_visitor() (in module sympy.utilities.enumerative)": [[243, "sympy.utilities.enumerative.list_visitor"]], "multiset_partitions_taocp() (in module sympy.utilities.enumerative)": [[243, "sympy.utilities.enumerative.multiset_partitions_taocp"]], "sympy.utilities.enumerative": [[243, "module-sympy.utilities.enumerative"]], "sympydeprecationwarning": [[244, "sympy.utilities.exceptions.SymPyDeprecationWarning"]], "ignore_warnings() (in module sympy.utilities.exceptions)": [[244, "sympy.utilities.exceptions.ignore_warnings"]], "sympy.utilities.exceptions": [[244, "module-sympy.utilities.exceptions"]], "sympy_deprecation_warning() (in module sympy.utilities.exceptions)": [[244, "sympy.utilities.exceptions.sympy_deprecation_warning"]], "sympy.utilities": [[245, "module-sympy.utilities"]], "notiterable (class in sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.NotIterable"]], "binary_partitions() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.binary_partitions"]], "bracelets() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.bracelets"]], "capture() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.capture"]], "common_prefix() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.common_prefix"]], "common_suffix() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.common_suffix"]], "connected_components() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.connected_components"]], "dict_merge() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.dict_merge"]], "filter_symbols() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.filter_symbols"]], "flatten() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.flatten"]], "generate_bell() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.generate_bell"]], "generate_derangements() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.generate_derangements"]], "generate_involutions() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.generate_involutions"]], "generate_oriented_forest() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.generate_oriented_forest"]], "group() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.group"]], "has_dups() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.has_dups"]], "has_variety() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.has_variety"]], "ibin() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.ibin"]], "iproduct() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.iproduct"]], "is_palindromic() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.is_palindromic"]], "is_sequence() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.is_sequence"]], "iterable() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.iterable"]], "kbins() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.kbins"]], "least_rotation() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.least_rotation"]], "minlex() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.minlex"]], "multiset() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.multiset"]], "multiset_combinations() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.multiset_combinations"]], "multiset_derangements() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.multiset_derangements"]], "multiset_partitions() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.multiset_partitions"]], "multiset_permutations() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.multiset_permutations"]], "necklaces() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.necklaces"]], "numbered_symbols() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.numbered_symbols"]], "ordered_partitions() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.ordered_partitions"]], "partitions() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.partitions"]], "permute_signs() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.permute_signs"]], "postfixes() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.postfixes"]], "prefixes() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.prefixes"]], "random_derangement() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.random_derangement"]], "reshape() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.reshape"]], "rotate_left() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.rotate_left"]], "rotate_right() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.rotate_right"]], "rotations() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.rotations"]], "roundrobin() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.roundrobin"]], "runs() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.runs"]], "sift() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.sift"]], "signed_permutations() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.signed_permutations"]], "strongly_connected_components() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.strongly_connected_components"]], "subsets() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.subsets"]], "sympy.utilities.iterables": [[246, "module-sympy.utilities.iterables"]], "take() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.take"]], "topological_sort() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.topological_sort"]], "unflatten() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.unflatten"]], "uniq() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.uniq"]], "variations() (in module sympy.utilities.iterables)": [[246, "sympy.utilities.iterables.variations"]], "implemented_function() (in module sympy.utilities.lambdify)": [[247, "sympy.utilities.lambdify.implemented_function"]], "lambdastr() (in module sympy.utilities.lambdify)": [[247, "sympy.utilities.lambdify.lambdastr"]], "lambdify() (in module sympy.utilities.lambdify)": [[247, "sympy.utilities.lambdify.lambdify"]], "sympy.utilities.lambdify": [[247, "module-sympy.utilities.lambdify"]], "assoc_recurrence_memo() (in module sympy.utilities.memoization)": [[248, "sympy.utilities.memoization.assoc_recurrence_memo"]], "recurrence_memo() (in module sympy.utilities.memoization)": [[248, "sympy.utilities.memoization.recurrence_memo"]], "sympy.utilities.memoization": [[248, "module-sympy.utilities.memoization"]], "as_int() (in module sympy.utilities.misc)": [[249, "sympy.utilities.misc.as_int"]], "debug() (in module sympy.utilities.misc)": [[249, "sympy.utilities.misc.debug"]], "debug_decorator() (in module sympy.utilities.misc)": [[249, "sympy.utilities.misc.debug_decorator"]], "filldedent() (in module sympy.utilities.misc)": [[249, "sympy.utilities.misc.filldedent"]], "find_executable() (in module sympy.utilities.misc)": [[249, "sympy.utilities.misc.find_executable"]], "func_name() (in module sympy.utilities.misc)": [[249, "sympy.utilities.misc.func_name"]], "ordinal() (in module sympy.utilities.misc)": [[249, "sympy.utilities.misc.ordinal"]], "rawlines() (in module sympy.utilities.misc)": [[249, "sympy.utilities.misc.rawlines"]], "replace() (in module sympy.utilities.misc)": [[249, "sympy.utilities.misc.replace"]], "strlines() (in module sympy.utilities.misc)": [[249, "sympy.utilities.misc.strlines"]], "sympy.utilities.misc": [[249, "module-sympy.utilities.misc"]], "translate() (in module sympy.utilities.misc)": [[249, "sympy.utilities.misc.translate"]], "get_resource() (in module sympy.utilities.pkgdata)": [[250, "sympy.utilities.pkgdata.get_resource"]], "sympy.utilities.pkgdata": [[250, "module-sympy.utilities.pkgdata"]], "get_class() (in module sympy.utilities.source)": [[251, "sympy.utilities.source.get_class"]], "get_mod_func() (in module sympy.utilities.source)": [[251, "sympy.utilities.source.get_mod_func"]], "source() (in module sympy.utilities.source)": [[251, "sympy.utilities.source.source"]], "sympy.utilities.source": [[251, "module-sympy.utilities.source"]], "sympy.utilities.timeutils": [[252, "module-sympy.utilities.timeutils"]], "timed() (in module sympy.utilities.timeutils)": [[252, "sympy.utilities.timeutils.timed"]], "coordsys3d (class in sympy.vector.coordsysrect)": [[253, "sympy.vector.coordsysrect.CoordSys3D"]], "del (class in sympy.vector.deloperator)": [[253, "sympy.vector.deloperator.Del"]], "dyadic (class in sympy.vector.dyadic)": [[253, "sympy.vector.dyadic.Dyadic"]], "implicitregion (class in sympy.vector.implicitregion)": [[253, "sympy.vector.implicitregion.ImplicitRegion"]], "parametricintegral (class in sympy.vector.integrals)": [[253, "sympy.vector.integrals.ParametricIntegral"]], "parametricregion (class in sympy.vector.parametricregion)": [[253, "sympy.vector.parametricregion.ParametricRegion"]], "vector (class in sympy.vector.vector)": [[253, "sympy.vector.vector.Vector"]], "__init__() (sympy.vector.coordsysrect.coordsys3d method)": [[253, "sympy.vector.coordsysrect.CoordSys3D.__init__"]], "components (sympy.vector.dyadic.dyadic property)": [[253, "sympy.vector.dyadic.Dyadic.components"]], "components (sympy.vector.vector.vector property)": [[253, "sympy.vector.vector.Vector.components"]], "create_new() (sympy.vector.coordsysrect.coordsys3d method)": [[253, "sympy.vector.coordsysrect.CoordSys3D.create_new"]], "cross() (sympy.vector.deloperator.del method)": [[253, "sympy.vector.deloperator.Del.cross"]], "cross() (sympy.vector.dyadic.dyadic method)": [[253, "sympy.vector.dyadic.Dyadic.cross"]], "cross() (sympy.vector.vector.vector method)": [[253, "sympy.vector.vector.Vector.cross"]], "dot() (sympy.vector.deloperator.del method)": [[253, "sympy.vector.deloperator.Del.dot"]], "dot() (sympy.vector.dyadic.dyadic method)": [[253, "sympy.vector.dyadic.Dyadic.dot"]], "dot() (sympy.vector.vector.vector method)": [[253, "sympy.vector.vector.Vector.dot"]], "gradient() (sympy.vector.deloperator.del method)": [[253, "sympy.vector.deloperator.Del.gradient"]], "locate_new() (sympy.vector.coordsysrect.coordsys3d method)": [[253, "sympy.vector.coordsysrect.CoordSys3D.locate_new"]], "magnitude() (sympy.vector.vector.vector method)": [[253, "sympy.vector.vector.Vector.magnitude"]], "multiplicity() (sympy.vector.implicitregion.implicitregion method)": [[253, "sympy.vector.implicitregion.ImplicitRegion.multiplicity"]], "normalize() (sympy.vector.vector.vector method)": [[253, "sympy.vector.vector.Vector.normalize"]], "orient_new() (sympy.vector.coordsysrect.coordsys3d method)": [[253, "sympy.vector.coordsysrect.CoordSys3D.orient_new"]], "orient_new_axis() (sympy.vector.coordsysrect.coordsys3d method)": [[253, "sympy.vector.coordsysrect.CoordSys3D.orient_new_axis"]], "orient_new_body() (sympy.vector.coordsysrect.coordsys3d method)": [[253, "sympy.vector.coordsysrect.CoordSys3D.orient_new_body"]], "orient_new_quaternion() (sympy.vector.coordsysrect.coordsys3d method)": [[253, "sympy.vector.coordsysrect.CoordSys3D.orient_new_quaternion"]], "orient_new_space() (sympy.vector.coordsysrect.coordsys3d method)": [[253, "sympy.vector.coordsysrect.CoordSys3D.orient_new_space"]], "outer() (sympy.vector.vector.vector method)": [[253, "sympy.vector.vector.Vector.outer"]], "position_wrt() (sympy.vector.coordsysrect.coordsys3d method)": [[253, "sympy.vector.coordsysrect.CoordSys3D.position_wrt"]], "projection() (sympy.vector.vector.vector method)": [[253, "sympy.vector.vector.Vector.projection"]], "rational_parametrization() (sympy.vector.implicitregion.implicitregion method)": [[253, "sympy.vector.implicitregion.ImplicitRegion.rational_parametrization"]], "regular_point() (sympy.vector.implicitregion.implicitregion method)": [[253, "sympy.vector.implicitregion.ImplicitRegion.regular_point"]], "rotation_matrix() (sympy.vector.coordsysrect.coordsys3d method)": [[253, "sympy.vector.coordsysrect.CoordSys3D.rotation_matrix"]], "scalar_map() (sympy.vector.coordsysrect.coordsys3d method)": [[253, "sympy.vector.coordsysrect.CoordSys3D.scalar_map"]], "separate() (sympy.vector.vector.vector method)": [[253, "sympy.vector.vector.Vector.separate"]], "singular_points() (sympy.vector.implicitregion.implicitregion method)": [[253, "sympy.vector.implicitregion.ImplicitRegion.singular_points"]], "to_matrix() (sympy.vector.dyadic.dyadic method)": [[253, "sympy.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.vector.vector.vector method)": [[253, "sympy.vector.vector.Vector.to_matrix"]], "axisorienter (class in sympy.vector.orienters)": [[255, "sympy.vector.orienters.AxisOrienter"]], "bodyorienter (class in sympy.vector.orienters)": [[255, "sympy.vector.orienters.BodyOrienter"]], "orienter (class in sympy.vector.orienters)": [[255, "sympy.vector.orienters.Orienter"]], "quaternionorienter (class in sympy.vector.orienters)": [[255, "sympy.vector.orienters.QuaternionOrienter"]], "spaceorienter (class in sympy.vector.orienters)": [[255, "sympy.vector.orienters.SpaceOrienter"]], "__init__() (sympy.vector.orienters.axisorienter method)": [[255, "sympy.vector.orienters.AxisOrienter.__init__"]], "__init__() (sympy.vector.orienters.bodyorienter method)": [[255, "sympy.vector.orienters.BodyOrienter.__init__"]], "__init__() (sympy.vector.orienters.quaternionorienter method)": [[255, "sympy.vector.orienters.QuaternionOrienter.__init__"]], "__init__() (sympy.vector.orienters.spaceorienter method)": [[255, "sympy.vector.orienters.SpaceOrienter.__init__"]], "rotation_matrix() (sympy.vector.orienters.axisorienter method)": [[255, "sympy.vector.orienters.AxisOrienter.rotation_matrix"]], "rotation_matrix() (sympy.vector.orienters.orienter method)": [[255, "sympy.vector.orienters.Orienter.rotation_matrix"]], "curl() (in module sympy.vector)": [[256, "sympy.vector.curl"]], "divergence() (in module sympy.vector)": [[256, "sympy.vector.divergence"]], "express() (in module sympy.vector)": [[256, "sympy.vector.express"]], "gradient() (in module sympy.vector)": [[256, "sympy.vector.gradient"]], "is_conservative() (in module sympy.vector)": [[256, "sympy.vector.is_conservative"]], "is_solenoidal() (in module sympy.vector)": [[256, "sympy.vector.is_solenoidal"]], "matrix_to_vector() (in module sympy.vector)": [[256, "sympy.vector.matrix_to_vector"]], "scalar_potential() (in module sympy.vector)": [[256, "sympy.vector.scalar_potential"]], "scalar_potential_difference() (in module sympy.vector)": [[256, "sympy.vector.scalar_potential_difference"]], "vector_integrate() (in module sympy.vector.integrals)": [[256, "sympy.vector.integrals.vector_integrate"]], "sympy.vector": [[261, "module-sympy.vector"]], "sympy.physics": [[270, "module-sympy.physics"]]}})
Search.setIndex({"docnames": ["citing", "contributing/build-docs", "contributing/debug", "contributing/dependencies", "contributing/deprecations", "contributing/dev-setup", "contributing/docstring", "contributing/documentation-style-guide", "contributing/index", "contributing/make-a-contribution", "explanation/active-deprecations", "explanation/glossary", "explanation/gotchas", "explanation/index", "explanation/solve_output", "explanation/special_topics/classification", "explanation/special_topics/finite_diff_derivatives", "explanation/special_topics/index", "guides/assumptions", "guides/booleans", "guides/custom-functions", "guides/index", "guides/solving/find-roots-polynomial", "guides/solving/index", "guides/solving/reduce-inequalities-algebraically", "guides/solving/solve-diophantine-equation", "guides/solving/solve-equation-algebraically", "guides/solving/solve-matrix-equation", "guides/solving/solve-numerically", "guides/solving/solve-ode", "guides/solving/solve-system-of-equations-algebraically", "guides/solving/solving-guidance", "index", "install", "modules/abc", "modules/algebras", "modules/assumptions/ask", "modules/assumptions/assume", "modules/assumptions/index", "modules/assumptions/predicates", "modules/assumptions/refine", "modules/calculus/index", "modules/categories", "modules/codegen", "modules/combinatorics/fp_groups", "modules/combinatorics/galois", "modules/combinatorics/graycode", "modules/combinatorics/group_constructs", "modules/combinatorics/group_numbers", "modules/combinatorics/index", "modules/combinatorics/named_groups", "modules/combinatorics/partitions", "modules/combinatorics/pc_groups", "modules/combinatorics/perm_groups", "modules/combinatorics/permutations", "modules/combinatorics/polyhedron", "modules/combinatorics/prufer", "modules/combinatorics/subsets", "modules/combinatorics/tensor_can", "modules/combinatorics/testutil", "modules/combinatorics/util", "modules/concrete", "modules/core", "modules/crypto", "modules/diffgeom", "modules/discrete", "modules/evalf", "modules/functions/combinatorial", "modules/functions/elementary", "modules/functions/index", "modules/functions/special", "modules/geometry/curves", "modules/geometry/ellipses", "modules/geometry/entities", "modules/geometry/index", "modules/geometry/lines", "modules/geometry/plane", "modules/geometry/points", "modules/geometry/polygons", "modules/geometry/utils", "modules/holonomic/about", "modules/holonomic/convert", "modules/holonomic/index", "modules/holonomic/internal", "modules/holonomic/operations", "modules/holonomic/represent", "modules/holonomic/uses", "modules/integrals/g-functions", "modules/integrals/index", "modules/integrals/integrals", "modules/interactive", "modules/liealgebras/index", "modules/logic", "modules/matrices/common", "modules/matrices/dense", "modules/matrices/expressions", "modules/matrices/immutablematrices", "modules/matrices/index", "modules/matrices/matrices", "modules/matrices/normalforms", "modules/matrices/sparse", "modules/matrices/sparsetools", "modules/ntheory", "modules/numeric-computation", "modules/parsing", "modules/physics/continuum_mechanics/beam", "modules/physics/continuum_mechanics/beam_problems", "modules/physics/continuum_mechanics/index", "modules/physics/continuum_mechanics/truss", "modules/physics/control/control", "modules/physics/control/control_plots", "modules/physics/control/index", "modules/physics/control/lti", "modules/physics/hep/index", "modules/physics/hydrogen", "modules/physics/matrices", "modules/physics/mechanics/advanced", "modules/physics/mechanics/api/body", "modules/physics/mechanics/api/expr_manip", "modules/physics/mechanics/api/index", "modules/physics/mechanics/api/joint", "modules/physics/mechanics/api/kane_lagrange", "modules/physics/mechanics/api/linearize", "modules/physics/mechanics/api/part_bod", "modules/physics/mechanics/api/printing", "modules/physics/mechanics/api/system", "modules/physics/mechanics/autolev_parser", "modules/physics/mechanics/examples", "modules/physics/mechanics/examples/bicycle_example", "modules/physics/mechanics/examples/four_bar_linkage_example", "modules/physics/mechanics/examples/lin_pend_nonmin_example", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system", "modules/physics/mechanics/examples/rollingdisc_example", "modules/physics/mechanics/examples/rollingdisc_example_kane", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints", "modules/physics/mechanics/examples/rollingdisc_example_lagrange", "modules/physics/mechanics/index", "modules/physics/mechanics/joints", "modules/physics/mechanics/kane", "modules/physics/mechanics/lagrange", "modules/physics/mechanics/linearize", "modules/physics/mechanics/masses", "modules/physics/mechanics/reference", "modules/physics/mechanics/sympy_mechanics_for_autolev_users", "modules/physics/mechanics/symsystem", "modules/physics/optics/gaussopt", "modules/physics/optics/index", "modules/physics/optics/medium", "modules/physics/optics/polarization", "modules/physics/optics/utils", "modules/physics/optics/waves", "modules/physics/paulialgebra", "modules/physics/qho_1d", "modules/physics/quantum/anticommutator", "modules/physics/quantum/cartesian", "modules/physics/quantum/cg", "modules/physics/quantum/circuitplot", "modules/physics/quantum/commutator", "modules/physics/quantum/constants", "modules/physics/quantum/dagger", "modules/physics/quantum/gate", "modules/physics/quantum/grover", "modules/physics/quantum/hilbert", "modules/physics/quantum/index", "modules/physics/quantum/innerproduct", "modules/physics/quantum/operator", "modules/physics/quantum/operatorset", "modules/physics/quantum/piab", "modules/physics/quantum/qapply", "modules/physics/quantum/qft", "modules/physics/quantum/qubit", "modules/physics/quantum/represent", "modules/physics/quantum/shor", "modules/physics/quantum/spin", "modules/physics/quantum/state", "modules/physics/quantum/tensorproduct", "modules/physics/secondquant", "modules/physics/sho", "modules/physics/units/dimensions", "modules/physics/units/examples", "modules/physics/units/index", "modules/physics/units/philosophy", "modules/physics/units/prefixes", "modules/physics/units/quantities", "modules/physics/units/unitsystem", "modules/physics/vector/advanced", "modules/physics/vector/api/classes", "modules/physics/vector/api/fieldfunctions", "modules/physics/vector/api/functions", "modules/physics/vector/api/index", "modules/physics/vector/api/kinematics", "modules/physics/vector/api/printing", "modules/physics/vector/fields", "modules/physics/vector/index", "modules/physics/vector/kinematics", "modules/physics/vector/vectors", "modules/physics/wigner", "modules/plotting", "modules/polys/agca", "modules/polys/basics", "modules/polys/domainmatrix", "modules/polys/domainsintro", "modules/polys/domainsref", "modules/polys/index", "modules/polys/internals", "modules/polys/literature", "modules/polys/numberfields", "modules/polys/reference", "modules/polys/ringseries", "modules/polys/solvers", "modules/polys/wester", "modules/printing", "modules/rewriting", "modules/series/formal", "modules/series/fourier", "modules/series/index", "modules/series/limitseq", "modules/series/sequences", "modules/series/series", "modules/sets", "modules/simplify/fu", "modules/simplify/hyperexpand", "modules/simplify/index", "modules/simplify/simplify", "modules/solvers/diophantine", "modules/solvers/index", "modules/solvers/inequalities", "modules/solvers/ode", "modules/solvers/pde", "modules/solvers/solvers", "modules/solvers/solveset", "modules/stats", "modules/tensor/array", "modules/tensor/array_expressions", "modules/tensor/index", "modules/tensor/index_methods", "modules/tensor/indexed", "modules/tensor/tensor", "modules/tensor/toperators", "modules/testing/index", "modules/testing/pytest", "modules/testing/randtest", "modules/testing/runtests", "modules/utilities/autowrap", "modules/utilities/codegen", "modules/utilities/decorator", "modules/utilities/enumerative", "modules/utilities/exceptions", "modules/utilities/index", "modules/utilities/iterables", "modules/utilities/lambdify", "modules/utilities/memoization", "modules/utilities/misc", "modules/utilities/pkgdata", "modules/utilities/source", "modules/utilities/timeutils", "modules/vector/api/classes", "modules/vector/api/index", "modules/vector/api/orienterclasses", "modules/vector/api/vectorfunctions", "modules/vector/basics", "modules/vector/coordsys", "modules/vector/examples", "modules/vector/fields", "modules/vector/index", "modules/vector/intro", "modules/vector/vector_integration", "reference/index", "reference/public/basics/index", "reference/public/codegeneration/index", "reference/public/logic/index", "reference/public/matrices/index", "reference/public/numbertheory/index", "reference/public/physics/index", "reference/public/topics/index", "reference/public/utilities/index", "tutorials/index", "tutorials/intro-tutorial/basic_operations", "tutorials/intro-tutorial/calculus", "tutorials/intro-tutorial/features", "tutorials/intro-tutorial/gotchas", "tutorials/intro-tutorial/index", "tutorials/intro-tutorial/intro", "tutorials/intro-tutorial/manipulation", "tutorials/intro-tutorial/matrices", "tutorials/intro-tutorial/next", "tutorials/intro-tutorial/preliminaries", "tutorials/intro-tutorial/printing", "tutorials/intro-tutorial/simplification", "tutorials/intro-tutorial/solvers"], "filenames": ["citing.md", "contributing/build-docs.rst", "contributing/debug.rst", "contributing/dependencies.md", "contributing/deprecations.md", "contributing/dev-setup.rst", "contributing/docstring.rst", "contributing/documentation-style-guide.rst", "contributing/index.rst", "contributing/make-a-contribution.rst", "explanation/active-deprecations.md", "explanation/glossary.md", "explanation/gotchas.rst", "explanation/index.rst", "explanation/solve_output.rst", "explanation/special_topics/classification.rst", "explanation/special_topics/finite_diff_derivatives.rst", "explanation/special_topics/index.rst", "guides/assumptions.rst", "guides/booleans.rst", "guides/custom-functions.md", "guides/index.rst", "guides/solving/find-roots-polynomial.md", "guides/solving/index.md", "guides/solving/reduce-inequalities-algebraically.md", "guides/solving/solve-diophantine-equation.md", "guides/solving/solve-equation-algebraically.md", "guides/solving/solve-matrix-equation.md", "guides/solving/solve-numerically.md", "guides/solving/solve-ode.md", "guides/solving/solve-system-of-equations-algebraically.md", "guides/solving/solving-guidance.md", "index.rst", "install.md", "modules/abc.rst", "modules/algebras.rst", "modules/assumptions/ask.rst", "modules/assumptions/assume.rst", "modules/assumptions/index.rst", "modules/assumptions/predicates.rst", "modules/assumptions/refine.rst", "modules/calculus/index.rst", "modules/categories.rst", "modules/codegen.rst", "modules/combinatorics/fp_groups.rst", "modules/combinatorics/galois.rst", "modules/combinatorics/graycode.rst", "modules/combinatorics/group_constructs.rst", "modules/combinatorics/group_numbers.rst", "modules/combinatorics/index.rst", "modules/combinatorics/named_groups.rst", "modules/combinatorics/partitions.rst", "modules/combinatorics/pc_groups.rst", "modules/combinatorics/perm_groups.rst", "modules/combinatorics/permutations.rst", "modules/combinatorics/polyhedron.rst", "modules/combinatorics/prufer.rst", "modules/combinatorics/subsets.rst", "modules/combinatorics/tensor_can.rst", "modules/combinatorics/testutil.rst", "modules/combinatorics/util.rst", "modules/concrete.rst", "modules/core.rst", "modules/crypto.rst", "modules/diffgeom.rst", "modules/discrete.rst", "modules/evalf.rst", "modules/functions/combinatorial.rst", "modules/functions/elementary.rst", "modules/functions/index.rst", "modules/functions/special.rst", "modules/geometry/curves.rst", "modules/geometry/ellipses.rst", "modules/geometry/entities.rst", "modules/geometry/index.rst", "modules/geometry/lines.rst", "modules/geometry/plane.rst", "modules/geometry/points.rst", "modules/geometry/polygons.rst", "modules/geometry/utils.rst", "modules/holonomic/about.rst", "modules/holonomic/convert.rst", "modules/holonomic/index.rst", "modules/holonomic/internal.rst", "modules/holonomic/operations.rst", "modules/holonomic/represent.rst", "modules/holonomic/uses.rst", "modules/integrals/g-functions.rst", "modules/integrals/index.rst", "modules/integrals/integrals.rst", "modules/interactive.rst", "modules/liealgebras/index.rst", "modules/logic.rst", "modules/matrices/common.rst", "modules/matrices/dense.rst", "modules/matrices/expressions.rst", "modules/matrices/immutablematrices.rst", "modules/matrices/index.rst", "modules/matrices/matrices.rst", "modules/matrices/normalforms.rst", "modules/matrices/sparse.rst", "modules/matrices/sparsetools.rst", "modules/ntheory.rst", "modules/numeric-computation.rst", "modules/parsing.rst", "modules/physics/continuum_mechanics/beam.rst", "modules/physics/continuum_mechanics/beam_problems.rst", "modules/physics/continuum_mechanics/index.rst", "modules/physics/continuum_mechanics/truss.rst", "modules/physics/control/control.rst", "modules/physics/control/control_plots.rst", "modules/physics/control/index.rst", "modules/physics/control/lti.rst", "modules/physics/hep/index.rst", "modules/physics/hydrogen.rst", "modules/physics/matrices.rst", "modules/physics/mechanics/advanced.rst", "modules/physics/mechanics/api/body.rst", "modules/physics/mechanics/api/expr_manip.rst", "modules/physics/mechanics/api/index.rst", "modules/physics/mechanics/api/joint.rst", "modules/physics/mechanics/api/kane_lagrange.rst", "modules/physics/mechanics/api/linearize.rst", "modules/physics/mechanics/api/part_bod.rst", "modules/physics/mechanics/api/printing.rst", "modules/physics/mechanics/api/system.rst", "modules/physics/mechanics/autolev_parser.rst", "modules/physics/mechanics/examples.rst", "modules/physics/mechanics/examples/bicycle_example.rst", "modules/physics/mechanics/examples/four_bar_linkage_example.rst", "modules/physics/mechanics/examples/lin_pend_nonmin_example.rst", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system.rst", "modules/physics/mechanics/examples/rollingdisc_example.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints.rst", "modules/physics/mechanics/examples/rollingdisc_example_lagrange.rst", "modules/physics/mechanics/index.rst", "modules/physics/mechanics/joints.rst", "modules/physics/mechanics/kane.rst", "modules/physics/mechanics/lagrange.rst", "modules/physics/mechanics/linearize.rst", "modules/physics/mechanics/masses.rst", "modules/physics/mechanics/reference.rst", "modules/physics/mechanics/sympy_mechanics_for_autolev_users.rst", "modules/physics/mechanics/symsystem.rst", "modules/physics/optics/gaussopt.rst", "modules/physics/optics/index.rst", "modules/physics/optics/medium.rst", "modules/physics/optics/polarization.rst", "modules/physics/optics/utils.rst", "modules/physics/optics/waves.rst", "modules/physics/paulialgebra.rst", "modules/physics/qho_1d.rst", "modules/physics/quantum/anticommutator.rst", "modules/physics/quantum/cartesian.rst", "modules/physics/quantum/cg.rst", "modules/physics/quantum/circuitplot.rst", "modules/physics/quantum/commutator.rst", "modules/physics/quantum/constants.rst", "modules/physics/quantum/dagger.rst", "modules/physics/quantum/gate.rst", "modules/physics/quantum/grover.rst", "modules/physics/quantum/hilbert.rst", "modules/physics/quantum/index.rst", "modules/physics/quantum/innerproduct.rst", "modules/physics/quantum/operator.rst", "modules/physics/quantum/operatorset.rst", "modules/physics/quantum/piab.rst", "modules/physics/quantum/qapply.rst", "modules/physics/quantum/qft.rst", "modules/physics/quantum/qubit.rst", "modules/physics/quantum/represent.rst", "modules/physics/quantum/shor.rst", "modules/physics/quantum/spin.rst", "modules/physics/quantum/state.rst", "modules/physics/quantum/tensorproduct.rst", "modules/physics/secondquant.rst", "modules/physics/sho.rst", "modules/physics/units/dimensions.rst", "modules/physics/units/examples.rst", "modules/physics/units/index.rst", "modules/physics/units/philosophy.rst", "modules/physics/units/prefixes.rst", "modules/physics/units/quantities.rst", "modules/physics/units/unitsystem.rst", "modules/physics/vector/advanced.rst", "modules/physics/vector/api/classes.rst", "modules/physics/vector/api/fieldfunctions.rst", "modules/physics/vector/api/functions.rst", "modules/physics/vector/api/index.rst", "modules/physics/vector/api/kinematics.rst", "modules/physics/vector/api/printing.rst", "modules/physics/vector/fields.rst", "modules/physics/vector/index.rst", "modules/physics/vector/kinematics.rst", "modules/physics/vector/vectors.rst", "modules/physics/wigner.rst", "modules/plotting.rst", "modules/polys/agca.rst", "modules/polys/basics.rst", "modules/polys/domainmatrix.rst", "modules/polys/domainsintro.rst", "modules/polys/domainsref.rst", "modules/polys/index.rst", "modules/polys/internals.rst", "modules/polys/literature.rst", "modules/polys/numberfields.rst", "modules/polys/reference.rst", "modules/polys/ringseries.rst", "modules/polys/solvers.rst", "modules/polys/wester.rst", "modules/printing.rst", "modules/rewriting.rst", "modules/series/formal.rst", "modules/series/fourier.rst", "modules/series/index.rst", "modules/series/limitseq.rst", "modules/series/sequences.rst", "modules/series/series.rst", "modules/sets.rst", "modules/simplify/fu.rst", "modules/simplify/hyperexpand.rst", "modules/simplify/index.rst", "modules/simplify/simplify.rst", "modules/solvers/diophantine.rst", "modules/solvers/index.rst", "modules/solvers/inequalities.rst", "modules/solvers/ode.rst", "modules/solvers/pde.rst", "modules/solvers/solvers.rst", "modules/solvers/solveset.rst", "modules/stats.rst", "modules/tensor/array.rst", "modules/tensor/array_expressions.rst", "modules/tensor/index.rst", "modules/tensor/index_methods.rst", "modules/tensor/indexed.rst", "modules/tensor/tensor.rst", "modules/tensor/toperators.rst", "modules/testing/index.rst", "modules/testing/pytest.rst", "modules/testing/randtest.rst", "modules/testing/runtests.rst", "modules/utilities/autowrap.rst", "modules/utilities/codegen.rst", "modules/utilities/decorator.rst", "modules/utilities/enumerative.rst", "modules/utilities/exceptions.rst", "modules/utilities/index.rst", "modules/utilities/iterables.rst", "modules/utilities/lambdify.rst", "modules/utilities/memoization.rst", "modules/utilities/misc.rst", "modules/utilities/pkgdata.rst", "modules/utilities/source.rst", "modules/utilities/timeutils.rst", "modules/vector/api/classes.rst", "modules/vector/api/index.rst", "modules/vector/api/orienterclasses.rst", "modules/vector/api/vectorfunctions.rst", "modules/vector/basics.rst", "modules/vector/coordsys.rst", "modules/vector/examples.rst", "modules/vector/fields.rst", "modules/vector/index.rst", "modules/vector/intro.rst", "modules/vector/vector_integration.rst", "reference/index.rst", "reference/public/basics/index.rst", "reference/public/codegeneration/index.rst", "reference/public/logic/index.rst", "reference/public/matrices/index.rst", "reference/public/numbertheory/index.rst", "reference/public/physics/index.rst", "reference/public/topics/index.rst", "reference/public/utilities/index.rst", "tutorials/index.rst", "tutorials/intro-tutorial/basic_operations.rst", "tutorials/intro-tutorial/calculus.rst", "tutorials/intro-tutorial/features.rst", "tutorials/intro-tutorial/gotchas.rst", "tutorials/intro-tutorial/index.rst", "tutorials/intro-tutorial/intro.rst", "tutorials/intro-tutorial/manipulation.rst", "tutorials/intro-tutorial/matrices.rst", "tutorials/intro-tutorial/next.rst", "tutorials/intro-tutorial/preliminaries.rst", "tutorials/intro-tutorial/printing.rst", "tutorials/intro-tutorial/simplification.rst", "tutorials/intro-tutorial/solvers.rst"], "titles": ["Citing SymPy", "Build the Documentation", "Debugging", "Dependencies", "Deprecation Policy", "Development Environment Setup", "SymPy Docstrings Style Guide", "Docstring Style Guide", "Contributing", "Making a Contribution", "List of active deprecations", "Glossary", "Gotchas and Pitfalls", "Explanations", "Solve Output by Type", "Classification of SymPy objects", "Finite Difference Approximations to Derivatives", "SymPy Special Topics", "Assumptions", "Symbolic and fuzzy booleans", "Writing Custom Functions", "How-to Guides", "Find the Roots of a Polynomial Algebraically or Numerically", "Solve Equations", "Reduce One or a System of Inequalities for a Single Variable Algebraically", "Solve a Diophantine Equation Algebraically", "Solve an Equation Algebraically", "Solve a Matrix Equation Algebraically", "Solve One or a System of Equations Numerically", "Solve an Ordinary Differential Equation (ODE) Algebraically", "Solve a System of Equations Algebraically", "Solving Guidance", "Welcome to SymPy\u2019s documentation!", "Installation", "abc", "Algebras", "Ask", "Assume", "Assumptions", "Predicates", "Refine", "Calculus", "Category Theory", "Code Generation", "Finitely Presented Groups", "Galois Groups", "Gray Code", "Group constructors", "Nilpotent, Abelian and Cyclic Numbers", "Combinatorics", "Named Groups", "Partitions", "Polycyclic Groups", "Permutation Groups", "Permutations", "Polyhedron", "Prufer Sequences", "Subsets", "Tensor Canonicalization", "Test Utilities", "Utilities", "Concrete", "Core", "Cryptography", "Differential Geometry", "Discrete", "Numerical Evaluation", "Combinatorial", "Elementary", "Functions", "Special", "Curves", "Ellipses", "Entities", "Geometry", "Lines", "Plane", "Points", "Polygons", "Utils", "About Holonomic Functions", "Converting other representations to holonomic", "Holonomic", "Internal API", "Operations on holonomic functions", "Representation of holonomic functions in SymPy", "Uses and Current limitations", "Computing Integrals using Meijer G-Functions", "Integrals", "Integrals", "Interactive", "Lie Algebra", "Logic", "Common Matrices", "Dense Matrices", "Matrix Expressions", "Immutable Matrices", "Matrices", "Matrices (linear algebra)", "Matrix Normal Forms", "Sparse Matrices", "Sparse Tools", "Number Theory", "Numeric Computation", "Parsing", "Beam (Docstrings)", "Solving Beam Bending Problems using Singularity Functions", "Continuum Mechanics", "Truss (Docstrings)", "Control", "Control System Plots", "Control Module", "Control API", "High energy physics", "Hydrogen Wavefunctions", "Matrices", "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics", "Body (Docstrings)", "Expression Manipulation (Docstrings)", "Mechanics API Reference", "Joints Framework (Docstrings)", "Kane\u2019s Method &amp; Lagrange\u2019s Method (Docstrings)", "Linearization (Docstrings)", "Masses, Inertias &amp; Particles, RigidBodys (Docstrings)", "Printing (Docstrings)", "SymbolicSystem (Docstrings)", "Autolev Parser", "Examples for Physics/Mechanics", "A bicycle", "A four bar linkage", "Nonminimal Coordinates Pendulum", "Multi Degree of Freedom Holonomic System", "A rolling disc", "A rolling disc, with Kane\u2019s method", "A rolling disc, with Kane\u2019s method and constraint forces", "A rolling disc using Lagrange\u2019s Method", "Classical Mechanics", "Joints Framework in Physics/Mechanics", "Kane\u2019s Method in Physics/Mechanics", "Lagrange\u2019s Method in Physics/Mechanics", "Linearization in Physics/Mechanics", "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics", "References for Physics/Mechanics", "SymPy Mechanics for Autolev Users", "Symbolic Systems in Physics/Mechanics", "Gaussian Optics", "Optics Module", "Medium", "Polarization", "Utilities", "Waves", "Pauli Algebra", "Quantum Harmonic Oscillator in 1-D", "Anticommutator", "Cartesian Operators and States", "Clebsch-Gordan Coefficients", "Circuit Plot", "Commutator", "Constants", "Dagger", "Gates", "Grover\u2019s Algorithm", "Hilbert Space", "Quantum Mechanics", "Inner Product", "Operator", "Operator/State Helper Functions", "Particle in a Box", "Qapply", "QFT", "Qubit", "Represent", "Shor\u2019s Algorithm", "Spin", "State", "Tensor Product", "Second Quantization", "Quantum Harmonic Oscillator in 3-D", "Dimensions and dimension systems", "More examples", "Unit systems", "Philosophy behind unit systems", "Unit prefixes", "Physical quantities", "Units and unit systems", "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module", "Essential Classes", "Docstrings for basic field functions", "Essential Functions (Docstrings)", "Physics Vector API", "Kinematics (Docstrings)", "Printing (Docstrings)", "Scalar and Vector Field Functionality", "The Physics Vector Module", "Vector: Kinematics", "Vector &amp; ReferenceFrame", "Wigner Symbols", "Plotting", "AGCA - Algebraic Geometry and Commutative Algebra Module", "Basic functionality of the module", "Introducing the domainmatrix of the poly module", "Introducing the Domains of the poly module", "Reference docs for the Poly Domains", "Polynomial Manipulation", "Internals of the Polynomial Manipulation Module", "Literature", "Number Fields", "Polynomials Manipulation Module Reference", "Series Manipulation using Polynomials", "Poly solvers", "Examples from Wester\u2019s Article", "Printing", "Term Rewriting", "Formal Power Series", "Fourier Series", "Series", "Limits of Sequences", "Sequences", "Series Expansions", "Sets", "Hongguang Fu\u2019s Trigonometric Simplification", "Hypergeometric Expansion", "Simplify", "Simplify", "Diophantine", "Solvers", "Inequality Solvers", "ODE", "PDE", "Solvers", "Solveset", "Stats", "N-dim array", "N-dim array expressions", "Tensor", "Methods", "Indexed Objects", "Tensor", "Tensor Operators", "Testing", "pytest", "Randomised Testing", "Run Tests", "Autowrap Module", "Codegen", "Decorator", "Enumerative", "Exceptions and Warnings", "Utilities", "Iterables", "Lambdify", "Memoization", "Miscellaneous", "PKGDATA", "Source Code Inspection", "Timing Utilities", "Essential Classes in sympy.vector (docstrings)", "Vector API", "Orienter classes (docstrings)", "Essential Functions in sympy.vector (docstrings)", "Basic Implementation details", "More about Coordinate Systems", "General examples of usage", "Scalar and Vector Field Functionality", "Vector", "Introduction", "Applications of Vector Integrals", "API Reference", "Basics", "Code Generation", "Logic", "Matrices", "Number Theory", "Physics", "Topics", "Utilities", "Tutorials", "Basic Operations", "Calculus", "SymPy Features", "Gotchas", "Introductory Tutorial", "Introduction", "Advanced Expression Manipulation", "Matrices", "What\u2019s Next", "Preliminaries", "Printing", "Simplification", "Solvers"], "terms": {"To": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 16, 19, 20, 24, 25, 26, 28, 29, 30, 31, 33, 34, 37, 38, 41, 42, 43, 44, 52, 53, 54, 58, 61, 62, 63, 64, 66, 67, 68, 69, 70, 75, 85, 87, 89, 91, 92, 93, 95, 98, 102, 104, 105, 106, 110, 112, 113, 115, 117, 120, 121, 139, 140, 143, 153, 157, 170, 179, 181, 185, 192, 195, 197, 199, 201, 202, 204, 206, 207, 208, 210, 211, 218, 219, 221, 224, 227, 228, 229, 230, 231, 232, 235, 236, 240, 242, 243, 246, 247, 249, 250, 256, 258, 260, 261, 263, 265, 266, 277, 278, 280, 281, 283, 284, 287, 288, 289], "public": [0, 6, 43, 62, 63, 84, 201, 202, 204, 205, 209, 224, 227, 231, 245, 256], "us": [0, 1, 2, 4, 5, 6, 8, 11, 12, 14, 15, 17, 18, 19, 20, 23, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 143, 144, 145, 148, 149, 151, 153, 155, 156, 157, 160, 162, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 188, 190, 191, 192, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 231, 232, 233, 235, 236, 237, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 256, 259, 260, 262, 263, 265, 266, 268, 273, 274, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "meurer": 0, "A": [0, 3, 4, 6, 7, 10, 11, 12, 14, 15, 17, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 32, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 104, 105, 106, 108, 110, 112, 116, 117, 118, 120, 121, 122, 123, 126, 127, 130, 131, 136, 137, 138, 141, 142, 143, 144, 145, 148, 150, 153, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 168, 170, 171, 172, 173, 174, 175, 176, 178, 180, 181, 182, 184, 185, 186, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 242, 243, 244, 245, 246, 247, 249, 250, 256, 258, 260, 261, 262, 263, 265, 266, 273, 279, 281, 283, 284, 288], "smith": [0, 10, 99, 200], "cp": [0, 54, 103, 199], "paprocki": 0, "m": [0, 1, 10, 12, 16, 18, 20, 35, 39, 43, 44, 50, 51, 53, 54, 58, 61, 62, 63, 64, 65, 67, 70, 72, 74, 78, 79, 87, 89, 91, 93, 94, 95, 96, 98, 99, 101, 102, 104, 105, 106, 108, 112, 114, 115, 117, 120, 121, 122, 123, 125, 126, 130, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 147, 152, 159, 173, 174, 177, 179, 181, 192, 196, 198, 199, 200, 202, 204, 205, 206, 207, 208, 211, 212, 213, 214, 216, 217, 218, 219, 221, 223, 224, 227, 229, 230, 231, 232, 233, 236, 237, 243, 244, 246, 249, 251, 256, 259, 261, 265, 266, 278, 284, 287, 288, 289], "\u010dert\u00edk": 0, "o": [0, 1, 6, 11, 12, 16, 18, 34, 42, 43, 53, 54, 60, 62, 63, 68, 70, 72, 73, 75, 76, 78, 84, 87, 102, 106, 117, 121, 123, 125, 126, 138, 139, 140, 141, 143, 144, 166, 176, 187, 190, 192, 194, 196, 204, 205, 207, 208, 211, 213, 218, 221, 227, 231, 236, 242, 249, 252, 253, 259, 262, 278], "kirpichev": 0, "sb": 0, "rocklin": 0, "kumar": [0, 230], "ivanov": 0, "": [0, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 84, 85, 87, 89, 90, 91, 92, 93, 95, 96, 98, 101, 102, 103, 104, 105, 106, 110, 112, 114, 116, 117, 119, 120, 123, 126, 128, 132, 136, 137, 141, 143, 147, 148, 149, 155, 156, 158, 160, 162, 163, 166, 170, 171, 173, 174, 176, 179, 180, 181, 185, 186, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 217, 218, 219, 221, 222, 223, 224, 226, 227, 228, 231, 237, 242, 243, 244, 245, 246, 247, 249, 250, 252, 256, 258, 262, 263, 265, 268, 273, 274, 276, 277, 278, 280, 281, 282, 283, 284, 288, 289], "moor": [0, 27, 95, 98], "jk": 0, "singh": 0, "rathnayak": 0, "t": [0, 1, 4, 6, 7, 10, 11, 12, 19, 20, 22, 29, 35, 38, 39, 41, 43, 44, 46, 53, 54, 55, 56, 58, 62, 63, 64, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 86, 87, 89, 91, 92, 93, 94, 95, 98, 102, 103, 104, 108, 112, 113, 116, 117, 118, 120, 121, 122, 123, 125, 126, 129, 130, 131, 138, 139, 140, 141, 143, 144, 148, 150, 156, 160, 172, 174, 176, 178, 179, 181, 185, 186, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 214, 218, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 233, 237, 240, 242, 245, 249, 250, 256, 259, 261, 265, 277, 278, 282, 283, 284, 287, 288, 289], "vig": 0, "granger": [0, 162], "BE": 0, "muller": 0, "rp": [0, 78, 148], "bonazzi": 0, "f": [0, 1, 6, 10, 11, 12, 16, 20, 22, 25, 26, 28, 29, 41, 42, 43, 44, 45, 52, 53, 54, 58, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 80, 85, 86, 87, 89, 91, 93, 95, 98, 102, 103, 104, 106, 110, 120, 121, 125, 131, 136, 138, 139, 143, 145, 149, 150, 161, 162, 165, 174, 176, 179, 186, 191, 192, 195, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 210, 211, 213, 214, 217, 218, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 236, 237, 242, 243, 244, 245, 246, 249, 250, 252, 262, 263, 266, 277, 278, 283, 287, 288, 289], "gupta": [0, 230], "h": [0, 12, 16, 41, 42, 43, 44, 45, 46, 53, 58, 61, 62, 63, 67, 70, 84, 87, 89, 93, 94, 98, 99, 104, 112, 120, 123, 141, 145, 148, 160, 162, 165, 170, 174, 181, 196, 197, 198, 199, 200, 204, 205, 206, 207, 210, 211, 219, 223, 227, 229, 230, 231, 232, 237, 244, 266, 278, 287], "vat": 0, "johansson": 0, "pedregosa": 0, "curri": [0, 162], "mj": 0, "terrel": 0, "ar": [0, 1, 3, 4, 5, 7, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 98, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 148, 149, 150, 151, 153, 155, 157, 160, 162, 164, 165, 166, 168, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 194, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 231, 232, 233, 235, 236, 237, 238, 240, 242, 243, 244, 246, 247, 248, 249, 250, 252, 256, 258, 259, 260, 261, 262, 263, 265, 267, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "rou\u010dka": 0, "\u0161": 0, "saboo": 0, "fernando": 0, "i": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 156, 157, 159, 160, 162, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 231, 232, 233, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 280, 281, 283, 284, 286, 287, 288, 289], "kulal": 0, "cimrman": 0, "r": [0, 1, 6, 7, 10, 12, 16, 18, 20, 22, 35, 42, 43, 44, 46, 53, 54, 62, 63, 64, 66, 67, 68, 75, 76, 78, 80, 84, 85, 87, 89, 98, 102, 104, 106, 108, 112, 114, 117, 120, 121, 122, 123, 125, 126, 128, 130, 133, 134, 135, 140, 141, 142, 143, 144, 145, 148, 172, 173, 176, 177, 179, 186, 187, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 218, 219, 221, 223, 224, 227, 229, 230, 231, 237, 242, 244, 246, 256, 259, 261, 262, 263, 266, 288], "scopatz": 0, "2017": [0, 196], "symbol": [0, 3, 6, 7, 10, 11, 14, 16, 21, 22, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 52, 54, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 84, 85, 86, 87, 89, 90, 92, 93, 95, 98, 102, 103, 104, 105, 106, 108, 109, 110, 112, 114, 116, 117, 118, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 141, 143, 145, 148, 149, 150, 151, 153, 155, 156, 158, 160, 162, 164, 165, 168, 171, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 221, 223, 224, 226, 227, 228, 229, 231, 232, 234, 235, 236, 237, 238, 243, 249, 250, 256, 258, 259, 261, 262, 263, 266, 273, 277, 278, 281, 283, 284, 287, 288, 289], "comput": [0, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 23, 26, 27, 28, 33, 35, 41, 43, 44, 45, 46, 51, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 77, 81, 84, 85, 86, 88, 89, 91, 93, 95, 98, 99, 101, 102, 104, 105, 106, 110, 112, 116, 120, 121, 122, 125, 126, 128, 129, 133, 136, 143, 160, 161, 162, 170, 175, 176, 178, 180, 181, 185, 186, 187, 192, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 213, 214, 216, 218, 219, 220, 221, 223, 224, 227, 229, 230, 231, 233, 243, 246, 249, 250, 256, 258, 259, 260, 261, 262, 263, 265, 268, 277, 278, 280, 281, 284, 288], "python": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 15, 18, 19, 20, 22, 23, 26, 27, 29, 31, 32, 33, 36, 37, 38, 41, 54, 62, 63, 66, 68, 74, 90, 92, 93, 95, 98, 102, 103, 104, 105, 116, 126, 143, 186, 197, 198, 199, 201, 202, 208, 210, 211, 219, 223, 227, 230, 232, 242, 243, 244, 245, 246, 249, 250, 256, 280, 281, 282, 283, 284, 286, 287, 288], "peerj": 0, "scienc": [0, 54, 87, 98, 142, 143, 198, 205, 220, 221, 278], "3": [0, 4, 5, 7, 10, 12, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 31, 33, 35, 36, 38, 39, 40, 41, 43, 44, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 108, 110, 112, 113, 114, 115, 117, 118, 120, 123, 125, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 143, 144, 145, 147, 149, 153, 155, 156, 157, 161, 165, 170, 171, 173, 175, 176, 179, 180, 182, 183, 185, 186, 187, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 242, 243, 245, 246, 247, 249, 250, 252, 256, 258, 259, 260, 261, 263, 265, 266, 273, 277, 278, 280, 282, 283, 284, 287, 288, 289], "e103": 0, "http": [0, 1, 3, 4, 5, 6, 7, 10, 18, 20, 33, 35, 37, 38, 39, 41, 42, 43, 45, 46, 50, 51, 53, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 74, 78, 79, 80, 84, 87, 89, 90, 91, 92, 93, 95, 98, 102, 105, 110, 112, 114, 115, 145, 147, 148, 149, 151, 152, 153, 157, 158, 159, 162, 164, 165, 174, 176, 186, 188, 191, 193, 196, 200, 202, 205, 207, 210, 211, 214, 216, 218, 219, 220, 223, 224, 227, 230, 231, 243, 244, 245, 247, 249, 250, 252, 256, 258, 262, 264, 266, 284, 287], "doi": [0, 6, 35, 41, 54, 61, 98, 202, 205, 220, 223, 231, 249], "org": [0, 3, 6, 7, 12, 18, 20, 35, 37, 38, 39, 41, 42, 43, 45, 46, 50, 51, 53, 54, 61, 62, 63, 64, 65, 67, 68, 70, 72, 74, 78, 79, 80, 89, 90, 91, 92, 93, 95, 98, 102, 110, 112, 114, 115, 145, 147, 148, 149, 151, 152, 153, 157, 158, 159, 162, 164, 165, 174, 176, 186, 188, 191, 193, 200, 202, 205, 207, 211, 214, 218, 219, 220, 223, 224, 227, 230, 231, 243, 244, 245, 247, 249, 256, 258, 262, 264, 266, 284, 287], "10": [0, 3, 6, 12, 20, 22, 28, 29, 31, 33, 35, 41, 43, 51, 53, 54, 58, 60, 61, 62, 63, 65, 66, 67, 68, 70, 75, 76, 78, 79, 87, 89, 90, 92, 93, 95, 98, 99, 102, 103, 104, 105, 108, 110, 112, 113, 118, 123, 126, 128, 143, 145, 149, 160, 170, 171, 182, 186, 187, 188, 190, 196, 197, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 214, 217, 218, 219, 220, 223, 224, 227, 230, 231, 232, 241, 242, 247, 249, 250, 252, 256, 259, 277, 284, 288], "7717": 0, "c": [0, 1, 3, 11, 12, 16, 18, 20, 22, 23, 25, 27, 34, 35, 41, 42, 46, 47, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 65, 67, 68, 70, 71, 72, 74, 75, 76, 78, 79, 85, 87, 89, 91, 92, 93, 95, 98, 102, 103, 104, 105, 106, 108, 112, 114, 116, 118, 120, 121, 126, 131, 133, 134, 135, 137, 139, 140, 141, 143, 145, 149, 155, 156, 157, 160, 162, 165, 170, 173, 175, 176, 181, 186, 190, 194, 195, 196, 197, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 218, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 236, 237, 243, 244, 246, 249, 252, 253, 256, 258, 259, 260, 261, 262, 263, 266, 278, 280, 287, 288, 289], "103": [0, 53], "bibtex": 0, "entri": [0, 27, 39, 44, 52, 54, 60, 63, 74, 87, 91, 93, 94, 95, 101, 121, 126, 128, 141, 148, 200, 204, 206, 207, 221, 231, 250], "latex": [0, 1, 3, 6, 11, 20, 31, 33, 70, 90, 185, 186, 191, 195, 197, 202, 211, 282, 283], "user": [0, 1, 3, 4, 5, 6, 7, 10, 11, 15, 17, 18, 20, 42, 43, 44, 53, 54, 61, 62, 63, 64, 70, 74, 87, 91, 95, 98, 104, 105, 106, 110, 112, 116, 126, 136, 139, 141, 144, 164, 165, 174, 180, 181, 185, 186, 190, 194, 198, 201, 204, 206, 208, 209, 210, 211, 212, 220, 223, 229, 230, 231, 240, 243, 244, 246, 247, 250, 256, 260, 261, 266, 273, 277, 280, 281, 283, 284, 285], "articl": [0, 62, 63, 95, 98, 203, 205, 206, 211, 220, 256, 274, 282], "titl": [0, 6, 7, 29, 197], "author": [0, 6, 102, 162, 206], "aaron": 0, "christoph": [0, 256], "p": [0, 1, 10, 11, 12, 16, 18, 19, 20, 22, 23, 25, 35, 37, 38, 39, 43, 44, 45, 50, 51, 52, 53, 54, 55, 56, 58, 60, 61, 62, 63, 64, 65, 67, 68, 70, 72, 75, 76, 77, 78, 79, 84, 85, 87, 89, 93, 95, 98, 102, 104, 105, 106, 108, 112, 113, 117, 120, 121, 122, 123, 125, 126, 130, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 155, 174, 176, 181, 187, 190, 192, 194, 196, 197, 199, 200, 201, 204, 205, 207, 208, 211, 213, 214, 218, 219, 221, 223, 224, 227, 229, 230, 231, 232, 236, 237, 249, 256, 259, 260, 261, 262, 263, 265, 284, 288], "mateusz": 0, "v": [0, 1, 5, 14, 22, 26, 31, 35, 43, 52, 58, 61, 62, 63, 64, 65, 66, 70, 76, 87, 91, 93, 98, 102, 106, 117, 118, 120, 123, 128, 140, 141, 143, 144, 148, 149, 161, 176, 181, 186, 188, 190, 192, 194, 195, 197, 204, 205, 206, 207, 211, 221, 223, 224, 227, 229, 231, 242, 249, 256, 259, 260, 261, 262, 263, 265], "ert": 0, "k": [0, 7, 12, 14, 18, 20, 25, 35, 41, 42, 43, 44, 46, 48, 52, 53, 56, 57, 60, 61, 62, 63, 65, 66, 67, 68, 70, 80, 87, 89, 92, 93, 95, 98, 102, 120, 121, 131, 138, 140, 141, 143, 150, 164, 165, 168, 172, 174, 176, 185, 192, 196, 198, 200, 201, 204, 205, 206, 207, 208, 211, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 227, 229, 231, 232, 233, 235, 236, 237, 238, 242, 246, 249, 256, 258, 259, 260, 261, 262, 263, 265, 266, 287, 288], "ond": 0, "ej": 0, "sergei": 0, "b": [0, 5, 11, 12, 14, 18, 19, 20, 22, 23, 25, 27, 35, 42, 43, 44, 46, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 85, 87, 89, 91, 92, 93, 94, 95, 98, 102, 104, 105, 106, 108, 110, 112, 117, 118, 120, 121, 122, 123, 126, 130, 131, 140, 141, 143, 145, 148, 153, 155, 157, 159, 164, 165, 168, 173, 174, 175, 176, 186, 188, 190, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 211, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 242, 245, 246, 249, 252, 256, 258, 259, 260, 261, 262, 278, 280, 284, 288, 289], "matthew": 0, "amit": [0, 230], "sergiu": 0, "jason": [0, 211], "sartaj": 0, "thilina": 0, "sean": 0, "brian": [0, 162], "e": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 18, 19, 20, 23, 27, 28, 31, 34, 35, 39, 41, 42, 43, 44, 51, 52, 53, 54, 55, 58, 60, 61, 62, 63, 64, 66, 67, 68, 70, 72, 74, 75, 76, 77, 78, 79, 84, 85, 87, 89, 91, 92, 93, 98, 102, 104, 105, 106, 108, 112, 113, 117, 120, 121, 123, 125, 126, 139, 140, 143, 144, 145, 148, 155, 156, 160, 165, 166, 168, 171, 173, 175, 176, 181, 182, 186, 191, 192, 195, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 217, 218, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 256, 260, 263, 265, 266, 277, 278, 282, 283, 288], "richard": [0, 102], "francesco": 0, "harsh": [0, 230], "shivam": 0, "fredrik": 0, "fabian": 0, "j": [0, 7, 12, 35, 39, 41, 43, 44, 48, 52, 53, 54, 58, 60, 61, 63, 64, 66, 67, 70, 84, 87, 89, 91, 93, 95, 98, 102, 110, 113, 120, 141, 142, 143, 148, 155, 156, 173, 176, 181, 185, 192, 196, 198, 200, 202, 204, 205, 206, 207, 208, 210, 211, 213, 219, 221, 223, 224, 227, 229, 230, 231, 232, 233, 235, 236, 237, 238, 243, 249, 256, 258, 259, 260, 261, 262, 263, 265, 266], "andi": [0, 142], "rou": 0, "ka": 0, "n": [0, 5, 6, 7, 11, 12, 16, 18, 20, 22, 25, 26, 34, 39, 41, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 56, 58, 60, 61, 62, 63, 64, 66, 67, 68, 70, 72, 75, 76, 77, 78, 79, 84, 85, 87, 89, 91, 92, 93, 95, 98, 99, 102, 104, 105, 106, 108, 112, 114, 115, 117, 120, 121, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 138, 139, 140, 141, 143, 144, 145, 147, 149, 150, 152, 156, 161, 162, 165, 170, 172, 173, 174, 176, 177, 179, 181, 183, 185, 186, 188, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 227, 229, 230, 231, 234, 236, 237, 240, 243, 249, 251, 252, 256, 258, 259, 260, 261, 265, 271, 278, 284, 287, 288, 289], "ashutosh": 0, "isuru": 0, "sumith": 0, "robert": [0, 231], "anthoni": 0, "year": [0, 4, 6, 10, 180], "month": 0, "jan": [0, 63], "keyword": [0, 4, 6, 10, 11, 14, 20, 42, 43, 44, 53, 54, 62, 63, 66, 67, 75, 77, 78, 79, 93, 98, 102, 105, 110, 112, 121, 138, 139, 170, 176, 191, 197, 199, 201, 202, 204, 206, 207, 210, 211, 212, 218, 223, 224, 229, 236, 242, 243, 245, 247, 249, 250, 252, 261, 284], "algebra": [0, 7, 11, 12, 14, 18, 23, 28, 31, 39, 44, 45, 53, 62, 63, 66, 68, 80, 83, 84, 85, 87, 89, 92, 93, 97, 99, 102, 103, 104, 125, 136, 143, 144, 196, 199, 200, 202, 203, 204, 205, 207, 208, 211, 213, 221, 224, 226, 227, 230, 267, 268, 271, 273, 274, 279, 280, 282, 284], "system": [0, 1, 2, 3, 5, 7, 10, 11, 12, 14, 15, 16, 19, 20, 22, 23, 27, 29, 36, 38, 53, 62, 63, 64, 68, 87, 90, 91, 92, 93, 98, 103, 104, 105, 108, 109, 111, 112, 116, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140, 141, 143, 154, 155, 170, 173, 174, 176, 179, 183, 186, 190, 191, 192, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 209, 210, 211, 219, 220, 226, 230, 231, 242, 243, 256, 258, 259, 262, 264, 266, 271, 273, 280, 282, 284, 288, 289], "abstract": [0, 10, 41, 42, 51, 62, 64, 68, 70, 75, 80, 95, 120, 126, 160, 162, 171, 174, 175, 176, 198, 206, 230, 231, 233, 237, 244, 265], "an": [0, 1, 3, 4, 6, 7, 9, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 116, 117, 120, 121, 123, 125, 128, 130, 136, 138, 140, 141, 143, 144, 147, 148, 149, 153, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 169, 170, 171, 173, 174, 176, 177, 178, 180, 185, 186, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 223, 224, 226, 227, 228, 229, 231, 232, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 256, 258, 260, 261, 263, 264, 265, 266, 277, 278, 279, 280, 281, 282, 284, 287, 288, 289], "open": [0, 1, 3, 4, 6, 7, 9, 10, 26, 27, 28, 30, 33, 41, 62, 64, 68, 89, 92, 112, 126, 129, 143, 211, 219, 226, 230, 231, 253, 282, 284], "sourc": [0, 1, 5, 6, 7, 11, 12, 20, 27, 28, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 104, 105, 108, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 125, 126, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 183, 184, 186, 187, 188, 190, 191, 192, 196, 197, 198, 200, 201, 202, 204, 206, 207, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 263, 275, 282], "written": [0, 3, 6, 7, 11, 18, 20, 39, 43, 50, 53, 54, 58, 62, 67, 70, 74, 80, 85, 87, 91, 92, 101, 102, 130, 136, 143, 176, 192, 193, 194, 195, 198, 199, 207, 211, 214, 218, 221, 224, 227, 244, 263, 265, 281, 282, 283, 288], "pure": [0, 3, 11, 26, 28, 35, 63, 68, 89, 92, 95, 112, 140, 181, 201, 202, 204, 207, 211, 231, 249], "It": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 25, 26, 28, 29, 30, 33, 35, 36, 37, 38, 41, 42, 43, 50, 53, 54, 56, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 74, 78, 79, 85, 87, 89, 91, 92, 98, 102, 103, 104, 105, 106, 108, 110, 112, 114, 116, 117, 118, 120, 121, 126, 128, 134, 136, 137, 138, 139, 141, 143, 145, 149, 150, 160, 165, 166, 171, 172, 173, 174, 175, 176, 178, 181, 184, 186, 190, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 211, 214, 218, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 242, 243, 244, 245, 246, 247, 250, 256, 259, 260, 261, 263, 265, 266, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288], "built": [0, 1, 3, 6, 7, 11, 12, 15, 36, 38, 44, 62, 68, 89, 98, 126, 143, 199, 202, 211, 212, 216, 227, 230, 231, 237, 246, 249, 250, 282, 283, 287], "focu": [0, 10, 18, 72, 229, 282], "extens": [0, 3, 6, 7, 18, 20, 53, 62, 67, 68, 74, 78, 89, 98, 123, 143, 199, 201, 202, 204, 205, 206, 207, 211, 221, 223, 227, 229, 230, 243, 244, 253, 281, 288], "eas": [0, 126, 195, 197, 211, 214], "through": [0, 1, 4, 6, 11, 12, 18, 20, 22, 26, 27, 29, 31, 33, 41, 43, 53, 54, 56, 61, 62, 63, 66, 67, 70, 72, 73, 74, 75, 76, 78, 87, 91, 92, 98, 102, 105, 106, 110, 117, 121, 126, 128, 136, 141, 147, 148, 186, 197, 198, 204, 206, 211, 217, 221, 223, 227, 229, 230, 231, 232, 243, 249, 256, 258, 263, 266, 279, 280, 281, 286], "both": [0, 3, 4, 6, 7, 10, 11, 12, 15, 18, 19, 20, 22, 24, 25, 26, 29, 34, 35, 41, 42, 43, 54, 57, 58, 60, 61, 62, 63, 67, 68, 70, 77, 86, 87, 89, 92, 93, 98, 102, 104, 105, 106, 112, 117, 120, 121, 128, 130, 131, 137, 140, 148, 149, 160, 166, 173, 176, 180, 181, 186, 190, 194, 195, 197, 198, 199, 201, 202, 204, 206, 207, 209, 210, 211, 213, 218, 219, 220, 221, 223, 224, 227, 229, 230, 232, 236, 242, 244, 249, 250, 256, 258, 278, 281, 282, 283, 288, 289], "interact": [0, 11, 14, 26, 34, 62, 76, 89, 96, 98, 143, 173, 191, 195, 201, 202, 223, 231, 247, 254, 267, 275, 280, 282, 283, 287, 288], "programmat": [0, 11, 14, 15, 30, 31, 230, 261], "applic": [0, 7, 10, 23, 26, 44, 45, 46, 52, 53, 54, 55, 62, 63, 68, 89, 93, 98, 102, 105, 108, 120, 121, 125, 126, 136, 140, 142, 143, 160, 161, 186, 190, 194, 199, 200, 204, 205, 206, 207, 211, 213, 218, 224, 227, 230, 244, 249, 256, 263, 264, 271, 282], "These": [0, 3, 6, 7, 10, 11, 12, 13, 14, 16, 18, 19, 20, 31, 32, 34, 42, 43, 53, 61, 62, 63, 64, 70, 87, 89, 92, 98, 104, 106, 112, 120, 121, 122, 128, 130, 134, 140, 143, 166, 171, 172, 180, 186, 187, 192, 194, 195, 198, 199, 200, 201, 202, 204, 207, 211, 221, 224, 227, 228, 230, 231, 233, 238, 242, 243, 244, 249, 263, 278, 281, 284, 287, 288], "characterist": [0, 64, 80, 98, 194, 200, 202, 204, 205, 227, 229, 284], "have": [0, 1, 4, 5, 6, 7, 11, 12, 15, 16, 18, 19, 20, 22, 24, 25, 27, 28, 29, 31, 33, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 52, 53, 54, 55, 58, 60, 61, 62, 63, 64, 66, 67, 68, 70, 72, 73, 77, 78, 80, 85, 86, 87, 89, 91, 92, 93, 94, 95, 98, 101, 102, 103, 104, 105, 106, 110, 112, 113, 115, 116, 120, 121, 123, 126, 127, 128, 134, 136, 140, 143, 160, 162, 165, 169, 171, 173, 174, 175, 176, 178, 179, 181, 184, 185, 186, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 213, 214, 216, 218, 219, 220, 221, 223, 224, 227, 229, 230, 231, 232, 233, 235, 237, 238, 240, 241, 242, 244, 245, 246, 249, 250, 252, 256, 258, 260, 261, 262, 263, 266, 277, 278, 280, 281, 282, 283, 284, 287, 288, 289], "led": 0, "becom": [0, 4, 6, 7, 10, 11, 12, 16, 18, 53, 58, 61, 62, 63, 66, 85, 90, 98, 104, 191, 194, 198, 199, 201, 208, 211, 214, 220, 227, 230, 231, 237, 250, 252, 259, 261, 288], "popular": [0, 3, 63, 103, 143, 282], "librari": [0, 3, 4, 6, 10, 11, 18, 20, 28, 32, 33, 43, 62, 63, 67, 87, 89, 90, 98, 103, 116, 126, 143, 180, 197, 201, 202, 231, 242, 243, 244, 249, 250, 277, 280, 281, 282], "scientif": [0, 11, 33, 62, 143], "ecosystem": 0, "thi": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 147, 148, 149, 150, 151, 153, 155, 156, 157, 159, 160, 162, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 235, 236, 237, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 254, 256, 258, 259, 260, 261, 262, 263, 264, 265, 267, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289], "paper": [0, 6, 102, 128, 195, 206, 207, 220, 221, 224, 227], "present": [0, 3, 7, 10, 11, 12, 16, 41, 42, 46, 49, 53, 54, 56, 60, 62, 65, 89, 98, 102, 105, 108, 110, 112, 121, 128, 176, 178, 186, 188, 191, 192, 197, 198, 204, 205, 206, 210, 211, 224, 230, 244, 250, 253, 259, 260, 261, 265, 268, 289], "architectur": [0, 143, 201, 242], "descript": [0, 4, 6, 7, 10, 23, 32, 42, 44, 52, 70, 89, 102, 148, 166, 173, 184, 194, 195, 196, 211, 235, 242, 244, 246, 247, 267, 285], "its": [0, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 31, 35, 37, 38, 39, 42, 43, 44, 46, 50, 52, 53, 54, 61, 62, 63, 64, 67, 68, 70, 72, 74, 78, 80, 87, 89, 90, 92, 93, 95, 98, 102, 104, 105, 106, 108, 112, 116, 117, 120, 121, 123, 126, 128, 129, 130, 136, 137, 140, 141, 143, 144, 149, 155, 161, 162, 164, 165, 170, 171, 174, 176, 180, 181, 183, 186, 187, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 217, 218, 219, 223, 226, 227, 229, 230, 231, 233, 235, 236, 237, 242, 245, 246, 249, 250, 253, 256, 259, 260, 261, 263, 266, 282, 283, 284, 287, 288], "featur": [0, 3, 4, 7, 10, 12, 13, 20, 32, 33, 62, 64, 66, 104, 126, 136, 143, 193, 211, 227, 231, 240, 244, 247, 264, 273, 276, 281, 282, 286, 288], "discuss": [0, 4, 6, 7, 10, 12, 13, 14, 16, 18, 19, 20, 32, 44, 53, 63, 70, 102, 116, 121, 126, 136, 140, 141, 185, 193, 194, 195, 201, 237, 246, 267, 277, 279, 280, 282, 283, 285, 287, 288], "select": [0, 1, 13, 14, 27, 32, 43, 46, 53, 54, 61, 62, 63, 71, 76, 90, 92, 93, 102, 104, 118, 141, 181, 191, 201, 202, 204, 205, 207, 211, 220, 223, 229], "submodul": [0, 3, 4, 6, 11, 43, 116, 198, 202, 204, 206], "The": [0, 1, 3, 5, 6, 7, 8, 11, 12, 14, 16, 17, 19, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 45, 46, 48, 50, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 147, 148, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 256, 258, 259, 260, 261, 264, 265, 266, 273, 277, 278, 280, 281, 283, 284, 285, 286, 287, 288, 289], "supplementari": 0, "materi": [0, 105, 147, 286], "provid": [0, 1, 3, 4, 6, 7, 10, 13, 14, 16, 17, 18, 19, 20, 23, 24, 28, 32, 35, 41, 42, 43, 44, 45, 51, 52, 53, 54, 60, 61, 62, 64, 66, 70, 71, 73, 78, 81, 84, 85, 89, 90, 92, 93, 95, 98, 99, 101, 102, 103, 104, 106, 108, 110, 116, 117, 120, 121, 123, 125, 128, 129, 130, 131, 136, 137, 138, 139, 140, 141, 143, 144, 149, 150, 170, 178, 179, 180, 184, 185, 186, 187, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 214, 216, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 236, 237, 242, 243, 244, 246, 247, 249, 250, 252, 256, 259, 260, 261, 263, 264, 266, 278, 282, 283, 284, 288], "addit": [0, 3, 4, 7, 10, 11, 12, 14, 16, 33, 35, 43, 52, 53, 54, 61, 62, 68, 70, 74, 80, 82, 86, 87, 89, 90, 92, 95, 98, 104, 109, 110, 112, 116, 117, 121, 140, 141, 144, 162, 174, 175, 178, 191, 194, 195, 196, 197, 198, 199, 200, 201, 204, 206, 207, 211, 217, 220, 221, 223, 224, 227, 228, 229, 230, 231, 242, 243, 244, 246, 247, 249, 250, 252, 260, 280, 282, 283, 284, 287, 288], "exampl": [0, 2, 3, 4, 5, 7, 10, 11, 12, 14, 15, 16, 18, 19, 23, 26, 27, 29, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 108, 110, 112, 114, 115, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 145, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 170, 171, 173, 174, 175, 176, 177, 178, 182, 183, 186, 187, 188, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 212, 213, 214, 216, 217, 219, 220, 223, 224, 226, 227, 228, 229, 230, 235, 237, 238, 240, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 263, 264, 265, 266, 271, 273, 274, 277, 278, 279, 280, 281, 283, 284, 286, 287, 289], "further": [0, 3, 5, 18, 20, 22, 38, 42, 63, 68, 70, 74, 87, 89, 94, 95, 98, 104, 105, 109, 110, 117, 120, 121, 141, 148, 194, 196, 197, 198, 204, 206, 207, 220, 221, 223, 227, 231, 237, 281, 282], "outlin": [0, 3, 4, 18, 20, 60, 89, 198, 227], "detail": [0, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 18, 20, 32, 42, 53, 62, 64, 67, 69, 70, 87, 88, 89, 90, 98, 102, 110, 120, 121, 126, 141, 143, 148, 166, 170, 186, 188, 196, 197, 198, 204, 206, 213, 218, 223, 224, 225, 227, 228, 231, 236, 237, 242, 245, 247, 250, 261, 262, 263, 264, 267, 271, 278, 280, 284, 285, 287], "volum": [0, 6, 43, 61, 70, 87, 89, 196, 205, 221, 224, 227, 246, 256], "page": [0, 1, 3, 4, 6, 7, 10, 11, 12, 18, 19, 22, 23, 25, 26, 30, 32, 43, 44, 45, 61, 67, 87, 102, 103, 120, 121, 143, 181, 197, 200, 201, 202, 205, 211, 221, 224, 247, 265, 288], "journal": [0, 6, 35, 61, 67, 102, 113, 205, 223, 246, 249], "issn": 0, "2376": 0, "5992": 0, "url": [0, 63, 247], "bsd": [0, 1, 3, 282], "licens": [0, 1, 3, 282], "so": [0, 3, 4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 50, 51, 53, 54, 56, 58, 60, 62, 63, 66, 68, 70, 72, 74, 75, 76, 78, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 98, 99, 102, 104, 105, 106, 112, 116, 120, 121, 126, 128, 130, 136, 137, 138, 140, 143, 144, 149, 160, 162, 170, 172, 173, 174, 176, 178, 180, 181, 185, 186, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 235, 236, 240, 242, 243, 246, 247, 249, 250, 252, 262, 266, 277, 278, 280, 282, 283, 284, 287, 288, 289], "you": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 15, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 41, 43, 44, 45, 53, 54, 61, 62, 63, 64, 66, 68, 69, 70, 74, 76, 78, 80, 81, 86, 87, 89, 90, 92, 93, 95, 96, 98, 99, 102, 103, 104, 112, 114, 115, 116, 120, 121, 122, 123, 126, 127, 137, 138, 140, 141, 143, 165, 170, 171, 174, 176, 180, 185, 186, 188, 192, 194, 195, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 211, 212, 214, 218, 219, 223, 224, 227, 228, 229, 230, 231, 232, 235, 236, 237, 240, 242, 243, 244, 245, 247, 249, 250, 253, 260, 261, 262, 263, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289], "free": [0, 10, 11, 22, 27, 28, 33, 41, 42, 43, 52, 53, 58, 62, 74, 89, 93, 95, 98, 102, 105, 106, 110, 113, 120, 136, 145, 165, 183, 186, 193, 197, 198, 202, 204, 206, 207, 211, 213, 219, 221, 223, 224, 227, 229, 230, 237, 249, 282], "howev": [0, 1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 25, 26, 29, 36, 38, 43, 45, 53, 54, 58, 61, 62, 63, 64, 67, 68, 70, 72, 87, 89, 92, 93, 98, 102, 103, 104, 105, 108, 120, 126, 140, 144, 176, 195, 196, 197, 198, 199, 201, 202, 204, 206, 207, 208, 210, 211, 212, 218, 219, 220, 221, 223, 227, 228, 229, 230, 242, 243, 250, 260, 261, 265, 277, 280, 282, 284, 288, 289], "like": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 15, 18, 19, 20, 27, 29, 30, 31, 32, 33, 43, 44, 45, 47, 53, 54, 61, 62, 63, 66, 67, 68, 70, 72, 82, 85, 89, 90, 92, 93, 95, 96, 97, 98, 102, 103, 104, 108, 112, 116, 120, 123, 126, 128, 137, 140, 141, 143, 144, 158, 160, 170, 171, 174, 175, 176, 180, 181, 185, 186, 190, 192, 194, 197, 198, 199, 201, 202, 203, 204, 206, 207, 209, 210, 211, 214, 218, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 233, 235, 237, 238, 240, 242, 243, 244, 245, 249, 250, 252, 253, 260, 261, 263, 265, 277, 278, 280, 281, 282, 283, 284, 288], "academ": [0, 42, 46, 205], "commerci": [0, 282], "creat": [0, 1, 3, 4, 5, 6, 7, 9, 11, 18, 19, 24, 25, 26, 27, 29, 30, 31, 35, 37, 42, 43, 44, 51, 53, 54, 62, 63, 64, 66, 68, 69, 70, 72, 74, 75, 77, 78, 83, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 102, 103, 104, 105, 108, 112, 117, 120, 121, 123, 126, 129, 130, 131, 133, 135, 137, 139, 140, 141, 143, 144, 153, 155, 157, 161, 164, 165, 166, 170, 171, 173, 174, 176, 179, 182, 185, 186, 188, 190, 194, 195, 197, 198, 200, 201, 202, 204, 206, 207, 208, 211, 218, 223, 227, 230, 231, 232, 236, 237, 242, 243, 244, 246, 247, 249, 250, 256, 261, 263, 278, 280, 283, 284, 287, 288, 289], "fork": [0, 5, 7, 10, 128], "deriv": [0, 6, 10, 11, 17, 20, 26, 41, 42, 43, 46, 52, 53, 62, 64, 68, 69, 70, 72, 79, 84, 85, 87, 89, 90, 92, 95, 98, 108, 112, 116, 118, 120, 121, 125, 128, 130, 131, 133, 136, 138, 139, 140, 141, 165, 174, 178, 181, 182, 185, 186, 188, 190, 191, 192, 194, 197, 198, 199, 200, 202, 204, 206, 207, 208, 211, 213, 221, 223, 227, 228, 229, 233, 238, 244, 256, 259, 260, 279, 282, 289], "long": [0, 6, 7, 8, 22, 31, 43, 54, 61, 62, 63, 65, 75, 87, 89, 90, 92, 98, 102, 105, 106, 128, 191, 207, 208, 211, 220, 221, 229, 231, 243, 250, 252, 259, 280, 283], "copi": [0, 1, 5, 10, 12, 18, 44, 54, 55, 62, 78, 98, 102, 103, 200, 202, 204, 206, 210, 211, 218, 229, 242, 249, 252, 287], "statement": [0, 6, 18, 19, 20, 33, 42, 43, 62, 70, 87, 92, 95, 126, 155, 211, 231, 240, 244, 249], "redistribut": [0, 207], "see": [0, 1, 3, 4, 7, 8, 10, 11, 12, 15, 16, 18, 19, 20, 21, 32, 36, 37, 38, 39, 41, 42, 43, 45, 48, 50, 53, 54, 55, 58, 61, 63, 64, 67, 68, 69, 70, 74, 78, 79, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 98, 99, 102, 103, 104, 110, 116, 120, 121, 132, 134, 138, 140, 141, 145, 148, 151, 152, 161, 165, 166, 170, 171, 172, 173, 175, 176, 179, 181, 186, 191, 194, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 213, 214, 217, 218, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 236, 237, 240, 242, 243, 244, 245, 246, 247, 250, 251, 256, 258, 266, 277, 278, 280, 282, 283, 284, 286, 287, 288, 289], "file": [0, 1, 3, 4, 5, 6, 7, 11, 12, 43, 98, 126, 143, 165, 211, 218, 221, 223, 231, 240, 242, 243, 244, 250, 253], "That": [0, 4, 7, 11, 12, 18, 19, 20, 62, 63, 68, 92, 98, 136, 173, 178, 184, 194, 195, 198, 199, 201, 202, 204, 206, 217, 218, 227, 231, 243, 244, 250, 277, 280, 283, 288], "said": [0, 4, 11, 35, 39, 43, 48, 102, 181, 192, 194, 195, 199, 227, 230, 231, 256, 263], "although": [0, 3, 4, 6, 7, 11, 12, 15, 16, 18, 20, 25, 54, 62, 63, 68, 74, 86, 87, 90, 92, 93, 95, 98, 102, 105, 116, 128, 143, 198, 201, 202, 204, 206, 207, 219, 220, 223, 224, 229, 243, 249, 250, 280, 283, 288], "requir": [0, 3, 6, 7, 8, 10, 11, 12, 20, 27, 31, 33, 43, 53, 62, 63, 65, 66, 70, 72, 73, 75, 76, 79, 81, 92, 98, 101, 102, 103, 104, 105, 110, 116, 117, 120, 121, 123, 125, 126, 128, 130, 137, 141, 150, 173, 185, 186, 188, 196, 197, 198, 200, 201, 202, 204, 206, 208, 211, 214, 220, 221, 224, 227, 229, 230, 231, 235, 242, 243, 244, 245, 247, 249, 250, 259, 260, 261, 284, 286], "conveni": [0, 1, 10, 11, 12, 24, 26, 31, 34, 41, 43, 54, 62, 63, 67, 70, 89, 92, 104, 126, 143, 185, 188, 194, 195, 197, 198, 199, 200, 201, 202, 206, 209, 218, 219, 223, 229, 235, 236, 243, 245, 246, 250, 263, 278, 280], "pleas": [0, 4, 6, 7, 9, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 39, 41, 62, 70, 74, 87, 102, 116, 121, 126, 136, 140, 141, 148, 149, 170, 185, 195, 196, 197, 198, 204, 205, 219, 223, 224, 229, 230, 250, 256, 261, 285, 289], "when": [0, 1, 3, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 26, 28, 29, 30, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 53, 54, 55, 60, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 86, 89, 90, 92, 93, 94, 98, 102, 103, 104, 108, 110, 112, 113, 116, 120, 126, 128, 134, 136, 137, 138, 139, 140, 141, 144, 149, 150, 155, 160, 161, 165, 168, 170, 178, 179, 180, 185, 191, 194, 195, 197, 198, 199, 201, 202, 204, 206, 207, 208, 210, 211, 212, 213, 217, 218, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 233, 235, 236, 240, 242, 243, 244, 245, 247, 249, 250, 252, 253, 255, 260, 278, 280, 282, 283, 288, 289], "your": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 20, 22, 23, 24, 25, 27, 29, 30, 31, 33, 37, 62, 63, 89, 90, 98, 103, 104, 112, 116, 120, 138, 140, 195, 197, 211, 218, 223, 227, 230, 231, 249, 250, 278, 282, 284, 285, 287, 288], "work": [0, 1, 3, 4, 6, 10, 11, 12, 15, 16, 18, 19, 20, 22, 28, 33, 36, 38, 41, 42, 43, 45, 53, 54, 55, 62, 63, 66, 70, 87, 89, 91, 92, 93, 95, 98, 99, 102, 104, 116, 120, 126, 128, 137, 141, 143, 156, 160, 165, 169, 170, 171, 172, 175, 178, 188, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 211, 218, 219, 220, 221, 223, 224, 227, 229, 230, 231, 237, 242, 243, 244, 246, 249, 250, 251, 252, 260, 261, 280, 281, 282, 283, 284, 287, 288], "also": [0, 1, 3, 4, 7, 8, 10, 11, 12, 14, 16, 18, 19, 20, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 45, 51, 53, 54, 61, 63, 64, 66, 67, 68, 69, 70, 74, 78, 80, 82, 84, 85, 87, 89, 91, 92, 93, 96, 98, 99, 102, 103, 104, 105, 106, 108, 109, 110, 112, 116, 117, 118, 120, 121, 125, 126, 128, 129, 130, 131, 134, 137, 138, 139, 140, 141, 143, 144, 145, 149, 159, 160, 162, 166, 170, 175, 176, 179, 180, 181, 185, 186, 188, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 240, 242, 243, 244, 245, 246, 247, 250, 252, 256, 259, 260, 261, 262, 263, 265, 266, 277, 278, 280, 282, 283, 284, 287, 288, 289], "consid": [0, 4, 7, 10, 11, 12, 15, 18, 19, 20, 31, 35, 39, 42, 43, 51, 54, 57, 61, 62, 63, 65, 66, 67, 68, 70, 72, 74, 78, 86, 87, 89, 90, 91, 92, 93, 95, 98, 102, 112, 116, 117, 123, 127, 138, 144, 166, 173, 176, 180, 181, 187, 191, 192, 194, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 214, 218, 223, 224, 227, 228, 229, 230, 231, 242, 244, 249, 259, 261, 263, 265, 266, 280, 284, 288], "contribut": [0, 3, 4, 5, 6, 7, 33, 78, 102, 121, 131, 134, 201, 204, 206, 227, 266, 285], "all": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 27, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 78, 79, 87, 89, 91, 92, 93, 94, 95, 98, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 117, 118, 120, 121, 123, 125, 126, 128, 129, 131, 136, 138, 140, 143, 144, 150, 155, 156, 160, 170, 172, 173, 174, 176, 178, 179, 180, 181, 183, 184, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 235, 237, 238, 240, 242, 243, 244, 245, 247, 249, 250, 252, 256, 258, 260, 262, 263, 264, 265, 267, 277, 278, 280, 282, 283, 284, 287, 288, 289], "chang": [0, 1, 6, 7, 8, 11, 12, 18, 33, 42, 43, 44, 53, 54, 58, 61, 62, 63, 66, 67, 68, 70, 76, 77, 87, 89, 92, 98, 102, 104, 105, 108, 112, 120, 123, 126, 128, 133, 150, 161, 171, 181, 182, 185, 192, 194, 195, 196, 197, 198, 199, 200, 204, 207, 208, 211, 218, 219, 220, 221, 223, 226, 227, 229, 230, 231, 232, 242, 249, 250, 261, 263, 277, 280, 283, 287], "back": [0, 20, 25, 26, 28, 42, 43, 58, 61, 62, 63, 68, 70, 77, 78, 84, 86, 87, 89, 90, 93, 102, 103, 112, 170, 191, 194, 201, 206, 207, 209, 211, 221, 227, 229, 232, 233], "we": [0, 3, 4, 5, 6, 7, 10, 12, 16, 18, 19, 20, 22, 23, 24, 25, 27, 29, 30, 31, 36, 37, 38, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 70, 75, 80, 85, 86, 87, 89, 90, 91, 92, 93, 98, 99, 101, 102, 112, 115, 116, 117, 118, 120, 121, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 148, 151, 159, 162, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 181, 185, 186, 188, 190, 192, 194, 195, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 218, 219, 221, 223, 224, 226, 227, 228, 229, 231, 233, 235, 237, 242, 243, 244, 246, 247, 249, 250, 256, 260, 261, 262, 263, 265, 266, 277, 278, 280, 282, 283, 284, 287, 288, 289], "can": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 23, 27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 114, 116, 117, 118, 120, 121, 122, 123, 125, 126, 129, 130, 131, 134, 136, 137, 138, 139, 140, 141, 143, 144, 148, 149, 150, 155, 157, 160, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 240, 242, 243, 244, 246, 247, 249, 250, 252, 259, 260, 261, 262, 263, 265, 266, 277, 278, 280, 282, 283, 284, 286, 287, 288, 289], "incorpor": [0, 3, 16, 199, 223], "u": [0, 1, 12, 16, 18, 19, 20, 26, 35, 41, 42, 43, 53, 58, 61, 62, 63, 65, 76, 79, 84, 87, 89, 95, 98, 102, 117, 120, 121, 122, 125, 126, 128, 130, 133, 136, 137, 138, 140, 141, 143, 144, 148, 149, 160, 165, 171, 181, 190, 192, 194, 196, 197, 198, 199, 200, 204, 206, 207, 210, 211, 218, 221, 223, 224, 227, 228, 229, 230, 231, 236, 250, 263, 280, 282, 283, 284], "benefit": [0, 3, 20, 24, 43, 116, 140, 191], "end": [0, 3, 6, 10, 12, 16, 18, 19, 20, 23, 27, 29, 35, 41, 42, 43, 52, 53, 58, 60, 61, 62, 63, 67, 68, 70, 72, 74, 78, 87, 90, 92, 93, 95, 98, 102, 104, 105, 106, 108, 125, 128, 130, 133, 138, 139, 140, 141, 181, 186, 191, 192, 195, 196, 200, 204, 211, 214, 217, 219, 220, 224, 227, 228, 229, 230, 231, 232, 233, 242, 244, 245, 247, 249, 252, 263, 278, 282, 284, 288], "develop": [0, 4, 6, 7, 8, 9, 11, 16, 18, 20, 32, 33, 41, 44, 60, 104, 143, 180, 197, 198, 201, 204, 229, 230, 282, 285], "team": [0, 4], "member": [0, 6, 10, 18, 22, 42, 51, 53, 63, 85, 108, 198, 219, 236], "list": [0, 3, 4, 6, 7, 13, 18, 25, 26, 27, 28, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 84, 85, 87, 89, 90, 91, 92, 93, 95, 98, 101, 102, 103, 104, 105, 112, 117, 120, 121, 125, 128, 130, 133, 137, 138, 139, 143, 144, 149, 160, 162, 165, 166, 170, 171, 173, 174, 176, 178, 186, 190, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 217, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 235, 236, 237, 240, 242, 243, 244, 245, 246, 247, 249, 250, 252, 277, 281, 282, 284, 287, 288, 289], "github": [0, 1, 3, 4, 5, 7, 10, 26, 30, 33, 41, 62, 66, 78, 89, 98, 180, 219, 230, 284], "found": [0, 1, 3, 4, 6, 7, 18, 19, 22, 26, 41, 44, 45, 53, 54, 56, 58, 60, 62, 63, 64, 72, 73, 78, 87, 89, 98, 102, 112, 118, 120, 121, 122, 140, 143, 180, 194, 198, 199, 201, 206, 207, 208, 211, 213, 214, 217, 218, 221, 224, 227, 228, 229, 230, 231, 235, 249, 250, 252, 253, 287], "zotero": 0, "start": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 20, 28, 32, 33, 42, 43, 45, 46, 51, 52, 53, 54, 58, 61, 62, 63, 64, 70, 92, 93, 95, 98, 101, 102, 103, 105, 106, 108, 126, 128, 138, 139, 171, 172, 175, 179, 194, 195, 197, 201, 204, 206, 207, 211, 214, 217, 219, 220, 221, 224, 227, 229, 230, 231, 232, 235, 242, 243, 249, 251, 252, 262, 276, 277, 280, 282], "either": [1, 3, 6, 7, 10, 11, 12, 18, 19, 20, 22, 25, 26, 27, 28, 30, 35, 39, 41, 42, 46, 54, 61, 62, 63, 66, 67, 68, 70, 77, 79, 85, 87, 89, 90, 92, 93, 98, 102, 112, 117, 120, 121, 122, 125, 126, 139, 141, 143, 160, 166, 173, 176, 178, 180, 191, 195, 197, 199, 200, 201, 202, 204, 206, 207, 211, 213, 218, 219, 220, 221, 224, 227, 228, 229, 230, 231, 232, 235, 236, 243, 249, 250, 256, 265, 280, 283, 284], "machin": [1, 3, 5, 6, 212, 223, 227, 277], "imag": [1, 3, 53, 120, 132, 137, 143, 145, 149, 198, 202, 204, 211, 219, 230], "contain": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 24, 25, 26, 27, 29, 30, 31, 34, 36, 37, 41, 42, 43, 44, 45, 53, 54, 58, 60, 61, 64, 65, 66, 68, 70, 71, 73, 75, 76, 77, 78, 79, 88, 89, 91, 92, 93, 95, 98, 101, 102, 103, 104, 105, 107, 110, 111, 113, 117, 121, 122, 123, 125, 128, 130, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 163, 166, 168, 171, 173, 176, 185, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 211, 212, 213, 218, 219, 221, 223, 224, 225, 227, 228, 229, 230, 231, 235, 236, 237, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 256, 259, 267, 278, 280, 284, 288], "them": [1, 3, 4, 5, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 22, 25, 26, 27, 29, 31, 34, 37, 39, 42, 43, 51, 53, 54, 61, 62, 63, 64, 66, 67, 70, 73, 78, 80, 82, 84, 85, 87, 91, 92, 95, 98, 101, 102, 103, 116, 121, 123, 126, 128, 130, 131, 136, 138, 140, 141, 143, 149, 153, 169, 170, 176, 178, 181, 184, 186, 192, 194, 195, 198, 199, 201, 202, 204, 206, 207, 208, 210, 211, 212, 218, 219, 220, 221, 223, 224, 227, 229, 230, 232, 233, 242, 244, 246, 249, 259, 277, 278, 280, 282, 283, 288], "If": [1, 3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 51, 53, 54, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 84, 85, 87, 89, 90, 91, 92, 93, 95, 98, 99, 101, 102, 103, 104, 105, 110, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 138, 139, 140, 141, 143, 144, 149, 153, 157, 160, 166, 170, 171, 172, 173, 174, 176, 180, 184, 185, 186, 187, 188, 190, 191, 192, 195, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 249, 250, 252, 256, 259, 261, 263, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "instead": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 24, 26, 27, 29, 30, 31, 34, 35, 36, 38, 42, 43, 53, 55, 58, 62, 64, 65, 66, 67, 70, 89, 90, 92, 93, 95, 96, 98, 102, 110, 113, 115, 125, 126, 128, 130, 140, 143, 174, 178, 186, 191, 192, 194, 195, 198, 201, 202, 204, 206, 207, 209, 211, 213, 221, 223, 227, 229, 230, 231, 235, 236, 237, 240, 245, 246, 247, 249, 250, 263, 266, 277, 278, 280, 282, 283, 284, 288, 289], "follow": [1, 3, 4, 6, 7, 10, 12, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 36, 38, 41, 42, 43, 44, 45, 51, 52, 53, 54, 55, 58, 61, 62, 63, 66, 67, 68, 70, 74, 76, 78, 85, 86, 87, 89, 92, 93, 95, 98, 102, 103, 105, 106, 108, 120, 121, 126, 128, 136, 137, 138, 139, 140, 141, 143, 145, 149, 168, 171, 173, 176, 179, 181, 186, 192, 194, 195, 196, 197, 198, 199, 204, 205, 206, 207, 209, 210, 211, 212, 213, 218, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 235, 236, 237, 242, 245, 246, 249, 250, 253, 260, 261, 263, 277, 278, 280, 281, 283, 284, 288, 289], "specif": [1, 5, 6, 7, 10, 11, 18, 20, 21, 25, 32, 53, 54, 62, 63, 64, 70, 74, 89, 91, 93, 98, 117, 120, 121, 125, 126, 136, 143, 145, 181, 195, 197, 198, 202, 204, 206, 207, 210, 211, 212, 217, 223, 224, 227, 228, 229, 231, 237, 242, 243, 244, 249, 284, 288], "instruct": [1, 3, 5, 6, 7, 9, 10, 12, 16, 21, 32, 43, 211, 229, 243, 244], "below": [1, 3, 4, 6, 7, 10, 12, 18, 20, 22, 26, 29, 30, 31, 33, 41, 42, 43, 52, 53, 54, 62, 63, 67, 69, 70, 71, 72, 78, 79, 85, 87, 89, 93, 98, 101, 102, 104, 105, 106, 112, 117, 120, 121, 125, 126, 128, 130, 131, 132, 137, 138, 139, 140, 143, 170, 176, 181, 186, 195, 196, 197, 198, 200, 207, 211, 212, 214, 220, 223, 224, 226, 227, 228, 229, 230, 231, 242, 244, 249, 250, 252, 261, 263, 266, 267, 284, 288], "mai": [1, 3, 4, 5, 6, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 39, 41, 42, 43, 44, 45, 53, 54, 55, 61, 62, 63, 64, 66, 67, 68, 70, 72, 74, 75, 77, 78, 79, 87, 89, 90, 92, 93, 94, 98, 99, 101, 102, 104, 108, 118, 121, 122, 126, 130, 136, 140, 162, 171, 176, 177, 178, 180, 183, 186, 190, 192, 194, 197, 198, 199, 200, 204, 206, 210, 211, 212, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 237, 240, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 263, 265, 277, 278, 280, 283, 284, 288, 289], "choos": [1, 6, 26, 29, 53, 58, 62, 64, 67, 98, 102, 106, 110, 130, 141, 176, 180, 186, 194, 195, 207, 208, 211, 218, 220, 221, 227, 228, 231, 242, 247, 288], "cd": [1, 5, 6, 230, 233, 249], "dockerfil": 1, "htmldoc": 1, "sympy_htmldoc": 1, "option": [1, 4, 5, 6, 7, 8, 12, 20, 22, 24, 36, 38, 41, 43, 53, 60, 61, 62, 63, 64, 65, 66, 68, 71, 72, 75, 76, 78, 79, 81, 89, 90, 93, 95, 98, 99, 102, 103, 104, 105, 110, 112, 116, 117, 118, 120, 121, 122, 125, 143, 149, 160, 165, 166, 168, 171, 173, 178, 180, 185, 186, 191, 197, 198, 199, 200, 201, 202, 206, 207, 208, 210, 211, 212, 213, 214, 216, 218, 219, 220, 223, 224, 227, 228, 229, 230, 231, 233, 236, 237, 242, 243, 244, 247, 249, 250, 256, 281, 287, 288], "now": [1, 2, 3, 5, 7, 10, 12, 16, 18, 19, 20, 22, 33, 42, 43, 54, 62, 63, 67, 70, 73, 78, 79, 84, 86, 87, 91, 98, 102, 112, 117, 120, 125, 126, 129, 131, 134, 136, 143, 144, 179, 181, 186, 191, 194, 195, 198, 199, 201, 204, 207, 208, 212, 219, 220, 221, 223, 224, 227, 229, 230, 231, 232, 237, 242, 243, 250, 261, 262, 280, 282, 283, 288, 289], "skip": [1, 3, 4, 6, 12, 42, 46, 62, 93, 98, 102, 186, 206, 210, 211, 213, 227, 229, 240, 242, 278, 286, 287], "down": [1, 4, 6, 18, 67, 95, 114, 128, 130, 194, 195, 197, 202, 213, 219, 221, 223, 227, 246, 284, 288], "section": [1, 4, 7, 8, 11, 18, 20, 21, 35, 42, 44, 53, 54, 61, 62, 63, 65, 69, 70, 72, 78, 87, 92, 98, 105, 106, 120, 126, 141, 179, 181, 185, 192, 195, 198, 201, 204, 206, 211, 214, 218, 221, 227, 237, 246, 247, 249, 260, 261, 262, 263, 267, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289], "For": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 15, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 74, 76, 77, 80, 83, 85, 86, 87, 91, 92, 93, 98, 102, 103, 104, 105, 106, 112, 114, 118, 120, 121, 122, 126, 130, 136, 137, 138, 139, 140, 141, 143, 145, 159, 160, 165, 169, 171, 173, 174, 175, 176, 178, 180, 181, 182, 186, 190, 191, 192, 194, 195, 197, 198, 199, 201, 202, 204, 206, 207, 208, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 223, 224, 226, 227, 229, 230, 231, 232, 235, 236, 237, 238, 242, 243, 244, 246, 247, 249, 250, 253, 254, 256, 258, 261, 263, 265, 266, 277, 278, 280, 283, 284, 288, 289], "apt": [1, 5], "get": [1, 2, 4, 6, 7, 8, 10, 15, 16, 18, 19, 20, 26, 28, 29, 30, 33, 34, 37, 38, 41, 42, 43, 45, 46, 51, 52, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 70, 75, 85, 87, 89, 91, 95, 98, 102, 104, 105, 110, 112, 115, 121, 126, 129, 130, 138, 139, 140, 143, 148, 149, 156, 160, 165, 170, 171, 172, 173, 178, 180, 181, 195, 199, 201, 202, 204, 206, 207, 208, 209, 210, 211, 213, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 233, 237, 238, 243, 249, 250, 251, 253, 256, 260, 277, 280, 282, 283, 284, 287, 288, 289], "python3": [1, 3, 43, 104, 211], "sphinx": [1, 4, 7, 8, 68, 227, 242, 247], "texliv": [1, 3, 211], "recommend": [1, 5, 6, 10, 11, 12, 13, 18, 20, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 42, 43, 62, 63, 66, 93, 116, 138, 143, 170, 186, 194, 199, 200, 201, 202, 208, 224, 227, 230, 236, 240, 247, 260, 261, 286, 289], "dvipng": 1, "librsvg2": 1, "bin": [1, 2, 3, 5, 6, 90, 211, 242, 249], "imagemagick": 1, "docbook2x": 1, "graphviz": [1, 7, 283, 287], "pip": [1, 3, 33, 104], "sudo": 1, "virtual": [1, 4, 8, 33, 62, 78, 195, 281], "environ": [1, 3, 8, 9, 10, 11, 62, 90, 191, 211, 231, 242, 252, 280, 282, 287], "venv": 1, "path": [1, 5, 6, 10, 53, 78, 84, 112, 134, 192, 194, 220, 223, 227, 230, 242, 243, 246, 247, 249, 252, 253, 254, 263], "my": [1, 211, 277], "Then": [1, 5, 11, 16, 18, 53, 58, 61, 62, 87, 91, 98, 102, 118, 121, 123, 133, 135, 136, 141, 145, 173, 181, 194, 198, 199, 201, 204, 206, 208, 211, 218, 221, 223, 224, 227, 229, 250], "activ": [1, 4, 5, 13, 128, 197, 240, 245, 247], "need": [1, 3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 37, 38, 41, 42, 43, 47, 53, 54, 58, 60, 61, 62, 63, 64, 68, 70, 73, 77, 78, 85, 86, 87, 89, 90, 92, 93, 98, 102, 103, 104, 105, 106, 108, 112, 116, 121, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 144, 145, 156, 160, 168, 174, 179, 185, 186, 191, 194, 195, 198, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 218, 219, 221, 223, 224, 226, 227, 229, 230, 231, 235, 236, 237, 238, 240, 243, 244, 245, 246, 247, 249, 252, 256, 260, 262, 263, 266, 277, 278, 280, 283, 284, 286, 288], "rerun": [1, 207, 242], "each": [1, 4, 10, 11, 12, 14, 18, 20, 22, 24, 25, 26, 27, 29, 32, 35, 38, 39, 41, 42, 43, 44, 45, 46, 53, 54, 58, 62, 63, 64, 65, 66, 67, 68, 70, 72, 77, 78, 79, 84, 85, 87, 89, 91, 92, 93, 95, 98, 102, 105, 108, 110, 112, 118, 120, 121, 126, 128, 130, 133, 135, 137, 138, 141, 160, 173, 176, 185, 186, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 209, 211, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 235, 236, 237, 240, 242, 244, 246, 249, 250, 252, 256, 258, 259, 261, 263, 265, 278, 281, 283, 288, 289], "time": [1, 3, 4, 7, 10, 11, 12, 16, 18, 19, 22, 29, 31, 34, 38, 39, 43, 45, 53, 54, 58, 62, 63, 67, 70, 85, 87, 92, 93, 98, 99, 101, 102, 103, 104, 109, 110, 112, 116, 121, 122, 125, 126, 128, 130, 133, 134, 136, 138, 139, 140, 141, 143, 144, 150, 160, 165, 173, 174, 178, 179, 180, 181, 182, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 204, 205, 206, 207, 208, 210, 211, 218, 219, 220, 221, 223, 227, 229, 231, 240, 242, 243, 248, 249, 250, 263, 265, 275, 278, 282, 283, 284], "new": [1, 3, 4, 5, 7, 11, 18, 20, 25, 32, 37, 38, 42, 43, 44, 53, 54, 61, 62, 63, 64, 70, 75, 78, 87, 89, 90, 93, 98, 102, 105, 108, 112, 117, 120, 126, 133, 135, 141, 142, 143, 145, 166, 172, 173, 176, 178, 181, 182, 184, 186, 190, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 211, 218, 221, 223, 224, 227, 229, 230, 231, 232, 233, 242, 243, 247, 250, 256, 258, 260, 276, 277, 280, 283, 284, 286], "termin": [1, 53, 62, 68, 90, 102, 191, 211, 218, 242, 287], "after": [1, 4, 5, 6, 7, 10, 12, 33, 35, 37, 38, 42, 44, 50, 53, 54, 58, 60, 61, 62, 63, 64, 68, 77, 79, 84, 89, 93, 98, 102, 104, 105, 112, 137, 138, 140, 143, 145, 149, 161, 173, 181, 185, 192, 195, 200, 204, 206, 207, 208, 209, 211, 212, 217, 224, 227, 228, 229, 230, 232, 242, 245, 250, 252, 256, 259, 263, 277, 278, 280, 284, 288], "two": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 24, 26, 29, 30, 35, 41, 42, 43, 44, 47, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 87, 89, 91, 92, 93, 95, 98, 102, 103, 105, 106, 108, 109, 112, 113, 116, 117, 120, 121, 129, 134, 136, 137, 138, 140, 141, 148, 149, 150, 155, 156, 160, 162, 165, 166, 171, 172, 173, 174, 175, 176, 178, 180, 181, 185, 186, 187, 188, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 212, 213, 218, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 233, 236, 246, 249, 250, 256, 259, 261, 262, 263, 265, 277, 278, 281, 283, 284, 288], "method": [1, 3, 4, 6, 7, 11, 12, 17, 18, 22, 24, 25, 26, 28, 29, 30, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 53, 54, 55, 61, 62, 63, 64, 65, 66, 68, 69, 70, 73, 74, 75, 76, 78, 81, 84, 86, 87, 89, 91, 93, 94, 95, 98, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 116, 119, 120, 125, 126, 129, 131, 132, 136, 137, 142, 143, 150, 153, 155, 157, 165, 166, 171, 173, 176, 178, 180, 183, 184, 185, 186, 188, 192, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 212, 213, 214, 216, 217, 218, 219, 223, 224, 227, 229, 231, 232, 234, 236, 237, 238, 242, 244, 246, 249, 250, 256, 260, 263, 266, 267, 271, 273, 277, 278, 279, 280, 283, 288], "given": [1, 3, 4, 7, 10, 11, 12, 14, 16, 18, 20, 22, 24, 27, 29, 35, 37, 38, 41, 42, 43, 44, 46, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 89, 91, 92, 93, 95, 98, 101, 102, 104, 105, 108, 110, 113, 117, 118, 120, 121, 123, 125, 126, 130, 141, 149, 166, 171, 173, 180, 181, 182, 184, 186, 187, 188, 190, 192, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 236, 237, 240, 242, 244, 246, 249, 250, 252, 253, 256, 259, 261, 263, 265, 277, 283, 286, 288, 289], "abov": [1, 3, 4, 6, 7, 10, 12, 14, 16, 19, 20, 22, 24, 28, 29, 31, 41, 42, 43, 44, 46, 52, 53, 54, 58, 61, 62, 66, 67, 70, 72, 75, 78, 79, 87, 89, 92, 93, 98, 102, 103, 104, 106, 112, 116, 120, 121, 123, 125, 126, 128, 129, 130, 131, 136, 137, 139, 140, 141, 144, 171, 173, 176, 186, 192, 194, 195, 197, 198, 199, 201, 202, 204, 206, 207, 208, 210, 211, 212, 218, 221, 223, 224, 227, 229, 230, 231, 235, 236, 243, 244, 250, 260, 261, 262, 263, 266, 280, 282, 283, 284, 288], "run": [1, 4, 6, 7, 8, 11, 12, 16, 18, 20, 44, 53, 54, 56, 62, 63, 87, 98, 103, 104, 121, 128, 143, 176, 191, 197, 198, 211, 221, 223, 227, 228, 229, 239, 243, 245, 246, 249, 250, 275, 280, 287], "txt": [1, 211], "mpmath": [1, 3, 5, 11, 20, 27, 28, 43, 67, 70, 98, 103, 143, 201, 202, 211, 219, 229, 245, 250], "error": [1, 3, 4, 6, 7, 10, 14, 18, 19, 24, 25, 26, 27, 28, 29, 31, 34, 41, 43, 51, 54, 61, 62, 63, 68, 72, 77, 87, 89, 98, 101, 102, 104, 126, 195, 196, 199, 201, 202, 204, 208, 211, 213, 219, 227, 228, 229, 230, 231, 242, 243, 244, 247, 249, 252, 256, 277], "packag": [1, 3, 23, 27, 28, 33, 90, 103, 104, 109, 136, 143, 191, 211, 242, 253, 262, 263, 282], "matplotlib": [1, 3, 6, 7, 10, 29, 33, 85, 90, 110, 143, 156, 191, 197, 287], "mayb": [1, 19, 24], "other": [1, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 35, 39, 42, 43, 44, 45, 53, 54, 55, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 82, 87, 89, 92, 93, 95, 98, 102, 103, 104, 105, 106, 112, 116, 117, 120, 121, 126, 127, 130, 131, 136, 137, 140, 141, 143, 145, 148, 149, 150, 160, 171, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 186, 188, 190, 194, 195, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 211, 212, 213, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 237, 238, 240, 243, 244, 245, 246, 249, 250, 256, 259, 260, 263, 265, 267, 274, 277, 278, 280, 282, 283, 284, 288], "rpm": 1, "base": [1, 3, 4, 5, 6, 7, 9, 11, 12, 18, 20, 22, 33, 35, 37, 38, 41, 43, 44, 51, 52, 53, 58, 59, 60, 62, 63, 65, 67, 68, 69, 70, 73, 75, 78, 85, 89, 90, 91, 92, 94, 95, 102, 103, 109, 117, 120, 126, 128, 143, 144, 145, 154, 156, 160, 161, 165, 171, 172, 174, 176, 178, 181, 182, 184, 186, 188, 191, 192, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 211, 213, 218, 219, 220, 221, 223, 224, 227, 229, 231, 235, 236, 237, 242, 243, 244, 245, 246, 247, 249, 250, 251, 256, 259, 260, 263, 283, 288], "distribut": [1, 3, 33, 53, 60, 62, 70, 78, 89, 105, 106, 175, 199, 202, 207, 211, 237], "prerequisit": 1, "dnf": [1, 92], "scheme": [1, 4, 18, 54, 61, 66, 196, 197, 204, 207, 236], "medium": [1, 20, 145, 146, 149, 150, 160, 204, 273], "tool": [1, 7, 11, 20, 53, 90, 97, 98, 103, 112, 143, 195, 198, 203, 204, 211, 243, 249, 255, 264, 271], "first": [1, 3, 5, 6, 7, 8, 11, 12, 16, 18, 19, 20, 22, 26, 29, 30, 33, 35, 42, 43, 44, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 75, 76, 78, 79, 86, 87, 89, 91, 92, 93, 98, 101, 102, 105, 106, 112, 113, 118, 120, 121, 125, 126, 128, 129, 130, 131, 136, 137, 140, 141, 144, 148, 149, 153, 157, 160, 165, 166, 169, 170, 171, 172, 173, 175, 176, 179, 181, 186, 190, 194, 195, 197, 198, 200, 202, 204, 205, 206, 207, 208, 211, 212, 213, 214, 217, 218, 220, 221, 223, 224, 227, 228, 229, 230, 231, 235, 237, 240, 242, 243, 244, 245, 249, 250, 252, 261, 266, 277, 278, 280, 282, 283, 284, 286, 288, 289], "homebrew": 1, "brew": 1, "sh": 1, "docbook": 1, "librsvg": 1, "conda": [1, 3, 5, 33, 104], "Or": [1, 7, 10, 12, 19, 24, 26, 53, 62, 63, 64, 70, 87, 92, 102, 123, 198, 208, 210, 211, 223, 230, 231, 242, 250, 263, 283, 286], "forg": [1, 3, 104], "make": [1, 3, 4, 6, 7, 8, 10, 11, 12, 14, 16, 18, 19, 20, 22, 27, 28, 30, 34, 37, 38, 39, 41, 43, 44, 52, 53, 61, 62, 63, 64, 65, 66, 67, 68, 70, 74, 78, 89, 90, 92, 98, 101, 102, 103, 104, 105, 106, 108, 121, 125, 126, 128, 129, 133, 134, 138, 140, 141, 143, 156, 173, 178, 191, 194, 197, 200, 201, 202, 204, 206, 207, 208, 210, 211, 214, 219, 220, 221, 223, 227, 228, 229, 230, 235, 237, 240, 242, 243, 244, 245, 247, 249, 250, 260, 265, 266, 280, 281, 282, 283, 284, 288], "success": [1, 7, 42, 53, 62, 70, 87, 89, 102, 120, 128, 186, 198, 204, 206, 219, 220, 227, 230, 231, 249, 256, 258], "tricki": [1, 62, 87], "becaus": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 39, 43, 54, 61, 62, 63, 68, 74, 78, 79, 87, 89, 92, 96, 98, 102, 104, 120, 126, 130, 156, 164, 176, 178, 180, 181, 194, 197, 198, 200, 201, 202, 204, 206, 207, 208, 210, 211, 214, 218, 221, 223, 224, 227, 228, 229, 230, 240, 242, 243, 245, 249, 250, 252, 260, 278, 280, 282, 283, 284, 287, 288, 289], "some": [1, 3, 4, 6, 11, 12, 16, 18, 19, 20, 22, 25, 26, 27, 28, 30, 31, 33, 34, 35, 39, 42, 43, 44, 45, 50, 53, 54, 60, 61, 62, 63, 66, 67, 68, 70, 72, 73, 74, 78, 87, 89, 91, 92, 93, 95, 98, 102, 103, 104, 110, 113, 116, 117, 120, 123, 125, 126, 127, 128, 129, 130, 131, 137, 138, 140, 141, 144, 156, 161, 165, 173, 176, 180, 181, 182, 185, 187, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 211, 213, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 231, 237, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 256, 258, 259, 261, 263, 267, 277, 278, 280, 282, 283, 284, 286, 287, 288], "avail": [1, 3, 5, 7, 10, 11, 12, 18, 22, 28, 31, 32, 33, 42, 43, 53, 54, 61, 62, 67, 70, 89, 98, 103, 104, 126, 140, 143, 201, 202, 204, 207, 211, 212, 217, 219, 221, 223, 224, 229, 230, 231, 232, 236, 237, 242, 249, 250, 255, 256, 280, 287], "subsystem": [1, 211], "linux": [1, 33], "possibl": [1, 6, 10, 11, 14, 18, 19, 20, 22, 25, 30, 33, 41, 43, 44, 45, 46, 51, 53, 54, 56, 57, 58, 62, 63, 67, 68, 70, 72, 74, 76, 77, 79, 84, 86, 87, 89, 91, 92, 93, 95, 98, 102, 113, 114, 116, 128, 139, 141, 170, 172, 176, 178, 180, 181, 190, 192, 196, 197, 198, 199, 201, 202, 204, 206, 207, 208, 210, 211, 212, 213, 217, 218, 219, 220, 223, 224, 227, 228, 229, 230, 231, 232, 237, 242, 244, 245, 246, 247, 249, 250, 260, 261, 263, 279, 280, 283, 288], "workaround": [1, 250], "solut": [1, 10, 11, 12, 14, 16, 19, 20, 23, 24, 43, 58, 62, 63, 68, 70, 72, 80, 84, 85, 86, 89, 98, 102, 105, 109, 116, 121, 126, 130, 136, 140, 145, 181, 185, 198, 204, 205, 206, 207, 208, 209, 210, 219, 224, 226, 227, 228, 229, 289], "shell": [1, 12, 90, 143, 210], "tutori": [1, 7, 11, 12, 16, 17, 33, 78, 126, 143, 199, 210, 211, 227, 250, 280, 283, 285, 286, 287, 288, 289], "learn": [1, 3, 5, 7, 23, 29, 31, 98, 141, 195, 220, 230, 277, 280, 281, 282, 286], "microsoft": 1, "com": [1, 3, 4, 5, 6, 7, 10, 20, 33, 35, 39, 41, 53, 55, 56, 62, 63, 65, 66, 67, 68, 70, 72, 78, 79, 87, 89, 93, 98, 102, 110, 196, 205, 214, 216, 219, 220, 223, 224, 227, 230, 231, 249, 252, 284], "en": [1, 6, 7, 18, 20, 35, 37, 38, 39, 41, 42, 43, 45, 50, 51, 53, 54, 61, 62, 63, 64, 65, 67, 68, 70, 72, 74, 78, 79, 80, 89, 90, 91, 92, 93, 95, 98, 102, 110, 112, 115, 145, 147, 148, 149, 151, 152, 153, 157, 158, 159, 162, 164, 165, 174, 176, 186, 188, 193, 200, 207, 208, 214, 218, 219, 220, 227, 230, 231, 244, 249, 250, 256, 258, 262, 264, 266, 284], "wsl": 1, "In": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 26, 31, 33, 39, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 61, 62, 63, 64, 66, 67, 68, 70, 75, 77, 78, 79, 80, 87, 89, 90, 91, 92, 93, 95, 98, 99, 102, 104, 106, 108, 112, 116, 120, 121, 126, 129, 130, 131, 136, 137, 138, 139, 140, 141, 143, 144, 162, 164, 165, 166, 171, 175, 176, 179, 180, 181, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 218, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 233, 235, 237, 240, 242, 244, 246, 247, 249, 250, 253, 256, 260, 261, 263, 265, 277, 280, 281, 282, 283, 284, 287, 288, 289], "command": [1, 3, 5, 6, 11, 12, 22, 25, 31, 33, 43, 66, 90, 126, 138, 143, 191, 197, 211, 242, 243, 287], "prompt": [1, 6, 11], "transfer": [1, 109, 110, 112, 145, 230], "html": [1, 3, 4, 6, 7, 39, 43, 46, 54, 55, 56, 62, 63, 65, 67, 68, 70, 72, 78, 79, 89, 90, 98, 102, 110, 205, 211, 214, 216, 219, 220, 224, 227, 231, 243, 245, 247, 249, 250, 284], "note": [1, 3, 6, 7, 10, 11, 12, 14, 16, 18, 19, 23, 24, 25, 27, 28, 29, 30, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 52, 53, 54, 55, 58, 60, 61, 63, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 87, 89, 90, 92, 93, 95, 98, 102, 104, 112, 113, 117, 118, 120, 121, 122, 125, 126, 128, 130, 133, 141, 143, 149, 152, 160, 170, 171, 173, 175, 176, 177, 179, 185, 186, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 212, 213, 214, 217, 219, 221, 223, 224, 226, 227, 228, 229, 230, 231, 236, 237, 240, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 261, 263, 265, 277, 278, 279, 281, 282, 283, 284, 288], "via": [1, 3, 11, 16, 20, 27, 31, 33, 36, 37, 38, 53, 54, 62, 67, 70, 87, 89, 92, 98, 102, 103, 104, 105, 186, 196, 198, 202, 204, 206, 207, 210, 211, 230, 240, 243, 244, 256, 265, 283], "want": [1, 3, 4, 5, 6, 10, 11, 12, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 41, 43, 44, 45, 46, 54, 62, 63, 69, 74, 76, 78, 81, 87, 89, 93, 95, 98, 99, 102, 103, 110, 112, 115, 122, 126, 143, 159, 169, 170, 173, 176, 179, 181, 188, 190, 194, 195, 197, 199, 200, 201, 204, 206, 207, 208, 210, 211, 212, 218, 219, 221, 223, 224, 227, 228, 229, 230, 231, 232, 237, 240, 242, 244, 246, 249, 250, 261, 263, 266, 277, 278, 280, 282, 283, 284, 285, 287, 288], "directori": [1, 3, 6, 7, 33, 38, 43, 227, 242, 243, 252], "folder": 1, "prepend": [1, 42, 53, 98, 112, 183, 211, 237], "mnt": 1, "navig": 1, "better": [1, 3, 4, 6, 10, 11, 12, 18, 19, 20, 35, 42, 43, 54, 62, 66, 70, 89, 92, 112, 126, 156, 184, 197, 200, 201, 202, 214, 218, 219, 220, 221, 227, 228, 229, 230, 231, 243, 249, 250, 282, 288], "compat": [1, 3, 4, 15, 43, 62, 70, 90, 93, 98, 103, 116, 178, 183, 191, 197, 200, 202, 206, 207, 211, 231, 235, 238, 242, 244, 250], "than": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 34, 35, 39, 43, 44, 45, 47, 53, 54, 55, 61, 62, 63, 66, 67, 68, 70, 71, 76, 77, 78, 80, 84, 87, 89, 91, 92, 93, 95, 98, 99, 101, 102, 103, 104, 108, 110, 112, 116, 121, 125, 126, 130, 133, 150, 156, 170, 173, 174, 176, 185, 195, 196, 199, 200, 201, 202, 204, 207, 208, 209, 211, 214, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 238, 243, 244, 246, 249, 250, 252, 253, 277, 278, 280, 281, 282, 283, 284, 286, 288], "cygwin": 1, "msys2": 1, "more": [1, 3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 38, 39, 41, 42, 43, 44, 45, 48, 52, 53, 54, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 74, 75, 76, 77, 78, 79, 80, 84, 87, 89, 92, 93, 95, 96, 98, 99, 101, 102, 103, 104, 110, 112, 116, 120, 121, 122, 126, 128, 130, 132, 134, 136, 138, 139, 140, 141, 143, 145, 148, 160, 164, 165, 170, 173, 174, 175, 176, 181, 185, 186, 190, 191, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 220, 221, 223, 224, 227, 228, 229, 230, 231, 242, 244, 245, 246, 249, 250, 252, 256, 260, 264, 271, 273, 277, 278, 280, 281, 283, 284, 286, 287, 288, 289], "partial": [1, 11, 41, 53, 60, 61, 62, 64, 66, 67, 68, 102, 104, 143, 170, 186, 190, 192, 202, 205, 208, 211, 213, 220, 223, 227, 228, 232, 238, 256, 263, 278, 288], "workflow": [1, 3, 5, 8, 9, 28, 29, 32, 143, 201, 244, 250, 285], "onli": [1, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 25, 26, 27, 28, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 48, 51, 52, 53, 54, 55, 56, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 75, 76, 78, 79, 80, 85, 87, 89, 90, 91, 92, 93, 98, 99, 102, 103, 104, 108, 110, 112, 118, 120, 126, 128, 129, 130, 132, 133, 135, 137, 138, 140, 141, 144, 149, 151, 170, 171, 175, 176, 178, 181, 185, 186, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 223, 224, 227, 228, 229, 231, 232, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 249, 250, 251, 256, 259, 261, 263, 265, 266, 277, 278, 280, 281, 283, 284, 288, 289], "viabl": [1, 63], "64": [1, 47, 53, 102, 142, 196, 210, 220, 229, 231, 242, 249, 252, 287], "bit": [1, 16, 20, 42, 43, 46, 62, 63, 65, 92, 93, 98, 102, 170, 181, 198, 207, 221, 224, 230, 242, 249, 260, 261, 287], "chocolatei": 1, "choco": 1, "rsvg": 1, "convert": [1, 3, 4, 10, 11, 12, 14, 18, 19, 20, 25, 27, 28, 29, 35, 39, 43, 46, 54, 58, 62, 63, 66, 67, 68, 76, 77, 79, 82, 83, 86, 90, 92, 93, 98, 101, 102, 104, 112, 170, 173, 179, 180, 181, 183, 190, 197, 198, 200, 202, 204, 206, 207, 208, 209, 211, 212, 213, 219, 220, 221, 223, 224, 227, 228, 230, 231, 232, 233, 236, 242, 243, 249, 250, 252, 254, 259, 274, 279, 280, 283, 288], "chose": [1, 63], "rm": [1, 43], "absolut": [1, 39, 40, 43, 61, 62, 68, 70, 77, 87, 89, 93, 98, 114, 174, 202, 206, 207, 221, 223, 226, 231, 242, 265, 266, 267], "Be": [1, 4, 6, 20, 41, 62, 92, 98, 204, 227, 230, 238, 250], "sure": [1, 4, 6, 7, 20, 43, 53, 62, 74, 125, 126, 156, 181, 207, 208, 218, 227, 229, 230, 243, 249, 280, 283, 288], "substitut": [1, 11, 12, 16, 19, 22, 25, 29, 31, 43, 62, 63, 68, 70, 87, 89, 98, 103, 104, 112, 121, 122, 126, 128, 130, 140, 165, 174, 176, 179, 186, 188, 190, 208, 209, 212, 213, 218, 221, 223, 224, 227, 228, 229, 230, 250, 259, 279, 280], "actual": [1, 3, 4, 6, 7, 11, 12, 16, 18, 19, 20, 42, 43, 44, 51, 53, 60, 62, 63, 70, 74, 87, 89, 91, 95, 98, 102, 112, 116, 126, 128, 138, 139, 140, 191, 198, 201, 206, 211, 219, 221, 223, 224, 227, 230, 238, 242, 243, 246, 247, 249, 250, 282], "filesystem": 1, "from": [1, 3, 4, 5, 6, 7, 10, 11, 14, 15, 16, 18, 19, 20, 22, 24, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 254, 256, 258, 259, 260, 261, 262, 263, 265, 266, 274, 277, 278, 280, 282, 283, 284, 287, 288, 289], "ani": [1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 18, 19, 20, 22, 24, 25, 26, 29, 33, 39, 40, 41, 42, 43, 44, 51, 52, 53, 54, 60, 61, 62, 63, 64, 66, 67, 68, 70, 72, 73, 74, 77, 78, 79, 87, 89, 90, 92, 93, 96, 98, 99, 102, 104, 105, 106, 108, 112, 114, 117, 120, 121, 122, 123, 125, 126, 136, 139, 140, 141, 144, 145, 149, 162, 165, 170, 171, 174, 176, 178, 181, 185, 186, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 211, 212, 217, 218, 219, 220, 221, 223, 224, 227, 228, 229, 231, 233, 236, 237, 242, 243, 245, 246, 247, 249, 250, 256, 260, 261, 262, 263, 265, 266, 277, 278, 280, 283, 284, 287, 288, 289], "makefil": 1, "subdirectori": 1, "ha": [1, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 39, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 56, 58, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 74, 75, 77, 78, 79, 85, 87, 89, 91, 92, 93, 95, 98, 99, 101, 102, 103, 105, 106, 108, 112, 113, 117, 120, 121, 126, 128, 130, 136, 141, 143, 149, 150, 160, 161, 170, 173, 178, 181, 185, 186, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 216, 218, 219, 221, 223, 224, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 242, 243, 244, 245, 246, 247, 249, 252, 256, 258, 260, 261, 263, 265, 266, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "collect": [1, 3, 7, 17, 42, 43, 53, 62, 79, 89, 102, 105, 112, 125, 134, 143, 176, 183, 196, 202, 207, 220, 221, 223, 227, 231, 242, 249], "offici": [1, 12, 33, 62, 116, 143, 185, 195, 230, 250, 286], "which": [1, 2, 3, 4, 6, 7, 10, 11, 12, 16, 17, 18, 19, 20, 22, 23, 25, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 53, 54, 55, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 76, 77, 78, 81, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 98, 101, 102, 104, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 131, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 149, 150, 162, 165, 171, 172, 173, 174, 176, 180, 181, 182, 185, 186, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 212, 213, 214, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 235, 237, 242, 243, 244, 245, 246, 247, 249, 250, 252, 256, 258, 261, 265, 266, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289], "gener": [1, 4, 8, 10, 11, 12, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 50, 51, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 76, 78, 80, 85, 87, 89, 90, 91, 92, 95, 98, 102, 103, 104, 112, 116, 117, 120, 121, 122, 125, 126, 128, 129, 130, 131, 133, 135, 136, 137, 139, 140, 141, 143, 144, 148, 159, 160, 161, 162, 165, 170, 171, 174, 175, 176, 181, 183, 185, 186, 187, 190, 191, 192, 194, 196, 197, 198, 199, 200, 202, 204, 207, 208, 209, 210, 211, 212, 213, 217, 220, 221, 223, 224, 226, 227, 228, 229, 231, 236, 237, 243, 244, 246, 247, 248, 249, 250, 256, 260, 261, 263, 264, 265, 271, 278, 280, 281, 282, 283, 284, 288, 289], "svg": [1, 90, 191], "store": [1, 5, 10, 12, 18, 42, 43, 52, 53, 62, 84, 86, 95, 98, 102, 104, 117, 121, 123, 125, 126, 141, 170, 176, 190, 194, 195, 197, 198, 201, 206, 207, 208, 218, 221, 232, 235, 236, 244, 245, 246, 249, 261, 263, 283], "_build": [1, 6], "same": [1, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 24, 26, 29, 35, 37, 38, 39, 41, 42, 43, 45, 51, 52, 53, 54, 58, 61, 62, 63, 64, 67, 69, 70, 72, 75, 76, 77, 78, 79, 84, 85, 87, 89, 91, 92, 93, 95, 98, 102, 104, 105, 106, 112, 113, 116, 117, 120, 124, 126, 130, 133, 134, 137, 140, 141, 160, 162, 170, 173, 174, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 218, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 236, 237, 238, 240, 242, 244, 245, 246, 247, 249, 250, 252, 256, 258, 260, 261, 265, 278, 280, 283, 284, 287, 288], "inform": [1, 3, 4, 6, 7, 11, 12, 15, 18, 19, 22, 31, 32, 38, 39, 42, 43, 44, 48, 53, 54, 60, 62, 63, 67, 70, 74, 87, 89, 91, 95, 98, 103, 106, 117, 118, 120, 121, 125, 126, 128, 136, 137, 138, 140, 141, 143, 144, 171, 176, 181, 185, 186, 191, 195, 197, 201, 206, 207, 211, 212, 218, 221, 223, 224, 229, 230, 231, 235, 236, 237, 242, 243, 244, 245, 246, 256, 261, 263, 288], "onc": [1, 4, 11, 12, 18, 19, 20, 43, 45, 46, 53, 58, 62, 63, 67, 70, 78, 87, 89, 103, 106, 118, 120, 136, 140, 181, 186, 188, 195, 197, 199, 201, 207, 211, 212, 220, 221, 223, 227, 230, 237, 249, 260, 277, 278, 288, 289], "under": [1, 3, 4, 6, 11, 12, 18, 19, 37, 38, 40, 41, 43, 44, 52, 53, 58, 60, 70, 80, 87, 89, 91, 92, 98, 102, 104, 105, 106, 145, 171, 196, 198, 199, 206, 207, 211, 218, 219, 221, 224, 227, 229, 230, 231, 237, 240, 282, 288], "prefer": [1, 3, 6, 10, 11, 18, 20, 22, 27, 28, 29, 43, 45, 54, 61, 62, 70, 102, 104, 120, 126, 176, 180, 181, 186, 197, 200, 202, 204, 206, 211, 219, 223, 227, 229, 236, 242, 244, 247, 250, 282, 284], "web": [1, 7, 46, 54, 63, 67, 70, 74, 79, 89, 102, 143, 193, 200, 205, 223, 224, 231, 249, 284], "browser": 1, "drop": [1, 68, 89, 103, 133, 202, 204], "menu": 1, "index": [1, 3, 10, 12, 20, 22, 29, 30, 31, 35, 43, 51, 53, 54, 58, 61, 62, 63, 64, 67, 68, 70, 73, 78, 87, 89, 92, 93, 95, 98, 101, 102, 112, 125, 126, 143, 144, 145, 147, 149, 150, 160, 169, 171, 173, 176, 181, 186, 197, 198, 202, 206, 207, 208, 211, 216, 217, 221, 229, 231, 232, 234, 235, 237, 238, 243, 271], "told": 1, "how": [1, 3, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 42, 43, 45, 53, 54, 61, 62, 68, 69, 70, 74, 85, 89, 92, 93, 95, 98, 102, 104, 105, 116, 120, 121, 126, 127, 133, 138, 139, 141, 143, 147, 148, 164, 168, 171, 172, 173, 178, 179, 186, 194, 197, 198, 201, 202, 204, 206, 210, 211, 214, 218, 219, 221, 223, 224, 227, 228, 229, 231, 237, 242, 243, 244, 245, 247, 249, 250, 252, 261, 278, 280, 282, 283, 284, 285, 287, 288], "load": [1, 43, 62, 90, 105, 106, 108, 117, 120, 121, 125, 129, 131, 144, 156, 191], "ll": [1, 42, 60, 98, 130, 194, 195, 240], "manual": [1, 3, 4, 7, 10, 11, 20, 25, 43, 44, 53, 66, 72, 89, 90, 104, 112, 125, 126, 129, 140, 144, 197, 204, 211, 227, 229, 230, 245, 278, 288], "repeat": [1, 11, 12, 53, 56, 61, 62, 68, 70, 89, 91, 93, 98, 102, 104, 160, 162, 176, 197, 198, 199, 204, 206, 207, 211, 217, 227, 231, 235, 236, 243, 245, 249, 288], "step": [1, 4, 5, 20, 21, 32, 41, 43, 53, 57, 58, 61, 62, 63, 70, 86, 87, 89, 98, 102, 103, 121, 133, 136, 138, 143, 144, 178, 190, 195, 196, 197, 201, 202, 204, 206, 207, 211, 212, 213, 216, 219, 220, 221, 223, 224, 227, 229, 231, 236, 243, 249, 250, 278], "reload": 1, "There": [1, 3, 4, 5, 6, 7, 10, 11, 12, 15, 18, 19, 20, 22, 25, 26, 30, 43, 44, 53, 54, 55, 56, 59, 61, 62, 63, 66, 67, 70, 86, 87, 89, 90, 91, 92, 95, 98, 102, 105, 106, 108, 112, 116, 125, 136, 138, 140, 149, 166, 171, 185, 186, 191, 194, 195, 197, 201, 202, 203, 204, 206, 207, 208, 211, 212, 213, 219, 220, 221, 223, 224, 227, 229, 230, 231, 233, 236, 245, 246, 249, 250, 252, 261, 277, 278, 280, 282, 283, 287, 288], "altern": [1, 4, 6, 10, 11, 12, 19, 20, 33, 43, 50, 53, 54, 61, 62, 66, 67, 68, 69, 70, 93, 95, 99, 103, 126, 138, 140, 186, 194, 196, 197, 199, 200, 201, 206, 207, 211, 216, 218, 220, 229, 230, 232, 233, 249, 280, 282, 284], "approach": [1, 16, 22, 25, 26, 27, 29, 30, 31, 42, 61, 62, 89, 112, 130, 136, 201, 204, 205, 206, 208, 219, 228, 229, 231, 243, 246, 249, 278, 284], "set": [1, 2, 3, 4, 6, 7, 11, 12, 14, 16, 17, 18, 19, 22, 24, 25, 31, 34, 35, 37, 41, 42, 43, 44, 45, 50, 51, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 75, 77, 79, 80, 81, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 104, 105, 106, 112, 116, 120, 121, 125, 126, 128, 129, 130, 135, 137, 138, 139, 140, 143, 144, 160, 166, 171, 176, 178, 181, 183, 184, 185, 186, 188, 190, 191, 192, 194, 197, 198, 199, 200, 201, 204, 206, 207, 210, 211, 212, 213, 218, 220, 221, 223, 224, 226, 227, 228, 229, 231, 235, 236, 237, 240, 242, 243, 244, 245, 249, 250, 256, 259, 261, 267, 270, 277, 279, 288], "up": [1, 3, 4, 10, 11, 16, 18, 19, 20, 29, 33, 38, 41, 43, 45, 53, 54, 56, 62, 63, 64, 66, 67, 68, 70, 71, 78, 79, 83, 87, 89, 90, 92, 93, 98, 102, 103, 105, 114, 116, 123, 125, 128, 129, 133, 135, 140, 141, 143, 144, 156, 171, 173, 190, 196, 197, 198, 201, 202, 206, 208, 211, 212, 213, 218, 220, 221, 223, 224, 227, 228, 229, 230, 243, 244, 245, 246, 247, 250, 279, 280, 283, 284, 286], "monitor": 1, "automat": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 25, 26, 29, 31, 42, 43, 44, 54, 62, 64, 65, 66, 67, 68, 70, 75, 77, 81, 87, 90, 92, 102, 104, 105, 121, 126, 128, 134, 162, 164, 165, 174, 176, 180, 190, 194, 197, 198, 201, 202, 206, 207, 208, 211, 214, 217, 218, 220, 221, 223, 224, 227, 229, 230, 236, 237, 242, 243, 244, 247, 250, 261, 266, 278, 280, 282, 283, 287, 288, 289], "detect": [1, 3, 34, 41, 95, 98, 102, 197, 201, 211, 227, 228, 230, 232, 249, 287], "procedur": [1, 25, 27, 44, 45, 47, 53, 59, 60, 61, 89, 98, 121, 141, 204, 206, 223, 224, 229, 230, 256, 284], "again": [1, 4, 12, 16, 19, 45, 54, 62, 77, 102, 126, 128, 141, 171, 172, 186, 194, 198, 199, 206, 214, 221, 227, 240, 260, 280, 288], "whether": [1, 4, 10, 11, 18, 19, 20, 22, 27, 29, 30, 31, 41, 42, 43, 48, 53, 61, 62, 63, 69, 70, 74, 77, 89, 90, 92, 93, 98, 102, 108, 116, 121, 122, 125, 126, 164, 183, 188, 195, 197, 200, 201, 202, 206, 207, 211, 214, 218, 219, 223, 224, 227, 229, 230, 231, 232, 242, 244, 249, 250, 256, 259, 280, 284], "8000": [1, 105], "80": [1, 4, 6, 12, 20, 41, 53, 62, 65, 89, 98, 102, 105, 106, 110, 207, 210, 227, 231, 247, 249], "localhost": 1, "differ": [1, 4, 6, 7, 10, 11, 12, 14, 15, 17, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 34, 42, 43, 44, 45, 51, 52, 53, 54, 58, 61, 62, 63, 64, 66, 67, 68, 70, 73, 75, 77, 78, 82, 84, 86, 87, 89, 90, 91, 92, 95, 98, 102, 103, 104, 105, 110, 112, 116, 117, 123, 126, 128, 132, 140, 141, 144, 148, 149, 161, 162, 170, 171, 174, 176, 178, 180, 181, 185, 186, 187, 190, 191, 192, 195, 197, 198, 199, 200, 202, 204, 206, 207, 208, 210, 211, 212, 213, 214, 216, 218, 219, 220, 223, 224, 227, 228, 229, 230, 231, 232, 235, 237, 240, 242, 243, 244, 245, 246, 247, 249, 250, 256, 259, 263, 265, 279, 280, 282, 283, 284, 287, 288], "port": [1, 104, 128, 148], "finish": [1, 43, 44, 170, 245, 285], "stop": [1, 4, 43, 44, 54, 62, 98, 102, 197, 217, 219, 227, 231], "ctrl": 1, "detach": 1, "mode": [1, 2, 22, 62, 90, 104, 148, 171, 191, 207, 211, 242, 253], "d": [1, 6, 7, 10, 11, 12, 16, 20, 23, 25, 27, 29, 35, 42, 46, 51, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 67, 70, 72, 76, 80, 85, 87, 89, 91, 92, 93, 94, 95, 98, 99, 101, 102, 104, 105, 108, 112, 120, 121, 143, 145, 148, 149, 155, 165, 173, 175, 176, 181, 185, 186, 188, 194, 195, 196, 197, 199, 200, 201, 202, 204, 205, 206, 207, 208, 211, 213, 217, 221, 223, 224, 227, 228, 229, 230, 231, 232, 233, 235, 237, 249, 252, 256, 258, 259, 260, 261, 265, 273, 284, 289], "name": [1, 3, 4, 5, 6, 7, 10, 11, 12, 18, 20, 29, 30, 34, 37, 38, 42, 43, 44, 45, 49, 52, 55, 58, 61, 62, 63, 64, 67, 68, 69, 70, 72, 75, 87, 89, 90, 91, 95, 98, 102, 104, 105, 108, 117, 120, 123, 125, 126, 128, 143, 147, 156, 171, 178, 181, 182, 183, 184, 185, 186, 188, 190, 192, 195, 197, 198, 199, 201, 202, 204, 206, 208, 211, 217, 221, 223, 224, 227, 228, 230, 231, 236, 237, 240, 242, 243, 244, 245, 250, 252, 253, 254, 256, 260, 263, 268, 277, 280, 283, 284, 288], "livehtml": 1, "simpli": [1, 3, 4, 7, 18, 19, 24, 25, 39, 44, 45, 61, 62, 64, 68, 72, 93, 95, 98, 102, 104, 105, 108, 113, 117, 126, 128, 140, 166, 171, 181, 192, 195, 201, 207, 208, 219, 220, 221, 226, 227, 230, 247, 249, 250, 263], "should": [1, 3, 5, 6, 7, 8, 10, 11, 12, 15, 18, 19, 20, 22, 29, 31, 34, 36, 38, 41, 42, 43, 44, 53, 54, 55, 56, 58, 61, 62, 63, 65, 66, 68, 70, 72, 73, 74, 75, 76, 77, 79, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 98, 102, 104, 105, 110, 112, 116, 121, 126, 128, 130, 138, 140, 141, 143, 144, 145, 156, 160, 164, 166, 168, 170, 171, 174, 176, 178, 179, 181, 182, 186, 191, 194, 195, 197, 198, 199, 200, 201, 202, 204, 206, 207, 210, 211, 213, 214, 217, 218, 219, 220, 221, 223, 224, 226, 227, 229, 230, 231, 235, 236, 240, 242, 243, 244, 245, 246, 247, 249, 250, 252, 256, 260, 277, 278, 280, 281, 284], "tab": [1, 10, 12, 58, 143], "show": [1, 3, 4, 6, 7, 12, 15, 16, 17, 18, 19, 20, 29, 43, 54, 61, 62, 66, 68, 85, 87, 89, 98, 102, 105, 106, 110, 116, 126, 132, 137, 141, 143, 171, 175, 179, 181, 186, 194, 195, 197, 198, 201, 202, 204, 206, 207, 211, 212, 214, 218, 219, 220, 221, 223, 224, 227, 229, 231, 232, 240, 243, 244, 247, 249, 250, 280, 282, 284, 287], "necessari": [1, 3, 4, 6, 8, 10, 12, 18, 20, 32, 41, 42, 53, 54, 62, 72, 87, 89, 92, 98, 102, 121, 128, 136, 197, 199, 201, 206, 207, 211, 214, 220, 223, 227, 228, 229, 230, 231, 232, 237, 242, 244, 249, 250, 256, 281, 286], "major": [1, 3, 4, 7, 10, 22, 31, 72, 116, 236, 282, 288], "contributor": [1, 3, 7, 10, 20], "action": [1, 3, 7, 53, 91, 168, 171, 181, 207, 223, 230], "pull": [1, 3, 4, 5, 6, 7, 9, 10, 20, 33, 43, 62, 67, 70, 175, 212, 223, 227, 230, 284, 288], "request": [1, 3, 4, 6, 7, 9, 10, 18, 22, 33, 41, 62, 66, 78, 87, 102, 126, 176, 204, 207, 235, 243], "releas": [1, 7, 10, 62, 89, 93, 104, 140, 197, 236, 247, 250, 283], "includ": [1, 3, 4, 6, 7, 9, 10, 11, 12, 18, 20, 22, 25, 26, 30, 33, 38, 39, 41, 42, 43, 54, 58, 61, 62, 63, 64, 66, 67, 68, 70, 74, 80, 87, 89, 92, 93, 95, 97, 98, 102, 103, 104, 114, 116, 125, 126, 128, 130, 131, 136, 138, 140, 143, 156, 160, 165, 170, 173, 174, 184, 192, 195, 199, 202, 203, 204, 206, 207, 210, 211, 212, 217, 218, 219, 221, 223, 226, 227, 228, 229, 231, 234, 237, 240, 242, 244, 245, 246, 247, 249, 256, 258, 260, 265, 267, 278, 282, 283, 284, 288, 289], "fail": [1, 3, 4, 6, 7, 10, 18, 19, 20, 22, 43, 53, 54, 58, 61, 62, 66, 68, 86, 87, 89, 90, 98, 99, 102, 104, 128, 166, 171, 191, 197, 200, 201, 202, 204, 206, 207, 211, 218, 221, 227, 229, 231, 240, 242, 249, 250, 284], "99": [1, 43, 62, 63, 98, 102, 204, 205], "due": [1, 6, 10, 16, 20, 28, 41, 43, 45, 52, 53, 62, 64, 79, 98, 102, 105, 108, 126, 128, 140, 149, 176, 192, 195, 201, 207, 211, 214, 224, 226, 228, 231, 247, 259, 265, 288], "bad": [1, 10, 61, 102, 178, 211], "math": [1, 3, 6, 20, 31, 35, 39, 42, 44, 53, 62, 67, 70, 72, 89, 98, 102, 103, 126, 136, 192, 197, 202, 205, 210, 211, 227, 228, 231, 243, 244, 250, 261, 262, 263, 264, 265, 277, 278, 282], "format": [1, 4, 8, 11, 14, 16, 26, 29, 30, 42, 54, 63, 84, 85, 89, 92, 98, 101, 102, 105, 125, 144, 149, 160, 170, 197, 200, 201, 206, 207, 209, 211, 221, 227, 230, 242, 252, 256, 260, 281, 284, 287], "doubl": [1, 6, 7, 29, 41, 43, 58, 62, 63, 67, 98, 104, 120, 135, 136, 194, 201, 211, 220, 221, 244, 288], "check": [1, 3, 4, 6, 7, 11, 12, 14, 15, 16, 18, 19, 20, 25, 29, 31, 37, 38, 41, 42, 43, 45, 48, 51, 53, 54, 55, 60, 61, 62, 63, 67, 70, 74, 85, 87, 91, 92, 93, 95, 98, 99, 102, 112, 117, 118, 126, 140, 143, 156, 164, 176, 178, 179, 184, 192, 197, 198, 200, 201, 202, 204, 206, 207, 213, 219, 221, 223, 227, 228, 229, 230, 231, 235, 236, 240, 242, 244, 247, 249, 259, 263, 280, 288], "ad": [1, 6, 7, 10, 18, 24, 26, 35, 42, 43, 46, 52, 53, 62, 63, 73, 77, 84, 87, 91, 102, 104, 108, 116, 117, 120, 126, 127, 143, 150, 178, 181, 187, 196, 197, 206, 208, 210, 211, 213, 221, 224, 227, 230, 231, 233, 236, 237, 242, 259, 280], "correctli": [1, 3, 4, 6, 7, 10, 19, 20, 41, 66, 87, 90, 98, 126, 128, 140, 211, 218, 224, 227], "backtick": [1, 6, 7], "code": [1, 6, 8, 9, 11, 16, 18, 19, 20, 25, 28, 29, 30, 31, 33, 34, 44, 49, 53, 56, 57, 62, 63, 64, 70, 74, 87, 89, 90, 98, 102, 103, 104, 117, 120, 126, 128, 134, 136, 137, 141, 143, 144, 170, 176, 185, 191, 194, 196, 197, 198, 199, 200, 201, 204, 210, 221, 223, 227, 229, 230, 231, 233, 236, 239, 240, 242, 243, 244, 247, 248, 249, 250, 260, 268, 275, 280, 282, 285, 287], "singl": [1, 4, 7, 10, 11, 16, 18, 20, 23, 29, 34, 35, 42, 43, 46, 53, 62, 63, 67, 68, 70, 75, 76, 78, 79, 80, 87, 89, 92, 93, 98, 101, 104, 112, 113, 118, 120, 130, 137, 156, 160, 162, 170, 173, 176, 183, 186, 190, 197, 198, 200, 201, 202, 204, 206, 207, 211, 212, 213, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 236, 242, 244, 246, 249, 250, 252, 278, 280, 283, 284, 289], "render": [1, 3, 6, 7, 43, 62, 90, 191, 197, 211, 250, 287], "resourc": [1, 6, 7, 20, 98, 205, 227, 243, 253], "style": [1, 8, 42, 62, 90, 170, 191, 197, 211, 230, 287], "guid": [1, 3, 8, 9, 11, 13, 20, 27, 33, 42, 62, 69, 126, 140, 211, 224, 226, 227, 229, 230, 237, 281, 285, 286, 289], "tip": [1, 6, 62, 140, 227, 228, 288], "few": [1, 3, 4, 10, 11, 18, 25, 31, 39, 52, 54, 62, 63, 89, 90, 102, 103, 128, 136, 179, 185, 191, 194, 195, 198, 206, 211, 219, 220, 221, 227, 230, 231, 244, 249, 288], "extra": [1, 10, 43, 45, 62, 63, 102, 103, 134, 181, 192, 204, 211, 221, 227, 242, 243, 244, 263], "xelatex": 1, "latexmk": 1, "chrome": 1, "chromium": 1, "On": [1, 10, 18, 38, 55, 62, 64, 70, 89, 92, 102, 126, 180, 181, 192, 201, 204, 205, 206, 207, 227, 229, 246, 250, 263, 265], "xetex": 1, "font": [1, 90, 191, 211], "lmodern": 1, "cask": 1, "tap": 1, "dejavu": 1, "strawberryperl": 1, "miktex": [1, 3], "dejavufont": 1, "appdata": 1, "right": [1, 4, 6, 7, 10, 12, 16, 20, 23, 24, 27, 29, 35, 41, 43, 44, 53, 54, 58, 62, 63, 65, 67, 68, 70, 78, 79, 87, 89, 92, 93, 98, 101, 102, 104, 105, 106, 112, 121, 125, 126, 140, 141, 143, 144, 148, 155, 160, 162, 164, 165, 170, 173, 176, 186, 192, 195, 196, 197, 198, 200, 206, 207, 208, 209, 211, 213, 214, 218, 219, 221, 227, 228, 230, 231, 242, 244, 246, 249, 263, 278, 282, 284, 288], "click": 1, "result": [1, 3, 6, 10, 11, 12, 14, 15, 16, 18, 19, 20, 31, 35, 36, 37, 38, 39, 41, 42, 43, 52, 53, 54, 58, 61, 62, 63, 64, 66, 68, 70, 74, 79, 80, 84, 86, 87, 89, 91, 92, 93, 95, 98, 101, 102, 103, 104, 105, 112, 113, 116, 117, 118, 122, 126, 130, 136, 140, 143, 161, 168, 170, 171, 173, 175, 176, 178, 179, 180, 181, 185, 186, 195, 197, 198, 201, 202, 204, 205, 206, 207, 208, 209, 211, 213, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 235, 236, 238, 242, 243, 244, 246, 247, 249, 250, 252, 256, 259, 261, 280, 282, 283, 284, 288], "version": [1, 3, 4, 5, 6, 7, 18, 19, 20, 31, 32, 33, 36, 42, 43, 53, 54, 60, 62, 63, 67, 68, 70, 89, 92, 94, 96, 98, 100, 102, 115, 117, 120, 126, 160, 174, 178, 186, 196, 197, 198, 201, 202, 204, 206, 207, 211, 214, 223, 229, 231, 241, 242, 244, 245, 246, 247, 249, 250, 254, 256, 262, 280, 283, 284], "where": [1, 4, 5, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 25, 26, 27, 29, 31, 34, 35, 39, 41, 42, 43, 44, 51, 52, 53, 54, 56, 58, 60, 61, 62, 63, 64, 66, 67, 68, 70, 72, 75, 77, 78, 79, 80, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 98, 102, 105, 108, 109, 112, 116, 120, 121, 122, 123, 125, 126, 128, 139, 140, 141, 143, 144, 150, 160, 165, 171, 173, 175, 176, 177, 178, 179, 186, 190, 192, 194, 195, 196, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 211, 212, 213, 214, 217, 218, 219, 220, 221, 223, 224, 227, 228, 229, 231, 232, 235, 237, 242, 243, 244, 245, 249, 250, 252, 256, 263, 265, 278, 280, 282, 284, 288, 289], "g": [1, 3, 4, 5, 7, 10, 12, 18, 19, 20, 28, 29, 31, 41, 42, 43, 44, 47, 50, 52, 53, 54, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 74, 78, 79, 80, 85, 88, 89, 91, 92, 93, 98, 102, 104, 105, 112, 113, 117, 120, 123, 125, 126, 128, 130, 131, 133, 134, 135, 140, 141, 143, 144, 156, 160, 165, 171, 173, 174, 176, 179, 181, 182, 186, 192, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 223, 224, 227, 228, 229, 230, 231, 232, 235, 236, 237, 242, 243, 244, 245, 247, 249, 250, 251, 252, 265, 268, 278, 283, 287, 288, 289], "1": [1, 3, 4, 7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 108, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 141, 143, 144, 145, 147, 148, 149, 150, 151, 155, 158, 159, 160, 161, 162, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 252, 256, 259, 260, 261, 263, 266, 273, 277, 278, 280, 282, 283, 284, 287, 288, 289], "dev": [1, 3, 4, 5, 247], "sympi": [2, 3, 4, 7, 8, 9, 11, 13, 14, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 261, 262, 264, 265, 266, 267, 271, 273, 274, 276, 278, 280, 281, 283, 284, 285, 286, 287, 288, 289], "sympy_debug": [2, 89, 252], "variabl": [2, 3, 6, 7, 10, 11, 14, 16, 19, 20, 22, 23, 25, 26, 28, 30, 34, 35, 36, 38, 39, 41, 43, 44, 57, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 79, 81, 87, 89, 90, 92, 93, 98, 104, 105, 106, 108, 110, 112, 125, 126, 133, 135, 143, 144, 150, 165, 170, 174, 176, 179, 185, 186, 188, 192, 199, 201, 202, 204, 206, 207, 208, 211, 212, 217, 218, 223, 224, 226, 227, 228, 229, 230, 238, 242, 244, 245, 246, 250, 256, 259, 260, 262, 263, 265, 278, 280, 282, 284, 289], "instanc": [2, 4, 6, 7, 10, 11, 15, 18, 19, 20, 36, 37, 38, 40, 42, 43, 45, 53, 55, 57, 62, 64, 66, 67, 68, 70, 75, 78, 79, 80, 85, 86, 89, 90, 93, 95, 98, 102, 104, 105, 113, 117, 121, 125, 126, 144, 149, 156, 160, 166, 170, 171, 173, 175, 176, 186, 188, 191, 192, 197, 201, 202, 206, 207, 208, 209, 211, 219, 221, 223, 227, 229, 230, 231, 235, 236, 237, 242, 243, 244, 246, 249, 250, 256, 258, 259, 260, 261, 263, 265, 277, 278, 283, 288, 289], "unix": [2, 242, 243], "would": [2, 4, 5, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 26, 28, 33, 42, 43, 44, 51, 53, 54, 61, 62, 63, 67, 68, 74, 78, 87, 89, 93, 98, 102, 104, 105, 112, 113, 114, 116, 118, 120, 126, 130, 140, 143, 171, 173, 176, 181, 185, 186, 192, 194, 197, 200, 201, 202, 204, 207, 208, 210, 211, 212, 214, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 233, 235, 236, 242, 244, 246, 249, 250, 252, 253, 261, 262, 263, 265, 277, 278, 280, 282, 283, 284, 287, 288, 289], "do": [2, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 54, 58, 61, 62, 63, 64, 65, 68, 70, 72, 74, 77, 78, 81, 87, 89, 90, 92, 93, 95, 96, 98, 99, 102, 103, 109, 112, 116, 120, 121, 123, 125, 126, 127, 129, 130, 134, 137, 138, 143, 148, 151, 156, 160, 165, 168, 170, 172, 178, 180, 181, 184, 185, 187, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 212, 214, 218, 219, 220, 221, 223, 224, 227, 228, 229, 233, 236, 237, 240, 242, 243, 245, 247, 249, 250, 252, 259, 261, 262, 263, 265, 277, 278, 280, 281, 282, 283, 284, 286, 288], "true": [2, 3, 6, 10, 11, 12, 14, 15, 18, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 87, 89, 90, 92, 93, 94, 95, 98, 99, 102, 104, 105, 106, 110, 112, 113, 114, 115, 116, 118, 120, 121, 122, 126, 128, 130, 143, 147, 148, 157, 160, 161, 168, 170, 171, 174, 175, 176, 179, 185, 186, 187, 188, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 240, 242, 243, 244, 245, 247, 249, 250, 252, 256, 259, 260, 261, 262, 263, 266, 277, 278, 280, 282, 283, 284, 287, 288, 289], "isympi": [2, 3, 11, 12, 90], "window": [2, 252], "just": [2, 4, 6, 7, 10, 11, 12, 18, 19, 20, 24, 26, 29, 33, 39, 42, 43, 53, 60, 62, 63, 64, 68, 85, 87, 89, 90, 91, 92, 98, 102, 103, 114, 116, 117, 123, 126, 130, 134, 140, 141, 143, 156, 161, 166, 176, 181, 185, 191, 192, 194, 198, 200, 201, 202, 204, 206, 210, 211, 218, 219, 220, 221, 223, 227, 230, 232, 240, 242, 244, 245, 247, 262, 263, 265, 277, 278, 280, 281, 282, 283, 284, 288, 289], "limit": [2, 4, 10, 12, 26, 27, 31, 33, 39, 41, 43, 61, 62, 64, 66, 67, 68, 70, 71, 74, 82, 84, 89, 90, 92, 98, 102, 110, 141, 165, 171, 174, 191, 197, 202, 204, 207, 208, 211, 214, 215, 217, 219, 223, 224, 226, 227, 228, 229, 231, 236, 243, 246, 249, 250, 252, 255, 256, 266, 268, 274, 279, 280, 282, 284], "function": [2, 3, 4, 7, 8, 11, 14, 15, 16, 18, 19, 21, 23, 25, 27, 30, 32, 36, 37, 38, 40, 41, 42, 44, 45, 53, 54, 57, 58, 60, 63, 64, 65, 66, 67, 71, 72, 73, 74, 79, 82, 83, 86, 88, 89, 90, 91, 93, 95, 97, 101, 103, 105, 107, 109, 110, 112, 113, 114, 118, 120, 123, 124, 125, 126, 129, 130, 131, 132, 136, 138, 139, 143, 148, 149, 150, 151, 155, 160, 161, 162, 165, 170, 171, 172, 173, 174, 175, 176, 179, 180, 185, 186, 189, 190, 191, 193, 195, 196, 198, 203, 204, 205, 206, 208, 209, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 225, 226, 229, 230, 231, 233, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 254, 255, 256, 257, 261, 262, 264, 265, 266, 267, 268, 271, 273, 274, 277, 278, 279, 280, 281, 282, 283, 284, 286, 289], "nice": [2, 4, 6, 33, 62, 74, 98, 102, 126, 140, 143, 197, 211, 221, 252, 283], "print": [2, 4, 6, 7, 11, 12, 16, 18, 19, 22, 25, 26, 28, 33, 36, 37, 38, 39, 41, 42, 44, 45, 46, 51, 53, 54, 61, 62, 63, 66, 67, 68, 70, 89, 91, 92, 95, 98, 99, 102, 103, 104, 105, 106, 112, 119, 121, 126, 128, 136, 142, 148, 156, 169, 170, 174, 176, 186, 189, 193, 195, 197, 200, 201, 202, 206, 207, 217, 218, 220, 221, 223, 227, 229, 236, 238, 242, 244, 249, 250, 252, 256, 260, 267, 273, 275, 278, 279, 280, 281, 282, 283, 284, 288], "tree": [2, 10, 11, 15, 53, 56, 62, 104, 118, 126, 168, 171, 186, 207, 218, 220, 223, 230, 233, 235, 246, 249, 252, 279], "veri": [2, 3, 4, 6, 10, 11, 12, 14, 15, 18, 20, 22, 43, 58, 62, 63, 66, 67, 72, 74, 80, 84, 87, 89, 92, 98, 102, 112, 116, 126, 130, 143, 148, 181, 194, 195, 198, 201, 204, 206, 207, 208, 210, 211, 212, 218, 219, 220, 221, 223, 224, 227, 229, 230, 231, 242, 243, 244, 250, 277, 280, 283, 288], "sever": [3, 4, 5, 6, 10, 11, 15, 18, 20, 22, 26, 33, 43, 47, 53, 54, 61, 62, 66, 67, 69, 70, 74, 87, 89, 102, 118, 137, 181, 183, 197, 199, 201, 204, 206, 210, 211, 212, 218, 219, 227, 231, 242, 244, 254, 267, 280, 284, 287], "instal": [3, 5, 7, 11, 12, 66, 103, 201, 202, 211, 243, 250, 281, 287], "enabl": [3, 7, 11, 20, 33, 62, 89, 90, 102, 106, 126, 128, 176, 186, 191, 211, 227, 231, 242, 247, 250, 284, 287, 288], "certain": [3, 7, 11, 20, 31, 33, 40, 42, 43, 45, 53, 60, 62, 66, 70, 78, 87, 89, 102, 104, 140, 186, 187, 198, 201, 204, 206, 211, 212, 218, 221, 223, 224, 227, 229, 230, 231, 233, 244, 245, 250, 256, 259, 265, 288], "most": [3, 4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 33, 36, 37, 38, 41, 42, 43, 44, 53, 54, 61, 62, 63, 66, 68, 72, 74, 89, 92, 93, 94, 95, 96, 98, 100, 101, 102, 103, 104, 112, 116, 120, 121, 126, 134, 137, 140, 141, 144, 178, 180, 185, 186, 190, 196, 197, 198, 199, 201, 202, 204, 206, 207, 208, 209, 210, 211, 218, 219, 221, 224, 227, 228, 229, 230, 231, 240, 243, 244, 245, 246, 247, 249, 250, 252, 259, 261, 277, 280, 282, 283, 284, 286, 287, 288], "mention": [3, 4, 6, 20, 22, 29, 53, 87, 89, 112, 128, 144, 145, 192, 221, 224, 227, 231, 260, 261, 262, 263, 284], "except": [3, 4, 6, 10, 11, 12, 16, 18, 19, 20, 27, 31, 41, 43, 53, 54, 62, 63, 66, 67, 68, 70, 87, 89, 102, 134, 180, 182, 196, 198, 200, 201, 202, 206, 207, 208, 209, 211, 220, 223, 224, 227, 228, 230, 235, 240, 242, 244, 245, 248, 249, 250, 260, 263, 275, 277, 280, 283, 284], "unless": [3, 6, 11, 18, 20, 36, 38, 41, 43, 53, 61, 62, 63, 67, 70, 77, 78, 87, 98, 101, 149, 194, 195, 199, 201, 206, 207, 211, 216, 219, 220, 227, 229, 242, 246, 249, 250, 252, 256, 265, 278, 284, 288], "thei": [3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 22, 27, 29, 30, 31, 33, 39, 42, 43, 44, 50, 52, 53, 54, 60, 61, 62, 63, 64, 67, 68, 70, 72, 75, 76, 77, 78, 79, 84, 87, 89, 90, 92, 93, 95, 96, 98, 101, 102, 104, 116, 120, 121, 123, 125, 126, 128, 134, 136, 138, 139, 140, 143, 144, 150, 155, 160, 165, 168, 173, 178, 179, 181, 182, 186, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 211, 212, 217, 218, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 233, 237, 240, 242, 244, 246, 249, 250, 252, 256, 263, 265, 278, 280, 281, 282, 283, 284, 288], "intend": [3, 4, 6, 10, 14, 18, 62, 63, 73, 82, 87, 102, 104, 118, 171, 201, 202, 206, 209, 224, 227, 228, 240, 245, 252, 277], "part": [3, 4, 6, 7, 10, 11, 18, 19, 20, 22, 35, 40, 53, 54, 61, 62, 63, 67, 68, 70, 78, 85, 87, 89, 92, 93, 95, 102, 112, 116, 117, 120, 121, 125, 126, 128, 134, 136, 137, 141, 143, 160, 172, 176, 185, 195, 199, 201, 202, 204, 206, 207, 208, 210, 211, 212, 219, 221, 223, 224, 227, 229, 242, 244, 246, 249, 278, 283, 288], "those": [3, 6, 10, 11, 12, 14, 18, 19, 22, 26, 30, 31, 34, 39, 42, 43, 44, 45, 53, 54, 60, 61, 62, 63, 66, 75, 76, 87, 89, 92, 98, 101, 102, 116, 120, 121, 128, 134, 137, 149, 173, 185, 188, 191, 194, 195, 197, 201, 202, 204, 206, 207, 209, 210, 211, 217, 219, 223, 227, 228, 229, 230, 231, 237, 240, 242, 246, 249, 256, 259, 280, 282, 288], "everi": [3, 4, 6, 11, 18, 20, 22, 26, 32, 37, 38, 39, 42, 48, 50, 53, 54, 62, 63, 77, 91, 93, 98, 102, 112, 141, 180, 192, 194, 195, 197, 198, 199, 201, 202, 204, 206, 211, 216, 219, 221, 223, 224, 227, 230, 231, 233, 260, 263, 265, 281, 283, 284, 288], "doe": [3, 6, 7, 8, 10, 11, 15, 18, 19, 20, 22, 23, 29, 30, 31, 32, 33, 34, 37, 38, 41, 42, 43, 44, 53, 54, 58, 60, 61, 62, 63, 64, 66, 68, 70, 72, 73, 76, 78, 87, 89, 92, 93, 98, 101, 102, 104, 114, 116, 118, 126, 128, 133, 137, 156, 160, 166, 170, 172, 175, 185, 194, 195, 197, 199, 200, 201, 202, 204, 206, 207, 208, 211, 218, 219, 220, 221, 223, 224, 226, 227, 229, 232, 236, 237, 240, 242, 244, 246, 249, 250, 252, 256, 258, 261, 277, 278, 280, 283, 284, 287, 288, 289], "themselv": [3, 7, 10, 20, 39, 42, 54, 58, 60, 62, 89, 102, 136, 137, 201, 202, 206, 217, 231, 237, 246, 249, 252, 288], "incomplet": [3, 6, 7, 62, 67, 70, 199, 201, 207, 211, 213, 229, 230], "main": [3, 5, 6, 7, 10, 12, 28, 38, 39, 43, 62, 68, 87, 93, 98, 101, 126, 134, 174, 191, 195, 197, 198, 202, 211, 218, 227, 230, 236, 243, 288, 289], "webpag": [3, 7], "complet": [3, 4, 6, 10, 11, 12, 18, 26, 29, 38, 43, 62, 63, 64, 66, 68, 69, 70, 78, 87, 89, 98, 102, 116, 121, 122, 130, 136, 143, 162, 165, 166, 195, 204, 206, 207, 208, 212, 218, 223, 224, 227, 230, 231, 242, 244, 252, 282, 283, 288], "io": [3, 7, 90, 211, 250], "one": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 38, 39, 41, 42, 43, 45, 46, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 70, 72, 73, 74, 75, 76, 78, 79, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 97, 98, 101, 102, 103, 104, 105, 106, 109, 110, 112, 113, 116, 117, 120, 121, 126, 127, 130, 140, 141, 143, 145, 148, 149, 150, 156, 161, 170, 174, 176, 178, 179, 180, 181, 184, 185, 186, 190, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 218, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 235, 237, 238, 242, 243, 244, 246, 249, 250, 252, 256, 261, 263, 265, 276, 277, 278, 280, 282, 283, 284, 286, 287, 288], "arbitrari": [3, 6, 10, 11, 12, 18, 20, 22, 26, 28, 30, 31, 41, 47, 54, 55, 61, 62, 63, 66, 67, 70, 73, 74, 76, 92, 93, 98, 106, 137, 141, 162, 165, 195, 197, 198, 201, 202, 204, 206, 208, 223, 227, 228, 229, 237, 247, 250, 256, 258, 277, 278, 283, 288, 289], "precis": [3, 4, 6, 11, 12, 18, 19, 20, 22, 26, 43, 53, 62, 65, 66, 67, 70, 78, 89, 98, 102, 110, 141, 196, 198, 201, 202, 206, 207, 208, 211, 218, 223, 224, 229, 230, 243, 244, 252, 277, 288], "arithmet": [3, 43, 62, 63, 66, 93, 98, 102, 165, 172, 196, 197, 198, 200, 201, 202, 204, 205, 209, 212], "hood": [3, 11], "whenev": [3, 4, 10, 11, 12, 20, 60, 87, 89, 98, 183, 197, 198, 199, 213, 218, 221, 231, 278, 280, 283], "calcul": [3, 12, 16, 18, 28, 29, 35, 41, 44, 54, 60, 62, 63, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 79, 89, 93, 95, 98, 102, 105, 106, 114, 116, 117, 120, 121, 125, 128, 129, 130, 145, 148, 149, 152, 155, 171, 172, 173, 174, 176, 177, 185, 186, 187, 188, 190, 192, 194, 195, 196, 197, 198, 200, 201, 202, 204, 206, 207, 208, 213, 218, 227, 231, 235, 243, 244, 250, 256, 259, 263, 265, 284, 287], "float": [3, 11, 18, 20, 24, 43, 53, 62, 68, 70, 77, 79, 89, 90, 93, 98, 102, 104, 110, 112, 143, 149, 191, 197, 201, 202, 211, 223, 229, 231, 242, 250, 252, 277, 280], "point": [3, 4, 6, 7, 11, 12, 16, 18, 26, 28, 29, 33, 35, 41, 43, 44, 53, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 84, 85, 86, 87, 89, 98, 102, 105, 106, 108, 110, 117, 120, 121, 122, 123, 125, 126, 128, 130, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 156, 178, 181, 187, 190, 192, 195, 197, 198, 201, 202, 204, 206, 207, 211, 213, 217, 218, 219, 227, 229, 230, 231, 243, 246, 249, 250, 252, 256, 259, 261, 262, 263, 265, 266, 274, 277, 278, 280, 283], "valu": [3, 4, 6, 7, 10, 11, 12, 16, 18, 20, 22, 25, 26, 27, 28, 29, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 53, 54, 58, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 84, 85, 87, 89, 90, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 114, 117, 120, 121, 122, 123, 125, 126, 128, 140, 143, 145, 149, 152, 155, 160, 162, 165, 168, 170, 171, 172, 173, 176, 177, 179, 181, 186, 187, 190, 192, 194, 195, 196, 197, 199, 200, 201, 202, 204, 206, 207, 208, 209, 211, 212, 217, 218, 219, 220, 223, 224, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 242, 244, 245, 249, 250, 252, 259, 261, 263, 266, 278, 280, 283], "evalf": [3, 6, 11, 12, 18, 22, 28, 31, 43, 61, 66, 67, 68, 70, 81, 84, 85, 93, 98, 104, 126, 128, 143, 158, 202, 207, 211, 218, 219, 223, 231, 243, 250, 279], "cannot": [3, 4, 6, 7, 10, 11, 12, 15, 19, 20, 22, 25, 28, 33, 36, 37, 38, 39, 40, 41, 43, 54, 59, 61, 62, 64, 66, 68, 72, 74, 75, 77, 79, 84, 89, 91, 94, 96, 98, 100, 102, 112, 171, 179, 181, 194, 195, 197, 202, 204, 206, 207, 208, 211, 218, 219, 223, 224, 226, 227, 229, 230, 231, 232, 240, 242, 243, 244, 249, 253, 256, 258, 282, 283, 284, 288, 289], "without": [3, 4, 6, 7, 10, 11, 12, 18, 20, 33, 37, 39, 40, 43, 61, 62, 63, 64, 66, 70, 87, 89, 90, 93, 95, 98, 112, 113, 120, 126, 132, 134, 139, 140, 176, 180, 181, 185, 186, 187, 194, 197, 200, 201, 204, 207, 211, 213, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 233, 236, 237, 240, 242, 243, 244, 247, 249, 250, 252, 259, 262, 284, 288], "import": [3, 4, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 266, 277, 278, 280, 282, 283, 284, 286, 287, 288, 289], "importerror": 3, "extern": [3, 33, 90, 104, 108, 110, 128, 136, 191, 201, 202, 212, 219, 223, 231, 242, 243], "doc": [3, 4, 6, 7, 8, 12, 32, 43, 53, 61, 62, 78, 90, 141, 178, 201, 203, 224, 227, 242, 243, 245, 247, 249, 256, 261, 274], "latest": [3, 5, 33, 42, 245, 247, 250], "mean": [3, 4, 6, 7, 10, 11, 12, 18, 19, 20, 22, 30, 39, 44, 54, 61, 62, 63, 64, 80, 87, 89, 90, 92, 93, 96, 98, 102, 105, 116, 137, 176, 178, 181, 186, 191, 194, 197, 198, 199, 201, 204, 206, 210, 211, 221, 223, 224, 226, 227, 229, 230, 231, 232, 233, 235, 236, 242, 249, 261, 277, 278, 280, 282, 283, 284, 288, 289], "did": [3, 7, 19, 62, 89, 102, 116, 133, 181, 204, 208, 219, 229, 240, 250, 280, 282, 288], "explain": [3, 4, 6, 7, 18, 22, 31, 42, 58, 62, 70, 80, 85, 198, 201, 204, 206, 208, 218], "ones": [3, 4, 10, 20, 33, 43, 53, 58, 62, 87, 89, 92, 93, 95, 98, 101, 102, 126, 149, 170, 176, 180, 200, 204, 214, 224, 227, 232, 238, 244, 252, 256, 261, 284, 287], "typic": [3, 4, 10, 11, 20, 58, 68, 87, 102, 112, 117, 123, 127, 185, 195, 197, 199, 204, 208, 221, 243, 244, 261], "directli": [3, 4, 6, 10, 11, 12, 16, 18, 19, 20, 22, 33, 37, 38, 41, 42, 43, 53, 61, 62, 64, 68, 73, 93, 95, 98, 102, 126, 162, 174, 179, 186, 190, 197, 198, 200, 201, 202, 206, 207, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 242, 243, 244, 245, 246, 247, 278, 289], "git": [3, 8], "repositori": [3, 5, 7, 33, 224], "vast": [3, 31, 89, 203], "wrap": [3, 4, 6, 36, 37, 38, 39, 43, 51, 62, 68, 90, 103, 191, 195, 197, 200, 201, 204, 211, 214, 230, 236, 243, 247, 250, 252, 283], "addition": [3, 6, 10, 62, 138, 174, 195, 204, 211, 231, 240, 247, 260], "ci": [3, 7, 70, 87, 211, 287], "wish": [3, 6, 12, 20, 29, 33, 43, 62, 63, 66, 87, 102, 171, 185, 195, 246, 250, 278, 282, 284, 289], "local": [3, 34, 36, 37, 38, 62, 64, 87, 104, 133, 135, 188, 198, 204, 229, 242], "improv": [3, 4, 10, 19, 20, 62, 87, 197, 201, 204, 205, 207, 208, 210, 212, 227, 230, 236, 278, 284], "perform": [3, 10, 11, 12, 15, 16, 18, 20, 40, 42, 43, 44, 53, 54, 57, 61, 62, 63, 65, 66, 68, 75, 79, 86, 89, 96, 98, 102, 103, 118, 121, 128, 130, 136, 140, 141, 143, 160, 161, 170, 173, 176, 192, 195, 199, 200, 201, 204, 206, 207, 212, 213, 214, 218, 223, 224, 227, 229, 230, 231, 232, 243, 249, 256, 258, 260, 263, 277, 278, 282, 283, 288], "gmpy2": [3, 201, 202], "wrapper": [3, 10, 11, 20, 37, 39, 43, 54, 62, 70, 98, 140, 188, 191, 200, 201, 204, 211, 218, 227, 230, 231, 243, 247, 249], "gmp": 3, "multipl": [3, 4, 6, 10, 11, 12, 14, 18, 20, 24, 26, 30, 31, 35, 37, 38, 39, 41, 42, 43, 44, 51, 53, 54, 58, 61, 62, 63, 67, 68, 70, 72, 77, 80, 82, 87, 89, 91, 92, 93, 95, 98, 99, 102, 104, 109, 112, 116, 128, 136, 143, 144, 160, 161, 162, 166, 173, 175, 178, 181, 182, 183, 186, 190, 194, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 211, 216, 217, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 235, 237, 240, 244, 245, 246, 247, 249, 250, 252, 256, 261, 277, 278, 280, 281, 283, 284, 289], "larg": [3, 4, 6, 12, 18, 22, 27, 53, 54, 62, 63, 72, 87, 89, 101, 102, 116, 122, 140, 143, 156, 181, 185, 196, 201, 202, 204, 207, 210, 211, 212, 218, 221, 223, 231, 236, 243, 250, 252, 259, 277, 282, 288], "integ": [3, 6, 7, 10, 11, 12, 18, 20, 24, 25, 26, 36, 37, 38, 39, 41, 43, 44, 51, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 70, 72, 75, 86, 87, 89, 90, 91, 92, 93, 95, 98, 99, 102, 104, 105, 112, 114, 120, 165, 170, 172, 173, 174, 176, 178, 186, 188, 191, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 210, 211, 213, 216, 217, 218, 219, 220, 221, 223, 224, 227, 229, 230, 231, 235, 236, 237, 243, 244, 246, 249, 252, 278, 280, 283, 287, 288], "faster": [3, 18, 22, 27, 28, 43, 47, 62, 70, 93, 102, 103, 116, 118, 121, 122, 140, 200, 201, 202, 204, 206, 207, 208, 212, 214, 218, 223, 224, 227, 228, 230, 243, 246], "int": [3, 6, 7, 10, 11, 12, 18, 19, 20, 35, 41, 43, 54, 62, 63, 64, 67, 68, 70, 71, 78, 87, 89, 90, 92, 93, 98, 99, 102, 104, 110, 112, 120, 156, 160, 161, 170, 186, 188, 190, 191, 196, 197, 201, 202, 206, 207, 208, 211, 213, 214, 216, 227, 228, 231, 243, 247, 249, 250, 252, 280, 282, 283, 287, 288], "core": [3, 4, 5, 6, 11, 12, 15, 18, 19, 20, 24, 39, 41, 43, 53, 63, 68, 69, 71, 79, 87, 93, 102, 104, 174, 175, 199, 201, 202, 203, 204, 206, 207, 208, 211, 218, 219, 223, 224, 227, 231, 241, 242, 243, 249, 250, 254, 267, 268, 280, 283], "oper": [3, 5, 6, 11, 18, 19, 20, 27, 28, 29, 31, 35, 39, 43, 53, 54, 55, 61, 62, 63, 64, 65, 66, 68, 70, 72, 80, 82, 85, 87, 92, 93, 95, 102, 104, 112, 113, 116, 121, 122, 130, 134, 140, 143, 148, 152, 153, 157, 159, 160, 161, 162, 167, 168, 171, 173, 174, 175, 176, 185, 186, 188, 193, 198, 199, 200, 201, 202, 204, 206, 207, 208, 211, 214, 216, 219, 220, 223, 226, 227, 229, 230, 233, 234, 235, 236, 242, 243, 246, 249, 250, 256, 267, 271, 273, 274, 279, 280, 281, 283, 288], "poli": [3, 11, 22, 45, 61, 62, 63, 67, 68, 70, 71, 78, 84, 89, 93, 95, 98, 102, 143, 198, 199, 203, 204, 206, 207, 208, 210, 213, 226, 227, 229, 230, 242, 274], "refer": [3, 4, 5, 7, 10, 11, 12, 16, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 33, 37, 38, 39, 41, 43, 46, 48, 50, 51, 53, 54, 55, 56, 60, 63, 65, 67, 68, 70, 72, 77, 78, 79, 84, 90, 91, 92, 93, 99, 103, 105, 110, 112, 113, 115, 117, 120, 121, 123, 125, 126, 128, 136, 138, 141, 143, 144, 145, 147, 149, 153, 155, 157, 158, 159, 162, 164, 165, 173, 174, 176, 185, 186, 187, 188, 190, 192, 194, 200, 201, 203, 211, 213, 214, 216, 219, 223, 226, 227, 228, 229, 231, 237, 246, 249, 250, 252, 256, 260, 261, 265, 273, 274, 280, 284, 285, 288, 289], "domain": [3, 6, 10, 11, 16, 20, 22, 27, 41, 42, 62, 63, 65, 67, 68, 70, 81, 83, 84, 87, 89, 95, 98, 99, 102, 109, 112, 126, 143, 198, 200, 203, 204, 206, 208, 209, 226, 227, 229, 231, 274, 284, 289], "No": [3, 6, 7, 12, 31, 42, 62, 70, 77, 92, 102, 105, 113, 126, 171, 197, 207, 213, 214, 223, 224, 229, 230, 231, 236, 240, 246, 247, 249, 277, 289], "mani": [3, 4, 6, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 26, 28, 29, 31, 33, 41, 42, 43, 44, 50, 53, 58, 62, 63, 64, 66, 68, 70, 74, 87, 89, 92, 93, 98, 102, 103, 121, 122, 126, 128, 136, 139, 140, 143, 160, 176, 184, 195, 198, 200, 201, 202, 204, 206, 215, 218, 219, 221, 223, 224, 227, 228, 229, 230, 231, 235, 244, 249, 277, 278, 280, 281, 282, 283, 287, 288, 289], "integr": [3, 11, 12, 15, 23, 33, 35, 41, 54, 61, 62, 64, 67, 68, 80, 81, 82, 85, 91, 93, 98, 101, 102, 112, 114, 121, 126, 136, 143, 162, 171, 174, 177, 180, 185, 187, 192, 196, 198, 201, 202, 204, 207, 208, 211, 213, 214, 221, 227, 228, 231, 244, 252, 256, 259, 260, 263, 264, 268, 271, 279, 282, 287], "algorithm": [3, 6, 11, 18, 22, 26, 28, 30, 31, 41, 46, 47, 52, 53, 54, 56, 58, 60, 61, 62, 63, 66, 67, 68, 74, 79, 87, 89, 92, 95, 98, 99, 102, 105, 113, 120, 140, 163, 181, 186, 196, 197, 198, 199, 200, 201, 202, 205, 206, 208, 212, 216, 219, 220, 223, 224, 227, 229, 230, 231, 237, 246, 249, 273, 278, 283, 284, 288], "simplif": [3, 11, 12, 18, 36, 38, 40, 41, 43, 62, 64, 67, 68, 87, 93, 98, 104, 118, 126, 140, 143, 160, 176, 186, 207, 212, 222, 223, 227, 229, 230, 267, 268, 277, 279, 281, 282], "factor": [3, 11, 12, 44, 53, 54, 61, 62, 63, 66, 67, 68, 70, 87, 89, 98, 102, 105, 112, 143, 145, 153, 157, 160, 172, 176, 180, 181, 182, 183, 198, 201, 202, 203, 205, 206, 207, 214, 220, 221, 223, 224, 227, 229, 231, 235, 246, 260, 263, 282, 284], "matric": [3, 6, 11, 17, 18, 39, 43, 62, 63, 89, 99, 101, 112, 120, 121, 122, 126, 130, 140, 143, 145, 148, 149, 151, 159, 160, 170, 175, 186, 195, 196, 200, 206, 211, 212, 219, 221, 223, 224, 227, 229, 230, 232, 244, 245, 273, 279, 281, 282], "thu": [3, 4, 10, 11, 12, 16, 24, 26, 27, 29, 39, 47, 53, 54, 62, 63, 64, 68, 70, 85, 87, 89, 93, 96, 98, 101, 102, 113, 125, 130, 136, 140, 181, 186, 199, 204, 206, 208, 212, 218, 221, 223, 244, 249, 250, 261, 262, 280, 283, 288, 289], "speed": [3, 6, 10, 38, 43, 53, 62, 63, 66, 93, 102, 103, 114, 120, 121, 122, 125, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 143, 144, 147, 150, 180, 185, 186, 190, 195, 196, 208, 211, 212, 218, 223, 227, 243, 246, 249, 283, 284], "non": [3, 4, 11, 12, 18, 20, 22, 28, 29, 31, 34, 39, 41, 44, 52, 55, 61, 62, 63, 67, 68, 69, 70, 71, 72, 75, 76, 77, 89, 91, 92, 93, 94, 95, 98, 99, 101, 116, 121, 123, 128, 130, 134, 138, 139, 143, 160, 165, 175, 176, 178, 192, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 214, 218, 219, 221, 223, 224, 226, 227, 229, 230, 231, 232, 235, 236, 237, 242, 244, 249, 252, 263, 283, 288, 289], "who": [3, 4, 6, 16, 20, 63, 64, 143, 195, 204, 211, 281], "abl": [3, 4, 6, 11, 16, 18, 20, 25, 29, 42, 43, 53, 58, 62, 63, 64, 73, 81, 89, 95, 98, 102, 109, 126, 138, 140, 141, 143, 144, 198, 201, 202, 208, 227, 230, 242, 260, 282, 287, 289], "experi": [3, 128, 230, 231], "design": [3, 4, 6, 10, 11, 13, 15, 19, 20, 23, 28, 32, 39, 44, 52, 62, 98, 101, 104, 143, 144, 201, 205, 211, 216, 221, 227, 230, 282, 283, 287], "interfac": [3, 7, 11, 26, 41, 62, 90, 120, 145, 171, 191, 195, 201, 204, 209, 230, 243, 244], "ipython": [3, 6, 11, 12, 33, 90, 143, 191, 250, 255, 286, 287], "jupyt": [3, 11, 20, 250], "notebook": [3, 11, 20, 33, 90, 191, 250, 286, 287], "init_sess": [3, 90, 287], "usual": [3, 10, 11, 12, 16, 18, 22, 42, 44, 53, 61, 62, 63, 80, 87, 89, 98, 136, 162, 174, 180, 181, 192, 194, 195, 198, 199, 201, 202, 204, 210, 211, 212, 218, 221, 227, 230, 231, 232, 236, 237, 244, 246, 250, 256, 265, 277, 280, 283, 287, 288], "flag": [3, 4, 14, 20, 22, 41, 43, 53, 54, 58, 60, 62, 77, 89, 92, 93, 94, 98, 102, 120, 126, 160, 197, 202, 204, 207, 208, 211, 212, 213, 219, 223, 224, 227, 229, 230, 237, 242, 243, 249, 252, 277, 288], "auto_symbol": [3, 90, 104], "auto_int_to_integ": [3, 90], "qt": 3, "consol": [3, 4, 12, 62, 90, 191, 197, 287], "express": [3, 4, 6, 7, 11, 14, 15, 18, 19, 20, 23, 24, 27, 29, 31, 35, 36, 37, 38, 39, 40, 41, 54, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 75, 77, 78, 85, 86, 87, 89, 90, 93, 96, 97, 98, 101, 102, 103, 105, 112, 113, 115, 116, 117, 119, 120, 122, 123, 126, 130, 136, 137, 138, 139, 140, 141, 143, 144, 151, 155, 159, 160, 164, 165, 168, 171, 173, 174, 175, 176, 178, 179, 180, 181, 183, 185, 186, 188, 190, 191, 192, 195, 196, 197, 198, 199, 202, 204, 206, 207, 208, 211, 212, 214, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 243, 244, 245, 246, 247, 250, 252, 256, 258, 259, 260, 262, 263, 265, 271, 273, 278, 279, 280, 281, 282, 284, 287, 288, 289], "mathjax": [3, 7, 90, 191, 287], "preview": [3, 42, 245], "save": [3, 11, 41, 62, 98, 102, 197, 210, 229, 246], "viewer": [3, 7, 42, 211, 245], "parser": [3, 95, 104, 136, 143, 242, 273], "modul": [3, 4, 5, 6, 7, 11, 12, 15, 18, 25, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 52, 54, 62, 63, 65, 67, 68, 70, 74, 78, 82, 85, 88, 89, 90, 92, 95, 96, 97, 98, 103, 104, 105, 107, 108, 110, 113, 116, 126, 127, 132, 136, 138, 139, 143, 145, 148, 150, 151, 163, 166, 179, 180, 181, 182, 192, 195, 197, 202, 203, 205, 208, 209, 211, 215, 218, 221, 225, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 259, 261, 263, 264, 265, 266, 267, 273, 274, 275, 277, 280, 282, 288, 289], "parse_expr": [3, 10, 18, 31, 104], "mathematca": 3, "parse_mathematica": [3, 10, 104], "maxima": [3, 26, 104, 230], "parse_maxima": [3, 104], "antlr": [3, 104, 126], "runtim": [3, 11, 43, 62, 122, 250], "autolev": [3, 128, 136, 273], "call": [3, 4, 6, 7, 11, 12, 15, 16, 18, 19, 20, 22, 23, 26, 27, 28, 29, 30, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 60, 62, 63, 65, 66, 67, 69, 70, 72, 77, 78, 80, 85, 87, 89, 91, 92, 93, 94, 95, 96, 98, 100, 101, 102, 104, 105, 106, 112, 116, 120, 126, 128, 130, 137, 140, 141, 166, 168, 171, 176, 180, 181, 186, 192, 194, 195, 196, 197, 198, 199, 201, 202, 204, 206, 207, 208, 209, 210, 211, 213, 218, 219, 221, 223, 224, 226, 227, 229, 230, 231, 232, 233, 235, 237, 238, 240, 242, 243, 244, 245, 246, 247, 249, 250, 252, 256, 259, 260, 263, 265, 278, 280, 282, 283, 284, 287, 288, 289], "antlr4": [3, 104], "awar": [3, 4, 6, 11, 12, 19, 41, 62, 66, 92, 98, 221, 231, 250], "must": [3, 4, 5, 6, 10, 11, 12, 18, 19, 29, 35, 36, 37, 38, 43, 53, 54, 56, 58, 60, 61, 62, 63, 64, 67, 68, 70, 72, 75, 78, 81, 84, 85, 87, 89, 92, 93, 94, 95, 98, 101, 102, 105, 106, 108, 110, 112, 113, 120, 121, 122, 126, 128, 136, 138, 139, 140, 141, 143, 156, 171, 173, 176, 185, 186, 195, 196, 197, 198, 199, 200, 202, 204, 206, 207, 211, 212, 219, 220, 221, 223, 224, 227, 229, 230, 231, 235, 236, 242, 243, 244, 245, 246, 247, 249, 250, 253, 280, 282, 283, 287, 288], "match": [3, 4, 6, 10, 12, 18, 20, 29, 53, 54, 61, 62, 70, 75, 87, 89, 93, 98, 120, 125, 152, 177, 185, 186, 200, 207, 223, 224, 227, 228, 229, 231, 240, 242, 244, 249, 250, 262, 278], "wa": [3, 4, 10, 12, 14, 18, 20, 29, 45, 51, 53, 54, 56, 62, 63, 64, 70, 75, 98, 102, 104, 116, 117, 126, 128, 130, 140, 141, 171, 181, 194, 195, 196, 198, 204, 206, 207, 208, 210, 211, 220, 221, 223, 227, 229, 231, 240, 242, 245, 247, 249, 250, 278, 280, 282, 283, 286], "compil": [3, 43, 90, 103, 116, 143, 191, 211, 223, 236, 242, 243, 244, 267, 282], "4": [3, 7, 12, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 35, 36, 38, 39, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 84, 85, 87, 89, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 104, 105, 108, 110, 112, 113, 114, 118, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 140, 141, 143, 144, 145, 148, 152, 155, 160, 170, 171, 173, 174, 175, 176, 177, 179, 185, 186, 187, 190, 192, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 242, 243, 246, 249, 250, 256, 259, 260, 261, 263, 265, 266, 277, 278, 280, 282, 283, 284, 288, 289], "clang": [3, 104], "bind": [3, 43, 211, 243], "parse_c": 3, "lfortran": [3, 104], "fortran": [3, 11, 16, 20, 41, 103, 104, 116, 143, 196, 244, 287], "satisfi": [3, 7, 10, 18, 25, 26, 30, 38, 39, 41, 44, 50, 53, 58, 62, 63, 67, 70, 72, 85, 87, 91, 92, 98, 102, 122, 140, 160, 165, 198, 199, 202, 204, 206, 207, 211, 217, 218, 219, 224, 227, 228, 229, 230, 231, 237, 283, 288], "implement": [3, 6, 7, 10, 11, 13, 15, 19, 20, 26, 28, 30, 31, 32, 35, 36, 37, 38, 41, 42, 43, 44, 47, 52, 53, 54, 59, 62, 63, 65, 67, 68, 70, 73, 75, 82, 83, 85, 86, 89, 92, 93, 94, 98, 102, 103, 104, 116, 126, 136, 145, 147, 148, 151, 160, 161, 169, 170, 172, 180, 185, 187, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 215, 218, 219, 220, 223, 224, 227, 228, 229, 230, 231, 235, 236, 246, 249, 250, 253, 264, 267, 271, 278, 282, 288], "dpll": 3, "But": [3, 4, 7, 10, 11, 12, 20, 22, 31, 61, 62, 70, 76, 86, 93, 98, 102, 164, 165, 176, 181, 186, 198, 199, 204, 208, 218, 220, 221, 223, 224, 227, 229, 230, 236, 246, 249, 250, 259, 278, 280, 282, 283, 288], "sat": [3, 37], "solver": [3, 6, 11, 25, 28, 37, 70, 98, 102, 125, 136, 143, 144, 200, 203, 211, 223, 224, 228, 242, 267, 268, 274, 279, 281], "ask": [3, 6, 11, 12, 15, 18, 19, 37, 38, 39, 40, 62, 74, 87, 126, 181, 198, 217, 223, 230, 249, 268, 280], "pycosat": 3, "forc": [3, 12, 16, 19, 20, 62, 66, 68, 72, 78, 87, 89, 92, 105, 106, 108, 117, 120, 121, 125, 128, 130, 131, 132, 133, 136, 138, 139, 140, 143, 164, 165, 179, 192, 195, 197, 199, 201, 220, 223, 224, 229, 242, 263, 265, 273, 287, 288], "pysat": 3, "minisat": 3, "minisat22": 3, "heavi": [3, 231, 283], "primarili": [3, 11, 18, 43, 62, 68, 102, 105, 175, 207, 209, 243, 246, 252, 260], "support": [3, 4, 5, 6, 7, 10, 11, 12, 20, 28, 33, 35, 36, 37, 38, 41, 42, 43, 54, 62, 66, 69, 70, 72, 86, 89, 95, 98, 102, 103, 104, 105, 106, 108, 109, 112, 116, 120, 126, 143, 171, 186, 194, 197, 199, 200, 201, 202, 204, 206, 207, 208, 211, 216, 217, 218, 219, 223, 227, 228, 229, 230, 231, 232, 236, 240, 242, 243, 244, 250, 261, 263, 278, 280, 283, 287], "give": [3, 4, 6, 12, 14, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 35, 36, 38, 43, 44, 51, 53, 54, 55, 56, 61, 62, 63, 64, 67, 68, 70, 72, 74, 75, 77, 78, 86, 87, 89, 90, 92, 95, 98, 101, 102, 103, 105, 108, 112, 120, 126, 143, 155, 170, 171, 173, 174, 178, 179, 181, 182, 184, 186, 190, 192, 194, 195, 196, 197, 198, 199, 201, 202, 204, 206, 207, 208, 211, 212, 213, 214, 218, 219, 220, 221, 223, 224, 227, 229, 230, 231, 242, 243, 244, 249, 260, 265, 280, 281, 283, 288, 289], "rudimentari": [3, 20, 204], "text": [3, 4, 6, 7, 11, 20, 33, 43, 53, 63, 67, 68, 70, 80, 87, 90, 93, 98, 102, 141, 181, 191, 196, 197, 198, 211, 218, 224, 227, 230, 231, 242], "pyglet": [3, 211], "pygletplot": [3, 197], "2d": [3, 75, 76, 78, 105, 106, 108, 154, 186, 197, 211, 224, 236, 282], "3d": [3, 35, 46, 75, 76, 105, 154, 177, 192, 197, 260, 262, 263, 264, 265], "evalu": [3, 6, 11, 16, 18, 19, 23, 29, 31, 35, 36, 37, 38, 41, 43, 62, 64, 67, 68, 70, 73, 77, 78, 87, 89, 92, 95, 98, 102, 103, 104, 112, 116, 118, 126, 140, 141, 151, 153, 155, 157, 162, 165, 173, 176, 196, 197, 201, 202, 204, 205, 207, 211, 212, 217, 218, 219, 221, 223, 224, 227, 229, 230, 231, 232, 233, 243, 244, 245, 250, 263, 268, 277, 278, 279, 280, 282, 284], "numer": [3, 6, 10, 11, 12, 14, 16, 18, 23, 24, 25, 26, 27, 30, 35, 39, 41, 43, 61, 62, 67, 70, 74, 78, 85, 98, 102, 104, 108, 109, 110, 112, 120, 121, 122, 126, 128, 136, 140, 144, 148, 155, 158, 173, 185, 195, 197, 201, 202, 204, 205, 206, 207, 210, 211, 220, 221, 223, 227, 229, 230, 236, 242, 243, 249, 250, 268, 277, 280, 284, 288], "variou": [3, 6, 7, 11, 16, 20, 22, 25, 41, 43, 45, 46, 53, 61, 62, 67, 82, 87, 89, 92, 98, 123, 155, 159, 160, 171, 173, 185, 198, 199, 202, 203, 204, 206, 212, 218, 221, 224, 227, 228, 230, 244, 288], "primari": [3, 4, 6, 7, 18, 20, 62, 74, 92, 195, 198, 244, 250], "vehicl": 3, "between": [3, 4, 11, 15, 19, 20, 22, 26, 42, 43, 52, 53, 54, 56, 60, 62, 64, 67, 70, 72, 74, 75, 76, 77, 78, 79, 89, 91, 92, 95, 96, 98, 102, 103, 104, 108, 109, 110, 112, 120, 123, 125, 126, 129, 133, 135, 137, 140, 141, 143, 144, 145, 148, 149, 155, 162, 164, 165, 166, 170, 173, 174, 175, 176, 179, 180, 181, 186, 187, 188, 190, 192, 194, 195, 197, 198, 200, 204, 206, 207, 211, 213, 223, 227, 228, 229, 230, 231, 232, 245, 250, 256, 259, 260, 263, 265, 280], "standard": [3, 7, 10, 11, 12, 18, 20, 22, 26, 27, 29, 31, 43, 62, 66, 68, 70, 85, 87, 89, 90, 91, 92, 96, 98, 102, 103, 104, 115, 153, 157, 186, 192, 196, 198, 201, 202, 204, 211, 214, 219, 223, 224, 227, 230, 231, 233, 244, 250, 253, 260, 265, 277, 280, 288], "wai": [3, 4, 5, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 20, 22, 24, 26, 29, 34, 42, 44, 45, 46, 51, 53, 54, 55, 58, 62, 64, 67, 70, 78, 82, 86, 87, 89, 91, 95, 98, 101, 102, 104, 105, 108, 116, 121, 123, 125, 126, 130, 132, 133, 136, 140, 156, 170, 173, 174, 179, 181, 184, 185, 186, 188, 190, 192, 194, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 218, 221, 223, 224, 227, 228, 230, 232, 233, 236, 237, 240, 244, 246, 249, 250, 253, 256, 260, 261, 262, 263, 265, 277, 278, 280, 281, 282, 283, 288, 289], "principl": [3, 63, 93, 102, 147, 196, 198, 199, 204, 220, 229], "pass": [3, 4, 5, 6, 11, 12, 14, 15, 18, 19, 20, 24, 25, 28, 29, 31, 34, 35, 38, 41, 42, 43, 53, 54, 62, 63, 64, 66, 68, 69, 70, 72, 75, 76, 78, 89, 90, 92, 93, 95, 98, 99, 102, 104, 105, 110, 112, 117, 125, 126, 130, 143, 144, 148, 165, 166, 170, 171, 173, 174, 186, 191, 197, 198, 200, 201, 202, 204, 206, 207, 209, 211, 212, 218, 219, 223, 224, 227, 228, 229, 230, 231, 232, 235, 236, 237, 240, 242, 243, 244, 245, 247, 249, 250, 252, 255, 256, 277, 278, 283, 287, 288, 289], "appropri": [3, 6, 7, 10, 12, 16, 26, 30, 53, 62, 68, 77, 98, 116, 128, 165, 166, 176, 186, 194, 200, 201, 207, 208, 211, 217, 218, 223, 224, 229, 231, 236, 244, 261, 287], "namespac": [3, 6, 10, 34, 43, 44, 62, 202, 224, 227, 228, 242, 244, 245, 250], "dictionari": [3, 10, 11, 25, 29, 31, 42, 43, 51, 53, 54, 60, 62, 67, 76, 78, 91, 93, 98, 101, 102, 104, 105, 118, 121, 122, 125, 126, 128, 130, 133, 138, 140, 166, 176, 186, 195, 197, 199, 202, 204, 206, 207, 209, 211, 218, 223, 224, 227, 228, 229, 230, 231, 235, 237, 242, 246, 249, 250, 256, 277, 284], "third": [3, 4, 14, 22, 35, 43, 53, 54, 62, 70, 72, 76, 98, 112, 120, 173, 179, 180, 194, 199, 207, 221, 227, 230, 231, 233, 247, 249, 278, 283], "argument": [3, 4, 5, 6, 11, 15, 18, 19, 20, 22, 24, 28, 29, 30, 31, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 53, 54, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 75, 78, 79, 87, 89, 90, 92, 93, 95, 98, 101, 102, 104, 105, 110, 112, 120, 121, 125, 126, 138, 139, 143, 150, 153, 157, 159, 162, 165, 170, 171, 173, 174, 175, 176, 184, 191, 192, 196, 197, 198, 199, 201, 202, 204, 206, 207, 210, 211, 212, 213, 217, 218, 219, 220, 221, 223, 224, 227, 228, 229, 231, 233, 235, 236, 242, 243, 244, 245, 246, 247, 249, 250, 252, 260, 261, 263, 277, 278, 283, 284, 288], "default": [3, 4, 6, 7, 10, 11, 12, 18, 20, 22, 26, 27, 29, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 52, 53, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 84, 89, 90, 92, 93, 95, 98, 99, 102, 103, 104, 105, 106, 108, 110, 112, 114, 116, 117, 118, 120, 121, 122, 126, 140, 149, 166, 168, 171, 173, 174, 176, 180, 182, 185, 186, 188, 190, 191, 196, 197, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 212, 213, 214, 218, 219, 220, 223, 224, 227, 228, 229, 230, 231, 236, 237, 242, 243, 244, 246, 247, 249, 250, 252, 256, 277, 278, 282, 284, 287, 288], "translat": [3, 10, 43, 53, 62, 71, 73, 77, 79, 103, 104, 112, 115, 120, 121, 133, 135, 137, 141, 194, 197, 211, 227, 229, 243, 244, 250, 252, 261], "numpi": [3, 6, 10, 11, 20, 22, 27, 28, 29, 33, 43, 62, 85, 90, 103, 110, 126, 143, 160, 170, 200, 211, 231, 236, 243, 244, 250, 277, 280], "By": [3, 12, 18, 20, 22, 26, 27, 29, 35, 36, 38, 43, 52, 61, 62, 64, 66, 67, 70, 76, 77, 81, 85, 87, 92, 93, 98, 101, 102, 103, 104, 105, 106, 110, 117, 171, 176, 197, 199, 201, 202, 204, 206, 207, 208, 210, 211, 213, 218, 220, 223, 224, 227, 229, 230, 231, 235, 237, 238, 242, 245, 249, 250, 263, 277, 282, 283, 288], "produc": [3, 6, 7, 11, 19, 20, 25, 27, 28, 29, 31, 42, 53, 62, 63, 75, 89, 92, 98, 186, 200, 201, 206, 207, 211, 218, 227, 228, 229, 231, 240, 242, 246, 247, 249, 250, 287], "behavior": [3, 4, 10, 11, 12, 20, 53, 62, 67, 70, 89, 104, 115, 116, 136, 140, 171, 198, 199, 206, 207, 211, 212, 216, 218, 220, 223, 240, 243, 245, 249, 250, 280], "backward": [3, 8, 16, 41, 62, 93, 98, 112, 211, 249, 288], "scipi": [3, 11, 22, 24, 27, 70, 116, 143, 170, 211, 231, 250, 277, 286], "special": [3, 6, 11, 13, 18, 20, 27, 31, 34, 35, 45, 54, 62, 63, 65, 66, 67, 69, 77, 80, 87, 89, 93, 98, 143, 160, 165, 192, 198, 201, 204, 205, 206, 211, 220, 221, 223, 226, 227, 228, 229, 231, 242, 243, 244, 247, 249, 250, 260, 263, 265, 268, 278, 279, 283], "cupi": [3, 103], "cuda": [3, 103], "gpu": [3, 103, 143], "jax": [3, 103, 250], "xla": [3, 103], "program": [3, 7, 12, 18, 43, 46, 54, 143, 181, 196, 244, 246, 280, 282, 286, 288], "tpu": [3, 103], "compatibli": 3, "tensorflow": [3, 250], "numexpr": [3, 250], "fast": [3, 18, 29, 43, 62, 97, 98, 102, 148, 202, 203, 204, 205, 206, 207, 208, 214, 218, 227, 229, 246, 249, 250], "alreadi": [3, 4, 10, 12, 18, 20, 25, 26, 29, 31, 33, 35, 53, 54, 62, 63, 71, 72, 75, 76, 78, 87, 89, 93, 99, 102, 108, 113, 117, 126, 140, 145, 171, 173, 176, 192, 194, 195, 197, 200, 201, 204, 206, 210, 214, 220, 221, 223, 227, 230, 231, 237, 261, 263, 278, 280, 281, 282, 286, 287, 288, 289], "number": [3, 4, 5, 6, 7, 10, 11, 14, 15, 18, 20, 22, 25, 26, 27, 30, 31, 35, 37, 38, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 64, 67, 68, 70, 72, 75, 76, 77, 78, 79, 81, 89, 90, 91, 92, 93, 95, 98, 99, 101, 103, 104, 106, 108, 110, 112, 113, 114, 116, 121, 122, 125, 126, 130, 140, 141, 143, 149, 152, 155, 156, 159, 160, 161, 162, 164, 165, 170, 171, 172, 173, 174, 176, 177, 178, 181, 184, 185, 186, 190, 191, 192, 194, 195, 196, 197, 199, 200, 202, 203, 204, 205, 207, 208, 211, 213, 217, 218, 219, 220, 221, 223, 224, 227, 229, 230, 231, 232, 236, 237, 242, 244, 246, 249, 250, 252, 256, 259, 260, 262, 263, 265, 268, 274, 277, 278, 280, 282, 283, 284, 288], "languag": [3, 7, 11, 12, 16, 20, 43, 68, 98, 104, 116, 126, 143, 211, 216, 231, 243, 244, 280, 282, 284, 286, 288], "valid": [3, 6, 7, 10, 18, 19, 20, 25, 29, 36, 38, 40, 41, 42, 43, 55, 61, 62, 67, 68, 78, 98, 102, 118, 120, 121, 126, 128, 141, 145, 149, 168, 173, 180, 183, 186, 191, 195, 201, 204, 207, 210, 211, 219, 223, 224, 227, 229, 230, 231, 250, 284, 288], "rather": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 26, 29, 30, 31, 34, 39, 43, 44, 45, 53, 54, 55, 62, 66, 68, 73, 78, 80, 87, 92, 93, 95, 98, 102, 104, 125, 133, 143, 156, 170, 174, 176, 180, 185, 194, 198, 201, 204, 207, 209, 214, 221, 224, 226, 227, 230, 231, 233, 246, 249, 250, 253, 265, 280, 282, 283], "string": [3, 4, 6, 7, 11, 12, 20, 35, 36, 42, 43, 46, 51, 62, 63, 64, 65, 66, 69, 75, 85, 90, 91, 92, 95, 98, 102, 104, 105, 108, 110, 116, 117, 120, 123, 147, 156, 160, 170, 174, 178, 184, 185, 186, 190, 191, 192, 197, 200, 202, 206, 211, 212, 218, 223, 227, 231, 232, 235, 236, 237, 242, 243, 244, 249, 250, 252, 254, 256, 258, 260, 279, 280, 283, 287], "repres": [3, 10, 11, 12, 15, 18, 19, 20, 25, 27, 29, 35, 37, 39, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 57, 58, 61, 62, 63, 64, 67, 68, 70, 72, 73, 75, 77, 78, 79, 84, 85, 89, 91, 92, 93, 95, 98, 102, 104, 105, 106, 109, 110, 112, 117, 120, 121, 123, 125, 126, 128, 129, 130, 131, 134, 136, 138, 139, 140, 141, 143, 145, 147, 148, 150, 162, 163, 165, 169, 170, 173, 174, 176, 178, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 202, 204, 207, 209, 211, 213, 214, 217, 218, 219, 221, 223, 224, 227, 229, 230, 231, 232, 233, 235, 236, 237, 244, 246, 249, 250, 256, 259, 263, 265, 273, 278, 280, 282, 283, 288, 289], "take": [3, 4, 5, 7, 10, 11, 12, 16, 18, 19, 20, 24, 25, 26, 27, 29, 38, 41, 43, 44, 47, 52, 53, 57, 61, 62, 63, 64, 68, 70, 74, 75, 85, 89, 91, 92, 93, 98, 102, 103, 104, 105, 108, 112, 116, 120, 121, 123, 125, 126, 128, 140, 141, 143, 145, 159, 162, 165, 166, 170, 172, 173, 174, 175, 176, 178, 181, 184, 185, 186, 187, 188, 191, 194, 195, 197, 198, 199, 200, 201, 202, 204, 207, 208, 211, 214, 217, 218, 219, 220, 221, 223, 224, 227, 229, 230, 231, 233, 236, 242, 243, 245, 246, 249, 250, 256, 258, 259, 277, 278, 280, 282, 283, 284, 288], "within": [3, 7, 10, 11, 18, 28, 41, 42, 43, 45, 62, 68, 75, 78, 92, 93, 95, 102, 103, 105, 133, 171, 185, 186, 194, 195, 199, 201, 207, 209, 219, 227, 229, 230, 231, 242, 243, 252], "case": [3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 22, 25, 26, 27, 28, 29, 30, 31, 35, 41, 42, 43, 44, 45, 47, 50, 53, 54, 58, 61, 62, 63, 64, 66, 67, 68, 70, 74, 77, 78, 79, 80, 84, 87, 89, 92, 93, 95, 98, 99, 102, 103, 104, 106, 112, 116, 120, 121, 126, 128, 129, 130, 131, 137, 139, 141, 143, 149, 160, 166, 171, 173, 175, 176, 181, 182, 190, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 216, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 231, 232, 235, 237, 240, 242, 244, 245, 247, 249, 250, 251, 252, 253, 256, 259, 260, 278, 282, 283, 284, 287, 288, 289], "subpackag": [3, 267], "f2py": [3, 43, 103, 243, 244], "ufuncifi": [3, 43, 243], "cython": [3, 43, 103, 143, 243], "codegen": [3, 20, 103, 211, 243, 248, 275], "relat": [3, 4, 6, 7, 11, 19, 36, 38, 39, 41, 44, 46, 52, 53, 60, 64, 67, 68, 78, 84, 87, 89, 98, 102, 108, 115, 121, 130, 133, 136, 137, 143, 145, 150, 158, 160, 180, 186, 190, 194, 196, 197, 198, 204, 206, 207, 208, 210, 211, 215, 217, 218, 221, 223, 224, 226, 227, 229, 230, 231, 249, 288], "reli": [3, 10, 43, 98, 103, 109, 204, 210, 211, 218, 223, 230, 245, 250, 284], "llvm": 3, "gcc": [3, 244], "ifort": 3, "therefor": [3, 4, 6, 20, 22, 26, 44, 53, 58, 62, 66, 70, 78, 91, 102, 112, 120, 192, 195, 196, 197, 201, 204, 207, 211, 227, 230, 231, 232, 237, 256, 258, 260, 261, 263, 265], "aesara": [3, 10, 43, 143], "aesaracod": [3, 10, 43, 103, 211], "aeseara": 3, "previous": [3, 4, 10, 61, 120, 134, 137, 192, 210, 223, 231, 263], "theano": [3, 10, 143, 287], "return": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 25, 26, 28, 30, 31, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 50, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 84, 85, 87, 89, 91, 92, 93, 94, 95, 98, 99, 101, 102, 104, 105, 108, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 125, 126, 128, 130, 134, 138, 140, 141, 143, 145, 147, 148, 149, 150, 152, 153, 157, 160, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 190, 192, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 223, 224, 226, 227, 228, 229, 231, 232, 233, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 254, 256, 259, 261, 263, 277, 278, 283, 284, 287, 288, 289], "graph": [3, 6, 11, 54, 70, 91, 98, 103, 200, 211, 230, 231, 249, 283, 287], "object": [3, 4, 6, 7, 11, 12, 17, 18, 19, 20, 29, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 52, 53, 54, 55, 56, 57, 61, 62, 64, 67, 68, 70, 72, 73, 74, 75, 77, 78, 79, 87, 89, 92, 93, 95, 96, 98, 103, 104, 105, 106, 110, 112, 113, 116, 117, 120, 121, 122, 123, 125, 126, 130, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 149, 150, 151, 159, 160, 162, 170, 171, 175, 176, 178, 179, 180, 182, 183, 185, 186, 190, 191, 194, 195, 197, 198, 199, 200, 201, 202, 204, 206, 207, 211, 213, 214, 217, 218, 219, 220, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 242, 243, 244, 245, 246, 249, 250, 253, 254, 259, 260, 261, 266, 267, 271, 277, 278, 280, 282, 283, 284, 287, 288], "llvmlite": 3, "llvmjitcod": 3, "jit": [3, 220], "around": [3, 4, 6, 7, 10, 11, 12, 19, 20, 33, 41, 51, 54, 62, 63, 64, 66, 68, 71, 78, 82, 98, 101, 102, 108, 117, 120, 136, 140, 144, 195, 201, 204, 206, 211, 213, 218, 224, 227, 230, 231, 242, 256, 258, 278, 280, 282], "llvm_callabl": 3, "callabl": [3, 12, 29, 43, 53, 98, 104, 161, 206, 211, 212, 223, 240, 243, 244, 249, 250, 251], "unlik": [3, 6, 11, 12, 18, 19, 22, 29, 40, 63, 89, 98, 102, 104, 126, 194, 204, 211, 224, 227, 230, 246, 247, 280, 282, 283, 284, 287], "tensorflow_cod": 3, "order": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 22, 24, 29, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 75, 78, 79, 81, 84, 87, 89, 90, 91, 92, 93, 98, 99, 102, 103, 104, 105, 106, 112, 113, 116, 120, 121, 125, 126, 127, 128, 129, 137, 138, 139, 140, 141, 149, 153, 157, 160, 170, 171, 172, 173, 174, 175, 176, 180, 181, 185, 186, 188, 190, 191, 194, 195, 197, 198, 199, 200, 201, 202, 204, 206, 208, 210, 211, 212, 213, 214, 217, 219, 223, 224, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 242, 243, 244, 246, 249, 250, 252, 256, 258, 260, 261, 266, 278, 280, 281, 283, 287, 288, 289], "assum": [3, 6, 11, 12, 15, 18, 20, 26, 29, 30, 35, 38, 43, 44, 46, 51, 53, 61, 62, 63, 64, 67, 68, 70, 72, 79, 80, 87, 89, 98, 102, 105, 108, 112, 125, 126, 132, 138, 139, 140, 141, 143, 149, 171, 175, 176, 186, 190, 192, 198, 199, 201, 204, 207, 209, 211, 218, 219, 221, 223, 224, 227, 228, 230, 231, 235, 236, 237, 244, 249, 252, 259, 261, 265, 268, 281, 283, 286, 288, 289], "wurlitz": 3, "allow": [3, 4, 7, 10, 11, 12, 18, 20, 22, 39, 42, 43, 44, 46, 53, 55, 58, 61, 62, 63, 66, 68, 70, 72, 73, 74, 87, 90, 92, 93, 95, 96, 98, 102, 103, 104, 106, 120, 121, 126, 128, 136, 140, 141, 143, 148, 160, 176, 180, 181, 182, 195, 197, 198, 201, 202, 204, 206, 207, 208, 211, 216, 218, 219, 220, 223, 224, 227, 229, 230, 231, 232, 236, 242, 245, 247, 249, 250, 261, 280, 283], "captur": [3, 62, 249], "output": [3, 6, 7, 10, 12, 13, 16, 18, 20, 26, 29, 31, 42, 43, 62, 63, 70, 86, 89, 90, 92, 93, 95, 98, 102, 103, 104, 109, 112, 121, 125, 126, 134, 140, 143, 144, 148, 149, 160, 172, 176, 185, 186, 190, 191, 192, 195, 201, 204, 207, 211, 212, 221, 223, 224, 226, 227, 229, 231, 236, 242, 243, 244, 246, 249, 250, 256, 280, 282, 283, 284, 287, 288, 289], "suit": [3, 4, 7, 18, 20, 26, 27, 42, 197, 207, 240, 242], "stat": [3, 267, 274], "sampl": [3, 8, 16, 53, 65, 110, 112, 160, 197, 211, 231, 278, 282], "At": [3, 18, 20, 26, 41, 58, 68, 70, 89, 102, 105, 106, 116, 181, 185, 195, 206, 221, 250], "least": [3, 4, 7, 10, 14, 18, 29, 39, 41, 43, 53, 62, 68, 74, 86, 87, 89, 98, 102, 103, 121, 156, 170, 178, 180, 198, 199, 201, 202, 204, 206, 207, 218, 220, 223, 227, 229, 230, 231, 244, 288], "random": [3, 6, 10, 45, 46, 51, 53, 54, 60, 63, 72, 75, 76, 97, 98, 102, 160, 172, 197, 202, 204, 206, 207, 211, 241, 242, 245, 249, 280, 284, 288], "pymc": [3, 231], "manipul": [3, 11, 15, 16, 18, 22, 25, 27, 29, 42, 43, 44, 53, 62, 68, 70, 87, 102, 103, 119, 126, 136, 141, 174, 194, 200, 201, 202, 205, 210, 211, 213, 220, 223, 234, 249, 267, 273, 274, 277, 278, 279, 280, 281, 282, 284, 287, 288], "use_symengin": 3, "physic": [3, 6, 16, 43, 55, 98, 102, 105, 106, 108, 109, 110, 111, 112, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 188, 190, 191, 196, 205, 231, 246, 249, 263, 282, 288], "mechan": [3, 20, 62, 85, 89, 105, 117, 118, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 158, 162, 165, 171, 173, 174, 175, 178, 185, 186, 193, 196, 273], "liealgebra": [3, 91], "thing": [3, 4, 6, 7, 10, 11, 12, 13, 18, 19, 20, 22, 24, 32, 39, 43, 52, 53, 54, 62, 64, 74, 90, 91, 92, 93, 98, 103, 116, 123, 126, 140, 143, 160, 176, 181, 194, 195, 208, 210, 218, 219, 220, 223, 227, 230, 235, 245, 247, 249, 277, 278, 280, 282, 283, 284, 287, 288], "configur": [3, 4, 5, 10, 54, 92, 112, 120, 121, 129, 130, 133, 135, 136, 138, 140, 211], "otherwis": [3, 4, 14, 18, 19, 20, 41, 42, 43, 53, 54, 58, 61, 62, 63, 66, 68, 70, 71, 72, 75, 76, 77, 78, 87, 89, 91, 92, 94, 98, 101, 102, 104, 110, 112, 114, 117, 125, 126, 161, 166, 172, 190, 193, 194, 198, 202, 204, 206, 207, 209, 211, 213, 214, 216, 217, 219, 223, 224, 227, 228, 229, 230, 231, 232, 240, 242, 244, 249, 250, 277, 278, 287], "ordinari": [3, 18, 19, 23, 41, 43, 53, 62, 66, 67, 68, 70, 80, 84, 85, 89, 99, 112, 136, 198, 200, 201, 210, 217, 227, 232, 246, 282, 288], "x": [3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 51, 53, 54, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 98, 101, 102, 103, 104, 105, 106, 108, 110, 112, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 148, 150, 151, 152, 153, 154, 156, 157, 160, 165, 166, 171, 173, 174, 175, 176, 177, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 242, 243, 244, 245, 247, 249, 250, 252, 256, 259, 260, 261, 262, 263, 265, 266, 277, 278, 280, 282, 283, 284, 287, 288, 289], "still": [3, 4, 6, 7, 10, 11, 12, 18, 20, 33, 34, 35, 42, 54, 61, 62, 63, 70, 74, 89, 93, 98, 126, 176, 195, 197, 198, 199, 204, 206, 211, 218, 220, 221, 223, 227, 229, 230, 236, 242, 249, 263, 284], "experiment": [3, 4, 223], "mathemat": [3, 4, 7, 8, 10, 11, 15, 18, 20, 24, 26, 28, 29, 31, 32, 35, 37, 38, 41, 43, 44, 48, 52, 54, 61, 62, 63, 64, 67, 68, 69, 70, 75, 76, 87, 89, 92, 95, 98, 102, 103, 104, 112, 113, 116, 130, 142, 181, 192, 194, 195, 198, 199, 201, 202, 205, 210, 211, 219, 220, 224, 226, 227, 230, 231, 236, 243, 244, 250, 256, 260, 263, 265, 277, 280, 281, 282, 283, 286, 288], "softwar": [3, 7, 89, 205, 282], "itself": [3, 4, 6, 7, 10, 11, 20, 39, 51, 53, 54, 60, 62, 64, 67, 68, 75, 79, 84, 102, 121, 125, 126, 141, 166, 173, 192, 194, 197, 198, 201, 204, 206, 207, 211, 219, 220, 223, 230, 235, 236, 237, 244, 246, 249, 265, 282], "_sage_": 3, "basic": [3, 4, 5, 6, 7, 10, 11, 18, 20, 31, 35, 37, 42, 43, 44, 50, 53, 57, 60, 61, 65, 68, 78, 80, 85, 86, 87, 92, 93, 96, 99, 112, 120, 126, 138, 139, 141, 143, 144, 150, 160, 174, 181, 184, 189, 192, 193, 195, 197, 198, 200, 202, 203, 204, 206, 208, 209, 211, 212, 218, 223, 224, 227, 228, 229, 230, 231, 242, 244, 249, 250, 254, 262, 263, 264, 271, 273, 274, 278, 279, 280, 281, 286], "beyond": [3, 18, 24, 56, 78, 102, 140, 198, 201, 220, 223, 284], "control": [3, 5, 10, 12, 14, 18, 20, 42, 44, 62, 63, 66, 87, 92, 93, 140, 143, 156, 160, 171, 172, 176, 207, 208, 212, 219, 224, 230, 249, 273, 277], "pytest": [3, 4, 10, 239, 245, 247, 250, 275], "entir": [3, 4, 18, 53, 62, 63, 66, 67, 70, 76, 78, 87, 101, 118, 137, 141, 186, 198, 200, 206, 219, 236, 245, 247, 282, 288], "import_modul": 3, "own": [3, 5, 6, 12, 20, 37, 46, 53, 54, 62, 78, 106, 120, 126, 143, 206, 211, 218, 223, 227, 246, 249, 250, 282], "runner": [3, 242], "access": [3, 6, 7, 11, 12, 18, 20, 36, 37, 38, 43, 62, 70, 91, 92, 95, 98, 103, 106, 112, 113, 120, 121, 125, 126, 144, 185, 186, 192, 195, 197, 201, 202, 204, 206, 223, 227, 232, 235, 243, 244, 260, 263, 283, 287], "script": [3, 5, 6, 11, 34, 70, 191, 243], "cloudpickl": 3, "effect": [3, 6, 20, 28, 33, 53, 55, 62, 79, 87, 89, 93, 98, 105, 126, 128, 140, 148, 176, 186, 197, 201, 204, 208, 210, 227, 280], "pickl": 3, "util": [3, 4, 5, 6, 7, 24, 26, 41, 49, 51, 53, 54, 67, 68, 73, 74, 75, 78, 92, 93, 102, 103, 146, 180, 183, 200, 204, 208, 211, 223, 224, 240, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 268, 273, 274], "test_pickl": 3, "py": [3, 4, 5, 6, 18, 33, 42, 62, 73, 87, 89, 98, 154, 156, 197, 200, 202, 208, 211, 218, 221, 227, 228, 237, 240, 242, 247, 250], "pdf": [3, 7, 8, 29, 32, 41, 42, 53, 63, 65, 67, 84, 89, 98, 102, 105, 106, 110, 197, 200, 202, 205, 210, 211, 214, 220, 223, 224, 227, 231, 249, 256], "view": [3, 6, 8, 11, 31, 43, 44, 45, 62, 98, 105, 178, 181, 195, 197, 204, 211, 227, 230, 244, 246, 249], "host": [3, 7], "onlin": [3, 6, 121, 224, 249], "sympy_benchmark": 3, "readm": 3, "yourself": [3, 20, 31, 43, 128, 245, 278], "reproduc": [3, 22, 207, 242, 288], "add": [3, 4, 5, 6, 10, 11, 12, 15, 18, 29, 35, 37, 41, 43, 51, 53, 58, 63, 66, 69, 77, 79, 87, 91, 95, 98, 102, 105, 108, 117, 126, 143, 154, 160, 170, 175, 176, 179, 194, 195, 197, 200, 201, 202, 204, 206, 207, 208, 211, 212, 221, 223, 224, 227, 228, 230, 231, 233, 235, 236, 237, 245, 250, 254, 278, 280, 283, 287, 288], "asv": 3, "airspe": 3, "veloc": [3, 116, 117, 120, 121, 123, 128, 129, 130, 133, 134, 135, 137, 140, 141, 143, 150, 178, 180, 181, 185, 186, 190, 192, 195, 263, 265], "describ": [4, 6, 7, 10, 12, 18, 19, 20, 22, 29, 35, 42, 44, 52, 53, 54, 56, 57, 60, 61, 62, 63, 67, 70, 72, 77, 78, 87, 89, 93, 98, 101, 102, 112, 116, 120, 121, 123, 125, 126, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 155, 176, 181, 185, 186, 192, 194, 195, 198, 201, 204, 206, 212, 218, 221, 223, 224, 227, 230, 231, 235, 244, 249, 250, 256, 258, 263, 278], "properli": [4, 11, 20, 42, 62, 68, 74, 87, 98, 122, 126, 138, 153, 157, 160, 174, 199, 201, 211, 227, 230, 240, 244, 250, 284, 289], "current": [4, 7, 10, 12, 18, 24, 25, 35, 38, 41, 42, 43, 44, 46, 53, 56, 57, 59, 60, 61, 62, 64, 68, 70, 72, 74, 77, 82, 85, 87, 89, 91, 93, 98, 102, 104, 105, 109, 116, 120, 126, 136, 170, 175, 176, 180, 184, 195, 197, 198, 199, 200, 202, 204, 207, 208, 210, 211, 212, 218, 221, 223, 224, 226, 227, 228, 229, 230, 231, 237, 242, 243, 244, 246, 260, 274, 284, 289], "updat": [4, 10, 12, 29, 33, 62, 130, 156, 166, 169, 170, 172, 196, 200, 204, 207, 211, 224, 237, 247], "continu": [4, 6, 7, 10, 16, 19, 20, 41, 43, 52, 54, 56, 62, 67, 68, 70, 87, 90, 93, 102, 109, 110, 112, 171, 174, 191, 202, 204, 207, 224, 226, 227, 235, 279], "someon": [4, 227, 246, 281], "warn": [4, 6, 12, 20, 62, 63, 77, 104, 186, 195, 199, 211, 227, 229, 240, 242, 244, 248, 249, 275, 284], "screen": [4, 11, 90, 191, 195, 242, 287], "indic": [4, 6, 12, 15, 18, 26, 29, 30, 41, 42, 43, 44, 46, 51, 53, 54, 55, 57, 58, 60, 61, 62, 65, 66, 67, 70, 72, 77, 78, 87, 89, 92, 93, 95, 98, 101, 102, 113, 125, 130, 160, 171, 173, 174, 176, 181, 185, 186, 196, 200, 201, 202, 206, 207, 208, 211, 218, 219, 220, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 242, 243, 244, 249, 284], "remov": [4, 10, 18, 24, 35, 36, 37, 53, 56, 60, 62, 66, 68, 77, 78, 87, 92, 98, 102, 105, 108, 117, 120, 133, 135, 140, 160, 176, 202, 204, 207, 209, 210, 211, 223, 224, 227, 229, 230, 232, 233, 243, 244, 245, 247, 249, 250, 277, 288], "futur": [4, 18, 19, 43, 44, 62, 87, 89, 98, 104, 120, 125, 128, 136, 140, 176, 180, 193, 197, 199, 210, 211, 223, 227, 236, 242, 245, 247, 250, 273, 283, 289], "chanc": [4, 12, 19, 62, 90, 221, 231, 283], "break": [4, 6, 10, 20, 42, 43, 54, 62, 63, 102, 194, 208, 211, 219, 249], "opportun": [4, 6, 223], "messag": [4, 10, 63, 90, 245, 247, 252], "wrong": [4, 7, 10, 53, 62, 63, 70, 72, 98, 186, 201, 227, 245, 280, 284], "answer": [4, 18, 20, 22, 53, 62, 66, 84, 87, 89, 92, 98, 102, 181, 204, 208, 220, 221, 223, 229, 231, 246, 252, 282, 284, 288], "made": [4, 7, 10, 11, 12, 18, 20, 30, 56, 58, 62, 63, 68, 71, 72, 75, 78, 79, 89, 92, 98, 102, 104, 126, 137, 140, 143, 195, 198, 202, 204, 206, 207, 211, 212, 218, 219, 220, 223, 227, 229, 230, 231, 244, 249, 252, 265, 283], "lightli": 4, "fix": [4, 6, 9, 10, 43, 53, 55, 58, 60, 63, 67, 70, 74, 91, 98, 105, 106, 108, 117, 120, 123, 128, 137, 143, 160, 165, 169, 172, 176, 181, 186, 190, 194, 195, 197, 201, 204, 206, 207, 208, 211, 217, 221, 229, 231, 249, 256, 258], "worth": [4, 18, 20, 186, 261, 263], "pain": 4, "frustrat": 4, "go": [4, 5, 6, 7, 20, 33, 42, 43, 53, 63, 67, 68, 87, 121, 126, 128, 141, 143, 144, 170, 181, 190, 197, 206, 207, 218, 221, 227, 280, 282, 283, 286, 288], "seek": [4, 229], "stabl": [4, 6, 7, 20, 43, 62, 90, 98, 104, 108, 112, 243, 277], "done": [4, 6, 10, 11, 12, 16, 20, 37, 38, 40, 41, 42, 43, 53, 55, 60, 62, 63, 64, 67, 70, 73, 74, 87, 89, 93, 98, 102, 120, 126, 128, 134, 141, 143, 162, 171, 172, 173, 176, 178, 179, 186, 192, 194, 195, 197, 198, 200, 204, 207, 208, 210, 211, 212, 220, 223, 224, 227, 229, 230, 231, 236, 237, 242, 243, 246, 250, 260, 261, 277, 280, 282, 283, 284], "exist": [4, 10, 11, 16, 18, 20, 28, 31, 41, 42, 43, 46, 53, 62, 66, 72, 74, 77, 78, 79, 80, 89, 92, 98, 102, 108, 166, 192, 195, 197, 198, 199, 200, 204, 206, 211, 218, 219, 221, 224, 227, 229, 230, 242, 250, 261, 282, 284, 289], "necessarili": [4, 6, 18, 39, 62, 63, 64, 87, 89, 92, 121, 198, 199, 206, 207, 209, 223, 227, 229, 230], "supplant": 4, "old": [4, 10, 11, 12, 62, 63, 64, 90, 140, 145, 181, 191, 197, 198, 202, 211, 212, 223, 227, 230, 232, 277], "sometim": [4, 6, 7, 11, 12, 18, 20, 22, 29, 42, 43, 62, 67, 70, 86, 87, 112, 136, 140, 168, 176, 195, 198, 201, 206, 211, 213, 218, 220, 224, 227, 229, 240, 249, 277, 284], "alongsid": [4, 10, 20, 95], "newer": [4, 11, 194, 229], "solveset": [4, 20, 28, 31, 143, 209, 225, 226, 229, 268, 289], "superior": [4, 211], "replac": [4, 6, 10, 11, 12, 18, 41, 43, 53, 61, 62, 63, 66, 67, 68, 70, 72, 76, 89, 92, 93, 98, 102, 103, 104, 116, 118, 120, 143, 165, 171, 186, 198, 204, 207, 208, 212, 218, 220, 221, 223, 227, 229, 230, 237, 238, 249, 250, 252, 277, 286], "older": [4, 7, 11, 85, 126, 201, 211, 229], "solv": [4, 6, 10, 11, 12, 13, 16, 18, 20, 21, 43, 46, 58, 61, 62, 70, 75, 87, 89, 93, 94, 98, 105, 107, 108, 120, 121, 122, 126, 129, 130, 133, 135, 136, 138, 140, 143, 179, 200, 204, 208, 209, 210, 211, 213, 223, 224, 226, 227, 228, 231, 273, 278, 279, 282, 284, 287], "remain": [4, 10, 11, 20, 37, 38, 43, 53, 54, 56, 58, 62, 63, 68, 87, 93, 102, 104, 113, 126, 175, 192, 194, 195, 206, 207, 208, 217, 220, 221, 227, 228, 229, 231, 233, 237, 246, 249, 250, 260, 265, 277, 280, 282, 283, 284], "intact": [4, 10, 43, 243], "cogniz": 4, "properti": [4, 11, 15, 20, 22, 27, 29, 35, 37, 38, 41, 42, 43, 44, 45, 46, 50, 51, 53, 54, 55, 56, 57, 61, 62, 63, 64, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 85, 87, 89, 93, 95, 98, 102, 105, 106, 108, 109, 112, 117, 120, 121, 123, 125, 141, 143, 145, 147, 150, 151, 154, 155, 160, 161, 162, 164, 165, 172, 174, 176, 178, 180, 181, 183, 184, 186, 187, 188, 192, 195, 196, 197, 199, 200, 201, 202, 204, 206, 207, 210, 213, 214, 217, 218, 219, 221, 224, 227, 230, 231, 236, 237, 242, 244, 245, 256, 259, 260, 261, 263, 265, 284], "attr": [4, 43], "imposs": [4, 6, 10, 11, 20, 29, 62, 201, 220, 227, 228, 240, 280, 288], "later": [4, 10, 16, 43, 53, 87, 92, 93, 116, 122, 123, 128, 130, 131, 138, 140, 141, 143, 150, 185, 194, 201, 204, 210, 211, 212, 221, 223, 227, 246, 260, 277, 278, 280, 282, 283, 288], "unsur": [4, 6], "about": [4, 5, 6, 7, 10, 11, 12, 13, 16, 18, 19, 20, 22, 27, 29, 31, 32, 33, 35, 36, 38, 39, 42, 43, 53, 54, 55, 56, 62, 66, 68, 70, 72, 73, 74, 76, 77, 78, 82, 84, 88, 89, 91, 98, 102, 105, 106, 112, 116, 117, 118, 120, 121, 122, 123, 125, 126, 130, 140, 141, 171, 173, 174, 176, 180, 185, 186, 194, 195, 196, 198, 200, 201, 206, 208, 211, 213, 218, 223, 224, 225, 227, 231, 235, 236, 242, 243, 244, 245, 246, 247, 256, 258, 260, 263, 264, 271, 274, 277, 279, 280, 282, 283, 284, 288], "mark": [4, 6, 7, 110, 149, 161, 224, 240, 245, 247], "explicitli": [4, 10, 11, 18, 20, 43, 53, 54, 62, 63, 65, 68, 70, 75, 79, 95, 98, 103, 112, 126, 185, 186, 197, 199, 201, 202, 204, 207, 211, 223, 227, 229, 247, 280, 284, 287, 289], "privat": [4, 6, 62, 63, 126, 197, 244], "With": [4, 12, 19, 33, 43, 45, 61, 62, 66, 87, 102, 129, 130, 131, 137, 139, 140, 149, 173, 176, 195, 197, 198, 199, 201, 202, 209, 210, 211, 218, 223, 232, 249, 282, 283], "being": [4, 7, 11, 12, 14, 18, 19, 39, 41, 43, 53, 54, 60, 61, 62, 63, 67, 68, 70, 72, 74, 75, 78, 79, 87, 92, 93, 98, 99, 102, 105, 106, 108, 116, 125, 126, 128, 140, 141, 143, 144, 172, 181, 188, 192, 194, 195, 196, 197, 198, 200, 201, 206, 207, 208, 210, 211, 220, 221, 223, 224, 227, 228, 229, 230, 231, 237, 240, 242, 246, 247, 249, 250, 252, 256, 261, 265, 282, 284], "decid": [4, 6, 16, 18, 19, 20, 22, 42, 61, 93, 116, 140, 169, 201, 204, 206, 207, 211, 227, 230, 244, 284], "reason": [4, 7, 10, 11, 14, 18, 19, 20, 28, 29, 35, 43, 54, 60, 62, 66, 70, 87, 90, 96, 98, 121, 122, 126, 128, 133, 136, 140, 147, 181, 191, 195, 200, 201, 204, 205, 208, 211, 219, 221, 223, 227, 230, 240, 246, 247, 249, 250, 277, 278, 282, 283, 284], "confus": [4, 7, 10, 11, 18, 25, 62, 67, 92, 149, 195, 199, 207, 230, 277, 278, 280], "unnecessari": [4, 6, 7, 39, 43, 207, 210, 231, 242, 281], "redund": [4, 18, 53, 60, 92, 98, 227, 244], "usabl": [4, 29, 201, 202, 211, 230, 282], "breakag": 4, "serious": 4, "taken": [4, 11, 43, 44, 45, 50, 53, 60, 61, 62, 67, 68, 70, 79, 93, 102, 112, 114, 116, 117, 140, 143, 173, 179, 186, 190, 196, 197, 201, 206, 207, 211, 214, 218, 220, 221, 230, 231, 236, 244, 249, 256], "commun": [4, 7, 33, 196, 227, 229, 231, 284], "inde": [4, 16, 20, 50, 53, 61, 87, 198, 221, 227, 238, 242, 282], "second": [4, 7, 11, 12, 16, 18, 19, 20, 22, 24, 26, 27, 29, 31, 34, 35, 38, 41, 43, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 70, 72, 75, 76, 78, 89, 98, 102, 103, 105, 106, 110, 112, 113, 116, 117, 120, 121, 126, 130, 133, 135, 136, 137, 139, 141, 147, 149, 150, 153, 157, 162, 165, 170, 171, 173, 174, 179, 180, 181, 183, 185, 186, 187, 194, 195, 197, 200, 201, 204, 205, 206, 207, 211, 213, 221, 223, 224, 227, 229, 230, 231, 232, 233, 249, 250, 256, 259, 260, 261, 273, 277, 282, 283, 284], "know": [4, 6, 7, 10, 11, 12, 18, 19, 20, 22, 29, 30, 31, 36, 38, 42, 45, 54, 62, 63, 66, 74, 79, 87, 89, 98, 102, 123, 126, 144, 170, 174, 178, 179, 181, 185, 186, 194, 195, 197, 207, 208, 210, 211, 221, 223, 227, 229, 230, 231, 245, 249, 250, 261, 277, 278, 280, 281, 282, 283, 286, 288], "count": [4, 7, 11, 54, 61, 62, 63, 67, 72, 92, 98, 101, 102, 171, 207, 219, 220, 223, 230, 231, 237, 246, 249], "basi": [4, 62, 64, 91, 95, 98, 117, 133, 135, 161, 170, 171, 173, 176, 178, 181, 184, 185, 186, 192, 194, 196, 198, 200, 202, 207, 210, 221, 223, 229, 230, 232, 237, 259, 260, 263, 286], "exact": [4, 10, 11, 12, 18, 20, 28, 39, 61, 62, 63, 66, 72, 77, 84, 87, 89, 93, 98, 105, 143, 170, 201, 202, 204, 207, 218, 223, 227, 229, 242, 252, 280, 282, 287], "rule": [4, 7, 10, 16, 18, 20, 43, 53, 54, 61, 62, 70, 85, 87, 89, 92, 93, 98, 105, 126, 157, 160, 181, 186, 192, 195, 196, 208, 210, 211, 212, 217, 221, 223, 227, 237, 249, 250, 263, 280, 283], "doesn": [4, 6, 10, 12, 20, 22, 43, 86, 126, 130, 140, 143, 195, 199, 208, 210, 220, 223, 230, 289], "constitut": [4, 7, 11, 89, 102, 211], "yet": [4, 5, 10, 12, 18, 20, 36, 38, 41, 42, 66, 89, 140, 156, 198, 201, 202, 206, 208, 210, 219, 227, 230, 278], "fulli": [4, 6, 10, 18, 53, 62, 79, 89, 92, 104, 105, 106, 120, 126, 143, 176, 194, 201, 202, 208, 218, 231, 237, 253], "codifi": 4, "clean": [4, 242], "distinct": [4, 7, 11, 14, 18, 20, 30, 43, 53, 54, 62, 63, 67, 75, 87, 92, 98, 102, 125, 194, 201, 206, 207, 211, 219, 221, 288], "well": [4, 6, 7, 10, 11, 12, 14, 16, 18, 20, 33, 39, 41, 42, 43, 44, 45, 46, 54, 61, 62, 67, 68, 70, 89, 93, 96, 98, 108, 113, 116, 120, 126, 128, 130, 131, 140, 166, 175, 178, 179, 185, 194, 196, 197, 198, 200, 201, 202, 204, 206, 211, 218, 219, 220, 221, 223, 227, 229, 230, 242, 243, 260, 261, 265, 280, 282, 283, 288], "categor": [4, 22, 98, 198], "issu": [4, 7, 9, 10, 11, 12, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 41, 61, 62, 79, 89, 92, 98, 103, 122, 136, 156, 193, 196, 205, 206, 208, 211, 219, 220, 229, 230, 242, 244, 246, 247, 249, 252, 273, 279, 280, 283, 288], "here": [4, 6, 7, 10, 11, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 32, 33, 37, 38, 43, 44, 46, 51, 52, 53, 54, 60, 61, 62, 63, 64, 66, 67, 68, 70, 78, 79, 80, 84, 85, 87, 89, 92, 93, 98, 101, 102, 103, 104, 105, 108, 112, 116, 121, 126, 127, 128, 133, 134, 135, 138, 140, 141, 143, 144, 166, 171, 176, 185, 191, 192, 194, 195, 197, 198, 201, 202, 204, 206, 207, 208, 211, 212, 218, 220, 221, 223, 224, 227, 229, 230, 231, 235, 236, 243, 244, 246, 247, 249, 250, 261, 263, 265, 276, 277, 278, 280, 282, 283, 284, 286, 287, 288], "guidelin": [4, 8, 31, 227], "exhaust": [4, 18, 221, 249, 281], "alwai": [4, 6, 7, 10, 11, 12, 18, 19, 20, 27, 33, 35, 42, 53, 54, 61, 62, 63, 64, 66, 68, 70, 72, 74, 77, 78, 86, 87, 89, 92, 93, 98, 101, 102, 108, 112, 113, 125, 126, 128, 130, 134, 144, 176, 178, 181, 182, 192, 194, 198, 199, 201, 202, 204, 206, 207, 211, 212, 213, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 238, 242, 244, 249, 250, 256, 258, 263, 278, 280, 281, 282, 283, 288], "posit": [4, 10, 11, 12, 18, 19, 20, 22, 26, 36, 37, 38, 39, 40, 42, 43, 44, 46, 51, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 70, 72, 74, 75, 78, 87, 89, 91, 92, 93, 94, 98, 99, 101, 102, 105, 106, 108, 112, 114, 120, 123, 126, 128, 130, 133, 135, 137, 140, 141, 143, 145, 148, 150, 154, 171, 174, 176, 187, 188, 190, 192, 194, 195, 198, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 216, 217, 219, 220, 221, 223, 224, 227, 229, 230, 231, 232, 237, 249, 250, 256, 259, 260, 261, 263, 265, 266, 284, 288, 289], "convent": [4, 6, 7, 9, 20, 29, 53, 54, 58, 61, 62, 63, 67, 68, 70, 72, 77, 87, 89, 92, 104, 105, 106, 108, 112, 115, 128, 143, 145, 149, 170, 171, 173, 178, 179, 192, 197, 211, 227, 228, 230, 231, 237, 265, 280, 288], "defin": [4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 31, 34, 35, 37, 38, 41, 43, 44, 45, 46, 52, 53, 54, 57, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 80, 85, 87, 89, 90, 93, 95, 98, 102, 105, 106, 110, 116, 117, 120, 123, 125, 126, 128, 129, 133, 135, 136, 137, 141, 143, 144, 147, 153, 155, 157, 162, 165, 171, 173, 174, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 213, 214, 217, 218, 219, 221, 223, 224, 227, 229, 230, 231, 232, 236, 237, 243, 244, 245, 249, 250, 251, 252, 256, 258, 259, 260, 261, 262, 263, 265, 266, 280, 282, 288], "And": [4, 10, 19, 20, 24, 37, 53, 54, 61, 62, 63, 70, 87, 92, 93, 98, 101, 120, 148, 195, 197, 199, 207, 208, 211, 219, 223, 224, 229, 230, 231, 249, 250, 261, 288], "aren": [4, 10, 11, 20, 43, 62, 126, 210, 230], "don": [4, 10, 12, 19, 20, 38, 43, 87, 92, 98, 103, 104, 116, 126, 185, 194, 195, 201, 211, 221, 230, 232, 240, 245, 265, 277, 278, 282, 283, 288], "form": [4, 7, 10, 11, 16, 18, 20, 27, 28, 35, 38, 39, 40, 41, 43, 44, 52, 53, 54, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 78, 82, 84, 85, 87, 89, 91, 93, 95, 97, 98, 102, 104, 105, 106, 108, 109, 112, 116, 117, 120, 121, 122, 125, 126, 128, 130, 133, 135, 136, 137, 138, 139, 141, 143, 144, 153, 156, 157, 158, 160, 170, 171, 174, 176, 178, 181, 184, 185, 186, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 217, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 236, 237, 242, 243, 249, 256, 259, 260, 262, 263, 265, 271, 278, 282, 283, 284, 287, 288, 289], "equival": [4, 10, 11, 12, 14, 18, 19, 20, 27, 29, 35, 39, 43, 44, 52, 53, 58, 62, 63, 66, 68, 70, 87, 89, 98, 102, 104, 109, 110, 112, 120, 126, 159, 170, 173, 176, 179, 180, 186, 191, 195, 197, 198, 199, 201, 202, 206, 207, 211, 218, 219, 223, 224, 227, 229, 230, 232, 233, 236, 237, 246, 250, 252, 253], "intern": [4, 10, 11, 12, 18, 19, 24, 41, 43, 44, 53, 62, 65, 66, 67, 70, 78, 79, 82, 94, 98, 102, 106, 108, 110, 128, 140, 149, 170, 171, 181, 198, 200, 202, 203, 205, 207, 209, 211, 221, 223, 226, 227, 228, 229, 230, 231, 235, 237, 240, 244, 246, 249, 274, 283, 287], "Such": [4, 6, 18, 43, 62, 78, 130, 198, 199, 206, 212, 220, 221, 223, 277, 283], "prefix": [4, 43, 62, 98, 102, 180, 183, 184, 201, 204, 208, 211, 224, 227, 243, 244, 249, 273], "underscor": [4, 6, 10, 62, 98, 227, 237, 245], "_": [4, 6, 7, 10, 12, 14, 16, 20, 37, 38, 42, 50, 51, 53, 54, 55, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 73, 75, 76, 77, 78, 87, 89, 92, 93, 94, 95, 96, 98, 100, 102, 104, 112, 138, 141, 143, 155, 176, 181, 185, 191, 194, 196, 202, 206, 207, 210, 211, 212, 214, 218, 219, 220, 221, 223, 224, 227, 228, 229, 232, 233, 249, 259, 261, 287], "univers": [4, 11, 43, 196, 205, 219, 224, 229, 230], "adher": [4, 7, 87], "codebas": [4, 10, 18, 201, 240], "anyth": [4, 6, 7, 10, 12, 20, 41, 43, 62, 63, 73, 77, 98, 126, 150, 160, 208, 211, 217, 219, 223, 227, 229, 243, 249, 252, 280], "were": [4, 7, 10, 11, 12, 14, 18, 20, 42, 45, 54, 56, 62, 63, 68, 79, 87, 93, 98, 102, 103, 104, 116, 125, 140, 185, 192, 195, 198, 202, 204, 205, 206, 207, 210, 211, 212, 220, 223, 229, 249, 250, 252, 280, 282, 283, 287, 288], "incorrect": [4, 7, 10, 19, 20, 28, 53, 62, 72, 102, 110, 190, 202, 227, 230, 243, 246, 247], "bug": [4, 6, 18, 20, 33, 41, 63, 201, 219, 227, 230, 280], "despit": [4, 22, 31, 62, 288], "sai": [4, 7, 11, 12, 16, 18, 44, 52, 61, 62, 63, 91, 116, 121, 126, 136, 143, 181, 194, 195, 198, 199, 200, 204, 206, 210, 211, 218, 221, 224, 227, 229, 230, 231, 250, 277, 282, 288], "befor": [4, 6, 10, 11, 12, 18, 19, 20, 29, 31, 33, 43, 53, 54, 56, 58, 62, 63, 64, 70, 90, 93, 98, 102, 104, 105, 106, 116, 122, 126, 128, 129, 130, 133, 134, 140, 143, 145, 176, 185, 191, 195, 199, 201, 206, 207, 211, 212, 218, 219, 223, 224, 227, 229, 230, 231, 238, 242, 245, 249, 250, 260, 281, 282, 283, 288], "recent": [4, 10, 12, 15, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 36, 37, 38, 43, 44, 54, 62, 63, 66, 70, 72, 89, 92, 93, 94, 95, 96, 98, 100, 101, 104, 112, 196, 198, 201, 202, 204, 207, 210, 218, 219, 227, 229, 230, 240, 243, 245, 247, 249, 250, 252, 280, 284], "best": [4, 8, 12, 22, 26, 28, 29, 32, 33, 43, 62, 70, 87, 89, 103, 175, 197, 208, 211, 220, 221, 223, 227, 230, 235, 243, 276, 280, 281, 287, 288], "determin": [4, 7, 10, 11, 14, 16, 18, 19, 20, 22, 25, 26, 27, 30, 36, 38, 39, 40, 41, 43, 44, 45, 46, 53, 62, 63, 64, 65, 66, 68, 72, 73, 75, 77, 78, 89, 90, 91, 95, 98, 102, 104, 105, 106, 112, 118, 120, 122, 123, 125, 135, 141, 144, 155, 168, 170, 172, 173, 176, 179, 181, 186, 192, 197, 198, 199, 200, 204, 206, 207, 211, 217, 218, 219, 221, 223, 224, 226, 227, 229, 230, 231, 235, 247, 249, 256, 263, 266, 280, 288], "someth": [4, 6, 7, 10, 11, 12, 18, 19, 20, 31, 41, 43, 62, 63, 66, 72, 87, 92, 93, 98, 102, 116, 126, 127, 143, 169, 182, 185, 197, 201, 202, 210, 218, 219, 223, 227, 230, 242, 244, 250, 277, 280, 282, 283, 286], "re": [4, 12, 20, 40, 41, 43, 53, 54, 62, 63, 66, 68, 70, 87, 89, 98, 186, 188, 192, 198, 204, 211, 212, 213, 219, 220, 221, 227, 229, 242, 259, 261, 278, 280, 283], "harm": 4, "even": [4, 6, 7, 11, 12, 15, 18, 20, 22, 25, 28, 29, 30, 31, 36, 37, 38, 39, 40, 43, 44, 45, 50, 53, 54, 61, 62, 63, 66, 67, 68, 70, 74, 78, 87, 89, 92, 93, 98, 101, 102, 113, 126, 136, 161, 172, 179, 181, 186, 196, 199, 200, 201, 202, 204, 206, 207, 208, 211, 212, 219, 220, 221, 223, 224, 227, 229, 230, 238, 242, 265, 277, 278, 280, 282, 283, 288, 289], "might": [4, 6, 10, 11, 12, 14, 18, 19, 20, 24, 28, 41, 62, 66, 68, 75, 84, 87, 95, 98, 102, 104, 116, 126, 127, 143, 156, 186, 194, 197, 201, 202, 207, 208, 211, 212, 219, 220, 221, 223, 224, 229, 230, 231, 243, 244, 247, 249, 252, 277, 280, 282, 283, 285, 288], "while": [4, 6, 11, 12, 18, 20, 23, 24, 29, 31, 42, 43, 44, 53, 54, 55, 58, 61, 62, 63, 64, 66, 67, 68, 72, 76, 78, 86, 92, 93, 98, 102, 103, 104, 105, 108, 117, 120, 122, 126, 130, 140, 160, 180, 181, 186, 192, 198, 206, 209, 211, 227, 230, 242, 244, 246, 249, 265, 277, 283, 284], "peopl": [4, 6, 65, 70, 89, 98, 181, 231], "upgrad": [4, 34], "immedi": [4, 18, 27, 45, 53, 62, 87, 92, 176, 198, 201, 232, 243, 250], "fire": 4, "uncondition": 4, "correct": [4, 6, 7, 10, 12, 19, 20, 25, 27, 29, 43, 51, 53, 59, 61, 62, 66, 68, 86, 87, 89, 98, 102, 112, 126, 140, 194, 195, 204, 207, 218, 224, 227, 229, 230, 235, 243, 249, 280, 287], "question": [4, 6, 7, 16, 18, 61, 64, 72, 79, 87, 89, 92, 102, 116, 178, 181, 185, 198, 201, 206, 221, 230, 249, 252], "read": [4, 6, 7, 9, 10, 20, 31, 54, 68, 87, 102, 106, 143, 194, 195, 200, 201, 202, 208, 211, 224, 237, 238, 246, 250, 253, 281, 287, 288], "previou": [4, 6, 10, 20, 46, 51, 52, 53, 54, 57, 62, 67, 68, 89, 92, 93, 101, 117, 140, 178, 194, 195, 204, 217, 224, 228, 232, 249, 281, 283, 288], "unchang": [4, 10, 11, 20, 53, 54, 62, 89, 98, 112, 180, 207, 211, 217, 220, 223, 230, 277], "dure": [4, 10, 12, 34, 43, 62, 63, 93, 98, 102, 104, 117, 121, 143, 144, 194, 206, 211, 220, 229, 230, 247, 249], "period": [4, 6, 10, 26, 41, 62, 63, 68, 87, 102, 112, 140, 150, 172, 179, 206, 211, 214, 217, 226, 230, 231, 249], "silenc": [4, 240, 247], "filterwarn": [4, 10], "caus": [4, 7, 10, 11, 20, 29, 33, 62, 63, 66, 68, 98, 126, 134, 140, 194, 211, 220, 227, 228, 229, 246, 247, 284], "anoth": [4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 39, 42, 43, 54, 59, 61, 62, 63, 64, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 87, 89, 95, 98, 102, 105, 106, 117, 123, 137, 165, 180, 181, 183, 186, 190, 194, 195, 197, 199, 201, 202, 204, 206, 207, 208, 211, 212, 218, 219, 221, 227, 229, 230, 231, 243, 244, 250, 256, 260, 261, 265, 277, 280, 282, 283, 288, 289], "over": [4, 7, 8, 10, 12, 15, 20, 22, 25, 32, 35, 41, 42, 43, 44, 53, 54, 57, 61, 62, 63, 64, 65, 66, 67, 76, 78, 85, 87, 91, 92, 95, 98, 99, 102, 105, 106, 114, 120, 126, 143, 144, 155, 171, 174, 176, 180, 181, 192, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 214, 216, 218, 223, 224, 226, 227, 229, 230, 231, 232, 233, 235, 236, 245, 249, 250, 256, 259, 263, 266, 282, 286, 288], "defeat": [4, 227], "three": [4, 11, 12, 14, 16, 18, 20, 29, 30, 35, 39, 43, 53, 54, 55, 58, 62, 63, 67, 70, 72, 76, 77, 78, 87, 91, 92, 105, 106, 120, 125, 129, 132, 133, 134, 149, 171, 173, 178, 186, 190, 194, 195, 196, 197, 198, 199, 202, 204, 207, 211, 221, 223, 224, 229, 230, 231, 242, 256, 258, 263, 266, 280, 283, 288], "natur": [4, 12, 18, 27, 35, 39, 43, 44, 45, 53, 62, 63, 67, 68, 96, 102, 126, 178, 180, 181, 198, 201, 202, 204, 206, 208, 211, 219, 220, 224, 230, 231, 249, 266, 283, 288], "heavili": [4, 218, 228], "consider": [4, 19, 62, 103, 116, 201, 210, 219, 224, 227, 260], "easi": [4, 11, 50, 54, 62, 70, 87, 103, 123, 130, 136, 194, 198, 201, 206, 211, 218, 221, 224, 227, 230, 235, 236, 237, 277, 278, 280, 281, 282, 283, 284, 287], "account": [4, 11, 68, 98, 214, 223, 227], "nonetheless": [4, 63, 178, 223, 227], "deprecat": 4, "won": [4, 12, 20, 43, 223, 230, 283], "until": [4, 16, 18, 22, 24, 25, 26, 27, 28, 29, 30, 34, 54, 56, 62, 63, 72, 89, 98, 102, 140, 195, 204, 207, 220, 227, 280], "come": [4, 27, 33, 53, 58, 60, 61, 62, 68, 70, 87, 89, 98, 103, 116, 126, 128, 138, 179, 195, 198, 201, 204, 206, 207, 221, 224, 227, 230, 240, 242, 247, 250, 280, 282, 283, 286, 288], "minimum": [4, 10, 26, 41, 43, 53, 54, 56, 58, 62, 63, 66, 68, 98, 116, 121, 128, 160, 185, 197, 199, 204, 230, 231, 245, 278], "longer": [4, 6, 12, 17, 62, 72, 102, 130, 140, 199, 204, 211, 220, 223, 249, 252, 280, 288], "especi": [4, 6, 20, 31, 61, 98, 116, 126, 143, 170, 185, 195, 223, 227, 229, 242, 277, 278], "hard": [4, 8, 11, 18, 54, 63, 98, 102, 126, 176, 201, 211, 218, 227, 230, 280, 282], "migrat": 4, "lengthen": 4, "impos": [4, 106], "signific": [4, 12, 18, 43, 62, 63, 66, 89, 98, 116, 141, 170, 201, 230, 250, 283], "mainten": [4, 38], "burden": [4, 211], "keep": [4, 6, 12, 15, 20, 58, 62, 63, 66, 67, 70, 87, 98, 121, 129, 137, 141, 160, 176, 197, 200, 201, 202, 207, 218, 219, 221, 223, 227, 229, 232, 237, 265, 278, 283], "firstli": [4, 10, 18, 20, 221], "regular": [4, 10, 12, 18, 19, 44, 50, 62, 63, 66, 70, 78, 84, 85, 89, 102, 126, 170, 201, 208, 227, 237, 242, 287, 288], "schedul": 4, "Being": [4, 58, 72, 78, 201], "assur": [4, 102, 207], "suffici": [4, 6, 18, 42, 43, 53, 54, 58, 62, 98, 181, 202, 214, 218, 227, 231, 246, 288], "regardless": [4, 6, 20, 54, 62, 89, 102, 204, 219, 223, 249, 260, 265, 288], "often": [4, 6, 11, 18, 19, 20, 22, 28, 42, 43, 44, 52, 62, 70, 72, 74, 87, 89, 98, 102, 103, 112, 136, 140, 185, 194, 195, 198, 199, 201, 204, 207, 212, 218, 219, 224, 227, 231, 249, 250, 277, 282, 283, 284, 288], "happen": [4, 6, 10, 11, 16, 18, 19, 20, 26, 35, 43, 54, 61, 62, 66, 74, 77, 86, 120, 171, 175, 181, 198, 204, 206, 207, 210, 219, 223, 227, 231, 250, 261, 280, 287, 288], "secondli": [4, 20, 221], "rigor": [4, 70, 195, 244], "semant": [4, 11, 18, 95, 229], "surfac": [4, 68, 70, 76, 87, 106, 120, 145, 149, 176, 197, 223, 256], "enough": [4, 6, 24, 26, 53, 62, 66, 89, 98, 101, 102, 112, 126, 143, 202, 204, 211, 227, 278, 280], "encod": [4, 10, 46, 54, 60, 63, 92, 211, 242, 246, 249], "backport": 4, "prior": [4, 10, 33, 190, 207, 223, 284], "extrem": [4, 27, 53, 66, 72, 78, 89, 95, 108, 140, 195, 223, 231], "accur": [4, 10, 12, 16, 20, 22, 41, 53, 62, 66, 67, 84, 89, 109, 197, 218, 277, 284], "model": [4, 11, 66, 92, 102, 112, 122, 128, 130, 131, 132, 148, 207, 220, 231], "final": [4, 6, 7, 10, 18, 20, 29, 42, 54, 61, 62, 68, 70, 87, 89, 92, 98, 102, 106, 110, 120, 121, 128, 133, 135, 136, 138, 141, 156, 168, 171, 173, 174, 176, 178, 179, 181, 186, 194, 195, 198, 201, 204, 206, 213, 219, 220, 221, 223, 224, 227, 229, 230, 237, 249, 250, 281, 282, 283], "temptat": [4, 220, 288], "fudg": 4, "earli": [4, 62, 102, 165, 224], "acceler": [4, 103, 123, 128, 133, 135, 140, 141, 143, 179, 186, 190, 192, 246, 265], "myst": [4, 7], "checkbox": 4, "tag": [4, 211, 229], "nest": [4, 25, 29, 62, 64, 68, 70, 89, 93, 112, 199, 201, 204, 211, 221, 223, 226, 230, 231, 232, 233, 235, 238, 249, 250, 283], "ensur": [4, 12, 20, 22, 24, 25, 26, 27, 30, 33, 62, 63, 66, 94, 98, 120, 141, 206, 207, 211, 242, 247, 250], "realli": [4, 10, 11, 16, 18, 19, 20, 62, 74, 102, 128, 178, 201, 210, 212, 218, 220, 221, 223, 227, 243, 252, 280, 282], "per": [4, 63, 98, 103, 108, 150, 180, 186, 192, 197, 202, 207, 208, 256, 260, 262, 265], "everywher": [4, 11, 12, 62, 70, 87, 112, 192, 249, 265], "doctest": [4, 6, 7, 12, 20, 55, 70, 98, 102, 128, 165, 176, 201, 207, 227, 242, 245, 247, 287], "sympy_deprecation_warn": [4, 240, 245, 247], "write": [4, 8, 10, 11, 16, 18, 19, 21, 22, 34, 43, 51, 62, 63, 69, 70, 87, 89, 95, 143, 156, 194, 195, 199, 202, 204, 206, 211, 220, 221, 224, 227, 230, 236, 242, 243, 244, 250, 281, 282, 283, 288], "multilin": [4, 211], "deprecated_since_vers": [4, 240, 245, 247], "active_deprecations_target": [4, 240, 245, 247], "target": [4, 6, 11, 41, 42, 43, 45, 62, 102, 118, 156, 160, 161, 180, 220, 223, 226, 229, 230, 240, 243, 244, 247, 288], "md": [4, 7, 240, 247], "stacklevel": [4, 240, 245, 247], "line": [4, 6, 10, 11, 12, 16, 18, 33, 42, 43, 45, 53, 54, 58, 63, 72, 73, 74, 76, 77, 78, 79, 84, 87, 89, 90, 91, 98, 102, 105, 110, 113, 126, 128, 134, 156, 186, 191, 192, 194, 196, 197, 211, 214, 221, 223, 227, 231, 232, 240, 242, 243, 244, 247, 250, 252, 263, 266, 274, 280], "visual": [4, 62, 102, 106, 112, 210, 223], "confirm": [4, 10, 53, 102, 227], "look": [4, 6, 7, 10, 12, 18, 19, 20, 34, 42, 43, 53, 62, 67, 68, 70, 83, 98, 102, 121, 126, 128, 136, 160, 170, 171, 174, 190, 197, 201, 202, 206, 211, 213, 214, 218, 221, 223, 224, 227, 228, 233, 242, 246, 250, 252, 261, 278, 283, 286, 287], "good": [4, 7, 11, 18, 20, 25, 31, 43, 62, 63, 66, 74, 87, 98, 102, 128, 140, 143, 198, 201, 202, 211, 218, 220, 221, 223, 227, 249, 277, 281, 284], "top": [4, 6, 7, 10, 11, 24, 43, 61, 62, 63, 78, 79, 89, 92, 98, 105, 106, 120, 125, 171, 178, 201, 211, 221, 227, 244, 245, 250, 266, 283], "relev": [4, 6, 7, 10, 18, 43, 60, 75, 90, 91, 117, 121, 123, 128, 181, 191, 195, 201, 221, 227, 228, 237, 242, 264], "docstr": [4, 8, 10, 12, 20, 24, 42, 43, 55, 62, 84, 87, 89, 98, 102, 107, 111, 113, 119, 136, 141, 146, 163, 169, 170, 172, 189, 193, 207, 214, 217, 218, 220, 223, 227, 228, 229, 230, 236, 237, 242, 245, 250, 252, 257, 264, 267, 271, 273], "src": [4, 6, 7, 104, 227, 242, 247], "explan": [4, 7, 12, 14, 18, 21, 35, 36, 37, 38, 39, 40, 42, 43, 47, 50, 51, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 68, 70, 74, 84, 85, 87, 89, 93, 98, 102, 112, 115, 117, 118, 120, 121, 123, 134, 145, 147, 150, 153, 155, 157, 159, 171, 176, 196, 197, 198, 200, 202, 206, 207, 209, 213, 214, 216, 217, 218, 219, 221, 223, 224, 227, 229, 231, 232, 233, 236, 237, 242, 245, 247, 249, 250, 285], "cross": [4, 7, 8, 11, 62, 72, 78, 93, 98, 105, 106, 120, 123, 134, 141, 143, 156, 186, 188, 194, 195, 224, 230, 256, 260, 262, 263], "xyz": [4, 35, 74, 104, 105, 186, 195, 256, 258, 261], "header": [4, 43, 243, 244], "why": [4, 10, 12, 18, 43, 62, 195, 202, 208, 218, 221, 250, 281, 283, 284], "test": [4, 6, 7, 8, 11, 12, 17, 19, 20, 24, 25, 38, 39, 41, 42, 43, 49, 53, 54, 61, 62, 63, 69, 72, 77, 87, 93, 95, 98, 102, 156, 165, 169, 170, 171, 179, 195, 201, 202, 204, 206, 208, 219, 221, 224, 227, 228, 229, 230, 240, 243, 244, 245, 246, 247, 249, 250, 252, 267, 268, 275, 280, 282, 283], "warns_deprecated_sympi": [4, 240, 245, 247], "pr": [4, 10, 61, 120, 202, 204, 205, 207, 230], "merg": [4, 43, 53, 54, 62, 184, 211, 219, 231, 242, 249, 250], "wiki": [4, 5, 6, 7, 8, 12, 18, 20, 32, 35, 37, 38, 39, 41, 42, 43, 45, 50, 51, 53, 54, 61, 62, 63, 64, 65, 67, 68, 70, 72, 74, 78, 79, 80, 89, 90, 91, 92, 93, 95, 98, 102, 110, 112, 115, 145, 147, 148, 149, 151, 152, 153, 157, 158, 159, 162, 164, 165, 174, 176, 180, 186, 188, 193, 197, 200, 207, 214, 218, 219, 220, 224, 227, 230, 231, 244, 249, 256, 258, 262, 264, 266, 284, 285], "decor": [4, 20, 53, 62, 70, 240, 242, 247, 248, 251, 252, 275], "sympydeprecationwarn": [4, 10, 240, 242, 245, 247], "class": [4, 7, 8, 10, 11, 12, 17, 18, 19, 20, 22, 26, 27, 31, 32, 35, 36, 37, 38, 39, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 62, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 104, 105, 108, 109, 110, 112, 117, 120, 121, 122, 123, 125, 126, 130, 131, 136, 137, 141, 143, 144, 145, 147, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 184, 185, 189, 190, 191, 193, 198, 200, 201, 202, 204, 207, 208, 209, 210, 212, 213, 214, 217, 218, 219, 221, 223, 227, 228, 229, 230, 231, 233, 236, 237, 238, 242, 243, 244, 245, 246, 247, 249, 250, 254, 257, 260, 261, 263, 264, 266, 267, 271, 273, 278, 280, 283, 288], "context": [4, 6, 7, 10, 14, 18, 20, 28, 36, 37, 38, 62, 64, 70, 92, 126, 181, 201, 204, 206, 219, 240, 242, 247, 256], "manag": [4, 33, 37, 38, 104, 156, 204, 223, 237, 240, 242, 247], "filter": [4, 10, 15, 26, 62, 63, 87, 148, 207, 240, 242, 247, 249], "emit": [4, 211, 240, 247], "assert": [4, 42, 51, 52, 53, 54, 62, 72, 74, 104, 140, 200, 211, 219, 227, 228, 240, 247, 249], "separ": [4, 6, 10, 11, 12, 16, 19, 20, 24, 30, 42, 50, 62, 63, 68, 70, 87, 89, 98, 113, 120, 125, 140, 141, 144, 149, 173, 176, 185, 186, 197, 199, 202, 204, 207, 208, 211, 220, 223, 224, 227, 228, 230, 235, 240, 242, 246, 250, 252, 256, 280], "block": [4, 6, 31, 43, 51, 53, 63, 93, 98, 120, 125, 126, 128, 131, 186, 195, 200, 224, 250, 260], "behavior1": 4, "behavior2": 4, "everyth": [4, 7, 12, 20, 43, 62, 64, 70, 89, 96, 114, 140, 172, 173, 197, 211, 283, 287], "els": [4, 10, 11, 18, 19, 20, 24, 43, 52, 54, 58, 62, 63, 70, 72, 76, 78, 79, 87, 89, 92, 98, 102, 112, 176, 186, 197, 202, 206, 207, 211, 212, 219, 223, 227, 229, 230, 235, 237, 242, 249, 252, 256, 259, 277, 283], "anywher": [4, 6, 10, 18, 43, 62, 70, 76, 176, 252, 282], "ignore_warn": [4, 240, 245, 247, 250], "prevent": [4, 12, 26, 31, 43, 62, 68, 99, 102, 116, 200, 202, 207, 211, 223, 231, 240, 247, 279], "trigger": [4, 20, 54, 104, 176, 240], "twice": [4, 12, 43, 62, 64, 76, 102, 186, 188, 194, 207, 211, 246, 247, 256, 258, 278], "similar": [4, 5, 10, 12, 16, 18, 20, 22, 54, 61, 62, 63, 66, 67, 68, 70, 73, 78, 79, 83, 92, 98, 103, 112, 126, 128, 130, 140, 141, 174, 192, 194, 195, 199, 201, 202, 204, 208, 218, 220, 221, 223, 227, 229, 232, 237, 240, 243, 246, 247, 256, 258, 260, 261, 265, 277, 282, 283, 284, 286, 288], "somewher": [4, 6, 7, 11, 43], "sign": [4, 6, 7, 11, 22, 26, 31, 35, 40, 43, 58, 62, 63, 67, 68, 72, 78, 87, 89, 98, 102, 105, 106, 108, 112, 128, 149, 161, 186, 192, 194, 196, 204, 211, 216, 218, 223, 224, 229, 249, 263, 266, 281], "readi": [4, 18, 125, 201, 211, 227], "paragraph": [4, 6, 7, 20, 42], "metadata": [4, 42, 245, 247], "link": [4, 6, 7, 11, 12, 23, 27, 43, 63, 72, 78, 89, 113, 120, 129, 137, 243, 246, 247, 286], "rememb": [4, 6, 12, 20, 29, 92, 98, 113, 116, 143, 194, 195, 211, 223, 229, 232, 250, 283, 288], "shown": [4, 6, 10, 11, 18, 19, 20, 51, 54, 61, 62, 66, 68, 70, 87, 104, 106, 110, 112, 116, 121, 123, 129, 130, 131, 137, 138, 139, 141, 185, 186, 194, 195, 197, 200, 201, 202, 207, 211, 227, 231, 247, 249, 260, 261, 281], "plain": [4, 6, 18, 62, 70, 90, 191, 207, 211], "rst": [4, 6, 7, 11, 44, 227, 242], "markdown": [4, 8, 11], "markup": [4, 211], "clearli": [4, 6, 20, 102, 195, 201, 221, 284], "delin": 4, "newlin": [4, 98, 252], "charact": [4, 6, 7, 62, 63, 87, 90, 104, 156, 186, 191, 211, 227, 242, 244, 247, 252, 280, 282, 287], "full": [4, 6, 7, 8, 9, 10, 12, 14, 18, 20, 25, 32, 39, 41, 43, 53, 54, 62, 66, 70, 74, 75, 89, 95, 98, 104, 138, 139, 186, 201, 204, 205, 207, 211, 213, 223, 224, 250, 282, 285, 288], "abc": [4, 6, 12, 14, 15, 20, 22, 24, 26, 28, 29, 30, 31, 35, 36, 37, 38, 39, 40, 41, 43, 51, 53, 55, 61, 62, 63, 64, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 85, 86, 87, 89, 90, 92, 93, 95, 98, 101, 103, 110, 112, 114, 147, 149, 151, 152, 157, 174, 176, 177, 198, 200, 202, 204, 206, 207, 208, 211, 212, 213, 214, 216, 217, 218, 219, 220, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 236, 238, 243, 244, 245, 246, 247, 249, 250, 252, 256, 259, 260, 261, 266, 268, 280, 283, 287], "func": [4, 6, 11, 17, 20, 37, 41, 43, 62, 64, 67, 70, 81, 83, 102, 165, 186, 204, 207, 211, 212, 223, 227, 228, 229, 240, 245, 247, 249, 250, 252, 255], "larger": [4, 7, 11, 20, 27, 43, 53, 54, 61, 62, 63, 70, 87, 95, 98, 102, 130, 134, 200, 202, 208, 212, 218, 223, 229, 244, 246, 280, 288], "easier": [4, 11, 19, 30, 45, 62, 106, 126, 128, 194, 202, 206, 208, 221, 227, 230, 244, 250, 260, 282, 288, 289], "exactli": [4, 6, 7, 10, 11, 12, 20, 22, 29, 31, 39, 46, 53, 62, 65, 66, 98, 104, 141, 196, 221, 223, 227, 230, 232, 246, 249, 250, 278, 280, 282, 287, 288], "direct": [4, 6, 7, 10, 11, 17, 29, 35, 37, 38, 42, 47, 50, 53, 58, 61, 62, 64, 66, 68, 71, 75, 76, 77, 78, 92, 93, 98, 105, 106, 108, 116, 117, 120, 128, 130, 134, 143, 162, 186, 192, 194, 195, 198, 200, 201, 204, 208, 218, 221, 237, 240, 249, 256, 261, 262, 265], "syntax": [4, 6, 7, 10, 11, 12, 20, 29, 36, 38, 54, 62, 89, 104, 126, 143, 173, 197, 201, 210, 211, 223, 229, 233, 252, 278, 280, 282, 287, 289], "paramet": [4, 7, 10, 11, 12, 22, 28, 30, 35, 36, 38, 41, 43, 44, 45, 53, 54, 58, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 85, 87, 89, 90, 92, 93, 95, 98, 99, 101, 102, 104, 105, 108, 110, 112, 113, 114, 116, 117, 118, 120, 121, 122, 123, 125, 126, 128, 143, 145, 147, 148, 149, 151, 152, 153, 155, 156, 157, 159, 160, 161, 164, 165, 166, 168, 170, 171, 173, 174, 175, 176, 177, 178, 180, 186, 187, 188, 190, 191, 192, 195, 196, 197, 199, 200, 202, 204, 206, 207, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 223, 224, 226, 227, 228, 229, 231, 232, 233, 236, 237, 240, 242, 243, 244, 246, 247, 249, 250, 256, 258, 259, 260, 261, 266, 278, 283], "short": [4, 7, 12, 34, 44, 52, 54, 58, 62, 63, 64, 65, 68, 96, 102, 116, 162, 181, 185, 195, 198, 205, 232, 242, 252, 283, 287], "renam": [4, 43, 89], "rest": [4, 10, 87, 90, 92, 96, 106, 114, 126, 130, 136, 181, 198, 201, 231, 249, 280, 281, 288], "left": [4, 7, 10, 16, 18, 20, 23, 24, 27, 35, 41, 43, 44, 53, 54, 58, 62, 63, 64, 67, 68, 70, 78, 79, 85, 87, 89, 90, 92, 93, 98, 101, 102, 112, 117, 125, 141, 148, 155, 160, 164, 165, 168, 173, 186, 192, 196, 197, 198, 200, 207, 208, 209, 210, 211, 213, 214, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 242, 243, 244, 246, 249, 263, 278, 282, 284, 288], "imaginari": [4, 6, 12, 18, 20, 22, 26, 28, 35, 39, 40, 62, 66, 68, 70, 93, 143, 201, 202, 207, 211, 212, 219, 223, 230], "simplify_thi": [4, 6, 245], "expr": [4, 6, 11, 12, 18, 20, 26, 28, 31, 37, 38, 40, 41, 43, 54, 61, 64, 66, 68, 70, 72, 84, 87, 89, 92, 95, 98, 103, 104, 112, 116, 118, 126, 140, 153, 157, 159, 161, 165, 168, 171, 173, 174, 176, 183, 186, 188, 191, 197, 199, 200, 201, 202, 204, 206, 207, 208, 209, 211, 212, 213, 214, 216, 218, 220, 223, 226, 227, 228, 229, 230, 231, 232, 233, 235, 237, 238, 243, 244, 245, 247, 250, 256, 258, 259, 260, 261, 263, 277, 278, 280, 282, 283, 287, 288, 289], "simplifi": [4, 6, 11, 12, 16, 18, 19, 20, 27, 28, 29, 36, 38, 40, 41, 61, 62, 64, 66, 67, 68, 70, 74, 79, 84, 87, 89, 92, 93, 94, 95, 98, 105, 112, 113, 118, 120, 122, 129, 130, 133, 134, 135, 140, 148, 155, 160, 175, 176, 180, 183, 186, 192, 198, 206, 208, 210, 212, 217, 219, 220, 221, 224, 227, 228, 229, 230, 231, 233, 245, 247, 250, 260, 262, 268, 277, 279, 280, 282, 283, 284], "def": [4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 37, 38, 42, 62, 67, 74, 92, 98, 102, 104, 134, 171, 201, 207, 211, 220, 223, 230, 245, 247, 249, 250, 253, 277, 280, 283, 284, 288], "ref": [4, 53, 68, 98, 110, 143, 216, 231, 245, 284], "is_this_zero": [4, 247], "y": [4, 6, 10, 11, 12, 14, 15, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 53, 54, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 85, 87, 89, 90, 91, 92, 93, 94, 95, 98, 102, 103, 104, 105, 106, 108, 110, 112, 117, 118, 120, 123, 126, 128, 129, 130, 131, 133, 134, 135, 137, 141, 143, 144, 153, 154, 157, 160, 165, 171, 173, 174, 176, 177, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 243, 244, 247, 249, 250, 252, 256, 259, 260, 261, 262, 263, 265, 266, 277, 278, 280, 282, 283, 287, 288, 289], "0": [4, 6, 10, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 117, 118, 120, 121, 123, 126, 128, 129, 130, 131, 133, 135, 138, 139, 140, 141, 143, 144, 145, 148, 149, 150, 152, 155, 160, 161, 162, 165, 170, 171, 172, 173, 174, 175, 176, 177, 181, 183, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 240, 242, 243, 245, 246, 247, 249, 250, 251, 256, 258, 259, 260, 261, 262, 263, 266, 277, 278, 280, 282, 283, 284, 287, 288, 289], "zero": [4, 11, 12, 14, 18, 19, 20, 27, 28, 35, 39, 40, 43, 52, 53, 54, 58, 61, 62, 65, 66, 67, 68, 70, 72, 76, 77, 78, 87, 89, 91, 92, 93, 95, 97, 98, 101, 102, 104, 105, 112, 120, 123, 126, 128, 131, 134, 137, 138, 139, 143, 148, 170, 174, 176, 178, 190, 192, 194, 195, 196, 198, 199, 200, 201, 202, 206, 207, 209, 211, 214, 218, 219, 221, 223, 224, 227, 228, 229, 230, 231, 232, 247, 249, 250, 260, 262, 263, 283, 289], "is_zero": [4, 18, 20, 77, 98, 198, 202, 207, 247, 284], "mail": [4, 10, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 211, 281], "summar": [4, 242, 288], "idea": [4, 11, 18, 19, 20, 47, 53, 60, 62, 63, 74, 80, 87, 89, 102, 113, 126, 176, 180, 181, 198, 200, 201, 220, 223, 224, 227, 230, 244, 250, 288], "fit": [4, 11, 42, 87, 98, 101, 102, 195, 211, 227, 252, 283], "put": [4, 6, 10, 11, 12, 16, 20, 24, 43, 58, 59, 62, 63, 64, 68, 92, 93, 98, 148, 153, 157, 172, 173, 207, 211, 212, 220, 221, 223, 227, 232, 238, 243, 284, 288], "word": [4, 7, 11, 20, 39, 58, 61, 62, 63, 68, 70, 92, 112, 121, 126, 141, 198, 201, 206, 223, 224, 227, 229, 244, 256, 261, 280], "global": [4, 6, 10, 36, 37, 38, 41, 43, 44, 62, 74, 87, 104, 160, 166, 186, 188, 197, 198, 201, 202, 204, 211, 224, 227, 228, 231, 242, 244, 245, 250, 259], "uniqu": [4, 10, 11, 41, 42, 44, 53, 56, 58, 62, 63, 64, 67, 70, 77, 80, 85, 89, 91, 92, 98, 102, 120, 165, 174, 186, 195, 198, 199, 201, 204, 206, 207, 212, 216, 223, 224, 227, 229, 230, 231, 235, 244, 249, 252, 260, 265, 280, 283], "across": [4, 7, 53, 60, 62, 73, 89, 106, 175, 176, 183, 197, 211, 246, 248, 249, 250, 286], "level": [4, 6, 7, 10, 11, 12, 18, 19, 24, 26, 43, 53, 60, 62, 68, 70, 89, 92, 98, 102, 116, 130, 143, 171, 176, 181, 185, 188, 195, 197, 200, 201, 209, 211, 220, 224, 230, 231, 235, 243, 244, 249, 283, 284, 286], "correspond": [4, 6, 7, 10, 16, 18, 19, 20, 25, 29, 41, 42, 43, 44, 52, 53, 54, 56, 57, 58, 61, 62, 63, 64, 65, 68, 70, 72, 73, 75, 76, 77, 78, 85, 87, 91, 92, 93, 98, 101, 102, 105, 106, 112, 118, 120, 121, 125, 126, 128, 130, 144, 148, 152, 166, 170, 171, 173, 177, 178, 181, 186, 190, 192, 196, 197, 199, 200, 201, 202, 204, 206, 207, 211, 217, 218, 221, 223, 224, 227, 228, 229, 230, 231, 233, 235, 236, 237, 244, 245, 246, 247, 249, 250, 252, 256, 258, 260, 261, 263, 265, 283, 289], "share": [4, 18, 20, 63, 102, 202, 206, 211, 231, 244], "__init__": [4, 6, 20, 62, 121, 206, 256, 258, 283], "func_nam": [4, 43, 68, 93, 252], "help": [4, 5, 6, 7, 18, 26, 34, 43, 52, 62, 70, 87, 89, 98, 102, 103, 105, 110, 126, 143, 151, 161, 195, 197, 206, 208, 211, 220, 221, 224, 227, 228, 231, 242, 243, 244, 250, 273, 281, 284], "rais": [4, 10, 12, 14, 18, 19, 20, 36, 38, 41, 43, 51, 54, 62, 63, 64, 66, 68, 71, 72, 75, 77, 78, 79, 87, 89, 93, 95, 98, 99, 101, 102, 110, 112, 150, 162, 192, 195, 198, 199, 200, 201, 202, 204, 206, 207, 208, 211, 213, 219, 223, 226, 227, 228, 229, 230, 231, 235, 237, 240, 242, 244, 247, 249, 250, 252, 253, 263, 284], "been": [4, 12, 18, 20, 22, 41, 43, 44, 53, 54, 55, 58, 61, 62, 63, 68, 74, 87, 89, 98, 102, 103, 104, 120, 121, 126, 128, 136, 140, 141, 149, 161, 171, 173, 181, 185, 192, 193, 194, 195, 198, 201, 202, 206, 208, 209, 211, 213, 218, 221, 223, 228, 229, 230, 232, 233, 241, 242, 244, 245, 247, 249, 252, 260, 263, 280, 281, 283, 284, 288], "simplfiy_thi": 4, "ident": [4, 11, 12, 20, 39, 42, 44, 52, 53, 54, 60, 62, 63, 67, 68, 78, 85, 91, 93, 95, 98, 113, 115, 120, 121, 141, 160, 162, 165, 181, 198, 199, 200, 204, 205, 206, 207, 211, 220, 223, 227, 230, 235, 237, 242, 249, 250, 252, 261, 280, 284, 288], "much": [4, 6, 16, 18, 19, 20, 22, 28, 42, 43, 47, 58, 66, 70, 84, 87, 89, 140, 184, 185, 194, 195, 196, 198, 201, 204, 207, 218, 221, 223, 227, 228, 229, 230, 244, 246, 280, 282, 288], "trivial": [4, 44, 53, 58, 61, 62, 63, 68, 77, 92, 95, 98, 102, 138, 176, 198, 199, 204, 207, 221, 224, 227, 230, 235], "furthermor": [4, 10, 20, 39, 62, 63, 92, 206, 220, 280, 282, 283], "particular": [4, 6, 10, 11, 12, 18, 19, 23, 25, 39, 44, 53, 62, 63, 66, 70, 73, 87, 89, 92, 95, 98, 102, 105, 108, 136, 160, 171, 199, 200, 201, 202, 204, 206, 207, 217, 219, 221, 223, 224, 227, 229, 230, 242, 244, 246, 284, 286, 288], "expr1": [4, 18, 112, 197, 229, 283], "expr2": [4, 18, 112, 197, 283], "dozen": [4, 11, 20, 288], "search": [4, 6, 23, 41, 45, 53, 54, 58, 60, 62, 68, 98, 102, 126, 198, 206, 207, 211, 220, 221, 223, 228, 231, 243], "upcom": 4, "bot": 4, "push": [5, 87], "respect": [5, 6, 10, 11, 12, 20, 29, 36, 38, 39, 41, 42, 43, 44, 52, 53, 54, 57, 58, 60, 61, 62, 64, 67, 68, 70, 72, 74, 78, 79, 84, 85, 87, 89, 92, 93, 95, 98, 102, 104, 105, 106, 108, 112, 117, 118, 120, 123, 130, 137, 139, 141, 143, 150, 165, 178, 179, 185, 186, 190, 192, 195, 196, 197, 198, 201, 204, 206, 207, 208, 211, 213, 214, 217, 219, 223, 227, 228, 229, 230, 231, 232, 236, 237, 242, 244, 256, 258, 259, 260, 261, 262, 263, 264, 265, 278, 288], "handbook": [5, 6, 44, 52, 53, 60, 70, 102], "internet": 5, "practic": [5, 8, 16, 18, 22, 25, 28, 31, 51, 53, 62, 63, 72, 137, 140, 143, 197, 198, 199, 201, 206, 208, 235, 280, 281], "project": [5, 7, 10, 43, 45, 75, 76, 77, 91, 98, 142, 243, 244, 250, 256], "purpos": [5, 6, 7, 8, 10, 11, 17, 18, 20, 29, 42, 43, 53, 59, 62, 63, 89, 98, 126, 143, 181, 185, 195, 201, 204, 208, 210, 211, 218, 227, 230, 236, 246, 248, 250, 260, 261, 278, 288], "nn": 5, "brows": 5, "clone": [5, 33, 204], "download": [5, 7, 33, 42, 84, 205, 220, 227, 256, 282], "origin": [5, 11, 12, 16, 18, 25, 33, 35, 53, 54, 55, 58, 61, 62, 63, 66, 67, 68, 70, 71, 73, 75, 77, 87, 89, 93, 98, 102, 110, 112, 113, 120, 130, 140, 143, 168, 171, 181, 187, 192, 197, 198, 200, 202, 206, 207, 210, 211, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 237, 242, 249, 250, 256, 259, 260, 261, 262, 263, 265, 266, 288], "77": [5, 51, 70, 98, 102, 210, 211, 244], "mib": 5, "remot": [5, 62], "collabor": 5, "upstream": 5, "fetch": 5, "branch": [5, 19, 41, 62, 67, 68, 69, 70, 208, 221, 230, 283, 288], "checkout": [5, 42], "advantag": [5, 10, 14, 18, 20, 22, 38, 41, 43, 62, 63, 67, 89, 92, 98, 102, 109, 180, 200, 201, 208, 219, 224, 227, 230, 246, 280, 282, 284, 288], "isol": [5, 22, 41, 68, 202, 206, 207, 208, 229, 244], "wide": [5, 18, 90, 98, 143, 191, 201, 207, 211, 231], "flake8": 5, "comprehens": [5, 10, 18, 26, 27, 29, 205, 219, 231, 277], "usernam": 5, "easiest": [5, 7, 10, 11, 12, 62, 198, 201, 224, 250, 261, 277, 283, 288], "consult": [5, 44], "kwarg": [5, 12, 37, 38, 39, 43, 53, 54, 61, 62, 63, 64, 68, 70, 72, 73, 75, 76, 77, 78, 79, 84, 87, 89, 93, 94, 95, 96, 98, 100, 101, 110, 112, 118, 121, 130, 145, 154, 156, 160, 161, 165, 167, 169, 170, 172, 173, 174, 186, 190, 191, 197, 200, 202, 207, 211, 213, 217, 218, 219, 223, 227, 228, 229, 231, 232, 233, 237, 242, 243, 245, 249, 252, 261], "test_bas": [5, 242], "similarli": [5, 10, 18, 22, 29, 58, 62, 63, 70, 74, 98, 105, 106, 112, 121, 141, 180, 197, 198, 201, 206, 208, 218, 219, 221, 227, 242, 250, 261, 262, 284], "qualiti": [5, 103, 211], "code_qu": 5, "liter": [6, 12, 20, 43, 52, 62, 90, 92, 104, 176, 183, 223], "occur": [6, 10, 11, 12, 53, 54, 62, 66, 70, 79, 87, 93, 104, 116, 120, 140, 185, 186, 194, 206, 214, 223, 228, 229, 232, 233, 242, 249, 283], "definit": [6, 10, 11, 12, 19, 35, 39, 43, 44, 53, 54, 59, 61, 62, 64, 65, 67, 68, 70, 75, 78, 85, 87, 89, 93, 94, 95, 98, 102, 104, 120, 128, 133, 134, 141, 178, 181, 184, 186, 194, 195, 198, 199, 202, 207, 208, 211, 218, 231, 232, 243, 244, 245, 249, 250, 256, 260, 261, 262, 263, 278, 288], "__doc__": [6, 12], "attribut": [6, 11, 15, 18, 20, 37, 38, 42, 43, 53, 54, 62, 70, 71, 72, 75, 76, 77, 78, 95, 98, 104, 106, 112, 117, 120, 121, 122, 123, 125, 133, 141, 144, 165, 170, 174, 181, 185, 186, 192, 195, 197, 198, 201, 202, 206, 211, 219, 223, 224, 236, 237, 243, 245, 249, 250, 253, 260, 283], "fdiff": [6, 20, 43, 62, 68, 69, 70], "self": [6, 18, 20, 27, 35, 37, 38, 42, 43, 53, 54, 59, 61, 62, 64, 68, 71, 72, 73, 75, 76, 77, 78, 89, 93, 98, 102, 117, 128, 171, 176, 186, 188, 190, 198, 200, 202, 204, 206, 207, 211, 213, 218, 219, 237, 256], "argindex": [6, 20, 43, 62, 68, 69, 70], "heavisid": [6, 70, 87, 89, 211], "diff": [6, 10, 11, 16, 20, 26, 29, 41, 43, 62, 67, 68, 69, 70, 79, 84, 95, 98, 116, 118, 129, 130, 143, 174, 186, 188, 191, 192, 195, 197, 202, 207, 210, 211, 221, 227, 228, 229, 232, 233, 238, 260, 263, 278, 282, 289], "diracdelta": [6, 70, 89, 171, 176, 211], "what": [6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 32, 41, 43, 54, 56, 61, 62, 63, 64, 68, 69, 72, 73, 77, 87, 89, 91, 98, 102, 104, 117, 120, 121, 123, 126, 130, 137, 143, 175, 176, 179, 181, 186, 194, 195, 202, 204, 207, 210, 211, 212, 218, 220, 221, 223, 224, 227, 229, 236, 240, 242, 244, 245, 250, 260, 261, 266, 278, 280, 281, 283, 287, 288], "scope": [6, 43, 136, 140, 240, 288], "high": [6, 7, 12, 16, 18, 22, 26, 43, 62, 66, 67, 90, 102, 143, 191, 201, 206, 209, 211, 224, 229, 273, 284], "od": [6, 11, 20, 85, 121, 125, 136, 143, 225, 228, 268, 289], "seen": [6, 16, 18, 35, 54, 87, 89, 104, 108, 120, 125, 137, 181, 194, 198, 201, 204, 207, 227, 230, 247, 249, 260, 280, 283, 287], "hand": [6, 10, 16, 18, 20, 24, 29, 42, 43, 45, 54, 55, 62, 68, 70, 89, 92, 93, 98, 102, 105, 121, 125, 126, 140, 144, 148, 165, 168, 180, 186, 192, 195, 196, 198, 201, 202, 204, 206, 209, 221, 230, 242, 244, 246, 250, 253, 263, 265, 282], "less": [6, 7, 11, 16, 22, 25, 27, 35, 39, 43, 44, 45, 53, 54, 61, 62, 63, 66, 67, 68, 70, 76, 77, 78, 93, 98, 102, 110, 112, 126, 128, 176, 201, 204, 206, 207, 220, 221, 223, 224, 227, 229, 230, 231, 242, 244], "understand": [6, 12, 18, 19, 20, 31, 62, 63, 87, 126, 136, 138, 139, 143, 181, 194, 197, 200, 201, 206, 211, 221, 224, 243, 250, 279, 280, 287, 288], "clear": [6, 10, 18, 37, 52, 62, 87, 91, 117, 194, 195, 197, 202, 204, 207, 221, 229, 230, 237, 242, 246, 265, 280], "begin": [6, 10, 12, 18, 20, 23, 27, 29, 35, 62, 63, 67, 68, 70, 87, 93, 95, 98, 102, 130, 138, 139, 140, 141, 172, 181, 186, 195, 196, 200, 211, 221, 224, 227, 228, 230, 231, 242, 252, 280, 282, 284, 288], "convers": [6, 7, 10, 18, 25, 43, 62, 82, 104, 140, 180, 199, 200, 201, 202, 204, 206, 208, 211, 224, 236, 243, 256], "aim": [6, 7, 80, 87, 181, 198, 221, 227, 230, 281, 282], "comment": [6, 7, 43, 53, 126, 128, 208, 211, 244, 249], "distract": 6, "input": [6, 7, 11, 12, 20, 26, 29, 35, 41, 44, 58, 62, 63, 65, 66, 67, 68, 76, 89, 91, 92, 98, 102, 104, 109, 110, 112, 116, 120, 122, 125, 126, 128, 129, 130, 140, 143, 144, 149, 172, 186, 188, 190, 201, 202, 204, 207, 208, 209, 210, 211, 212, 219, 223, 224, 227, 229, 231, 233, 243, 244, 246, 247, 249, 250, 252, 277, 283, 284, 288], "consum": [6, 43, 70, 122, 140], "human": [6, 14, 87, 178, 207, 211], "beings": 6, "english": [6, 63], "likewis": [6, 18, 42, 105, 129, 130], "reader": [6, 7, 20, 42, 44, 141, 198, 211, 246, 281, 286], "machineri": [6, 62, 206, 250], "mind": [6, 12, 15, 18, 26, 62, 98, 141, 197, 218, 219, 265, 283], "platform": [6, 62, 176, 195, 227, 243], "anyon": [6, 7, 10, 32, 207, 211, 276, 286, 287], "restructuredtext": [6, 7], "extend": [6, 7, 18, 20, 25, 39, 43, 53, 54, 62, 63, 67, 74, 87, 89, 98, 102, 143, 184, 191, 197, 199, 202, 204, 206, 207, 208, 211, 218, 220, 224, 226, 227, 230, 231, 232, 244, 246, 280, 282], "concis": [6, 143], "quick": [6, 7, 20, 62, 98, 102, 223, 229, 250], "depth": [6, 7, 9, 12, 13, 32, 53, 62, 128, 197, 198, 211], "tripl": [6, 25, 79, 98, 195, 196, 198, 202, 206, 252], "quot": [6, 12, 43, 92, 211, 252], "raw": [6, 7, 43, 62, 63, 68, 103, 104, 170, 175, 201, 202, 207, 219, 223, 287], "backslash": [6, 62, 211], "blank": [6, 104, 122, 197], "close": [6, 11, 28, 43, 61, 62, 66, 67, 70, 78, 80, 87, 89, 91, 112, 129, 197, 198, 199, 205, 206, 219, 229, 230, 244, 278, 288], "rare": [6, 20, 62, 227, 231, 240, 280], "underlin": [6, 7], "numpydoc": [6, 7], "build": [6, 7, 8, 15, 37, 38, 43, 62, 64, 70, 92, 143, 170, 181, 186, 195, 198, 203, 206, 207, 208, 218, 231, 260, 277, 280, 283], "consist": [6, 7, 10, 11, 16, 18, 24, 26, 30, 42, 53, 54, 58, 62, 63, 67, 68, 70, 72, 78, 80, 87, 92, 105, 108, 120, 137, 141, 150, 170, 176, 181, 184, 190, 197, 199, 201, 202, 204, 219, 227, 229, 230, 231, 235, 240, 243, 244, 249, 281, 283], "review": [6, 7, 142], "head": [6, 15, 42, 62, 229, 231, 237, 252, 283], "plural": [6, 7], "length": [6, 10, 35, 43, 46, 52, 53, 54, 56, 60, 62, 63, 65, 67, 68, 70, 71, 75, 77, 78, 79, 92, 93, 98, 101, 102, 105, 106, 116, 121, 125, 129, 130, 131, 141, 145, 149, 173, 178, 179, 180, 181, 186, 190, 195, 206, 207, 211, 217, 221, 223, 227, 231, 242, 243, 249, 252, 256, 258, 266], "equal": [6, 10, 11, 14, 18, 19, 20, 22, 29, 31, 35, 39, 42, 43, 44, 51, 52, 53, 54, 58, 60, 61, 62, 63, 64, 66, 67, 68, 70, 75, 76, 77, 78, 79, 81, 87, 92, 93, 95, 98, 102, 105, 108, 112, 113, 117, 121, 123, 128, 138, 139, 160, 161, 176, 180, 181, 186, 190, 195, 198, 199, 200, 201, 202, 204, 206, 207, 209, 211, 217, 219, 221, 224, 227, 228, 229, 230, 231, 237, 242, 243, 244, 249, 252, 256, 261, 266, 278, 281, 289], "clutter": 6, "harder": [6, 10, 18, 62, 87, 201, 242], "minim": [6, 18, 20, 41, 53, 54, 58, 61, 62, 63, 87, 89, 92, 102, 117, 130, 145, 200, 201, 202, 204, 207, 210, 220, 223, 224, 229, 249, 253], "amount": [6, 42, 62, 63, 74, 120, 136, 186, 192, 195, 204, 214, 242, 256, 258], "deprec": [6, 8, 13, 24, 36, 54, 62, 89, 93, 115, 120, 140, 207, 211, 231, 237, 240, 241, 245, 247, 250], "notifi": 6, "awai": [6, 42, 44, 63, 105, 106, 108, 128, 206, 211], "encourag": [6, 10, 42, 138, 139, 206], "label": [6, 29, 42, 43, 56, 62, 72, 85, 89, 108, 149, 156, 160, 165, 174, 176, 197, 211, 212, 214, 223, 236, 237, 287], "elabor": [6, 21, 192, 263], "suffic": [6, 199, 229], "clarifi": 6, "complic": [6, 12, 14, 18, 20, 22, 28, 35, 43, 53, 61, 63, 64, 66, 67, 68, 70, 87, 89, 95, 136, 138, 176, 195, 201, 204, 208, 210, 221, 223, 230, 231, 235, 236, 244, 246, 250, 252, 278, 280, 283, 284], "demonstr": [6, 7, 12, 18, 20, 22, 26, 27, 28, 53, 54, 62, 89, 102, 117, 120, 126, 130, 131, 140, 198, 201, 262, 288], "api": [6, 7, 10, 18, 21, 25, 27, 43, 62, 74, 82, 103, 104, 111, 136, 143, 172, 185, 193, 197, 204, 224, 226, 250, 253, 260, 261, 264, 271, 273, 274, 281, 282, 285], "simpl": [6, 11, 12, 16, 18, 20, 28, 33, 42, 43, 53, 61, 62, 66, 70, 74, 78, 80, 87, 89, 91, 98, 102, 103, 105, 106, 112, 113, 116, 120, 121, 123, 125, 128, 130, 131, 133, 135, 136, 140, 144, 150, 164, 165, 173, 174, 175, 186, 194, 195, 201, 202, 203, 207, 208, 211, 213, 218, 220, 221, 223, 224, 227, 230, 237, 243, 244, 249, 253, 255, 256, 258, 259, 263, 277, 280, 283, 284, 288], "too": [6, 12, 20, 31, 53, 54, 62, 68, 70, 72, 75, 77, 87, 92, 101, 102, 103, 138, 145, 218, 219, 223, 224, 227, 229, 230, 231, 242, 243, 259, 260], "thought": [6, 11, 62, 218, 227, 280, 283], "perfect": [6, 20, 29, 53, 62, 102, 224, 230, 282, 283], "tell": [6, 7, 18, 19, 22, 26, 29, 43, 54, 63, 66, 70, 93, 104, 125, 181, 201, 206, 210, 218, 221, 227, 243, 280], "think": [6, 10, 11, 18, 19, 20, 26, 33, 41, 53, 128, 181, 246, 250, 280, 288], "test_": [6, 242], "coverage_doctest": 6, "coverag": 6, "6868680200532414": 6, "dsolv": [6, 11, 29, 227, 228, 229, 278, 282, 289], "co": [6, 10, 12, 20, 23, 24, 26, 28, 29, 30, 31, 35, 41, 43, 61, 62, 64, 66, 67, 68, 70, 71, 72, 75, 76, 78, 80, 84, 85, 86, 87, 89, 93, 98, 102, 104, 117, 118, 120, 126, 128, 129, 131, 133, 134, 135, 140, 143, 148, 150, 186, 188, 190, 192, 194, 195, 196, 197, 201, 204, 207, 208, 210, 211, 212, 213, 214, 218, 219, 220, 221, 223, 227, 229, 230, 231, 232, 238, 250, 256, 258, 259, 260, 261, 266, 277, 278, 280, 282, 288, 289], "sin": [6, 7, 10, 11, 12, 18, 20, 23, 26, 28, 29, 31, 33, 35, 41, 43, 61, 62, 64, 66, 67, 68, 70, 71, 72, 76, 80, 81, 84, 85, 86, 87, 89, 90, 93, 98, 103, 104, 114, 117, 118, 120, 125, 126, 128, 129, 131, 133, 134, 135, 140, 143, 148, 150, 174, 186, 188, 190, 192, 194, 195, 196, 197, 199, 201, 207, 208, 210, 211, 212, 213, 214, 218, 219, 220, 221, 223, 226, 227, 229, 230, 232, 238, 244, 250, 256, 258, 259, 260, 261, 266, 277, 278, 280, 282, 283, 288, 289], "hint": [6, 20, 42, 46, 53, 62, 65, 68, 89, 93, 98, 102, 112, 143, 153, 157, 173, 175, 176, 186, 207, 218, 221, 229, 288], "1st_exact": [6, 227], "eq": [6, 11, 12, 14, 18, 20, 24, 25, 29, 31, 39, 41, 43, 62, 67, 68, 70, 72, 75, 79, 87, 92, 179, 197, 198, 202, 207, 209, 211, 213, 217, 219, 220, 223, 224, 226, 227, 228, 229, 230, 231, 243, 244, 250, 256, 280, 282, 289], "c1": [6, 16, 29, 63, 72, 79, 93, 95, 120, 162, 176, 219, 224, 227, 229, 262, 289], "comma": [6, 7, 12, 43, 62, 211, 250, 280], "readabl": [6, 34, 42, 90, 116, 207, 210, 211, 218, 220, 253], "accept": [6, 11, 20, 24, 31, 42, 43, 53, 62, 68, 76, 89, 92, 93, 95, 98, 101, 104, 126, 170, 180, 186, 191, 197, 206, 207, 210, 211, 212, 219, 221, 223, 229, 243, 250, 256, 258, 261, 284], "rang": [6, 10, 11, 16, 20, 22, 25, 26, 41, 43, 51, 52, 53, 54, 56, 58, 62, 63, 67, 68, 70, 76, 93, 98, 102, 106, 110, 114, 145, 176, 197, 200, 201, 202, 203, 204, 206, 207, 208, 213, 214, 217, 219, 220, 223, 227, 230, 231, 232, 236, 242, 249, 277, 288], "30": [6, 35, 41, 43, 48, 62, 63, 65, 66, 67, 70, 76, 78, 89, 93, 98, 99, 102, 105, 106, 126, 149, 200, 202, 206, 207, 211, 217, 220, 223, 231, 232, 288], "7": [6, 12, 18, 20, 22, 25, 29, 35, 37, 38, 41, 43, 46, 48, 51, 52, 53, 54, 55, 56, 58, 60, 61, 62, 63, 65, 66, 67, 68, 70, 72, 75, 76, 77, 78, 84, 87, 89, 92, 93, 95, 96, 98, 102, 104, 105, 110, 112, 128, 135, 138, 139, 143, 176, 181, 183, 196, 197, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 213, 214, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 236, 237, 242, 243, 246, 249, 250, 256, 266, 278, 283, 284, 287], "8": [6, 16, 22, 28, 33, 35, 36, 41, 43, 46, 53, 54, 55, 58, 60, 62, 63, 65, 66, 67, 68, 70, 72, 75, 76, 78, 84, 87, 89, 91, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 110, 112, 114, 128, 143, 148, 149, 160, 196, 197, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 213, 214, 217, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 236, 242, 244, 246, 249, 256, 259, 260, 266, 277, 278, 282, 284, 288], "9": [6, 14, 29, 31, 33, 41, 43, 50, 52, 53, 54, 58, 60, 61, 62, 63, 65, 67, 68, 70, 71, 72, 75, 76, 78, 84, 87, 89, 93, 94, 95, 96, 98, 99, 101, 102, 104, 105, 110, 112, 113, 114, 115, 117, 126, 128, 131, 137, 143, 145, 149, 181, 196, 197, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 217, 219, 220, 221, 223, 224, 227, 229, 230, 231, 232, 242, 246, 249, 256, 259, 282, 284, 289], "11": [6, 18, 37, 38, 43, 53, 56, 58, 60, 62, 63, 65, 67, 70, 74, 75, 76, 78, 79, 87, 89, 92, 93, 94, 98, 102, 104, 112, 126, 128, 141, 160, 170, 196, 197, 199, 200, 202, 204, 205, 206, 207, 208, 210, 211, 218, 220, 224, 227, 229, 230, 231, 232, 242, 243, 249, 260], "12": [6, 12, 20, 22, 35, 41, 42, 43, 48, 50, 51, 53, 54, 55, 58, 60, 61, 62, 63, 65, 67, 68, 70, 72, 75, 76, 78, 87, 89, 93, 98, 99, 102, 105, 106, 110, 112, 114, 120, 128, 129, 141, 173, 186, 196, 199, 200, 201, 204, 206, 207, 208, 210, 211, 217, 219, 220, 224, 226, 227, 231, 232, 243, 246, 249, 259, 284, 288], "13": [6, 35, 43, 51, 53, 58, 62, 63, 65, 67, 70, 74, 75, 76, 77, 87, 92, 98, 102, 106, 110, 112, 126, 141, 197, 200, 204, 206, 207, 208, 210, 211, 217, 224, 226, 228, 229, 231, 232, 243, 249, 266], "14": [6, 22, 43, 51, 53, 57, 58, 60, 62, 63, 67, 68, 70, 87, 98, 99, 102, 103, 105, 110, 126, 196, 197, 200, 202, 204, 205, 206, 207, 208, 210, 211, 220, 223, 224, 227, 229, 231, 232, 278], "15": [6, 12, 20, 41, 48, 51, 53, 58, 60, 62, 63, 65, 66, 67, 70, 72, 75, 76, 78, 79, 87, 89, 92, 93, 94, 98, 99, 102, 105, 117, 149, 196, 197, 199, 200, 201, 202, 206, 207, 208, 210, 211, 213, 217, 218, 220, 223, 224, 228, 229, 230, 231, 232, 249, 277, 278, 283, 284], "16": [6, 22, 31, 35, 41, 43, 45, 53, 54, 57, 61, 62, 63, 67, 70, 71, 72, 76, 87, 89, 92, 98, 99, 101, 102, 106, 192, 199, 200, 201, 204, 205, 206, 207, 210, 211, 217, 219, 220, 221, 224, 231, 232, 249, 256, 265, 284], "17": [6, 28, 29, 31, 51, 53, 54, 62, 63, 66, 67, 68, 72, 75, 78, 87, 98, 102, 112, 201, 202, 206, 207, 210, 211, 218, 220, 224, 227, 232, 246, 250, 282], "18": [6, 28, 45, 53, 54, 65, 67, 70, 72, 75, 78, 94, 98, 102, 105, 106, 110, 112, 114, 187, 196, 204, 205, 210, 211, 219, 220, 224, 227, 229, 230, 231, 232, 259], "19": [6, 28, 53, 62, 65, 70, 72, 75, 78, 98, 102, 104, 105, 196, 202, 206, 207, 210, 220, 224, 226, 229, 243, 277], "20": [6, 12, 28, 31, 39, 43, 51, 53, 54, 61, 62, 63, 66, 67, 70, 78, 79, 89, 98, 102, 105, 106, 108, 112, 123, 181, 183, 196, 197, 201, 205, 206, 207, 208, 210, 211, 217, 218, 219, 220, 223, 224, 227, 230, 231, 256, 278], "21": [6, 10, 48, 53, 62, 65, 67, 75, 76, 84, 98, 102, 104, 105, 141, 197, 202, 204, 205, 206, 208, 210, 211, 217, 227, 231, 232, 288], "22": [6, 12, 53, 62, 65, 66, 67, 70, 98, 102, 105, 106, 141, 205, 210, 223, 224, 229, 231], "23": [6, 41, 53, 54, 62, 65, 68, 70, 76, 78, 98, 102, 105, 141, 202, 207, 210, 217, 224, 249], "24": [6, 25, 27, 28, 35, 41, 50, 54, 55, 62, 65, 67, 70, 76, 84, 89, 98, 102, 105, 106, 110, 112, 173, 183, 196, 202, 204, 206, 207, 208, 210, 213, 218, 224, 227, 231, 246, 249, 266, 278, 284], "25": [6, 12, 25, 28, 53, 54, 63, 65, 67, 70, 72, 75, 77, 94, 98, 101, 102, 105, 106, 112, 117, 123, 190, 196, 200, 204, 206, 207, 210, 211, 217, 218, 220, 224, 226, 227, 228, 231, 243], "26": [6, 51, 62, 63, 65, 70, 74, 98, 102, 105, 106, 207, 224, 231], "27": [6, 26, 43, 44, 53, 57, 67, 72, 98, 102, 105, 106, 112, 114, 204, 207, 229], "28": [6, 43, 53, 61, 65, 66, 70, 98, 102, 105, 128, 220, 224, 227, 283], "29": [6, 18, 35, 37, 38, 51, 53, 54, 62, 63, 65, 67, 68, 75, 76, 98, 102, 112, 165, 201, 219, 231, 249], "assumpt": [6, 11, 12, 17, 19, 21, 25, 26, 27, 36, 37, 39, 40, 42, 43, 53, 54, 56, 61, 64, 66, 68, 69, 89, 92, 93, 98, 99, 105, 112, 116, 143, 180, 183, 188, 200, 210, 211, 219, 220, 223, 227, 229, 230, 236, 244, 249, 267, 268, 288], "parenthes": [6, 12, 62, 104, 116, 164, 165, 195, 211, 235, 252], "type": [6, 8, 10, 11, 12, 13, 15, 18, 19, 20, 23, 25, 26, 31, 37, 38, 41, 45, 53, 54, 58, 61, 62, 63, 64, 65, 66, 68, 72, 73, 74, 75, 76, 77, 80, 87, 89, 90, 91, 92, 93, 94, 95, 98, 102, 103, 104, 105, 106, 108, 110, 112, 116, 120, 121, 126, 137, 143, 148, 162, 170, 171, 172, 174, 180, 186, 190, 191, 195, 197, 198, 201, 202, 205, 206, 207, 208, 209, 211, 212, 213, 219, 220, 221, 223, 224, 226, 227, 229, 235, 236, 237, 240, 242, 243, 244, 249, 250, 252, 260, 263, 266, 278, 280, 282, 283, 284, 287, 288, 289], "enclos": [6, 72, 73, 78, 101, 113, 211, 221, 250], "colon": [6, 62], "preced": [6, 7, 12, 44, 54, 62, 63, 66, 67, 156, 223, 250], "space": [6, 12, 20, 41, 42, 43, 62, 63, 64, 71, 72, 73, 75, 77, 78, 91, 98, 104, 105, 114, 120, 121, 122, 123, 145, 147, 150, 160, 163, 165, 171, 173, 186, 190, 192, 195, 196, 197, 198, 206, 230, 231, 242, 246, 256, 258, 260, 261, 262, 263, 265, 266, 273, 280, 283], "omit": [6, 10, 18, 20, 43, 54, 61, 62, 63, 67, 87, 89, 92, 98, 178, 211, 212, 219, 221, 229, 235, 244, 249, 278], "absent": [6, 46, 229], "specifi": [6, 7, 10, 14, 18, 20, 22, 27, 28, 30, 31, 42, 43, 44, 57, 61, 62, 63, 64, 65, 68, 70, 71, 75, 78, 87, 89, 91, 92, 93, 95, 98, 102, 104, 105, 106, 112, 117, 120, 121, 125, 126, 128, 130, 131, 133, 136, 138, 139, 140, 141, 143, 144, 160, 165, 170, 171, 173, 174, 179, 185, 186, 188, 190, 192, 194, 195, 198, 199, 200, 201, 202, 204, 206, 207, 208, 211, 213, 214, 217, 218, 219, 221, 223, 227, 228, 229, 230, 231, 232, 236, 237, 238, 242, 243, 244, 249, 250, 256, 258, 259, 262, 265, 284], "displai": [6, 7, 12, 18, 19, 29, 62, 63, 66, 87, 91, 105, 106, 110, 147, 180, 186, 190, 191, 197, 201, 202, 211, 219, 235, 242], "signatur": [6, 20, 37, 38, 54, 62, 98, 244, 245, 249, 250], "brace": [6, 67, 126, 211], "appear": [6, 7, 11, 12, 14, 29, 42, 43, 46, 51, 53, 62, 63, 67, 68, 71, 72, 75, 78, 81, 85, 87, 89, 93, 98, 102, 104, 126, 130, 160, 176, 178, 181, 197, 199, 201, 204, 206, 207, 211, 220, 223, 227, 228, 229, 231, 235, 237, 242, 249, 250, 256, 261], "shape": [6, 10, 43, 78, 93, 95, 98, 100, 101, 110, 112, 120, 125, 126, 186, 197, 198, 200, 211, 214, 221, 231, 232, 233, 235, 236, 237, 250, 287], "combin": [6, 10, 12, 20, 22, 30, 42, 62, 66, 67, 70, 89, 91, 92, 93, 102, 106, 112, 120, 125, 129, 136, 144, 155, 162, 170, 171, 173, 174, 175, 179, 180, 181, 182, 198, 199, 201, 202, 204, 206, 207, 211, 212, 220, 221, 223, 224, 227, 229, 231, 232, 246, 249, 277, 280, 283], "incorrectli": [6, 10, 20, 71, 72, 98, 199], "opt_cs": [6, 223], "canon": [6, 11, 18, 24, 43, 46, 51, 53, 54, 58, 62, 63, 64, 68, 78, 87, 92, 98, 102, 104, 121, 153, 157, 176, 178, 181, 183, 204, 212, 219, 220, 223, 227, 229, 231, 237, 249, 288], "find": [6, 11, 12, 14, 16, 17, 20, 23, 24, 25, 26, 27, 29, 30, 31, 35, 38, 41, 43, 44, 45, 53, 56, 57, 58, 61, 62, 66, 68, 70, 72, 74, 75, 76, 79, 84, 87, 89, 91, 98, 102, 104, 118, 127, 134, 141, 143, 145, 161, 168, 170, 171, 172, 176, 179, 181, 194, 197, 198, 199, 200, 201, 202, 204, 208, 210, 211, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 229, 230, 231, 237, 246, 249, 250, 252, 256, 266, 278, 280, 282, 284, 289], "optim": [6, 11, 28, 43, 46, 53, 66, 92, 102, 116, 143, 156, 160, 207, 211, 212, 220, 223, 231, 243], "mul": [6, 10, 11, 12, 15, 20, 35, 87, 89, 93, 102, 156, 160, 170, 171, 200, 201, 202, 206, 207, 211, 212, 213, 220, 223, 227, 228, 229, 230, 235, 283], "pow": [6, 10, 11, 12, 35, 40, 43, 62, 63, 68, 87, 93, 102, 175, 200, 201, 202, 207, 211, 213, 220, 223, 229, 230, 283, 287], "neg": [6, 11, 12, 18, 19, 26, 39, 40, 43, 44, 57, 61, 62, 67, 68, 70, 72, 74, 75, 78, 87, 89, 91, 92, 93, 98, 101, 102, 105, 106, 108, 109, 110, 112, 120, 176, 186, 196, 199, 200, 202, 204, 206, 207, 208, 211, 217, 219, 220, 221, 223, 224, 227, 229, 230, 231, 250], "coeffici": [6, 14, 16, 18, 22, 25, 27, 38, 41, 43, 61, 62, 64, 66, 67, 70, 75, 80, 81, 84, 85, 87, 91, 92, 95, 98, 99, 102, 112, 113, 121, 126, 149, 163, 173, 181, 196, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 213, 214, 217, 218, 221, 223, 224, 226, 227, 228, 229, 230, 231, 237, 243, 260, 263, 273, 283, 288], "none": [6, 7, 10, 11, 18, 19, 20, 35, 36, 37, 38, 39, 41, 42, 43, 45, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 83, 84, 85, 87, 89, 90, 92, 93, 95, 98, 99, 102, 103, 104, 105, 112, 117, 118, 120, 121, 122, 123, 125, 126, 145, 147, 149, 150, 156, 161, 166, 171, 173, 176, 178, 182, 183, 184, 186, 188, 190, 191, 195, 196, 197, 198, 200, 201, 202, 204, 206, 207, 209, 211, 212, 213, 214, 216, 217, 218, 219, 220, 223, 224, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 240, 242, 243, 244, 245, 249, 250, 252, 255, 256, 259, 284, 288, 289], "process": [6, 7, 10, 11, 12, 18, 40, 43, 53, 54, 60, 62, 63, 68, 70, 78, 87, 89, 98, 102, 112, 122, 126, 128, 134, 137, 138, 140, 143, 197, 198, 204, 211, 212, 219, 223, 227, 229, 233, 242, 246, 288], "concern": [6, 11, 18, 41, 44, 61, 66, 102, 192, 197, 199, 200, 201, 210, 211, 212, 223, 224, 229, 243, 244, 246, 252], "item": [6, 7, 11, 12, 14, 22, 29, 43, 51, 52, 54, 62, 67, 73, 79, 93, 98, 102, 121, 197, 201, 204, 207, 211, 219, 227, 228, 231, 242, 243, 246, 249, 250, 288], "fragment": [6, 63], "desir": [6, 10, 12, 16, 20, 24, 29, 31, 34, 53, 54, 62, 63, 65, 66, 67, 68, 72, 76, 78, 92, 93, 98, 101, 102, 103, 121, 122, 123, 125, 136, 140, 161, 186, 194, 195, 200, 202, 204, 206, 207, 208, 211, 212, 214, 219, 223, 227, 229, 230, 243, 245, 246, 249, 263, 277], "span": [6, 10, 91, 98, 105, 106, 120, 206, 211, 247, 284], "subsequ": [6, 12, 29, 62, 68, 186, 202, 204, 207, 246, 249, 260, 263], "indent": [6, 12, 252], "embed": [6, 7, 41, 54, 62, 90, 206], "hyperlink": 6, "classnam": 6, "erf": [6, 70, 87, 89, 211, 221, 231], "gauss": [6, 27, 70, 89, 98, 145, 199, 206, 209, 229, 230], "erfc": [6, 70, 87, 211, 231], "complementari": [6, 70, 112], "erfi": [6, 70, 87, 211], "erf2": [6, 70, 211], "erfinv": [6, 70, 211, 231], "invers": [6, 27, 29, 35, 53, 54, 62, 63, 64, 70, 89, 95, 98, 102, 120, 121, 165, 169, 170, 173, 178, 181, 198, 199, 200, 202, 204, 207, 208, 211, 213, 221, 223, 227, 229, 230, 231, 249, 284, 288], "erfcinv": [6, 70, 211], "erf2inv": [6, 70, 211], "besselj": [6, 70, 84, 211, 223, 227, 282], "besselbas": [6, 70], "bessel": [6, 7, 68, 80, 89, 207, 223, 227, 231, 282], "kind": [6, 7, 10, 11, 17, 18, 19, 20, 42, 43, 64, 67, 70, 82, 89, 93, 105, 108, 121, 126, 139, 180, 192, 199, 201, 202, 207, 212, 213, 219, 227, 228, 231, 249, 263, 265, 278, 288], "bess": [6, 70, 211, 223, 227, 231], "besselk": [6, 70, 211, 231], "cite": [6, 21], "citat": 6, "meant": [6, 7, 10, 12, 18, 20, 43, 62, 70, 75, 89, 102, 126, 143, 197, 202, 219, 223, 228, 233, 261, 283], "augment": [6, 43, 98, 121, 138, 139, 143, 209, 229, 230, 247, 250, 289], "freeli": [6, 34, 96, 120, 198], "wikipedia": [6, 11, 18, 20, 35, 37, 38, 39, 41, 42, 43, 45, 50, 51, 53, 54, 61, 62, 63, 64, 65, 67, 68, 70, 72, 74, 78, 79, 80, 89, 91, 92, 93, 95, 98, 102, 110, 112, 115, 145, 147, 148, 149, 151, 152, 153, 157, 158, 159, 162, 164, 165, 174, 176, 179, 186, 188, 193, 200, 207, 214, 218, 219, 220, 227, 230, 231, 244, 249, 256, 258, 262, 264, 266, 282, 284, 286], "wolfram": [6, 39, 55, 56, 62, 63, 65, 67, 68, 70, 72, 78, 89, 98, 102, 104, 205, 211, 213, 214, 216, 219, 224, 231, 249, 284], "mathworld": [6, 11, 39, 55, 56, 62, 63, 65, 67, 68, 70, 72, 78, 89, 98, 102, 205, 214, 219, 224, 231, 249], "nist": [6, 68, 70, 181], "digit": [6, 11, 12, 28, 43, 62, 63, 65, 66, 72, 89, 92, 102, 136, 186, 201, 207, 218, 223, 249, 277], "dlmf": [6, 68, 70], "suffer": 6, "rot": [6, 78, 173], "publish": [6, 87, 221], "identifi": [6, 10, 18, 19, 41, 55, 62, 65, 66, 89, 98, 108, 138, 164, 165, 198, 201, 202, 212, 220, 223, 227, 228, 230, 231, 250, 253], "clickabl": 6, "kozen89": [6, 204, 205], "kozen": [6, 205], "landau": [6, 205, 278], "polynomi": [6, 7, 11, 16, 18, 23, 25, 31, 39, 53, 61, 62, 63, 66, 67, 80, 81, 83, 85, 89, 92, 93, 95, 98, 102, 106, 112, 141, 143, 198, 200, 205, 209, 213, 218, 220, 221, 223, 224, 226, 227, 230, 242, 267, 274, 279, 284, 289], "decomposit": [6, 22, 27, 53, 60, 94, 95, 98, 200, 202, 204, 205, 213, 288], "1989": [6, 205, 229], "pp": [6, 53, 54, 60, 61, 62, 63, 67, 68, 89, 93, 98, 130, 140, 196, 199, 200, 204, 205, 227, 228, 231], "445": [6, 205], "456": [6, 62, 205], "abramowitz": [6, 70], "milton": [6, 70], "stegun": [6, 70], "iren": [6, 70], "chapter": [6, 53, 70, 102, 126, 205], "formula": [6, 16, 22, 35, 41, 56, 61, 62, 66, 67, 68, 70, 75, 92, 98, 102, 196, 198, 204, 207, 211, 213, 217, 220, 223, 224, 227, 282, 288], "tabl": [6, 18, 44, 53, 62, 67, 70, 83, 89, 98, 102, 120, 143, 196, 206, 233], "ed": [6, 54, 70, 89, 98, 205, 229, 231], "1965": [6, 70, 93], "luke": [6, 70, 87, 221], "l": [6, 10, 12, 41, 42, 43, 44, 51, 53, 54, 61, 63, 70, 73, 74, 75, 76, 77, 79, 80, 85, 87, 89, 91, 94, 95, 98, 102, 105, 106, 112, 114, 120, 121, 123, 125, 126, 129, 130, 131, 133, 134, 135, 139, 140, 141, 142, 143, 144, 145, 148, 174, 177, 178, 179, 181, 194, 195, 196, 198, 200, 202, 204, 205, 211, 213, 214, 220, 221, 224, 227, 229, 231, 235, 236, 237, 238, 242, 244, 249, 266, 288], "Their": [6, 62, 70, 87, 196, 197, 201, 204, 221], "approxim": [6, 12, 17, 31, 41, 53, 61, 62, 63, 66, 70, 72, 78, 87, 89, 98, 102, 106, 109, 145, 179, 197, 201, 202, 207, 214, 218, 221, 231, 278, 282], "1969": [6, 63, 70, 87, 205, 221], "bessel_funct": [6, 70], "typefunct": [6, 70], "gamma": [6, 7, 12, 20, 61, 62, 64, 66, 67, 87, 89, 115, 143, 173, 195, 196, 211, 221, 223, 227, 231, 288], "infti": [6, 11, 18, 39, 61, 62, 63, 67, 68, 70, 87, 89, 198, 207, 214, 218, 221, 227, 230, 231, 278, 282, 288], "mathrm": [6, 33, 52, 61, 62, 63, 70, 87, 89, 98, 202, 204, 211, 219, 221, 227, 230, 231, 278, 282], "factori": [6, 16, 20, 27, 61, 62, 66, 67, 70, 98, 102, 104, 196, 202, 204, 206, 207, 211, 213, 223, 229, 231, 244, 245, 249, 250, 288], "z": [6, 10, 11, 12, 14, 18, 20, 25, 28, 29, 30, 35, 39, 40, 43, 44, 53, 54, 61, 62, 63, 64, 65, 67, 68, 70, 74, 75, 76, 77, 78, 87, 89, 92, 93, 95, 98, 104, 105, 106, 112, 114, 117, 118, 120, 123, 126, 128, 129, 130, 131, 133, 134, 135, 137, 140, 141, 143, 144, 145, 154, 156, 160, 170, 171, 173, 177, 181, 185, 186, 187, 188, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 210, 211, 212, 218, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 235, 236, 237, 243, 244, 250, 256, 259, 260, 261, 262, 263, 265, 266, 277, 278, 280, 282, 283, 287, 288, 289], "whole": [6, 10, 18, 62, 64, 70, 89, 106, 114, 197, 198, 206, 207, 211, 214, 219, 221, 227, 230, 249], "complex": [6, 10, 11, 12, 15, 18, 20, 25, 26, 27, 31, 35, 39, 40, 41, 43, 53, 62, 63, 65, 66, 67, 70, 74, 84, 87, 93, 94, 98, 102, 103, 104, 110, 112, 116, 126, 143, 145, 149, 159, 162, 164, 165, 176, 185, 186, 195, 199, 200, 202, 206, 207, 211, 212, 216, 219, 221, 223, 227, 229, 230, 231, 244, 252, 288, 289], "plane": [6, 35, 62, 70, 72, 74, 75, 77, 78, 89, 98, 110, 120, 128, 148, 149, 194, 195, 219, 230, 266, 274, 288], "pole": [6, 11, 70, 87, 112, 120, 149, 218, 221, 227], "pi": [6, 10, 11, 12, 15, 18, 20, 23, 24, 26, 29, 31, 34, 35, 36, 38, 39, 40, 41, 43, 54, 61, 62, 64, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 81, 87, 89, 98, 102, 114, 120, 128, 143, 145, 147, 148, 149, 150, 152, 160, 171, 173, 174, 177, 179, 186, 196, 197, 199, 201, 202, 207, 211, 214, 218, 219, 220, 221, 223, 226, 227, 229, 230, 231, 249, 256, 259, 266, 277, 282, 288], "oo": [6, 11, 14, 18, 19, 24, 39, 41, 61, 62, 66, 67, 68, 70, 75, 87, 89, 92, 98, 112, 114, 162, 174, 177, 202, 204, 207, 216, 217, 218, 219, 223, 226, 227, 229, 230, 231, 236, 249, 252, 278, 282], "known": [6, 11, 18, 19, 20, 29, 38, 42, 43, 44, 45, 51, 53, 54, 62, 63, 66, 67, 70, 72, 75, 80, 87, 89, 90, 99, 102, 110, 112, 113, 115, 117, 123, 140, 179, 186, 194, 200, 201, 202, 206, 207, 211, 214, 217, 219, 220, 221, 223, 226, 227, 228, 229, 231, 249, 250, 256, 263, 265, 288], "sqrt": [6, 10, 11, 14, 18, 20, 22, 23, 24, 25, 26, 30, 31, 35, 39, 40, 41, 43, 62, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 85, 86, 87, 89, 90, 93, 94, 98, 102, 104, 105, 108, 112, 114, 128, 145, 147, 149, 150, 155, 160, 170, 171, 173, 174, 176, 177, 179, 180, 186, 192, 195, 196, 199, 201, 202, 204, 206, 207, 210, 211, 212, 217, 220, 221, 223, 224, 226, 227, 229, 230, 231, 249, 250, 252, 256, 265, 266, 277, 282, 287, 288, 289], "obei": [6, 70, 196, 211, 221], "mirror": [6, 70, 89, 149], "symmetri": [6, 10, 45, 50, 55, 58, 70, 93, 155, 196, 227, 235, 237, 277, 288], "conjug": [6, 22, 39, 51, 52, 53, 62, 68, 70, 93, 98, 114, 145, 159, 162, 176, 207, 211, 227, 237], "differenti": [6, 7, 10, 11, 23, 41, 62, 67, 68, 70, 79, 80, 82, 85, 112, 120, 121, 125, 126, 128, 130, 133, 136, 137, 138, 139, 140, 143, 144, 165, 171, 185, 186, 188, 190, 192, 195, 198, 204, 208, 210, 211, 216, 221, 223, 227, 228, 256, 263, 264, 267, 274, 278, 279, 282], "polygamma": [6, 67, 70, 211], "seri": [6, 16, 29, 41, 42, 43, 44, 52, 53, 61, 62, 64, 66, 67, 68, 70, 85, 86, 87, 91, 102, 109, 112, 126, 133, 135, 143, 190, 194, 203, 204, 211, 216, 217, 221, 227, 230, 268, 274, 279], "expans": [6, 16, 20, 43, 62, 64, 67, 68, 70, 89, 98, 102, 140, 155, 157, 207, 208, 213, 214, 215, 220, 222, 223, 227, 229, 230, 268, 279, 288], "eulergamma": [6, 62, 66, 67, 70], "zeta": [6, 11, 12, 61, 62, 66, 67, 202, 206, 211, 218, 231], "40": [6, 31, 43, 65, 67, 70, 72, 79, 93, 98, 102, 105, 197, 208, 210, 211, 231, 252, 277], "288037795340032417959588909060233922890": [6, 70], "49801566811835604271": [6, 70], "15494982830181068512": [6, 70], "lowergamma": [6, 70, 231], "lower": [6, 11, 18, 24, 39, 41, 43, 53, 54, 61, 62, 64, 70, 71, 73, 78, 79, 89, 93, 94, 95, 98, 110, 115, 120, 176, 190, 196, 198, 200, 202, 204, 207, 211, 220, 221, 223, 227, 236, 237, 246, 256, 278, 286], "uppergamma": [6, 67, 70, 211, 231], "upper": [6, 39, 61, 63, 66, 70, 71, 78, 79, 93, 94, 95, 98, 101, 102, 110, 120, 169, 176, 196, 200, 202, 204, 206, 207, 211, 221, 229, 236, 256], "loggamma": [6, 7, 70, 211], "log": [6, 7, 12, 20, 33, 35, 41, 43, 53, 61, 62, 66, 67, 68, 70, 80, 84, 86, 87, 89, 93, 98, 102, 197, 202, 211, 213, 218, 221, 223, 227, 230, 231, 238, 278, 288, 289], "digamma": [6, 67, 70, 211], "trigamma": [6, 70, 211], "beta": [6, 12, 43, 53, 62, 89, 173, 186, 196, 206, 208, 211, 227, 231], "euler": [6, 35, 41, 42, 61, 62, 63, 66, 67, 70, 78, 84, 90, 102, 120, 173, 186, 191, 195, 196, 207, 211, 227, 231, 256, 258], "gamma_funct": [6, 70], "gov": [6, 68, 70], "gammafunct": [6, 70], "gammabetaerf": [6, 67, 70], "unusu": [6, 18, 128, 242], "inlin": [6, 90, 191, 211, 244], "pretti": [6, 11, 20, 42, 43, 70, 89, 90, 98, 102, 106, 112, 128, 191, 221, 223, 230, 265, 279, 282, 284, 288], "As": [6, 15, 16, 19, 20, 22, 27, 28, 29, 34, 43, 53, 54, 62, 63, 66, 67, 68, 70, 86, 87, 92, 98, 101, 102, 104, 120, 125, 126, 128, 130, 137, 140, 141, 176, 181, 194, 198, 199, 201, 202, 204, 207, 208, 210, 211, 218, 219, 221, 227, 230, 231, 249, 250, 260, 261, 277, 278, 280, 282, 283, 284, 287, 288], "literatur": [6, 11, 87, 203, 274], "fact": [6, 10, 11, 18, 19, 20, 26, 38, 39, 62, 67, 70, 80, 87, 102, 108, 128, 140, 181, 198, 199, 201, 204, 206, 208, 210, 221, 223, 227, 230, 242, 250, 265, 277, 280, 281, 282, 283, 288], "eval": [6, 10, 18, 37, 38, 43, 62, 68, 70, 162, 176, 202, 207, 211, 244, 277], "illumin": 6, "tone": 6, "narr": [6, 8, 281], "excerpt": 6, "geometri": [6, 71, 72, 73, 75, 76, 77, 78, 79, 89, 136, 149, 203, 259, 266, 267, 274, 282], "autofunct": 6, "intersect": [6, 18, 26, 41, 42, 53, 72, 73, 75, 76, 77, 78, 79, 98, 149, 198, 207, 211, 217, 218, 219, 230], "convex_hul": [6, 74, 78, 79], "are_similar": [6, 73, 74, 79], "autoclass": 6, "linearent": [6, 72, 75, 76, 77, 78], "rai": [6, 72, 74, 75, 76, 78, 79, 145, 149], "segment": [6, 10, 53, 72, 74, 75, 76, 77, 78, 79, 194, 197, 227, 242], "curv": [6, 42, 64, 74, 89, 102, 105, 145, 197, 198, 227, 256, 266, 274, 278], "ellips": [6, 73, 74, 78, 148, 197, 211, 274, 287], "circl": [6, 20, 62, 72, 73, 74, 76, 77, 78, 79, 87, 149, 156, 197, 230, 256, 259, 266], "polygon": [6, 72, 73, 74, 79, 197, 266, 274], "regularpolygon": [6, 73, 74, 78, 197], "triangl": [6, 20, 42, 67, 73, 74, 78, 79, 89, 93, 102, 196, 197, 259, 266], "rel": [6, 7, 25, 42, 43, 52, 53, 54, 55, 59, 60, 61, 62, 63, 66, 73, 87, 102, 117, 120, 123, 131, 140, 141, 148, 175, 186, 190, 194, 195, 198, 200, 201, 204, 206, 219, 221, 226, 229, 231, 242, 249, 260, 261, 265, 282], "cumbersom": [6, 31], "viewcod": 6, "aco": [6, 12, 35, 68, 75, 78, 128, 143, 149, 186, 211, 227, 256, 288], "obj": [6, 18, 62, 202, 207, 211, 245], "qualifi": [6, 253], "elementari": [6, 18, 19, 20, 53, 62, 63, 66, 69, 70, 84, 87, 89, 93, 98, 102, 141, 169, 172, 202, 207, 208, 249, 250, 260, 268], "trigonometr": [6, 20, 24, 31, 62, 89, 208, 214, 222, 223, 226, 227, 230, 250, 268, 279, 289], "trail": [6, 54, 102, 202, 204, 207, 247, 252], "pair": [6, 12, 16, 22, 25, 42, 43, 53, 54, 62, 63, 68, 74, 79, 86, 98, 102, 126, 130, 166, 168, 170, 171, 176, 185, 196, 198, 201, 202, 204, 206, 207, 212, 217, 218, 220, 221, 223, 224, 227, 230, 231, 244, 249, 260, 277, 284], "www": [6, 7, 35, 41, 53, 54, 63, 65, 67, 89, 90, 102, 110, 191, 205, 210, 211, 220, 223, 224, 227, 231, 249, 284, 287], "master": [6, 7, 33, 89, 242], "usag": [6, 7, 11, 12, 18, 19, 20, 34, 37, 64, 68, 89, 173, 192, 197, 198, 204, 211, 219, 221, 224, 227, 228, 232, 246, 250, 251, 263, 264, 271, 283], "expect": [6, 7, 12, 18, 20, 42, 44, 47, 62, 68, 70, 74, 92, 102, 103, 112, 120, 126, 170, 201, 204, 206, 208, 209, 218, 223, 226, 229, 230, 231, 240, 242, 243, 246, 249, 250, 282, 283], "vector": [6, 10, 16, 35, 39, 43, 46, 53, 54, 62, 64, 70, 75, 76, 77, 84, 85, 91, 93, 98, 103, 105, 108, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 148, 149, 162, 171, 173, 178, 181, 186, 188, 190, 191, 198, 206, 211, 221, 227, 229, 231, 236, 237, 242, 243, 258, 262, 267, 271, 273, 284], "dynamicsymbol": [6, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 186, 188, 190, 191, 192, 194, 195], "custom": [6, 10, 21, 43, 54, 62, 66, 69, 90, 93, 98, 118, 120, 185, 191, 192, 213, 217, 224, 231, 237, 243, 250, 256, 265, 282, 284], "sine": [6, 20, 62, 68, 70, 87, 89, 150, 208, 214, 220, 277], "expand": [6, 10, 11, 12, 16, 18, 22, 43, 62, 64, 66, 67, 68, 70, 87, 89, 93, 112, 126, 128, 143, 157, 165, 168, 175, 176, 199, 201, 204, 206, 207, 208, 211, 214, 218, 220, 221, 223, 227, 230, 231, 235, 243, 250, 262, 277, 282], "troubleshoot": [6, 140], "spell": [6, 10, 11, 227], "try": [6, 7, 8, 10, 11, 12, 18, 19, 20, 22, 24, 25, 28, 29, 31, 54, 61, 62, 66, 70, 72, 77, 87, 89, 92, 95, 98, 101, 102, 166, 168, 175, 176, 197, 201, 202, 206, 211, 216, 218, 219, 220, 221, 223, 224, 227, 229, 249, 250, 252, 277, 280, 283, 284, 288], "referencefram": [6, 10, 117, 118, 120, 121, 123, 126, 128, 129, 130, 133, 134, 135, 138, 139, 140, 141, 143, 144, 186, 187, 188, 190, 191, 192, 193, 194, 273], "though": [6, 11, 12, 18, 19, 20, 22, 28, 29, 30, 31, 34, 44, 62, 63, 64, 74, 78, 87, 89, 93, 98, 102, 116, 121, 128, 138, 140, 171, 180, 185, 186, 194, 195, 199, 201, 202, 207, 208, 220, 221, 223, 227, 228, 229, 230, 242, 263, 278, 283, 288], "frame": [6, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 133, 135, 137, 138, 139, 140, 141, 143, 144, 185, 186, 187, 188, 190, 192, 194, 246, 256, 263], "notimplementederror": [6, 24, 26, 29, 30, 31, 41, 61, 72, 75, 79, 89, 98, 110, 200, 206, 210, 219, 226, 227, 228, 229, 230], "outsid": [6, 26, 39, 53, 62, 70, 73, 78, 93, 102, 116, 181, 195, 207, 223, 278, 283], "plot": [6, 20, 29, 33, 71, 72, 74, 75, 78, 85, 90, 98, 105, 106, 111, 143, 160, 163, 169, 214, 267, 273, 274, 282, 287], "ahead": [6, 102], "submit": 6, "sub": [6, 10, 11, 12, 14, 18, 19, 20, 22, 25, 26, 28, 29, 43, 61, 62, 68, 70, 71, 72, 73, 74, 75, 76, 78, 89, 92, 93, 95, 98, 102, 104, 105, 106, 112, 116, 118, 126, 128, 129, 130, 133, 134, 140, 143, 173, 174, 179, 186, 196, 198, 200, 201, 202, 207, 211, 218, 219, 223, 224, 227, 228, 229, 231, 242, 243, 245, 277, 278, 280], "common": [6, 7, 11, 12, 18, 19, 20, 23, 24, 25, 26, 29, 41, 43, 53, 54, 62, 63, 68, 73, 76, 79, 89, 95, 97, 98, 102, 103, 110, 112, 117, 120, 122, 129, 136, 141, 143, 148, 181, 186, 194, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 209, 213, 219, 220, 221, 223, 224, 227, 229, 230, 231, 243, 244, 247, 249, 250, 263, 265, 271, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289], "matrixcommon": [6, 93, 95, 98], "dyadic": [6, 65, 117, 123, 126, 128, 133, 135, 143, 186, 188, 191, 193, 256, 259, 264], "shorten": 6, "highli": [7, 62, 66, 109, 201, 207, 216, 244], "aspect": [7, 18, 98, 201], "teach": [7, 54, 63, 67, 231], "conduct": 7, "accord": [7, 12, 43, 50, 53, 54, 58, 61, 62, 63, 70, 92, 95, 98, 102, 104, 120, 127, 136, 170, 176, 197, 202, 204, 206, 208, 224, 229, 230, 237, 242, 244, 249, 265], "survei": 7, "commonli": [7, 11, 54, 67, 70, 89, 98, 116, 194, 199, 227, 263], "encount": [7, 12, 16, 22, 62, 89, 98, 168, 199, 204, 207, 229, 230, 244, 256, 284], "problem": [7, 10, 11, 12, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 35, 46, 56, 58, 62, 63, 74, 87, 89, 93, 98, 102, 105, 107, 108, 113, 116, 126, 130, 131, 134, 136, 138, 185, 194, 195, 198, 199, 204, 221, 223, 224, 227, 230, 246, 249, 273, 278, 280, 284], "offer": [7, 42, 43, 53, 62, 103, 116, 143, 185, 195, 201, 206, 246, 264], "bring": [7, 87, 121, 134, 200, 214, 223, 284], "greater": [7, 22, 39, 54, 62, 67, 68, 70, 87, 91, 102, 112, 202, 204, 207, 210, 218, 223, 227, 229, 231, 246, 249, 263, 278], "clariti": [7, 53, 190], "mission": [7, 42, 96], "ca": [7, 33, 63, 70, 89, 210, 211, 249], "dedic": [7, 43, 45, 203, 226, 244, 261, 263], "essenti": [7, 46, 57, 62, 66, 68, 69, 70, 87, 123, 128, 189, 192, 193, 195, 198, 199, 202, 206, 218, 221, 257, 260, 263, 264, 265, 271, 273], "element": [7, 10, 11, 12, 15, 18, 25, 35, 39, 42, 43, 45, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 78, 85, 87, 89, 91, 92, 93, 94, 95, 98, 101, 102, 103, 105, 106, 112, 113, 123, 143, 145, 148, 162, 173, 181, 190, 193, 195, 197, 198, 199, 200, 202, 204, 207, 209, 210, 211, 217, 218, 219, 221, 223, 224, 227, 229, 230, 231, 232, 236, 243, 245, 246, 249, 250, 251, 259, 278, 283, 284, 287, 288], "deviat": [7, 149, 231], "advanc": [7, 15, 17, 20, 37, 53, 62, 66, 67, 98, 99, 136, 141, 193, 197, 200, 201, 203, 205, 206, 213, 220, 227, 242, 243, 244, 249, 273, 277, 279, 281, 285, 286, 287, 288], "docutil": 7, "sourceforg": [7, 42], "ext": [7, 198, 202], "autodoc": 7, "associ": [7, 11, 18, 25, 42, 44, 60, 62, 63, 69, 70, 84, 85, 87, 91, 141, 143, 166, 174, 185, 186, 194, 195, 199, 200, 201, 202, 204, 206, 211, 219, 221, 224, 237, 251], "graphic": [7, 29, 110], "info": [7, 12, 112, 211, 227, 228], "bear": [7, 18], "linkcod": 7, "readthedoc": [7, 90, 250], "subset": [7, 16, 18, 20, 22, 41, 42, 46, 49, 53, 54, 60, 67, 68, 74, 85, 87, 89, 91, 102, 198, 200, 204, 206, 211, 219, 249, 268], "modifi": [7, 11, 12, 42, 43, 53, 62, 68, 70, 102, 104, 139, 148, 197, 204, 206, 207, 208, 211, 223, 229, 230, 231, 242, 245, 246, 249, 250, 277, 282, 284], "sphinx_math_dollar": 7, "delimit": [7, 62, 211], "dollar": [7, 282], "2": [7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 104, 105, 108, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185, 186, 187, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 240, 242, 243, 244, 245, 246, 249, 250, 252, 256, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 280, 282, 283, 284, 287, 288, 289], "sphinxext": 7, "plot_direct": 7, "figur": [7, 62, 63, 72, 73, 75, 77, 78, 89, 106, 126, 171, 194, 195, 196, 197, 200, 208, 211, 266, 288], "devel": [7, 196], "supersed": [7, 126, 143], "pep": [7, 43, 62, 92], "257": [7, 102, 229], "our": [7, 9, 10, 16, 20, 33, 43, 62, 70, 87, 98, 102, 129, 181, 194, 195, 197, 198, 200, 202, 206, 207, 208, 211, 218, 221, 224, 227, 230, 242, 277, 280, 281, 283, 288], "introduct": [7, 10, 17, 53, 54, 67, 70, 200, 202, 204, 205, 207, 211, 224, 227, 230, 264, 271, 281, 287], "four": [7, 27, 43, 45, 54, 62, 66, 70, 92, 95, 102, 108, 113, 127, 136, 141, 149, 186, 197, 198, 204, 207, 211, 219, 224, 227, 229, 231, 232, 256, 258, 261, 273], "locat": [7, 10, 45, 54, 62, 76, 98, 102, 105, 106, 108, 120, 130, 137, 140, 144, 190, 192, 206, 207, 211, 223, 231, 245, 254, 256, 260, 262, 265], "websit": [7, 286], "advertis": 7, "serv": [7, 11, 16, 20, 37, 38, 43, 45, 59, 62, 69, 85, 206, 227, 228, 252, 281], "initi": [7, 11, 18, 28, 37, 53, 57, 62, 63, 64, 67, 70, 78, 80, 81, 84, 85, 86, 87, 90, 102, 104, 106, 108, 110, 112, 117, 121, 123, 125, 126, 128, 130, 135, 138, 139, 140, 143, 144, 148, 156, 165, 187, 188, 191, 195, 196, 204, 206, 207, 211, 217, 221, 223, 227, 229, 230, 236, 244, 251, 252, 256, 258, 259, 260, 261], "obtain": [7, 11, 12, 14, 16, 25, 26, 31, 37, 38, 42, 44, 46, 53, 54, 55, 58, 62, 63, 65, 66, 67, 68, 70, 72, 73, 75, 76, 78, 84, 87, 89, 91, 93, 98, 101, 102, 109, 112, 136, 139, 141, 149, 171, 176, 181, 198, 199, 202, 204, 206, 207, 210, 212, 219, 220, 221, 223, 224, 227, 228, 229, 230, 249, 252, 260, 261], "technic": [7, 10, 13, 20, 32, 42, 62, 143, 162, 198, 227, 244, 249, 263, 280, 283], "place": [7, 8, 10, 11, 12, 18, 20, 26, 32, 42, 54, 55, 62, 63, 68, 78, 94, 98, 101, 102, 104, 112, 143, 144, 205, 206, 211, 212, 218, 220, 223, 227, 246, 249, 276, 277, 284, 288], "site": [7, 102, 245], "upload": [7, 102], "belong": [7, 18, 39, 42, 53, 58, 62, 85, 98, 176, 186, 194, 197, 198, 200, 201, 202, 204, 206, 207, 218, 219, 223, 224, 230, 237], "insid": [7, 10, 11, 12, 20, 53, 54, 59, 62, 72, 73, 78, 105, 116, 118, 130, 140, 175, 176, 180, 181, 191, 195, 207, 211, 219, 221, 224, 229, 230, 231, 233, 235, 246, 250, 283, 284], "spars": [7, 11, 95, 97, 98, 170, 200, 206, 207, 208, 231, 232, 271, 283], "substanti": [7, 103], "edit": [7, 89, 98, 102, 204, 205, 207], "arg": [7, 11, 18, 20, 24, 26, 29, 35, 37, 38, 39, 40, 41, 42, 43, 46, 53, 54, 56, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 75, 77, 78, 79, 84, 87, 89, 92, 93, 94, 95, 96, 98, 100, 102, 104, 112, 145, 151, 154, 156, 159, 160, 161, 162, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 186, 191, 195, 197, 200, 202, 204, 206, 207, 208, 211, 213, 214, 217, 218, 219, 220, 223, 227, 229, 230, 231, 232, 233, 236, 237, 242, 243, 244, 245, 249, 250, 252, 256, 258], "invari": [7, 10, 20, 53, 58, 109, 112, 196, 202, 206, 207, 221, 227], "polici": [7, 8, 10, 245, 247], "5": [7, 12, 14, 18, 20, 22, 24, 26, 28, 31, 35, 37, 38, 39, 41, 43, 44, 45, 46, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 104, 105, 108, 110, 112, 114, 115, 117, 123, 126, 128, 129, 133, 134, 135, 136, 138, 145, 149, 170, 171, 174, 176, 183, 185, 187, 190, 192, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 242, 243, 249, 250, 256, 259, 261, 263, 265, 266, 277, 278, 280, 283, 284, 287, 288], "center": [7, 10, 16, 41, 53, 61, 62, 72, 76, 78, 79, 89, 98, 117, 120, 123, 126, 128, 133, 135, 137, 141, 143, 149, 194, 197, 206, 211, 219, 266], "resid": 7, "standalon": [7, 143], "restructur": 7, "appli": [7, 10, 11, 19, 20, 27, 31, 35, 36, 37, 38, 39, 43, 53, 54, 55, 60, 61, 62, 63, 64, 65, 68, 69, 72, 77, 78, 80, 89, 92, 93, 94, 98, 102, 104, 105, 106, 108, 112, 113, 117, 118, 128, 131, 138, 140, 142, 153, 157, 160, 161, 165, 168, 169, 173, 176, 186, 195, 197, 199, 201, 202, 204, 206, 207, 208, 210, 211, 212, 213, 217, 218, 219, 220, 223, 227, 228, 229, 230, 231, 232, 235, 242, 245, 249, 256, 258, 261, 284, 287, 288], "surround": [7, 62, 79, 149, 219, 252], "nu": [7, 12, 70, 89, 102, 177, 199, 211, 223, 231, 237, 282], "equat": [7, 11, 12, 14, 16, 21, 24, 41, 43, 58, 61, 62, 64, 68, 70, 72, 75, 76, 80, 84, 85, 86, 87, 90, 93, 98, 105, 108, 112, 114, 116, 120, 121, 122, 125, 126, 128, 129, 130, 131, 133, 135, 136, 137, 142, 143, 144, 145, 149, 185, 190, 191, 194, 195, 196, 197, 198, 202, 204, 205, 206, 209, 210, 211, 217, 221, 223, 226, 227, 228, 236, 256, 261, 262, 266, 278, 279, 282], "strip": [7, 63, 89, 102, 204, 247, 252], "out": [7, 12, 18, 19, 20, 25, 42, 43, 53, 54, 62, 63, 64, 67, 70, 78, 87, 89, 95, 98, 102, 105, 112, 113, 126, 128, 130, 133, 143, 153, 157, 168, 171, 173, 175, 176, 198, 199, 201, 202, 206, 207, 208, 209, 211, 212, 218, 221, 223, 227, 232, 233, 242, 244, 249, 250, 280, 282, 283, 287, 288], "unimport": 7, "bullet": 7, "avoid": [7, 8, 10, 11, 19, 20, 22, 25, 35, 43, 44, 62, 63, 68, 87, 89, 92, 98, 101, 104, 130, 140, 170, 194, 195, 199, 201, 207, 211, 212, 219, 223, 227, 229, 231, 235, 244, 247, 250, 280, 281], "whitespac": [7, 62, 247], "invalid": [7, 12, 31, 62, 63, 104, 128, 201, 204, 219], "dx": [7, 10, 11, 16, 20, 25, 41, 43, 58, 62, 64, 66, 70, 79, 81, 84, 85, 86, 87, 89, 98, 105, 115, 121, 122, 165, 195, 207, 208, 214, 224, 227, 228, 232, 278, 282, 287, 289], "meta": [7, 62, 227, 228], "stackexchang": [7, 53, 72], "5020": 7, "wikibook": [7, 89, 90], "overleaf": 7, "mathematical_express": 7, "verbatim": [7, 211], "_rewrit": 7, "_expand": 7, "difficult": [7, 18, 29, 31, 62, 98, 126, 208, 221, 227, 228, 230, 243, 250, 266, 282, 288], "sentenc": [7, 92], "thumb": [7, 92, 249], "greek": [7, 11, 34, 62, 102, 104, 198, 211], "letter": [7, 11, 12, 34, 55, 62, 63, 102, 176, 211, 249, 278, 280], "\u03b1": [7, 196, 210], "alpha": [7, 12, 53, 62, 70, 89, 91, 148, 152, 155, 173, 190, 194, 195, 196, 202, 204, 206, 207, 210, 211, 223, 227, 231], "logarithm": [7, 12, 35, 41, 43, 62, 63, 68, 87, 89, 98, 102, 202, 204, 208, 211, 221, 223, 230, 231, 279], "italic": 7, "emphasi": [7, 201], "asterisk": 7, "stirl": [7, 54, 67, 249], "fals": [7, 11, 12, 18, 19, 20, 22, 24, 31, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 48, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 84, 87, 89, 90, 92, 93, 94, 95, 98, 99, 102, 104, 105, 106, 110, 112, 114, 115, 118, 121, 122, 123, 126, 128, 129, 133, 134, 135, 137, 138, 139, 140, 141, 144, 148, 160, 161, 165, 168, 173, 174, 175, 176, 179, 183, 186, 187, 188, 190, 191, 194, 195, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 223, 224, 226, 227, 228, 229, 230, 231, 236, 237, 240, 242, 243, 244, 245, 249, 250, 252, 256, 259, 280, 283, 284, 287], "permut": [7, 44, 45, 47, 49, 50, 52, 55, 58, 59, 60, 63, 67, 70, 93, 95, 98, 122, 176, 196, 200, 202, 207, 224, 232, 233, 237, 249, 268, 288], "cycl": [7, 10, 43, 50, 53, 54, 60, 62, 65, 67, 93, 102, 150, 219, 249], "partit": [7, 49, 53, 67, 102, 130, 140, 142, 224, 231, 246, 268], "reduc": [7, 12, 19, 23, 30, 36, 38, 40, 44, 58, 62, 63, 65, 67, 68, 70, 77, 78, 87, 89, 98, 102, 112, 113, 140, 158, 176, 198, 200, 201, 202, 204, 205, 206, 207, 208, 212, 217, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 233, 249, 250, 284], "ge": [7, 18, 62, 67, 68, 70, 87, 93, 98, 102, 196, 199, 204, 207, 221, 249], "consecut": [7, 43, 53, 58, 61, 63, 67, 78, 223, 229], "group": [7, 42, 48, 49, 54, 55, 58, 59, 60, 62, 65, 67, 91, 92, 102, 155, 164, 165, 176, 196, 197, 198, 202, 207, 223, 227, 229, 230, 237, 249, 268], "pairwis": [7, 39, 42, 62, 67, 79, 98, 102, 224, 229], "ital": [7, 211], "last": [7, 8, 10, 12, 14, 15, 16, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 36, 37, 38, 42, 43, 44, 52, 53, 54, 58, 61, 62, 63, 66, 72, 89, 92, 93, 94, 95, 96, 98, 100, 101, 102, 104, 112, 125, 148, 180, 181, 196, 197, 198, 199, 201, 202, 204, 207, 210, 211, 218, 219, 224, 227, 229, 230, 231, 232, 233, 237, 240, 242, 243, 244, 245, 247, 249, 250, 252, 278, 280, 283, 284], "talk": [7, 13, 32, 63, 198, 206, 260], "handl": [7, 16, 18, 19, 20, 41, 50, 54, 62, 68, 89, 90, 92, 97, 102, 103, 104, 105, 113, 116, 126, 140, 156, 159, 165, 166, 171, 180, 201, 207, 208, 217, 223, 227, 229, 232, 235, 243, 249, 250, 252, 283, 288], "referenc": [7, 8, 46, 51, 102, 125, 128, 173, 206], "overlin": [7, 18, 70], "normal": [7, 10, 12, 18, 19, 20, 31, 35, 39, 43, 53, 61, 62, 66, 68, 72, 75, 76, 77, 89, 90, 92, 96, 97, 98, 102, 104, 114, 116, 120, 126, 128, 134, 143, 149, 160, 170, 173, 174, 175, 176, 177, 181, 184, 186, 195, 198, 200, 201, 202, 204, 206, 207, 211, 212, 214, 219, 220, 224, 227, 231, 236, 242, 247, 249, 250, 256, 271], "assign": [7, 18, 29, 42, 43, 44, 58, 62, 67, 78, 89, 91, 92, 98, 104, 121, 126, 133, 143, 181, 192, 195, 197, 199, 204, 211, 229, 230, 237, 244, 260, 263, 280], "structur": [7, 10, 11, 15, 18, 20, 40, 42, 43, 50, 53, 54, 60, 62, 87, 89, 92, 93, 98, 105, 106, 108, 125, 174, 176, 197, 198, 201, 204, 206, 207, 208, 223, 227, 229, 230, 231, 235, 236, 244, 246, 249, 250, 280, 288], "suggest": [7, 10, 27, 44, 53, 89, 98, 102, 126, 209, 284], "american": [7, 48, 63], "color": [7, 90, 110, 191, 211, 242, 249, 287], "colour": 7, "quotat": 7, "line_color": [7, 197, 214], "aesthet": [7, 11, 197], "ariti": [7, 197], "term": [7, 11, 12, 16, 18, 20, 22, 25, 27, 29, 31, 43, 53, 62, 63, 64, 66, 67, 68, 70, 81, 85, 86, 87, 89, 92, 93, 98, 102, 106, 110, 112, 118, 121, 128, 130, 133, 136, 138, 140, 141, 155, 160, 172, 173, 176, 178, 180, 181, 186, 188, 192, 194, 196, 198, 199, 200, 201, 202, 204, 206, 207, 208, 211, 213, 214, 216, 217, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 235, 236, 249, 256, 259, 263, 268, 278, 280, 282, 283, 288], "unrestrict": [7, 51, 249], "necklac": [7, 249], "bracelet": [7, 249], "impli": [7, 11, 12, 18, 35, 39, 43, 53, 92, 108, 176, 197, 202, 204, 211, 219, 221, 227, 229, 232, 235, 236, 249, 263], "turn": [7, 10, 11, 18, 31, 43, 62, 68, 70, 77, 87, 96, 120, 134, 138, 192, 198, 206, 207, 208, 211, 218, 219, 221, 223, 224, 227, 242, 249, 265, 280, 282], "sequenc": [7, 12, 35, 41, 43, 46, 49, 52, 53, 54, 58, 60, 61, 62, 63, 65, 67, 70, 72, 75, 76, 77, 78, 79, 86, 92, 93, 95, 98, 101, 102, 143, 149, 175, 176, 202, 205, 211, 213, 215, 218, 220, 221, 223, 224, 227, 228, 230, 237, 240, 243, 244, 249, 251, 252, 268], "revers": [7, 46, 51, 54, 61, 62, 63, 68, 89, 90, 92, 98, 102, 112, 175, 186, 191, 198, 200, 204, 207, 208, 211, 212, 219, 223, 227, 249, 288], "ambigu": [7, 10, 12, 14, 62, 164, 170, 223, 235, 240], "person": [7, 11], "chebyshev": [7, 41, 62, 89, 204, 207], "pafnuti": 7, "lvovich": 7, "tchebychev": 7, "whose": [7, 10, 11, 18, 20, 22, 42, 44, 46, 51, 54, 61, 62, 63, 68, 72, 76, 78, 79, 85, 89, 92, 98, 102, 123, 138, 148, 171, 181, 187, 188, 192, 195, 199, 200, 202, 206, 207, 218, 219, 223, 227, 228, 229, 231, 237, 242, 246, 249, 250, 256, 259, 261, 263], "transliter": 7, "russian": 7, "chebyshevt": [7, 70, 211], "orthogonalpolynomi": 7, "t_n": [7, 67, 70, 89, 204, 207, 261], "tens": 7, "inclus": [7, 61, 108, 169, 198, 217, 218, 219, 230], "pronoun": 7, "gender": 7, "neutral": 7, "he": [7, 67, 87, 204], "she": [7, 230], "extran": [7, 227], "belittl": 7, "obvious": [7, 44, 53, 179, 194, 201, 221], "easili": [7, 10, 18, 20, 29, 33, 45, 62, 63, 85, 87, 98, 102, 103, 120, 138, 174, 194, 207, 210, 211, 216, 223, 224, 227, 229, 230, 233, 243, 282], "straightforward": [7, 20, 53, 63, 98, 221], "unwelcom": 7, "judgement": 7, "phrase": [7, 11, 63], "friendli": [7, 43, 87, 224, 226, 227, 229, 230, 244, 289], "mistak": [7, 12, 25, 53, 250], "goe": [8, 20, 32, 98, 218, 221, 230, 280, 283], "content": [8, 13, 43, 62, 63, 97, 199, 202, 204, 207, 210, 211, 239, 244, 247, 248, 268, 269, 270, 271, 272, 273, 274, 275, 279, 281], "setup": [8, 10, 43, 62, 129, 130, 131, 145, 186, 204, 207, 209, 210, 221, 242, 243, 245, 255, 287], "depend": [8, 10, 11, 12, 14, 18, 20, 22, 27, 28, 29, 33, 41, 43, 44, 53, 54, 61, 62, 63, 64, 67, 68, 70, 74, 79, 86, 87, 89, 90, 91, 98, 102, 103, 104, 110, 114, 117, 121, 122, 125, 126, 128, 130, 136, 138, 148, 149, 150, 165, 174, 176, 178, 180, 181, 191, 192, 197, 199, 200, 202, 204, 206, 207, 208, 210, 211, 212, 217, 221, 223, 224, 227, 228, 229, 230, 231, 242, 243, 244, 245, 249, 250, 263, 265, 266, 280, 282], "document": [8, 10, 11, 17, 20, 23, 37, 38, 39, 53, 58, 62, 63, 68, 69, 70, 74, 84, 87, 88, 90, 95, 98, 103, 106, 116, 121, 136, 138, 139, 141, 143, 151, 165, 171, 185, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 204, 207, 211, 221, 225, 227, 229, 230, 240, 242, 244, 245, 247, 249, 256, 263, 264, 267, 278, 280, 281, 287, 288], "auto": [8, 10, 12, 25, 41, 62, 63, 90, 197, 204, 207, 211, 223, 227, 231], "rebuild": [8, 11, 20, 62, 207, 283], "live": [8, 34, 44, 143, 206, 224], "server": 8, "debug": [8, 43, 62, 89, 128, 165, 242, 243, 252], "incompat": [8, 24], "pick": [9, 18, 63, 67, 140, 170, 172, 288], "ignor": [10, 12, 14, 20, 43, 53, 62, 63, 67, 68, 72, 77, 87, 92, 98, 102, 112, 118, 128, 173, 176, 186, 197, 207, 211, 212, 223, 229, 230, 243, 288], "regex": 10, "categori": [10, 198, 267, 274], "lead": [10, 11, 18, 19, 20, 22, 31, 61, 62, 68, 72, 89, 92, 98, 102, 114, 122, 160, 186, 195, 199, 202, 204, 206, 207, 208, 211, 218, 220, 223, 227, 230, 244, 247, 252, 281, 288], "against": [10, 18, 20, 31, 63, 98, 105, 126, 243], "unrel": [10, 27, 62, 69, 199, 280], "pattern": [10, 11, 12, 18, 20, 62, 87, 89, 92, 93, 104, 170, 201, 221, 223, 227, 229, 278, 283], "capabl": [10, 11, 18, 28, 41, 43, 62, 66, 74, 87, 102, 105, 106, 136, 143, 197, 208, 211, 230, 281, 282, 288, 289], "w": [10, 12, 31, 35, 43, 46, 52, 54, 61, 62, 63, 64, 65, 68, 70, 87, 89, 92, 98, 99, 120, 123, 134, 141, 142, 145, 150, 161, 165, 174, 190, 192, 193, 196, 197, 199, 200, 204, 205, 206, 207, 208, 212, 218, 219, 221, 223, 224, 227, 228, 230, 231, 242, 250, 252, 263, 289], "pythonwarn": 10, "NOT": [10, 92, 112, 156, 160, 175, 178, 240, 243], "blog": [10, 20, 43, 67, 93, 224, 230], "post": [10, 18, 22, 24, 25, 26, 27, 28, 29, 30, 31, 43, 56, 62, 211, 212, 223, 242, 283], "ned": 10, "batcheld": 10, "subclass": [10, 11, 18, 20, 37, 38, 43, 62, 69, 73, 75, 89, 92, 145, 151, 160, 164, 165, 166, 171, 173, 174, 180, 197, 198, 200, 201, 202, 206, 207, 211, 231, 242, 243, 244, 247, 250, 256, 260, 283], "__init_subclass__": [10, 18], "sinc": [10, 11, 12, 14, 15, 16, 18, 19, 20, 36, 41, 43, 44, 53, 54, 55, 58, 59, 60, 62, 63, 65, 67, 68, 70, 71, 72, 74, 78, 80, 86, 87, 89, 91, 92, 93, 98, 102, 115, 120, 128, 141, 143, 152, 176, 177, 181, 185, 192, 195, 198, 199, 201, 202, 204, 206, 207, 211, 214, 219, 220, 221, 223, 224, 227, 229, 230, 231, 237, 241, 245, 246, 247, 249, 250, 260, 262, 263, 265, 277, 282, 284, 287, 288, 289], "kanesmethod": [10, 120, 121, 126, 128, 129, 130, 131, 133, 134, 137, 138, 140, 143], "pinjoint": [10, 120, 129, 131, 137], "prismaticjoint": [10, 120, 131, 137], "q_": [10, 62, 120, 191, 224, 227], "u_": [10, 98, 120], "had": [10, 20, 26, 27, 54, 62, 63, 98, 102, 126, 140, 206, 207, 208, 211, 219, 221, 227, 229, 230, 245, 250, 277, 280, 283, 284], "templat": [10, 249], "axi": [10, 29, 35, 55, 67, 68, 72, 73, 75, 76, 78, 84, 87, 89, 95, 98, 105, 110, 115, 120, 126, 128, 130, 133, 134, 135, 137, 140, 143, 144, 145, 148, 149, 173, 186, 188, 190, 192, 194, 195, 197, 202, 230, 256, 258, 261, 263, 266], "parent_axi": [10, 120], "child_axi": [10, 120], "parent": [10, 53, 62, 85, 120, 137, 186, 190, 197, 201, 202, 206, 242, 246, 256, 260, 261], "child": [10, 11, 120, 137, 186, 201, 246], "bodi": [10, 12, 43, 87, 104, 115, 116, 119, 120, 121, 123, 125, 126, 128, 129, 130, 131, 133, 136, 137, 138, 143, 144, 179, 185, 186, 190, 194, 195, 256, 258, 273], "parent_interfram": [10, 120, 137], "child_interfram": [10, 120, 137], "rotat": [10, 35, 50, 53, 55, 62, 71, 72, 73, 75, 77, 78, 93, 105, 106, 120, 128, 131, 133, 135, 137, 141, 144, 160, 173, 186, 190, 192, 194, 195, 196, 197, 249, 256, 258, 261, 263, 265], "joint_axi": [10, 120, 129, 131, 137], "transform": [10, 11, 31, 35, 40, 43, 58, 61, 62, 63, 64, 66, 67, 70, 77, 95, 98, 110, 112, 120, 128, 137, 148, 169, 171, 173, 178, 196, 199, 200, 202, 204, 206, 207, 213, 218, 219, 220, 223, 224, 226, 227, 228, 229, 230, 231, 233, 236, 244, 250, 256, 263, 282], "suppos": [10, 19, 20, 54, 61, 62, 63, 87, 198, 200, 204, 206, 207, 211, 218, 221, 227, 229, 240, 249, 261, 266, 280, 282, 288], "pin": [10, 35, 105, 106, 108, 120], "dcm": [10, 117, 120, 126, 128, 143, 186, 194, 195, 256], "q_pin": 10, "inspect": [10, 18, 98, 206, 217, 248, 250, 275], "notic": [10, 12, 20, 53, 54, 60, 62, 98, 164, 185, 201, 221, 233, 237, 238, 249, 250, 280, 282, 283, 288], "theta_pin": 10, "rad": [10, 63, 110, 126, 206], "int_fram": 10, "orient_axi": [10, 117, 120, 186, 188], "align": [10, 43, 72, 98, 120, 195, 196, 211, 229, 242], "orient": [10, 35, 74, 78, 93, 120, 126, 128, 130, 133, 137, 141, 143, 186, 190, 192, 194, 195, 204, 249, 256, 257, 264, 265, 271], "parent_joint_po": [10, 120], "child_joint_po": [10, 120], "parent_point": [10, 120, 129, 131, 137], "child_point": [10, 120, 129, 131, 137], "mass": [10, 79, 114, 115, 116, 117, 119, 120, 121, 125, 126, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 143, 144, 152, 177, 179, 180, 181, 192, 194, 242, 265, 273], "pos_from": [10, 120, 126, 128, 129, 130, 137, 143, 190, 194], "masscent": [10, 117, 120, 123, 129, 137, 141, 143], "parent_fram": [10, 137], "child_fram": [10, 137], "locatenew": [10, 117, 123, 128, 130, 133, 134, 135, 140, 141, 143, 144, 187, 190, 192, 194], "conflict": [10, 68, 102, 112, 126, 244], "pars": [10, 54, 62, 95, 126, 137, 208, 210, 267, 275], "additional_transl": 10, "recogn": [10, 12, 22, 27, 29, 62, 63, 67, 77, 102, 105, 113, 199, 202, 210, 219, 220, 229, 236, 280], "logic": [10, 11, 18, 20, 36, 37, 38, 39, 42, 62, 64, 87, 89, 102, 168, 170, 171, 175, 211, 213, 219, 227, 231, 249, 280, 281, 282, 284], "node": [10, 11, 41, 56, 62, 89, 104, 108, 118, 152, 177, 186, 196, 201, 211, 218, 230, 235, 246, 250, 283, 287], "maximum": [10, 12, 26, 27, 41, 43, 44, 53, 54, 62, 68, 89, 98, 102, 105, 128, 173, 181, 197, 202, 204, 207, 211, 218, 219, 223, 224, 227, 230, 231, 246, 249], "multipli": [10, 12, 27, 35, 39, 43, 53, 62, 73, 77, 84, 91, 93, 98, 102, 121, 130, 139, 140, 141, 153, 162, 176, 181, 182, 198, 199, 200, 202, 204, 206, 207, 211, 213, 220, 221, 224, 227, 232, 249, 260, 280, 283], "max": [10, 43, 53, 54, 62, 68, 70, 72, 98, 102, 104, 105, 196, 197, 206, 207, 211, 218, 220, 221, 250], "min": [10, 54, 58, 62, 67, 68, 98, 104, 196, 197, 206, 211, 217, 227, 249], "is_perfect_squar": 10, "ntheori": [10, 39, 53, 62, 63, 204, 207, 224, 249], "primetest": [10, 62, 102], "is_squar": [10, 62, 93, 102], "is_prim": [10, 18, 62, 198], "isprim": [10, 39, 63, 102], "divid": [10, 11, 53, 61, 62, 63, 78, 98, 102, 180, 181, 199, 201, 202, 204, 206, 207, 211, 227, 246, 283], "bottom_up": [10, 62], "interactive_travers": 10, "postorder_travers": [10, 62, 283], "preorder_travers": [10, 62, 283], "refactor": [10, 227, 235, 246], "tr": [10, 44, 53, 211, 220], "quantum": [10, 114, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 196, 273], "ever": [10, 11, 20, 68, 195, 198, 207, 221, 227, 244, 247, 283], "helper": [10, 25, 41, 43, 53, 57, 60, 62, 87, 90, 91, 161, 163, 172, 208, 218, 221, 224, 227, 228, 230, 243, 273], "default_sort_kei": [10, 42, 51, 62, 235], "matrixel": [10, 43], "matrixsymbol": [10, 15, 18, 27, 39, 40, 43, 62, 93, 95, 98, 211, 231, 233], "layer": [10, 112, 204, 250], "imprecis": 10, "free_symbol": [10, 11, 25, 43, 62, 71, 89, 93, 165, 183, 186, 207, 217, 224], "atomicexpr": [10, 62], "concept": [10, 11, 18, 53, 128, 195, 201, 203, 206, 211, 230, 235, 265, 281, 286], "misappli": 10, "noth": [10, 22, 42, 53, 62, 89, 160, 176, 198, 202, 210, 211, 223, 227, 229, 240, 242, 250, 252, 280], "introduc": [10, 19, 25, 58, 61, 62, 70, 87, 98, 103, 106, 126, 128, 133, 134, 135, 139, 176, 181, 195, 202, 203, 207, 208, 211, 218, 221, 224, 231, 247, 274, 281, 284, 286, 288], "21494": 10, "size": [10, 16, 27, 43, 44, 46, 51, 53, 54, 55, 56, 57, 58, 62, 63, 65, 67, 90, 93, 95, 98, 101, 102, 110, 128, 138, 139, 140, 149, 171, 172, 191, 197, 200, 204, 211, 223, 224, 227, 231, 249, 278], "die": [10, 206, 231], "histor": [10, 11, 14, 20, 63, 200, 227, 231], "21563": 10, "revert": [10, 202, 207], "sample_it": [10, 231], "consequ": [10, 20, 39, 62, 199, 201, 280, 288], "kei": [10, 11, 12, 14, 22, 24, 36, 39, 42, 51, 53, 54, 62, 63, 64, 67, 78, 91, 93, 98, 101, 102, 105, 125, 126, 168, 171, 176, 195, 197, 199, 201, 202, 203, 204, 206, 207, 208, 209, 211, 223, 227, 228, 229, 231, 235, 246, 249, 250, 252, 284, 285, 288], "domainmatrix": [10, 27, 94, 98, 203, 206, 209, 274], "switch": [10, 35, 53, 60, 89, 102, 112, 204, 207, 233], "21402": 10, "earlier": [10, 116, 208, 212, 221, 223, 250, 261, 263, 283], "could": [10, 11, 12, 16, 18, 20, 26, 28, 30, 38, 43, 55, 62, 74, 87, 89, 92, 120, 123, 126, 136, 140, 176, 179, 181, 198, 201, 204, 206, 208, 211, 219, 221, 223, 227, 228, 229, 230, 231, 232, 235, 236, 243, 247, 261, 262, 280, 283, 288], "traceback": [10, 12, 15, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 36, 37, 38, 43, 44, 54, 62, 63, 66, 72, 89, 92, 93, 94, 95, 96, 98, 100, 101, 104, 112, 196, 198, 201, 202, 204, 207, 210, 218, 219, 227, 229, 230, 240, 242, 243, 245, 247, 249, 250, 252, 280, 284], "typeerror": [10, 12, 19, 20, 26, 29, 36, 37, 38, 54, 62, 72, 77, 92, 94, 96, 100, 112, 150, 218, 219, 243, 250], "unsupport": [10, 12, 15, 112, 206, 211], "operand": [10, 12, 54, 62, 187, 206, 259], "dict": [10, 12, 14, 18, 22, 25, 26, 30, 31, 43, 45, 54, 62, 63, 64, 78, 79, 92, 93, 98, 102, 104, 121, 122, 156, 168, 171, 182, 184, 186, 197, 200, 201, 202, 204, 206, 207, 208, 209, 211, 223, 224, 227, 228, 229, 230, 231, 235, 242, 243, 249, 256, 289], "solve_lin_si": [10, 209], "heurisch": [10, 89], "smith_normal_form": [10, 99, 200], "newmatrix": 10, "holonom": [10, 83, 86, 127, 128, 129, 130, 136, 138, 139, 267, 273, 274], "polymatrix": 10, "risch": [10, 89, 278], "broken": [10, 51, 62, 194, 211, 227, 252], "20780": 10, "20759": 10, "20621": 10, "19882": 10, "18844": 10, "21441": 10, "21427": 10, "21496": 10, "potenti": [10, 18, 74, 95, 98, 102, 121, 122, 123, 125, 135, 136, 187, 193, 201, 206, 211, 218, 221, 223, 227, 245, 246, 259, 265, 273], "impact": 10, "downstream": [10, 18], "goal": [10, 11, 42, 116, 144, 206, 208, 242, 243, 245, 281, 282], "perhap": [10, 14, 43, 62, 92, 102, 161, 201, 229, 244, 277], "tableform": [10, 229, 252], "isn": [10, 20, 29, 89, 116, 126, 230, 282], "advis": [10, 18, 31, 42, 120, 126], "usecas": 10, "unclear": [10, 18, 116], "line2dbaseseri": [10, 197], "linecollect": [10, 197], "bokeh": 10, "plotli": 10, "mayavi": 10, "k3d": 10, "matplotlibbackend": [10, 197], "get_point": [10, 197], "uniformli": [10, 16, 53, 78, 79, 105, 110, 197, 245], "adapt": [10, 110, 197, 217, 229, 249, 255], "get_data": [10, 197, 253], "dft": [10, 65, 115], "fourier": [10, 62, 70, 89, 115, 169, 215, 268], "as_explicit": [10, 27, 95, 98, 115, 232, 233], "exp": [10, 11, 12, 14, 18, 20, 28, 29, 31, 35, 41, 43, 52, 61, 62, 64, 66, 67, 68, 70, 80, 81, 84, 87, 89, 93, 95, 98, 102, 114, 152, 155, 171, 177, 196, 201, 202, 207, 208, 211, 213, 218, 221, 223, 227, 228, 229, 230, 231, 232, 249, 266, 278, 282, 284, 289], "discret": [10, 41, 43, 44, 52, 54, 62, 63, 70, 102, 112, 176, 181, 213, 216, 227, 229, 230, 268, 277], "unevalu": [10, 11, 18, 19, 20, 37, 38, 41, 54, 61, 62, 68, 70, 79, 89, 102, 112, 153, 157, 164, 165, 176, 207, 210, 218, 219, 223, 227, 229, 230, 231, 232, 278, 282, 283, 289], "represent": [10, 11, 20, 22, 26, 35, 42, 43, 44, 45, 53, 56, 62, 63, 68, 70, 74, 82, 84, 86, 87, 89, 91, 92, 93, 94, 95, 101, 102, 109, 110, 115, 116, 117, 125, 136, 140, 141, 145, 160, 165, 170, 171, 173, 174, 176, 178, 185, 191, 192, 194, 197, 198, 200, 202, 204, 206, 207, 208, 209, 210, 211, 213, 221, 223, 224, 227, 230, 231, 236, 237, 250, 252, 256, 259, 266, 274, 278, 280, 283], "21626": 10, "expos": [10, 42, 231], "mutat": [10, 112, 200, 202, 231], "flat": [10, 76, 93, 243], "todok": [10, 93], "ey": [10, 27, 93, 94, 95, 96, 97, 98, 100, 200, 206, 232, 252, 284], "converg": [10, 43, 61, 66, 70, 89, 102, 145, 207, 214, 218, 221, 278], "legacy_matrix": [10, 89], "discontinu": [10, 41, 66, 68, 89, 105, 214, 229], "theano_cod": 10, "aesara_cod": [10, 211], "theanoprint": 10, "aesaraprint": [10, 211], "predic": [10, 11, 36, 37, 41, 104, 207, 223, 249, 268], "experienc": [10, 44], "big": [10, 12, 16, 18, 46, 62, 64, 102, 143, 156, 196, 210, 211, 218, 233, 252, 278, 280], "registr": 10, "add_handl": 10, "remove_handl": [10, 36], "multipledispatch": [10, 36], "regist": [10, 36, 37, 38, 63, 172], "register_mani": [10, 37, 38], "askprimehandl": 10, "staticmethod": [10, 242], "register_handl": [10, 36], "prime": [10, 18, 29, 36, 37, 38, 39, 53, 60, 61, 62, 63, 65, 67, 70, 102, 147, 198, 199, 201, 202, 204, 207, 221, 223, 224, 231, 246], "Not": [10, 11, 19, 20, 27, 62, 67, 92, 112, 211, 230, 231, 249, 282, 289], "primepred": [10, 39], "q": [10, 11, 12, 15, 18, 23, 25, 34, 35, 36, 37, 38, 39, 40, 43, 54, 58, 61, 62, 63, 70, 79, 84, 85, 87, 89, 91, 93, 98, 104, 105, 112, 113, 120, 121, 122, 125, 126, 128, 130, 135, 137, 138, 139, 140, 143, 144, 145, 156, 170, 176, 179, 186, 187, 188, 190, 191, 192, 194, 197, 198, 199, 201, 202, 204, 206, 207, 208, 210, 211, 213, 221, 224, 227, 229, 231, 236, 237, 252, 256, 259, 260, 262, 265, 284, 288], "20209": 10, "stochast": 10, "timestamp": 10, "wienerprocess": [10, 231], "normaldistribut": [10, 231], "20078": 10, "misspel": 10, "absorbing_prob": [10, 231], "absorb": [10, 11, 87, 227, 231, 278], "probabilit": 10, "shutil": 10, "power": [10, 12, 24, 29, 35, 40, 43, 52, 53, 54, 63, 65, 66, 68, 84, 85, 87, 89, 91, 93, 95, 102, 103, 112, 126, 143, 148, 159, 162, 175, 178, 180, 181, 182, 186, 198, 199, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 215, 218, 220, 223, 224, 227, 229, 230, 231, 235, 244, 249, 268, 277, 278, 279, 280, 281, 283, 284, 287], "immut": [10, 11, 62, 94, 97, 100, 195, 202, 227, 232, 271, 277, 284], "coordsystem": [10, 64], "explicit": [10, 11, 18, 20, 22, 25, 26, 54, 61, 62, 66, 78, 79, 89, 101, 102, 121, 125, 126, 130, 140, 144, 195, 198, 207, 210, 211, 213, 219, 221, 227, 228, 229, 230, 246], "patch": [10, 64, 211], "real": [10, 11, 12, 15, 16, 18, 19, 20, 22, 25, 26, 35, 37, 39, 40, 41, 43, 54, 62, 63, 64, 66, 67, 68, 69, 70, 74, 78, 79, 84, 87, 89, 92, 93, 95, 98, 102, 104, 108, 114, 126, 143, 145, 148, 149, 156, 174, 188, 196, 199, 202, 206, 207, 208, 211, 212, 214, 218, 219, 221, 223, 226, 227, 229, 230, 231, 236, 240, 244, 253, 282, 288, 289], "manifold": [10, 64], "track": [10, 12, 53, 62, 66, 70, 125, 137, 141, 160, 195, 218, 237, 278], "coord_system": 10, "connect_to": 10, "coord_tuple_transform_to": [10, 64], "constructor": [10, 11, 20, 37, 38, 42, 43, 49, 53, 54, 55, 62, 69, 70, 91, 96, 98, 130, 169, 170, 174, 178, 197, 198, 200, 201, 202, 211, 219, 227, 236, 244, 260, 268, 279, 283], "str": [10, 11, 20, 37, 42, 43, 44, 54, 62, 63, 64, 66, 71, 72, 75, 78, 79, 90, 92, 95, 102, 104, 110, 120, 121, 123, 143, 160, 170, 176, 186, 188, 190, 197, 202, 206, 211, 223, 227, 231, 247, 249, 250, 252, 256], "unord": [10, 12, 62, 102, 202, 230, 249, 250], "lambidfi": 10, "guess": [10, 14, 42, 63, 66, 87, 90, 191, 204, 207, 221, 224, 283], "construct": [10, 16, 24, 35, 37, 38, 42, 43, 45, 62, 64, 68, 70, 72, 76, 78, 90, 95, 98, 103, 106, 116, 117, 121, 123, 126, 128, 161, 165, 174, 175, 178, 182, 198, 201, 202, 204, 206, 207, 211, 224, 229, 231, 232, 236, 244, 246, 247, 260, 262, 263, 280, 283, 284, 288], "superclass": [10, 11, 18, 61, 89, 95, 202], "scalar": [10, 28, 35, 62, 64, 77, 91, 93, 95, 98, 103, 123, 126, 175, 186, 187, 188, 193, 195, 198, 200, 204, 211, 227, 232, 244, 250, 256, 258, 259, 260, 261, 262, 264, 266, 271, 273], "quantiti": [10, 12, 54, 62, 67, 70, 74, 79, 106, 116, 121, 134, 141, 155, 178, 180, 184, 192, 194, 195, 206, 223, 231, 260, 265, 273], "boolean": [10, 11, 20, 21, 24, 29, 36, 37, 38, 39, 40, 41, 43, 62, 68, 72, 76, 77, 78, 79, 90, 93, 98, 99, 102, 105, 110, 112, 121, 161, 186, 188, 191, 197, 200, 202, 204, 206, 208, 211, 223, 227, 229, 231, 249, 259, 284], "sens": [10, 11, 16, 18, 20, 35, 39, 41, 42, 62, 64, 67, 70, 87, 92, 121, 128, 181, 186, 195, 198, 204, 206, 220, 221, 223, 230, 231, 243, 244, 249, 265, 288], "exponenti": [10, 12, 18, 29, 35, 43, 53, 58, 62, 63, 67, 89, 92, 93, 98, 102, 104, 162, 178, 208, 223, 227, 230, 231, 279, 280, 284], "trick": [10, 11, 12, 58, 221, 237], "treat": [10, 11, 18, 19, 20, 25, 29, 30, 35, 52, 53, 60, 62, 67, 70, 77, 78, 98, 104, 123, 126, 149, 186, 192, 199, 201, 202, 204, 206, 207, 208, 210, 211, 218, 219, 221, 223, 224, 227, 229, 235, 243, 246, 263, 280, 284], "cdot": [10, 18, 44, 61, 67, 70, 80, 84, 85, 87, 93, 95, 98, 102, 113, 115, 141, 181, 192, 194, 195, 196, 198, 199, 207, 214, 218, 221, 227, 229, 232, 233, 249, 262, 263, 282, 283, 288], "attributeerror": [10, 18, 62, 98, 230, 250, 284], "as_coeff_mul": [10, 62, 87, 95], "tri": [10, 11, 12, 18, 24, 26, 29, 42, 62, 70, 78, 87, 89, 128, 140, 171, 198, 199, 206, 211, 213, 223, 227, 228, 230, 242, 280, 288], "benchmark": [10, 128, 142], "runtest": [10, 242], "tmpfile": 10, "random_complex_numb": [10, 62], "verify_numer": [10, 62], "test_derivative_numer": [10, 62], "_randrang": [10, 62, 63], "_randint": [10, 62, 204], "as_poli": [10, 62, 199, 207], "as_expr": [10, 62, 98, 201, 206, 207, 208, 284], "combintor": 10, "perm_cycl": [10, 54, 211], "printer": [10, 11, 20, 54, 62, 70, 90, 98, 103, 191, 233, 236, 243, 244, 250, 279, 283], "init_print": [10, 22, 27, 33, 43, 54, 66, 89, 90, 98, 106, 191, 198, 199, 210, 278, 282, 284, 287, 288, 289], "problemat": [10, 20, 201], "affect": [10, 18, 20, 61, 62, 98, 185, 207, 229, 230, 261], "18056": 10, "15416": 10, "100x": 10, "slowdown": [10, 66], "significantli": [10, 27, 43, 66, 116, 138, 202, 213, 243, 246], "slower": [10, 20, 22, 27, 58, 98, 201, 206, 250, 277], "_sympifi": [10, 62, 95, 283], "strict": [10, 11, 22, 53, 54, 62, 66, 67, 93, 98, 204, 207, 229, 230, 249, 252, 288], "lot": [10, 53, 62, 80, 87, 89, 98, 126, 143, 197, 210, 214, 224, 230, 242, 288], "secur": 10, "whatev": [10, 12, 20, 53, 62, 63, 223, 227, 228, 230, 250], "__repr__": [10, 211], "12524": 10, "repr": [10, 43, 89, 170, 201, 206, 211, 242, 287], "plenti": 10, "_sympy_": [10, 62], "disabl": [10, 11, 29, 62, 63, 87, 89, 102, 204, 207, 211, 219, 227, 229, 240, 242, 245, 249, 250], "constant": [10, 11, 22, 24, 25, 27, 30, 41, 43, 61, 62, 66, 68, 70, 86, 87, 89, 105, 106, 112, 125, 126, 128, 143, 144, 153, 157, 163, 179, 180, 182, 183, 184, 187, 190, 192, 197, 199, 202, 204, 206, 207, 208, 211, 213, 218, 221, 223, 224, 227, 228, 229, 230, 231, 242, 244, 249, 250, 259, 263, 266, 273, 278, 284, 289], "lh": [10, 14, 24, 29, 43, 52, 62, 209, 211, 227, 229, 230, 262], "rh": [10, 14, 24, 27, 29, 43, 52, 54, 62, 93, 94, 98, 120, 121, 126, 133, 134, 135, 200, 209, 211, 213, 227, 229, 230, 262], "tensexpr": [10, 113, 237], "substitute_indic": 10, "danger": [10, 199], "tensor_head": [10, 113, 237], "shorter": [10, 31, 62, 72, 116, 138, 185, 198, 202, 211, 244, 252], "creation": [10, 12, 20, 62, 64, 98, 117, 123, 133, 136, 137, 138, 139, 140, 150, 160, 164, 165, 166, 176, 194, 195, 211, 231, 236, 244, 250], "_dummy_fmt": 10, "l_": [10, 89, 98, 196], "obsolet": 10, "dummy_nam": [10, 237], "clearer": [10, 260], "metric_symmetri": [10, 237], "set_metr": [10, 237], "delta": [10, 12, 43, 46, 56, 67, 85, 87, 91, 110, 140, 148, 176, 196, 200, 211, 218, 224, 227, 231, 232, 237], "epsilon": [10, 12, 61, 63, 70, 87, 89, 147, 211, 237], "latter": [10, 15, 20, 43, 53, 62, 67, 70, 87, 102, 198, 202, 206, 211, 221, 224, 237, 244, 249, 250, 280], "involv": [10, 12, 16, 18, 22, 24, 26, 38, 40, 53, 61, 62, 63, 67, 74, 75, 87, 89, 102, 112, 117, 121, 126, 155, 165, 171, 173, 183, 194, 195, 198, 199, 202, 204, 206, 207, 208, 212, 213, 218, 219, 220, 221, 223, 224, 227, 229, 232, 250, 288], "obscur": [10, 18], "young": [10, 105, 237], "tableau": 10, "favor": 10, "tensorindex": [10, 237], "tensor_indic": [10, 113, 237], "denot": [10, 11, 12, 16, 53, 54, 62, 64, 70, 84, 85, 87, 89, 91, 92, 93, 98, 102, 104, 112, 181, 186, 192, 197, 198, 199, 204, 206, 214, 218, 219, 221, 227, 231, 236, 237, 256, 258, 260, 261, 263, 265], "emptyset": [10, 18, 26, 41, 42, 92, 211, 219, 230, 256, 289], "is_empti": [10, 18, 54], "unknown": [10, 11, 15, 18, 19, 20, 27, 29, 30, 35, 62, 63, 106, 161, 209, 226, 227, 228, 229, 230, 249, 289], "empti": [10, 11, 18, 22, 25, 26, 30, 37, 41, 42, 43, 44, 53, 57, 61, 62, 74, 77, 78, 79, 92, 93, 98, 102, 121, 140, 171, 184, 202, 206, 207, 211, 217, 218, 219, 221, 227, 229, 230, 242, 244, 249, 252, 283], "product": [10, 18, 35, 45, 47, 50, 53, 54, 58, 60, 61, 62, 63, 64, 66, 67, 70, 72, 75, 77, 78, 85, 87, 89, 91, 92, 93, 95, 98, 102, 103, 112, 113, 114, 116, 120, 128, 141, 143, 151, 155, 156, 159, 161, 162, 163, 165, 168, 170, 171, 173, 174, 176, 180, 181, 182, 185, 186, 188, 193, 194, 195, 196, 198, 199, 200, 202, 204, 206, 207, 208, 211, 212, 213, 216, 219, 220, 223, 224, 227, 228, 229, 230, 231, 233, 235, 236, 237, 243, 246, 249, 256, 260, 273], "individu": [10, 18, 20, 24, 27, 62, 68, 73, 78, 79, 91, 95, 98, 112, 141, 148, 166, 170, 196, 219, 227, 242, 284], "denest": [10, 62, 207, 223, 229, 249], "particl": [10, 117, 119, 120, 121, 126, 130, 131, 136, 138, 140, 143, 144, 152, 155, 162, 163, 174, 176, 179, 181, 194, 237, 273], "rigidbodi": [10, 117, 119, 121, 125, 128, 133, 134, 135, 136, 141, 143, 273], "potential_energi": [10, 120, 121, 123, 135, 141], "energi": [10, 114, 117, 121, 123, 126, 135, 152, 177, 181, 192, 237, 263, 273], "setter": [10, 126, 143], "getter": [10, 62, 126, 143], "set_": 10, "set_condit": 10, "17749": 10, "unpack": [10, 62, 93, 98, 249, 250], "emul": [10, 223, 230, 232, 250], "is_deriv": [10, 62], "as_finite_differ": [10, 41, 62, 278], "17881": 10, "get_matrix": [10, 237], "__getitem__": [10, 62, 93, 236], "__iter__": [10, 54, 62, 223], "_components_data_full_destroi": 10, "__pow__": [10, 93, 202, 208], "flaw": 10, "replace_with_arrai": [10, 237, 238], "throughout": [11, 87, 92, 204, 214, 230, 265, 280], "elsewher": [11, 18, 67, 91, 128, 200, 242], "termnam": 11, "antideriv": [11, 68, 70, 89, 227, 278], "frac": [11, 16, 18, 20, 22, 23, 27, 29, 41, 61, 62, 63, 64, 67, 68, 70, 87, 89, 98, 102, 104, 112, 130, 141, 179, 191, 192, 194, 195, 196, 200, 204, 207, 211, 213, 214, 218, 221, 224, 227, 228, 230, 231, 232, 249, 263, 265, 278, 282, 283, 287, 288], "indefinit": [11, 35, 68, 86, 87, 89, 98, 202, 204, 205, 207, 216, 278], "primit": [11, 53, 62, 63, 70, 102, 170, 174, 198, 199, 201, 202, 204, 206, 207, 210, 211, 224, 278], "terminologi": [11, 23, 237], "tupl": [11, 20, 25, 28, 29, 30, 35, 37, 38, 41, 42, 43, 44, 53, 54, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 75, 77, 78, 79, 84, 87, 89, 93, 98, 101, 102, 104, 105, 106, 110, 117, 120, 121, 123, 125, 138, 139, 141, 143, 145, 160, 161, 162, 165, 170, 173, 174, 175, 176, 186, 190, 195, 197, 198, 200, 201, 202, 204, 208, 209, 211, 212, 213, 217, 219, 223, 224, 227, 228, 229, 230, 231, 232, 236, 237, 242, 243, 244, 245, 249, 250, 252, 256, 260, 278, 283, 284, 287], "subexpress": [11, 20, 43, 62, 68, 93, 116, 118, 206, 207, 211, 218, 223, 230, 244, 250, 277], "togeth": [11, 16, 43, 53, 62, 66, 91, 98, 102, 136, 162, 173, 181, 195, 198, 202, 204, 206, 207, 210, 211, 223, 227, 229, 231, 242, 243, 249, 282, 288], "walk": [11, 43, 46, 62, 168, 171, 221], "extract": [11, 22, 26, 30, 31, 41, 62, 89, 93, 95, 98, 102, 113, 128, 136, 185, 195, 204, 206, 207, 229, 230, 231, 242, 244, 249], "rebuilt": [11, 283], "atom": [11, 24, 43, 54, 62, 89, 92, 93, 114, 177, 201, 208, 211, 229, 230, 236], "queri": [11, 18, 19, 20, 36, 39, 40, 41, 43, 62, 74, 207, 223, 231], "is_real": [11, 18, 20, 22, 26, 62, 64, 68, 69, 98, 188, 211, 236], "restrict": [11, 18, 20, 24, 43, 51, 62, 63, 70, 98, 105, 106, 176, 180, 198, 201, 206, 208, 226], "never": [11, 18, 20, 29, 62, 68, 89, 178, 207, 208, 211, 219, 229, 231, 240, 260, 280, 281], "is_": [11, 20, 62], "leav": [11, 18, 20, 28, 30, 43, 62, 89, 98, 102, 122, 136, 160, 176, 218, 246, 277, 283, 288], "recurs": [11, 12, 15, 18, 20, 41, 62, 67, 87, 89, 92, 93, 102, 128, 197, 204, 207, 208, 211, 212, 216, 218, 223, 229, 230, 235, 240, 242, 246, 247, 249, 279, 288], "canonic": [11, 49, 62, 220, 237, 268], "excess": 11, "discourag": [11, 18, 62, 223], "expens": [11, 20, 29, 62, 140, 220, 227, 228, 229, 245, 284], "matrix": [11, 15, 16, 18, 23, 28, 30, 35, 43, 51, 54, 62, 63, 64, 70, 77, 87, 89, 91, 93, 94, 96, 97, 100, 101, 103, 104, 112, 113, 115, 117, 120, 121, 122, 125, 126, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 143, 144, 145, 148, 149, 151, 159, 160, 165, 170, 171, 173, 175, 176, 178, 181, 185, 186, 195, 196, 198, 200, 204, 206, 209, 211, 212, 219, 221, 223, 224, 227, 229, 230, 232, 233, 235, 236, 237, 238, 243, 244, 249, 250, 252, 256, 258, 259, 261, 265, 271, 279, 282, 283, 288, 289], "sympifi": [11, 12, 18, 19, 43, 66, 72, 92, 141, 149, 174, 176, 186, 187, 201, 202, 277, 283], "bound": [11, 24, 39, 43, 44, 61, 62, 71, 72, 73, 75, 77, 78, 89, 102, 174, 202, 204, 206, 207, 211, 217, 227, 229, 230, 231, 236, 246, 252, 256], "dummi": [11, 43, 58, 61, 62, 68, 87, 89, 98, 126, 143, 171, 176, 201, 202, 206, 207, 208, 217, 218, 219, 221, 223, 227, 230, 235, 237, 240, 244, 249, 250], "ration": [11, 18, 20, 22, 36, 38, 39, 41, 43, 61, 62, 66, 67, 68, 70, 72, 75, 77, 79, 83, 87, 89, 90, 95, 98, 102, 104, 112, 145, 178, 196, 199, 204, 205, 206, 208, 211, 216, 219, 220, 221, 223, 224, 226, 229, 230, 231, 249, 256, 279, 280, 283, 287], "unequ": [11, 12, 14, 62, 105, 211], "accident": 11, "clash": [11, 34, 62, 98], "contrast": [11, 20, 61, 62, 130, 201, 221, 227, 282], "_eval_": 11, "_eval_deriv": [11, 20, 62, 70], "overrid": [11, 12, 43, 62, 71, 72, 78, 104, 174, 211, 236, 243, 244, 249, 250], "pre": [11, 35, 42, 43, 62, 196, 197, 212, 220, 223, 229, 230, 242, 261, 265, 283], "dispatch": [11, 37, 38, 39, 62, 63, 171, 211, 230, 246], "shorthand": [11, 12, 18, 20, 62, 92, 170, 206, 219, 240], "stand": [11, 61, 62, 143, 199, 201, 202, 208], "reserv": [11, 18, 126, 237, 244, 284], "smaller": [11, 43, 53, 54, 62, 63, 67, 70, 78, 89, 95, 102, 138, 199, 201, 204, 207, 214, 220, 221, 229, 249, 277, 288], "children": [11, 62, 63, 201, 246], "leaf": [11, 201, 211, 220, 283], "strictli": [11, 12, 15, 17, 18, 39, 41, 62, 70, 98, 102, 112, 204, 223, 229, 250], "dag": 11, "map": [11, 18, 20, 41, 42, 43, 45, 52, 53, 54, 62, 63, 74, 78, 85, 87, 89, 92, 93, 102, 110, 121, 130, 154, 165, 166, 171, 186, 195, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 218, 223, 227, 228, 229, 230, 231, 235, 236, 243, 246, 249, 250, 252, 256], "colloqui": [11, 23], "lambda": [11, 12, 20, 24, 28, 37, 38, 41, 43, 53, 54, 62, 63, 64, 68, 89, 93, 94, 95, 98, 101, 102, 104, 126, 139, 140, 143, 144, 161, 197, 204, 206, 207, 211, 212, 219, 220, 223, 227, 229, 230, 231, 232, 240, 249, 250, 256, 258, 261, 277, 284], "hyper": [11, 62, 67, 70, 81, 84, 211, 213, 221, 223, 229, 231, 288], "primepi": [11, 20, 102], "divisor_sigma": [11, 102], "undefin": [11, 20, 26, 29, 37, 38, 41, 62, 68, 69, 70, 89, 95, 104, 117, 195, 206, 217, 218, 221, 250, 278, 289], "interchang": [11, 58, 61, 87, 227], "memori": [11, 43, 62, 102, 207, 232, 243, 246], "maintain": [11, 12, 62, 63, 102, 106, 211, 219, 220, 227, 230, 246], "mental": 11, "hidden": [11, 185], "state": [11, 16, 18, 29, 53, 60, 62, 70, 102, 105, 112, 114, 120, 121, 122, 125, 128, 130, 144, 148, 152, 153, 155, 156, 157, 159, 160, 161, 165, 168, 170, 171, 172, 173, 175, 176, 200, 207, 211, 220, 221, 223, 231, 246, 273, 284], "hashabl": [11, 59, 87, 249], "repl": [11, 237], "intermedi": [11, 43, 44, 85, 93, 120, 126, 128, 133, 137, 160, 170, 178, 179, 186, 190, 194, 230, 244, 285], "execut": [11, 18, 33, 43, 90, 93, 143, 197, 211, 227, 230, 240, 242, 244, 245, 250, 252, 255, 267, 282, 287], "idiom": [11, 253, 280, 281], "anti": [11, 35, 39, 58, 68, 89, 93, 148, 153, 237], "frown": 11, "upon": [11, 18, 43, 62, 102, 125, 128, 138, 139, 140, 143, 170, 176, 192, 194, 195, 219, 227, 236, 243, 263, 288], "lowercas": [11, 12, 35, 227, 242, 278], "is_integ": [11, 18, 20, 62, 188, 211, 236], "capit": [11, 61, 63, 112, 227], "wherea": [11, 16, 18, 22, 27, 39, 43, 63, 72, 78, 87, 92, 112, 181, 198, 201, 207, 211, 229, 230, 249, 288], "is_capit": 11, "unneed": 11, "achiev": [11, 12, 20, 62, 66, 70, 95, 102, 126, 143, 210, 218, 221, 223, 230, 233, 245, 261], "isinst": [11, 15, 18, 20, 43, 62, 93, 95, 112, 201, 202, 211, 212, 223, 232, 235, 244, 283], "ship": [11, 103], "session": [11, 34, 43, 62, 74, 89, 191, 195, 201, 247, 280, 287], "sort": [11, 24, 37, 38, 42, 43, 51, 54, 58, 87, 89, 92, 98, 101, 102, 113, 116, 121, 160, 176, 181, 185, 197, 204, 207, 208, 218, 223, 224, 227, 228, 229, 233, 235, 237, 242, 244, 249, 260, 280, 282, 283], "numberkind": [11, 15, 62, 93, 219], "matrixkind": [11, 15, 62, 93, 219], "booleankind": [11, 62], "ring": [11, 22, 65, 85, 98, 99, 194, 199, 200, 204, 206, 207, 208, 209, 210, 211, 249], "classif": [11, 17, 62, 227, 228], "lamda": [11, 95, 211, 219, 231, 284], "\u03bb": [11, 284], "lambdifi": [11, 20, 28, 29, 43, 70, 128, 211, 229, 243, 248, 275, 279], "matrixexpr": [11, 20, 93, 95, 96], "mutabl": [11, 12, 44, 62, 94, 95, 96, 105, 202, 211, 212, 223, 232, 284], "dens": [11, 93, 95, 97, 98, 200, 206, 207, 232, 250, 271, 283], "underli": [11, 43, 54, 60, 62, 91, 98, 110, 126, 171, 184, 229, 230, 231], "quit": [11, 16, 20, 70, 98, 102, 128, 194, 197, 208, 210, 221, 229, 249, 265, 280, 283], "rung": [11, 41, 84], "kutta": [11, 84], "condit": [11, 18, 19, 22, 24, 43, 53, 62, 64, 68, 70, 80, 81, 84, 85, 86, 89, 92, 98, 102, 104, 105, 106, 108, 112, 118, 122, 128, 136, 140, 143, 145, 190, 196, 208, 211, 214, 221, 224, 226, 227, 229, 230, 231, 236, 288], "loss": [11, 43, 87, 176, 243, 262], "stabil": [11, 53, 58, 60, 66, 112, 140, 235], "focus": [11, 28, 204, 224, 226, 227, 229, 230, 289], "is_numb": [11, 18, 62, 70, 89], "infin": [11, 18, 24, 39, 61, 62, 67, 68, 70, 75, 87, 89, 98, 149, 202, 204, 207, 211, 216, 217, 218, 219, 223, 226, 227, 231], "resembl": [11, 64, 70, 89, 236], "zoo": [11, 14, 18, 39, 62, 67, 68, 70, 89, 218, 220, 223], "data": [11, 16, 43, 53, 62, 63, 70, 89, 98, 103, 110, 121, 155, 197, 198, 201, 202, 204, 207, 208, 211, 223, 236, 237, 242, 244, 246, 249, 253], "effici": [11, 16, 18, 22, 27, 35, 41, 43, 46, 53, 58, 62, 65, 66, 67, 78, 79, 95, 98, 102, 103, 112, 120, 121, 143, 196, 199, 200, 201, 202, 204, 207, 208, 209, 210, 223, 224, 229, 243, 250, 277, 283, 284, 288], "act": [11, 42, 45, 52, 53, 54, 58, 62, 70, 78, 91, 92, 98, 105, 108, 117, 120, 125, 126, 131, 139, 148, 160, 165, 168, 169, 219, 230, 232, 233, 261, 265, 277], "pprint": [11, 12, 20, 26, 41, 42, 64, 70, 89, 98, 102, 112, 148, 196, 211, 212, 219, 223, 227, 228, 230, 231, 249, 287], "inequ": [11, 18, 19, 20, 23, 62, 197, 204, 219, 221, 225, 268], "neq": [11, 20, 62, 68, 70, 87, 89, 93, 181, 195, 196, 204, 207, 224, 227, 229, 288], "ne": [11, 14, 18, 62, 63, 67, 68, 75, 87, 98, 102, 199, 201, 204, 221, 227, 231], "hold": [11, 12, 20, 38, 42, 53, 58, 62, 63, 64, 68, 70, 84, 87, 98, 101, 104, 112, 114, 120, 122, 123, 141, 172, 207, 221, 223, 227, 231, 244, 288], "singleton": [11, 54, 92, 230, 283], "gotcha": [11, 13, 62, 195, 250, 281, 289], "somehow": [11, 20], "simpler": [11, 19, 20, 22, 35, 62, 66, 70, 86, 87, 133, 195, 204, 220, 221, 223, 227, 229, 230, 288], "adject": [11, 231], "heurist": [11, 18, 29, 54, 87, 89, 93, 204, 205, 218, 220, 223, 229, 230, 242, 278, 288], "appar": [11, 12, 62, 252, 288], "commut": [11, 18, 35, 39, 42, 53, 54, 58, 62, 64, 85, 89, 98, 153, 160, 163, 164, 165, 175, 176, 181, 188, 195, 199, 202, 203, 204, 205, 207, 211, 218, 219, 221, 227, 237, 273, 274, 283], "law": [11, 42, 136, 179, 195, 199], "xreplac": [11, 62, 93, 98, 186], "knowledg": [11, 61, 62, 63, 206, 227, 283, 286], "round": [11, 20, 28, 41, 43, 62, 66, 67, 68, 98, 149, 206, 207, 218, 220, 231], "analyt": [11, 33, 67, 70, 87, 98, 136, 227, 278], "implicitli": [11, 18, 19, 20, 54, 62, 89, 198, 201, 229], "independ": [11, 12, 20, 27, 39, 41, 43, 53, 61, 62, 64, 70, 79, 87, 89, 91, 98, 112, 121, 122, 126, 128, 130, 138, 140, 174, 181, 192, 197, 199, 201, 206, 207, 213, 214, 221, 223, 224, 227, 228, 229, 230, 231, 237, 242, 243, 263, 282, 283], "nativ": [11, 62, 112, 202, 207, 242], "parsabl": 11, "iter": [11, 22, 25, 26, 27, 31, 41, 43, 51, 53, 54, 57, 58, 62, 63, 64, 65, 67, 70, 78, 92, 102, 117, 118, 120, 121, 122, 125, 140, 144, 161, 176, 190, 197, 198, 199, 200, 202, 204, 207, 211, 212, 213, 214, 217, 223, 224, 227, 229, 230, 231, 232, 235, 243, 244, 245, 246, 248, 250, 256, 261, 275], "fuzzi": [11, 18, 20, 21], "noncomput": 11, "philosoph": 11, "OR": [11, 41, 65, 92, 204], "One": [11, 12, 15, 18, 20, 41, 42, 43, 52, 54, 61, 62, 67, 68, 70, 81, 84, 86, 87, 89, 92, 98, 102, 105, 106, 126, 141, 143, 152, 181, 202, 204, 205, 207, 210, 213, 219, 223, 226, 229, 230, 231, 232, 237, 250, 263, 277, 278, 280, 283, 284, 288], "care": [11, 12, 19, 20, 53, 62, 70, 89, 92, 98, 105, 116, 126, 140, 186, 195, 201, 206, 223, 224, 227, 229, 230, 235, 238, 243, 277, 280, 282], "is_posit": [11, 18, 19, 20, 62, 188, 202], "unevaluatedexpr": [11, 62, 211, 283], "surpris": [11, 18, 230], "north": 11, "riemann": [11, 64, 67, 68, 87, 198, 223, 237], "sphere": [11, 148, 256, 266], "behav": [12, 39, 41, 62, 63, 68, 70, 102, 207, 219, 223, 229, 232, 238, 284], "mapl": [12, 89, 200, 227, 282], "mathematica": [12, 43, 54, 104, 282, 284], "faq": 12, "introductori": [12, 16, 32, 33, 143, 201, 202, 207], "remaind": [12, 61, 62, 63, 102, 199, 201, 202, 205, 207, 227], "familiar": [12, 20, 89, 126, 141, 160, 208, 278, 280, 286], "java": 12, "minut": [12, 27, 116, 128, 185], "subtract": [12, 26, 35, 43, 54, 62, 66, 77, 102, 112, 120, 178, 199, 200, 201, 202, 204, 206, 207, 283, 288], "side": [12, 16, 18, 24, 26, 29, 43, 53, 54, 62, 74, 78, 89, 98, 102, 105, 112, 121, 125, 140, 141, 144, 164, 165, 181, 186, 196, 198, 204, 206, 209, 211, 228, 230, 231, 235, 242, 244, 266, 278], "proper": [12, 53, 62, 89, 102, 116, 126, 185, 201, 202, 206, 211, 219, 227, 232, 243, 244, 263, 284], "trigsimp": [12, 35, 62, 98, 120, 126, 134, 186, 220, 223, 260], "fill": [12, 17, 53, 63, 93, 95, 98, 101, 176, 197, 242, 245, 249, 252, 284], "alter": [12, 44, 53, 62, 186, 201, 211, 213, 230], "afterward": [12, 43, 62, 123, 130], "simultan": [12, 62, 68, 75, 93, 102, 197, 220], "var": [12, 25, 41, 43, 61, 62, 66, 67, 85, 89, 92, 98, 112, 186, 197, 206, 210, 211, 223, 224, 250, 289], "rate": [12, 128, 194, 231, 263, 278], "short_lif": 12, "haven": 12, "160": [12, 105, 205], "ctimesd": 12, "circular": [12, 18, 110, 148, 204], "relationship": [12, 14, 18, 43, 62, 67, 69, 89, 102, 137, 160, 186, 192, 195, 201, 229], "runtimeerror": [12, 41, 219, 230, 249], "compileflag": [12, 242], "glob": [12, 242], "exceed": [12, 128, 206], "stdin": [12, 245, 247], "nameerror": [12, 90, 245, 280], "__future__": [12, 16, 280, 287], "divis": [12, 20, 62, 98, 102, 178, 180, 198, 201, 202, 203, 204, 207, 209, 211, 224, 227, 229, 242, 250, 280, 283, 287], "cl": [12, 18, 20, 29, 43, 53, 62, 89, 93, 176, 190, 202, 206, 227, 236, 245, 249, 262, 278, 287, 289], "dir": [12, 62, 105, 213, 218, 249], "__builtins__": 12, "__file__": [12, 253], "__name__": [12, 211, 253], "__package__": 12, "_greek": 12, "_latin": 12, "chi": [12, 70, 87, 148, 211, 221, 227, 231, 237], "eta": [12, 70, 87, 206, 211, 227, 228, 231], "iota": [12, 211], "kappa": [12, 196, 211, 231], "mu": [12, 70, 87, 102, 113, 115, 147, 211, 231, 237], "omega": [12, 43, 44, 53, 87, 102, 117, 123, 125, 141, 144, 150, 152, 177, 186, 190, 191, 194, 196, 211, 218, 231], "omicron": [12, 211], "phi": [12, 53, 62, 63, 67, 70, 87, 91, 98, 102, 114, 143, 150, 159, 161, 196, 198, 206, 211, 227, 256, 266], "psi": [12, 67, 70, 87, 148, 159, 160, 166, 174, 206, 211, 237], "rho": [12, 64, 87, 98, 102, 129, 170, 211, 231, 237, 266], "sigma": [12, 54, 85, 87, 93, 98, 211, 214, 231], "tau": [12, 43, 87, 89, 98, 206, 211, 227], "theta": [12, 62, 64, 68, 70, 87, 90, 98, 104, 114, 125, 144, 148, 186, 195, 196, 202, 206, 211, 214, 219, 230, 231, 256, 258, 261, 263, 266], "upsilon": [12, 211], "xi": [12, 20, 64, 87, 211, 227, 228, 229], "lastli": [12, 89, 106, 144, 227], "unit": [12, 20, 35, 39, 42, 62, 63, 67, 75, 76, 77, 89, 98, 102, 105, 110, 112, 114, 115, 120, 126, 141, 143, 152, 177, 178, 179, 183, 185, 186, 192, 195, 197, 199, 202, 204, 206, 207, 209, 211, 219, 221, 224, 230, 232, 256, 258, 260, 265, 266, 273], "mnemon": [12, 220, 249], "osineq": 12, "reimport": 12, "restor": [12, 201, 223], "__": [12, 70, 89, 211, 231, 236], "press": [12, 42, 44, 46, 54, 63, 89, 93, 196, 205, 224, 229], "autocomplet": 12, "lose": [12, 198], "abil": [12, 18, 41, 98, 136, 206, 210, 227, 230, 282, 288], "past": [12, 68, 102, 210, 211, 287], "f1": [12, 28, 53, 87, 89, 98, 112, 117, 126, 134, 143, 197, 202, 204, 207, 211, 213, 229], "f2": [12, 28, 62, 87, 98, 112, 117, 126, 134, 143, 179, 197, 204, 207, 211, 213, 229], "6": [12, 14, 16, 22, 30, 31, 35, 37, 38, 41, 43, 44, 45, 46, 50, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 74, 75, 76, 77, 78, 84, 85, 87, 89, 91, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 108, 110, 112, 113, 114, 128, 129, 133, 134, 135, 145, 149, 155, 173, 185, 186, 195, 196, 197, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 213, 216, 217, 218, 219, 220, 223, 224, 227, 228, 229, 230, 231, 232, 242, 243, 246, 249, 250, 256, 259, 261, 266, 278, 284, 288, 289], "accuraci": [12, 16, 41, 62, 207, 284], "2000000000000002": 12, "py3k": 12, "20000000000000": 12, "sympyifi": 12, "worri": [12, 62, 283], "reus": [12, 20, 43, 176, 282], "142857142857143": 12, "receiv": [12, 31, 45, 62, 63, 102, 117, 171, 206, 236], "fraction": [12, 62, 63, 66, 68, 78, 89, 98, 102, 118, 182, 201, 202, 204, 205, 208, 211, 213, 223, 224, 227, 229, 279], "interpret": [12, 19, 29, 31, 43, 53, 61, 62, 67, 68, 70, 75, 78, 89, 93, 95, 98, 102, 104, 116, 181, 197, 199, 206, 207, 211, 218, 224, 229, 230, 231, 236, 242, 243, 246, 252, 284], "100": [12, 20, 43, 46, 51, 61, 62, 63, 66, 70, 78, 85, 92, 93, 98, 102, 105, 197, 201, 206, 208, 210, 211, 218, 229, 230, 249, 277], "000000000000": 12, "00": [12, 62, 102, 160, 170, 224, 249], "null": [12, 62, 98], "34": [12, 43, 54, 67, 75, 98, 102, 117, 158, 205, 210, 217, 223, 224], "3400000000000": 12, "250": [12, 102, 224], "143": [12, 155, 196], "next": [12, 16, 18, 20, 34, 43, 44, 46, 51, 53, 54, 56, 57, 62, 63, 68, 87, 89, 92, 98, 102, 116, 117, 120, 121, 129, 130, 131, 133, 135, 136, 137, 144, 194, 195, 198, 202, 206, 207, 211, 219, 221, 224, 227, 246, 247, 249, 281, 282, 283], "binari": [12, 19, 20, 25, 39, 43, 46, 57, 62, 63, 89, 92, 102, 103, 170, 182, 198, 201, 207, 224, 243, 246, 249], "decim": [12, 20, 43, 62, 65, 66, 102, 104, 110, 201, 207, 282], "far": [12, 42, 62, 76, 89, 196, 198, 201, 211, 221, 250, 277, 278, 280], "142857": 12, "25000000000000000000": 12, "14285278320312500000": 12, "realiz": [12, 45, 47, 53, 64, 92, 102, 130, 198, 199, 204, 231], "pad": [12, 43, 63, 64, 65, 77, 102], "inexact": [12, 31, 62, 202], "low": [12, 18, 19, 43, 62, 63, 70, 102, 201, 204, 209, 211, 223, 243, 244, 249], "higher": [12, 16, 22, 41, 43, 62, 64, 66, 70, 73, 98, 190, 196, 198, 201, 204, 207, 213, 214, 218, 220, 223, 227, 229, 232, 250, 278], "engin": [12, 108, 142, 143, 193, 227, 287], "increas": [12, 27, 41, 42, 54, 60, 61, 62, 65, 66, 70, 93, 102, 103, 116, 127, 160, 185, 186, 188, 194, 195, 201, 204, 206, 207, 213, 216, 220, 227, 231, 247, 249], "2000061035": 12, "highest": [12, 43, 56, 91, 116, 198, 207, 214, 224, 227], "hopefulli": [12, 17, 87], "unsimplifi": [12, 220], "12345678901234567890": 12, "big_trig_ident": 12, "ab": [12, 40, 43, 44, 61, 62, 63, 66, 67, 68, 70, 74, 85, 87, 92, 93, 98, 108, 114, 143, 176, 199, 202, 206, 207, 211, 224, 226, 229, 230, 231, 233, 237, 246, 249, 252, 262, 288], "1000": [12, 43, 46, 62, 63, 66, 95, 102, 143, 180, 181, 182, 183, 196, 210, 211, 220, 250], "gave": [12, 62, 249], "gain": [12, 63, 112, 138, 139, 143], "impress": 12, "91": [12, 44, 205, 210, 217, 231], "compar": [12, 18, 31, 41, 43, 54, 59, 62, 67, 68, 79, 92, 98, 102, 103, 128, 155, 179, 183, 201, 204, 207, 208, 211, 216, 218, 223, 227, 230, 232, 236, 242, 249, 280, 283, 288], "4e": [12, 229], "nearli": [12, 102, 220], "snippet": [12, 43], "expr_modifi": 12, "__main__": [12, 43, 284], "declar": [12, 18, 26, 43, 75, 87, 98, 104, 113, 126, 128, 143, 155, 200, 211, 218, 221, 226, 227, 228, 231, 244], "asid": [12, 92, 227, 228, 282], "2x": [12, 25, 62, 70, 87, 104, 223, 224, 230, 231, 277, 280, 288], "syntaxerror": [12, 104], "asin": [12, 68, 70, 76, 208, 211, 221, 223, 227, 231, 288], "arcsin": [12, 68, 208, 211, 231], "arcco": [12, 68, 211], "squar": [12, 18, 22, 25, 26, 31, 35, 39, 43, 53, 62, 63, 68, 78, 79, 87, 89, 93, 94, 98, 101, 102, 105, 112, 114, 138, 139, 162, 178, 186, 196, 200, 202, 204, 206, 207, 208, 211, 219, 223, 224, 227, 230, 231, 282], "root": [12, 18, 20, 23, 26, 31, 35, 41, 43, 61, 62, 63, 68, 70, 84, 85, 86, 87, 89, 91, 94, 98, 102, 143, 181, 196, 198, 199, 202, 206, 208, 210, 211, 221, 223, 227, 229, 230, 231, 242, 246, 249, 282, 284, 287, 289], "expon": [12, 22, 31, 40, 43, 62, 63, 68, 69, 70, 87, 89, 95, 102, 110, 112, 182, 199, 200, 201, 207, 208, 211, 220, 223, 227, 230, 235, 246, 288], "half": [12, 20, 43, 62, 63, 67, 68, 70, 72, 78, 89, 91, 98, 102, 104, 105, 145, 148, 173, 196, 202, 204, 206, 207, 219, 220, 221, 223, 231, 242, 249], "denomin": [12, 62, 66, 70, 89, 102, 112, 118, 199, 201, 202, 204, 206, 207, 210, 211, 220, 221, 223, 224, 227, 229, 288], "wild": [12, 62, 223, 249], "interest": [12, 14, 20, 22, 25, 31, 58, 62, 64, 67, 68, 78, 87, 89, 98, 102, 127, 128, 176, 181, 195, 198, 202, 206, 207, 208, 210, 218, 221, 223, 224, 229, 230, 243, 244, 261, 278, 281, 283, 284, 285, 288], "sq": [12, 224], "is_pow": [12, 43, 62, 68], "is_rat": [12, 18, 206, 249], "bracket": [12, 20, 28, 30, 54, 62, 70, 174, 176, 186, 211], "notat": [12, 16, 22, 26, 29, 31, 50, 54, 55, 61, 62, 63, 67, 70, 87, 95, 98, 104, 112, 174, 185, 186, 191, 195, 198, 211, 218, 223, 230, 236, 237, 249, 263, 278], "curli": [12, 126, 211], "duplic": [12, 53, 56, 63, 68, 70, 98, 102, 219, 227, 249, 281], "suppli": [12, 28, 29, 41, 42, 43, 53, 54, 62, 64, 72, 76, 98, 102, 117, 120, 121, 123, 128, 130, 133, 138, 139, 149, 176, 185, 190, 195, 197, 206, 208, 213, 220, 227, 243, 249, 250, 256, 258, 261], "powsimp": [12, 62, 68, 220, 223], "deep": [12, 20, 62, 68, 92, 93, 207, 218, 223, 231, 283], "measur": [12, 35, 68, 70, 78, 94, 116, 156, 165, 170, 178, 181, 183, 185, 186, 190, 192, 195, 207, 219, 220, 223, 231, 255, 256, 259, 260, 262, 263, 265], "count_op": [12, 62, 220, 223], "radic": [12, 22, 62, 63, 98, 198, 206, 207, 223, 229, 230], "join": [12, 24, 54, 62, 63, 75, 93, 105, 106, 211, 223, 227, 229, 232, 249, 253], "autoexpand": [12, 223], "violat": [12, 126, 196, 208, 223], "topic": [13, 21, 32, 43, 136, 141, 193, 194, 195, 196, 198, 200, 201, 206, 230, 273, 280, 285], "motiv": [13, 20, 32, 207], "behind": [13, 32, 113, 126, 140, 180, 200, 220, 223, 227, 230, 273, 280], "decis": [13, 32, 62, 68, 89, 220, 229, 244], "opinion": [13, 32], "pitfal": [13, 20, 195, 201, 280, 285, 288], "glossari": 13, "seem": [14, 18, 20, 86, 87, 126, 181, 198, 223, 227, 288], "unwieldi": 14, "arbitrarili": [14, 22, 41, 62, 75, 102, 204, 206, 218, 221, 227, 228, 231], "six": [14, 106, 211, 224, 230, 231], "bias": 14, "toward": [14, 43, 62, 70, 198, 218, 230], "enter": [14, 54, 62, 63, 67, 75, 102, 104, 105, 121, 125, 128, 138, 211, 221, 229, 242, 283, 287], "attempt": [14, 16, 19, 20, 22, 25, 29, 31, 43, 53, 58, 60, 62, 66, 67, 74, 87, 89, 98, 102, 116, 118, 171, 201, 202, 206, 211, 213, 220, 223, 224, 227, 229, 230, 231, 242, 280, 288], "unambigu": [14, 211, 227, 252], "univari": [14, 22, 31, 41, 61, 62, 68, 85, 89, 198, 199, 201, 202, 205, 206, 207, 208, 213, 224, 226, 229, 231], "linear": [14, 20, 23, 25, 27, 28, 31, 42, 43, 54, 61, 62, 63, 65, 66, 70, 75, 85, 87, 89, 91, 93, 95, 97, 105, 109, 112, 119, 120, 121, 123, 128, 130, 131, 136, 138, 142, 143, 148, 170, 173, 174, 190, 197, 198, 202, 204, 206, 207, 209, 217, 219, 221, 224, 227, 228, 229, 230, 249, 271, 273, 289], "undetermin": [14, 62, 98, 207, 213, 227, 229], "nonlinear": [14, 23, 29, 31, 61, 143, 207, 227, 229, 230], "sol": [14, 28, 98, 224, 227, 228, 229], "insuffici": [14, 93], "elimin": [14, 16, 27, 43, 58, 62, 92, 94, 98, 116, 202, 209, 210, 212, 214, 223, 227, 229, 230, 237, 244, 284], "nsolv": [14, 22, 28, 30, 31, 143, 229], "z_eq": 14, "zsol": 14, "906425478894557": 14, "sol0": 14, "90642547889456": 14, "reduce_inequ": [14, 24, 226, 229], "classifi": [15, 98, 201, 227, 228, 230, 231], "distinguish": [15, 18, 19, 42, 53, 66, 91, 126, 175, 181, 198], "former": [15, 43, 62, 67, 126, 204, 206, 207, 224, 249], "retriev": [15, 45, 60, 93, 207, 223, 237], "guarante": [15, 18, 22, 28, 43, 53, 54, 62, 74, 87, 89, 98, 201, 204, 206, 207, 227, 229, 230, 247, 252, 284, 288], "catch": [15, 62, 227, 242, 284], "naiv": [15, 53, 59, 62, 87, 93, 98, 181, 221, 229, 230, 237], "theori": [15, 20, 44, 45, 51, 52, 53, 54, 60, 62, 63, 67, 70, 91, 99, 121, 126, 140, 142, 155, 173, 176, 186, 190, 200, 204, 205, 206, 210, 224, 246, 256, 274, 282], "is_subset": [15, 219], "valueerror": [15, 18, 28, 29, 36, 38, 41, 43, 44, 54, 62, 63, 71, 72, 75, 77, 78, 89, 93, 95, 98, 101, 102, 105, 110, 112, 150, 190, 192, 196, 198, 200, 204, 206, 219, 227, 229, 230, 249, 252, 263], "odd": [15, 18, 25, 36, 38, 39, 40, 50, 54, 62, 63, 67, 68, 70, 92, 101, 102, 113, 196, 206, 207, 211, 229], "appliedpred": [15, 36, 37, 38], "analysi": [16, 43, 44, 53, 62, 63, 68, 109, 128, 140, 141, 144, 198, 207, 221, 224, 231], "vari": [16, 41, 43, 62, 76, 78, 105, 110, 116, 121, 141, 174, 195, 218, 229, 249, 263], "hope": [16, 53, 116, 198], "research": [16, 54, 208, 223], "establish": [16, 58, 87, 120, 131, 221], "envis": 16, "along": [16, 20, 22, 43, 53, 62, 63, 64, 68, 70, 71, 72, 76, 77, 80, 82, 85, 87, 93, 95, 98, 105, 106, 108, 115, 116, 120, 121, 128, 130, 133, 134, 135, 138, 139, 140, 143, 145, 173, 185, 186, 192, 195, 197, 200, 201, 206, 207, 227, 230, 259, 263, 265], "small": [16, 25, 43, 44, 45, 53, 54, 62, 66, 67, 89, 92, 98, 102, 112, 130, 134, 143, 173, 196, 197, 202, 204, 205, 206, 223, 224, 229, 249, 277, 280, 282], "x_": [16, 25, 29, 43, 52, 62, 63, 67, 104, 202, 204, 207, 213, 224, 227, 232], "taylor": [16, 62, 68, 126, 140, 143, 202, 204, 207, 208, 218, 227], "let": [16, 18, 19, 20, 41, 43, 53, 58, 62, 63, 72, 80, 85, 87, 91, 95, 98, 99, 102, 104, 117, 126, 143, 181, 186, 194, 198, 199, 200, 204, 206, 207, 208, 211, 218, 221, 223, 224, 227, 229, 230, 237, 240, 243, 247, 250, 261, 262, 266, 277, 280, 282, 283, 288], "df": [16, 64, 227], "c_": [16, 23, 29, 63, 85, 87, 195, 199, 227], "grid": [16, 41, 42, 110, 197], "f_": [16, 62, 67, 70, 89, 138, 139, 140, 204, 210, 211, 221, 227], "constraint": [16, 24, 98, 106, 112, 120, 121, 122, 125, 126, 128, 129, 130, 132, 136, 138, 139, 140, 143, 208, 273], "formul": [16, 27, 120, 129, 130, 136, 138, 139, 176, 195], "assess": 16, "brute": [16, 220, 224], "frequent": [16, 53, 206, 218, 230], "cover": [16, 68, 102, 104, 116, 126, 185, 194, 237, 244, 278, 280], "treatment": [16, 87, 207], "shall": [16, 53, 87, 126, 143, 218, 221, 283], "job": [16, 20, 54, 156, 208, 211], "truncat": [16, 54, 62, 98, 102, 106, 181, 197, 208, 210, 213, 214], "approx": [16, 23, 28, 62, 89], "lowest": [16, 43, 53, 58, 102, 198, 213, 230], "2h": 16, "print_funct": 16, "x0": [16, 29, 41, 43, 52, 62, 70, 81, 83, 85, 86, 102, 148, 201, 212, 213, 218, 223, 227, 229, 231, 249, 278], "x_0": [16, 52, 53, 63, 84, 85, 86, 204, 213, 224, 227, 231, 278], "fi": 16, "fip1": 16, "fip2": 16, "c_0": [16, 63, 85], "c_1": [16, 29, 63, 85, 87, 218, 221, 227], "c_2": [16, 29, 45, 87, 218, 227], "2f": [16, 289], "sum": [16, 18, 25, 43, 51, 54, 61, 62, 65, 67, 70, 75, 77, 85, 87, 89, 91, 92, 93, 95, 98, 102, 108, 123, 138, 155, 159, 162, 170, 173, 175, 176, 196, 198, 199, 201, 202, 206, 207, 208, 211, 213, 214, 216, 218, 220, 221, 223, 224, 227, 229, 230, 231, 232, 233, 235, 237, 246, 249, 288], "c_i": [16, 87, 218, 221, 227], "nth": [16, 62, 67, 70, 91, 102, 202, 207, 208, 217, 223, 227, 231], "degre": [16, 22, 44, 45, 53, 60, 61, 67, 70, 78, 89, 93, 98, 105, 108, 110, 112, 120, 121, 126, 127, 130, 136, 144, 148, 195, 198, 199, 202, 204, 206, 207, 210, 214, 217, 220, 221, 223, 224, 227, 229, 231, 256, 273], "x_i": [16, 20, 52, 70, 89, 98, 199, 202, 204, 207, 208, 211, 230], "m11": [16, 231], "m12": [16, 231], "m13": 16, "m21": [16, 231], "m22": [16, 231], "m23": 16, "m31": 16, "m32": 16, "m33": [16, 102], "3x3": [16, 27, 77, 98, 261], "invert": [16, 27, 31, 39, 62, 63, 93, 95, 98, 112, 130, 178, 199, 201, 202, 206, 207, 227, 229, 230, 237, 284], "inv": [16, 27, 54, 94, 98, 120, 121, 128, 133, 134, 143, 165, 200, 227], "fim1": 16, "eight": [16, 31, 211], "dfdxcheck": 16, "cancel": [16, 20, 43, 62, 66, 70, 78, 87, 89, 98, 102, 112, 113, 201, 202, 204, 207, 210, 223, 229, 282], "c3": [16, 29, 45, 65, 91, 93, 95, 102, 227, 231, 262, 289], "c5": [16, 227], "120": [16, 61, 62, 67, 68, 84, 102, 105, 106, 208, 210, 211, 213, 227, 278], "c7": [16, 53], "5040": [16, 67, 84, 207, 208], "quickli": [16, 20, 53, 54, 62, 63, 66, 102, 204, 207, 220, 230, 246], "tediou": [16, 89], "certainli": [16, 74, 104, 246], "fine": [16, 20, 25, 62, 66, 90, 191, 201, 211, 223], "devis": 16, "xn": [16, 20, 202], "x_n": [16, 20, 44, 52, 63, 84, 98, 199, 202, 204, 207, 224, 230], "fn": [16, 29, 89, 98, 198, 207], "fnm1": 16, "fnm2": 16, "dth": 16, "Of": [16, 18, 22, 61, 87, 98, 227, 230, 249, 288], "cours": [16, 18, 45, 46, 53, 61, 70, 87, 89, 98, 99, 102, 192, 200, 201, 205, 206, 218, 220, 221, 263, 288], "etc": [16, 18, 19, 38, 41, 43, 58, 62, 63, 67, 68, 80, 91, 92, 97, 102, 126, 147, 156, 160, 173, 176, 188, 192, 194, 195, 197, 198, 199, 201, 204, 206, 211, 212, 219, 220, 221, 223, 227, 230, 231, 235, 243, 244, 249, 261, 265], "discrit": 16, "bengt": [16, 41], "fornberg": [16, 41], "weight": [16, 62, 70, 77, 79, 89, 91, 98, 160, 223, 278], "gap": [17, 53, 102, 126, 208], "matur": [17, 18, 229, 230], "finit": [17, 18, 26, 39, 43, 48, 49, 50, 53, 61, 62, 63, 65, 66, 89, 91, 92, 162, 186, 196, 199, 202, 205, 207, 208, 211, 213, 214, 217, 219, 224, 226, 227, 230, 249, 256, 258, 268, 279, 282, 288], "concret": [18, 42, 54, 62, 67, 68, 89, 91, 98, 102, 126, 181, 202, 206, 211, 268], "obviou": [18, 19, 20, 27, 45, 53, 61, 198, 201, 210, 224, 282], "situat": [18, 31, 62, 66, 87, 195, 227, 229, 231, 247, 280], "refus": [18, 288], "roughli": [18, 62, 63, 103, 127, 227, 250], "possibli": [18, 43, 54, 60, 62, 87, 89, 102, 179, 204, 218, 219, 229, 244, 249, 278, 284], "infinit": [18, 20, 24, 25, 39, 61, 62, 63, 66, 67, 68, 75, 76, 89, 98, 102, 112, 132, 162, 181, 198, 206, 211, 212, 213, 216, 217, 218, 219, 223, 224, 226, 229, 236, 249, 288, 289], "is_neg": [18, 20, 202], "unknow": 18, "resolv": [18, 19, 22, 24, 25, 26, 27, 28, 29, 30, 62, 89, 220, 223, 229], "undecid": [18, 20, 26, 98, 201, 230, 284], "conclud": [18, 70, 85, 128, 192, 218, 229, 265], "particularli": [18, 66, 89, 201, 202, 221, 288, 289], "mix": [18, 34, 61, 68, 93, 98, 104, 185, 201, 202, 207, 211, 230, 233, 235, 237, 250], "ideal": [18, 43, 99, 123, 126, 136, 186, 194, 200, 202, 204, 205, 206, 207, 208, 223, 230, 256], "slow": [18, 20, 22, 27, 58, 62, 66, 89, 103, 116, 128, 148, 185, 195, 201, 202, 211, 212, 213, 214, 223, 227, 229, 230, 242, 243, 288], "indetermin": [18, 19, 62, 98, 204, 216, 229], "contradict": 18, "infer": [18, 37, 38, 54, 62, 89, 201, 210, 211, 216, 221, 227, 243], "prepar": [18, 121, 209], "presum": [18, 87, 201, 221, 244], "singletonregistri": [18, 62], "x1": [18, 20, 28, 29, 52, 62, 67, 143, 148, 201, 202, 212, 213, 223, 227, 229, 231, 249], "x2": [18, 28, 52, 62, 67, 143, 148, 201, 213, 227, 229, 231], "posifi": [18, 223], "_x": [18, 20, 98, 137, 141, 191, 194, 195, 202, 208, 223, 227, 243], "rep": [18, 53, 58, 62, 160, 198, 200, 201, 202, 205, 206, 207, 220, 223, 252], "feel": [18, 33, 143, 144, 223, 227, 229], "among": [18, 42, 43, 44, 46, 53, 54, 63, 90, 103, 207, 227, 232, 235, 237, 260], "behaviour": [18, 87, 92, 117, 204, 208, 214, 217], "symbolc": 18, "aris": [18, 19, 62, 67, 87, 89, 173, 195, 201, 206], "implicit": [18, 29, 43, 60, 62, 104, 121, 125, 144, 197, 227, 229, 233, 236, 243, 244, 256, 259, 266, 280], "tailor": 18, "assumptions0": [18, 62], "extended_neg": [18, 62], "extended_nonneg": [18, 62], "extended_nonposit": [18, 62], "extended_nonzero": [18, 62, 211], "extended_posit": [18, 62], "extended_r": [18, 39, 62, 211, 226, 230], "hermitian": [18, 27, 39, 62, 93, 94, 98, 159, 165, 176, 211], "irrat": [18, 22, 39, 41, 62, 102, 201, 207, 211, 219, 282], "noninteg": [18, 39, 62, 201, 211], "nonneg": [18, 20, 39, 62, 63, 64, 67, 70, 95, 143, 199, 201, 207, 224, 231, 288], "nonposit": [18, 39, 62, 67, 70, 143], "nonzero": [18, 20, 39, 40, 61, 62, 77, 98, 114, 199, 200, 201, 202, 211, 214, 230], "transcendent": [18, 26, 30, 31, 39, 62, 70, 89, 201, 206, 211, 229, 230, 284, 289], "field": [18, 29, 35, 39, 43, 62, 63, 64, 70, 80, 89, 148, 149, 188, 189, 193, 198, 199, 200, 202, 203, 205, 207, 208, 209, 224, 229, 242, 256, 259, 261, 262, 264, 266, 271, 273, 274], "antihermitian": [18, 39, 62], "mathbb": [18, 20, 25, 39, 44, 45, 53, 61, 62, 63, 68, 70, 87, 93, 98, 140, 196, 198, 199, 201, 202, 204, 206, 207, 210, 218, 219, 221, 224, 230, 231, 288], "ii": [18, 68, 87, 89, 102, 207, 211, 219, 227, 230, 233], "cup": [18, 207, 219, 230], "pm": [18, 22, 23, 25, 35, 61, 87, 89, 199, 210, 218, 224, 227], "yi": 18, "composit": [18, 39, 42, 51, 53, 54, 62, 63, 80, 82, 89, 102, 105, 202, 204, 207, 210, 223, 230, 245], "2k": [18, 62, 67, 87, 102, 224], "pariti": [18, 54, 207], "le": [18, 44, 58, 62, 70, 87, 93, 102, 135, 204, 221, 231], "commutative_properti": [18, 62], "skew": [18, 85, 102, 231], "hermitian_matrix": 18, "complex_numb": [18, 39, 62], "algebraic_numb": [18, 39, 62], "transcendental_numb": [18, 62], "extended_real_number_lin": 18, "real_numb": [18, 39], "imaginary_numb": [18, 39, 62], "rational_numb": [18, 39], "irrational_numb": [18, 39, 62], "parity_": [18, 62], "28mathemat": [18, 54, 62, 98, 219], "prime_numb": [18, 62, 102], "composite_numb": [18, 62], "positive_real_numb": 18, "negative_numb": [18, 62], "inconsist": [18, 20, 36, 38, 61, 181, 186, 190, 194, 223, 227, 230], "inconsistentassumpt": 18, "deal": [18, 43, 61, 62, 66, 74, 82, 87, 89, 109, 116, 121, 122, 126, 192, 194, 195, 199, 204, 207, 224, 229, 240, 250, 252, 260, 265, 280, 282, 288], "is_zero_matrix": [18, 93, 200], "generalis": [18, 70, 87, 198], "gaussian": [18, 70, 89, 98, 102, 146, 180, 204, 207, 224, 229, 231, 273, 284], "notion": [18, 42, 181, 184, 198, 230, 260, 265], "chain": [18, 20, 43, 53, 58, 62, 70, 79, 103, 194, 206, 231], "superset": [18, 41, 51, 57, 65, 143, 201, 219, 229], "vanilla": 18, "attach": [18, 54, 56, 87, 103, 105, 120, 121, 137, 195, 243, 245, 250], "is_commut": [18, 89, 165, 174, 249], "is_complex": [18, 62], "is_finit": [18, 62], "permit": [18, 54, 64, 68, 92, 102, 197], "formal": [18, 25, 42, 61, 62, 70, 87, 92, 145, 181, 201, 204, 215, 218, 268], "littl": [18, 20, 42, 54, 72, 98, 102, 103, 128, 181, 200, 205, 207, 211, 221, 223, 231, 246, 260], "n1": [18, 43, 53, 62, 63, 126, 143, 145, 149, 185, 224, 231, 256], "n2": [18, 43, 53, 62, 63, 143, 145, 149, 224, 231], "misunderstand": 18, "is_nonneg": [18, 20, 202], "intent": [18, 43, 61, 62, 104, 244], "meaning": [18, 36, 38, 42, 63], "neither": [18, 19, 39, 62, 150, 171, 197, 207, 218, 219, 220, 227, 237, 250, 256, 265, 288], "alon": [18, 63, 90, 204, 227, 229, 236, 249, 282, 283], "tempt": [18, 20, 62, 102], "meet": [18, 63, 218], "criteria": [18, 62, 283], "noncommut": [18, 62, 85, 283], "finiteset": [18, 26, 41, 42, 219, 230, 231, 289], "s1": [18, 45, 53, 61, 75, 78, 85, 112, 187, 198, 207, 214, 224, 249, 259], "s2": [18, 45, 53, 54, 61, 75, 78, 112, 187, 198, 207, 214, 218, 224, 249, 259], "bool": [18, 35, 41, 43, 45, 58, 60, 62, 63, 65, 68, 89, 90, 92, 93, 95, 98, 102, 104, 121, 122, 160, 188, 191, 197, 206, 207, 209, 211, 212, 213, 218, 219, 223, 226, 231, 243, 244, 249, 250, 256, 259, 280], "plai": [18, 61, 128, 138, 224, 280, 282, 283], "role": [18, 68, 209], "connect": [18, 56, 63, 64, 77, 78, 98, 103, 105, 108, 117, 120, 128, 131, 137, 198, 199, 200, 209, 227, 231, 249, 256], "is_finite_set": 18, "zero_matrix": 18, "setsymbol": 18, "is_compar": [18, 62], "capitalis": 18, "4142135623731": [18, 28, 211, 229], "predict": [18, 176, 223, 249], "expreal": 18, "fuzzy_and": [18, 19, 20], "fuzzy_or": [18, 19], "is_extended_nonneg": 18, "classmethod": [18, 20, 35, 37, 38, 43, 46, 51, 53, 54, 56, 57, 62, 68, 69, 70, 77, 93, 98, 112, 162, 173, 174, 176, 200, 202, 206, 207, 211, 219, 237, 242], "is_extended_r": 18, "elif": [18, 19, 20, 68], "is_infinit": 18, "is_extended_neg": 18, "is_extended_posit": [18, 19], "_eval_is_finit": 18, "is_extended_nonposit": 18, "_eval_is_algebra": 18, "is_nonzero": [18, 77], "_eval_is_integ": 18, "_eval_is_zero": [18, 20], "__new__": [18, 20, 43, 53, 62, 283], "verifi": [18, 22, 27, 29, 33, 41, 53, 59, 63, 64, 126, 198, 204, 210, 227, 229, 230, 232, 233, 288], "importantli": [18, 20, 208, 246], "reject": [18, 19, 102, 224, 252], "_eval_is_": 18, "is_algebra": [18, 62, 202], "interfer": [18, 211], "determinist": [18, 53, 89, 102, 204, 205], "reach": [18, 102, 112, 206, 207, 227], "claus": [18, 92], "flow": [18, 206], "inner": [18, 29, 61, 87, 98, 159, 162, 163, 168, 170, 171, 174, 176, 186, 190, 200, 206, 213, 256, 273], "optimis": [18, 227], "stage": [18, 42, 61, 102, 218, 288], "briefli": [18, 199, 204], "default_assumpt": 18, "cach": [18, 67, 87, 198, 207, 211, 240, 245, 246], "_ask": 18, "_eval_i": 18, "enumer": [18, 32, 46, 51, 54, 57, 65, 69, 87, 92, 102, 206, 207, 221, 246, 249, 268], "randomis": [18, 239, 275], "unresolv": 18, "factrul": 18, "_assume_rul": 18, "preprocess": [18, 89, 209], "defined_fact": 18, "full_impl": 18, "defaultdict": [18, 62, 249], "precomput": [18, 67, 102, 250], "static": [18, 35, 43, 53, 54, 56, 62, 68, 75, 76, 77, 78, 95, 106, 128, 136, 197, 211, 217, 219, 231, 243], "knowabl": 18, "stdfactkb": 18, "_eval_is_r": [18, 20, 207], "_assumpt": [18, 62], "amongst": [18, 229], "indirectli": 18, "manifest": [18, 199], "jointli": 18, "fundament": [18, 20, 41, 44, 52, 80, 87, 89, 98, 180, 181, 201, 206, 224, 227, 231, 284], "theoret": [18, 42, 44, 53, 63, 67, 205, 206, 221, 231, 280], "isposit": 19, "xpo": 19, "xneg": 19, "strictgreaterthan": [19, 62, 211], "analogu": [19, 39, 61, 76, 201, 202], "piecewis": [19, 20, 43, 61, 67, 70, 89, 92, 105, 174, 211, 213, 214, 229, 230, 231, 250, 278], "p2": [19, 53, 54, 61, 72, 74, 75, 76, 77, 78, 105, 112, 117, 120, 143, 190, 197, 201, 202, 204, 208, 220, 231], "nonetyp": [19, 43], "quirk": 19, "both_posit": 19, "falsei": 19, "both_positive_bett": 19, "negat": [19, 20, 39, 62, 68, 92, 112, 186, 200, 202, 204, 207], "fuzzy_not": [19, 20], "both_positive_best": 19, "silent": [19, 66, 102, 243], "carefulli": [19, 62, 186, 204, 213], "truth": [19, 36, 37, 38, 39, 40, 62, 93, 223], "bitwis": [19, 65, 92], "footnot": [19, 181, 283, 284, 287], "si": [20, 70, 86, 87, 149, 178, 179, 180, 181, 182, 183, 211], "combinatori": [20, 46, 54, 61, 62, 69, 70, 207, 213, 223, 249, 251, 268, 288], "dig": [20, 43, 283], "handler": [20, 36, 37, 38, 39, 40, 62, 69, 98], "spectrum": 20, "matter": [20, 41, 51, 54, 61, 62, 67, 87, 89, 141, 218, 249, 282, 283], "use_unicod": [20, 27, 41, 42, 43, 66, 70, 89, 90, 98, 106, 112, 148, 191, 196, 198, 199, 210, 211, 212, 230, 231, 278, 282, 284, 287, 288, 289], "np": [20, 29, 67, 85, 102, 126, 243, 250], "arang": [20, 243, 277], "arrai": [20, 23, 27, 28, 29, 43, 53, 54, 58, 59, 63, 70, 89, 93, 95, 98, 102, 103, 110, 143, 173, 197, 200, 202, 207, 211, 230, 231, 234, 236, 237, 238, 243, 244, 246, 250, 271, 284], "ultim": [20, 68, 181], "cosin": [20, 62, 68, 70, 77, 89, 117, 120, 186, 195, 207, 208, 214, 220, 231, 256, 288], "todai": [20, 198], "operatornam": [20, 35, 67, 68, 70, 87, 89, 196, 199, 207, 211, 214, 219, 221, 229], "modern": [20, 43, 198, 205, 211], "recal": [20, 62, 98, 204, 206, 221, 280, 282, 283, 289], "redefin": [20, 54, 62, 138, 140, 199, 250], "antipattern": [20, 281], "stai": [20, 206], "trig": [20, 62, 89, 207, 211, 220, 223, 288], "wouldn": 20, "cheap": [20, 62, 102], "as_two_term": [20, 62], "split": [20, 43, 62, 63, 66, 87, 89, 104, 204, 206, 209, 210, 211, 229, 231, 237, 242, 249, 254, 283, 288], "hadn": 20, "wors": [20, 92, 223], "expand_trig": [20, 62, 277], "mid": [20, 44, 63, 66, 106, 219, 224], "troubl": [20, 70], "bigger": [20, 43, 62, 67, 98, 221, 227, 288], "deduc": [20, 43, 87, 92, 221, 282], "disallow": [20, 62, 207, 212, 223, 245], "great": [20, 145, 208, 211, 224, 250], "simplest": [20, 29, 42, 92, 98, 102, 103, 196, 197, 208, 212, 220, 223, 227, 278, 288], "\u03c0": [20, 66, 148, 211, 230, 278, 282, 288, 289], "as_independ": [20, 62, 230], "coeff": [20, 62, 64, 92, 143, 202, 206, 207, 217, 223, 227, 229, 237, 288], "apart": [20, 35, 53, 58, 62, 66, 68, 89, 192, 199, 202, 204, 207, 210, 213, 224, 230, 237, 261, 263, 283], "is_even": [20, 50, 53, 54], "nonreal": [20, 28, 229], "cosh": [20, 62, 68, 70, 81, 87, 208, 211, 212, 221, 223, 229, 284, 288], "5919532755215": 20, "_eval_is_nonneg": 20, "exercis": [20, 53, 246, 281, 288], "_eval_is_posit": 20, "as_add": [20, 62], "pi_": 20, "fuzzy_": 20, "deduct": [20, 43], "subtl": [20, 220], "nontrivi": [20, 53, 62, 102], "_eval_evalf": [20, 207], "prec": [20, 28, 62, 72, 78, 102, 110, 196, 202, 207, 208, 223, 229], "dp": [20, 43, 62, 65, 70, 102, 201, 202, 229, 245], "53": [20, 63, 65, 98, 145, 199, 201, 202], "459697694131860": 20, "hook": [20, 103, 211], "_eval_rewrit": [20, 62], "rewritten": [20, 62, 67, 68, 70, 89, 126, 173, 180, 218, 223, 227, 229, 288], "caller": 20, "ve": [20, 128], "nonintegr": 20, "iff": [20, 39, 54, 63, 92, 98, 195, 198, 206, 221, 224, 242], "isint": 20, "xy": [20, 41, 42, 76, 98, 123, 195, 197, 198, 204, 211, 223, 230, 266, 283, 288], "happi": 20, "demand": [20, 34], "_eval_expand_": 20, "expand_": 20, "predefin": [20, 64, 143, 201, 211, 212, 223, 230, 237, 256, 261], "expand_log": [20, 43, 62, 223], "_eval_expand_trig": 20, "sophist": [20, 103, 229], "th": [20, 35, 44, 53, 54, 60, 63, 64, 66, 67, 68, 70, 91, 92, 98, 102, 121, 202, 204, 206, 207, 213, 216, 221, 224, 227, 229, 231, 232, 237], "x_1": [20, 44, 52, 53, 63, 67, 84, 98, 171, 199, 202, 204, 207, 213, 224, 230], "ldot": [20, 25, 44, 52, 53, 61, 62, 63, 67, 70, 87, 102, 106, 181, 196, 198, 199, 202, 204, 206, 211, 214, 218, 221, 224, 229, 232, 288], "x_k": [20, 63, 204], "dy": [20, 43, 64, 79, 98, 105, 115, 143, 207, 211, 224, 227, 228, 278], "dz": [20, 105, 115, 221], "argumentindexerror": 20, "varion": 20, "middl": [20, 70, 78, 87, 98, 106, 156, 197, 221, 288], "iverson": 20, "printmethod": [20, 211], "latexprint": 20, "_latex": [20, 211], "_print": [20, 211], "_m": [20, 70], "_n": [20, 63, 67, 70, 89, 207, 221, 230], "arcversin": 20, "aversin": 20, "im": [20, 40, 62, 68, 87, 96, 198, 211, 212, 219, 227, 284], "sinh": [20, 41, 62, 66, 68, 70, 81, 87, 208, 211, 212, 221, 288], "expand_complex": [20, 62], "analog": [20, 22, 27, 55, 61, 63, 67, 141, 194, 195, 198, 199, 200, 204, 216, 232, 249], "vers": 20, "geometr": [20, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 98, 145, 195, 198, 205, 231, 284], "angl": [20, 35, 68, 70, 71, 72, 73, 75, 76, 77, 78, 108, 114, 120, 125, 126, 128, 129, 130, 131, 137, 140, 145, 148, 149, 150, 173, 181, 186, 194, 195, 196, 211, 220, 230, 256, 258, 261, 288], "horizont": [20, 31, 42, 72, 75, 77, 93, 108, 148, 197, 200, 211], "distanc": [20, 42, 46, 54, 72, 75, 76, 77, 78, 105, 106, 115, 116, 120, 130, 131, 145, 149, 179, 190, 192, 265], "rightmost": [20, 176], "scientificamerican": 20, "uniti": [20, 68, 70, 87, 171, 206], "secret": [20, 63], "teacher": 20, "taught": [20, 89], "nr": 20, "sake": [20, 67, 224], "simplic": [20, 221, 227], "divisor": [20, 39, 53, 62, 63, 98, 102, 198, 199, 201, 202, 204, 205, 206, 207, 210], "hardwar": [20, 43], "regard": [20, 44, 63, 70, 90, 144, 176, 198, 199, 213, 229, 230], "c99codeprint": [20, 43, 211], "cxx11codeprint": [20, 211], "cfunction": 20, "e2": [20, 41, 62, 65, 72, 79, 89, 98, 102, 110, 126, 201, 206, 218, 227, 230, 231, 249], "93accumulate_oper": 20, "fused_multipli": 20, "93add": 20, "ccode": [20, 43, 211, 236, 244], "cxxcode": [20, 43, 211], "_ccode": [20, 211], "_y": [20, 24, 137, 141, 191, 194, 195], "_z": [20, 89, 137, 141, 194, 195, 231], "_cxxcode": [20, 211], "std": [20, 211, 231], "28318530717959": 20, "trigonometricfunct": 20, "inversetrigonometricfunct": 20, "reciprocaltrigonometricfunct": 20, "bypass": [20, 227], "fragil": 20, "tend": [20, 34, 43, 62, 67, 204, 206, 216, 218, 221, 281, 288], "prone": [20, 25, 43, 62], "move": [20, 53, 54, 62, 63, 76, 78, 105, 120, 128, 130, 136, 164, 190, 194, 195, 223, 232, 241, 263], "task": [21, 23, 32, 68, 136, 137, 143, 201, 206, 278, 285], "deeper": [21, 235, 283], "explor": [21, 138, 139, 197, 206, 246, 288], "ax": [22, 23, 25, 27, 35, 63, 66, 72, 75, 87, 94, 98, 105, 110, 120, 148, 173, 186, 195, 196, 197, 200, 208, 224, 227, 230, 232, 233, 236, 256, 258, 260, 263, 265, 288], "bx": [22, 23, 87, 231, 237], "yield": [22, 24, 25, 26, 27, 29, 30, 41, 43, 53, 62, 63, 67, 70, 86, 87, 102, 105, 112, 118, 170, 196, 199, 204, 206, 207, 212, 213, 218, 219, 220, 223, 224, 229, 246, 249, 284], "4ac": [22, 23, 224], "2a": [22, 23, 231], "quadrat": [22, 25, 62, 63, 89, 102, 198, 202, 206, 207, 224, 229, 231], "convei": 22, "five": [22, 25, 42, 51, 87, 108, 211, 224], "rootof": [22, 68, 207], "ill": [22, 179], "spuriou": [22, 204, 229], "interv": [22, 24, 26, 29, 39, 41, 53, 62, 66, 68, 70, 71, 72, 75, 78, 87, 89, 92, 102, 162, 171, 200, 202, 204, 206, 207, 214, 217, 219, 226, 230, 231, 289], "irreduc": [22, 199, 202, 204, 206, 207, 210, 231, 237, 288], "reveal": [22, 25, 27, 43, 102, 230, 283], "lie": [22, 54, 64, 76, 77, 78, 207, 231, 267, 274], "cubic": [22, 70, 198, 207, 224, 229], "quartic": [22, 72, 207, 229], "fourth": [22, 62, 63, 199, 227, 278], "687": 22, "144": [22, 31, 67, 89, 196], "emphas": [22, 61], "quintic": [22, 207, 229], "fifth": 22, "techniqu": [22, 26, 27, 29, 44, 57, 87, 89, 211, 213, 223, 227, 230, 284], "abel": [22, 31, 98], "ruffini": [22, 31, 98], "theorem": [22, 31, 50, 63, 70, 72, 78, 89, 93, 98, 102, 115, 116, 128, 176, 185, 194, 198, 201, 204, 218, 221, 224, 230], "expression_expand": 22, "symbolic_expand": 22, "cube": [22, 41, 43, 46, 53, 55, 68, 89, 204, 205, 224, 230, 266], "nois": 22, "neglig": 22, "compon": [22, 42, 43, 58, 62, 64, 77, 89, 95, 98, 113, 120, 123, 136, 137, 141, 148, 173, 178, 185, 186, 192, 193, 194, 195, 196, 197, 198, 199, 200, 207, 209, 231, 233, 236, 237, 246, 249, 256, 259, 262, 263], "18482169793536e": 22, "55872552179222e": 22, "contrarili": 22, "rq0": 22, "rq1": 22, "rq2": 22, "rq3": 22, "237": [22, 205], "36": [22, 45, 56, 63, 67, 78, 89, 93, 98, 102, 106, 207, 211, 224, 227, 231, 266], "349745826211722": 22, "438990337475312": 22, "wilkinson": [22, 93], "expression_complex": 22, "symbolic_complex": 22, "expression_complex_poli": 22, "travers": [22, 78, 102, 118, 207, 220, 236, 246, 283], "loop": [22, 25, 29, 42, 43, 102, 112, 129, 186, 197, 208, 211, 227, 246, 249, 283], "my_real_root": 22, "my_root": 22, "324": [22, 102, 205], "fifth_ord": 22, "16730397826142": 22, "181232444469875": 22, "08395410131771": 22, "764884433600585": 22, "352471546031726": 22, "polyerror": [22, 204, 207], "unsolvablefactorerror": [22, 207, 229], "complexrootof": [22, 62, 98, 202, 207, 227], "fifth_order_solv": 22, "167303978": 22, "1812324445": 22, "083954101": 22, "7648844336": 22, "352471546": 22, "sole": 22, "croot": 22, "r0": [22, 207], "r1": [22, 35, 72, 75, 91, 105, 106, 149, 186, 192, 207, 256], "r2": [22, 35, 64, 75, 91, 93, 105, 106, 149, 186, 207, 211, 223, 256], "r3": [22, 35, 91, 105, 106, 223], "r4": [22, 91, 105], "opposit": [22, 58, 78, 92, 93, 117, 199, 202, 219, 223, 230, 238, 249, 256, 258, 288], "robustli": 22, "diophantin": [23, 24, 102, 204, 225, 268], "guidanc": 23, "2z": [23, 30, 70, 230, 231], "4z": [23, 30, 230], "6z": [23, 30], "739085133215161": [23, 28, 30, 31, 229], "9y": [23, 29], "3x": [23, 29, 62, 104, 204, 230, 280], "cc": [23, 27, 63, 78, 196, 199, 201, 207, 284], "2e": [23, 27, 62], "ce": [23, 27], "2pq": [23, 25], "linprog": 24, "as_set": [24, 92], "accomplish": [24, 89, 140, 143, 263], "exclud": [24, 29, 31, 43, 61, 62, 89, 98, 118, 143, 199, 202, 204, 207, 217, 227, 229, 242, 245, 249], "rel_op": [24, 62], "relations_sort": 24, "append": [24, 29, 53, 62, 63, 98, 106, 143, 171, 197, 202, 211, 229, 232, 244, 245, 249, 288], "x_y_reduc": 24, "insight": [24, 281], "x_reduc": 24, "y_reduc": 24, "solve_univariate_inequ": [24, 226, 230], "calculu": [24, 26, 62, 67, 89, 98, 143, 192, 220, 231, 262, 263, 264, 267, 268, 279, 281, 286], "reflect": [24, 31, 46, 50, 54, 62, 72, 73, 78, 91, 108, 145, 148, 149, 186], "parameter": [25, 64, 71, 72, 75, 78, 224], "pythagorean": [25, 224], "sage": [25, 62, 102, 196, 282], "ellipticcurv": 25, "ineffici": [25, 62, 98, 201], "my_sym": 25, "pythag_eq": 25, "sym": [25, 41, 52, 53, 58, 62, 67, 186, 211, 214, 219, 223, 224, 229, 231, 237, 249, 288], "pythag": 25, "a_1x_1": [25, 224], "a_2x_2": [25, 224], "a_nx_n": [25, 224], "bxy": [25, 224], "cy": [25, 224], "ei": [25, 29, 70, 87, 206, 211, 221, 224, 227, 237], "homogen": [25, 35, 85, 89, 98, 112, 202, 204, 207, 224, 227, 228, 231], "ternari": [25, 43, 62, 211, 224], "cz": [25, 65, 112, 224], "dxy": [25, 224], "eyz": [25, 224], "fzx": [25, 224], "a_": [25, 58, 62, 63, 70, 87, 91, 93, 95, 112, 113, 141, 213, 221, 224, 227, 229, 231, 232, 233], "pythogorean": 25, "subscript": [25, 27, 54, 202, 211, 221, 224, 249], "solution_dict": [25, 29], "zip": [25, 41, 52, 63, 92, 102, 207, 217, 224, 227, 246, 249], "elegantli": 25, "forget": [25, 42, 288], "solution_list": [25, 26], "solution_first": 25, "solution_p4q3": 25, "p_val": 25, "q_val": 25, "pythag_v": 25, "union": [25, 34, 39, 41, 43, 51, 53, 60, 92, 198, 206, 211, 217, 218, 219, 226, 230, 249], "4y": [25, 204, 230, 277], "rearrang": [26, 113, 121, 138, 139, 160, 227], "eqn": [26, 29, 41, 230], "solutions_set": 26, "solution_set": 26, "256": [26, 43, 53, 102, 207, 211], "solution_outside_2_3": 26, "critic": [26, 41, 149, 194, 206, 230], "minima": [26, 230], "critical_point": 26, "point1": [26, 187, 259], "point2": [26, 187, 259], "curvatur": [26, 145, 149], "membership": [26, 60, 206, 219], "candid": [26, 53, 62, 98, 102, 204, 223], "solution_set_arg": 26, "linalg": [27, 28, 43], "lu_solv": [27, 98, 200], "linear_eq_to_matrix": [27, 227, 230], "matrixbas": [27, 93, 94, 95, 98, 200], "column": [27, 35, 39, 42, 43, 44, 90, 92, 93, 95, 98, 99, 101, 112, 121, 125, 128, 141, 171, 178, 186, 191, 196, 200, 206, 211, 227, 230, 236, 256], "row": [27, 39, 42, 43, 44, 51, 54, 62, 67, 93, 94, 95, 98, 99, 101, 102, 112, 125, 126, 128, 141, 143, 144, 171, 186, 195, 200, 206, 211, 221, 230, 231, 236, 250, 256, 258], "shapeerror": [27, 93, 95, 98], "penros": [27, 95, 98], "pseudoinvers": [27, 98], "jordan": [27, 87, 93, 98, 209, 227, 229, 230], "lu": [27, 95, 98, 200, 205], "lusolv": [27, 94, 98, 120, 122, 140, 144, 229, 284], "repeatedli": [27, 102, 113, 243], "b2": [27, 70, 102, 105, 106, 117, 126, 143, 186, 200, 202, 211, 221, 224, 227, 262], "solution2": 27, "almost": [27, 87, 96, 104, 178, 197, 198, 202, 207, 208, 227, 231, 245, 246, 249, 282], "prioriti": [27, 43, 85, 116, 126, 195, 250], "computation": [27, 58, 68, 120, 121, 122], "tractabl": [27, 230], "rapidli": [27, 62, 66, 87, 218], "dimens": [27, 43, 46, 63, 64, 70, 71, 73, 75, 76, 77, 79, 91, 93, 95, 98, 101, 105, 113, 130, 150, 160, 162, 165, 170, 179, 180, 183, 184, 186, 197, 200, 211, 224, 227, 229, 231, 232, 233, 236, 237, 244, 256, 259, 261, 273], "dimension": [27, 41, 43, 46, 64, 74, 75, 76, 77, 78, 95, 98, 106, 113, 143, 150, 152, 162, 178, 192, 193, 197, 198, 204, 206, 207, 210, 211, 229, 230, 232, 233, 237, 243, 265, 289], "4x4": [27, 35, 77, 101, 148, 231], "a\u2080\u2080": 27, "a\u2080\u2081": 27, "a\u2080\u2082": 27, "a\u2080\u2083": 27, "a\u2081\u2080": 27, "a\u2081\u2081": 27, "a\u2081\u2082": 27, "a\u2081\u2083": 27, "a\u2082\u2080": 27, "a\u2082\u2081": 27, "a\u2082\u2082": 27, "a\u2082\u2083": 27, "a\u2083\u2080": 27, "a\u2083\u2081": 27, "a\u2083\u2082": 27, "a\u2083\u2083": 27, "det": [27, 35, 98, 99, 143, 195, 200, 284], "a\u2081": [27, 106, 288], "\u2083": [27, 211], "slowest": [27, 89, 103], "symmetr": [27, 39, 40, 44, 45, 50, 53, 54, 58, 78, 93, 94, 95, 98, 102, 185, 196, 202, 204, 207, 210, 219, 221, 237, 249], "triangular": [27, 39, 45, 93, 94, 98, 200, 206, 229, 231, 266], "prove": [27, 62, 87, 89, 98, 198, 218, 227, 262], "noninvertiblematrixerror": [27, 95, 284], "overli": 28, "float64": [28, 43, 103, 231], "fsolv": 28, "findroot": [28, 70, 229], "overdetermin": [28, 229, 230], "toler": [28, 43, 62, 66, 202, 223, 229], "18466446988997098217": 28, "16840434497100886801e": 28, "tweak": [28, 211, 229], "closest": [28, 62, 75], "closer": [28, 128, 230, 283], "00000000000000": [28, 62, 66, 177, 211, 231], "bisect": [28, 102, 207, 229], "multidimension": [28, 205, 242], "19287309935246": [28, 229], "27844411169911": [28, 229], "192873099352460791205211": 28, "278444111699106966687122": 28, "root_scalar": 28, "lam_f": [28, 250], "3416277185114782": 28, "slightli": [28, 34, 35, 43, 58, 102, 104, 128, 197, 198, 202, 204, 207, 211, 221, 223], "x_valu": 28, "12757857962640e": 28, "73908513321516": 28, "4877893607115270300540019e": 28, "6543612251060553497428174e": 28, "solve_ivp": 29, "checkodesol": [29, 227], "c2": [29, 45, 63, 72, 79, 93, 95, 120, 162, 176, 219, 227, 231, 259, 262, 289], "ypp": 29, "yp": 29, "classify_od": [29, 227], "choic": [29, 43, 54, 67, 70, 87, 89, 103, 140, 172, 181, 185, 186, 194, 202, 204, 207, 211, 223, 227, 249, 282], "ic": [29, 102, 227], "y0": [29, 62, 81, 83, 85, 227], "y1": [29, 62, 143], "y_": [29, 43, 70, 87, 114, 196], "initialor": 29, "classic": [29, 41, 68, 70, 98, 162, 178, 186, 195, 198, 273], "eqs_one_soln_set": 29, "solutions_one_soln_set": 29, "solution_one_soln_set_dict": 29, "outer": [29, 89, 123, 141, 143, 159, 164, 165, 186, 188, 190, 195, 213, 219, 235, 256, 259, 260], "robust": [29, 59, 62, 66, 203, 223, 227], "fashion": [29, 43, 62, 68, 95, 128, 138, 139, 141, 195, 198, 249], "solutions_list": 29, "leverag": [29, 43, 103, 211], "chemic": 29, "kinet": [29, 117, 121, 123], "r_f": [29, 207], "k_f": 29, "y_0": [29, 224, 227], "y_1": [29, 44, 224, 231], "r_b": 29, "k_b": 29, "y_2": [29, 44, 224, 231], "dt": [29, 64, 70, 130, 143, 185, 186, 188, 194, 195, 207, 227, 288], "vec": [29, 93, 98, 120, 143, 186, 196, 204, 262, 263, 265], "bmatrix": [29, 35, 93, 95, 98, 130, 138, 139, 140, 141, 186, 195, 224], "pyplot": [29, 85, 143], "plt": [29, 85, 143], "y2": [29, 62, 143, 201], "kf": 29, "kb": 29, "rf": [29, 61, 67, 207], "rb": [29, 253], "speci": [29, 61, 62], "ydot": 29, "k_val": 29, "42": [29, 43, 51, 62, 65, 67, 75, 76, 78, 93, 94, 96, 98, 100, 102, 202, 207, 224, 242], "t_eval": 29, "linspac": [29, 43, 85, 103, 126, 143], "50": [29, 44, 53, 65, 66, 67, 70, 78, 98, 102, 105, 106, 149, 180, 207, 211, 220, 229], "concentr": [29, 106, 231], "legend": [29, 143, 197, 214], "NO": [29, 176], "br": 29, "_2": [29, 98, 120, 185, 186, 196, 227], "nobr": 29, "shadow": [29, 55], "xlabel": [29, 197], "ylabel": [29, 197], "annot": [29, 102, 197, 211], "png": [29, 42, 90, 98, 105, 106, 110, 191, 197, 211, 214], "hire": [29, 98, 105, 106, 110, 197, 214], "_integr": [29, 227, 228], "separable_integr": [29, 227], "routin": [29, 43, 51, 61, 62, 63, 64, 87, 92, 93, 98, 102, 148, 176, 200, 204, 207, 210, 211, 212, 223, 224, 227, 228, 229, 230, 243, 249, 263], "hang": [29, 98, 130, 134, 227, 228], "unintegr": 29, "all_integr": [29, 227, 228], "coupl": [29, 62, 98, 140, 155, 170, 173, 196], "educ": [29, 63, 98], "chaotic": 29, "lorenz": 29, "pendulum": [29, 120, 125, 127, 131, 136, 140, 144, 194, 273], "scienceworld": 29, "theta_1": 29, "theta_2": 29, "2g": 29, "theta1": [29, 130], "theta2": 29, "eq1": [29, 72, 227, 229, 230], "eq2": [29, 72, 92, 227, 230], "interrog": 30, "overconstrain": 30, "solvabl": [31, 53, 108, 120, 224, 227, 230, 289], "groebnerbasi": [31, 199, 207, 210], "lambert": [31, 68, 89, 208], "decompos": [31, 53, 54, 60, 62, 64, 68, 73, 98, 102, 160, 169, 170, 172, 202, 207, 210, 231], "lack": [31, 43, 64, 66, 123, 211, 278], "crootof": [31, 62, 207, 227, 229], "765": 31, "352": 31, "181": 31, "08": [31, 128], "total": [31, 44, 51, 53, 62, 67, 78, 91, 92, 93, 95, 128, 130, 138, 145, 149, 155, 160, 173, 182, 196, 202, 204, 207, 220, 223, 227, 235, 237, 266], "scroll": 31, "56": [31, 65, 89, 102, 207], "1307": 31, "432": [31, 75, 206], "434607": 31, "0509758447494279": 31, "313552108895239": 31, "14751999969868": 31, "estim": [31, 41, 61, 62, 66, 87, 278], "preserv": [31, 42, 43, 53, 62, 98, 174, 202, 207, 212, 213, 223], "77245385090552": 31, "4142135623730951": 31, "varieti": [31, 43, 44, 54, 62, 103, 106, 141, 198, 205, 207, 231, 249], "risk": 31, "parse_latex": [31, 104], "central": [32, 53, 59, 70, 72, 78, 117, 123, 141, 197, 206, 207, 224, 231], "pypi": 33, "continuum": [33, 273], "qtconsol": [33, 287], "nicer": [33, 62, 134], "setupegg": 33, "enthought": 33, "deploy": 33, "activepython": 33, "spack": 33, "freshli": 33, "starter": 33, "sy": [33, 43, 64, 126, 143, 211, 242, 253, 262, 280], "wherev": [33, 126, 223, 230, 260], "visit": [33, 46, 53, 62, 67, 285], "chat": 33, "gitter": [33, 284], "excel": [33, 66, 206, 286], "ticket": 33, "export": [34, 211], "latin": 34, "clunki": 34, "collid": [34, 237], "win": 34, "throwawai": 34, "surviv": 34, "foo": [34, 41, 43, 62, 171, 191, 249, 252], "report": [34, 41, 53, 62, 75, 93, 102, 208, 219, 230, 242, 284, 289], "stick": 34, "_clash1": [34, 62], "_clash2": [34, 62], "multi": [34, 62, 63, 127, 136, 143, 156, 160, 170, 197, 211, 230, 273], "_clash": [34, 62], "sympif": [34, 62], "real_field": 35, "norm": [35, 98, 174, 186, 202, 204, 206, 207], "instanti": [35, 42, 43, 54, 62, 70, 75, 77, 78, 95, 98, 166, 174, 186, 197, 198, 202, 206, 231, 256, 260], "q1": [35, 98, 105, 116, 126, 128, 129, 130, 131, 133, 134, 135, 138, 139, 140, 144, 185, 186, 188, 190, 191, 194, 195, 201, 256, 258], "q2": [35, 105, 116, 126, 128, 129, 130, 131, 133, 134, 135, 138, 139, 144, 185, 186, 188, 190, 191, 194, 195, 201, 256, 258], "euclideanspac": 35, "realnormedalgebra": 35, "q3": [35, 116, 128, 129, 131, 133, 134, 135, 138, 186, 188, 190, 195, 256, 258], "bi": [35, 62, 68, 70, 89, 195, 218, 227], "cj": 35, "dk": [35, 105, 206], "atan2": [35, 40, 64, 68, 150, 211, 256], "atan": [35, 40, 64, 66, 68, 73, 78, 86, 89, 130, 144, 145, 208, 211, 213], "arc_coplanar": 35, "arc": [35, 68, 288], "coplanar": [35, 76, 195], "parallel": [35, 72, 75, 76, 78, 89, 109, 112, 115, 194, 195, 204, 262, 266], "vector_coplanar": 35, "is_pur": 35, "mathbf": [35, 95, 121, 136, 138, 139, 141, 181, 185, 186, 191, 192, 194, 195, 211, 221, 232, 260, 261, 263, 265, 266], "versor": 35, "0i": 35, "0j": [35, 201], "0k": 35, "vector_part": 35, "from_matrix": [35, 112, 200], "vector_onli": 35, "from_axis_angl": 35, "radian": [35, 68, 71, 72, 73, 75, 76, 77, 98, 110, 126, 149, 150, 186], "from_eul": 35, "seq": [35, 53, 62, 65, 98, 202, 204, 207, 217, 229, 249], "intrins": [35, 43], "extrins": 35, "uppercas": [35, 63, 221], "zyz": [35, 186], "from_rotation_matrix": 35, "orthogon": [35, 39, 77, 91, 98, 174, 186, 195, 256, 258], "index_vector": 35, "mod": [35, 63, 68, 92, 98, 99, 102, 172, 198, 200, 201, 202, 204, 206, 207, 211, 213, 221, 224], "magnitud": [35, 43, 61, 62, 66, 70, 103, 105, 106, 108, 110, 130, 143, 174, 183, 186, 192, 195, 197, 256, 263, 265], "scalar_part": 35, "is_zero_quaternion": 35, "mensor": 35, "60": [35, 48, 53, 55, 61, 62, 67, 70, 89, 98, 102, 105, 106, 210, 211, 224, 227, 249], "pth": 35, "668": 35, "224": [35, 179, 205], "336": 35, "448": 35, "pow_cos_sin": 35, "900": 35, "1800": [35, 63], "2700": [35, 105], "3600": [35, 67], "product_matrix_left": 35, "hamilton": [35, 46, 93], "to_matrix": [35, 117, 120, 185, 186, 195, 200, 206, 256, 259, 261], "product_matrix_right": 35, "rotate_point": 35, "coordin": [35, 43, 63, 64, 68, 70, 71, 73, 77, 79, 95, 98, 105, 108, 110, 114, 120, 121, 122, 125, 126, 127, 128, 129, 131, 133, 136, 137, 138, 139, 142, 144, 152, 154, 173, 174, 177, 185, 186, 187, 188, 190, 192, 195, 198, 206, 207, 219, 227, 256, 258, 259, 262, 264, 266, 271, 273], "to_axis_angl": 35, "set_norm": 35, "to_eul": 35, "angle_addit": 35, "avoid_square_root": 35, "degener": [35, 229, 230], "gymbal": 35, "lock": 35, "atan_2": 35, "bc": [35, 74, 108, 249, 252, 262], "ac": [35, 43, 54, 74, 108, 123, 141, 153, 231, 249, 252], "mp": [35, 173, 229, 245], "bd": [35, 176], "1371": 35, "pone": 35, "0276302": 35, "to_rotation_matrix": 35, "assumptionkei": 36, "proposit": [36, 38, 92], "is_tru": [36, 38, 39], "assumptionscontext": [36, 37, 38], "global_assumpt": [36, 37, 38], "discern": [36, 38], "refin": [36, 38, 62, 93, 198, 202, 206, 207, 223, 244, 268], "progress": [36, 38, 102, 244], "inherit": [36, 62, 69, 92, 95, 96, 120, 165, 174, 196, 211, 231, 236, 244, 245], "askhandl": 36, "mere": [37, 38, 43, 45, 66, 171], "thin": [37, 98, 132, 145], "undefinedpred": [37, 38], "sexi": [37, 38], "sexyprimepred": [37, 38], "sexyprim": [37, 38], "int1": [37, 38], "int2": [37, 38], "assump": [37, 38], "r5": [37, 223], "predicate_": [37, 38], "28mathematical_log": [37, 38], "r6": 37, "sexy_prim": [37, 38], "resolut": [37, 38, 224], "askpredicatehandl": [37, 38], "r7": 38, "r8": 38, "notabl": [38, 43, 65, 70, 87, 103, 201], "truth_maintenance_system": 38, "istruepred": 39, "gt": [39, 43, 62, 231, 249], "istruehandl": 39, "commutativepred": 39, "commutativehandl": 39, "finitepred": 39, "nor": [39, 41, 62, 92, 102, 150, 197, 207, 218, 220, 227, 237, 256], "nan": [39, 40, 62, 68, 70, 118, 223, 231, 278], "finitehandl": 39, "r9": 39, "infinitepred": 39, "infinitehandl": 39, "symmetricpred": 39, "transpos": [39, 42, 93, 95, 98, 112, 143, 159, 186, 195, 200, 206, 224, 232, 237, 238, 284], "diagon": [39, 67, 93, 94, 95, 98, 101, 125, 148, 200, 233], "symmetrichandl": 39, "r10": 39, "symmetric_matrix": 39, "invertiblepred": 39, "fullrank": [39, 43], "invertiblehandl": 39, "r11": 39, "invertible_matrix": 39, "orthogonalpred": 39, "tm": [39, 149], "mm": [39, 42, 102, 121, 128, 133, 134, 174, 200], "orthogonalhandl": 39, "r12": 39, "orthogonal_matrix": 39, "unitarypred": 39, "unitari": [39, 89, 102, 160, 165, 196], "unitaryhandl": 39, "r13": 39, "unitary_matrix": 39, "positivedefinitepred": 39, "tmz": 39, "positive_definit": 39, "positivedefinitehandl": 39, "r14": 39, "definite_matrix": 39, "uppertriangularpred": 39, "m_": [39, 139, 196, 204, 233], "ij": [39, 98, 176, 181, 196, 231, 233], "zeromatrix": [39, 95], "upper_triangular": [39, 93], "uppertriangularhandl": 39, "r15": 39, "uppertriangularmatrix": 39, "lowertriangularpred": 39, "lower_triangular": [39, 93], "lowertriangularhandl": 39, "r16": 39, "lowertriangularmatrix": 39, "diagonalpred": 39, "diagonalhandl": 39, "r17": 39, "diagonal_matrix": 39, "fullrankpred": 39, "rank": [39, 43, 44, 46, 51, 53, 54, 56, 57, 58, 77, 91, 98, 99, 186, 188, 198, 200, 202, 204, 206, 232, 236, 237, 284], "linearli": [39, 43, 70, 86, 98, 200, 204, 227, 229, 237], "fullrankhandl": 39, "squarepred": 39, "squarehandl": 39, "r18": 39, "square_matrix": 39, "integerelementspred": 39, "integer_el": 39, "integerelementshandl": 39, "realelementspred": 39, "real_el": 39, "realelementshandl": 39, "complexelementspred": 39, "complex_el": 39, "complexelementshandl": 39, "singularpred": 39, "singular": [39, 43, 54, 62, 66, 68, 69, 70, 84, 85, 87, 89, 98, 105, 107, 140, 186, 198, 205, 218, 227, 230, 256, 273, 278], "singularhandl": 39, "fore": 39, "r19": 39, "singularmatrix": 39, "normalpred": 39, "normalhandl": 39, "r20": 39, "normal_matrix": 39, "triangularpred": 39, "triangularhandl": 39, "r21": 39, "triangular_matrix": 39, "unittriangularpred": 39, "unit_triangular": 39, "unittriangularhandl": 39, "evenpred": 39, "evenhandl": 39, "oddpred": 39, "oddhandl": 39, "primehandl": 39, "subject": [39, 62, 72, 78, 106, 116, 144, 206], "compositepred": 39, "compositehandl": 39, "positivepred": 39, "positivehandl": 39, "negativepred": 39, "negativehandl": 39, "zeropred": 39, "zerohandl": 39, "nonzeropred": 39, "nonzerohandl": 39, "nonpositivepred": 39, "nonpositivehandl": 39, "nonnegativepred": 39, "nonnegativehandl": 39, "integerpred": 39, "integerhandl": 39, "r22": 39, "rationalpred": 39, "rationalhandl": 39, "r23": 39, "irrationalpred": 39, "ratio": [39, 52, 53, 61, 62, 66, 67, 70, 72, 75, 76, 77, 78, 94, 102, 112, 149, 181, 211, 220, 223, 229], "irrationalhandl": 39, "r24": 39, "realpred": 39, "disjoint": [39, 42, 51, 54, 207, 219, 249], "realhandl": 39, "r25": 39, "extendedrealpred": 39, "extendedrealhandl": 39, "hermitianpred": 39, "hermitianhandl": 39, "r26": 39, "hermitianoper": [39, 165], "complexpred": 39, "complexhandl": 39, "r27": 39, "imaginarypred": 39, "imaginaryhandl": 39, "r28": 39, "antihermitianpred": 39, "antihermitianhandl": 39, "r29": 39, "algebraicpred": 39, "askalgebraicpredicatehandl": 39, "r30": 39, "algebraichandl": 39, "transcendentalpred": 39, "transcedent": 39, "refine_pow": 40, "refine_ab": 40, "refine_arg": 40, "refine_atan2": 40, "refine_im": 40, "refine_matrixel": 40, "refine_r": 40, "refine_sign": 40, "lagrang": [41, 62, 119, 120, 132, 136, 207, 224, 273], "lagrangian": [41, 121, 123, 130, 135, 139, 140], "euler_equ": 41, "r31": 41, "93lagrange_equ": 41, "decreas": [41, 43, 54, 204], "monoton": [41, 43, 79], "is_decreas": 41, "lopen": [41, 62, 219, 226, 231], "ropen": [41, 68, 219, 231], "is_increas": 41, "72": [41, 45, 62, 75, 98, 102, 105, 196, 210], "is_monoton": 41, "is_strictly_decreas": 41, "is_strictly_increas": 41, "monotonicity_help": 41, "held": [41, 63, 140, 235, 288], "r32": 41, "mathematical_singular": 41, "interpol": [41, 67, 71, 143, 204, 207], "finite_diff_weight": [41, 62, 278], "apply_finite_diff": [41, 62, 278], "differentiate_finit": [41, 62, 278], "finite_diff": [41, 62], "x_list": [41, 278], "y_list": [41, 278], "xlist": 41, "55271367880050e": 41, "indexedbas": [41, 43, 61, 62, 211, 229, 235, 236, 243], "idx": [41, 43, 211, 235, 236, 243], "region": [41, 70, 79, 89, 197, 219, 227, 230, 231, 256, 259, 266], "bewar": [41, 70], "phenomenon": [41, 181, 204, 214, 283], "90": [41, 53, 60, 70, 93, 98, 104, 105, 108, 116, 126, 144, 211, 213, 223, 231, 244], "finitediff": 41, "wrt": [41, 43, 62, 64, 70, 79, 98, 126, 143, 186, 187, 204, 207, 256, 258, 259, 263], "len": [41, 50, 51, 52, 53, 54, 58, 60, 62, 63, 67, 70, 77, 87, 92, 130, 145, 149, 160, 170, 207, 223, 227, 236, 249], "nearest": [41, 206], "furthest": [41, 63], "sublist": [41, 58, 63, 89, 173, 278], "fd": [41, 43, 176], "0th": [41, 54, 63, 70], "1st": [41, 54, 102, 112, 227, 228, 252, 278], "forward": [41, 43, 93, 112, 128, 136, 169, 194, 223, 242], "pai": 41, "attent": [41, 53, 68], "gridpoint": 41, "plan": [41, 116, 202, 287], "mycoeff": 41, "3rd": [41, 54, 68, 102, 143, 207, 229, 232, 249], "2nd": [41, 54, 63, 102, 112, 143, 227, 232, 249], "cost": [41, 43, 102, 130, 230, 282], "poorer": 41, "grand": 41, "r33": 41, "51": [41, 98, 102], "184": [41, 227], "1988": [41, 155, 173, 204, 205], "699": 41, "706": [41, 98], "1090": [41, 207], "s0025": [41, 102], "5718": [41, 102], "0935077": 41, "continuous_domain": [41, 226], "tan": [41, 62, 67, 68, 89, 104, 118, 133, 134, 135, 140, 208, 210, 211, 218, 220, 227, 230, 288], "function_rang": 41, "is_convex": [41, 78], "convex": [41, 78, 79, 89], "unspecifi": [41, 62, 77, 278], "multivari": [41, 62, 70, 198, 199, 201, 202, 203, 205, 207, 208, 218, 223, 229, 230, 231, 288], "concav": [41, 145], "r34": 41, "convex_funct": 41, "r35": 41, "ifp": 41, "illinoi": 41, "edu": [41, 46, 53, 54, 63, 65, 67, 89, 98, 102, 205, 210, 220, 224, 227, 231, 256], "angelia": 41, "l3_convfunc": 41, "r36": 41, "logarithmically_convex_funct": 41, "r37": 41, "logarithmically_concave_funct": 41, "r38": 41, "concave_funct": 41, "lcim": 41, "mixtur": [41, 43, 79, 198, 244], "incommensur": 41, "not_empty_in": [41, 230], "finset_intersect": 41, "finite_set": [41, 219], "tracker": [41, 219, 230, 284], "aperiod": 41, "smallest": [41, 56, 68, 75, 77, 84, 92, 98, 102, 173, 186, 202, 247, 249], "verif": [41, 200, 229], "reliabl": [41, 62, 227, 247, 278], "henc": [41, 43, 52, 53, 62, 64, 68, 70, 74, 87, 90, 92, 102, 108, 192, 197, 198, 199, 204, 211, 221, 224, 228, 230, 242, 246, 261, 262, 263, 283, 288], "stationary_point": 41, "stationari": [41, 231], "tikz": 42, "joyofcat": 42, "adamek": 42, "herrlich": 42, "strecker": 42, "joi": 42, "cat": [42, 185], "book": [42, 53, 63, 68, 121, 126, 129, 137, 141, 142, 161, 205, 210, 211, 281], "katmat": 42, "uni": [42, 89, 249], "bremen": 42, "de": [42, 63, 67, 102, 181, 196, 197, 208, 213, 224, 227, 249], "acc": [42, 143, 190, 194], "embryon": 42, "morphism": [42, 198], "codomain": [42, 198, 206], "arrow": [42, 91, 105, 197, 211], "namedmorph": 42, "prohibit": [42, 54, 55, 186], "identitymorph": 42, "compositemorph": 42, "compos": [42, 62, 63, 130, 140, 178, 181, 194, 198, 202, 206, 207, 208, 211, 213, 223], "circ": [42, 62, 73, 79, 87, 95], "flatten": [42, 62, 201, 233, 238, 249, 250], "new_nam": 42, "id_a": 42, "id_b": 42, "commutative_diagram": 42, "quadrupl": [42, 207], "mbox": 42, "hom": 42, "id": [42, 58, 68, 233], "rightarrow": [42, 54, 58, 63, 67, 68, 70, 84, 85, 87, 89, 92, 93, 102, 197, 206, 218, 230, 233, 249, 278], "monoid": 42, "pare1970": 42, "accompani": 42, "premis": 42, "conclus": [42, 62], "carri": [42, 43, 62, 168, 174, 181, 198, 201, 204, 206, 208, 209, 250], "premises_kei": 42, "et": [42, 89, 155, 204, 207, 208, 220, 223], "pareigi": 42, "functor": 42, "1970": [42, 98], "is_subdiagram": 42, "subdiagram": 42, "d1": [42, 58, 186, 198, 218, 231, 256], "subdiagram_from_object": 42, "veryuniqu": 42, "diagram_draw": 42, "diagramgrid": 42, "analys": [42, 110, 112, 143, 231], "drawn": [42, 53, 91, 197, 201, 209], "moprhism": 42, "strive": 42, "nevertheless": 42, "laid": [42, 126, 173], "width": [42, 43, 90, 191, 197, 207, 211, 242], "height": [42, 43, 78, 95, 145, 197, 198, 211, 218, 266], "emploi": [42, 61, 66, 89, 102, 207, 210, 227, 231], "lai": 42, "layout": 42, "sequenti": [42, 46, 63, 68, 256, 258], "test_draw": 42, "lemma": [42, 53, 87, 199], "fivelemma": 42, "five_lemma": 42, "arrowstringdescript": 42, "curving_amount": 42, "looping_start": 42, "looping_end": 42, "horizontal_direct": 42, "vertical_direct": 42, "label_posit": 42, "pic": 42, "princip": [42, 63, 68, 70, 87, 89, 99, 114, 128, 149, 198, 199, 200, 201, 202, 204, 206, 207, 208], "offset": [42, 43, 62, 67, 70, 236], "cell": 42, "vertic": [42, 46, 55, 56, 72, 73, 75, 77, 78, 79, 89, 91, 93, 98, 106, 125, 131, 148, 156, 196, 197, 200, 206, 211, 219, 249, 266], "disregard": 42, "unexplain": 42, "astr": 42, "dr": [42, 64, 211, 227], "12mm": 42, "correspondingli": 42, "label_displac": 42, "arrow_styl": 42, "dash": 42, "xypicdiagramdraw": 42, "formatt": 42, "utilis": 42, "xypic": 42, "net": [42, 78, 205, 227, 231, 249], "drawer": 42, "xymatrix": 42, "ld": 42, "arrow_formatt": 42, "therebi": 42, "default_arrow_formatt": 42, "farther": 42, "centr": [42, 59, 197], "default_formatt": 42, "45": [42, 62, 67, 78, 98, 102, 108, 207, 208, 224], "_3mm": 42, "default_curving_amount": 42, "cm": [42, 143, 231], "_1cm": 42, "default_curving_step": 42, "h1": [42, 123], "1cm": 42, "rr": [42, 62, 80, 200, 201, 207, 208], "h_": [42, 53, 58, 67, 70, 89], "_2cm": 42, "mask": [42, 211], "diagram_format": 42, "proceed": [42, 44, 87, 89, 142, 205, 221], "xypic_draw_diagram": 42, "shortcut": [42, 62, 94, 195, 211, 219, 223, 288], "insert": [42, 44, 93, 104, 105, 171, 176, 211, 231, 252], "preview_diagram": 42, "brief": [43, 230, 242, 265], "fab": [43, 211], "cse_main": [43, 212, 223], "cse": [43, 103, 116, 165, 212, 223, 244, 250], "meat": 43, "lightweight": [43, 206, 282], "pycod": [43, 211], "lambdarepr": [43, 211, 250], "aesara_funct": [43, 103, 211], "float80": [43, 211], "assign_to": [43, 211], "type_alias": [43, 211], "0l": [43, 211], "powl": [43, 211], "c99": [43, 211, 244], "expm1": [43, 211], "thrown": [43, 211], "fcode": [43, 211], "contract": [43, 64, 113, 176, 211, 220, 233, 235, 236, 237, 238], "len_i": [43, 211], "mat_1": 43, "mat_2": 43, "jscode": [43, 211], "user_funct": [43, 211], "argument_test": [43, 211], "cfunction_str": [43, 211], "octav": [43, 143, 244], "custom_funct": [43, 211], "existing_octave_fcn": [43, 211], "is_matrix": [43, 211], "my_mat_fcn": [43, 211], "my_fcn": [43, 211], "mat": [43, 95, 145, 170, 211], "octave_cod": [43, 211], "summat": [43, 61, 62, 66, 67, 70, 176, 205, 207, 211, 214, 223, 231, 232, 235, 236, 237, 243], "mathematica_cod": [43, 211], "g1": [43, 47, 52, 53, 87, 98, 112], "g2": [43, 47, 52, 53, 87, 91, 98, 112], "gamma_1": [43, 115], "gamma_2": [43, 115], "\u03b3\u2081": 43, "\u03b3\u2082": 43, "\u03b2": [43, 196], "h_i": [43, 58], "c89": [43, 211, 244], "julia_cod": [43, 211], "rust_cod": [43, 211], "powi": [43, 211], "make_routin": [43, 244], "f95": [43, 243, 244], "matlab": [43, 116, 143, 244, 284], "breadth": [43, 62, 231], "c_name": [43, 244], "c_code": [43, 244], "h_name": [43, 244], "c_header": [43, 244], "volume_result": 43, "ifndef": [43, 244], "project__test__h": [43, 244], "endif": [43, 244], "preprocessor": [43, 212, 223, 244], "global_var": [43, 244], "insensit": [43, 98, 143, 211, 242, 244], "argument_sequ": [43, 244], "name_expr": [43, 244], "to_fil": [43, 244], "f_name": [43, 244], "f_code": [43, 244], "hydrogen": [43, 273], "r_nl": [43, 114, 177], "my_routin": 43, "result_var": [43, 244], "result\u2085\u2081\u2084\u2082\u2083\u2084\u2081\u2086\u2088\u2081\u2083\u2089\u2087\u2087\u2081\u2089\u2084\u2082\u2088": 43, "__________": [43, 199], "\u212f": [43, 148, 196, 211, 278, 282, 284, 288, 289], "assoc_laguerr": [43, 70, 211], "fcn": [43, 244], "result_5397460570204848505": [43, 244], "out_8598435338387848786": [43, 244], "examin": [43, 63, 165, 242, 244, 288], "inputargu": [43, 244], "outputargu": [43, 244], "inoutargu": [43, 244], "disk": [43, 63, 219, 230, 250], "binary_funct": [43, 103, 243], "tensor": [43, 49, 64, 98, 113, 123, 141, 155, 161, 162, 163, 173, 176, 185, 186, 211, 232, 233, 235, 236, 243, 250, 260, 261, 267, 268, 271, 273], "binary_func": [43, 243], "servic": 43, "tempdir": [43, 243], "qho_1d": [43, 152], "psi_n": [43, 152], "qho": 43, "tmp": 43, "subroutin": [43, 53, 172, 204], "autofunc": 43, "hbar": [43, 152, 158, 171, 177, 181, 183, 196], "05457162d": 43, "14159265358979d0": 43, "0d0": [43, 211], "74126166983329d": 43, "33": [43, 62, 65, 98, 141, 149, 204, 208, 211, 231], "verbos": [43, 62, 93, 102, 211, 242, 243, 287], "mute": [43, 243], "backend": [43, 90, 103, 104, 110, 129, 131, 137, 191, 208, 243, 250], "auxiliari": [43, 89, 121, 126, 138, 227, 243], "function_nam": [43, 243], "sympy_express": [43, 243], "mandatori": [43, 211, 243], "illustr": [43, 98, 127, 130, 181, 201, 214, 218], "psi_nl": 43, "766": 43, "incur": [43, 103], "get_numpy_arrai": 43, "tight": 43, "temp": [43, 128], "alloc": [43, 68], "fuse": 43, "wise": [43, 44, 68, 93, 200, 204, 211, 217, 243], "unabl": [43, 75, 79, 104, 229, 256, 277, 278], "fortun": [43, 103, 130, 207, 208], "reconnect": 43, "autom": [43, 68, 103, 220, 243, 282], "ideologi": [43, 230], "broadcast": [43, 103, 211, 236, 243], "outperform": 43, "jensen": 43, "quantit": [43, 178], "ufunc": [43, 103, 243, 250], "fn_numpi": 43, "fn_fortran": 43, "xx": [43, 98, 123, 195, 249], "21306132": 43, "98101184": 43, "44626032": 43, "timeit": [43, 208], "10000": [43, 66, 102, 103, 105, 229], "18891601900395472": 43, "004707066000264604": 43, "facil": 43, "comparison": [43, 61, 62, 92, 98, 126, 198, 206, 210, 229, 242, 249], "thereof": [43, 62, 198, 204, 206], "optims_c99": 43, "log1p": [43, 211], "expm1_opt": 43, "log1p_opt": 43, "exp2_opt": 43, "log2_opt": 43, "log2const_opt": 43, "funcminusoneoptim": 43, "func_m_1": 43, "opportunist": 43, "replaceoptim": 43, "catastroph": 43, "replace_in_add": 43, "cost_funct": 43, "__call__": [43, 54, 62, 206], "exp2": [43, 211], "create_expand_pow_optim": 43, "base_req": 43, "is_symbol": [43, 93], "expand_opt": 43, "opt2": 43, "is_funct": 43, "log2": [43, 70, 211], "matin_opt": 43, "matinv_opt": 43, "matrixsolv": [43, 211], "matrix_nod": 43, "numpyprint": 43, "doprint": [43, 211], "seriesapprox": 43, "reltol": 43, "max_ord": 43, "n_point_check": 43, "threshold": [43, 102], "largest": [43, 54, 56, 62, 68, 70, 98, 101, 102, 156, 198, 202, 229, 249], "series_approx2": 43, "1e": [43, 62, 66, 98, 110, 145, 207, 229], "series_approx3": 43, "series_approx8": 43, "sumapprox": 43, "neglect": 43, "2000": [43, 48, 89, 102, 205], "sum_approx3": 43, "sum_approx2": 43, "sum_approx1": 43, "token": [43, 87, 90, 104], "diagram": [43, 51, 91, 105, 129, 130, 131, 136, 156, 236, 261, 283], "codegenast": 43, "assignmentbas": 43, "augmentedassign": 43, "addaugmentedassign": 43, "subaugmentedassign": 43, "mulaugmentedassign": 43, "divaugmentedassign": 43, "modaugmentedassign": 43, "codeblock": [43, 104], "quotedstr": 43, "intbasetyp": 43, "_sizedinttyp": 43, "signedinttyp": 43, "unsignedinttyp": 43, "floatbasetyp": 43, "floattyp": 43, "complexbasetyp": 43, "complextyp": 43, "pointer": [43, 244, 245], "functionprototyp": 43, "functiondefinit": [43, 104], "stream": [43, 63, 212, 223, 249], "functioncal": 43, "breaktoken": 43, "continuetoken": 43, "nonetoken": 43, "float32": [43, 103, 104, 250], "codeprint": 43, "complex_": 43, "bool_": 43, "intc": [43, 104], "intp": 43, "unsign": [43, 67, 223], "int8": 43, "int16": 43, "int32": 43, "int64": [43, 231], "uint8": 43, "uint16": 43, "uint32": 43, "uint64": 43, "x86": 43, "amd64": 43, "complex64": 43, "complex128": 43, "newton": [43, 70, 136, 179, 183, 204, 208], "aug_assign": 43, "tol": [43, 62, 202], "val": [43, 62, 74, 202, 206, 250], "whl": 43, "py_str": 43, "inf": [43, 54, 62, 98, 202, 207, 219, 227, 231], "exec": [43, 62, 90, 250], "1121416371": 43, "909672693737": 43, "867263818209": 43, "865477135298": 43, "865474033111": 43, "1g": 43, "3e": 43, "2003": [43, 196, 205, 211, 224], "source_format": [43, 211], "op": [43, 62, 98, 165, 176, 190, 194, 220, 249, 250], "parametr": [43, 70, 71, 75, 98, 197, 224, 230, 256, 259, 266], "volatil": 43, "binop": 43, "exit": [43, 102, 242], "premad": 43, "break_": 43, "lift": [43, 58, 68, 70, 87, 202, 204, 207], "left_hand_sid": 43, "topological_sort": [43, 249], "postprocess": [43, 207, 212, 223], "topolog": [43, 62, 64, 200, 249], "continue_": 43, "untyp": 43, "compliant": 43, "ok": [43, 54, 211, 227], "elem": [43, 53, 198], "ijk": [43, 236], "stride": [43, 236], "lmn": 43, "cast_nocheck": 43, "alia": [43, 55, 62, 72, 78, 93, 94, 96, 100, 160, 169, 176, 198, 201, 202, 206, 210, 219, 242, 252, 288], "nbit": 43, "storag": [43, 62, 98, 170, 196, 204], "nmant": 43, "mantissa": 43, "nexp": 43, "half_precis": 43, "f16": 43, "65504": 43, "tini": [43, 62], "ep": [43, 53, 61, 202, 206, 207], "decimal_dig": 43, "cast_check": 43, "1e5": 43, "cast": [43, 95, 280], "subnorm": [43, 53], "idempot": 43, "loos": [43, 62], "overflow": [43, 246], "max_expon": 43, "min_expon": 43, "for_i": 43, "for_ji": 43, "for_kji": 43, "function_arg": [43, 242], "fcall": 43, "bar": [43, 70, 127, 136, 165, 171, 252, 273], "baz": 43, "return_typ": 43, "fp": [43, 44, 62, 207, 213], "from_functionprototyp": 43, "prototyp": [43, 103, 244], "value_const": 43, "pointer_const": 43, "attr_param": 43, "looking_for": 43, "as_declar": 43, "formatstr": 43, "5g": 43, "stdout": [43, 45, 242], "stderr": 43, "oppos": [43, 250, 278], "_field": 43, "_construct_": 43, "not_in_arg": 43, "float16": 43, "inttyp": 43, "super": [43, 70, 202, 211, 256, 258], "from_expr": [43, 207], "v6": 43, "123456": [43, 62, 102], "v10": 43, "12345": [43, 66], "67894": 43, "boost_mp50": 43, "boost": 43, "multiprecis": [43, 201], "cpp_dec_float_50": 43, "r39": 43, "rtol": 43, "atol": 43, "precision_target": 43, "v18": 43, "123456789012345646": 43, "123456789012345649": 43, "Will": [43, 98, 104, 206, 211, 242], "decl1": 43, "decl2": 43, "alt": [43, 206], "secondarili": [43, 207], "mathcin": 43, "cbrt": [43, 68, 211], "minu": [43, 61, 62, 192, 204, 211, 263], "0e": [43, 62], "fma": [43, 211], "cpu": [43, 103, 143], "hypot": [43, 211], "hypotenus": [43, 78], "log10": [43, 211], "ten": [43, 103], "plu": [43, 61, 98, 104, 143, 156, 207, 211, 221, 249, 250], "famili": [43, 46, 80, 89, 199], "commaoper": 43, "goto": 43, "preincrement": 43, "postdecr": 43, "decrement": [43, 246], "postincr": 43, "increment": [43, 53, 54, 55, 61, 78, 102, 231], "predecr": 43, "alignof": 43, "sizeof": 43, "struct": [43, 196], "dsign": 43, "arrayconstructor": 43, "95": [43, 60, 102, 204, 211, 227, 229, 244], "do1": 43, "1d0": 43, "do2": 43, "extent": 43, "intent_out": 43, "dim": [43, 64, 77, 98, 103, 178, 184, 211, 234, 237, 271], "arr": 43, "fortranreturn": 43, "aid": [43, 128], "implieddoloop": 43, "idl": 43, "signallib": 43, "prog": [43, 155], "myprogram": 43, "mysub": 43, "subroutinecal": 43, "inout": 43, "bind_c": 43, "sum_": [43, 61, 62, 63, 67, 70, 87, 89, 93, 95, 102, 196, 207, 208, 213, 214, 221, 227, 231], "cmplx": [43, 211], "intent_in": 43, "isign": 43, "lbound": 43, "lb": [43, 84, 246], "literal_dp": 43, "num": [43, 53, 62, 102, 112, 202, 223, 227, 246, 252], "literal_sp": 43, "reshap": [43, 93, 126, 143, 232, 238, 249], "arrayexpr": 43, "shp": 43, "metric": [43, 54, 58, 64, 113, 223, 227, 230, 237], "snr": 43, "convolution2d": 43, "use_renam": 43, "ren": 43, "thingi": 43, "newtons_method": 43, "itermax": 43, "counter": [43, 62, 68, 74, 93, 106, 108], "raphson": 43, "criterion": [43, 53, 142, 199, 204], "netwon": 43, "algo": [43, 54], "r40": 43, "27s_method": 43, "newtons_method_funct": 43, "param": [43, 64, 98, 224], "render_as_modul": 43, "py_mod": 43, "865474033102": 43, "render_as_source_fil": 43, "printer_set": 43, "fcodeprint": [43, 211], "fpgroup": [44, 53], "studi": [44, 52, 61, 64, 98, 195, 198, 204, 207, 224, 231], "combinator": [44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 67, 95, 102, 206, 213, 232, 237, 246, 249, 268, 282, 288], "free_group": [44, 52, 53], "vfree_group": 44, "xfree_group": 44, "fp_group": [44, 53], "coset_enumeration_r": 44, "fall": [44, 61, 62, 67, 90, 112, 191, 206, 211, 224, 228, 231], "famou": [44, 70, 89, 102, 224], "langl": [44, 53, 155, 196], "rangl": [44, 53, 155, 173, 196], "gen0": 44, "gen1": 44, "gen_": 44, "freegroup": 44, "x_2": [44, 52, 67, 84, 171, 199, 204, 207, 213, 224, 230], "x_3": [44, 52, 84, 171], "s_1": [44, 249], "r_1": [44, 198, 208], "s_2": 44, "r_2": 44, "s_k": 44, "r_k": [44, 169], "s_i": [44, 58, 89, 91], "r_i": [44, 208], "reduct": [44, 98, 122, 200, 204, 206, 224], "ho05": [44, 52], "cdhw73": 44, "hav91": 44, "strategi": [44, 62, 89, 204, 205, 218, 221, 223, 228], "coset_enumeration_c": 44, "coset_enumer": 44, "relator_bas": 44, "coset_table_bas": 44, "influenc": [44, 105, 198, 199], "coset_table_max_limit": 44, "4096000": 44, "safeti": [44, 54, 96], "max_coset": 44, "cox": [44, 205, 207], "c_r": [44, 221], "max_stack_s": 44, "500": [44, 66, 123], "deduction_stack": 44, "stack": [44, 79, 93, 143, 200, 206, 211, 240, 246, 284], "occurr": [44, 62, 102, 126, 186, 223, 231], "exce": [44, 102, 237, 250], "modest": 44, "low_index_subgroup": 44, "conjugaci": [44, 45, 53], "coset_t": [44, 53], "reidemeister_present": 44, "p1": [44, 53, 54, 58, 61, 72, 74, 75, 76, 77, 78, 105, 112, 117, 120, 130, 143, 145, 190, 197, 201, 202, 204, 208, 220, 231, 232], "john": [44, 53, 70, 207, 224, 227], "cannon": 44, "lucien": 44, "dimino": [44, 53], "georg": [44, 198, 227, 249], "hava": 44, "jane": 44, "watson": [44, 223], "comp": [44, 227], "463": [44, 142], "490": [44, 54], "1973": [44, 63, 193], "derek": [44, 52], "holt": [44, 52, 53, 60], "chapman": [44, 52], "hall": [44, 52, 231], "crc": [44, 52, 54], "2005": [44, 52, 89, 102, 207], "xvi": [44, 52], "514": [44, 52, 205], "symposium": [44, 87, 204, 205, 221], "issac": [44, 89, 205, 229], "bonn": 44, "1991": [44, 205], "191": [44, 230], "199": 44, "acm": [44, 61, 87, 89, 202, 205, 221, 223, 227, 229], "transit": [45, 53, 143, 204, 231], "subgroup": [45, 53, 54, 58, 60, 91, 102], "besid": [45, 62, 204, 229], "permutationgroup": [45, 47, 50, 52, 53, 54, 59, 60, 206], "s_n": [45, 61, 207, 249], "enum": [45, 206, 248, 275], "get_perm_group": [45, 206], "r41": 45, "cohen": [45, 99, 200, 205, 206], "s6transitivesubgroup": [45, 202], "qualnam": 45, "boundari": [45, 73, 75, 105, 106, 190, 208, 219, 227, 231], "s6": 45, "s5transitivesubgroup": 45, "s5": [45, 53], "s4transitivesubgroup": [45, 206, 207], "s4": [45, 54, 112], "s3transitivesubgroup": 45, "s3": [45, 53, 61, 112, 214, 224], "s2transitivesubgroup": [45, 206], "s1transitivesubgroup": [45, 206], "four_group": 45, "klein": [45, 54], "m20": 45, "metacycl": 45, "323": [45, 70, 102], "s3_in_s6": 45, "prism": 45, "a4_in_s6": 45, "a4": [45, 58, 62, 91, 143, 288], "find_transitive_subgroups_of_s6": 45, "s4m": 45, "s4p": 45, "a4xc2": 45, "s4xc2": 45, "g18": 45, "isomorph": [45, 53, 56, 198, 201, 204, 206], "semidirect": 45, "g36m": 45, "g36": 45, "g36p": 45, "c4": [45, 91, 93, 95, 227], "g72": 45, "d4": [45, 91, 207, 231], "325": 45, "psl2f5": 45, "psl_2": 45, "_5": [45, 198], "a_5": 45, "pgl2f5": 45, "pgl_2": 45, "s_5": 45, "print_report": 45, "s_6": 45, "dihedr": [45, 50, 53, 54], "d_6": 45, "s_4": 45, "absenc": [45, 58, 92], "a_4": 45, "engag": 45, "eleg": [45, 208, 210], "a_6": 45, "g_": [45, 53, 60, 61, 70, 87, 98, 224], "c_3": [45, 87, 227], "rtime": 45, "c_4": [45, 87], "d_4": 45, "record": [45, 56, 62, 206, 211, 242], "probabl": [45, 53, 62, 67, 70, 74, 102, 126, 170, 174, 221, 227, 230, 231, 243, 280, 286], "r43": 45, "projective_linear_group": 45, "exceptional_isomorph": 45, "r44": [45, 46], "automorphisms_of_the_symmetric_and_alternating_group": 45, "pgl": 45, "graycod": 46, "kw_arg": [46, 56, 176, 236, 237], "hamiltonian": [46, 167], "edg": [46, 55, 56, 91, 200, 211, 230, 249, 287], "vertex": [46, 56, 73, 78, 89, 200], "000": [46, 66, 89, 92, 170, 249], "110": [46, 92, 227, 229, 243, 249], "010": [46, 92, 249], "011": [46, 92, 170, 249], "111": [46, 65, 72, 92, 102, 249], "101": [46, 70, 92, 102, 170, 249], "001": [46, 66, 92, 145, 249], "delet": [46, 91, 93, 98, 208, 252, 288], "statist": [46, 63, 70, 231, 242, 282], "manner": [46, 63, 70, 140, 174, 192, 224, 227, 232, 249, 265], "generate_grai": 46, "0000": 46, "0001": [46, 66], "0011": [46, 57], "0010": 46, "0110": 46, "0111": [46, 170], "0101": [46, 170], "0100": 46, "1100": 46, "1101": 46, "1111": 46, "1110": 46, "1010": 46, "1011": 46, "1001": 46, "nijenhui": 46, "wilf": [46, 61, 229], "1978": [46, 53, 181, 205], "r45": 46, "knuth": [46, 54, 246], "2011": [46, 54, 87, 102, 193, 220], "art": [46, 54, 198, 211, 213, 246], "vol": [46, 54, 63, 67, 70, 87, 98, 113, 206, 207, 221, 246, 249], "addison": [46, 54, 102, 205], "weslei": [46, 54, 102, 205], "r46": 46, "brgc": 46, "6th": [46, 102], "unrank": [46, 51, 53, 54, 56], "r47": 46, "archiv": [46, 54, 63, 67, 70, 79, 89, 102, 142, 200, 223, 224, 231, 249, 284], "20200224064753": 46, "statweb": 46, "stanford": 46, "susan": 46, "s208": 46, "node12": 46, "tail": [46, 61, 62, 202, 231], "00010": 46, "random_bitstr": 46, "bitlist": [46, 57], "gray_to_bin": 46, "endian": 46, "bin_to_grai": 46, "get_subset_from_bitstr": 46, "bitstr": 46, "graycode_subset": 46, "group_construct": 47, "directproduct": [47, 50], "__mul__": [47, 53, 93, 98, 202, 206], "shift": [47, 53, 54, 56, 63, 70, 73, 77, 79, 92, 197, 202, 204, 207, 214, 221, 229, 231], "gn": 47, "named_group": [47, 50, 52, 53, 59, 60], "cyclicgroup": [47, 50, 53], "perm_group": [47, 52, 53, 54, 59, 60], "group_numb": 48, "is_nilpotent_numb": 48, "r48": 48, "randprim": [48, 102], "pakianathan": 48, "shankar": 48, "monthli": [48, 63, 98], "107": [48, 205], "631": 48, "634": 48, "is_abelian_numb": 48, "r49": 48, "is_cyclic_numb": 48, "r50": 48, "polyhedron": [49, 53, 89, 249, 268], "prufer": [49, 268], "grai": [49, 57, 90, 145, 191, 197, 268], "galoi": [49, 201, 202, 204, 207, 268], "nilpot": [49, 53, 98, 268], "abelian": [49, 50, 53, 91, 181, 198, 268], "cyclic": [49, 50, 53, 54, 55, 65, 93, 102, 237, 249, 268], "polycycl": [49, 53, 268], "symmetricgroup": [50, 52, 53, 59, 60], "transposit": [50, 53, 54, 63, 93, 95, 233], "is_group": [50, 53], "generate_schreier_sim": [50, 53], "af": [50, 53, 59, 143], "dihedralgroup": [50, 53, 60], "alternatinggroup": [50, 53, 59], "r51": 50, "symmetric_group": 50, "generators_and_rel": 50, "d_n": [50, 91, 207], "gon": 50, "bab": 50, "generate_dimino": [50, 53], "perm": [50, 52, 53, 54, 55, 60, 67, 93, 95, 98, 232], "cyclic_form": [50, 54, 55], "r52": 50, "dihedral_group": [50, 53], "31": [50, 62, 65, 66, 78, 102, 141, 196, 207, 224], "ex": [50, 89, 113, 125, 201, 206, 207, 237, 245], "r53": 50, "armstrong": 50, "abeliangroup": [50, 53], "cyclic_ord": 50, "r54": 50, "groupprop": [50, 53], "subwiki": [50, 53], "structure_theorem_for_finitely_generated_abelian_group": 50, "multiset_partit": [51, 67, 87, 246, 249], "rg": 51, "growth": [51, 102, 204, 278], "from_rg": 51, "abcd": [51, 55, 176, 233, 249, 252], "cbead": 51, "sort_kei": [51, 62, 227], "ti": [51, 54, 62, 102], "integerpartit": [51, 249], "summand": [51, 206], "r55": 51, "partition_": [51, 67], "28number_theori": 51, "as_dict": [51, 201, 207], "as_ferr": 51, "char": 51, "ferrer": 51, "next_lex": [51, 54], "lexic": [51, 156, 249], "prev_lex": 51, "random_integer_partit": 51, "seed": [51, 53, 62, 63, 72, 75, 76, 98, 102, 204, 231, 242, 249], "85": [51, 66, 67, 98, 102, 128, 174, 196, 231], "rgs_gener": 51, "37": [51, 63, 68, 72, 98, 102, 106, 196, 211, 224], "52": [51, 67, 102, 105, 106, 196, 210, 224, 227, 249, 278], "151": 51, "203": [51, 67], "rgs_enum": 51, "rgs_unrank": 51, "rgs_rank": 51, "pcgroup": 52, "pcg": 52, "pc_seri": [52, 53], "polycyl": 52, "pc_present": 52, "pc_sequenc": [52, 53], "miss": [52, 53, 79, 211, 229, 244, 288], "adjac": [52, 53, 54, 62, 67, 112, 148, 200, 249], "der": [52, 53], "relative_ord": [52, 53], "polycyclic_group": [52, 53], "gen": [52, 53, 58, 59, 60, 62, 98, 198, 201, 202, 204, 206, 207, 208, 209, 217, 223, 226, 229], "is_ident": [52, 54, 62], "poss": [52, 128, 195], "pc_group": 52, "a_j": [52, 70, 87, 181, 204, 213, 221], "notin": [52, 87, 219], "_order": 52, "minimal_uncollected_subword": 52, "subword_index": 52, "i_1": [52, 176, 207, 232], "a_1": [52, 53, 63, 70, 84, 87, 93, 98, 113, 176, 181, 199, 204, 221, 224, 227, 231, 288], "i_r": 52, "a_r": [52, 221], "i_2": [52, 176, 207], "s_": [52, 58, 126, 204], "s_j": [52, 91, 204], "x3": [52, 62, 67, 201, 227, 231], "collected_word": 52, "free_to_perm": 52, "bottom": [52, 53, 62, 63, 78, 93, 98, 101, 125, 206, 211, 220, 266], "pictur": [52, 211], "x_3x_2": 52, "x_3x_1": 52, "x_2x_1": 52, "x_3x_0": 52, "x_2x_0": 52, "x_1x_0": 52, "varii": 52, "derived_seri": [52, 53], "pc_resent": 52, "k_arrai": 52, "array_form": [52, 54, 55, 233], "v_arrai": 52, "e_1": [52, 98, 198, 204, 207], "e_n": [52, 67, 91, 98, 152, 198, 207], "exponent_vector": 52, "leading_expon": 52, "dup": [53, 202], "pn": [53, 130, 140], "motion": [53, 116, 120, 121, 122, 125, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 143, 144, 190, 191, 194, 195, 231], "front": [53, 62, 128, 129, 145, 175, 202, 204, 207, 211, 223, 288], "face": [53, 55, 75, 89, 126, 204, 208, 211, 224, 266, 284], "rubik": 53, "3674160": 53, "pgroup": [53, 55], "corner": [53, 55, 93, 207, 227, 230, 250], "reset": [53, 55, 197, 204, 207, 242, 245, 247], "p10": 53, "make_perm": 53, "r56": 53, "eick": [53, 60], "brien": [53, 60], "r57": 53, "seress": 53, "r58": 53, "schreier_vector": 53, "r59": 53, "nielsen_transform": 53, "product_replacement_algorithm": 53, "r60": 53, "frank": [53, 54, 98, 249], "celler": 53, "charl": 53, "leedham": 53, "green": [53, 137, 197], "scott": 53, "murrai": [53, 200], "alic": [53, 63], "niemey": 53, "r61": 53, "block_": 53, "28permutation_group_theori": 53, "r62": 53, "algorithmist": 53, "union_find": 53, "r63": 53, "multiply_transitive_group": 53, "r64": 53, "center_": 53, "28group_theori": 53, "centralizer_and_norm": 53, "derived_subgroup": 53, "nilpotent_group": 53, "colost": 53, "hulpk": 53, "cgt": 53, "cgtnote": 53, "__contains__": 53, "__weakref__": [53, 93], "weak": [53, 62, 93, 201, 204], "_coset_repres": 53, "hg": 53, "transvers": [53, 58, 60, 149, 150], "coset_transvers": 53, "_distinct_primes_lemma": 53, "_element": 53, "_eval_is_alt_sym_monte_carlo": 53, "05": [53, 84, 110, 193, 196], "mont": 53, "carlo": 53, "randomli": [53, 62, 63, 102, 170], "n_ep": 53, "_check_cycles_alt_sym": [53, 60], "_eval_is_alt_sym_na": 53, "only_sym": 53, "only_alt": 53, "_p_elements_group": 53, "_random_pr_init": 53, "_random_prec_n": 53, "modif": [53, 68, 98, 230, 231, 246], "69": [53, 98, 200, 229, 246], "71": [53, 78, 98, 179], "_random_gen": 53, "accumul": [53, 242, 246], "random_pr": 53, "chosen": [53, 54, 63, 64, 75, 76, 98, 102, 105, 144, 178, 180, 181, 197, 198, 202, 204, 206, 211, 218, 221, 227, 231, 242, 256], "gh": [53, 199, 230, 237], "eventu": [53, 70, 89, 197, 198, 218, 244, 249], "_sylow_alt_sym": 53, "sylow": 53, "p_1": [53, 58, 63, 80, 102, 194, 221, 224], "p_2": [53, 63, 80, 102, 194, 221], "p_p": 53, "sylow_subgroup": 53, "is_alt_sym": [53, 60], "_union_find_merg": 53, "not_rep": 53, "atkinson": 53, "83": [53, 210], "87": [53, 68, 98, 102], "minimal_block": 53, "_union_find_rep": 53, "r65": 53, "r71": 53, "compress": [53, 98, 101, 108], "r67": 53, "r73": [53, 54], "_verifi": 53, "_h": [53, 230], "gens_k": 53, "rels_k": 53, "gens_h": 53, "inject": [53, 62, 198, 202, 207, 284], "homomorph": 53, "rels_h": 53, "strong_present": 53, "abelian_invari": 53, "t_1": [53, 67, 224], "t_2": [53, 67, 224], "t_r": [53, 141, 237], "542": 53, "adopt": [53, 237], "schreier": [53, 58, 60], "sim": [53, 58, 60, 87], "b_1": [53, 60, 70, 84, 87, 198, 221, 224, 227, 288], "b_2": [53, 60, 70, 84, 221, 227], "dot": [53, 54, 58, 60, 63, 75, 77, 84, 93, 98, 112, 121, 123, 128, 129, 130, 133, 134, 135, 138, 139, 140, 141, 143, 160, 186, 188, 191, 194, 195, 196, 198, 199, 204, 207, 211, 230, 231, 249, 256, 260, 262, 263], "b_k": [53, 60, 63, 67, 70, 213, 214], "strong": [53, 58, 59, 60, 102, 103], "89": [53, 60, 89], "55": [53, 65, 67, 98, 196, 197, 207, 224], "57": [53, 98, 102, 231], "coset": [53, 58, 206], "strong_gen": [53, 59, 60], "basic_transvers": [53, 60], "basic_orbit": [53, 60], "basic_stabil": 53, "baseswap": 53, "po": [53, 87, 92, 93, 123, 141, 143, 202, 229], "strong_gens_distr": [53, 60], "swap": [53, 54, 55, 93, 98, 156, 160, 169, 231, 249], "orbit": [53, 60, 176, 177, 179], "b_": [53, 58, 60, 62, 67, 70, 87, 95, 112, 213, 221, 224, 232, 233], "b_i": [53, 58, 60, 87, 198, 221], "la": [53, 143, 181], "vega": 53, "testutil": [53, 59, 60], "_verify_bsg": [53, 59, 60], "schreier_sim": [53, 59, 60], "bsg": [53, 58, 60, 237], "102": [53, 98], "98": [53, 63, 142, 207, 227], "pseudocod": 53, "beta_": 53, "foral": [53, 61, 64, 181], "zg": 53, "gz": 53, "c_g": 53, "sg": [53, 231, 237], "is_subgroup": 53, "subgroup_search": 53, "hgh": 53, "closur": [53, 59, 85, 156, 202, 206, 219], "composition_seri": 53, "h_0": [53, 58], "h_1": [53, 58, 230], "h_2": [53, 230], "1024": [53, 211, 231], "512": [53, 70], "128": [53, 67, 70, 72, 102, 205, 211], "32": [53, 65, 68, 70, 72, 98, 102, 105, 110, 141, 205, 207, 208, 220, 221, 224, 231, 242], "243": [53, 70, 229], "81": [53, 67, 72, 93, 98, 102, 126, 128, 196, 210], "conjugacy_class": 53, "xax": 53, "s_3": 53, "feasibl": [53, 112], "resiz": [53, 54, 93, 95], "coset_factor": 53, "factor_index": 53, "_basic_orbit": 53, "u1": [53, 102, 126, 128, 129, 130, 131, 133, 134, 138, 140, 143, 186, 188, 190, 191, 194, 227], "u2": [53, 101, 102, 126, 128, 129, 130, 131, 133, 134, 138, 143, 186, 190, 194, 227], "_strip": [53, 60], "coset_rank": 53, "lexicograph": [53, 54, 57, 58, 62, 204, 207, 249], "coset_unrank": 53, "standardis": [53, 201], "subsect": [53, 263], "compris": [53, 63, 95, 123, 141, 144, 207, 249], "g_0": [53, 224], "g_1": [53, 207, 218, 224, 227], "g_2": [53, 91, 218, 227], "g_i": [53, 218], "g_k": 53, "tetrahedron": [53, 55], "r69": 53, "axiom": [53, 198], "doy": 53, "sc": [53, 89], "thesi": [53, 62, 218, 256], "generator_product": 53, "sn": [53, 54, 61, 84], "is_abelian": 53, "_random_prec": 53, "82": [53, 89, 98, 231], "proport": [53, 63, 218, 250], "226": 53, "227": 53, "is_altern": 53, "quicker": [53, 102], "taxonomi": 53, "is_cycl": 53, "p_": [53, 58, 62, 89, 181, 224, 227, 232], "p_i": [53, 58, 102], "equiv": [53, 63, 67, 102, 206, 221, 224], "pmod": [53, 62, 63, 67, 98, 221], "p_j": [53, 58], "r70": 53, "35": [53, 56, 65, 67, 75, 76, 89, 98, 102, 128, 206, 211, 224, 227, 231], "rose": 53, "is_dihedr": 53, "di1": 53, "827273": 53, "di2": 53, "kconrad": [53, 231], "uconn": [53, 231], "blurb": [53, 231], "grouptheori": 53, "di3": 53, "dihedral2": 53, "di4": 53, "is_elementari": 53, "is_nilpot": [53, 98], "lower_central_seri": 53, "is_solv": 53, "is_norm": [53, 174], "gr": 53, "is_perfect": [53, 102], "is_polycycl": 53, "is_primit": [53, 202, 207], "cardin": [53, 54, 57, 198, 219], "badli": 53, "random_stab": 53, "g3": [53, 112], "is_symmetr": [53, 93], "is_transit": 53, "is_trivi": 53, "cba": [53, 232, 249], "mainli": [53, 70, 98, 103, 181, 191, 204, 221, 224, 227], "max_div": 53, "siev": [53, 102], "nonempti": [53, 249], "gb": 53, "moreov": [53, 63, 87, 192, 198, 199, 204, 212, 261], "congruenc": [53, 62, 102, 221, 224], "p_0": [53, 58, 80, 221, 224], "maxim": [53, 63, 91, 198, 202, 206, 218, 220], "intransit": 53, "normal_closur": 53, "adjoin": [53, 199], "yx": [53, 195], "73": [53, 61, 62, 75, 102, 227], "74": [53, 67, 102], "orb": 53, "78": [53, 76, 98, 102, 106, 181, 227, 231], "orbit_transvers": 53, "orbit_rep": 53, "send": [53, 62, 63, 68, 102, 198, 227, 229], "proof": [53, 56, 87, 89, 230], "79": [53, 54, 106], "pointwise_stabil": 53, "pointwis": [53, 60], "p_k": [53, 102], "p20": 53, "stab": 53, "schreier_sims_increment": [53, 60], "polycyclicgroup": 53, "eliminate_gen": 53, "gen_count": 53, "b1": [53, 58, 70, 102, 105, 106, 117, 126, 143, 186, 202, 211, 221, 224, 227, 262], "b_r": 53, "slp_dict": 53, "93": [53, 205], "schreier_sims_random": [53, 60], "consec_succ": 53, "consec": 53, "_succ": 53, "97": [53, 63, 102, 204], "sift": [53, 60, 249], "amend": 53, "unsuccess": [53, 60], "accordingli": [53, 199, 206], "halt": 53, "signifi": [53, 62, 105, 207, 231], "g_t": 53, "leq": [53, 61, 63, 70, 87, 98, 102, 196, 204, 206, 217, 218, 224, 231], "prop": [53, 206], "init_subgroup": 53, "supergroup": 53, "sought": [53, 102, 161, 171, 223, 229, 230], "prune": 53, "prop_even": 53, "lengthi": 53, "114": [53, 102], "117": [53, 70], "terribl": 53, "crucial": [53, 61, 201], "len1": 53, "len2": 53, "len3": 53, "transitivity_degre": 53, "fold": [53, 62, 68, 211, 218, 223], "a_2": [53, 63, 84, 98, 204, 221, 224, 227, 231, 288], "a_k": [53, 63, 208, 214], "arrang": [54, 112, 121, 141, 143, 220, 224, 237], "r74": 54, "reorder": [54, 61, 68, 176, 207, 227, 231, 249], "pretty_print": [54, 90, 123, 128, 129, 133, 134, 135, 137, 138, 139, 141, 144, 186, 188, 190, 191, 194, 195, 211], "understood": [54, 102, 181, 198, 202, 207], "economi": 54, "caution": [54, 62, 68, 211, 223], "indexerror": [54, 98, 207], "autos": [54, 101], "watch": 54, "print_cycl": 54, "econom": [54, 89, 249], "retain": [54, 62, 68, 70, 89, 104, 207, 212, 220, 223], "biject": [54, 56, 63, 93, 198], "full_cyclic_form": 54, "rmul": 54, "unrank_lex": 54, "r78": 54, "zo42": 54, "from_sequ": 54, "a1": [54, 58, 62, 90, 93, 102, 106, 126, 143, 150, 227, 231, 232, 262, 288], "a2": [54, 58, 62, 91, 93, 102, 106, 126, 143, 150, 200, 231, 232, 262, 288], "a3": [54, 58, 62, 91, 93, 143, 262, 288], "perfectli": [54, 61, 62, 63, 204, 207, 210], "skiena": 54, "ma": [54, 61, 131], "1990": [54, 87, 221, 256], "r75": 54, "wendi": 54, "myrvold": 54, "ruskei": [54, 249], "2001": [54, 102, 205], "lett": 54, "septemb": [54, 246], "281": 54, "284": [54, 102], "1016": [54, 249], "s0020": 54, "0190": 54, "01": [54, 62, 66, 126, 170, 205, 223, 249], "00141": 54, "r76": 54, "kreher": 54, "stinson": 54, "1999": [54, 98, 205, 210, 227], "r77": 54, "graham": [54, 67, 68, 102], "patashnik": 54, "foundat": [54, 205, 206], "1994": [54, 204, 205, 207], "php": [54, 102, 224, 231], "oldid": 54, "499948155": 54, "product_and_invers": 54, "r79": 54, "lehmer_cod": 54, "appliedpermut": 54, "magic": [54, 223, 242, 280], "_array_form": 54, "ascent": 54, "ie": [54, 224], "descent": [54, 224], "fg": [54, 64, 227, 230], "gf": [54, 63, 198, 200, 201, 204, 206], "r80": 54, "commutes_with": [54, 237], "cycle_structur": 54, "from_inversion_vector": 54, "get_adjacency_dist": 54, "n_adj": 54, "reev": 54, "colin": 54, "landscap": 54, "annal": 54, "86": [54, 98, 142, 210, 220], "473": 54, "josephu": 54, "get_precedence_matrix": 54, "get_precedence_dist": 54, "get_adjacency_matrix": 54, "get_positional_dist": 54, "inversion_vector": 54, "lesser": [54, 108, 207], "lehmer": 54, "ith": [54, 91, 102, 202, 208, 230, 231], "variat": [54, 62, 204, 218, 227], "r81": 54, "eng": 54, "chula": 54, "prabha": 54, "algo2008": 54, "htm": [54, 70, 89, 224], "is_singleton": 54, "is_odd": 54, "shuffl": [54, 98, 288], "012345": 54, "345": 54, "253": 54, "2531": 54, "25314": 54, "253140": 54, "r82": 54, "flavius_josephu": 54, "r83": 54, "josephus_problem": 54, "r84": 54, "20171008094331": 54, "wou": 54, "burtonl": 54, "trim": [54, 140], "unmov": 54, "mul_inv": 54, "next_nonlex": 54, "nonlex": 54, "rank_nonlex": 54, "unrank_nonlex": 54, "next_trotterjohnson": [54, 249], "trotter": 54, "johnson": [54, 98], "generate_bel": [54, 249], "rank_trotterjohnson": 54, "unrank_trotterjohnson": 54, "_af_par": 54, "pseudo": [54, 98, 102, 202, 204, 207], "inv_perm": 54, "enforc": [54, 128], "rmul_with_af": 54, "ascend": [54, 249], "r85": 54, "transposition_": 54, "flexibl": [54, 62, 126, 143, 194, 197, 201, 230, 278], "investig": [54, 87, 196, 198, 221, 249, 280], "cn": [54, 211, 287], "2n": [54, 61, 67, 70, 89, 93, 108, 113, 139, 196, 214, 221], "dn": [54, 231], "polyhedr": 55, "psg": 55, "platon": 55, "solid": [55, 76, 120, 197, 266], "tetrahedr": 55, "octahedr": 55, "icosahedr": 55, "r86": 55, "polyhedralgroup": 55, "polyhedra": 55, "h5": 55, "heinz": 56, "caylei": [56, 93], "r87": 56, "labeledtre": 56, "tree_repr": 56, "prufer_rank": 56, "prev": [56, 62], "prufer_repr": 56, "to_pruf": 56, "778": 56, "779": 56, "777": [56, 65], "1296": 56, "to_tre": 56, "r88": 56, "hamberg": 56, "erlend": 56, "2010": [56, 228, 249], "06": [56, 62, 128, 196, 231], "compact": [56, 62, 109, 121, 143, 174, 191, 207, 211, 229, 246], "next_binari": 57, "prev_binari": 57, "bitlist_from_subset": 57, "subset_from_bitlist": 57, "superset_s": 57, "iterate_binari": 57, "iterate_graycod": 57, "prev_grai": 57, "next_grai": 57, "next_lexicograph": 57, "prev_lexicograph": 57, "rank_binari": 57, "unrank_binari": 57, "rank_grai": 57, "unrank_grai": 57, "rank_lexicograph": 57, "43": [57, 98, 102, 105, 106, 231, 288], "super_set": 57, "subset_indic": 57, "ksubset": 57, "itertool": [57, 249], "tensor_can": [58, 237], "msym": 58, "contravari": [58, 98, 237, 238], "covari": [58, 64, 98, 231, 237, 238], "d0": 58, "base_i": 58, "gens_i": 58, "n_i": [58, 204, 229], "sym_i": 58, "failur": [58, 66, 79, 87, 102, 231, 242, 288], "canonicalize_na": 58, "exchang": [58, 63, 98, 196, 200, 249], "anticommut": [58, 163, 165, 175, 176, 237, 273], "canonical_fre": 58, "slot": [58, 160, 232, 236, 237, 283], "residu": [58, 63, 102, 204, 221], "tensor_gen": 58, "list_free_indic": 58, "double_coset_can_rep": 58, "reintroduc": 58, "antisymmetr": [58, 64, 93, 176, 237], "d2": [58, 186, 198, 218, 231, 249, 256], "ord": [58, 63, 98], "t_c": 58, "get_symmetric_group_sg": [58, 237], "bsgs_direct_product": 58, "base2a": 58, "gens2a": 58, "t0": 58, "t1": [58, 78, 79, 102, 117, 123, 224, 231], "a_m": [58, 227], "a_n": [58, 63, 70, 87, 91, 181, 199, 204, 206, 214, 224, 227, 288], "_a": [58, 70, 176, 207], "_b": [58, 70, 176], "base_f": 58, "gens_f": 58, "base1": 58, "gens1": 58, "base_a": 58, "gens_a": 58, "sgen": 58, "s_transvers": 58, "butler": [58, 237], "portug": [58, 237], "grow": [58, 62, 87, 98, 102, 201, 204], "observ": [58, 84, 87, 165, 195, 198, 221, 224, 227, 231, 265, 288], "ind": [58, 213, 237], "d3": [58, 218], "a0": [58, 227, 288], "a5": [58, 62], "leftrightarrow": 58, "_af_rmul": 58, "t_": [58, 67], "b0": [58, 70, 202, 221, 227], "d_": [58, 221], "p0": [58, 72, 206, 227], "dbase": 58, "recomput": [58, 207], "d_i": [58, 87, 181], "s_0": 58, "d_0": [58, 63], "b_0": [58, 63, 67, 221, 224, 227], "b_j": [58, 60, 70, 87, 221], "sx": 58, "trace": [58, 93, 95, 113, 143, 204, 211, 231, 232, 233, 235, 249, 284], "h_n": [58, 70, 89, 207, 230], "tab1": 58, "get_transvers": 58, "antisym": 58, "base2": 58, "gens2": 58, "_cmp_perm_list": 59, "ls1": 59, "ls2": 59, "_naive_list_centr": 59, "_verify_centr": 59, "_verify_normal_closur": 59, "_base_ord": 60, "base_ord": 60, "backtrack": 60, "108": [60, 102, 106], "132": [60, 67, 186], "r89": 60, "_distribute_gens_by_bas": 60, "_strong_gens_from_distr": 60, "_orbits_transversals_from_bsg": 60, "_handle_precomputed_bsg": 60, "transversals_onli": 60, "slp": 60, "_remove_gen": 60, "new_gen": 60, "r90": 60, "r91": 60, "recurr": [61, 67, 84, 98, 206, 217, 223, 227, 231, 251], "annihil": [61, 80, 81, 85, 152, 176, 229], "is_hypergeometr": 61, "binomi": [61, 66, 67, 70, 102, 207, 211, 216, 223, 227, 231, 249, 288], "ff": [61, 63, 67, 196, 199, 200, 201, 206, 207], "rise": [61, 67, 70, 196, 223, 227, 231, 260], "hypersimp": [61, 223], "quotient": [61, 62, 65, 68, 102, 198, 199, 201, 204, 207, 221, 223, 227], "dummy_vari": 61, "karr": 61, "quad": [61, 62, 64, 66, 70, 89, 93], "exclus": [61, 62, 68, 92, 98, 204, 280], "typeset": [61, 211], "doit": [61, 62, 64, 67, 68, 70, 89, 95, 112, 153, 155, 157, 168, 170, 173, 174, 176, 186, 196, 207, 213, 218, 223, 227, 228, 231, 233, 256, 259, 260, 262, 263, 278, 283], "seemingli": [61, 230], "nonsens": [61, 70], "r92": 61, "michael": [61, 205, 210], "april": 61, "1981": [61, 205], "305": 61, "350": [61, 123], "dl": [61, 195, 202, 205, 223], "1145": [61, 202, 205, 223], "322248": 61, "322255": 61, "r93": 61, "sigma_not": 61, "r94": 61, "empty_sum": 61, "euler_maclaurin": [61, 66], "eval_integr": 61, "maclaurin": [61, 66], "endpoint": [61, 62, 66, 75, 192, 219, 263], "28333333333333": 61, "sstr": [61, 191, 211], "full_prec": [61, 211], "26629073187415": 61, "0175000000000000": 61, "soon": [61, 62, 126, 181, 208], "eval_zeta_funct": 61, "is_absolutely_converg": 61, "sequence_term": 61, "is_converg": 61, "r95": 61, "absolute_converg": 61, "analogi": [61, 204], "prod_": [61, 67, 70, 87, 102, 181, 221], "respons": [61, 62, 112, 126, 197, 244], "diverg": [61, 70, 145, 187, 256, 259], "dirichlet": [61, 70, 231], "r96": 61, "convergence_test": 61, "reverse_ord": 61, "selector": [61, 93, 223, 249], "handi": [61, 62, 98, 211, 283], "s0": [61, 85, 87, 148], "expr_with_intlimit": [61, 89], "exprwithintlimit": [61, 89], "reorder_limit": 61, "r97": 61, "walli": 61, "w2": [61, 150], "w2e": 61, "risingfactori": [61, 67, 70, 211, 213], "combsimp": [61, 62, 67, 223], "pe": 61, "gammasimp": [61, 62, 223], "rewrit": [61, 62, 64, 67, 68, 70, 87, 89, 92, 105, 112, 173, 202, 207, 218, 219, 220, 223, 227, 228, 229, 230, 231, 268, 282, 284], "r98": 61, "r99": 61, "capital_pi_not": 61, "r100": 61, "empty_product": 61, "r101": 61, "infinite_product": 61, "r102": 61, "expr_with_limit": [61, 89], "exprwithlimit": [61, 89], "change_index": 61, "trafo": 61, "newvar": 61, "mapsto": [61, 87, 93, 206], "p3": [61, 72, 74, 75, 77, 78, 112, 197, 201, 220, 231], "has_empty_sequ": [61, 89], "has_reversed_limit": [61, 89], "has_finite_limit": [61, 89], "____": [61, 66, 89, 148, 199, 212, 231, 249, 289], "___": [61, 66, 89, 90, 98, 199, 223, 231, 236, 249, 287], "rubric": [61, 62], "_____": [61, 231], "gosper": 61, "gosper_norm": 61, "monic": [61, 70, 198, 199, 202, 204, 206, 207, 210], "gcd": [61, 62, 63, 98, 102, 172, 201, 202, 205, 206, 207, 211, 223, 224], "gosper_term": 61, "f_k": [61, 121, 138, 204], "g_n": [61, 67, 207], "f_n": [61, 67, 70, 198, 204, 207, 227], "gosper_sum": 61, "r103": 61, "marko": 61, "petkovsek": [61, 229], "herbert": 61, "doron": 61, "zeilberg": [61, 229], "ak": [61, 213], "peter": [61, 67, 70, 102, 142, 193, 207, 249], "ltd": 61, "welleslei": 61, "usa": [61, 205], "1997": [61, 87, 102, 205, 221], "convert_xor": [62, 104], "09": [62, 110, 196], "xor": [62, 65, 92, 104, 211, 280], "sympifyerror": 62, "coerc": [62, 140, 204], "cooper": 62, "shouldn": [62, 208], "unsanit": [62, 250, 277], "bitcount": 62, "improperli": 62, "unbound": [62, 236], "23903": 62, "fallback": [62, 90, 176, 191, 201, 211, 229], "ast": [62, 211], "mylist1": 62, "mylist": 62, "mylist2": 62, "xxx": [62, 89, 98, 249, 251], "autosimplif": [62, 220, 223], "kern": 62, "r106": 62, "7649": 62, "r105": 62, "r109": 62, "r107": 62, "r108": 62, "r110": 62, "r111": 62, "r112": 62, "r104": 62, "imaginaryunit": [62, 211], "negativeinfin": [62, 211], "complexinfin": [62, 112], "recreat": [62, 120], "isfinit": 62, "__cacheit": 62, "maxsiz": 62, "cacheit": 62, "noqa": [62, 90, 202, 245], "f811": 62, "sympy_use_cach": 62, "cot": [62, 68, 70, 104, 208, 211, 220], "_arg": [62, 68], "as_mut": [62, 94, 95], "as_content_primit": [62, 98, 199, 207], "stub": 62, "as_dummi": [62, 89], "_0": [62, 67, 87, 93, 98, 207, 250], "_r": [62, 176, 221, 230], "bound_symbol": [62, 89], "typeinfo": 62, "truli": [62, 70, 181], "piec": [62, 66, 221, 244], "numbersymbol": [62, 211], "scan": [62, 200], "appliedundef": 62, "canonical_vari": 62, "class_kei": 62, "sorted_class": 62, "dummy_eq": 62, "eg": [62, 126, 183, 230], "fromit": 62, "has_fre": 62, "has_xfre": 62, "exp_polar": [62, 68, 70, 221], "dif": 62, "_prec": 62, "r_": [62, 114, 177, 208], "repl_dict": 62, "rcall": [62, 64], "simul": [62, 126, 143, 210], "abus": [62, 237], "succe": [62, 87, 92, 102, 166, 206, 229], "newtyp": 62, "intuit": [62, 181, 227], "is_mul": 62, "is_add": [62, 230], "mysin": [62, 250, 277], "_eval_rewrite_as_": 62, "_eval_rewrite_as_co": 62, "tie": [62, 249], "delai": [62, 110, 140, 220, 242, 278], "unsort": [62, 116, 185], "333333333333333333333": 62, "333333333333333314830": 62, "wildcard": [62, 223], "evalfmixin": 62, "registri": 62, "metaprogram": 62, "address": [62, 211, 230], "mostli": [62, 68, 89, 98, 143, 171, 194, 198, 210, 211, 221, 229, 287], "__truediv__": [62, 202], "metaclass": 62, "class_nam": 62, "mysingleton": 62, "_eval_is_g": 62, "_eval_is_eq": 62, "args_cnc": 62, "cset": 62, "split_1": 62, "suppress": [62, 104, 240, 247], "as_coeff_add": 62, "dep": [62, 227], "as_coeff_expon": 62, "as_coeffici": 62, "zz": [62, 67, 84, 85, 89, 95, 98, 99, 102, 123, 195, 198, 199, 200, 201, 204, 206, 207, 208, 209, 226], "coeff_monomi": [62, 207], "polytool": [62, 207, 230], "monomi": [62, 89, 92, 102, 199, 201, 202, 204, 210, 211, 288], "as_coefficients_dict": 62, "inquiri": 62, "expand_mul": [62, 87], "121": [62, 67, 102, 112, 186, 229], "84": [62, 66, 102], "separatevar": [62, 223, 227], "n3": [62, 126], "as_leading_term": [62, 218], "logx": [62, 218], "cdir": 62, "_eval_as_leading_term": 62, "as_numer_denom": [62, 229], "as_ordered_factor": 62, "as_ordered_term": 62, "as_powers_dict": 62, "lost": 62, "as_real_imag": [62, 68, 93, 212], "as_term": 62, "aseri": 62, "hir": 62, "asymptot": [62, 87, 112, 278], "hierarch": 62, "normalis": [62, 213], "induc": [62, 93, 206, 220, 249], "gruntz": [62, 213], "majorli": 62, "mrv": [62, 218], "overal": [62, 183, 197, 229], "till": [62, 105, 106, 126, 227], "r113": 62, "dominik": [62, 213], "proc": [62, 202, 229], "1993": [62, 205], "symp": [62, 202], "239": 62, "244": [62, 204], "r114": 62, "p90": 62, "r115": 62, "asymptotic_expans": 62, "_first": [62, 68], "factor_term": [62, 134, 207, 220, 223], "distribute_order_term": [62, 223], "compute_leading_term": 62, "could_extract_minus_sign": 62, "signsimp": [62, 134, 223], "failing_express": 62, "modulu": [62, 63, 65, 70, 72, 78, 93, 102, 105, 106, 198, 202, 204, 206, 207, 210, 230], "power_bas": [62, 93], "power_exp": [62, 93], "multinomi": [62, 93, 102, 231], "expr_free_symbol": 62, "extract_addit": 62, "extract_multipl": 62, "extract_branch_factor": 62, "allow_half": 62, "fourier_seri": [62, 214], "geto": 62, "getn": 62, "mod_invers": [62, 207], "is_algebraic_expr": 62, "is_rational_funct": 62, "r116": 62, "algebraic_express": 62, "is_const": 62, "constanc": 62, "agre": [62, 63, 70, 77, 87, 221], "test_expr": 62, "failing_numb": 62, "is_meromorph": 62, "meromorph": [62, 70], "multivalu": [62, 68], "cut": [62, 67, 68, 70, 78, 87, 198, 221, 246, 252, 288], "hit": [62, 283], "is_polynomi": 62, "rational_funct": 62, "leadterm": 62, "xlim": [62, 197], "lseri": 62, "exaxmpl": 62, "nseri": 62, "_eval_nseri": 62, "innermost": 62, "disadvantag": 62, "met": [62, 108, 224, 230, 245, 288], "poleerror": 62, "nsimplifi": [62, 66, 223], "radsimp": [62, 223], "ratsimp": [62, 223], "removeo": [62, 143, 211, 278], "chop": [62, 66, 70, 93, 98, 229, 277], "123": [62, 67, 72, 92, 120, 173, 186, 249, 256, 258], "lazi": [62, 95, 207], "smooth": [62, 66, 102, 213], "taylor_term": [62, 68], "previous_term": [62, 68], "wildfunct": 62, "dummy_index": 62, "temporari": [62, 243], "_dummy_10": 62, "contigu": [62, 221, 244], "x4": [62, 67, 201], "x5": [62, 67, 201], "x6": [62, 201], "x7": [62, 201], "x8": [62, 201], "x9": [62, 201], "x50": 62, "x51": 62, "y3": [62, 201], "y4": 62, "xa": [62, 199, 204], "xb": [62, 252], "xc": [62, 175, 252], "disambigu": 62, "x01": 62, "x02": 62, "x11": 62, "x12": 62, "escap": [62, 104, 197, 211, 252], "newli": [62, 87, 221], "undefinedfunct": [62, 188, 211, 243, 250], "f821": [62, 245], "cofactor": [62, 98, 202, 204, 207], "lcm": [62, 102, 202, 204, 207, 211], "50000000000000": [62, 66], "100000000000000000000": 62, "1e20": 62, "00000000000000e": 62, "23456789123456789": 62, "23456789123457": 62, "00100": 62, "sent": [62, 89, 223, 229], "789": [62, 102], "123_456": 62, "123456789": 62, "12e": 62, "012": 62, "60e2": 62, "6000": 62, "600e": 62, "125": [62, 66, 89, 102, 202, 217, 224], "099609": 62, "12500": 62, "12500000000000000000": 62, "5404319552844595": 62, "54": [62, 98, 106, 204, 210, 249], "29999999999999998890": 62, "30000000000000000000": 62, "_mpf_": [62, 201], "4915": 62, "70": [62, 63, 79, 89, 98, 102, 210, 211, 224, 231, 252], "307": 62, "mpf": [62, 201, 202], "is_float": 62, "unprejud": 62, "3602879701896397": 62, "18014398509481984": [62, 223], "limit_denomin": 62, "320": 62, "75": [62, 65, 200, 231, 256], "use_tri": [62, 102], "use_rho": [62, 102], "use_pm1": [62, 102], "factorint": [62, 102, 206, 207, 246], "trial": [62, 102, 204, 216, 220, 227, 231], "max_denomin": 62, "1000000": [62, 102], "141592653589793": 62, "311": [62, 102], "discard": [62, 206, 211, 230], "99999999999999999999": 62, "algebraicnumb": [62, 202, 206, 210], "hookrightarrow": 62, "minpoli": [62, 201, 202, 206], "dmp": [62, 198, 202, 207], "anp": [62, 201, 202, 206, 207], "to_list": [62, 200, 202], "minpoly_of_el": 62, "414213562": 62, "scratch": [62, 181], "6x": [62, 204], "to_number_field": [62, 206], "to_root": 62, "primitive_el": [62, 201, 202, 206], "knew": [62, 288], "golden": [62, 66, 102], "5th": [62, 143, 204, 206], "cyclotom": [62, 202, 204, 205, 206, 207], "cyclotomic_poli": [62, 206, 207], "61803398874989": 62, "2i": 62, "a6": 62, "a6_wrong": 62, "309016994374947": 62, "951056516295154": 62, "field_el": 62, "is_alias": 62, "is_primitive_el": 62, "native_coeff": 62, "to_algebraic_integ": 62, "to_primitive_el": 62, "Its": [62, 68, 78, 143, 174, 200, 204, 211, 219], "a_prim": 62, "number_cl": 62, "realnumb": 62, "igcd": [62, 102, 199], "greatest": [62, 67, 72, 102, 199, 201, 202, 204, 205, 207, 210], "euclid": [62, 204, 205], "r117": 62, "euclidean_algorithm": 62, "ilcm": [62, 102], "seterr": 62, "r118": 62, "r119": 62, "1_": 62, "28number": 62, "negativeon": [62, 68, 283], "r120": 62, "88": [62, 98, 102], "921_": 62, "r121": 62, "one_half": 62, "holder": 62, "ieee": [62, 63], "754": 62, "r122": 62, "affin": [62, 63, 77, 198], "compactif": 62, "r123": 62, "tild": [62, 68, 232], "phase": [62, 89, 110, 145, 148, 150, 160, 161, 230], "exp1": [62, 211], "718281828": 62, "napier": 62, "r124": 62, "e_": [62, 67, 98], "28mathematical_const": 62, "r125": 62, "imaginary_unit": [62, 211], "141592654": 62, "circumfer": [62, 72], "diamet": [62, 72], "area": [62, 72, 74, 78, 79, 105, 106], "is_irr": 62, "r126": 62, "mascheroni": [62, 70], "5772157": 62, "recur": 62, "harmon": [62, 67, 102, 114, 155, 196, 211, 273], "lim": [62, 218, 278], "limits_": [62, 196, 213, 282], "ln": [62, 68, 89, 211, 213, 227, 231, 288], "r127": 62, "93mascheroni_const": 62, "catalan": [62, 67, 211], "91596559": 62, "r128": 62, "27s_constant": 62, "goldenratio": [62, 66, 212, 223], "r129": 62, "golden_ratio": 62, "tribonacciconst": 62, "tribonacci": [62, 67], "fibonacci": [62, 66, 67, 102], "predetermin": [62, 242], "8392867552141611326": 62, "r130": 62, "generalizations_of_fibonacci_numb": [62, 67], "tribonacci_numb": [62, 67], "modulo": [62, 63, 99, 102, 172, 198, 200, 201, 202, 204, 206, 207, 208, 210, 211, 214, 223], "r131": 62, "modular_multiplicative_invers": 62, "r132": 62, "extended_euclidean_algorithm": 62, "equal_valu": 62, "verion": 62, "compound": [62, 131, 174], "r133": 62, "20033": 62, "oscil": [62, 273], "conform": [62, 230, 235, 236, 249], "r134": 62, "r135": 62, "zero_to_the_power_of_zero": 62, "r136": 62, "indeterminate_form": 62, "as_base_exp": [62, 68, 69, 249], "expand_power_bas": [62, 223], "integer_nthroot": [62, 68, 102], "floor": [62, 68, 102, 120, 201, 202, 211, 231], "integer_log": 62, "geq": [62, 63, 70, 98, 207, 224, 231, 288], "factor_": [62, 63, 102, 207, 224], "perfect_pow": [62, 102], "infix": 62, "matmul": [62, 95, 200], "as_coef_mul": 62, "undesir": [62, 116, 126, 140, 199, 202, 221], "4596": 62, "5728": 62, "suspect": [62, 102], "5706": 62, "moot": 62, "off": [62, 72, 87, 93, 101, 103, 128, 137, 160, 198, 207, 211, 227, 242, 253, 256, 282], "nb": 62, "sensit": [62, 112, 143, 197, 204, 223, 242], "assocop": 62, "prod": [62, 201, 208, 220], "matadd": [62, 95, 211], "as_coef_add": 62, "extract_leading_ord": 62, "commutative_part": 62, "noncommutative_part": 62, "order_symbol": 62, "subprocess": [62, 211, 242, 243], "dividend": [62, 202], "rop": 62, "validrelationoper": 62, "greaterthan": [62, 211], "lessthan": [62, 211], "strictlessthan": [62, 211, 252], "lt": [62, 207, 252], "my_equ": 62, "my_inequ": 62, "reversedsign": 62, "_eval_eq": 62, "respond": 62, "boolalg": [62, 92], "client": [62, 246], "counterpart": [62, 63, 227, 278], "litter": 62, "oddbal": 62, "minor": [62, 72, 98, 211, 242], "caveat": [62, 207, 280], "succinctli": 62, "annoy": 62, "succinct": 62, "occasion": 62, "r137": 62, "operar": 62, "circuit": [62, 160, 163, 273], "greaterthanobject": 62, "__bool__": 62, "335": 62, "march": 62, "2012": 62, "r138": 62, "r139": 62, "r140": 62, "mdarg": 62, "fgh": 62, "vsin": 62, "vdiff": 62, "narg": [62, 204], "naturals0": [62, 211, 219, 230, 231], "evalul": 62, "fairli": [62, 70, 87, 128, 136, 185, 198], "conserv": [62, 121, 139, 187, 259, 265], "136": [62, 98], "temporarili": 62, "indirect": [62, 64, 70, 102, 176, 227], "implic": [62, 92, 204], "fx": [62, 64, 197, 227, 228], "fxx": 62, "insconsist": 62, "presenc": [62, 68, 92, 108, 125, 130, 140, 227, 235], "nonvanish": 62, "_diff_wrt": 62, "_sort_variable_count": 62, "vc": 62, "vsort": 62, "collaps": [62, 170, 223], "vsort0": 62, "vi": 62, "dfx": 62, "equidist": 62, "sq2": 62, "xl": 62, "d2fdxdy": 62, "doit_numer": 62, "z0": [62, 218], "unifi": [62, 144, 200, 202, 204, 206, 207, 219], "zeroth": [62, 206], "idiff": [62, 79], "r141": 62, "legaci": [62, 89, 98, 231], "v5_2": 62, "infunct": 62, "algebraiccomput": 62, "functionclass": [62, 211, 250], "f_real": [62, 69], "f_real_inherit": [62, 69], "is_singular": [62, 69, 85], "holomorph": [62, 69, 87], "superfici": 62, "unexpect": [62, 242], "ss": [62, 202], "denom": [62, 201, 202, 206, 223], "_eval_expand_bas": 62, "_eval_expand_complex": 62, "shut": [62, 207], "unwant": [62, 229, 249], "alphabet": [62, 63, 112, 181, 199, 224, 244], "expand_hint": 62, "_eval_expand_hint": 62, "liabl": [62, 92], "metahint": 62, "myclass": 62, "_eval_expand_doubl": 62, "expand_multinomi": 62, "expand_power_exp": 62, "expand_func": [62, 67, 70], "hyperexpand": [62, 70, 84, 87, 221, 223], "div": [62, 199, 201, 202, 207, 211, 223, 283], "horner": [62, 143, 204, 207], "untouch": 62, "unexpand": [62, 201, 210, 220, 243], "safe": [62, 102, 201, 207, 229, 235, 278], "nfloat": [62, 223], "dkei": 62, "mixin": [62, 249], "maxn": [62, 66, 93], "subresult": [62, 202, 205, 207], "000100000000000000": 62, "precisionexhaust": [62, 66], "maxprec": 62, "quadratur": [62, 66, 89, 227], "tanh": [62, 66, 68, 89, 208, 211, 223, 288], "oscillatori": [62, 66, 216], "osc": [62, 66], "advers": 62, "1e16": 62, "291": 62, "builtin": [62, 202, 211, 219, 252, 287], "speedup": [62, 98, 103, 204, 208, 250], "framework": [62, 119, 126, 136, 236, 242, 244, 250, 273], "slice": [62, 92, 93, 98, 104, 202, 207, 217, 219, 223, 232, 249], "tuplekind": [62, 93, 219], "parametris": [62, 219], "element_kind": [62, 93, 219], "tuple_count": 62, "setkind": [62, 93], "gcd_term": [62, 207], "isprimit": 62, "_gcd_term": 62, "terms_gcd": [62, 202, 207], "entiti": [62, 72, 75, 76, 78, 79, 87, 126, 141, 192, 230, 265, 274, 284], "broad": [62, 283], "undefinedkind": [62, 93, 219], "lex": [62, 90, 191, 199, 201, 202, 204, 207, 208, 210, 211, 223], "grlex": [62, 90, 191, 202, 207, 210, 211], "grevlex": [62, 90, 191, 199, 204, 207, 210, 211], "rev": 62, "unaffect": [62, 230], "_node": 62, "fastest": [62, 67, 89, 102, 103, 208], "undecor": 62, "breaker": 62, "hash": [62, 202, 204, 212, 223, 227, 242, 244], "collis": [62, 101, 211], "wast": [62, 99, 200], "rng": 62, "getstat": 62, "intention": 62, "tn": 62, "td": [62, 211, 287], "randrang": 62, "999": [62, 66], "238": [62, 102], "randint": [62, 98, 204], "ri": [62, 211], "rv": [62, 220, 231, 249], "nonbas": 62, "postord": 62, "descend": [62, 198, 206, 244], "subtre": [62, 211, 246], "cryptograph": 63, "encrypt": 63, "hide": [63, 211], "cipher": 63, "vigener": 63, "hill": [63, 70, 89, 121, 142, 186, 193, 256], "bifid": 63, "rsa": 63, "kid": 63, "feedback": [63, 109, 112, 281], "elgam": 63, "plaintext": [63, 211], "ciphertext": 63, "monoalphabet": 63, "polyalphabet": 63, "crypto": 63, "az": [63, 112, 224], "hello": [63, 249], "world": [63, 108, 130, 140, 249], "helloworld": 63, "check_and_join": 63, "padded_kei": 63, "puppi": 63, "opqrstuvwxi": 63, "puyoqrstvwx": 63, "artist": 63, "aphras": 63, "ara": 63, "hp": 63, "cycle_list": 63, "encipher_shift": 63, "msg": [63, 89], "decipher_shift": 63, "gonavybeatarmi": 63, "ct": [63, 91, 204], "hpobwzcfbubsnz": 63, "deciph": 63, "l1": [63, 72, 74, 75, 120, 123, 129, 141, 202, 204, 207, 224, 231], "l2": [63, 74, 75, 120, 123, 129, 162, 178, 202, 204, 231], "caesar": 63, "juliu": 63, "suetoniu": 63, "protect": [63, 211], "militari": 63, "nephew": 63, "augustu": 63, "reportedli": 63, "r142": 63, "caesar_ciph": 63, "r143": 63, "caesarsmethod": 63, "encipher_rot13": 63, "rot13": 63, "caeser": 63, "midwai": 63, "decipher_rot13": 63, "r144": 63, "decrypt": 63, "tbanilorngnezl": 63, "encipher_affin": 63, "_invers": 63, "cx": [63, 106], "recov": [63, 89, 181, 204, 206, 207, 224, 227], "decipher_affin": 63, "r145": 63, "affine_ciph": 63, "reciph": 63, "navi": 63, "beat": 63, "armi": 63, "trobmvenbgbalv": 63, "encipher_atbash": 63, "enciph": 63, "atbash": 63, "hebrew": 63, "decipher_atbash": 63, "tlmzebyvzgzinb": 63, "r146": 63, "encipher_substitut": 63, "oeyag": 63, "034": 63, "60n": 63, "v4b3": 63, "rm4": 63, "immateri": 63, "anyv": 63, "wherebi": 63, "r147": 63, "substitution_ciph": 63, "encipher_vigener": 63, "me": [63, 126, 143, 186, 211, 233], "mondai": 63, "qrgkkthrzqebpr": 63, "krypto": 63, "sculptur": 63, "cia": 63, "headquart": 63, "r149": 63, "decipher_vigener": 63, "alp": 63, "palimpsest": 63, "emufphzlrfaxyusdjkzldkrnshgnfivj": 63, "betweensubtleshadingandtheabsenc": 63, "blais": 63, "sixteenth": 63, "centuri": [63, 198], "diplomat": 63, "accid": [63, 250], "invent": [63, 206, 229, 282], "giovan": 63, "batista": 63, "belaso": 63, "1553": 63, "civil": [63, 105], "war": 63, "confederaci": 63, "brass": 63, "nsa": 63, "museum": 63, "fort": 63, "mead": 63, "r148": 63, "sender": 63, "assembl": [63, 87, 218], "concaten": [63, 93, 249], "frequenc": [63, 89, 110, 112, 150, 152, 160, 177], "kasiski": 63, "discov": [63, 87, 116, 235, 284], "babbag": 63, "unbreak": 63, "ye": [63, 92, 227], "gonavybeatarmyyesyoucan": 63, "gold": 63, "auto_kei": 63, "goldbuggonavybeatarmyy": 63, "mcydwshkogamkzcelyfgayr": 63, "pt": [63, 71, 72, 73, 75, 76, 77, 78, 217], "vigenere_ciph": 63, "20071116100808": 63, "filebox": 63, "vt": 63, "batman": 63, "goo": 63, "gl": 63, "ijr22d": 63, "decod": 63, "qrgk": 63, "kt": [63, 131], "hrzqe": 63, "bpr": 63, "meetmeonmondai": 63, "encipher_hil": 63, "z_": [63, 223], "r150": 63, "lester": 63, "1920": 63, "r151": 63, "polygraph": 63, "bare": [63, 121], "ceil": [63, 68, 102, 120, 211], "l_1": [63, 67, 113, 196, 221, 237, 249], "l_t": 63, "c_t": 63, "l_i": [63, 196, 221], "decipher_hil": 63, "hill_ciph": 63, "june": [63, 98], "juli": [63, 224], "1929": 63, "306": 63, "312": [63, 186, 229, 256, 258], "ueqdueodoctcwq": 63, "st": [63, 89, 176], "hjeb": 63, "stqq": 63, "ispk": 63, "stzz": 63, "hd": 63, "ormv": 63, "uiki": 63, "encipher_bifid": 63, "polybiu": 63, "printabl": 63, "bifid5": 63, "decipher_bifid": 63, "encipher_bifid5": 63, "encipher_bifid6": 63, "r152": 63, "bifid_ciph": 63, "ieilhhfstsfqy": 63, "ieilh": 63, "hfst": 63, "fqyej": 63, "bmtwmg": 63, "bio": 63, "gold_bug": 63, "hg2sfuei7t": 63, "pug": 63, "heldo": 63, "wor6d": 63, "bifid5_squar": 63, "5x5": 63, "cap": [63, 66, 176, 219, 230], "tradition": [63, 70], "decipher_bifid5": 63, "round_trip": 63, "josi": 63, "osi": 63, "iosi": 63, "qiq": 63, "1901": 63, "felix": 63, "delastel": 63, "onto": [63, 75, 76, 77, 87, 91, 98, 101, 103, 206], "helen": 63, "cryptanalysi": 63, "german": 63, "fridai": 63, "ieilehfstsfxe": 63, "okai": 63, "decipher_bifid6": 63, "8am": 63, "kfkljjhf5mmmktfrgpl": 63, "meetmeonmondayat8am": 63, "bifid6_squar": 63, "6x6": 63, "rsa_public_kei": 63, "totient": [63, 102], "carmichael": [63, 102], "p_n": [63, 67, 70, 89, 207], "multiprim": 63, "land": 63, "reduced_toti": [63, 102], "uniquenss": 63, "rsa_private_kei": 63, "e_0": 63, "canonicalz": 63, "61": [63, 67, 78, 98, 102, 207, 213], "3233": 63, "797": 63, "1577": 63, "multipow": 63, "cryptosystem": 63, "coprim": [63, 89, 102, 172, 204, 224], "30030": 63, "becam": [63, 136], "hardest": 63, "claim": [63, 195, 221, 230], "encipher_rsa": 63, "decipher_rsa": 63, "r153": 63, "rsa_": 63, "28cryptosystem": 63, "r154": 63, "cacr": 63, "uwaterloo": 63, "techreport": 63, "2006": [63, 220], "cacr2006": 63, "r155": 63, "springer": [63, 89, 102, 204, 205, 227], "1007": 63, "bfb0055738": 63, "r156": 63, "itii": 63, "manuscript": [63, 89], "1381": 63, "2753": 63, "413": 63, "1193": 63, "823": 63, "r157": 63, "r158": 63, "r159": 63, "r160": 63, "bmod": [63, 207, 211], "vice": [63, 89, 102, 105, 166, 186, 198, 202, 260, 261, 280], "versa": [63, 89, 102, 105, 166, 186, 198, 202, 260, 261, 280], "asymmetr": [63, 78], "puk": 63, "prk": 63, "chines": [63, 102, 204], "k_1": [63, 102, 204, 221], "k_2": 63, "k_n": [63, 70, 204], "p_3": [63, 194], "k_3": 63, "moduli": [63, 102, 204], "2048": [63, 102, 211], "overhead": [63, 103, 208], "modular": [63, 102, 172, 205, 230], "crt": [63, 102, 204], "overcompens": 63, "new_msg": 63, "kid_rsa_public_kei": 63, "grade": [63, 90, 191, 207], "school": [63, 220], "bob": [63, 120], "369": 63, "58": [63, 98, 237], "kid_rsa_private_kei": 63, "encipher_kid_rsa": 63, "200": [63, 93, 98, 102, 105, 110, 256], "161": 63, "decipher_kid_rsa": 63, "pub": [63, 256], "pri": 63, "encode_mors": 63, "sep": [63, 211, 228, 242], "mors": 63, "attack": 63, "flank": 63, "r161": 63, "morse_cod": 63, "decode_mors": 63, "word_sep": 63, "mc": [63, 131], "east": 63, "r162": 63, "lfsr_sequenc": 63, "lfsr": 63, "c_k": 63, "golomb": [63, 102], "g162": 63, "autocorrel": 63, "lim_": [63, 68, 70, 87, 89, 218, 278, 282], "balanc": [63, 142, 198, 231, 242], "solomon": 63, "aegean": 63, "park": 63, "laguna": 63, "1967": [63, 205], "lfsr_autocorrel": 63, "lfsr_connection_polynomi": 63, "massei": 63, "m163": 63, "jame": [63, 204], "synthesi": 63, "bch": 63, "tran": 63, "122": [63, 65, 70], "127": [63, 102], "elgamal_public_kei": 63, "elgamal_private_kei": 63, "1031": 63, "636": 63, "212": [63, 89, 205], "dlp": 63, "is_primitive_root": [63, 102], "encipher_elgam": 63, "encryp": 63, "decipher_elgam": 63, "eucliden": 63, "dh_public_kei": 63, "dh_private_kei": 63, "_p": [63, 176, 202, 204, 206, 218, 221, 229], "_g": 63, "diffi": 63, "hellman": [63, 102], "publicli": 63, "secretli": 63, "dh_shared_kei": 63, "sk": 63, "gm_public_kei": 63, "goldwass": 63, "micali": 63, "gm_private_kei": 63, "b_n": [63, 67, 91, 198, 214], "jacobi_symbol": [63, 102], "reconstruct": [63, 98, 204, 224, 283], "residuos": 63, "entropi": [63, 231], "encipher_gm": 63, "public_kei": 63, "gm": [63, 179], "decipher_gm": 63, "encipher_railf": 63, "rail": 63, "railfenc": 63, "horel": 63, "ollwd": 63, "r165": 63, "rail_fence_ciph": 63, "decipher_railf": 63, "diffgeom": 64, "euclidean": [64, 75, 77, 186, 202, 204, 207], "r166": 64, "chart": [64, 197], "r167": 64, "sussman": 64, "wisdom": 64, "farr": 64, "2013": [64, 74, 93, 286], "cartesian": [64, 105, 144, 149, 163, 166, 171, 192, 197, 198, 219, 230, 249, 260, 261, 263, 264, 273], "polar": [64, 68, 70, 72, 78, 105, 114, 146, 197, 219, 223, 230, 273], "relation_dict": 64, "car2d": 64, "pol": 64, "coordinatesymbol": 64, "jacobian": [64, 98, 140, 229], "jacobian_determin": 64, "r168": 64, "coordinate_system": 64, "base_oneform": 64, "coord_index": 64, "oneform": 64, "base_scalar": 64, "basescalarfield": 64, "base_vector": [64, 256], "coord_funct": 64, "to_si": 64, "coord": [64, 77, 79, 116, 174, 190], "immutabledensematrix": [64, 93, 94, 95, 96, 231], "rn": 64, "r2_r": 64, "r2_p": 64, "jacobian_matrix": 64, "point_to_coord": 64, "coord_si": [64, 259], "imbu": 64, "difficulti": [64, 127], "arriv": [64, 204, 221, 223, 227, 231, 288], "inappropri": 64, "poin": 64, "unappropri": 64, "fy": [64, 197, 228], "ftheta": 64, "basevectorfield": 64, "point_p": 64, "point_r": 64, "s_field": 64, "dxi": 64, "v1": [64, 75, 98, 123, 143, 186, 187, 190, 231, 250, 256, 259, 260, 261, 262], "v2": [64, 75, 98, 123, 186, 187, 190, 250, 256, 259, 260, 261, 262], "v_1": [64, 206, 229], "v_2": [64, 206], "e_x": [64, 237], "e_i": [64, 198, 221, 237], "e_r": 64, "c_xy": 64, "c_xr": 64, "unfortun": [64, 66, 103, 210, 224], "e_rho": 64, "form_field": 64, "exterior": [64, 78], "dg": 64, "tensorproduct": [64, 173, 175, 232, 233], "multilinear": 64, "wedg": [64, 87], "tp1": 64, "tp": [64, 148, 175, 202, 233], "wedgeproduct": 64, "wp1": 64, "liederiv": 64, "v_field": 64, "transport": 64, "pushforward": 64, "e_theta": 64, "basecovarderivativeop": 64, "christoffel": 64, "metric_to_christoffel_2nd": 64, "ch": [64, 98, 224], "cvd": 64, "covarderivativeop": 64, "intcurve_seri": 64, "vector_field": [64, 263], "start_point": 64, "f_i": [64, 87, 98, 204, 208], "movement": 64, "intcurve_diffequ": 64, "init_cond": 64, "f_1": [64, 67, 70, 87, 112, 122, 125, 144, 198, 204, 207, 227], "f_0": [64, 67, 122, 204], "vectors_in_basi": 64, "kept": [64, 178, 195, 249, 283], "twoform_to_matrix": 64, "twoform": 64, "e_j": 64, "metric_to_christoffel_1st": 64, "levi": [64, 70, 231, 237], "civita": [64, 70, 237], "metric_to_riemann_compon": 64, "non_trivial_metr": 64, "dtheta": 64, "drho": 64, "metric_to_ricci_compon": 64, "ricci": 64, "fft": [65, 143], "ifft": 65, "ntt": 65, "intt": 65, "fwht": 65, "ifwht": 65, "mobius_transform": 65, "inverse_mobius_transform": 65, "convolution_fft": 65, "convolution_ntt": 65, "convolution_fwht": 65, "convolution_subset": 65, "covering_product": 65, "intersecting_product": 65, "radix": 65, "r169": 65, "coolei": 65, "93tukey_fft_algorithm": 65, "r170": 65, "fastfouriertransform": 65, "r171": 65, "r172": 65, "pz": [65, 110, 237], "643": [65, 102], "767": 65, "387": 65, "415": 65, "384": 65, "353": [65, 98], "r173": 65, "apfloat": 65, "r174": 65, "numbertheoretictransform": 65, "r175": 65, "discrete_fourier_transform_": 65, "r176": 65, "r177": 65, "r178": 65, "wht": 65, "r179": 65, "hadamard_transform": 65, "r180": 65, "fast_walsh": 65, "93hadamard_transform": 65, "r181": 65, "r182": 65, "mobiu": [65, 102], "lattic": [65, 200, 224], "bitmask": 65, "r183": 65, "b6bius_inversion_formula": 65, "r184": 65, "csail": 65, "mit": 65, "rrw": 65, "conv": 65, "r185": 65, "arxiv": [65, 67, 70, 98, 114, 207, 249], "1211": 65, "0189": 65, "r186": 65, "r187": 65, "r188": 65, "888": 65, "444": 65, "1283": 65, "19351": 65, "14219": 65, "15502": 65, "44": [65, 67, 98, 102, 220, 231], "41": [65, 72, 98, 102, 202, 224], "63": [65, 98, 102], "r189": 65, "convolution_theorem": 65, "r190": 65, "333": [65, 102], "555": 65, "222": 65, "666": 65, "15555": 65, "19404": 65, "r191": 65, "r192": 65, "68": [65, 90, 98, 102, 200, 224], "48": [65, 72, 106, 224, 229, 231, 278], "2057": 65, "1870": 65, "r193": 65, "radioeng": 65, "fulltext": 65, "2002": [65, 198, 205, 208], "02_03_40_42": 65, "r194": 65, "r195": 65, "r196": 65, "AND": [65, 92], "327": [65, 227], "r197": 65, "44288293815837": 66, "4429": 66, "4428829381583662470158809900606936986146216893757": 66, "28902548222223624241": 66, "091999668350375232456": 66, "14159265358979": [66, 70, 229], "333333333333333": [66, 201, 223], "1415926535": 66, "7182818284": 66, "100000": [66, 102, 110], "951": 66, "95678796130331164628399634646042209010610577945815": 66, "gmpy": [66, 201, 202, 287], "aleaxit": 66, "100000000000000": 66, "1000000000": 66, "125000000000000000000000000000": 66, "100000000000000005551115123126": 66, "100000000000000000000000000000": 66, "1415": 66, "uncertainti": [66, 181], "003": 66, "31417": 66, "propag": [66, 75, 147, 150], "5000": [66, 105], "50000000000000000000000000000": 66, "varphi": [66, 70, 206, 211, 227], "erron": 66, "34665576869e": 66, "208": [66, 207], "64613129282185e": 66, "60123853010113e": 66, "210": [66, 102, 224], "thousand": [66, 102, 277], "43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875": 66, "binet": 66, "104": 66, "1336": 66, "portion": [66, 78, 93, 98], "meaningless": 66, "012297": 66, "9562288417661": 66, "956": 66, "29128599706266": 66, "2912859970626635404072825905956005414986193682745": 66, "14159265358979323846264338328": 66, "integrand": [66, 70, 86, 87, 89, 221], "struggl": [66, 210], "346": 66, "34635637913639": 66, "dealt": [66, 87], "504067061906928": 66, "50406706190692837199": 66, "wrap_lin": [66, 89, 90, 98, 106, 191, 198, 199, 210, 211, 227], "intgrl": 66, "extrapol": [66, 218], "richardson": [66, 218, 230], "slowli": [66, 218], "64493406684823": 66, "577215664901533": 66, "57721566490153286060651209008240243104215933593992": 66, "10000000": [66, 207], "20000000": [66, 207], "693147255559946": 66, "tune": [66, 90, 191, 211], "worthwhil": 66, "hypergeometr": [66, 67, 80, 86, 87, 205, 222, 223, 227, 229, 231, 268, 288], "ramanujan": [66, 67, 102], "9801": 66, "1103": 66, "26390": 66, "396": [66, 126], "141592653589793238462643383279502884197169399375105820974944592307816406286208": 66, "99862803482534211706798214808651328230664709384460955058223172535940812848111745": 66, "02841027019385211055596446229489549303819644288109756659334461284756482337867831": 66, "355": [66, 102, 205], "113": [66, 102, 224], "33333": [66, 89], "635": 66, "504": [66, 205], "130198866629986772369127970337": 66, "49": [66, 67, 102, 106, 204, 224], "___________": [66, 106, 227], "bell": [67, 160, 213, 249], "k_sym": 67, "binom": [67, 102, 231, 288], "dotsc": [67, 213], "j_1": [67, 155, 156, 173, 196, 213, 232], "j_2": [67, 155, 156, 173, 196, 213], "dotsb": [67, 213], "atop": [67, 70, 213, 221], "2j_2": [67, 213], "3j_2": [67, 213], "j_": [67, 70, 87, 89, 173, 213, 221, 282], "bernoulli": [67, 70, 207, 211, 227, 229, 231], "877": 67, "4140": 67, "21147": 67, "115975": 67, "846749014511809332450147": 67, "luca": [67, 102, 211, 217], "genocchi": [67, 70, 207], "r198": 67, "bell_numb": 67, "r199": 67, "bellnumb": 67, "r200": 67, "bellpolynomi": 67, "hurwitz": [67, 70], "6k": 67, "appel": [67, 70], "confer": [67, 103, 286], "r205": 67, "66": [67, 93, 98, 207, 211], "1000001": 67, "andr": [67, 207], "appellseq": [67, 207], "bernoulli_poli": [67, 207], "r201": 67, "bernoulli_numb": 67, "r202": 67, "bernoulli_polynomi": [67, 207], "r203": 67, "bernoullinumb": 67, "r204": 67, "bernoullipolynomi": 67, "luschni": [67, 70, 207], "manifesto": 67, "r206": 67, "2009": [67, 70, 102, 196, 207], "06743": [67, 70, 207], "_k": [67, 70, 89, 196, 206, 231], "6435": 67, "pascal": [67, 102], "4th": [67, 68, 84, 98, 102, 143], "195": 67, "r207": 67, "johndcook": 67, "binomial_coeffici": [67, 102], "c_n": [67, 70, 91, 207, 227], "429": [67, 211], "1430": 67, "4862": 67, "39764993382373624267": 67, "020884341620842555705": 67, "r208": 67, "catalan_numb": 67, "r209": 67, "catalannumb": [67, 211], "r210": 67, "r211": 67, "geomet": [67, 198], "mathcircl": 67, "2j": [67, 204, 231], "1385": [67, 207], "272": [67, 207], "7936": [67, 207], "2702765": 67, "4096": 67, "euler_poli": [67, 207], "r212": 67, "euler_numb": 67, "r213": 67, "eulernumb": 67, "r214": 67, "alternating_permut": 67, "r215": 67, "alternatingpermut": 67, "swing": 67, "factorial2": [67, 177, 211], "fallingfactori": [67, 211], "subfactori": [67, 211, 249], "derang": [67, 249], "r217": 67, "generate_derang": [67, 249], "r216": 67, "r218": 67, "double_factori": 67, "texttt": [67, 219], "r219": 67, "r220": 67, "paul": [67, 246], "235": 67, "268": 67, "1995": [67, 205, 223, 229], "f_z": [67, 192, 263], "f_2": [67, 87, 112, 122, 125, 144, 204, 221, 227], "r222": 67, "fibonacci_numb": 67, "r223": 67, "fibonaccinumb": 67, "t_0": [67, 224], "149": [67, 102], "r224": 67, "r225": 67, "tribonaccinumb": 67, "r226": 67, "oei": [67, 70, 102, 207], "a000073": 67, "137": [67, 98, 114], "205": [67, 87, 221], "5269": 67, "761": 67, "280": 67, "83711": 67, "27720": 67, "30247": 67, "9900": 67, "983697455232980674869851942390639915940": 67, "r227": 67, "harmonic_numb": 67, "r228": 67, "harmonicnumb": [67, 211], "r229": 67, "harmonicnumber2": 67, "l_0": [67, 113, 237, 238], "47": [67, 70, 98, 102, 114, 149, 181, 210], "76": [67, 70, 98, 102, 204, 207], "r230": 67, "lucas_numb": 67, "r231": 67, "lucasnumb": 67, "2t": 67, "genocchi_poli": [67, 207], "r232": 67, "genocchi_numb": 67, "r233": 67, "genocchinumb": 67, "r234": 67, "mathcal": [67, 68, 87, 112, 141, 173, 196, 207, 219], "a000111": [67, 207], "zigzag": 67, "li": [67, 70, 78, 89, 102, 176, 211, 266], "50521": [67, 207], "691": 67, "2730": 67, "andre_poli": [67, 207], "r235": 67, "r236": 67, "eulerzigzagnumb": 67, "r237": 67, "irrelev": 67, "r238": 67, "number_theori": 67, "r239": 67, "pentagonal_number_theorem": 67, "multifactori": 67, "pochhamm": [67, 211, 223], "r240": 67, "r241": 67, "pochhammer_symbol": 67, "274": 67, "225": [67, 102, 205], "511": 67, "9330": 67, "34105": 67, "42525": 67, "22827": 67, "5880": 67, "750": 67, "r242": 67, "stirling_numbers_of_the_first_kind": 67, "r243": 67, "stirling_numbers_of_the_second_kind": 67, "multiset": [67, 87, 246, 249], "nc": 67, "nt": [67, 249], "babi": [67, 102, 249], "aa": [67, 196], "bb": [67, 196, 223, 249], "multiset_combin": [67, 249], "aab": [67, 249], "aabc": 67, "aaaabbbbcccc": 67, "m_1": [67, 112, 155, 173, 196, 224], "m_2": [67, 125, 144, 155, 173, 196], "m_k": 67, "r244": 67, "r245": 67, "tinyurl": 67, "cep849r": 67, "ba": [67, 249], "multiset_permut": [67, 249], "r246": 67, "aabbc": 67, "mississippi": [67, 249], "609": 67, "1521": 67, "1768": 67, "1224": [67, 102], "579": 67, "197": 67, "r247": 67, "20210507012732": 67, "csse": 67, "uwa": 67, "au": 67, "cits7209": 67, "707106781186548": 68, "tangent": [68, 72, 74, 78, 89, 208, 227], "643501108793284": 68, "r248": 68, "ib": [68, 131], "complex_conjug": 68, "polar_lift": [68, 70, 223], "periodic_argu": 68, "principal_branch": [68, 87], "r252": 68, "csc": [68, 104, 211, 220], "sec": [68, 89, 110, 206, 211, 220, 288], "acsc": [68, 211], "asec": [68, 211], "acot": [68, 211], "r249": 68, "trigonometric_funct": 68, "r250": 68, "r251": 68, "elementaryfunct": 68, "trigonometryangl": 68, "r253": 68, "r254": 68, "r255": 68, "r256": 68, "r257": 68, "r258": 68, "cotang": [68, 208], "r259": 68, "r260": 68, "r261": 68, "secant": [68, 207], "r262": 68, "r263": 68, "r264": 68, "cosec": 68, "r265": 68, "r266": 68, "r267": 68, "unnorm": [68, 70], "qquad": [68, 181, 204], "jn": [68, 70, 173, 207, 211, 282], "spheric": [68, 114, 120, 155, 196, 197, 207, 256, 260, 261, 282], "r268": 68, "sinc_funct": 68, "asinh": [68, 211], "r269": 68, "inverse_trigonometric_funct": 68, "r270": 68, "r271": 68, "r272": 68, "r273": 68, "r274": 68, "r275": 68, "r276": 68, "r277": 68, "arctan": [68, 208, 211], "acoth": [68, 211], "r278": 68, "r279": 68, "arccot": [68, 211], "r283": 68, "r280": 68, "r281": 68, "r282": 68, "arcsec": [68, 211], "r284": 68, "r285": 68, "r286": 68, "arccsc": [68, 211], "quadrant": [68, 202, 230], "clock": [68, 220], "reurn": 68, "r287": 68, "r288": 68, "r289": 68, "arctan2": [68, 211], "hyperbolicfunct": 68, "coth": [68, 211, 223], "acosh": [68, 211], "atanh": [68, 208, 211, 221], "sech": [68, 211], "csch": [68, 211], "asech": [68, 211], "r290": 68, "hyperbolic_funct": 68, "r291": 68, "r292": 68, "arcsech": [68, 211], "acsch": [68, 211], "r293": 68, "r294": 68, "r295": 68, "arccsch": [68, 211], "567": 68, "r296": 68, "r297": 68, "ceilingfunct": 68, "r298": 68, "r299": 68, "floorfunct": 68, "roundfunct": 68, "r300": 68, "lfloor": [68, 202, 230, 231], "rfloor": [68, 202, 230, 231], "fractional_part": 68, "r301": 68, "fractionalpart": 68, "lambertw": [68, 208, 211, 229, 230, 289], "r302": 68, "w_k": 68, "635564016364870": 68, "34747534407696": 68, "41624341514535": 68, "lambert_w_funct": 68, "exprcondpair": 68, "cond": [68, 87, 89, 219], "piecewise_fold": 68, "folded_cond": 68, "ITE": [68, 92, 211], "piecewise_exclus": 68, "_eval_integr": [68, 89], "piecewise_integr": 68, "as_expr_set_pair": 68, "skip_nan": 68, "mutual": [68, 87, 195], "conjunct": [68, 92, 197, 221, 242, 288], "identityfunct": 68, "supremum": [68, 219], "r303": 68, "directed_complete_partial_ord": 68, "r304": 68, "lattice_": 68, "28order": 68, "global_paramet": 68, "real_root": [68, 207, 229], "rootoftool": [68, 98, 207], "r305": 68, "square_root": 68, "r306": 68, "r307": 68, "root_of_un": 68, "r308": 68, "principal_valu": [68, 89], "r309": 68, "cuberoot": 68, "powdenest": [68, 223], "misc": [68, 93, 252], "r310": 68, "r311": 68, "r312": 68, "cube_root": 68, "r313": 68, "delta_funct": [70, 89], "int_": [70, 86, 87, 89, 207, 214, 278, 282], "sum_i": [70, 218], "is_simpl": 70, "tensor_funct": 70, "kroneckerdelta": [70, 95, 176, 211, 223], "r314": 70, "deltafunct": [70, 89], "h0": 70, "electron": [70, 114, 220], "signal": [70, 92, 102, 110, 112, 143, 204, 283], "improp": [70, 89], "convolut": [70, 213], "r315": 70, "heavisidestepfunct": 70, "r316": 70, "iv": [70, 208], "105": [70, 102, 207, 224], "parg": 70, "singularity_funct": 70, "singularityfunct": [70, 89, 105], "macaulai": 70, "heavisidediracdelta": 70, "r317": 70, "r318": 70, "r319": 70, "r320": 70, "r321": 70, "setminu": [70, 87], "17805383034794561964694160130": 70, "65092319930185633889": 70, "8724366472624298171": 70, "r322": 70, "r323": 70, "r324": 70, "loggammafunct": 70, "r325": 70, "espinosa": 70, "moll": 70, "r330": 70, "19093197": 70, "5173168": 70, "ni": [70, 102], "r326": 70, "polygamma_funct": 70, "r327": 70, "polygammafunct": 70, "r328": 70, "r329": 70, "polygamma2": 70, "2004": [70, 205, 224], "115": 70, "r331": 70, "digamma_funct": 70, "r332": 70, "digammafunct": 70, "r333": 70, "r334": 70, "trigamma_funct": 70, "r335": 70, "trigammafunct": 70, "r336": 70, "int_x": 70, "_1f_1": 70, "confluent": [70, 221], "xt": 70, "expint": [70, 211], "r337": 70, "incomplete_gamma_funct": 70, "upper_incomplete_gamma_funct": 70, "r338": 70, "r339": 70, "r340": 70, "gamma2": 70, "r341": 70, "gamma3": 70, "r342": 70, "exponential_integr": 70, "relation_with_other_funct": 70, "int_0": [70, 87, 89, 278, 288], "r343": 70, "lower_incomplete_gamma_funct": 70, "r344": 70, "r345": 70, "r346": 70, "r347": 70, "multigamma": 70, "gamma_p": 70, "r348": 70, "multivariate_gamma_funct": 70, "beta_funct": 70, "eulerian": 70, "02671848900111377452242355235388489324562": 70, "2112723729365330143": 70, "7655283165378005676": 70, "r349": 70, "r350": 70, "betafunct": 70, "r351": 70, "error_funct": 70, "999999984582742099719981147840": 70, "1296959": 70, "73071763923152794095062": 70, "r352": 70, "r353": 70, "r354": 70, "r355": 70, "0000000154172579002800188521596734869": 70, "r356": 70, "r357": 70, "r358": 70, "r359": 70, "5648024145755525987042919132": 70, "995322265018952734162069256367": 70, "r360": 70, "r361": 70, "r362": 70, "r363": 70, "179143454621291692285822705344": 70, "r364": 70, "inverse_funct": 70, "r365": 70, "inverseerf": [70, 211], "r366": 70, "r367": 70, "inverseerfc": [70, 211], "r368": 70, "inverseerf2": 70, "fresnelintegr": 70, "343415678363698242195300815958": 70, "fresnelc": [70, 211, 221], "r369": 70, "fresnel_integr": 70, "r370": 70, "r371": 70, "r372": 70, "r373": 70, "wrench": 70, "jr": 70, "vicki": 70, "allei": 70, "488253406075340754500223503357": 70, "r374": 70, "r375": 70, "r376": 70, "r377": 70, "r378": 70, "background": [70, 90, 191, 194, 286], "cauchi": [70, 87, 89, 202, 227, 231], "219383934395520": 70, "21938393439552": 70, "shi": [70, 87, 211, 221], "e1": [70, 72, 79, 126, 201, 206, 218, 227, 230], "hyperbol": [70, 208, 230, 284, 288], "r379": 70, "r380": 70, "r381": 70, "20201128173312": 70, "sfu": [70, 89], "cbm": [70, 89], "aand": [70, 89], "page_228": 70, "int_1": [70, 87], "zt": [70, 87], "unbranch": [70, 87], "meijerg": [70, 81, 87, 89, 211, 231, 288], "postiv": 70, "r382": 70, "r383": 70, "expintegral": [70, 211], "r384": 70, "04516378011749278484458888919": 70, "0652795784357498247001125598": 70, "08346052231061726610939702133": 70, "soldner": 70, "45136923488338": 70, "r385": 70, "logarithmic_integr": 70, "r386": 70, "logarithmicintegr": 70, "r387": 70, "r388": 70, "soldnersconst": 70, "92242131492155809316615998938": 70, "r389": 70, "r390": 70, "r391": 70, "r392": 70, "trigonometric_integr": 70, "_1": [70, 98, 120, 186, 196, 221, 250], "somewhat": [70, 89, 126, 202], "r393": 70, "r394": 70, "r395": 70, "laurent": [70, 202, 208, 227], "j_n": [70, 173], "r396": 70, "r397": 70, "r398": 70, "r399": 70, "yn": [70, 211, 217], "r400": 70, "i_": [70, 87, 221, 231, 232], "iz": 70, "r401": 70, "k_": [70, 87, 121, 138, 139], "r402": 70, "hankel1": [70, 211], "hankel": [70, 89], "iy_": 70, "hankel2": [70, 211], "r403": 70, "hankelh1": [70, 211], "r404": 70, "hankelh2": [70, 211], "orthopoli": [70, 207], "spherical_bessel_fn": [70, 207], "3j": [70, 155, 196], "099419756723640344491": 70, "054525080242173562897": 70, "r405": 70, "y_n": [70, 224], "18525034196069722536": 70, "014895573969924817587": 70, "r406": 70, "jn_zero": 70, "besseljzero": 70, "sph_jn": 70, "7635": 70, "095": 70, "515": 70, "marcumq": 70, "marcum": 70, "q_m": 70, "r407": 70, "marcum_q": 70, "r408": 70, "airybas": 70, "airyai": [70, 211, 227], "ai": [70, 102, 207, 224, 233, 252, 288], "airyaiprim": [70, 211], "22740742820168557599192443603787379946077222541710": 70, "airybi": [70, 211, 227], "airybiprim": [70, 211], "r409": 70, "airy_funct": 70, "r410": 70, "r411": 70, "encyclopediaofmath": 70, "r412": 70, "airyfunct": 70, "41230258795639848808323405461146104203453483447240": 70, "r413": 70, "r414": 70, "r415": 70, "r416": 70, "61825902074169104140626429133247528291577794512415": 70, "r417": 70, "r418": 70, "r419": 70, "r420": 70, "27879516692116952268509756941098324140300059345163": 70, "r421": 70, "r422": 70, "r423": 70, "r424": 70, "bspline": 70, "bspline_basi": 70, "knot": 70, "bspline_basis_set": 70, "r425": 70, "interpolating_splin": 70, "131": [70, 186], "39": [70, 102, 210], "interpolating_poli": [70, 207], "zeta_funct": 70, "admit": [70, 227], "lerch": 70, "transcend": 70, "lerchphi": [70, 211], "dirichlet_eta": [70, 211], "20205690315959": 70, "polylog": [70, 211], "r426": 70, "r427": 70, "hurwitz_zeta_funct": 70, "r428": 70, "dirichlet_eta_funct": 70, "r429": 70, "polylogarithm": 70, "sheet": [70, 220], "phi_0": 70, "ze": 70, "r430": 70, "bateman": [70, 89], "erdelyi": [70, 89], "1953": [70, 206], "york": [70, 87, 142, 221, 229], "mcgraw": [70, 89, 121, 142, 186, 193, 256], "r431": 70, "r432": 70, "lerch_transcend": 70, "stieltj": [70, 211], "gamma_": [70, 113, 115], "r433": 70, "stieltjes_const": 70, "ap": [70, 74, 221], "bq": [70, 199, 200, 221], "a_p": [70, 87, 221, 288], "b_q": [70, 87, 221, 288], "_pf_q": [70, 221, 227, 288], "unicod": [70, 90, 98, 191, 211, 242, 282], "r434": 70, "r435": 70, "generalized_hypergeometric_funct": 70, "convergence_stat": 70, "radius_of_converg": 70, "radiu": [70, 72, 76, 78, 133, 135, 145, 149, 197, 230, 231, 266], "meijer": [70, 80, 88, 89, 268, 278, 288], "mellin": [70, 89], "barn": 70, "b_m": [70, 87, 229], "confusingli": 70, "int_l": [70, 87, 221], "contour": [70, 72, 87, 197, 221], "__1": 70, "subvector": 70, "aother": 70, "bm": 70, "bother": [70, 283], "slater": [70, 221], "allow_hyp": [70, 223], "subsum": 70, "r436": 70, "r437": 70, "meijer_g": 70, "get_period": [70, 87], "appellf1": [70, 211], "0063339426292673": 70, "172870711": 70, "659936": 70, "15605338197184": 70, "r438": 70, "appell_seri": 70, "r439": 70, "hypergeometricfunct": 70, "elliptic_integr": 70, "elliptic_k": [70, 211], "tfrac": [70, 227, 231], "eccentr": [70, 72], "50923695405127": 70, "625146415202697": 70, "elliptic_f": [70, 211], "r440": 70, "r441": 70, "ellipticintegr": 70, "elliptick": [70, 211], "909449841483": 70, "74720545502474": 70, "r442": 70, "r443": 70, "ellipticf": 70, "elliptic_": [70, 72, 211], "55203744279187": 70, "290764986058437": 70, "991052601328069": 70, "81879421395609": 70, "r444": 70, "r445": 70, "elliptice2": 70, "r446": 70, "elliptic": [70, 211], "elliptic_pi": [70, 211], "50232379629182": 70, "760939574180767": 70, "29136443417283": 70, "32555634906645": 70, "r447": 70, "r448": 70, "ellipticpi3": 70, "r449": 70, "ellipticpi": [70, 211], "mathieu_funct": 70, "mathieubas": 70, "mathieusprim": [70, 211], "mathieuc": [70, 211], "mathieucprim": [70, 211], "r450": 70, "r451": 70, "r452": 70, "mathieufunct": 70, "r453": 70, "mathieuandspheroidalfunct": 70, "r454": 70, "r455": 70, "r456": 70, "r457": 70, "r458": 70, "r459": 70, "r460": 70, "r461": 70, "r462": 70, "r463": 70, "r464": 70, "r465": 70, "chebyshevu": [70, 211], "chebyshevt_root": 70, "chebyshevu_root": 70, "assoc_legendr": [70, 211], "hermite_prob": 70, "jacobi_poli": [70, 207], "gegenbauer_poli": [70, 207], "chebyshevt_poli": [70, 207], "chebyshevu_poli": [70, 207], "hermite_poli": [70, 207], "legendre_poli": [70, 207], "laguerre_poli": [70, 207], "r466": 70, "jacobi_polynomi": 70, "r467": 70, "jacobipolynomi": 70, "r468": 70, "jacobip": [70, 211], "jacobi_norm": 70, "normilz": 70, "p_m": 70, "delta_": [70, 173, 181, 196], "r469": 70, "r470": 70, "r471": 70, "hermite_prob_poli": [70, 207], "r472": 70, "gegenbauer_polynomi": 70, "r473": 70, "gegenbauerpolynomi": 70, "r474": 70, "gegenbauerc3": 70, "r475": 70, "chebyshev_polynomi": 70, "r476": 70, "chebyshevpolynomialofthefirstkind": 70, "r477": 70, "chebyshevpolynomialofthesecondkind": 70, "r478": 70, "r479": 70, "u_n": [70, 89, 204, 206, 207], "r480": 70, "r481": 70, "r482": 70, "r483": 70, "r484": 70, "chebyshev_root": 70, "r485": 70, "legendre_polynomi": 70, "r486": 70, "legendrepolynomi": 70, "r487": 70, "legendrep": [70, 211], "r488": 70, "legendrep2": 70, "r489": 70, "associated_legendre_polynomi": 70, "r490": 70, "r491": 70, "r492": 70, "r493": 70, "hermite_polynomi": 70, "r494": 70, "hermitepolynomi": 70, "r495": 70, "hermiteh": [70, 211], "probabilist": [70, 207, 231], "he_n": [70, 207], "telephon": 70, "a000085": 70, "232": 70, "764": 70, "2620": 70, "9496": 70, "r496": 70, "r497": 70, "l_n": [70, 89, 207], "r498": 70, "laguerre_polynomi": 70, "r499": 70, "laguerrepolynomi": 70, "r500": 70, "laguerrel": [70, 211], "r501": 70, "laguerrel3": 70, "r502": 70, "generalized_laguerre_polynomi": 70, "r503": 70, "associatedlaguerrepolynomi": 70, "r504": 70, "r505": 70, "spherical_harmon": 70, "ynm": [70, 196], "ynm_c": 70, "znm": 70, "r506": 70, "r507": 70, "sphericalharmon": 70, "r508": 70, "sphericalharmonici": 70, "r509": 70, "r510": 70, "r511": 70, "r512": 70, "z_n": [70, 205], "r513": 70, "r514": 70, "r515": 70, "eijk": 70, "levicivita": [70, 98], "eval_levicivita": 70, "pseudotensor": 70, "delta_rang": [70, 176], "kroneck": [70, 175, 176, 196, 232, 237], "r516": 70, "kronecker_delta": [70, 176], "indices_contain_equal_inform": [70, 176], "fermi": [70, 176], "above_fermi": [70, 176], "below_fermi": [70, 176], "is_above_fermi": [70, 176], "is_below_fermi": [70, 176], "is_only_below_fermi": [70, 176], "is_only_above_fermi": [70, 176], "killable_index": [70, 176], "preferred_index": [70, 176], "point2d": [71, 72, 73, 74, 75, 77, 78, 79], "arbitrary_point": [71, 72, 73, 74, 75, 76, 78], "polyfunc": [71, 202, 207], "ambient_dimens": [71, 73, 75, 77], "plot_interv": [71, 72, 75, 78], "lower_bound": [71, 72, 75, 78], "upper_bound": [71, 72, 75, 78], "counterclockwis": [71, 72, 73, 77, 98, 105, 106], "scale": [71, 72, 73, 77, 78, 79, 90, 105, 156, 177, 179, 180, 181, 183, 184, 191, 195, 197, 207, 214, 231, 263, 265], "geometryent": [71, 72, 73, 75, 77, 78, 79], "hradiu": 72, "vradiu": 72, "ellipt": [72, 102, 198], "geometryerror": [72, 75, 78, 79], "radii": 72, "foci": 72, "periapsi": 72, "apoapsi": 72, "focus_dist": 72, "shortest": [72, 75, 78, 194, 217, 223, 227, 249], "auxiliary_circl": 72, "xmin": [72, 73, 75, 77, 78, 197], "ymin": [72, 73, 75, 77, 78, 197], "xmax": [72, 73, 75, 77, 78, 197], "ymax": [72, 73, 75, 77, 78, 197], "rectangl": [72, 73, 75, 77, 78, 197, 207], "director_circl": 72, "perpendicular": [72, 75, 76, 78, 91, 120, 134, 149, 195], "director": 72, "130": 72, "r517": 72, "encloses_point": [72, 73, 78], "border": [72, 78], "_slope": 72, "slope": [72, 73, 75, 78, 105, 106, 110, 120], "r518": 72, "108270": 72, "r519": 72, "shifted_ellips": 72, "evolut": 72, "focal": [72, 145, 149], "100500": 72, "363": [72, 102, 205], "175": [72, 98, 204, 205], "is_tang": [72, 74], "tangent_lin": 72, "normal_lin": 72, "line2d": [72, 75, 78], "2020": [72, 155], "polar_second_moment_of_area": [72, 78], "moment": [72, 78, 105, 106, 128, 136, 139, 185, 197, 207, 224, 231], "constitu": [72, 78, 123, 186, 217, 256], "planar": [72, 78, 106, 120, 149], "resist": [72, 78, 105, 106, 220], "deflect": [72, 78, 105, 106], "bend": [72, 78, 105, 107, 273], "r520": 72, "polar_moment_of_inertia": [72, 78], "random_point": [72, 75, 76], "arb": 72, "364": 72, "notimpl": [72, 206], "second_moment_of_area": [72, 78], "centroid": [72, 78, 79, 105], "i_xx": [72, 78], "i_yi": [72, 78], "i_xi": [72, 78], "ellis": 72, "r521": 72, "list_of_second_moments_of_area": 72, "section_modulu": [72, 78], "sympify": [72, 78, 105, 108, 117, 123, 147, 150, 188], "farthest": [72, 78], "s_x": [72, 78], "s_y": [72, 78], "r522": 72, "semilatus_rectum": 72, "semi": [72, 75, 102], "latu": 72, "rectum": 72, "chord": 72, "conic": [72, 224, 256], "directrix": 72, "r523": 72, "semilatusrectum": 72, "r524": 72, "latus_rectum": 72, "collinear": [72, 74, 76, 77, 78, 197], "gx": 72, "hy": 72, "synonym": [72, 206], "p4": [72, 75, 77, 78, 197], "t2": [73, 78, 79, 102, 117, 123, 224, 231, 237], "ordering_of_class": 73, "is_similar": [73, 75, 78, 79], "uniform": [73, 197, 229, 231], "enlarg": 73, "shrink": [73, 87], "parameter_valu": [73, 76], "pent": 73, "rpent": 73, "rcirc": 73, "entity1": 74, "entity2": 74, "zp": 74, "is_collinear": [74, 77], "segment2d": [74, 75, 78, 79], "wikipappu": 74, "subs_point": 74, "p11": 74, "p12": 74, "p13": 74, "p21": 74, "p22": 74, "p23": 74, "ll1": 74, "ll2": 74, "ll3": 74, "ll4": 74, "ll5": 74, "ll6": 74, "pp1": 74, "pp2": 74, "pp3": 74, "encyclopedia": [74, 193], "apr": 74, "s_hexagon_theorem": 74, "clockwis": [74, 89, 93, 98, 105, 106, 108], "overlap": [74, 79, 101, 198, 219, 252], "infanc": 74, "geometryresult": 74, "fair": [74, 231], "angle_between": [75, 76, 78, 186], "reflex": 75, "eman": 75, "readili": [75, 98], "sw": 75, "obtus": 75, "smallest_angle_between": 75, "point3d": [75, 76, 77, 149], "line3d": [75, 76, 77], "is_perpendicular": [75, 76, 77, 78], "ray2d": [75, 78], "closing_angl": 75, "are_concurr": [75, 76], "concurr": [75, 76, 208], "l3": [75, 129, 204], "l4": [75, 129], "bisector": [75, 78], "p5": [75, 77, 78, 197], "p6": [75, 78, 197], "p7": [75, 78, 197], "segment3d": [75, 76], "direction_ratio": [75, 77], "is_parallel": [75, 76], "parallel_lin": 75, "perpendicular_lin": [75, 76], "perpendicular_seg": 75, "reform": 75, "92": [75, 205, 227, 231, 249], "ccw": [75, 78], "ray3d": [75, 76, 149], "xdirect": 75, "ydirect": 75, "midpoint": [75, 77, 78, 89, 197, 262], "170": [75, 231], "341": 75, "perpendicular_bisector": 75, "linearentity2d": 75, "linearentity3d": [75, 76], "direction_cosin": [75, 77], "zdirect": 75, "normal_vector": [76, 149], "proce": [76, 140, 204, 206, 221, 229], "147": 76, "321": 76, "is_coplanar": 76, "perpendicualar": 76, "parallel_plan": 76, "on_circl": 76, "off_circl": 76, "perpendicular_plan": 76, "pt1": 76, "projection_lin": 76, "on_morph": 77, "affine_rank": 77, "are_coplanar": 77, "canberra_dist": 77, "canberra": 77, "geometricent": 77, "taxicab_dist": 77, "is_concycl": 77, "concycl": 77, "fewer": [77, 78, 140, 231, 278], "is_scalar_multipl": 77, "ambient": 77, "orthogonal_direct": 77, "taxicab": 77, "_nocheck": 77, "are_collinear": 77, "unrot": 78, "circumscrib": 78, "spin": [78, 114, 128, 162, 163, 171, 273], "perimet": 78, "contact": [78, 128, 132, 133, 134, 135, 194, 235], "38": [78, 98, 102, 211, 224, 226, 231], "cut_sect": 78, "upper_polygon": 78, "lower_polygon": 78, "upper_seg": 78, "lower_seg": 78, "r525": 78, "r526": 78, "paulbourk": 78, "polygonmesh": 78, "insidepoli": 78, "first_moment_of_area": 78, "q_x": [78, 194], "q_y": [78, 194], "625": [78, 266], "3125": [78, 231], "525": 78, "3000": [78, 105], "r527": 78, "skyciv": 78, "beam": [78, 108, 145, 148, 273], "bmd": 78, "r528": 78, "mechanicalc": 78, "poly1": 78, "poly2": 78, "interior": [78, 207, 219], "180": [78, 195, 205], "r529": 78, "r530": 78, "r531": 78, "apothem": 78, "interior_angl": 78, "exterior_angl": 78, "circumcircl": 78, "incircl": 78, "inradiu": 78, "inscrib": 78, "circumcent": 78, "circumradiu": 78, "leg": 78, "square_in_unit_circl": 78, "kite": 78, "asa": 78, "sa": [78, 207], "sss": 78, "altitud": 78, "orthocent": 78, "exradii": 78, "median": [78, 231], "medial": 78, "nine_point_circl": 78, "straight": [78, 84, 110, 130, 194, 227], "eulerlin": 78, "equilater": 78, "coincid": [78, 98, 101, 120, 126, 198, 256, 261, 280], "excent": 78, "excircl": 78, "touch": [78, 128, 220], "r532": 78, "ly": [78, 98, 202], "exradiu": 78, "r533": 78, "r534": 78, "incent": 78, "is_equilater": 78, "is_isoscel": 78, "is_right": 78, "is_scalen": 78, "nine": [78, 211], "feet": 78, "real_num": 79, "hull": 79, "r535": 79, "graham_scan": 79, "r536": 79, "andrew": 79, "1979": [79, 181], "20210511015444": 79, "geomalgorithm": 79, "a10": 79, "_hull": 79, "t3": [79, 224], "averag": [79, 89, 102, 204, 231], "qq": [80, 81, 83, 84, 85, 89, 198, 199, 200, 201, 204, 206, 207, 208], "p_r": 80, "holonomic_funct": 80, "from_hyp": [81, 84], "holonomicfunct": [81, 84, 85], "from_meijerg": [81, 84], "initcond": [81, 83, 84], "expr_to_holonom": [81, 84, 85, 86], "lenic": [81, 83], "ground": [81, 120, 128, 132, 133, 134, 135, 198, 201, 202, 204, 206, 207, 229, 287], "meijerint": [81, 83, 87, 89], "_rewrite1": [81, 87], "_convert_poly_rat_alg": [81, 83], "_create_t": [81, 83], "_create_lookup_t": [83, 87], "differentialoper": [84, 85, 165], "old_poly_r": [84, 85, 198, 201, 202], "to_expr": [84, 85, 86, 112], "to_sequ": 84, "n_0": [84, 204, 229, 230], "indici": [84, 85, 86, 227], "c_j": [84, 87, 221], "holonomicsequ": 84, "r537": 84, "hal": 84, "inria": [84, 89], "fr": [84, 89, 102, 121, 126, 128, 130, 133, 134, 138, 140, 143, 231], "00070025": 84, "r538": 84, "www3": [84, 227, 256], "risc": [84, 227, 256], "jku": [84, 227, 256], "risc_2244": 84, "diplform": 84, "_recur": 84, "rk4": 84, "71828182845905": 84, "10517083333333": 84, "22140257085069": 84, "34985849706254": 84, "49182424008069": 84, "64872063859684": 84, "82211796209193": 84, "01375162659678": 84, "22553956329232": 84, "45960141378007": 84, "71827974413517": 84, "331": 84, "4641": 84, "61051": 84, "771561": 84, "9487171": 84, "14358881": 84, "357947691": 84, "5937424601": 84, "to_hyp": 84, "as_list": [84, 207], "to_meijerg": 84, "1_0": 85, "1_1": 85, "0_0": 85, "0_1": 85, "list_of_poli": 85, "weyl": [85, 91], "differentialoperatoralgebra": 85, "Ore": 85, "dxa": 85, "endomorph": [85, 206], "frobeniu": [86, 98, 102, 204, 205], "subtleti": 87, "recast": [87, 223, 229, 230], "branchpoint": 87, "crude": [87, 128, 197], "decre": 87, "biholomorph": 87, "topologi": [87, 219], "neighbourhood": 87, "evid": [87, 121, 134, 221, 233], "peculiar": [87, 195], "_split_mul": 87, "_mytyp": 87, "inequival": 87, "_mul_as_two_part": 87, "twist": 87, "recognis": [87, 201, 221, 223], "anywai": [87, 223, 227], "analyitc": 87, "_rewrite_singl": 87, "_rewrite2": 87, "_rewrite_saxena_1": 87, "_rewrite_saxena": 87, "blogpost": 87, "remedi": 87, "exploit": [87, 243], "transpar": [87, 90, 191], "nessgrh": 87, "wordpress": [87, 224], "07": 87, "stade": 87, "c_u": 87, "d_1": [87, 181, 207, 231], "d_v": 87, "amalgam": 87, "prudnikov1990": [87, 221], "luke1969": [87, 221], "visibl": [87, 197], "fulfil": [87, 196], "vee": [87, 92], "lceil": 87, "rceil": 87, "d_j": [87, 181, 221], "lambda_c": [87, 139], "lambda_": 87, "z_0": [87, 223], "z_1": 87, "a_i": [87, 181, 186, 195, 199, 204, 221], "c_5": 87, "c_6": 87, "c_7": 87, "c_8": 87, "lvert": 87, "rvert": 87, "c_9": 87, "versatil": 87, "bz": [87, 224, 237], "deform": [87, 106], "encircl": 87, "appeal": 87, "fox": 87, "obstacl": 87, "identif": [87, 230], "domin": [87, 93, 216, 218], "iT": 87, "omega_": 87, "disguis": 87, "meijerint_indefinit": 87, "meijerint_definit": 87, "meijerint_invers": 87, "kelli": [87, 221], "roach": [87, 221], "211": [87, 102, 207, 221, 227], "prudnikov": [87, 221], "yu": [87, 196, 221], "brychkov": [87, 221], "marichev": [87, 221], "gordon": [87, 155, 221], "breach": [87, 221], "_coeffexpvalueerror": 87, "_get_coeff_exp": 87, "_check_anteced": 87, "_check_antecedents_1": 87, "mt": 87, "_check_antecedents_invers": 87, "anteced": [87, 218], "_condsimp": 87, "hoc": 87, "simp": [87, 128, 186], "_dummi": 87, "_dummy_": 87, "_eval_cond": 87, "_expon": 87, "_find_splitting_point": 87, "fsp": 87, "_flip_g": 87, "_function": 87, "_guess_expans": 87, "sensibl": [87, 89], "_inflate_fox_h": 87, "_inflate_g": 87, "_int0oo": 87, "_int0oo_1": 87, "_int_invers": 87, "_is_analyt": 87, "_meijerint_definite_2": 87, "trigexpand": 87, "_meijerint_definite_3": 87, "_meijerint_definite_4": 87, "only_doubl": 87, "_meijerint_indefinite_1": 87, "_mul_arg": 87, "_my_principal_branch": 87, "full_pb": 87, "nearer": 87, "superflu": 87, "opaqu": [87, 211], "fac": 87, "_rewrite_invers": 87, "costli": [87, 130, 284], "tx": [87, 286], "happili": [89, 235], "nonelementari": 89, "mellin_transform": 89, "bilater": 89, "laplac": [89, 109, 110, 112, 231], "mellintransform": 89, "integraltransform": 89, "nocond": 89, "inverse_mellin_transform": 89, "laplace_transform": [89, 112], "fourier_transform": 89, "hankel_transform": 89, "inverse_hankel_transform": 89, "suitabl": [89, 95, 104, 196, 199, 201, 204, 206, 211, 221, 224, 227, 230, 232, 281], "inversemellintransform": 89, "laplacetransform": 89, "inverse_laplace_transform": 89, "r539": 89, "prooject": 89, "1954": 89, "caltech": 89, "caltechauthor": 89, "20140123": 89, "101456353": 89, "singularit": [89, 140], "inverselaplacetransform": 89, "fouriertransform": 89, "_fourier_transform": 89, "inverse_fourier_transform": 89, "sine_transform": 89, "inverse_sine_transform": 89, "cosine_transform": 89, "inverse_cosine_transform": 89, "bixk": 89, "inversefouriertransform": 89, "sinetransform": 89, "inversesinetransform": 89, "cosinetransform": 89, "inversecosinetransform": 89, "hankeltransform": 89, "ht": 89, "inversehankeltransform": 89, "_compute_transform": 89, "_as_integr": 89, "integraltransformerror": 89, "_name": 89, "_collapse_extra": 89, "needev": 89, "function_vari": 89, "transform_vari": 89, "lazard": [89, 204, 207], "rioboo": 89, "trager": 89, "horowitz": 89, "ostrogradski": 89, "ratint": 89, "rationaltool": [89, 207], "ratint_logpart": 89, "ratint_ratpart": 89, "r540": 89, "bronstein": [89, 205, 207, 213, 229], "verlag": [89, 205], "deg": [89, 110, 126, 199, 204, 206, 207], "q_i": [89, 122, 140], "_t": [89, 126, 129, 143, 176, 185, 186, 190, 221, 231], "trigintegr": 89, "trigonometri": 89, "r541": 89, "integration_techniqu": 89, "deltaintegr": 89, "couldn": 89, "didn": [89, 98, 140], "singularityintegr": 89, "risch_integr": 89, "nonelementaryintegr": 89, "proven": [89, 102, 262, 280], "handle_first": 89, "separate_integr": 89, "rewrite_complex": 89, "forthcom": 89, "5109": 89, "pop": [89, 224], "manualintegr": 89, "integral_step": 89, "student": [89, 220, 224, 231], "rootsum": [89, 207, 213], "_i": [89, 176, 181, 208], "substep": 89, "sympy_gamma": 89, "blob": 89, "app": 89, "intstep": 89, "urul": 89, "u_var": 89, "_u": [89, 176], "u_func": 89, "arctanrul": 89, "sinrul": 89, "rewriterul": 89, "addrul": 89, "powerrul": 89, "constanttimesrul": 89, "constantrul": 89, "norman": 89, "retri": [89, 102], "degree_offset": 89, "unnecessary_permut": 89, "_try_heurisch": 89, "manuel": [89, 216], "poor": [89, 103], "man": [89, 205], "airi": [89, 227], "whittak": 89, "r542": 89, "sop": [89, 92], "cafe": 89, "pmint": 89, "r543": 89, "gedd": [89, 205], "stefanu": 89, "217": [89, 205], "r544": 89, "davenport": [89, 204, 205], "eurocam": 89, "lnc": [89, 205, 229], "157": [89, 102, 106, 205], "r545": 89, "iii": [89, 211, 227], "sigsam": 89, "bulletin": 89, "1982": [89, 196], "r546": 89, "transact": [89, 205], "1985": [89, 121, 142, 186, 256], "356": [89, 206, 229], "362": 89, "lookup": [89, 98, 102, 221], "huge": [89, 102, 207, 247], "entail": 89, "delic": [89, 198], "albeit": [89, 260], "mimic": [89, 90, 191, 250], "moder": 89, "irrespect": [89, 224, 227, 252], "line_integr": 89, "as_sum": 89, "subinterv": 89, "trapezoid": [89, 98, 231], "730": 89, "809": 89, "decai": 89, "r547": 89, "riemann_sum": 89, "riemann_summation_method": 89, "r548": 89, "cauchy_principal_valu": 89, "r549": 89, "cauchyprincipalvalu": 89, "int_a": 89, "uvar": 89, "ui": [89, 102, 228], "3aissu": 89, "3aopen": 89, "3aintegr": 89, "gauss_legendr": 89, "n_digit": 89, "legendr": [89, 102, 207, 211, 224], "r550": 89, "w_i": [89, 145, 207, 227], "7746": 89, "55556": 89, "88889": 89, "86114": 89, "33998": 89, "34785": 89, "65215": 89, "gauss_laguerr": 89, "gauss_gen_laguerr": 89, "gauss_hermit": 89, "gauss_chebyshev_t": 89, "gauss_chebyshev_u": 89, "gauss_jacobi": 89, "gauss_lobatto": 89, "gaussian_quadratur": 89, "r551": 89, "fsu": 89, "jburkardt": 89, "cpp_src": 89, "legendre_rul": 89, "laguerr": [89, 207, 211], "r552": 89, "41577": 89, "2943": 89, "2899": 89, "71109": 89, "27852": 89, "010389": 89, "22285": 89, "1889": 89, "9927": 89, "7751": 89, "8375": 89, "983": 89, "45896": 89, "417": [89, 223], "11337": 89, "010399": 89, "00026102": 89, "9855e": 89, "93laguerre_quadratur": 89, "r553": 89, "laguerre_rul": 89, "hermit": [89, 93, 98, 99, 200, 206, 207, 211, 231], "r554": 89, "2247": 89, "29541": 89, "1816": 89, "3506": 89, "3358": 89, "43608": 89, "00453": 89, "15707": 89, "72463": 89, "hermite_quadratur": 89, "r555": 89, "hermite_rul": 89, "r556": 89, "gen_hermite_rul": 89, "r557": 89, "19016": 89, "7845": 89, "5253": 89, "4493": 89, "31413": 89, "00906": 89, "97851": 89, "9904": 89, "3193": 89, "712": 89, "53087": 89, "67721": 89, "11895": 89, "0023152": 89, "r558": 89, "gen_laguerre_rul": 89, "r559": 89, "86602": 89, "0472": 89, "96593": 89, "70711": 89, "25882": 89, "5236": 89, "93gauss_quadratur": 89, "r560": 89, "chebyshev1_rul": 89, "r561": 89, "3927": 89, "7854": 89, "90097": 89, "62349": 89, "22252": 89, "084489": 89, "27433": 89, "42658": 89, "r562": 89, "chebyshev2_rul": 89, "jacobi": [89, 102, 114, 207, 211], "r563": 89, "7063": 89, "0973": 89, "33795": 89, "87174": 89, "5917": 89, "2093": 89, "050584": 89, "22169": 89, "39439": 89, "93jacobi_quadratur": 89, "r564": 89, "jacobi_rul": 89, "r565": 89, "gegenbauer_rul": 89, "lobatto": 89, "r566": 89, "3333": 89, "44721": 89, "16667": 89, "83333": 89, "93lobatto_rul": 89, "r567": 89, "20200118141346": 89, "page_888": 89, "intpoli": 89, "chin": 89, "al": [89, 126, 155, 204, 220, 223], "2015": [89, 230], "unit_cub": 89, "polytope_integr": 89, "eric": [89, 205], "jean": 89, "lasserr": 89, "sukumar": 89, "nonconvex": 89, "967": 89, "981": 89, "dilbert": 89, "engr": 89, "ucdavi": 89, "suku": 89, "max_degre": [89, 207], "689": [89, 106], "21875": 89, "octahedron": 89, "trivari": 89, "enable_automatic_int_sympif": 90, "enable_automatic_symbol": 90, "init_ipython_sess": 90, "argv": [90, 242], "init_python_sess": 90, "use_latex": [90, 191, 287], "quiet": 90, "str_printer": [90, 191], "latex_print": [90, 191], "pylab": 90, "stringifi": [90, 191], "sstrrepr": [90, 191, 211], "lexograph": [90, 191], "gui": [90, 191], "statu": 90, "\u03b8": [90, 120, 148, 230], "int_to_integ": 90, "decistmt": 90, "f401": 90, "0x12": 90, "num_column": [90, 191, 211, 227], "no_glob": [90, 191], "ip": [90, 164, 170, 191], "forecolor": [90, 191], "backcolor": [90, 191], "fontsiz": [90, 191, 211], "10pt": [90, 191, 211], "latex_mod": [90, 191], "print_builtin": [90, 191], "interactiveconsol": [90, 191], "preambl": [90, 191, 211], "handwritten": [90, 191], "ctan": [90, 191], "pkg": [90, 191], "dvi": [90, 191, 211], "foreground": [90, 191], "black": [90, 161, 172, 191, 211, 287], "white": [90, 191, 231], "documentclass": [90, 191, 211], "dpi": [90, 191], "u03b8": 90, "dvip": 90, "r568": 90, "r569": 90, "the_68_standard_colors_known_to_dvip": 90, "config": 90, "root_system": 91, "rootsystem": 91, "cartantyp": 91, "cartan": 91, "subalgebra": 91, "adjoint": [91, 93, 98, 153, 157], "hyperplan": 91, "k_y": 91, "r570": 91, "r571": 91, "humphrei": 91, "add_as_root": 91, "root1": 91, "root2": 91, "add_simple_root": 91, "newroot": 91, "all_root": [91, 102, 207], "cartan_matrix": 91, "dynkin_diagram": 91, "dynkin": 91, "root_spac": 91, "simple_root": 91, "type_a": 91, "typea": 91, "basic_root": 91, "iin": 91, "jth": [91, 230], "ijth": 91, "cartan_typ": 91, "highest_root": 91, "lie_algebra": 91, "positive_root": 91, "type_b": 91, "typeb": 91, "b4": 91, "b3": [91, 126, 143, 186, 262], "type_c": 91, "typec": 91, "type_d": 91, "dmension": 91, "type_": 91, "e6": 91, "type_f": 91, "typef": 91, "f_4": [91, 122], "f4": [91, 197], "type_g": 91, "typeg": 91, "weyl_group": 91, "weylgroup": 91, "semisimpl": 91, "isometri": 91, "coxet": 91, "coxeter_diagram": 91, "undirect": [91, 249], "s_is_j": 91, "delete_doubl": 91, "element_ord": 91, "weylelt": 91, "group_nam": 91, "group_ord": 91, "192": 91, "matrix_form": 91, "cartantype_gener": 91, "standard_cartan": 91, "dynkindiagram": 91, "cartanmatrix": 91, "sopform": 92, "minterm": 92, "dontcar": 92, "simplified_pair": 92, "combo": 92, "outcom": [92, 179, 231], "posform": 92, "r572": 92, "quin": 92, "mccluskey_algorithm": 92, "r573": 92, "27t": 92, "care_term": 92, "r574": 92, "r575": 92, "anfform": 92, "truthvalu": 92, "anf": 92, "zhegalkin": 92, "r576": 92, "zhegalkin_polynomi": 92, "booleantru": 92, "doubt": [92, 126], "greet": 92, "booleanfals": 92, "universalset": [92, 219], "nand": 92, "xnor": 92, "gate": [92, 156, 161, 163, 169, 170, 172, 273], "perspect": [92, 102, 112, 181, 197, 244, 261, 265], "multiplex": 92, "disjunct": 92, "to_anf": 92, "oplu": [92, 160], "to_cnf": 92, "cnf": 92, "mccluskei": 92, "to_dnf": 92, "to_nnf": 92, "nnf": 92, "is_anf": 92, "is_cnf": 92, "is_dnf": 92, "is_nnf": 92, "gateinputcount": 92, "simplify_log": 92, "fewest": [92, 170], "r577": 92, "bool_map": 92, "bool1": 92, "bool2": 92, "function1": 92, "function2": 92, "distribute_and_over_or": 92, "distribute_or_over_and": 92, "distribute_xor_over_and": 92, "eliminate_impl": 92, "truth_tabl": 92, "ibin": [92, 249], "integer_to_term": 92, "0001111011": [92, 249], "1101111000": [92, 249], "term_to_integ": 92, "bool_maxterm": 92, "maxterm": 92, "complement": [92, 95, 207, 219, 230], "r578": 92, "canonical_normal_form": 92, "indexing_maxterm": 92, "bool_minterm": 92, "r579": 92, "indexing_minterm": 92, "bool_monomi": 92, "anf_coeff": 92, "to_int_repr": 92, "all_model": 92, "unsatisfi": 92, "use_model": 92, "unsat": 92, "dirac": [93, 98, 110, 114, 115, 174, 211], "__abs__": [93, 202], "__add__": [93, 202, 206], "__len__": 93, "96": [93, 98, 231], "mismatch": 93, "matrix_multiply_elementwis": [93, 98], "applyfunc": [93, 94, 98, 134, 186, 232], "col": [93, 95, 98, 101, 112, 143, 200, 206, 284], "col_del": [93, 98, 284], "col_join": [93, 98, 128], "col_insert": [93, 284], "row_insert": [93, 284], "row_join": [93, 98, 128], "companion": [93, 95], "c0": [93, 95, 218, 227, 229], "sparsematrix": [93, 98, 101, 212, 223], "diag": [93, 95, 98, 101, 143, 200, 237, 284], "immutablematrix": [93, 94, 95, 112, 186, 231, 256, 259, 284], "blockmatrix": [93, 95, 98], "sparsetool": [93, 101], "band": [93, 101], "kth": [93, 102], "rowslist": [93, 200], "colslist": 93, "submatrix": [93, 98, 204, 231], "get_diag_block": [93, 95, 98], "decoupl": 93, "hstack": [93, 200], "is_anti_symmetr": 93, "is_diagon": [93, 98], "is_low": [93, 200], "is_upp": [93, 200], "matrixeigen": [93, 98], "is_diagonaliz": [93, 98], "is_hermitian": [93, 98], "is_lower_hessenberg": 93, "hessenberg": [93, 98], "superdiagon": 93, "is_upper_hessenberg": 93, "is_strongly_diagonally_domin": 93, "strongli": [93, 98, 200, 249], "m1": [93, 98, 102, 105, 106, 147, 155, 173, 175, 179, 224, 227, 232, 237], "subdiagon": [93, 98], "is_weakly_diagonally_domin": 93, "weakli": [93, 249], "vacuou": 93, "jordan_block": [93, 98], "eigenvalu": [93, 98, 126, 128, 170, 173, 282], "eigenv": [93, 98, 126, 128, 143, 170, 282, 284], "r580": 93, "jordan_matrix": [93, 227], "dotprodsimp": 93, "blowup": 93, "multiply_elementwis": [93, 98], "hadamard": [93, 95, 98, 160, 161, 172, 211], "elementwis": [93, 95, 98, 232], "300": [93, 98, 102, 105, 192, 197, 208, 265], "a_0": [93, 98, 214, 224, 227, 232, 288], "vdot": [93, 95, 98, 181], "alpha_0": 93, "alpha_1": [93, 102, 206], "alpha_": [93, 196], "permute_col": 93, "permute_row": 93, "mulsimp": 93, "rmultipli": 93, "__rmul__": 93, "rot90": 93, "anticlockwis": 93, "row_del": [93, 98, 284], "todod": 93, "tolist": [93, 232], "vech": 93, "check_symmetri": 93, "vstack": [93, 200], "w_": [93, 206], "wminu": 93, "wplu": 93, "r581": 93, "mathwork": [93, 110, 231, 284], "cleve": 93, "04": [93, 231], "r582": 93, "claredon": 93, "oxford": 93, "662": 93, "intm": 93, "mutabledensematrix": [94, 200, 252], "densematrix": [94, 98], "ldldecomposit": [94, 98], "ldl": [94, 98], "choleski": [94, 98], "ludecomposit": [94, 95, 98, 284], "qrdecomposit": [94, 98], "as_immut": 94, "lower_triangular_solv": [94, 98], "upper_triangular_solv": [94, 98], "gauss_jordan_solv": [94, 98], "cholesky_solv": [94, 98], "diagonal_solv": [94, 98], "ldlsolv": [94, 98], "qrsolv": [94, 98], "pinv_solv": [94, 98], "permutedim": [95, 232, 233], "arraytensorproduct": [95, 232, 233], "from_index_summ": 95, "first_index": 95, "last_index": 95, "longrightarrow": 95, "matpow": [95, 211], "hadamard_product": 95, "aka": 95, "hadamardproduct": [95, 211], "hadamardpow": [95, 211], "ddot": [95, 98, 130, 139, 191, 194, 211, 288], "functionmatrix": 95, "lazili": [95, 217, 249], "342923500": 95, "permutationmatrix": [95, 98], "matrixpermut": 95, "companionmatrix": 95, "matrixset": [95, 219], "submatric": [95, 98, 200, 231], "block_collaps": 95, "dat": [95, 249], "irregular": [95, 98], "ldudecomposit": 95, "ldu": 95, "2x2": [95, 101, 145, 200, 227], "udldecomposit": 95, "udl": 95, "schur": 95, "pinv": [95, 98], "r583": 95, "schur_compl": 95, "blockdiagmatrix": [95, 98], "diag_block": 95, "alias": [96, 202], "bridg": [96, 108, 126, 250], "tension": 96, "gramschmidt": 98, "m2": [98, 102, 105, 106, 123, 147, 155, 173, 175, 179, 206, 224, 227, 232, 237], "126": [98, 102, 210], "150": [98, 112, 224], "v3": [98, 186, 190, 262], "glue": 98, "m3": [98, 155, 224, 232], "adj": 98, "qr": 98, "cheat": 98, "soln": 98, "gram": [98, 180, 181, 183], "schmidt": 98, "out1": 98, "out2": 98, "1692": 98, "1551": 98, "423": 98, "6707": 98, "spot": [98, 144], "eigenvector": [98, 126, 170, 171, 196], "nullspac": [98, 200], "matrixdetermin": 98, "adjug": 98, "berkowitz": 98, "bareiss": 98, "cofactor_matrix": 98, "charpoli": [98, 200, 284], "_simplifi": 98, "purepoli": [98, 207], "samuelson": 98, "minor_submatrix": 98, "iszerofunc": [98, 284], "barei": 98, "det_lu": 98, "functiontyp": 98, "_iszero": [98, 284], "_is_zero_after_expand_mul": 98, "unrecogn": 98, "nonsquarematrixerror": [98, 227], "i3": [98, 113, 126, 143, 237], "perman": 98, "ryser": 98, "450": 98, "r584": 98, "prof": 98, "ben": 98, "berkelei": 98, "bernd": 98, "ban275": 98, "r585": 98, "permanent_": 98, "r586": 98, "r587": 98, "rectangular": [98, 219, 230, 260], "0904": 98, "3251": 98, "matrixreduct": 98, "echelon_form": [98, 284], "with_pivot": 98, "echelon": [98, 200, 230, 284], "elementary_col_op": 98, "kn": [98, 105, 106], "col1": 98, "col2": 98, "km": [98, 102, 116, 121, 128, 130, 133, 134, 138, 140, 143, 182], "elementary_row_op": 98, "row1": 98, "row2": 98, "is_echelon": [98, 284], "rref": [98, 200], "pivot": [98, 200, 284], "normalize_last": 98, "rref_matrix": [98, 200], "rref_pivot": [98, 200], "301369863013699": 98, "712328767123288": 98, "noramlize_last": 98, "matrixsubspac": 98, "subspac": [98, 206], "columnspac": [98, 200], "rowspac": [98, 200], "orthonorm": [98, 143, 171, 195, 260], "rankcheck": 98, "r588": 98, "93schmidt_process": 98, "eigen": [98, 152], "bidiagonal_decomposit": 98, "ubv": 98, "bidiagon": 98, "bidiagn": 98, "r589": 98, "golub": 98, "van": [98, 102, 205], "loan": 98, "r590": 98, "vslobodi": 98, "household": 98, "r591": 98, "r592": 98, "reals_onli": 98, "throw": [98, 104, 126, 200, 206, 224, 230], "error_when_incomplet": 98, "eig": [98, 126, 143], "matrixerror": 98, "got": [98, 198, 201, 204, 207, 210, 242, 243, 249, 250, 280, 282, 283], "eigenvect": [98, 126, 143, 170, 284], "tidi": 98, "artifact": 98, "ret": 98, "eigenspac": 98, "rag": 98, "a_3": 98, "diagonaliz": [98, 284], "is_indefinit": 98, "semidefinit": [98, 231], "plot3d": [98, 197], "is_positive_definit": 98, "is_positive_semidefinit": 98, "is_negative_definit": 98, "is_negative_semidefinit": 98, "defer": [98, 253], "r593": 98, "definiteness_of_a_matrix": 98, "r594": 98, "positivedefinitematrix": 98, "r595": 98, "amer": 98, "259": 98, "264": [98, 229], "r596": 98, "r597": 98, "r598": 98, "r599": 98, "r600": 98, "r601": 98, "r602": 98, "r603": 98, "r604": 98, "r605": 98, "r606": 98, "r607": 98, "jordan_form": 98, "calc_transform": 98, "left_eigenvect": 98, "singular_valu": 98, "condition_numb": 98, "matrixcalculu": 98, "hessian": 98, "wronskian": [98, 227], "simpfunc": 98, "permutebkwd": 98, "permutefwd": 98, "lucombin": 98, "defici": [98, 102, 230], "matrixi": 98, "ludecomposition_simpl": [98, 284], "ludecompositionff": 98, "pa": [98, 121, 123, 138, 141, 144], "r608": 98, "zhou": 98, "jeffrei": [98, 223], "frontier": [98, 219], "china": 98, "67": [98, 205], "2008": [98, 196, 205, 207, 211], "row_swap": 98, "permute_backward": 98, "permute_forward": 98, "intiuit": 98, "lu_": 98, "_find_reasonable_pivot": 98, "qr_solv": 98, "167": 98, "158": [98, 106], "27261": 98, "30625": 98, "348": 98, "1914": 98, "6125": 98, "30589": 98, "198": 98, "1225": 98, "q_aug": 98, "r_aug": 98, "analytic_func": 98, "connected_compon": [98, 249], "connected_components_decomposit": 98, "relax": [98, 104], "3x1": 98, "1x3": 98, "conjugate_convent": 98, "dual": [98, 168, 174], "anti_symmetr": 98, "speak": [98, 206, 263], "freevar": 98, "underdetermin": [98, 229, 230], "free_var_index": 98, "tau0": [98, 230, 231], "tau1": 98, "taus_zero": 98, "sol_uniqu": 98, "r609": 98, "gaussian_elimin": 98, "try_block_diag": 98, "inverse_g": [98, 284], "inverse_lu": [98, 284], "inverse_adj": [98, 284], "inverse_ch": 98, "inverse_ldl": 98, "inverse_qr": 98, "inv_mod": 98, "cof": 98, "inverse_block": 98, "blockwis": 98, "ntop": 98, "key2bound": 98, "key2ij": 98, "reciproc": [98, 231, 288], "fro": 98, "sing": 98, "spectral": 98, "rd": [98, 126, 211], "r610": 98, "penrose_pseudoinvers": 98, "arbitrary_matrix": 98, "wn_m": 98, "_w0_0": 98, "_w1_0": 98, "_w2_0": 98, "59": [98, 227], "r611": 98, "obtaining_all_solutions_of_a_linear_system": 98, "print_nonzero": [98, 249], "symb": [98, 211], "rank_decomposit": 98, "r612": 98, "rank_factor": 98, "r613": 98, "piziak": 98, "odel": 98, "magazin": 98, "193": [98, 110], "2307": 98, "2690882": 98, "singular_value_decomposit": 98, "condens": [98, 230], "v_aug": 98, "u_aug": 98, "s_aug": 98, "gj": 98, "solve_least_squar": 98, "strongly_connected_compon": [98, 200, 249], "62": [98, 204], "strongly_connected_components_decomposit": 98, "rowstart": 98, "rowend": 98, "rowsep": 98, "colsep": 98, "strprinter": [98, 191], "upper_hessenberg_decomposit": 98, "213": 98, "134": 98, "216": [98, 204], "hessenbergdecomposit": 98, "jordan_cel": 98, "varlist": 98, "r614": 98, "hessian_matrix": 98, "vlist": 98, "r615": 98, "casoratian": 98, "kernel": [98, 198, 204, 206, 229], "vanish": [98, 176, 204, 207, 210, 227, 256], "rsolve_hyp": [98, 229], "randmatrix": 98, "percent": [98, 230], "prng": 98, "percentag": [98, 102], "46": [98, 105, 181, 210, 229, 231], "rot_given": 98, "diment": 98, "kk": 98, "ji": [98, 233], "rot_axis1": 98, "rot_axis2": 98, "rot_axis3": 98, "rot_ccw_axis1": 98, "rot_ccw_axis2": 98, "rot_ccw_axis3": 98, "r616": 98, "givens_rot": 98, "list2numpi": 98, "dtype": [98, 103, 198, 200, 201, 202, 211, 250], "matrix2numpi": 98, "symarrai": 98, "ndarrai": [98, 231, 237, 243], "prefix_i1_i2_": 98, "a_0_0": 98, "a_0_1": 98, "a_0_2": 98, "a_1_0": 98, "a_1_1": 98, "a_1_2": 98, "a_0_0_0": 98, "a_0_0_1": 98, "a_0_1_0": 98, "a_0_1_1": 98, "a_0_2_0": 98, "a_0_2_1": 98, "a_1_0_0": 98, "a_1_0_1": 98, "a_1_1_0": 98, "a_1_1_1": 98, "a_1_2_0": 98, "a_1_2_1": 98, "a2idx": 98, "normalform": [99, 200], "hermite_normal_form": [99, 200, 206], "check_rank": [99, 200], "hnf": [99, 200, 206], "explos": [99, 200], "believ": [99, 102, 200], "dmdomainerror": [99, 200], "dmshapeerror": [99, 200], "r617": 99, "mutablesparsematrix": 100, "_doktocsr": 101, "csr": 101, "ja": 101, "ia": 101, "_csrtodok": 101, "dok": 101, "1x1": [101, 231], "vert": [101, 192, 195, 265], "saw": [101, 201, 288], "dynam": [102, 109, 110, 112, 116, 118, 121, 122, 125, 128, 136, 138, 139, 140, 141, 142, 143, 144, 185, 186, 188, 190, 194, 195, 246, 247, 256], "eratosthen": 102, "_reset": [102, 207], "_list": 102, "extend_to_no": 102, "mobiusrang": 102, "primerang": 102, "10th": 102, "totientrang": 102, "1e11": 102, "50000": 102, "primal": [102, 198], "1299709": 102, "r618": 102, "prime_number_theorem": 102, "table_of_": 102, "cf": [102, 204], "28x": 102, "2c_x_": 102, "2f_log_x": 102, "2c_and_li": 102, "r619": 102, "approximations_for_the_nth_prime_numb": 102, "r620": 102, "27_number": 102, "arr1": 102, "arr2": 102, "prevprim": 102, "9th": 102, "nextprim": 102, "occupi": [102, 176, 237], "conjectur": [102, 204], "twin": 102, "bertrand": 102, "brocard": 102, "primori": 102, "r621": 102, "r622": 102, "utm": 102, "postul": 102, "r623": 102, "s_postul": 102, "primefactor": 102, "argu": 102, "cycle_length": 102, "nmax": 102, "brent": [102, 246], "floyd": 102, "cycle_detect": 102, "17737": 102, "20000": 102, "compositepi": 102, "831": 102, "smoothness_p": 102, "sm": [102, 126, 143, 198], "psm": 102, "govern": 102, "10431": 102, "21477639576571": 102, "4410317": 102, "1787": 102, "4869863": 102, "2434931": 102, "multiplicity_in_factori": 102, "nfac": 102, "52818775009509558395695966887": 102, "is2pow": 102, "pollard_rho": 102, "1234": [102, 224], "max_step": 102, "pollard": [102, 227], "leader": 102, "16843009": 102, "32767": 102, "4i": 102, "3i": 102, "2489": 102, "1482": 102, "285": [102, 229], "leadup": 102, "r624": 102, "crandal": 102, "carl": [102, 246], "pomer": [102, 246], "229": 102, "231": [102, 186], "pollard_pm1": 102, "likelihood": 102, "1009": 102, "am": [102, 181, 211], "255": 102, "crack": 102, "617": 102, "1786": 102, "worst": [102, 207, 227], "scenario": [102, 231], "divisisor": 102, "realist": 102, "r625": 102, "236": 102, "r626": 102, "20150716201437": 102, "washington": 102, "2007": [102, 142, 246], "spring": [102, 117, 120, 121, 126, 131], "ent": 102, "node81": 102, "r627": 102, "toronto": 102, "yuvalf": 102, "use_ecm": 102, "65537": [102, 210], "1407633717262338957430697921446883": 102, "991": 102, "202916782076162456022877024859": 102, "4200": 102, "1764": 102, "toggl": [102, 197], "12345678910111213141516": 102, "2507191691": 102, "1231026625769": 102, "factorrat": 102, "rat": 102, "987": 102, "10000000001": 102, "99009901": 102, "divisor_count": 102, "tim": [102, 249], "stackoverflow": [102, 249, 252], "1010381": 102, "proper_divisor": 102, "proper_divisor_count": 102, "udivisor": 102, "udivisor_count": 102, "r628": 102, "unitary_divisor": 102, "r629": 102, "unitarydivisor": 102, "r630": 102, "unitarydivisorfunct": 102, "antidivisor": 102, "r631": 102, "margin": [102, 112, 197, 231], "antidivisor_count": 102, "a066272": 102, "a066272a": 102, "r632": 102, "r633": 102, "27s_totient_funct": 102, "r634": 102, "totientfunct": 102, "r635": 102, "carmichael_funct": 102, "r636": 102, "carmichaelfunct": 102, "sigma_k": 102, "m_i": [102, 196, 204], "m_ik": 102, "r637": 102, "divisor_funct": 102, "udivisor_sigma": 102, "47450": 102, "152": 102, "r638": 102, "core_t": 102, "core_2": 102, "squarefre": [102, 206], "cubefre": 102, "9424": 102, "1178": 102, "379238": 102, "square_factor": [102, 224], "r639": 102, "free_integ": 102, "squarefree_cor": 102, "primenu": 102, "r640": 102, "primeomega": 102, "r641": 102, "mersenne_prime_expon": 102, "mersenn": 102, "4423": 102, "r642": 102, "perfectnumb": 102, "r643": 102, "perfect_numb": 102, "is_mersenne_prim": 102, "r644": 102, "mersenneprim": 102, "abund": 102, "is_abund": 102, "r645": 102, "abundantnumb": 102, "is_defici": 102, "r646": 102, "deficientnumb": 102, "is_amic": 102, "amic": 102, "220": [102, 207], "r647": 102, "amicable_numb": 102, "symmetric_residu": 102, "v_i": [102, 206, 229], "65": [102, 112, 204, 231], "639985": [102, 204], "912285": [102, 204], "954": 102, "gf_crt": [102, 204], "solve_congru": [102, 204], "programm": [102, 211], "galoistool": [102, 204], "crt1": 102, "4536": 102, "252": 102, "756": 102, "crt2": 102, "remainder_modulus_pair": 102, "mi": [102, 211], "k1": [102, 143, 174, 201, 202, 204], "k2": [102, 143, 201], "c_kn": 102, "binomial_coefficients_list": 102, "multinomial_coeffici": 102, "k_m": 102, "k_i": [102, 204, 221], "yann": 102, "laigl": 102, "chapui": 102, "permiss": [102, 196], "multinomial_coefficients_iter": 102, "_tupl": 102, "m53": 102, "partitions_": 102, "npartit": 102, "hardi": 102, "rademach": [102, 231], "r648": 102, "1958": [102, 196], "partitionfunctionp": 102, "is_euler_pseudoprim": 102, "pseudoprim": 102, "r649": 102, "euler_pseudoprim": 102, "prep": [102, 227, 228], "r650": 102, "mersenneforum": 102, "showpost": 102, "110896": 102, "mr": 102, "miller": 102, "rabin": 102, "wit": 102, "1373651": 102, "479001599": 102, "r651": 102, "135": 102, "138": 102, "93rabin_primality_test": 102, "deterministic_vari": 102, "is_lucas_prp": 102, "selfridg": 102, "377": 102, "1159": 102, "1829": 102, "3827": 102, "5459": 102, "5777": 102, "9071": 102, "9179": 102, "bailli": 102, "wagstaff": 102, "1980": [102, 249], "mpq": [102, 200, 201], "lucaspseudoprim": 102, "a217120": 102, "lucas_pseudoprim": 102, "is_strong_lucas_prp": 102, "bpsw": 102, "10877": 102, "16109": 102, "18971": 102, "a217255": 102, "psw_primality_test": 102, "is_extra_strong_lucas_prp": 102, "grantham": 102, "mo": [102, 143, 211], "jone": [102, 148], "preprint": 102, "a217719": 102, "perl": 102, "counterexampl": [102, 288], "989": 102, "3239": 102, "jon": 102, "mcom": 102, "234": 102, "01197": 102, "1e3": 102, "1e23": [102, 252], "near_int": 102, "strong_pseudoprim": 102, "is_gaussian_prim": 102, "r652": 102, "gaussian_prim": 102, "residue_ntheori": 102, "n_order": 102, "cong": [102, 204], "primitive_root": [102, 206], "r653": 102, "stein": [102, 227], "r654": 102, "hackman": 102, "sqrt_mod": 102, "sqrt_mod_it": 102, "quadratic_residu": 102, "nthroot_mod": 102, "109": [102, 205, 224], "is_nthpow_residu": 102, "r655": 102, "is_quad_residu": 102, "legendre_symbol": 102, "genfrac": 102, "nonresidu": 102, "alpha_2": [102, 206], "alpha_k": 102, "discrete_log": 102, "prime_ord": 102, "giant": [102, 230], "pohlig": 102, "r656": 102, "discretelogarithm": 102, "r657": 102, "cryptographi": [102, 267, 274], "menez": 102, "vanston": 102, "continued_fract": 102, "continued_fraction_period": 102, "continued_fraction_reduc": 102, "continued_fraction_converg": 102, "continued_fraction_iter": 102, "106": 102, "103993": 102, "33102": 102, "104348": 102, "33215": 102, "208341": 102, "66317": 102, "292": 102, "r658": 102, "discrimin": [102, 202, 204, 206, 207], "r659": 102, "periodic_continued_fract": 102, "r660": 102, "rosen": 102, "379": [102, 207], "381": 102, "januari": 102, "1992": [102, 205, 229, 249], "233": [102, 205, 227], "718281835": 102, "287": 102, "count_digit": 102, "1111339": 102, "0xfa": 102, "c77": 102, "is_palindrom": [102, 249], "palindrom": 102, "0o121": 102, "oct": 102, "0o171": 102, "fermion": [102, 176], "r661": 102, "b6bius_funct": 102, "r662": 102, "thoma": [102, 142], "koshi": 102, "egyptian_fract": 102, "greedi": [102, 204, 220, 223], "egyptian": 102, "r663": 102, "jewett": 102, "takenouchi": 102, "3192": 102, "1118": 102, "2580": 102, "sylvest": [102, 204], "r664": 102, "seldom": 102, "blow": 102, "doubli": 102, "exhibit": [102, 196, 206, 220], "singli": 102, "tendenc": 102, "r665": 102, "1921": 102, "golumb": 102, "1962": 102, "propos": 102, "bleicher": 102, "1972": 102, "r666": 102, "420": [102, 224], "140": 102, "574": 102, "2788": 102, "6460": 102, "11590": 102, "33062": 102, "113820": 102, "greedy_algorithm_for_egyptian_fract": 102, "uci": 102, "eppstein": 102, "numth": 102, "egypt": 102, "20180413004012": 102, "ami": 102, "ektf": 102, "hu": [102, 200], "finalpdf": 102, "ami_42_from129to134": 102, "bbp_pi": 102, "pi_hex_digit": 102, "hex": 102, "3243f6a8885a30": 102, "r667": 102, "numberworld": 102, "subexponenti": 102, "comfort": [102, 103], "15154262241479": 102, "15423094826093": 102, "799333555511111": 102, "809709509409109": 102, "888888877777777": 102, "914148152112161": 102, "factoris": [102, 201, 202, 227], "max_curv": 102, "lenstra": [102, 200], "ecm_one_factor": 102, "pseudorandom": [102, 249], "25645121643901801": 102, "5394769": 102, "4753701529": 102, "9804659461513846513": 102, "4641991": 102, "2112166839943": 102, "7060005655815754299976961394452809": 102, "6988699669998001": 102, "1010203040506070809": 102, "122921448543883967430908091422761898618349713604256384403202282756086473494959648313841": 102, "2709077133180915240135586837960864768806330782747": 102, "248": 102, "prime_bound": 102, "error_term": 102, "siq": 102, "modn": 102, "r668": 102, "semanticscholar": 102, "5c52": 102, "8a975c1405bd35c65993abf5a4edb667c1db": 102, "r669": 102, "rieselprim": 102, "ziki": 102, "initializing_quadratic_siev": 102, "5915587277": 102, "3267000013": 102, "facilit": [103, 136, 147, 193, 242], "000507214304613640": 103, "microsecond": 103, "000507214304614": 103, "hundr": [103, 250, 282], "nanosecond": 103, "84147098": [103, 250, 277], "84119981": 103, "84092844": 103, "05426074": 103, "05433146": 103, "05440211": 103, "nano": 103, "manufactur": 103, "asnumpi": 103, "jnp": 103, "asarrai": 103, "84147096": 103, "8411998": 103, "05426079": 103, "05433151": 103, "autowrap": [103, 236, 244, 248, 275], "implemented_funct": [103, 243, 250], "effort": [103, 202, 204], "50u": 103, "1u": 103, "10n": 103, "sympy_pars": 104, "local_dict": 104, "lambda_not": 104, "repeated_decim": 104, "auto_numb": 104, "factorial_not": 104, "global_dict": 104, "standard_transform": 104, "implicit_multiplication_appl": 104, "implicit_appl": 104, "implicit_multipl": 104, "convert_equals_sign": 104, "function_exponenti": 104, "stringify_expr": 104, "eval_expr": 104, "name_dict": 104, "fullform": 104, "setdelai": 104, "datatyp": [104, 202, 211, 244], "split_symbol": 104, "split_symbols_custom": 104, "_token_splitt": 104, "can_split": 104, "unsplitt": 104, "10sin": 104, "3xyz": 104, "2111": 104, "latex2sympi": 104, "typograph": 104, "stricter": 104, "liber": [104, 116, 282], "618": 104, "latexparsingerror": 104, "sym_expr": 104, "sympyexpress": 104, "source_cod": 104, "return_expr": 104, "src2": 104, "convert_to_expr": 104, "convert_to_c": 104, "src3": 104, "convert_to_python": 104, "src_code": 104, "filenam": [104, 211, 242, 243, 244, 252], "convert_to_fortran": 104, "continuum_mechan": [105, 106, 108], "elastic_modulu": 105, "second_mo": 105, "base_char": 105, "withstand": [105, 106], "character": [105, 106, 192, 195, 218, 231, 237, 265], "profil": 105, "shear": [105, 106], "meter": [105, 106, 147, 150, 179, 180, 181, 182, 183], "downward": [105, 106, 108, 206], "apply_load": [105, 106, 108], "bc_deflect": [105, 106], "boundary_condit": 105, "solve_for_reaction_load": [105, 106], "shear_forc": [105, 106], "bending_mo": [105, 106], "reaction": [105, 106, 108], "upward": [105, 206], "reaction_load": [105, 106, 108], "applied_load": 105, "nm": [105, 106, 174, 232], "pointload": [105, 106], "ramp": [105, 106], "parabol": 105, "apply_support": [105, 108], "loc": 105, "freedom": [105, 120, 121, 127, 130, 136, 231, 273], "roller": [105, 106, 108], "r_10": 105, "r_30": 105, "4000": [105, 106], "bc_slope": [105, 106], "cross_sect": 105, "elast": [105, 106], "12000": 105, "draw": [105, 156, 211, 231], "pictori": 105, "ild_moment": 105, "ild_react": 105, "ild_shear": 105, "axial": [105, 145], "hing": [105, 106, 137], "cantilev": [105, 106], "inertia": [105, 106, 115, 116, 117, 119, 125, 126, 128, 129, 131, 133, 134, 135, 136, 143, 186, 194, 195, 206, 273], "666666666666667": [105, 106], "max_bmoment": 105, "max_deflect": 105, "max_shear_forc": 105, "plot_bending_mo": [105, 106], "gpa": 105, "400": [105, 197, 207], "13750": 105, "31250": 105, "plot_deflect": [105, 106], "00138541666666667": 105, "86458333333333e": 105, "04166666666667e": 105, "20833333333333e": 105, "51041666666667e": 105, "plot_ild_mo": 105, "solve_for_ild_mo": 105, "1kn": 105, "r_0": 105, "r_8": 105, "solve_for_ild_react": 105, "plot_ild_react": 105, "5kn": 105, "r_7": 105, "plotgrid": 105, "plot_ild_shear": 105, "solve_for_ild_shear": 105, "plot_loading_result": [105, 106], "subplot": [105, 197], "plot_shear_forc": [105, 106], "plot_shear_stress": 105, "stress": 105, "6875": 105, "2500": 105, "15625": [105, 183], "plot_slop": [105, 106], "59375e": 105, "125e": 105, "08333333333333e": 105, "0001953125": 105, "point_cflexur": 105, "overhang": [105, 106], "10kn": 105, "20kn": [105, 106], "3kn": 105, "remove_load": [105, 108, 117], "shear_stress": 105, "beam3d": 105, "shear_modulu": 105, "apply_moment_load": 105, "solve_slope_deflect": 105, "r670": 105, "home": [105, 206, 224], "aau": 105, "jc": 105, "femtesemest": 105, "beams3d": 105, "angular_deflect": 105, "depict": [105, 192, 230, 265], "angular": [105, 114, 117, 120, 123, 128, 129, 130, 131, 133, 135, 137, 140, 143, 145, 149, 150, 152, 155, 173, 177, 186, 190, 196], "axial_forc": 105, "axial_stress": 105, "load_vector": 105, "max_bending_mo": 105, "16000": 105, "495": 105, "10793": 105, "6400": 105, "301": [105, 221, 224], "560": 105, "2400": 105, "moment_load_vector": 105, "40000": 105, "4013": 105, "90300": 105, "1520": 105, "903": 105, "1600": [105, 106], "172": 105, "polar_mo": 105, "i1": [105, 113, 126, 143, 237], "1350": 105, "solve_for_tors": 105, "torsion": 105, "torqu": [105, 117, 121, 125, 131, 138, 139, 143], "torsional_mo": 105, "_________________": 106, "________________": [106, 227], "_______________v": 106, "_______________": 106, "equilibrium": [106, 108, 128, 140], "20e9": 106, "25e": 106, "______________________________________________": 106, "_______________________________________________": 106, "r\u2081": 106, "r\u2082": 106, "______________________": 106, "________________________": 106, "8kn": 106, "_____________": 106, "1m": 106, "3m": 106, "2m": 106, "5m": [106, 246], "679": 106, "12kn": 106, "________________________________": 106, "____________________________________________________": 106, "o____________________________________________________": 106, "4m": 106, "_____________________________________": 106, "m\u2081": 106, "m\u2082": 106, "connector": 106, "_____________________": 106, "_______________________": 106, "_____________________o_______________________": 106, "oooo": [106, 249], "r\u2083": 106, "_______i_______": 106, "flexur": 106, "rigid": [106, 108, 117, 121, 123, 126, 128, 131, 136, 143, 186, 194, 273], "____________": 106, "____________o________________________": 106, "a\u2082": [106, 288], "assembli": [108, 128], "joint": [108, 119, 129, 131, 136, 273], "add_nod": 108, "node_1": 108, "node_2": 108, "node_3": 108, "node_4": 108, "add_memb": 108, "member_1": 108, "member_2": 108, "member_3": 108, "member_4": 108, "member_5": 108, "270": 108, "360": 108, "change_member_label": 108, "new_label": 108, "change_node_label": 108, "bc_new": 108, "internal_forc": 108, "member_label": 108, "node_label": 108, "node_posit": 108, "remove_memb": 108, "remove_nod": 108, "remove_support": 108, "unstabl": 108, "revolv": 108, "tensil": 108, "r_node_1_x": 108, "r_node_1_i": 108, "r_node_2_i": 108, "lti": [109, 110], "transferfunct": [109, 110, 112], "interconnect": [109, 112, 120], "mimo": [109, 112], "transferfunctionmatrix": [109, 112], "mimoseri": [109, 112], "mimoparallel": [109, 112], "mimofeedback": [109, 112], "control_plot": 110, "pole_zero_plot": 110, "pole_color": 110, "blue": [110, 137, 197, 211], "pole_markers": 110, "zero_color": 110, "orang": 110, "zero_markers": 110, "show_ax": 110, "marker": [110, 197], "sisolineartimeinvari": [110, 112], "markers": 110, "tf1": [110, 112], "pole_zero_numerical_data": 110, "r671": 110, "93zero_plot": 110, "siso": [110, 112], "8660254j": 110, "bode_plot": 110, "initial_exp": 110, "final_exp": 110, "freq_unit": 110, "phase_unit": 110, "semilog": 110, "hz": 110, "hertz": 110, "bode_magnitude_plot": 110, "bode_phase_plot": 110, "bode_magnitude_numerical_data": 110, "5148378120533502e": 110, "68437": 110, "36188804005": 110, "020599914256786": 110, "0205999155219505": 110, "4117304087953": 110, "00000000260573": 110, "bode_phase_numerical_data": 110, "4472354033813751e": 110, "035581932165858e": 110, "47577": 110, "3248186011": 110, "67884": 110, "09326036123": 110, "5000000000291665e": 110, "6180885085e": 110, "08895483066e": 110, "1415085799262523": 110, "14155265358979": 110, "impulse_response_plot": 110, "lower_limit": [110, 278], "upper_limit": [110, 278], "step_response_plot": 110, "ramp_response_plot": 110, "r672": 110, "impulse_response_numerical_data": 110, "nb_of_point": [110, 197], "lineover1drangeseri": [110, 197], "amplitud": [110, 150], "06616480200395854": 110, "854500743565858": 110, "9999999799999999": 110, "7042848373025861": 110, "170748906965121e": 110, "1901263495547205e": 110, "r673": 110, "step_response_numerical_data": 110, "025413462339411542": 110, "0484508722725343": 110, "670250533855183": 110, "844291913708725": 110, "023844582399907256": 110, "042894276802320226": 110, "828770759094287e": 110, "456457160755703e": 110, "mx": [110, 156, 218], "r674": 110, "ramp_funct": 110, "ramp_response_numerical_data": 110, "12166980856813935": 110, "861246379582118": 110, "4504508011325967e": 110, "006046440489058766": 110, "12499999999568202": 110, "12499999999661349": 110, "den": [112, 202, 223, 227], "superscript": [112, 211], "impuls": 112, "tf2": 112, "tf3": 112, "tf4": 112, "tf5": 112, "tf6": 112, "500000000000000": 112, "tf7": 112, "tf8": 112, "tf9": 112, "tf10": 112, "tf11": 112, "tf12": 112, "r675": 112, "transfer_funct": 112, "r676": 112, "dc_gain": 112, "dc": [112, 139], "from_rational_express": 112, "zerodivisionerror": [112, 202, 240, 250], "tf": [112, 250], "is_biprop": 112, "is_prop": 112, "is_stabl": 112, "is_strictly_prop": 112, "sys1": 112, "sys2": 112, "feedforward": 112, "fed": 112, "sit": [112, 195], "plant": 112, "compulsori": 112, "tf_1": 112, "tf_2": 112, "tf_3": 112, "tf_4": 112, "tfm_1": 112, "num_input": 112, "num_output": 112, "tfm_2": 112, "tf_5": 112, "tf_6": 112, "tf_7": 112, "tf_8": 112, "tfm_3": 112, "tfm_4": 112, "tfm_5": 112, "tfm_6": 112, "tf_9": 112, "tf_10": 112, "tfm_7": 112, "tfm_8": 112, "tfm_9": 112, "tfm_10": 112, "tfm_11": 112, "tfm_12": 112, "elem_pol": 112, "elem_zero": 112, "m_tf": 112, "tfm": 112, "tfm1": 112, "tfm2": 112, "g4": 112, "tfm3": 112, "mimolineartimeinvari": 112, "mat_a": 112, "mat_b": 112, "mat_c": 112, "tfm_a": 112, "tfm_b": 112, "tfm_c": 112, "expr_1": 112, "expr_2": 112, "expr_3": 112, "expr_4": 112, "plant_mat": 112, "controller_mat": 112, "neg_feedback": 112, "bilinear": 112, "sample_p": 112, "numz": 112, "denz": 112, "backward_diff": 112, "hep": 113, "gamma_matric": [113, 115], "gammamatrix": 113, "lorentzindex": 113, "gammamatrixhead": 113, "extract_type_ten": 113, "gamma_trac": 113, "i0": [113, 148, 237], "i2": [113, 126, 143, 237], "i4": [113, 237], "i5": 113, "kahane_simplifi": 113, "spinor": 113, "ta": [113, 220], "tb": [113, 220, 242], "tc": [113, 202, 207, 220], "joseph": [113, 205], "kahan": 113, "octob": 113, "1968": 113, "simplify_gpgp": 113, "e_nl": [114, 177], "hartre": 114, "helium": 114, "2209": 114, "e_nl_dirac": 114, "spin_up": 114, "035999037000": 114, "relativist": 114, "momentum": [114, 123, 126, 143, 154, 155, 173, 177, 196, 237], "light": [114, 148, 180, 181, 191, 198], "035999037": 114, "1012": 114, "3627": 114, "500006656595360": 114, "125002080189006": 114, "125000416028342": 114, "0555562951740285": 114, "0555558020932949": 114, "0555556377366884": 114, "psi_nlm": 114, "wave": [114, 146, 147, 148, 214, 273], "psi_": [114, 152], "nlm": 114, "radial": [114, 130, 177], "nl": [114, 177], "magnet": [114, 147, 192, 265], "azimuth": 114, "wf": [114, 128], "abs_sqrd": 114, "silver": 114, "94": [114, 205], "141": 114, "4418": 114, "mdft": 115, "mgamma": 115, "gamma_5": 115, "gamma_0": 115, "gamma_3": 115, "r677": 115, "msigma": 115, "pauli": [115, 273], "sigma_i": [115, 231], "r678": 115, "pauli_matric": [115, 151], "pat_matrix": 115, "unansw": [116, 185], "kane": [116, 119, 120, 126, 132, 136, 137, 142, 143, 185, 186, 256, 273], "q1d": [116, 126, 128, 130, 133, 134, 135, 138, 139, 140, 141, 185, 191, 195], "q2d": [116, 126, 128, 130, 133, 134, 135, 138, 139, 190, 191], "q3d": [116, 133, 134, 135, 138], "kinemat": [116, 120, 121, 125, 126, 128, 129, 130, 131, 133, 135, 137, 138, 140, 141, 143, 144, 186, 189, 193, 195, 273], "dyad": [116, 143, 260], "mprint": [116, 133, 134, 135, 138], "mpprint": [116, 138], "mlatex": 116, "sub_dict": [116, 118, 128], "msub": [116, 118, 140], "cleaner": [116, 143, 227], "gsl": [116, 244], "lsoda": 116, "penalti": 116, "central_inertia": [117, 123, 129, 131], "possess": [117, 141, 237], "name_of_bodi": 117, "ixx": [117, 123, 186], "body_inertia": 117, "ang_vel_in": [117, 120, 126, 133, 134, 143, 186, 194], "set_ang_vel": [117, 123, 126, 128, 133, 134, 140, 141, 143, 144, 186, 188, 190, 194], "apply_forc": [117, 120, 131], "reaction_bodi": [117, 120, 131], "reaction_point": 117, "oppposit": 117, "desri": 117, "force1": 117, "b_masscent": 117, "b_frame": [117, 120], "newtonion": [117, 120], "spring_forc": 117, "n_frame": 117, "apply_torqu": [117, 131], "torquess": 117, "torque1": 117, "b1_frame": 117, "b2_frame": 117, "clear_load": 117, "kinetic_energi": [117, 123, 141, 143], "inerti": [117, 120, 121, 123, 128, 130, 133, 138, 139, 141, 143], "set_vel": [117, 121, 123, 126, 128, 130, 133, 134, 135, 138, 139, 140, 141, 143, 144, 190, 194], "b_ixx": 117, "b_mass": [117, 120], "masscenter_vel": [117, 120], "parallel_axi": [117, 123], "a_ixx": 117, "a_mass": 117, "a_ixi": 117, "a_izx": 117, "a_iyi": 117, "a_iyz": 117, "a_izz": 117, "smart": [118, 140, 218, 224, 227], "sub1": [118, 211], "sub2": [118, 211], "find_dynamicsymbol": 118, "reference_fram": [118, 186], "symbolicsystem": [119, 136, 273], "interfram": [120, 190], "_generate_coordin": 120, "_generate_spe": 120, "_orient_fram": 120, "_set_angular_veloc": 120, "_set_linear_veloc": 120, "kde": [120, 129, 130, 137, 140], "revolut": 120, "\u03c9": 120, "pc": [120, 208], "p_masscent": 120, "c_masscent": 120, "p_frame": 120, "c_frame": 120, "q_pc": 120, "u_pc": 120, "upper_bob": 120, "lower_bob": 120, "ceiling_joint": 120, "pendulum_joint": 120, "q_p1": 120, "q_p2": 120, "u_fram": 120, "l_frame": 120, "u_p1": 120, "u_p2": 120, "vel": [120, 126, 128, 130, 134, 137, 143, 190, 194, 263], "prismat": 120, "slide": 120, "wall": [120, 131], "part1": 120, "part2": 120, "j1": [120, 129, 131, 155, 173], "j2": [120, 129, 131, 155, 173], "q_j1": 120, "w_frame": 120, "q_j2": 120, "p1_frame": 120, "u_j1": 120, "cylindricaljoint": 120, "rotation_coordin": 120, "translation_coordin": 120, "rotation_spe": 120, "translation_spe": 120, "cylindr": [120, 197, 263], "q0_": 120, "q1_": 120, "u0_": 120, "u1_": 120, "q0_pc": 120, "q1_pc": 120, "u0_pc": 120, "u1_pc": 120, "tube": 120, "floor_joint": 120, "flag_joint": 120, "q0_c1": 120, "q0_c2": 120, "q1_c1": 120, "floor_fram": 120, "q1_c2": 120, "tube_fram": 120, "flag_fram": 120, "u0_c1": 120, "u0_c2": 120, "u1_c1": 120, "planarjoint": 120, "planar_coordin": 120, "planar_spe": 120, "q2_": 120, "u2_": 120, "nonparallel": 120, "q_1": [120, 129, 130, 131, 140, 156, 194, 207, 224], "q_2": [120, 129, 130, 131, 140, 194], "hat": [120, 137, 141, 185, 186, 191, 192, 194, 195, 260, 261, 263, 265, 266], "q_0": [120, 156, 224], "rotation_axi": 120, "planar_vector": 120, "q2_pc": 120, "u2_pc": 120, "parent_vector": 120, "plane_vector": 120, "g_frame": 120, "sphericaljoint": 120, "rot_typ": [120, 186, 190, 192], "rot_ord": [120, 186, 190, 258], "ball": 120, "socket": 120, "tait": [120, 186, 256, 258], "bryan": [120, 186, 256, 258], "joint_point": 120, "zxz": [120, 186, 195, 256, 258], "weldjoint": 120, "weld": 120, "quarter": [120, 148], "rotated_fram": 120, "jointsmethod": [120, 129, 131], "damper": [120, 121, 126, 131], "form_eom": [120, 131, 137], "mass_matrix_ful": [120, 121, 126, 131, 138, 139], "forcing_ful": [120, 121, 126, 131, 138, 139], "mass_matrix": [120, 121, 125, 128, 133, 134, 138, 139, 144], "lagrangesmethod": [120, 121, 130, 135, 139, 140], "qd": [120, 121, 128, 138, 190], "inv_method": [120, 121], "q_ind": [121, 122, 126, 128, 129, 130, 133, 134, 138, 140, 143], "u_ind": [121, 122, 126, 128, 129, 130, 133, 134, 138, 140, 143], "kd_eq": [121, 126, 128, 129, 130, 133, 134, 140, 143], "q_depend": [121, 128, 129, 130, 138, 143], "configuration_constraint": [121, 128, 129, 130, 138], "u_depend": [121, 128, 129, 130, 138, 143], "velocity_constraint": [121, 128, 129, 130, 138, 143], "acceleration_constraint": 121, "u_auxiliari": [121, 134, 138, 143], "forcelist": [121, 126, 129, 130, 133, 134, 139, 140, 143], "explicit_kinemat": 121, "levinson": [121, 142, 186, 256], "udot": [121, 128], "22626": 121, "ud": [121, 138], "kd": [121, 128, 133, 134, 138], "fl": [121, 128, 138, 139, 143, 205], "bl": [121, 128, 138, 143], "frstar": [121, 126, 128, 130, 133, 134, 138, 140, 143], "kanes_equ": [121, 126, 128, 130, 133, 134, 138, 140, 143], "a_and_b": [121, 122, 130], "auxiliary_eq": [121, 134], "k_d": [121, 138], "k_dnh": 121, "f_d": [121, 138, 139, 204], "f_dnh": 121, "mass_matrix_kin": 121, "k_kqdot": 121, "forcing_kin": 121, "k_ku": 121, "constrain": [121, 130, 139, 143], "kindiffdict": [121, 128, 133, 134, 138, 143], "new_method": [121, 130], "intens": [121, 122, 145, 148], "perm_mat": [121, 122, 140], "op_point": [121, 122, 130, 140], "beforehand": [121, 244], "to_linear": [121, 140], "recalcul": [121, 207], "hol_coneq": [121, 130, 139], "nonhol_coneq": [121, 130, 139], "nonconserv": 121, "form_lagranges_equ": [121, 130, 135, 139, 140], "qdot": [121, 128, 129, 190], "qdoubledot": 121, "lam": [121, 122, 144], "lagranges_equ": 121, "qd_ind": [121, 140], "q_dep": [121, 138, 140], "qd_dep": [121, 140], "solve_multipli": [121, 130], "sol_typ": 121, "array_lik": 121, "f_3": [122, 125, 144, 227], "f_c": [122, 130], "f_v": [122, 130], "f_a": 122, "q_d": 122, "u_i": [122, 140, 194, 204], "u_d": [122, 143], "q_op": [122, 130], "u_op": [122, 130], "qd_op": 122, "ud_op": [122, 130], "spatial": [123, 150, 186, 211], "angular_momentum": [123, 141, 143], "init_vprint": [123, 124, 141, 144, 186, 188, 190, 191, 194, 195], "linear_momentum": [123, 141, 143], "inertia_tupl": 123, "iyi": [123, 186], "izz": [123, 186], "ixi": [123, 186], "iyz": [123, 186], "izx": 123, "yy": [123, 195, 227], "yz": [123, 195, 197], "zx": [123, 195], "inertia_of_point_mass": 123, "pos_vec": 123, "px": [123, 166, 171, 237], "body1": 123, "body2": 123, "body3": 123, "h2": 123, "multibodi": [123, 126, 136, 142, 143, 144, 194], "vprint": [124, 185, 190, 191, 195], "vpprint": [124, 185, 191, 195], "vlatex": [124, 185, 186, 191, 195], "coord_stat": 125, "right_hand_sid": 125, "coordinate_deriv": [125, 144], "alg_con": [125, 144], "output_eqn": 125, "coord_idx": [125, 144], "speed_idx": [125, 144], "m_3": [125, 144, 155, 196], "exogen": [125, 144], "ref_fram": 125, "graviti": [125, 126, 130, 131, 133, 135, 143, 192, 265], "theta_dot": 125, "kin_explicit_rh": [125, 144], "dyn_implicit_mat": [125, 144], "dyn_implicit_rh": [125, 144], "symsystem": 125, "dae": [125, 144], "adjust": [125, 214, 218], "comb_implicit_mat": [125, 144], "comb_implicit_rh": [125, 144], "kinema": 125, "comb_explicit_rh": [125, 144], "compute_explicit_form": 125, "awhil": 125, "constant_symbol": 125, "dynamic_symbol": 125, "motiongenesi": [126, 143], "double_pendulum": 126, "motionvari": [126, 143], "newtonian": [126, 143], "simprot": [126, 143], "n_a": 126, "n_b": 126, "w_a_n": 126, "w_b_n": [126, 143], "p_o_p": 126, "p_p_r": 126, "v_o_n": [126, 143], "v2pt": [126, 143], "v_p_n": 126, "v_r_n": 126, "force_p": 126, "force_r": 126, "tfinal": 126, "integstp": 126, "some_filenam": 126, "parse_autolev": 126, "sympy_cod": 126, "include_numer": 126, "include_pydi": 126, "pydi": [126, 143, 186], "u1d": [126, 128, 130, 133, 134, 138], "u2d": [126, 128, 130, 133, 134, 138], "frame_n": 126, "frame_a": 126, "frame_b": 126, "point_o": 126, "particle_p": 126, "p_pt": 126, "particle_r": 126, "r_pt": 126, "set_po": [126, 190, 194], "v2pt_theori": [126, 128, 133, 134, 135, 140, 141, 143, 144, 190, 194], "initial_condit": [126, 143], "overwritten": 126, "e2row": 126, "eigvec": [126, 143], "eigenvec": 126, "deg2rad": 126, "0174533": 126, "wo": 126, "coef": [126, 143], "u3": [126, 128, 129, 131, 133, 134, 138, 143, 186, 190, 194], "strai": 126, "reassign": 126, "inher": [126, 250, 280], "rhs_x": 126, "i_b_bo": 126, "body_b": 126, "body_b_f": 126, "b_cm": 126, "b_f": 126, "scene": [126, 223, 280], "i_c_d": 126, "i_p_q": 126, "i_b_o": 126, "e3": [126, 218, 227], "i_p_o": 126, "e4": [126, 218], "p_so_o": 126, "nicheck": 126, "plug": [126, 181], "hurdl": 126, "gitlab": 126, "repo": 126, "ch4": 126, "ch5": 126, "ch6": 126, "cst": 126, "grammar": [126, 223], "roll": [127, 128, 136, 194, 231, 273], "disc": [127, 136, 194, 273], "bicycl": [127, 136, 142, 273], "nonminim": [127, 136, 140, 273], "linkag": [127, 136, 273], "meijaard2007": [128, 142], "steer": [128, 142], "purposefulli": 128, "mechanics_print": [128, 129, 133, 134, 135, 137, 138, 139], "yaw": 128, "ang": 128, "rear": 128, "wheel": 128, "pitch": 128, "q4": [128, 138, 188], "q5": [128, 188], "q4d": [128, 138], "q5d": 128, "u4": [128, 134, 138, 143], "u5": [128, 134], "u6": [128, 134], "u3d": [128, 133, 134], "u4d": 128, "u5d": 128, "u6d": 128, "explanatori": 128, "wfrad": 128, "wrrad": 128, "htangl": 128, "forkoffset": 128, "forklength": 128, "framelength": 128, "forkcg1": 128, "forkcg3": 128, "framecg1": 128, "framecg3": 128, "iwr11": 128, "iwr22": 128, "iwf11": 128, "iwf22": 128, "iframe11": 128, "iframe22": 128, "iframe33": 128, "iframe31": 128, "ifork11": 128, "ifork22": 128, "ifork33": 128, "ifork31": 128, "mframe": 128, "mfork": 128, "mwf": 128, "mwr": 128, "wr": 128, "tempfram": 128, "tempfork": 128, "orientnew": [128, 130, 133, 134, 135, 140, 144, 186, 188, 190, 192, 194, 195], "wr_cont": 128, "wr_mc": 128, "frame_mc": 128, "fork_mc": 128, "wf_mc": 128, "wf_cont": 128, "flip": [128, 161, 170, 231], "frame_i": 128, "fork_i": 128, "wr_i": 128, "wf_i": 128, "bodyfram": 128, "bodyfork": 128, "bodywr": 128, "bodywf": 128, "nonholonom": 128, "slip": [128, 132, 134, 194], "replic": 128, "conlist_spe": 128, "conlist_coord": 128, "gravit": [128, 133, 179, 192, 265], "aforement": [128, 192, 224, 263], "paperradrear": 128, "paperradfront": 128, "hta": 128, "trailpap": 128, "rake": 128, "paperwb": 128, "02": 128, "paperframecgx": 128, "paperframecgz": 128, "paperforkcgx": 128, "paperforkcgz": 128, "framecgnorm": 128, "framecgpar": 128, "tempa": 128, "tempb": 128, "tempc": 128, "paperforkl": 128, "forkcgnorm": 128, "forkcgpar": 128, "upright": 128, "val_dict": 128, "0603": 128, "1405": 128, "05892": 128, "00708": 128, "00756": 128, "kdd": [128, 133, 134], "centripet": 128, "corioli": 128, "forcing_lin": 128, "mm_full": 128, "_k_kqdot": 128, "xdot": 128, "lean": [128, 133, 135], "amat": 128, "summari": [129, 242, 267], "q_3": [129, 131, 194], "u_1": [129, 130, 131, 194, 206, 227], "u_2": [129, 130, 131, 194, 206, 227], "u_3": [129, 131, 194], "densiti": [129, 231, 242, 266], "link1": 129, "link2": 129, "link3": 129, "link4": 129, "joint1": 129, "joint2": 129, "joint3": 129, "j3": [129, 131, 155, 173], "fh": 129, "fhd": 129, "_method": 129, "_form_eom": 129, "eom": [130, 131, 140], "dq_dict": 130, "presimplifi": 130, "inp_vec": [130, 140], "lag": [130, 135, 140], "lm": [130, 139, 140, 204, 207], "lag_eq": [130, 140], "lam_op": 130, "mb": [131, 143], "ibzz": 131, "compound_pend": 131, "simple_pend": 131, "slider": 131, "rev1": 131, "rev2": 131, "w_r_n_qd": [133, 134], "dmc": [133, 134, 135], "uv": [133, 134, 176], "bodyd": [133, 134, 135], "bodylist": [133, 134], "revisit": [134, 194], "kane1985": [134, 138, 141, 142], "thorough": [134, 140, 224], "simplifc": 134, "f3": [134, 197, 211], "necessit": 134, "simplify_auxiliary_eq": 134, "lrh": 135, "planet": 136, "robot": 136, "fascin": 136, "trajectori": 136, "challeng": 136, "came": [136, 283], "tackl": [136, 244], "organ": 136, "amen": 136, "arduou": 136, "child_izz": 137, "child_mass": 137, "f_h": 138, "nh": 138, "ku": [138, 211], "dnh": 138, "f_r": [138, 140, 204], "speed_con": 138, "coord_con": 138, "u_dep": 138, "m_d": 139, "lam1": 139, "0_": 140, "blajer1994": [140, 142], "brought": [140, 231], "vel_p": 140, "a_op": 140, "b_op": 140, "m_op": 140, "a_lin": 140, "hasn": 140, "wikidyad": [141, 193], "wikidyadicproduct": [141, 193], "juxtaposit": [141, 185, 260], "otim": [141, 232, 233], "l_p": 141, "likins1973": [141, 193], "l_b": 141, "requisit": 141, "t_p": 141, "t_b": 141, "t_t": 141, "virtu": [141, 143], "blajer": 142, "wojciech": 142, "werner": 142, "schiehlen": 142, "walter": 142, "schirm": 142, "kane1983": [142, 195], "likin": [142, 193], "david": [142, 207], "spacecraft": 142, "1983": [142, 246], "meijaard": 142, "jim": 142, "papadopoulo": 142, "ruina": 142, "schwab": 142, "royal": 142, "societi": [142, 224], "2084": 142, "1955": 142, "982": 142, "lectur": [143, 205, 231], "rigibodi": 143, "proprietari": 143, "k3": [143, 201], "k4": 143, "b11": 143, "b12": 143, "b21": 143, "b22": 143, "xd": 143, "xd2": 143, "y1d": 143, "y2d": 143, "tina": 143, "overwrit": [143, 185], "dt2": 143, "dy2": 143, "ty": 143, "linsolv": [143, 209, 229, 230, 289], "nonlinsolv": [143, 229, 230, 289], "rowmatrix": 143, "colmatrix": 143, "diagmat": 143, "eigval": 143, "row_matrix": 143, "col_matrix": 143, "ao": 143, "i12": 143, "i23": 143, "i31": 143, "bf": 143, "p_o_q": 143, "mag": 143, "unitvec": 143, "qo": 143, "p_p_q": 143, "partial_veloc": [143, 186, 190], "a_o_n": 143, "set_acc": [143, 190, 194], "qb": [143, 199], "qbd": 143, "alf_b_n": 143, "set_ang_acc": [143, 186], "ang_acc_in": [143, 186], "force_o": 143, "torque_a": 143, "qa": 143, "qad": 143, "a_b": 143, "v1pt": 143, "v1pt_theori": [143, 190, 194], "a1pt": 143, "a1pt_theori": [143, 190], "a2pt": 143, "a2pt_theori": [143, 190, 194], "angvel": 143, "force_vector": 143, "center_of_mass": 143, "kindiff": 143, "ke": 143, "configura": 143, "tion_constraint": 143, "pendent": 143, "velocity_con": 143, "traint": 143, "acceleration_": 143, "u_auxilia": 143, "ry": 143, "matlplotlib": 143, "stiff": 143, "damp": 143, "introspect": 143, "rich": [143, 223], "media": [143, 149], "histori": 143, "esqu": 143, "cpython": 143, "pertin": [144, 198, 206], "alg_con_ful": 144, "symsystem1": 144, "symsystem2": 144, "symsystem3": 144, "raytransfermatrix": 145, "geometricrai": 145, "beamparamet": 145, "geometric_conj": 145, "gauss_conj": 145, "conjugate_gauss_beam": 145, "lens": 145, "gaussopt": 145, "wavelen": 145, "z_r": 145, "wavelength": [145, 150], "waist": 145, "rayleigh": [145, 231], "refract": [145, 147, 149, 150], "530e": 145, "88679245283019": 145, "92753330865999": 145, "w_0": [145, 224], "00100000000000000": 145, "freespac": 145, "00101413072159615": 145, "00210803120913829": 145, "r679": 145, "complex_beam_paramet": 145, "r680": 145, "gaussian_beam": 145, "spread": [145, 211, 231, 246], "00053": 145, "goui": 145, "55998576005696": 145, "2809": 145, "peak": 145, "waist_approximation_limit": 145, "paraxi": [145, 149], "06e": 145, "curvedmirror": 145, "curvedrefract": 145, "flatmirror": 145, "flatrefract": 145, "2x1": 145, "thinlen": 145, "r681": 145, "ray_transfer_matrix_analysi": 145, "waist_in": 145, "waist_out": 145, "s_in": 145, "s_out": 145, "w_o": 145, "gaussian_conj": 145, "z_r_in": 145, "incid": [145, 149], "z_r_out": 145, "emerg": [145, 199], "geometric_conj_ab": 145, "geometric_conj_af": 145, "geometric_conj_bf": 145, "rayleigh2waist": 145, "waist2rayleigh": 145, "optic": [147, 148, 149, 150, 273], "permitt": 147, "permeabl": 147, "fermat": 147, "electr": [147, 149, 192, 263, 265], "electromagnet": [147, 180, 192, 237, 265], "intrinsic_imped": 147, "149896229": [147, 150, 180], "kilogram": [147, 179, 181, 183], "1250000": 147, "amper": [147, 180], "refractive_index": 147, "299792458": [147, 150, 180, 183], "r682": 147, "optical_medium": 147, "travel": [147, 150, 192, 263, 265], "stoke": 148, "mueller": 148, "jones_vector": 148, "stokes_vector": 148, "half_wave_retard": 148, "polarizing_beam_splitt": 148, "jones_2_stok": 148, "\u2148": [148, 196, 210, 211, 230, 289], "\u03c7": 148, "\u03c8": 148, "i\u2080": 148, "plate": 148, "hwp": 148, "splitter": 148, "transmit": [148, 149], "pb": 148, "transmitted_port": 148, "reflected_port": 148, "transmitted_pow": 148, "reflected_pow": 148, "r683": 148, "jones_calculu": 148, "r684": 148, "mueller_calculu": 148, "r685": 148, "stokes_paramet": 148, "retard": 148, "poincar\u00e9": 148, "tilt": 148, "mayor": 148, "linear_polar": 148, "transmiss": [148, 149], "mueller_matrix": 148, "quarter_wave_retard": 148, "phase_retard": 148, "\u03b4": 148, "phia": 148, "phib": 148, "4x1": [148, 231], "phi_a": 148, "phi_b": 148, "qwp": 148, "reflective_filt": 148, "unpolar": 148, "transmissive_filt": 148, "attenu": 148, "transmitt": 148, "ndf": 148, "refraction_angl": 149, "fresnel_coeffici": 149, "brewster_angl": 149, "critical_angl": 149, "lens_makers_formula": 149, "mirror_formula": 149, "lens_formula": 149, "hyperfocal_dist": 149, "transverse_magnif": 149, "medium1": 149, "medium2": 149, "brewster": 149, "926093295503462": 149, "onset": 149, "850908514477849": 149, "02005": 149, "angle_of_incid": 149, "fresnel": [149, 211, 221], "polaris": 149, "te": 149, "undergo": 149, "317843553417859": 149, "348645229818821": 149, "658921776708929": 149, "651354770181179": 149, "235625382192159": 149, "971843958291041": 149, "816477005968898": 149, "577377951366403": 149, "r686": 149, "fresnel_equ": 149, "coc": 149, "0033": 149, "focal_length": 149, "n_len": 149, "n_surr": 149, "thick": 149, "1515151515151": 149, "0000000000000": 149, "3418463277618": 149, "41152": 149, "magnif": 149, "twave": 150, "time_period": 150, "wavenumb": 150, "phi1": 150, "phi2": 150, "w1": [150, 223], "w3": [150, 211], "superposit": [150, 161, 172, 198], "angular_veloc": 150, "tempor": 150, "r687": 151, "paulialgebra": 151, "evaluate_pauli_product": 151, "paulimatric": 151, "sigma3": 151, "nodal": [152, 177, 198], "hw": [152, 177], "coherent_st": 152, "coher": [152, 178, 184], "1d": [152, 154, 167, 186, 236], "wavefunct": [152, 165, 174, 177, 273], "r688": 153, "__cmp__": [153, 157, 176], "dagger": [153, 157, 163, 165, 168, 170, 175, 176, 273], "todo": [154, 156, 160, 161, 165, 166, 168, 169, 170, 171, 172, 204, 211, 218, 236], "operatorset": [154, 166], "positionbra3d": 154, "eigenbra": [154, 167, 173], "positionket3d": 154, "eigenket": [154, 167, 173], "positionstate3d": 154, "eigenst": [154, 166, 171, 173, 174], "position_x": 154, "position_i": 154, "position_z": 154, "pxbra": [154, 166], "pxket": [154, 166, 171], "pxop": [154, 166, 171], "xbra": [154, 166, 171], "xket": [154, 166, 171], "xop": [154, 166, 171], "yop": 154, "zop": 154, "cg": [155, 173, 180, 233], "momenta": 155, "uncoupl": [155, 173], "r689": 155, "j_3": [155, 173, 196], "r690": 155, "wigner3j": [155, 196], "wigner": [155, 173, 231, 273], "varshalovich": [155, 173], "zyla": 155, "theor": 155, "phy": [155, 181, 196], "083c01": 155, "r691": 155, "w3j": 155, "715": [155, 196, 211], "wigner6j": [155, 196], "j12": [155, 173], "j23": 155, "6j": [155, 196], "wigner9j": [155, 196], "j4": 155, "j34": 155, "j13": 155, "j24": 155, "9j": [155, 196], "cg_simp": 155, "r692": 155, "clebsh": 155, "rethink": 156, "figsiz": 156, "circuitplot": 156, "nqubit": [156, 160, 161, 170], "control_lin": 156, "gate_idx": [156, 160], "min_wir": 156, "max_wir": 156, "control_point": 156, "wire_idx": 156, "not_point": 156, "one_qubit_box": 156, "box": [156, 161, 163, 172, 174, 266, 273], "qubit": [156, 160, 161, 162, 163, 169, 273], "swap_point": 156, "two_qubit_box": 156, "createcg": 156, "latexnam": 156, "mock": 156, "mz": 156, "circuit_plot": 156, "min_qubit": [156, 160], "autogener": 156, "wire": 156, "j_0": 156, "r693": 157, "comm": [157, 176, 237], "plank": 158, "r694": 158, "05457162000000e": 158, "planck_const": 158, "hermetian": 159, "r695": 159, "r696": 159, "ket": [159, 164, 165, 166, 168, 170, 171, 174, 176], "bra": [159, 164, 165, 166, 168, 170, 171, 174, 176], "innerproduct": [159, 164, 165, 171, 173, 176], "outerproduct": [159, 165], "seamlessli": 159, "hermitian_adjoint": 159, "hermitian_transpos": 159, "_apply_operators_qubit": 160, "gate_sort": 160, "gate_simp": 160, "ugat": 160, "cgate": 160, "control_valu": 160, "cnot": 160, "eval_control": 160, "plot_gat": 160, "circ_plot": 160, "simplify_cg": 160, "cphase": 160, "cnotgat": 160, "qappli": [160, 161, 163, 165, 170, 273], "get_target_matrix": 160, "hadamardg": 160, "identityg": 160, "onequbitg": 160, "phaseg": 160, "swapgat": 160, "target1": 160, "target2": 160, "tgate": 160, "twoqubitg": 160, "xgate": 160, "ygate": 160, "zgate": 160, "bubbl": 160, "random_circuit": 160, "ngate": 160, "gate_spac": 160, "mermin": 161, "_represent_zg": 161, "oracleg": 161, "oracl": 161, "intqubit": [161, 170], "search_funct": 161, "wgate": 161, "apply_grov": 161, "grover_iter": 161, "qstate": 161, "wv": 161, "superposition_basi": 161, "numqubit": 161, "basis_st": 161, "matt": 162, "complexspac": 162, "directsumhilbertspac": 162, "r697": 162, "hilbertspac": 162, "fockspac": 162, "hilbert_spac": [162, 165, 174], "direct_sum": 162, "quantiz": [162, 273], "r698": 162, "mess": [162, 227, 230, 288], "fock_spac": 162, "r699": 162, "tensorpowerhilbertspac": 162, "r700": 162, "tensor_product": 162, "tensorproducthilbertspac": 162, "r701": 162, "clebsch": [163, 173, 196, 273], "gordan": [163, 173, 196, 273], "hilbert": [163, 165, 171, 273], "grover": [163, 273], "qft": [163, 172, 273], "shor": [163, 273], "brabas": [164, 165, 171, 174], "ketbas": [164, 165, 171, 174], "r702": 164, "inner_product": 164, "apply_oper": [165, 176], "identityoper": 165, "r703": 165, "r704": 165, "polymoni": 165, "operator_": 165, "28physic": 165, "old_assumpt": 165, "r705": 165, "outer_product": 165, "unitaryoper": 165, "operators_to_st": 166, "state_to_oper": 166, "_operators_to_st": 166, "state_map": 166, "_state_to_oper": 166, "statebas": [166, 171, 174], "piab": 167, "piabbra": 167, "piabhamiltonian": 167, "piabket": 167, "ip_doit": 168, "smarter": [169, 220], "rk": 169, "iqft": 169, "rkgate": 169, "qtf": 169, "povm": 170, "as_int": [170, 252], "qubit_valu": 170, "intqubitbra": 170, "00001": 170, "qubitbra": 170, "matrix_to_dens": 170, "matrix_to_qubit": 170, "measure_al": 170, "ensembl": 170, "measure_all_oneshot": 170, "oneshot": 170, "measure_parti": 170, "measure_partial_oneshot": 170, "qubit_to_matrix": 170, "enumerate_st": 171, "_enumerate_st": 171, "foo_1": 171, "foo_2": 171, "foo_3": 171, "test2": 171, "bar_4": 171, "bar_5": 171, "bar_10": 171, "get_basi": 171, "replace_non": 171, "operator_to_st": 171, "qexpr": 171, "integrate_result": 171, "orig_expr": 171, "x_ket": 171, "x_op": 171, "rep_expect": 171, "px_2": 171, "px_1": 171, "rep_innerproduct": 171, "_repres": 171, "_represent_foobasi": 171, "foobasi": 171, "_represent_szop": 171, "szupket": 171, "szop": 171, "sz": 171, "cmod": 172, "reformat": 172, "period_find": 172, "momemtum": 173, "j2op": 173, "jxbra": 173, "jx": 173, "jzket": 173, "jxbracoupl": 173, "jcoupl": 173, "jzketcoupl": 173, "jxket": 173, "jxketcoupl": 173, "jybra": 173, "jy": 173, "jybracoupl": 173, "jyket": 173, "jyketcoupl": 173, "jzbra": 173, "jz": 173, "jzbracoupl": 173, "j_4": [173, 196], "argular": 173, "jzop": 173, "passiv": 173, "r706": 173, "wignerd": 173, "jm": 173, "jj": 173, "r707": 173, "jcoupling_list": 173, "coupledspinst": 173, "spinstat": 173, "r708": 174, "dual_class": 174, "mn": [174, 211, 231], "ket_not": 174, "r709": 174, "k0": [174, 202, 204, 231], "orthogonalbra": 174, "orthogonalket": 174, "orthogonalst": 174, "_eval_adjoint": 174, "timedepbra": 174, "timedepst": 174, "timedepket": 174, "prob": [174, 231], "412214747707527": 174, "matrix_tensor_product": 175, "axb": 175, "xdagger": 175, "axc": 175, "bxc": 175, "tensor_product_simp": 175, "cxd": 175, "boson": 176, "fetter": 176, "welecka": 176, "secondqu": 176, "annihilateboson": 176, "fockstateket": 176, "bket": 176, "fockstatebosonket": 176, "annihilatefermion": 176, "createboson": 176, "is_only_q_annihil": 176, "destroi": [176, 220], "quasi": 176, "hole": 176, "is_only_q_cr": 176, "is_q_annihil": 176, "is_q_creat": 176, "antisymmetrictensor": 176, "bbra": 176, "fockstatebosonbra": 176, "bosonicbasi": 176, "fock": 176, "createfermion": 176, "wick": 176, "fbra": 176, "fockstatefermionbra": 176, "fket": 176, "fockstatefermionket": 176, "fixedbosonicbasi": 176, "n_particl": 176, "n_level": 176, "fockstat": 176, "occup": 176, "bosonbra": 176, "fockstatebra": 176, "fermi_level": 176, "r710": 176, "textwrap": [176, 252], "_q": 176, "get_subno": 176, "fermionicoper": 176, "has_q_annihil": 176, "q_annihil": 176, "has_q_creat": 176, "leftmost": 176, "q_creator": 176, "iter_q_annihil": 176, "iter_q_cr": 176, "0x": 176, "permutationoper": 176, "get_permut": 176, "varbosonicbasi": 176, "n_max": 176, "creator": 176, "evaluate_delta": 176, "einstein": [176, 237], "d_ij": 176, "_j": [176, 181, 196, 213], "d_ip": 176, "d_qp": 176, "matrix_rep": 176, "simplify_index_permut": 176, "permutation_oper": 176, "schemat": [176, 181], "abij": 176, "abji": 176, "baij": 176, "baji": 176, "permutlist": 176, "substitute_dummi": 176, "new_indic": 176, "pretty_indic": 176, "_get_ordered_dummi": 176, "_c": 176, "_d": 176, "index_group": 176, "string_of_lett": 176, "my_dummi": 176, "_v": [176, 195], "_p_0": 176, "_p_1": 176, "keep_only_fully_contract": 176, "sho": 177, "isotrop": 177, "mk": [178, 181], "legal": 178, "temperatur": [178, 192, 265], "dimensions": 178, "dimsys_si": [178, 179], "get_dimensional_depend": [178, 179], "has_integer_pow": 178, "dim_si": 178, "dimensionsystem": 178, "base_dim": 178, "derived_dim": 178, "dimensional_depend": 178, "can_transf_matrix": 178, "useless": [178, 202, 204], "inv_can_transf_matrix": 178, "dim_can_vector": 178, "dim_vector": 178, "is_consist": [178, 184], "is_dimensionless": 178, "list_can_dim": 178, "print_dim_bas": 178, "gravitational_const": [179, 183], "equivalent_dim": 179, "grav_eq": 179, "kepler": [179, 256], "venu": 179, "701": 179, "dai": [179, 183, 227], "venus_a": 179, "set_quantity_dimens": 179, "set_quantity_scale_factor": 179, "108208000e3": 179, "solar": 179, "solar_mass": 179, "9891e30": 179, "convert_to": [179, 180, 183, 200, 206], "5112118495813": 179, "659097795948": 179, "astrophys": 179, "pound": 180, "boltzmann": 180, "physicalconst": 180, "unitsystem": [180, 184], "kilomet": [180, 182, 183], "unitless": 180, "dimensionless": [180, 181], "discrep": 180, "speed_of_light": [180, 183], "cgs_gauss": 180, "quantity_simplifi": 180, "philosophi": [180, 227, 230, 273], "rough": 181, "mole": 181, "unavoid": 181, "d_3": 181, "d_2": [181, 207, 231], "underbrac": [181, 194], "countabl": [181, 230], "pmatrix": 181, "kg": [181, 266], "glu": 181, "men": 181, "heat": 181, "joul": 181, "calori": 181, "stori": 181, "chemistri": 181, "page52": 181, "1952": 181, "page78": 181, "deboer79": 181, "boer": 181, "818": 181, "levyleblond77": 181, "l\u00e9vy": 181, "leblond": 181, "conceptu": [181, 198, 265], "rivista": 181, "del": [181, 246, 256, 264, 288], "nuovo": [181, 196], "cimento": [181, 196], "1977": 181, "187": [181, 205], "214": 181, "anticip": 181, "bin_prefix": 182, "abbrev": [182, 183, 211], "latex_repr": [182, 183], "encapsul": [182, 204, 230, 244], "kilo": 182, "pretty_unicode_repr": 183, "pretty_ascii_repr": 183, "mathml_presentation_repr": 183, "is_prefix": 183, "abbrevi": [183, 199, 211, 230, 232], "unit_system": 183, "scale_factor": 183, "set_global_relative_scale_factor": 183, "reference_quant": 183, "target_unit": 183, "mile": 183, "atomic_mass_const": 183, "centimet": 183, "25146": 183, "609344": 183, "86400": 183, "660539060e": 183, "300000": 183, "planck": 183, "62963087839509e": 183, "base_unit": 184, "descr": 184, "dimension_system": 184, "derived_unit": 184, "overridden": [184, 198, 213, 288], "get_units_non_prefix": 184, "rigidli": 185, "entireti": 185, "_str": 185, "coordinatesym": [186, 188], "otherfram": [186, 256], "n_alpha_b": 186, "ny": [186, 202], "_3": [186, 196], "orient_body_fix": 186, "orient_space_fix": 186, "orient_quaternion": 186, "quaternion": [186, 190, 195, 256, 258], "userwarn": [186, 240, 247, 284], "rotation_ord": [186, 256, 258], "xzx": 186, "xyx": [186, 256, 258], "yzy": 186, "yxy": [186, 195], "yzx": [186, 195], "zxy": 186, "xzy": 186, "zyx": 186, "yxz": 186, "orient_explicit": 186, "lambda_x": [186, 256, 258], "lambda_i": [186, 256, 258], "lambda_z": [186, 256, 258], "q0": [186, 227, 256, 258], "newnam": 186, "gen_spe": [186, 190], "variable_map": 186, "a_x": [186, 195, 211], "b_x": [186, 188, 195, 237], "b_y": [186, 188, 195, 237], "a_z": [186, 195], "b_z": [186, 195, 237], "inlist": 186, "var_in_dcm": 186, "reexpress": [186, 261], "time_deriv": [186, 188, 192], "free_dynamicsymbol": 186, "codirect": 186, "dyadic_tensor": [186, 256], "frame1": 186, "frame2": [186, 188], "second_reference_fram": 186, "ixz": 186, "inertia_dyad": 186, "pertain": [187, 193], "fieldfunct": [187, 192], "curl": [187, 256, 259, 266], "vect": [187, 256, 259], "r_x": [187, 192], "r_y": [187, 192], "r_z": [187, 192], "gradient": [187, 196, 197, 256, 259, 265], "scalar_potenti": [187, 192, 259, 263], "scalar_field": [187, 192, 256, 259, 263], "grad_field": [187, 259], "scalar_potential_differ": [187, 192, 259, 263], "sympyfi": [187, 188, 190, 259], "position2": [187, 259], "vectfield": [187, 192, 259, 263], "is_conserv": [187, 192, 259, 263], "is_solenoid": [187, 192, 259, 263], "solenoid": [187, 259], "q6": 188, "vec1": 188, "vec2": 188, "n_x": 188, "rotating_reference_fram": 188, "time_derivatives_in_the_two_fram": 188, "otherpoint": 190, "outfram": 190, "fixedfram": 190, "get_motion_param": 190, "vectori": [190, 192, 260, 265], "timevalue1": 190, "timevalue2": 190, "313": 190, "vel_vec": 190, "q1dd": 191, "q2dd": 191, "charg": [192, 265], "displac": [192, 194, 265], "temper": 192, "earth": [192, 265], "4xy": [192, 265], "electric_potenti": [192, 263], "r1_x": 192, "r1_y": 192, "infinitesim": [192, 227, 263], "nabla": [192, 256, 262, 263], "f_y": [192, 263], "f_x": [192, 230, 263], "sink": [192, 263], "irrot": [192, 263], "conservative_field": [192, 263], "aug": [193, 230], "dyadic_product": [193, 264], "inc": [193, 205], "w_x": 194, "w_y": 194, "w_z": 194, "w_1": [194, 206], "w_2": [194, 206], "w_3": 194, "textrm": [194, 195, 219], "u_x": 194, "sp": 194, "oq": 194, "qp": 194, "rod": 194, "went": 194, "parallelogram": 195, "c_x": 195, "c_y": 195, "c_z": 195, "train": 195, "friend": 195, "xz": [195, 197], "zy": 195, "undergon": [195, 230], "vastli": 195, "wait": 195, "mold": 195, "bp": [195, 227], "bpp": 195, "zzx": 195, "multifram": 195, "direction": 195, "racah": 196, "gaunt": 196, "rasch03": 196, "regge58": 196, "regg": 196, "544": 196, "regge59": 196, "116": [196, 205], "1959": 196, "edmonds74": 196, "edmond": 196, "princeton": [196, 231], "1957": 196, "rasch": 196, "siam": [196, 249], "sci": 196, "1416": 196, "1428": 196, "liberatodebrito82": 196, "liberato": 196, "brito": 196, "homeier96": 196, "homeier": 196, "steinborn": 196, "mol": 196, "368": 196, "1996": [196, 205, 221, 229, 256], "googl": [196, 197, 230], "forum": [196, 230], "m4nzdu": 196, "7o38": 196, "jen": 196, "03": [196, 231], "oscar": 196, "gerardo": 196, "lazo": 196, "arjona": 196, "phil": 196, "adam": [196, 207], "lemaitr": 196, "2022": 196, "jyr2000": 196, "gmail": 196, "clebsch_gordan": 196, "2j_3": 196, "dot_rot_grad_ynm": 196, "_l": 196, "l_2": 196, "l_3": 196, "drastic": 196, "2l_1": 196, "2l_2": 196, "2l_3": 196, "1200": 196, "00689500421922113448": 196, "inflect": 196, "unsuit": 196, "dd": [196, 216], "ee": [196, 206], "j_5": 196, "j_6": 196, "richer": 196, "real_gaunt": 196, "realgaunt": 196, "m0": [196, 237], "00002480019791932209313156167": 196, "wigner_3j": 196, "wigner_6j": 196, "wigner_9j": 196, "j_7": 196, "j_8": 196, "j_9": 196, "05555555": 196, "1666666": 196, "wigner_d": 196, "j_z": 196, "j_y": 196, "\u03b3": [196, 278, 288], "wigner_d_smal": 196, "textbackend": 197, "plot_parametr": 197, "plot_implicit": 197, "plot3d_parametric_lin": 197, "plot3d_parametric_surfac": 197, "zlabel": 197, "aspect_ratio": 197, "ylim": 197, "axis_cent": 197, "xscale": 197, "yscale": 197, "autoscal": 197, "textplot": 197, "_seri": [197, 208], "baseseri": 197, "nonparametr": 197, "basebackend": 197, "parametric2dlineseri": 197, "parametric3dlineseri": 197, "red": 197, "cyan": 197, "grayscal": 197, "integers_onli": 197, "surfaceover2drangeseri": 197, "parametricsurfaceseri": 197, "surface_color": 197, "range1": 197, "range2": 197, "fill_between": 197, "inch": 197, "expr_x": 197, "expr_i": 197, "canva": 197, "range_x": 197, "range_i": 197, "nb_of_points_x": 197, "nb_of_points_i": 197, "expr_z": 197, "range_u": 197, "range_v": 197, "nb_of_points_u": 197, "nb_of_points_v": 197, "x_var": 197, "y_var": 197, "mesh": 197, "p8": 197, "p9": 197, "nrow": [197, 200], "ncolumn": 197, "stuff": [197, 242, 244, 252], "is_2dlin": 197, "oblig": 197, "only_integ": 197, "get_seg": 197, "get_color_arrai": 197, "var_start_end": 197, "r711": 197, "luiz": 197, "henriqu": 197, "figueiredo": 197, "r712": 197, "line3dbaseseri": 197, "surfacebaseseri": 197, "var_start_end_x": 197, "var_start_end_i": 197, "var_start_end_u": 197, "var_start_end_v": 197, "implicitseri": 197, "has_equ": 197, "use_interval_math": 197, "centric": 197, "get_mesh": 197, "process_seri": 197, "_process_seri": 197, "anymor": 197, "keyboard": 197, "mous": 197, "pyglet_plot": 197, "screenshot": 197, "camera": 197, "zoom": 197, "numpad": 197, "ordin": [197, 227, 252], "f5": 197, "f6": 197, "f8": 197, "drag": 197, "button": [197, 243], "curvilinear": [197, 260, 261], "__setitem__": 197, "zfade4": 197, "key1": 197, "value1": 197, "key2": 197, "value2": 197, "unbound_theta": 197, "wirefram": 197, "saddl": 197, "fz": 197, "_______________________________________________________": 197, "mediterranean": 198, "cultur": 198, "arab": 198, "lighten": 198, "tapestri": 198, "woven": 198, "european": 198, "soil": 198, "plausibl": 198, "teeter": 198, "totter": 198, "outweigh": 198, "excit": 198, "amus": 198, "kempf": 198, "1944": 198, "20th": 198, "dedekind": 198, "intim": 198, "disciplin": 198, "toolset": 198, "atiyah69": [198, 205], "gear": 198, "greuel2008": [198, 205], "interspers": 198, "lr": 198, "ilex": 198, "\u211a": [198, 211], "localis": 198, "abridg": 198, "free_modul": [198, 202], "quotient_r": [198, 202], "overload": [198, 201, 202, 260, 283], "polynomialr": [198, 202, 209], "domain_or_r": [198, 202], "quotientr": [198, 202], "base_id": [198, 202], "elbow": 198, "room": 198, "componentwis": [198, 211], "inclin": 198, "biproduct": 198, "quotient_modul": 198, "is_submodul": 198, "multiply_id": 198, "identity_hom": 198, "freemodul": 198, "freemoduleel": 198, "conicis": 198, "_contain": 198, "_syzygi": 198, "_in_terms_of_gener": 198, "_intersect": 198, "_module_quoti": 198, "reduce_el": [198, 206], "represantit": 198, "in_terms_of_gener": 198, "inclusion_hom": 198, "rela": 198, "relb": 198, "is_full_modul": 198, "module_quoti": 198, "opt": [198, 204, 223, 242, 284], "coincis": 198, "syzygy_modul": 198, "r_n": 198, "_contains_elem": 198, "_contains_id": 198, "_quotient": 198, "_union": 198, "_product": 198, "is_whole_r": 198, "is_maxim": 198, "is_primari": 198, "is_rad": 198, "is_princip": 198, "xj": 198, "satur": 198, "subquoti": 198, "quotientmodul": 198, "subquotientmodul": 198, "killed_modul": 198, "quotientmoduleel": 198, "kill": [198, 202, 242], "quotient_hom": 198, "ker": 198, "surject": 198, "cokernel": 198, "coker": 198, "meaningfulli": 198, "restrict_domain": 198, "homomoprh": 198, "modulehomomorph": [198, 206], "_ker": 198, "_img": 198, "_kernel": 198, "_imag": 198, "_restrict_domain": 198, "_restrict_codomain": 198, "_quotient_domain": 198, "_quotient_codomain": 198, "_appli": 198, "_mul_scalar": 198, "_compos": 198, "_add": [198, 217], "is_inject": 198, "quotient_domain": 198, "is_isomorph": 198, "preimag": 198, "restrict_codomain": 198, "is_surject": 198, "quotient_codomain": 198, "induct": 198, "monogen": 198, "monogenicfiniteextens": [198, 202], "finiteextens": 198, "sqrt2": [198, 201], "extensionel": [198, 202], "notinvert": [198, 204, 207], "overview": [199, 230, 264, 265], "nu_1": 199, "nu_2": 199, "nu_n": 199, "nu_i": 199, "customarili": 199, "ua": 199, "endow": [199, 207], "resp": [199, 202, 227], "divmod": [199, 201, 202], "cb": [199, 249], "sqf_list": [199, 202, 207], "sqf": [199, 202, 207, 224], "buchberg": [199, 204, 205, 207], "solve_poly_system": [199, 207, 229, 230], "ddm": 200, "fmt": [200, 202, 206], "matrix1": 200, "sdm": [200, 204], "dmnonsquarematrixerror": 200, "zz_i": [200, 201], "from_dict_sympi": 200, "ncol": 200, "elemsdict": 200, "from_list_sympi": 200, "from_list": [200, 202, 207, 208], "construct_domain": [200, 201, 202, 207], "from_rep": 200, "drep": 200, "dm": [200, 206], "ownership": 200, "lll": 200, "lov\u00e1sz": 200, "r713": 200, "r714": 200, "dmvalueerror": 200, "dmrankerror": [200, 206], "20160": 200, "33768": 200, "39578": 200, "47757": 200, "r715": 200, "lll_transform": 200, "lov\u00e1sz_lattice_basis_reduction_algorithm": 200, "20221029115428": 200, "elt": [200, 206], "lovasz": 200, "bremner": 200, "scc": 200, "to_dens": 200, "to_field": [200, 202, 207], "to_spars": 200, "aq": 200, "ccc": [200, 230], "from_ddm": 200, "domainerror": [200, 204, 207], "to_ddm": 200, "r716": 200, "pythonmpq": [201, 202], "srepr": [201, 283], "strength": 201, "richardon": 201, "dup_factor_list": 201, "factortool": [201, 204], "dup_": [201, 204], "dmp_": [201, 204], "z1": [201, 202, 229], "is_field": [201, 202], "quo": [201, 202, 204, 207], "rem": [201, 202, 204, 207], "exquo": [201, 202, 207], "exactquotientfail": [201, 202, 204, 207], "mpz": [201, 202], "of_typ": [201, 202], "z1_sympi": 201, "to_sympi": [201, 202], "from_sympi": [201, 202], "forth": [201, 206], "z_sympi": 201, "z_zz": 201, "coercionfail": [201, 204], "sum_domain": 201, "expressions_sympi": 201, "expressions_dom": 201, "result_dom": 201, "e_dom": 201, "result_sympi": 201, "qq_i": 201, "gaussianinteg": [201, 202], "gaussianrationalfield": [201, 202], "gaussianr": [201, 202], "finitefield": [201, 202], "pythonfinitefield": [201, 202], "gmpyfinitefield": [201, 202], "welcom": [201, 227, 281], "realel": [201, 202], "complexel": [201, 202], "mpc": 201, "xr": [201, 209], "zc": 201, "1j": 201, "_mpc_": 201, "realfield": [201, 202], "rr100": 201, "33333333333333333333333333333": 201, "hack": [201, 227, 240], "algebraic_field": [201, 202, 204, 206], "algebraicfield": [201, 202, 204, 206], "sqrt3": 201, "x_dom": 201, "p_expr": [201, 202], "polyel": [201, 202, 204, 208, 209, 211], "p_dom": 201, "xk": [201, 202, 213], "yk": [201, 202], "poly_r": [201, 202], "old_polynomialr": 201, "globalpolynomialr": 201, "polyclass": [201, 202, 207], "yr": [201, 209], "broader": 201, "get_field": [201, 202], "frac_field": [201, 202], "rationalfield": [201, 202], "old_frac_field": [201, 202], "fractionfield": [201, 202], "old_fractionfield": 201, "xf": 201, "yf": 201, "fracfield": [201, 202], "expressiondomain": [201, 202], "elements_sympi": 201, "elements_k": 201, "convert_from": [201, 202], "num_zz": 201, "num_qq": 201, "domainel": [201, 202, 209], "encompass": 201, "all_coeff": [201, 202, 207], "dom": [201, 202, 204, 219], "strang": 201, "hybrid": 201, "unreli": 201, "usefulli": 202, "pythonr": [202, 209], "p_domain": 202, "ez": [202, 237], "get_r": 202, "has_assoc_field": 202, "has_assoc_r": 202, "alg_field_from_poli": [202, 206], "root_index": 202, "almosteq": 202, "cyclotomic_field": [202, 206], "zeta7": 202, "zeta_": 202, "lexord": [202, 207], "from_algebraicfield": 202, "from_complexfield": 202, "from_expressiondomain": 202, "from_expressionrawdomain": 202, "from_ff": 202, "modularinteg": 202, "from_ff_gmpi": 202, "from_ff_python": 202, "from_fractionfield": 202, "from_globalpolynomialr": 202, "from_monogenicfiniteextens": 202, "from_polynomialr": 202, "from_qq_gmpi": 202, "from_qq_python": 202, "from_realfield": 202, "from_zz_gmpi": 202, "from_zz_python": 202, "gcdex": [202, 207], "get_exact": 202, "half_gcdex": [202, 207], "is_pid": 202, "is_r": 202, "is_nonposit": 202, "is_on": [202, 207], "rersiv": 202, "__neg__": 202, "__pos__": 202, "__sub__": 202, "q_domain": 202, "q_expr": 202, "x_domain": 202, "alg": [202, 206, 210], "trait": 202, "is_unit": 202, "__divmod__": 202, "__floordiv__": 202, "__mod__": [202, 206], "simpledomain": 202, "compositedomain": 202, "from_qq": 202, "from_zz": 202, "gmpyinteg": 202, "pythoninteg": 202, "gmpyrationalfield": 202, "pythonrationalfield": 202, "from_gaussianrationalfield": 202, "gaussianel": 202, "gaussiandomain": 202, "qq_python": 202, "zz_python": 202, "z2": 202, "z3": 202, "z4": 202, "from_gaussianinteg": 202, "as_algebraicfield": 202, "orig_ext": 202, "integral_basi": [202, 206], "maximal_ord": [202, 206], "zeta5": 202, "primes_abov": [202, 206], "primeid": [202, 206], "galois_group": [202, 206, 207], "by_nam": [202, 206, 207], "c6": 202, "max_tri": [202, 206, 207], "numberfield": [202, 206, 207], "galoisgroup": [202, 206, 207], "to_alg_num": [202, 206], "legibl": 202, "to_rat": 202, "mpelement": 202, "complexfield": 202, "lc": [202, 204, 207], "domain_or_field": 202, "dmf": 202, "coercibl": 202, "monomialord": [202, 207], "xring": 202, "vring": 202, "sring": [202, 208, 209], "polyr": [202, 204, 209], "factor_list": [202, 207, 288], "add_gen": 202, "drop_to_ground": 202, "monomial_basi": 202, "206": [202, 207], "744": 202, "945": [202, 208], "symmetric_poli": [202, 207], "is_monomi": [202, 207], "const": [202, 211], "inplac": 202, "shallow": [202, 218], "zero_monom": 202, "fv": 202, "clo": 202, "p64": 202, "qv": 202, "f0": 202, "imul_num": 202, "itercoeff": 202, "itermonom": 202, "iterterm": 202, "leading_expv": 202, "leading_monom": 202, "leading_term": 202, "listcoeff": 202, "listmonom": 202, "listterm": 202, "monom": [202, 207], "strip_zero": 202, "r717": 202, "lauer": 202, "1976": 202, "242": 202, "247": [202, 205, 229], "800205": 202, "806342": 202, "tail_degre": 202, "xfield": 202, "vfield": [202, 262], "sfield": [202, 262], "fracel": [202, 211], "lev": 202, "add_ground": [202, 207], "all_monom": [202, 207], "all_term": [202, 207], "cauchy_lower_bound": 202, "cauchy_upper_bound": 202, "clear_denom": [202, 207], "count_complex_root": 202, "sup": [202, 207, 211, 219], "count_real_root": 202, "deflat": [202, 207], "y_i": [202, 204, 206, 207, 227], "x_j": [202, 204, 207], "degree_list": [202, 207], "eject": [202, 207], "exquo_ground": [202, 207], "factor_list_includ": [202, 207], "from_dict": [202, 207], "from_sympy_list": 202, "gff_list": [202, 207], "homogeneous_ord": [202, 207, 224, 227], "is_cyclotom": [202, 207], "is_ground": [202, 207], "is_homogen": [202, 207], "is_irreduc": [202, 207], "is_linear": [202, 207], "is_mon": [202, 207], "is_quadrat": [202, 207], "is_sqf": [202, 207], "l1_norm": [202, 207], "l2_norm_squar": 202, "max_norm": [202, 207], "mignotte_sep_bound_squar": 202, "mignott": [202, 204], "mul_ground": [202, 207], "pdiv": [202, 207], "pexquo": [202, 207], "pquo": [202, 207], "prem": [202, 207], "quo_ground": [202, 207], "refine_root": [202, 206, 207], "includepr": [202, 204, 207], "sqf_list_includ": [202, 207], "sqf_norm": [202, 207], "sqf_part": [202, 207], "sqr": [202, 207], "sturm": [202, 207], "sub_ground": [202, 207], "to_dict": 202, "to_exact": [202, 207], "to_r": [202, 207], "to_sympy_dict": 202, "to_sympy_list": 202, "to_tupl": 202, "total_degre": [202, 207, 224], "trunc": [202, 207, 210], "frac_unifi": 202, "half_per": 202, "poly_unifi": 202, "gr\u00f6bner": 203, "wester": [203, 274], "agca": [203, 274], "l0": 204, "legitim": 204, "uninterest": 204, "bulk": [204, 221], "x_u": 204, "dup__": 204, "densebas": 204, "dmp_lc": 204, "poly_lc": 204, "dmp_tc": 204, "poly_tc": 204, "dmp_ground_lc": 204, "dmp_ground_tc": 204, "dmp_true_lt": 204, "n_1": [204, 229, 231], "n_k": 204, "dmp_degre": 204, "dmp_degree_in": 204, "dmp_degree_list": 204, "dmp_strip": 204, "dmp_valid": 204, "dup_revers": 204, "dmp_copi": 204, "dmp_to_tupl": 204, "dmp_normal": 204, "dmp_convert": 204, "to_domain": 204, "dmp_from_sympi": 204, "dmp_nth": 204, "dmp_ground_nth": 204, "dmp_zero_p": 204, "dmp_zero": 204, "dmp_one_p": 204, "dmp_one": 204, "dmp_ground_p": 204, "dmp_ground": 204, "dmp_negative_p": 204, "dmp_positive_p": 204, "dmp_from_dict": 204, "dmp_to_dict": 204, "dmp_swap": 204, "dmp_permut": 204, "dmp_nest": 204, "dmp_rais": 204, "dmp_deflat": 204, "dmp_multi_defl": 204, "dmp_inflat": 204, "dmp_exclud": 204, "dmp_includ": 204, "dmp_inject": 204, "dmp_eject": 204, "dmp_terms_gcd": 204, "dmp_list_term": 204, "dmp_apply_pair": 204, "dmp_slice": 204, "dup_random": 204, "densearith": 204, "dmp_add_term": 204, "dmp_sub_term": 204, "dmp_mul_term": 204, "dmp_add_ground": 204, "dmp_sub_ground": 204, "dmp_mul_ground": 204, "dmp_quo_ground": 204, "dmp_exquo_ground": 204, "dup_lshift": 204, "dup_rshift": 204, "dmp_ab": 204, "dmp_neg": 204, "dmp_add": 204, "dmp_sub": 204, "dmp_add_mul": 204, "dmp_sub_mul": 204, "dmp_mul": 204, "dmp_sqr": 204, "dmp_pow": 204, "dmp_pdiv": 204, "dmp_prem": 204, "dmp_pquo": 204, "dmp_pexquo": 204, "dmp_rr_div": 204, "dmp_ff_div": 204, "dmp_div": 204, "dmp_rem": 204, "dmp_quo": 204, "dmp_exquo": 204, "dmp_max_norm": 204, "dmp_l1_norm": 204, "dmp_expand": 204, "densetool": 204, "dmp_integr": 204, "dmp_integrate_in": 204, "dmp_diff": 204, "dmp_diff_in": 204, "dmp_eval": 204, "dmp_eval_in": 204, "dmp_eval_tail": 204, "dmp_diff_eval_in": 204, "dmp_trunc": 204, "dmp_ground_trunc": 204, "dup_mon": 204, "dmp_ground_mon": 204, "dup_cont": 204, "dmp_ground_cont": 204, "dup_primit": 204, "dmp_ground_primit": 204, "dup_extract": 204, "dmp_ground_extract": 204, "dup_real_imag": 204, "bivari": [204, 210, 227, 231], "dup_mirror": 204, "dup_scal": 204, "dup_shift": 204, "dup_transform": 204, "dmp_compos": 204, "dup_decompos": 204, "t_m": 204, "r718": 204, "dmp_lift": 204, "dup_sign_vari": 204, "dmp_clear_denom": 204, "k_0": 204, "dmp_revert": 204, "gf_": 204, "justifi": 204, "necess": 204, "u_0": 204, "m_0": [204, 224], "m_n": 204, "gf_crt1": 204, "9215": 204, "9405": 204, "9603": 204, "gf_crt2": 204, "gf_int": 204, "gf_degre": 204, "gf_lc": 204, "gf_tc": 204, "gf_strip": 204, "gf_trunc": 204, "gf_normal": 204, "gf_from_dict": 204, "gf_to_dict": 204, "gf_from_int_poli": 204, "gf_to_int_poli": 204, "gf_neg": 204, "gf_add_ground": 204, "gf_sub_ground": 204, "gf_mul_ground": 204, "gf_quo_ground": 204, "gf_add": 204, "gf_sub": 204, "gf_mul": 204, "gf_sqr": 204, "gf_add_mul": 204, "gf_sub_mul": 204, "gf_expand": 204, "gf_div": 204, "r719": 204, "monagan93": [204, 205], "r720": 204, "gathen99": [204, 205], "gf_rem": 204, "gf_quo": 204, "gf_exquo": 204, "gf_lshift": 204, "gf_rshift": 204, "gf_pow": 204, "gf_pow_mod": 204, "r721": 204, "gf_gcd": 204, "gf_lcm": 204, "gf_cofactor": 204, "gf_gcdex": 204, "eea": 204, "r722": 204, "gf_monic": 204, "gf_diff": 204, "gf_eval": 204, "gf_multi_ev": 204, "gf_compos": 204, "gf_compose_mod": 204, "gf_trace_map": 204, "r723": 204, "gathen92": [204, 205], "gf_random": 204, "gf_irreduc": 204, "gf_irreducible_p": 204, "gf_sqf_p": 204, "gf_sqf_part": 204, "gf_sqf_list": 204, "e_2": [204, 207], "e_k": 204, "f_j": [204, 221], "gf_sqf": 204, "r724": 204, "geddes92": [204, 205], "gf_qmatrix": 204, "berlekamp": 204, "gf_qbasi": 204, "gf_berlekamp": 204, "gf_zassenhau": 204, "gf_shoup": 204, "gf_factor_sqf": 204, "gf_factor": 204, "e_d": 204, "cantor": 204, "zassenhau": [204, 206], "shoup": [204, 205], "kaltofen": [204, 205], "gathen": [204, 205], "gf_factor_method": 204, "r725": 204, "gf_valu": 204, "2204": 204, "gf_csolv": 204, "congruent": [204, 221, 224], "189": 204, "112": [204, 208], "139": 204, "r726": 204, "ivan": 204, "niven": 204, "zuckerman": 204, "montgomeri": 204, "infeas": [204, 207], "sdm_": 204, "distributedmodul": 204, "sdm_monomial_mul": 204, "sdm_monomial_deg": 204, "f_5": 204, "sdm_monomial_divid": 204, "sdm_lc": 204, "sdm_to_dict": 204, "sdm_from_dict": 204, "dic": 204, "sdm_add": 204, "2f_1": 204, "3f_1": 204, "yf_1": 204, "xf_1": 204, "sdm_lm": 204, "sdm_lt": 204, "sdm_mul_term": 204, "2xy": [204, 282], "8xy": 204, "2y": [204, 224, 227, 230, 282], "sdm_zero": 204, "sdm_deg": 204, "sdm_from_vector": 204, "sdm_to_vector": 204, "variant": [204, 227, 230], "qg": 204, "remark": [204, 210, 221, 227], "uf": 204, "vg": 204, "zout": 204, "euclidtool": 204, "dmp_half_gcdex": 204, "dmp_gcdex": 204, "dmp_invert": 204, "dmp_euclidean_pr": 204, "dmp_primitive_pr": 204, "exceedingli": 204, "collin": [204, 205], "collins67": [204, 205], "subdomain": 204, "2l": 204, "remainin": 204, "subdetermin": 204, "n_2": [204, 231], "n_": [204, 224], "abnorm": 204, "gamma_i": 204, "brown": [204, 205, 231], "traub": [204, 205], "browntraub71": [204, 205], "brown78": [204, 205], "discoveri": [204, 284], "dmp_inner_subresult": 204, "729": 204, "sre": 204, "dmp_subresult": 204, "dmp_prs_result": 204, "dmp_zz_modular_result": 204, "dmp_zz_collins_result": 204, "dmp_qq_collins_result": 204, "dmp_result": 204, "dmp_discrimin": 204, "dmp_rr_prs_gcd": 204, "cff": [204, 207], "cfg": [204, 207], "dmp_ff_prs_gcd": 204, "dmp_zz_heu_gcd": 204, "r727": 204, "liao95": [204, 205], "dmp_qq_heu_gcd": 204, "dmp_inner_gcd": 204, "dmp_gcd": 204, "dmp_lcm": 204, "dmp_content": 204, "dmp_primit": 204, "dmp_cancel": 204, "dmp_trial_divis": 204, "dmp_zz_mignotte_bound": 204, "dup_zz_hensel_step": 204, "hensel": 204, "r728": 204, "dup_zz_hensel_lift": 204, "f_list": 204, "multifactor": 204, "r729": 204, "dup_zz_zassenhau": 204, "dup_zz_irreducible_p": 204, "eisenstein": 204, "dup_cyclotomic_p": 204, "bradford": 204, "russel": 204, "251": 204, "berlin": 204, "heidelberg": 204, "dup_zz_cyclotomic_poli": 204, "dup_zz_cyclotomic_factor": 204, "r730": 204, "weisstein09": [204, 205], "dup_zz_factor_sqf": 204, "dup_zz_factor": 204, "r731": 204, "dmp_zz_wang_non_divisor": 204, "wang": [204, 205, 249], "eez": 204, "dmp_zz_wang_test_point": 204, "dmp_zz_wang_lead_coeff": 204, "dmp_zz_diophantin": 204, "dmp_zz_wang_hensel_lift": 204, "dmp_zz_wang": 204, "enhanc": [204, 231], "r732": 204, "wang78": [204, 205], "r733": 204, "dmp_zz_factor": 204, "r734": 204, "dmp_ext_factor": 204, "dup_gf_factor": 204, "dmp_factor_list": 204, "dmp_factor_list_includ": 204, "dmp_irreducible_p": 204, "groebnertool": 204, "polyconfig": [204, 207], "f5b": [204, 207], "spoli": 204, "red_groebn": 204, "beckerweispfenning93": 204, "is_groebn": 204, "is_minim": 204, "is_reduc": 204, "fglmtool": 204, "matrix_fglm": 204, "o_to": 204, "o_from": 204, "r735": 204, "fauger": [204, 207], "gianni": [204, 207, 229], "mora": [204, 205, 207, 229], "sdm_spoli": 204, "phantom": 204, "sca": 204, "defn": 204, "sdm_ecart": 204, "ecart": 204, "sdm_nf_mora": 204, "nf": 204, "sdm_groebner": 204, "sugar": [204, 205, 236], "giovini": [204, 205], "polyopt": [204, 208], "build_opt": 204, "basepolynomialerror": 204, "operationnotsupport": 204, "heuristicgcdfail": 204, "homomorphismfail": 204, "isomorphismfail": [204, 206], "extraneousfactor": 204, "evaluationfail": 204, "refinementfail": 204, "notrevers": [204, 207], "notalgebra": 204, "polynomialerror": [204, 207], "unificationfail": [204, 206], "generatorsneed": 204, "computationfail": 204, "exc": 204, "generatorserror": 204, "univariatepolynomialerror": 204, "multivariatepolynomialerror": [204, 207], "polificationfail": 204, "orig": 204, "optionerror": 204, "flagerror": 204, "modulargcd": 204, "modgcd_univari": 204, "monagan00": [204, 205], "modgcd_bivari": 204, "modgcd_multivari": 204, "_modgcd_multivariate_p": 204, "brown71": [204, 205], "degbound": 204, "contbound": 204, "func_field_modgcd": 204, "reconstuct": 204, "z_p": 204, "hoeij04": [204, 205], "scarc": 204, "hsin": 205, "chao": 205, "liao": 205, "fateman": 205, "montreal": 205, "quebec": 205, "canada": 205, "240": [205, 213, 259], "von": [205, 231], "zur": 205, "gerhard": 205, "cambridg": [205, 224], "weisstein": 205, "cyclotomicpolynomi": 205, "1215": 205, "1231": 205, "czapor": 205, "labahn": 205, "monagan": [205, 223], "disco": 205, "721": 205, "kaltofen98": 205, "subquadrat": 205, "223": 205, "1998": [205, 224], "1179": 205, "1197": 205, "shoup95": 205, "397": 205, "shoup91": 205, "cox97": [205, 207], "shea": [205, 207], "ajwa95": 205, "ajwa": 205, "liu": 205, "groebner": [205, 206, 207, 210, 223, 229, 230], "cites": 205, "ist": [205, 220], "psu": [205, 220], "mycites": 205, "login": 205, "bose03": 205, "bose": 205, "guiver": 205, "giovini91": 205, "bronstein93": [205, 207], "salvi": [205, 208], "kiev": 205, "ukrain": 205, "buchberger01": [205, 207], "theorist": 205, "moreno": 205, "diaz": 205, "freir": 205, "eurocast": 205, "februari": 205, "davenport88": 205, "siret": 205, "tournier": 205, "london": [205, 224], "124": [205, 277], "greuel": 205, "pfister": 205, "atiyah": 205, "macdonald": 205, "142": 205, "1971": [205, 227], "505": 205, "249": 205, "wittkopf": 205, "478": 205, "hoeij": 205, "297": [205, 207], "304": [205, 207], "wang81": 205, "adic": 205, "symsac": 205, "hoeij02": 205, "manwright94": [205, 207], "yiu": 205, "kwong": 205, "franci": 205, "wright": 205, "dispers": [205, 231], "190347": 205, "190413": 205, "koepf98": [205, 207], "koepf": [205, 213, 223], "vieweg": 205, "abramov71": [205, 207], "abramov": [205, 229], "ussr": 205, "330": 205, "man93": [205, 207], "376": 205, "sciencedirect": [205, 220], "pii": [205, 220], "s0747717183710539": 205, "kapur1994": 205, "deepak": 205, "kapur": 205, "tushar": 205, "saxena": 205, "yang": 205, "dixon": 205, "researchg": [205, 231], "2514261_algebraic_and_geometric_reasoning_using_dixon_result": 205, "palancz08": 205, "pal\u00e1ncz": 205, "zaletnyik": 205, "jl": [205, 244], "awang": 205, "ew": 205, "grafarend": 205, "geodet": 205, "geodesi": 205, "225607735_dixon_result": 205, "s_solution_of_systems_of_geodetic_polynomial_equ": 205, "bruce97": 205, "bruce": 205, "randal": 205, "donald": [205, 246], "mundi": 205, "artifici": [205, 214], "intellig": [205, 223, 227, 288], "orlando": 205, "www2": 205, "duke": 205, "donaldlab": 205, "symbolicnumericalcomput": 205, "045": 205, "087": 205, "stiller96": 205, "stiller": 205, "citeseerx": [205, 220], "viewdoc": [205, 220], "590": 205, "2021": 205, "rep1": [205, 220], "cohen93": [205, 206], "henri": 205, "olga": 206, "tausski": 206, "zimmer": 206, "pohst": 206, "articul": 206, "mathfrak": 206, "regul": 206, "alpha_m": 206, "round_two": 206, "prime_decomp": 206, "prime_valu": 206, "minimal_polynomi": 206, "field_isomorph": 206, "nilrad": 206, "z_k": 206, "zk": 206, "ordinarili": 206, "503": 206, "r736": 206, "r737": 206, "powerbasisel": 206, "ramif": 206, "as_submodul": 206, "bundl": 206, "test_factor": 206, "deliber": 206, "is_inert": 206, "inert": [206, 227], "reduce_anp": 206, "reduce_alg_num": 206, "field_gen": 206, "just_gen": 206, "reagent": 206, "kummer": 206, "1847": 206, "ueber": 206, "zerlegung": 206, "crell": 206, "r738": 206, "poly_from_expr": [206, 207], "tschirnhausen": 206, "maxtriesexcept": 206, "g_name": 206, "_minpoly_compos": 206, "stall": 206, "alli": 206, "monomorph": 206, "alpha_i": 206, "alpha_n": 206, "lincomb": 206, "primtiiv": 206, "meanwhil": 206, "moduleel": 206, "powerbasi": 206, "submodule_from_matrix": 206, "ancestor": 206, "to_col": 206, "nca": 206, "circumst": [206, 282], "_mult_tab": 206, "successfulli": 206, "moduleendomorph": 206, "innerendomorph": 206, "endomorphismr": 206, "spec": [206, 207], "i_n": [206, 207, 232], "include_self": 206, "basis_el": 206, "element_from_r": 206, "endomorphism_r": 206, "is_compat_col": 206, "mult_tab": 206, "mult": 206, "closurefailur": 206, "nearest_common_ancestor": 206, "number_field": 206, "power_basis_ancestor": 206, "incom": 206, "halv": 206, "submodule_from_gen": 206, "over_power_basi": 206, "starts_with_un": 206, "hnf_modulu": 206, "whole_submodul": 206, "element_from_anp": 206, "element_from_alg_num": 206, "element_from_poli": 206, "qq_matrix": 206, "basis_element_pullback": 206, "discard_befor": 206, "structureerror": 206, "cohen00": 206, "make_mod_elt": 206, "qq_col": 206, "from_int_list": 206, "is_compat": 206, "reduced_mod_p": 206, "to_ancestor": 206, "anc": 206, "to_par": 206, "to_anp": 206, "inner_endomorph": 206, "event": [206, 231], "find_min_poli": 206, "missingunityerror": 206, "is_int": 206, "get_num_denom": 206, "extract_fundamental_discrimin": 206, "r739": 206, "algintpow": 206, "zeta_pow": 206, "r740": 206, "coeff_search": 206, "supplement_a_subspac": 206, "v_n": 206, "w_r": 206, "w_j": 206, "u_j": 206, "r741": 206, "parallel_poly_from_expr": 207, "exprtool": 207, "gcd_list": 207, "lcm_list": 207, "destruct": 207, "2079": 207, "1401": 207, "2715": 207, "6720": 207, "1092": 207, "gff": 207, "check_sqf": 207, "count_root": 207, "nroot": [207, 229], "maxstep": 207, "cleanup": 207, "73205080756888": 207, "73205080756887729352744634151": 207, "ground_root": 207, "nth_power_roots_poli": 207, "r_g": 207, "_signsimp": 207, "q_n": 207, "is_zero_dimension": [207, 230], "donal": 207, "230": [207, 229], "ec": 207, "em": 207, "di": 207, "dispersionset": 207, "gp": [207, 227], "free_symbols_in_domain": 207, "from_poli": 207, "get_domain": 207, "get_modulu": 207, "has_only_gen": 207, "vincent": [207, 249], "akrita": 207, "strzebonski": 207, "va": 207, "alkiviadi": 207, "panagioti": 207, "vigkla": 207, "265": 207, "279": 207, "polnomi": 207, "is_multivari": 207, "is_univari": 207, "ltrim": 207, "make_monic_over_integers_by_scaling_root": 207, "_only_": 207, "sturmian": 207, "subresultants_qq_zz": 207, "suffix": [207, 244], "_pg": 207, "_amv": 207, "rem_z": 207, "premultipli": 207, "rat_clear_denom": 207, "_ignor": 207, "retract": 207, "same_root": 207, "set_domain": 207, "set_modulu": 207, "termwis": 207, "fglm": 207, "r742": 207, "horner_schem": 207, "equispac": 207, "viet": 207, "itermonomi": 207, "min_degre": 207, "gib": 207, "monomial_kei": 207, "monomial_count": 207, "gradedlexord": 207, "reversedgradedlexord": 207, "clear_cach": 207, "_get_interv": 207, "165": [207, 231, 249], "169": 207, "eval_approx": 207, "evalf_r": 207, "eval_r": 207, "69629": 207, "71318": 207, "805": 207, "3275": 207, "65536": [207, 210, 211], "414645": 207, "131072": 207, "6545": 207, "104755": 207, "2097152": 207, "6634255": 207, "_all_root": 207, "use_cach": 207, "_complexes_index": 207, "_complexes_sort": 207, "_count_root": 207, "_ensure_complexes_init": 207, "_ensure_reals_init": 207, "_eval_is_imaginari": 207, "_get_complex": 207, "_get_complexes_sqf": 207, "currentfactor": 207, "_get_real": 207, "_get_reals_sqf": 207, "_get_root": 207, "_indexed_root": 207, "_new": 207, "_postprocess_root": 207, "_preprocess_root": 207, "heroic": [207, 229], "_real_root": 207, "_reals_index": 207, "_reals_sort": 207, "_refine_complex": 207, "_roots_trivi": 207, "_set_interv": 207, "return_mpmath": 207, "861136": 207, "86113631159405258": 207, "polyroot": 207, "unread": [207, 247], "casu": 207, "irreducibili": 207, "inexpress": 207, "unsolv": [207, 230], "r743": 207, "cubic_equ": 207, "trigonometric_and_hyperbolic_solut": 207, "specialpoli": 207, "swinnerton_dyer_poli": 207, "swinnerton": 207, "dyer": 207, "random_poli": 207, "gegenbau": [207, 211], "jakob": 207, "psum": 207, "3144337": 207, "r744": 207, "bernoulli_c_poli": 207, "reindex": 207, "swiss": 207, "knife": 207, "630": 207, "5124": 207, "12465": 207, "155": 207, "r745": 207, "partfrac": [207, 213], "undertermin": 207, "_w": [207, 218], "apart_list": 207, "assemble_partfrac_list": 207, "bunch": 207, "pfd": 207, "r746": 207, "partial_list": 207, "reassembl": 207, "pfda": 207, "r747": 207, "r748": 207, "r749": 207, "r750": 207, "r751": 207, "r752": 207, "r753": 207, "r754": 207, "widen": 208, "ring_seri": 208, "rs_sin": 208, "166666666666667": 208, "puiseux": 208, "rs_co": 208, "rs_tan": 208, "took": [208, 220], "rs_exp": 208, "everyon": 208, "blazingli": 208, "promin": 208, "gradual": 208, "rs_": 208, "rs_log": 208, "rs_lambertw": 208, "rs_atan": 208, "arctang": 208, "rs_asin": 208, "_tan1": 208, "rs_cot": 208, "rs_cos_sin": 208, "rs_atanh": 208, "rs_sinh": 208, "rs_cosh": 208, "rs_tanh": 208, "rs_hadamard_exp": 208, "inver": 208, "rs_mul": 208, "rs_squar": 208, "rs_pow": 208, "rs_series_invers": 208, "rs_series_revers": 208, "a_kx_k": 208, "ar_i": 208, "ar_": 208, "ae": 208, "rs_trunc": 208, "rs_nth_root": 208, "160249952256379": 208, "44224957030741": 208, "rs_sub": 208, "rs_diff": 208, "rs_integr": 208, "rs_newton": 208, "rs_compose_add": 208, "r755": 208, "bostan": 208, "flajolet": 208, "schost": 208, "4579": 208, "institut": 208, "nation": 208, "recherch": 208, "informatiqu": 208, "automatiqu": 208, "rs_is_puiseux": 208, "rs_puiseux": 208, "rs_puiseux2": 208, "rs_series_from_list": 208, "concur": 208, "rs_fun": 208, "_tan": 208, "_nth": 208, "_root": 208, "_fun": 208, "mul_xin": 208, "pow_xin": 208, "_raw": 209, "sympy_eqs_to_r": 209, "eqs_r": 209, "eqs_to_matrix": 209, "eqs_coeff": 209, "eqs_rh": 209, "_solve_lin_si": 209, "_solve_lin_sys_compon": 209, "critiqu": 210, "wester1999": 210, "systemat": 210, "153": 210, "\u2124": [210, 211, 230, 289], "unm": 210, "driver": [211, 243], "adequ": 211, "emptyprint": 211, "_sympystr": 211, "mathml": 211, "inconveni": 211, "_print_": 211, "expr_class": 211, "hierarchi": [211, 231], "_print_rat": 211, "_print_numb": 211, "_print_atom": 211, "_print_bas": 211, "print_latex": 211, "mylatexprint": 211, "_print_deriv": 211, "print_my_latex": 211, "modop": 211, "subcompon": 211, "outermost": [211, 219, 223, 235], "modopmodewrong": 211, "modopnestedwrong": 211, "modopsettingswrong": 211, "subobject": 211, "infrastructur": [211, 228], "printer_exampl": 211, "set_global_set": 211, "stringpict": 211, "pretty_symbologi": 211, "prettyform": 211, "hline": 211, "vline": 211, "ascii": 211, "_pretti": 211, "use_unicode_sqrt_char": 211, "root_not": 211, "mat_symbol_styl": 211, "prettifi": 211, "bold": 211, "c89codeprint": 211, "print_ccod": 211, "tgamma": 211, "known_functions_c89": 211, "known_functions_c99": 211, "fmax": 211, "fmin": 211, "lgamma": 211, "indent_cod": 211, "cfunction_format": 211, "derefer": 211, "dereferenc": 211, "symbols_to_declar": 211, "not_supported_funct": 211, "code_text": 211, "m_sqrt2": 211, "math_macro": 211, "m_sqrt2l": 211, "cxx": 211, "cxx98codeprint": 211, "print_rcod": 211, "rcode": 211, "known_funct": 211, "_rcode": 211, "rfunction_str": 211, "rfunction_format": 211, "ifels": 211, "type_map": 211, "name_mangl": 211, "mangl": 211, "floor1": 211, "floor2": 211, "print_fcod": 211, "_fcode": 211, "conjg": 211, "32768": 211, "7182818284590452d0": 211, "1415926535897932d0": 211, "718281828459045235360287d0": 211, "141592653589793238462643d0": 211, "869604401089358618834491d0": 211, "mygamma": 211, "allow_unknown_funct": 211, "smtlib": 211, "smtlibprint": 211, "symbol_t": 211, "_smtlib": 211, "_default_set": 211, "known_const": 211, "ite": 211, "known_typ": 211, "smtlib_cod": 211, "auto_assert": 211, "auto_declar": 211, "prefix_express": 211, "suffix_express": 211, "log_warn": 211, "booleanfunct": 211, "dreal": 211, "14159": 211, "my_smt_variable_for_pi": 211, "postfix": [211, 249], "riski": 211, "sound": [211, 288], "pw": 211, "pythontyp": 211, "smt_builtin_func": 211, "existing_smtlib_fcn": 211, "user_def_func": 211, "fun": [211, 228, 281], "coshintegr": 211, "cosintegr": 211, "expintegralei": 211, "factorialpow": 211, "heavisidetheta": 211, "sinhintegr": 211, "sinintegr": 211, "arccosh": 211, "arccoth": 211, "arcsinh": 211, "arctanh": 211, "dirichleteta": 211, "gegenbauerc": 211, "hypergeometricpfq": 211, "sphericalbesselj": 211, "logintegr": 211, "lucasl": 211, "mathieu": 211, "riemann_xi": 211, "riemannxi": 211, "stieltjesgamma": 211, "sphericalbess": 211, "mcodeprint": 211, "_mcode": 211, "mcode": 211, "maplecodeprint": 211, "_mapl": 211, "maple_cod": 211, "print_maple_cod": 211, "javascriptcodeprint": 211, "_javascript": 211, "js_function_str": 211, "known_fcns_src1": 211, "known_fcns_src2": 211, "conj": 211, "juliacodeprint": 211, "_julia": 211, "harmless": [211, 284], "cosmet": 211, "existing_julia_fcn": 211, "coshint": 211, "cosint": 211, "sinhint": 211, "sinint": 211, "bincoeff": 211, "logint": 211, "gammaln": 211, "octavecodeprint": 211, "_octav": 211, "recip": [211, 249], "powf": 211, "signum": 211, "rustcodeprint": 211, "_rust_cod": 211, "7_f64": 211, "_aesara": 211, "tensorvari": 211, "floatx": 211, "squeez": 211, "dim_handl": 211, "gtkmathview": 211, "widget": 211, "print_gtk": 211, "libgtkmathview": 211, "start_view": 211, "_lambdacod": 211, "accepted_latex_funct": 211, "parenthesize_sup": 211, "fold_frac_pow": 211, "fold_func_bracket": 211, "fold_short_frac": 211, "inv_trig_styl": 211, "itex": 211, "ln_notat": 211, "long_frac_ratio": 211, "mat_delim": 211, "mat_str": 211, "mul_symbol": 211, "symbol_nam": 211, "gothic_re_im": 211, "decimal_separ": 211, "diff_oper": 211, "smallmatrix": [211, 282], "amsmath": 211, "fracton": 211, "semicolon": 211, "monospac": 211, "mathtt": 211, "mathml2": 211, "mathmlprinterbas": 211, "mathmlcontentprint": 211, "mathmlpresentationprint": 211, "chapter4": 211, "_mathml_cont": 211, "mathml_tag": 211, "chapter3": 211, "_mathml_present": 211, "utf": 211, "mul_symbol_mathml_numb": 211, "xb7": 211, "print_mathml": [211, 287], "mrow": 211, "mpmathprint": 211, "fully_qualified_modul": 211, "print_python": 211, "textual": 211, "reprprint": 211, "_sympyrepr": 211, "reprifi": 211, "sympy_integ": 211, "displayhook": [211, 242], "pprint_nod": 211, "nb2": 211, "print_nod": 211, "asssumpt": 211, "determinisit": 211, "backtrac": 211, "print_tre": 211, "outputbuff": 211, "dvioption": 211, "outputtexfil": 211, "extra_preambl": 211, "latex_set": 211, "postscript": 211, "tex": 211, "eulervm": 211, "sty": 211, "debian": 211, "ubuntu": 211, "unset": [211, 223], "gimp": 211, "evinc": 211, "kdvi": 211, "xdvi": 211, "xdg": 211, "system_default_view": 211, "gracefulli": [211, 235], "bytesio": 211, "usepackag": 211, "amsfont": 211, "renewcommand": 211, "popen": 211, "phidd": 211, "bitmap": 211, "split_super_sub": 211, "var_sub1__sup_sub2": 211, "assignmenterror": 211, "bitwiseand": 211, "bitwiseor": 211, "bitwisexor": 211, "precedence_valu": 211, "kroneckerproduct": 211, "tensadd": [211, 237], "tensmul": [211, 237], "precedence_funct": 211, "precedence_float": 211, "precedence_fracel": 211, "precedence_integ": 211, "precedence_mul": 211, "precedence_polyel": 211, "precedence_r": 211, "precedence_unevaluatedexpr": 211, "databas": [211, 221], "pretty_use_unicod": 211, "pretty_try_use_unicod": 211, "xstr": 211, "greek_lett": 211, "digit_2txt": 211, "ONE": 211, "seven": 211, "symb_2txt": 211, "parenthesi": [211, 235], "\u2080": 211, "\u2081": 211, "\u2082": 211, "\u2084": 211, "\u2085": 211, "\u2086": 211, "\u2087": 211, "\u2088": 211, "\u2089": 211, "\u2090": 211, "\u1d66": 211, "\u1d6a": 211, "\u2091": 211, "\u1d67": 211, "\u2095": 211, "\u1d62": 211, "\u2096": 211, "\u2097": 211, "\u2098": 211, "\u2099": 211, "\u2092": 211, "\u209a": 211, "\u1d69": 211, "\u1d63": 211, "\u1d68": 211, "\u209b": 211, "\u209c": 211, "\u1d64": 211, "\u1d65": 211, "\u2093": 211, "\u2070": 211, "\u00b9": 211, "\u00b2": 211, "\u00b3": 211, "\u2074": 211, "\u2075": 211, "\u2076": 211, "\u2077": 211, "\u2078": 211, "\u2079": 211, "\u2071": 211, "\u207f": 211, "xobj": 211, "vobj": 211, "hobj": 211, "vf": 211, "\u00bd": 211, "\u2153": 211, "\u00bc": 211, "\u2155": 211, "\u2159": 211, "\u215b": 211, "\u2154": 211, "\u2156": 211, "\u00be": 211, "\u2157": 211, "\u215c": 211, "\u2158": 211, "\u215a": 211, "\u215d": 211, "\u215e": 211, "xsym": 211, "symbologi": 211, "atoms_t": 211, "\u2102": [211, 289], "emptysequ": [211, 217], "\u2115": 211, "\u2115\u2080": 211, "\u211d": [211, 289], "symmetricdiffer": [211, 219, 230], "pretty_atom": 211, "atom_nam": 211, "pretty_symbol": 211, "symb_nam": 211, "bold_nam": 211, "stylis": 211, "_print_meijerg": 211, "_print_hyp": 211, "jurjen": 211, "bo": 211, "hate": 211, "spammer": 211, "pietjepuk314": 211, "oc": [211, 262], "oohai": 211, "gedg": 211, "email": 211, "mun": 211, "terminal_str": 211, "baselin": 211, "leftslash": 211, "slash": [211, 242], "paren": 211, "ifascii_nougli": 211, "line_break": 211, "ugli": 211, "terminal_width": 211, "wider": 211, "maxdepth": 211, "labelfunc": 211, "digraph": [211, 249, 287], "rankdir": [211, 287], "_sparse_": 212, "flavor": 212, "________": [212, 231, 249], "x\u2080": 212, "greatli": 212, "numbered_symbol": [212, 223, 227, 249], "postprocessor": [212, 223], "reduced_expr": [212, 223], "formalpowerseri": 213, "coeff_bel": 213, "formalpowerseriescompos": 213, "r756": 213, "comtet": 213, "loui": 213, "reidel": 213, "1974": 213, "720": [213, 227, 249], "formalpowerseriesinvers": 213, "r757": 213, "upto": [213, 218, 227], "formalpowerseriesproduct": 213, "rational_algorithm": 213, "compute_fp": 213, "hyper_algorithm": 213, "omposit": 213, "bell_seq": 213, "finiteformalpowerseri": 213, "rational_independ": 213, "ra": 213, "admiss": [213, 216], "r758": 213, "r759": 213, "simpled": 213, "exp_r": 213, "explik": 213, "hyper_r": 213, "rsolve_hypergeometr": 213, "r760": 213, "r761": 213, "solve_d": 213, "fourierseri": 214, "scalex": 214, "shiftx": 214, "sigma_approxim": 214, "gibb": 214, "bigl": 214, "bigr": 214, "lanczo": 214, "r762": 214, "gibbs_phenomenon": 214, "r763": 214, "sawtooth": 214, "bn": 214, "r764": 214, "limitseq": 216, "difference_delta": 216, "r765": 216, "differencedelta": 216, "limit_seq": [216, 218], "safeguard": 216, "r766": 216, "kauer": 216, "seqper": 217, "seqformula": 217, "seqbas": 217, "coeff_mul": 217, "find_linear_recurr": 217, "gfvar": 217, "seqadd": 217, "seqmul": 217, "_mul": 217, "recursiveseq": 217, "fib": 217, "invok": [218, 242, 243], "workhors": 218, "succ": [218, 231], "asymp": 218, "exposit": 218, "gloss": 218, "wsym": 218, "test_rewrite1": 218, "build_expression_tre": 218, "mrv_leadterm": 218, "e0": 218, "calculate_seri": 218, "limitinf": 218, "constantli": 218, "subsset": 218, "mrv_max1": 218, "mrv_max3": 218, "expsf": 218, "expsg": 218, "expsboth": 218, "o2": 218, "do_sub": 218, "r767": 218, "limsup_": 218, "7048138294": 218, "7182818285": 218, "6349839002": 218, "6449340668": 218, "shank": 218, "6881721793": 218, "6931396564": 218, "6931471806": 218, "6931471805599453094172321215": 218, "r768": 218, "residue_theorem": 218, "neighborhood": 219, "rim": 219, "conditionset": [219, 230, 231, 289], "affirm": 219, "infimum": 219, "imageset": [219, 230, 289], "is_clos": 219, "closed": 219, "is_disjoint": 219, "r769": 219, "disjoint_set": 219, "is_open": 219, "is_proper_subset": 219, "is_proper_superset": 219, "left_open": 219, "is_superset": 219, "isdisjoint": 219, "issubset": 219, "issuperset": 219, "productset": [219, 230], "powerset": 219, "fancyset": 219, "complexregion": [219, 230], "disjointunion": 219, "lebesgu": 219, "r770": 219, "power_set": 219, "symmetric_differ": 219, "r771": 219, "right_open": 219, "mpi": 219, "r772": 219, "interval_": 219, "as_rel": 219, "is_left_unbound": 219, "is_right_unbound": 219, "r773": 219, "r774": 219, "union_": 219, "28set_theori": 219, "r775": 219, "intersection_": 219, "coin": [219, 231], "r776": 219, "cartesian_product": 219, "is_iter": 219, "r777": 219, "complementset": 219, "r778": 219, "disjoint_union": 219, "r779": 219, "empty_set": 219, "r780": 219, "universal_set": 219, "flambda": 219, "square_iter": 219, "base_set": 219, "cartesiancomplexregion": 219, "polarcomplexregion": 219, "unit_disk": 219, "upper_half_unit_disk": 219, "a_interv": 219, "b_interv": 219, "from_real": 219, "pset": 219, "rset": 219, "thetaset": 219, "upper_half_plan": 219, "normalize_theta_set": 219, "r781": 219, "r782": 219, "axiom_of_power_set": 219, "sin_sol": 219, "r783": 219, "element_": 219, "varnoth": 219, "tr0": 220, "tr1": 220, "tr2": 220, "tr2i": 220, "tr3": 220, "tr4": 220, "tr5": 220, "tr6": 220, "tr7": 220, "tr8": 220, "tr9": 220, "tr10": 220, "tr10i": 220, "tr11": 220, "tr12": 220, "tr12i": 220, "tr13": 220, "trmorri": 220, "tr14": 220, "tr15": 220, "tr16": 220, "tr22": 220, "tr111": 220, "ctr1": 220, "ctr4": 220, "rl1": 220, "rl2": 220, "deem": 220, "932": 220, "016": 220, "serendipit": 220, "dead": 220, "newa": 220, "lucki": 220, "sqt": 220, "_tr56": 220, "un": [220, 221], "r784": 220, "morri": 220, "27s_law": 220, "trpower": 220, "r785": 220, "list_of_trigonometric_ident": 220, "reduction_formula": 220, "ctr2": 220, "ctr3": 220, "r786": 220, "s0895717706001609": 220, "dimitar": 220, "vlahovski": 220, "technolog": 220, "xiuqin": 220, "zhong": 220, "zhenb": 220, "zeng": 220, "1169": 220, "1177": 220, "657": 220, "2478": 220, "sosmath": 220, "trig5": 220, "symplifi": [221, 223], "roach1996": 221, "roach1997": 221, "p_q": 221, "reachabl": [221, 231], "f_q": 221, "undo": [221, 288], "whenc": 221, "game": 221, "twofold": 221, "incongru": 221, "wlog": 221, "alpha_r": 221, "beta_r": 221, "blindli": 221, "messi": 221, "k_u": 221, "l_v": 221, "k_j": 221, "c_w": 221, "r_j": 221, "l_u": 221, "res_": 221, "delta_i": 221, "add_formula": 221, "addb": 221, "sum_0": 221, "test_hyperexpand": 221, "test_formula": 221, "typo": 221, "suboptim": 221, "imath": 221, "b1prime": 221, "vital": 221, "308": 221, "hongguang": [222, 268], "fu": [222, 223, 268], "logcombin": [223, 227, 230], "unmodifi": 223, "my_measur": 223, "nthroot": 223, "max_len": 223, "surd": 223, "kroneckersimp": 223, "besselsimp": 223, "strigonometr": 223, "399": 223, "hypersimilar": 223, "rational_convers": 223, "base10": 223, "6004799503160655": 223, "eq_x": 223, "max_term": 223, "collect_sqrt": 223, "polish": 223, "rad_ration": 223, "collect_const": 223, "rcollect": 223, "analyz": [223, 236], "ratsimpmodprim": 223, "r787": 223, "pearc": 223, "1145768": 223, "1145809": 223, "trigsimp_groebn": 223, "bb1": 223, "be1": 223, "bb2": 223, "be2": 223, "bei": 223, "sqrtdenest": 223, "max_it": 223, "unrad": [223, 229], "r788": 223, "20210806201615": 223, "ibm": 223, "fagin": 223, "symb85": 223, "r789": 223, "cybertest": 223, "opt_sub": 223, "as_unevaluated_bas": 223, "tree_cs": 223, "hyperegeometr": 223, "epathtool": 223, "epath": 223, "ebnf": 223, "za": [223, 231], "xml": 223, "xpath": 223, "hasattr": [223, 245], "beginn": [224, 226, 227, 229, 230, 289], "diophantu": 224, "mathematician": [224, 230], "citi": 224, "alexandria": 224, "father": 224, "hi": 224, "arithmetica": 224, "diop_solv": 224, "classify_diop": 224, "diop_linear": 224, "diop_quadrat": 224, "diop_ternary_quadrat": 224, "diop_ternary_quadratic_norm": 224, "diop_general_pythagorean": 224, "diop_general_sum_of_squar": 224, "diop_general_sum_of_even_pow": 224, "merge_solut": 224, "3y": 224, "9369318": 224, "find_dn": 224, "diop_dn": 224, "transformation_to_dn": 224, "920": 224, "5y": 224, "BY": 224, "transformation_to_norm": 224, "t4": 224, "t5": 224, "sum_of_squar": 224, "providean": 224, "eqyptian": 224, "thilinaatsympi": 224, "andreescu": 224, "titu": 224, "andrica": 224, "dorin": 224, "cucurezeanu": 224, "ion": 224, "diophantineequ": 224, "alpertron": 224, "20160323033111": 224, "jpr2718": 224, "ax2p": 224, "permute_sign": [224, 249], "signed_permut": [224, 249], "_dict": 224, "base_solution_linear": 224, "r790": 224, "r791": 224, "pell": 224, "lmm": 224, "r792": 224, "393": 224, "13y": 224, "986": 224, "49299": 224, "1570": 224, "diop_bf_dn": 224, "robertson": 224, "20160323033128": 224, "cornacchia": 224, "r793": 224, "nitaj": 224, "r794": 224, "numbertheori": 224, "r795": 224, "r796": 224, "676": 224, "884": 224, "fxz": 224, "3xy": 224, "r797": 224, "fxy": 224, "gyz": 224, "hxz": 224, "r798": 224, "cremona": 224, "rusin": 224, "2x_": 224, "m4": 224, "general_sum_of_squar": 224, "8m": 224, "r799": 224, "2345": 224, "proofwiki": 224, "integer_as_sum_of_three_squar": 224, "general_sum_of_even_pow": 224, "power_represent": 224, "1729": 224, "stopiter": 224, "sum_of_three_squar": 224, "r800": 224, "44542": 224, "207": 224, "schorn": 224, "sum_of_four_squar": 224, "3456": 224, "1294585930293": 224, "2161": 224, "1137796": 224, "r801": 224, "sum_of_pow": 224, "evenli": 224, "var_t": 224, "pqa": 224, "r802": 224, "ur": 224, "dv": 224, "vr": 224, "r803": 224, "parametrize_ternary_quadrat": 224, "r804": 224, "nigel": 224, "ldescent": 224, "4x": [224, 230, 277], "7y": 224, "5x": 224, "r805": 224, "r806": 224, "nottingham": 224, "worktrib": 224, "1023265": 224, "gaussian_reduc": 224, "r807": 224, "20201021115213": 224, "cuhk": 224, "hk": 224, "wkshum": 224, "404": 224, "r808": 224, "holzer": 224, "mordel": 224, "r809": 224, "r810": 224, "prime_as_sum_of_two_squar": 224, "r811": 224, "sqf_normal": 224, "r812": 224, "legrang": 224, "csusm": 224, "aitken_html": 224, "diophantinesolutionset": 224, "symbols_seq": 224, "dict_iter": 224, "diophantineequationtyp": 224, "binaryquadrat": 224, "r813": 224, "r814": 224, "inhomogeneousternaryquadrat": 224, "inhomogen": [224, 227, 229], "homogeneousternaryquadraticnorm": 224, "homogeneousternaryquadrat": 224, "inhomogeneousgeneralquadrat": 224, "homogeneousgeneralquadrat": 224, "generalsumofsquar": 224, "r815": 224, "generalpythagorean": 224, "cubicthu": 224, "thue": 224, "generalsumofevenpow": 224, "pde": [225, 227, 268], "subcategori": [226, 267], "solve_rational_inequ": 226, "solve_poly_inequ": 226, "reduce_rational_inequ": 226, "reduce_abs_inequ": 226, "solvifi": [226, 230], "autodetect": [227, 228], "odesimp": 227, "ode_ord": [227, 228, 229], "deutil": [227, 228], "best_hint": 227, "unevaluat": 227, "test_od": 227, "ode_": 227, "hintnam": [227, 228], "classify_sysod": 227, "almost_linear": 227, "dsolve_system": 227, "ode_hintnam": 227, "allhint": [227, 228], "tough": 227, "nth_linear_homogeneous_constant_coeff_integr": 227, "1st_linear": 227, "nth_linear": 227, "indep": 227, "indep_div_dep": 227, "undetermined_coeffici": 227, "_best": 227, "nth_algebra": 227, "1st_homogeneous_coeff_best": 227, "1st_homogeneous_coeff_subs_indep_div_dep": 227, "1st_homogeneous_coeff_subs_dep_div_indep": 227, "1st_power_seri": 227, "lie_group": 227, "nth_linear_constant_coeff_homogen": 227, "nth_linear_euler_eq_homogen": 227, "nth_algebraic_integr": 227, "1st_exact_integr": 227, "1st_linear_integr": 227, "bernoulli_integr": 227, "1st_homogeneous_coeff_subs_indep_div_dep_integr": 227, "1st_homogeneous_coeff_subs_dep_div_indep_integr": 227, "nth_linear_constant_coeff_undetermined_coeffici": 227, "nth_linear_constant_coeff_variation_of_paramet": 227, "nth_linear_constant_coeff_variation_of_parameters_integr": 227, "solve_for_func": [227, 228], "homogeneouscoeffsubsdepdivindep": 227, "homogeneouscoeffsubsindepdivdep": 227, "varepsilon": 227, "genform": [227, 228], "starrett": 227, "checkinfsol": 227, "constantsimp": 227, "symbolnam": 227, "startnumb": 227, "endnumb": 227, "renumb": 227, "absorpt": 227, "assist": 227, "constant_renumb": 227, "1st_rational_riccati": 227, "riccati_special_minus2": 227, "linear_coeffici": 227, "separable_reduc": 227, "nth_linear_euler_eq_nonhomogeneous_undetermined_coeffici": 227, "nth_linear_euler_eq_nonhomogeneous_variation_of_paramet": 227, "liouvil": 227, "2nd_linear_airi": 227, "2nd_linear_bessel": 227, "2nd_hypergeometr": 227, "2nd_hypergeometric_integr": 227, "nth_order_reduc": 227, "2nd_power_series_ordinari": 227, "2nd_power_series_regular": 227, "almost_linear_integr": 227, "linear_coefficients_integr": 227, "separable_reduced_integr": 227, "nth_linear_euler_eq_nonhomogeneous_variation_of_parameters_integr": 227, "liouville_integr": 227, "2nd_nonlinear_autonomous_conserv": 227, "2nd_nonlinear_autonomous_conserved_integr": 227, "newconst": 227, "ode_sol_simpl": 227, "trysolv": 227, "sola": 227, "solb": 227, "listofsolut": 227, "ode_problem": 227, "firstexact": 227, "exact_differential_equ": 227, "tenenbaum": 227, "dover": 227, "1963": 227, "homogeneouscoeffbest": 227, "ode_1st_homogeneous_coeff_best_integr": 227, "homogeneous_differential_equ": 227, "firstlinear": 227, "linear_differential_equ": 227, "order_equation_with_variable_coeffici": 227, "rationalriccati": 227, "atleast": 227, "riccati_equ": 227, "thieu": 227, "vo": 227, "risc_5387": 227, "phdthesisthieu": 227, "secondlinearairi": 227, "secondlinearbessel": 227, "math24": 227, "bernoulli_differential_equ": 227, "goldstein": 227, "braun": 227, "maplesoft": 227, "aspx": 227, "odeadvisor": 227, "riccatispeci": 227, "__________________": 227, "eqworld": 227, "ipmnet": 227, "ru": 227, "ode0106": 227, "ode0123": 227, "nthlinearconstantcoeffhomogen": 227, "nth_linear_constant_coeff_homogeneous_integr": 227, "nonhomogeneous_equation_with_constant_coeffici": 227, "nthlinearconstantcoeffundeterminedcoeffici": 227, "method_of_undetermined_coeffici": 227, "221": 227, "nthlinearconstantcoeffvariationofparamet": 227, "cramer": 227, "variation_of_paramet": 227, "planetmath": 227, "variationofparamet": 227, "nthlineareulereqhomogen": 227, "equidimension": 227, "nth_linear_euler_eq_homogeneous_integr": 227, "sollist": 227, "93euler_equ": 227, "bender": 227, "orszag": 227, "scientist": 227, "nthlineareulereqnonhomogeneousvariationofparamet": 227, "nthlineareulereqnonhomogeneousundeterminedcoeffici": 227, "nthalgebra": 227, "nthorderreduc": 227, "caught": 227, "fault": 227, "almostlinear": 227, "first_linear": 227, "joel": 227, "mose": 227, "stormi": 227, "decad": 227, "august": [227, 246], "558": 227, "linearcoeffici": 227, "separablereduc": 227, "liegroup": 227, "secondhypergeometr": 227, "2f1": 227, "1f1": 227, "0f1": 227, "liouvillian": 227, "pfq": 227, "chan": 227, "cheb": 227, "terrab": 227, "ode_1st_power_seri": 227, "travi": 227, "walker": 227, "ode_2nd_power_series_ordinari": 227, "lamar": 227, "seriessolut": 227, "simmon": 227, "176": 227, "ode_2nd_power_series_regular": 227, "lie_heuristic_abaco1_simpl": 227, "duart": 227, "da": 227, "mota": 227, "lie_heuristic_abaco1_product": 227, "roch": 227, "lie_heuristic_bivari": 227, "329": 227, "lie_heuristic_chi": 227, "lie_heuristic_abaco2_similar": 227, "lie_heuristic_function_sum": 227, "lie_heuristic_abaco2_unique_unknown": 227, "lie_heuristic_abaco2_unique_gener": 227, "lie_heuristic_linear": 227, "gy": 227, "bh": 227, "impract": 227, "riccati_norm": 227, "riccati_inverse_norm": 227, "riccati_reduc": 227, "construct_c": 227, "construct_d": 227, "val_inf": 227, "valuat": 227, "rational_laurent_seri": 227, "compute_m_ybar": 227, "ybar": 227, "solve_aux_eq": 227, "numa": 227, "dena": 227, "numi": 227, "deni": 227, "remove_redundant_sol": 227, "sol1": 227, "sol2": 227, "get_gen_sol_from_part_sol": 227, "part_sol": 227, "haaheim": 227, "solve_riccati": 227, "gensol": 227, "_linear_2eq_order1_type6": 227, "_linear_2eq_order1_type7": 227, "fgp": 227, "ag": 227, "bg": 227, "linear_ode_to_matrix": 227, "odeordererror": 227, "odenonlinearerror": 227, "eqs_mat": 227, "r816": 227, "matrix_differential_equ": 227, "canonical_od": 227, "canonical_eq": 227, "canonical_system": 227, "linodesolve_typ": 227, "linodesolv": 227, "type1": 227, "type2": 227, "type3": 227, "type4": 227, "type5": 227, "type6": 227, "type_of_equ": 227, "a_t": 227, "a_non_commut": 227, "matrix_exp_jordan_form": 227, "expj": 227, "matrix_exp": 227, "defect": 227, "p_invers": 227, "r817": 227, "defective_matrix": 227, "r818": 227, "r819": 227, "jordan_normal_form": 227, "comupt": 227, "r820": 227, "r821": 227, "matrix_exponenti": 227, "antiderv": 227, "subscheck": 227, "system_info": 227, "sol_vector": 227, "sol_vector_evalu": 227, "_nonlinear_2eq_order1_type1": 227, "_nonlinear_2eq_order1_type2": 227, "_nonlinear_2eq_order1_type3": 227, "autonom": 227, "_nonlinear_2eq_order1_type4": 227, "_nonlinear_2eq_order1_type5": 227, "clairaut": 227, "envelop": 227, "_nonlinear_3eq_order1_type1": 227, "enspac": [227, 230], "sysod": 227, "sode0401": 227, "_nonlinear_3eq_order1_type2": 227, "sode0402": 227, "_nonlinear_3eq_order1_type3": 227, "sode0404": 227, "_nonlinear_3eq_order1_type4": 227, "sode0405": 227, "_nonlinear_3eq_order1_type5": 227, "sode0406": 227, "_handle_integr": 227, "gather": 227, "unhind": 227, "wolphramalpha": 227, "detool": 227, "hint_integr": 227, "alphanumer": 227, "hinder": 227, "matching_hint": 227, "matchdict": 227, "1st_homogeneous_coeff": 227, "your_hint": 227, "xfail": [227, 240, 242], "pde_separ": 228, "uxt": 228, "pde_separate_add": 228, "pde_separate_mul": 228, "uxi": 228, "pdsolv": 228, "solvefun": 228, "classify_pd": 228, "test_pd": 228, "pde_hintnam": 228, "ux": 228, "1st_linear_constant_coeff_homogen": 228, "checkpdesol": 228, "_preprocess": 228, "inabl": 228, "_xi_1": 228, "pde_1st_linear_constant_coeff_homogen": 228, "viktor": 228, "grigoryan": 228, "124a": 228, "pde_1st_linear_constant_coeff": 228, "substack": 228, "1st_linear_constant_coeff_integr": 228, "pde_1st_linear_variable_coeff": 228, "du": 228, "inspir": [228, 284], "pde_hint": 228, "checksol": 229, "ect": 229, "attain": [229, 261], "star": [229, 249], "052": 229, "cov": 229, "pval": 229, "xval": 229, "rsolv": 229, "solve_linear": 229, "solve_linear_system": 229, "msymbol": 229, "solve_linear_system_lu": 229, "solve_undetermined_coeff": 229, "equ": 229, "73908513321516064165531208767387340401341175890076": 229, "steep": 229, "39267e": 229, "1684e": 229, "588469032184": 229, "315": 229, "730061685774": 229, "46792545969349058": 229, "inconclus": 229, "init": 229, "dissimilar": 229, "v_0": 229, "n_m": 229, "v_m": 229, "rsolve_poli": 229, "rsolve_ratio": 229, "r822": 229, "levelt": 229, "290": [229, 259], "296": 229, "r823": 229, "r824": 229, "revis": 229, "r825": 229, "289": 229, "alembertian": 229, "r826": 229, "r827": 229, "polysi": 229, "solve_triangul": 229, "kalkbrenn": 229, "patrizia": 229, "teo": 229, "aaecc": 229, "argand": 230, "uncount": 230, "bizarr": 230, "her": 230, "sol_f": 230, "solveset_r": 230, "solveset_complex": 230, "methodologi": [230, 281], "_solve_real_trig": 230, "invert_r": 230, "invert_complex": 230, "_solve_rad": 230, "_solve_ab": 230, "_solve_as_r": 230, "_solve_as_poly_r": 230, "_solve_as_poly_complex": 230, "_solve_as_poli": 230, "gsoc": 230, "7abb76ffed50425299b9065129ae87261668a0f7": 230, "2014": [230, 231], "iamit": 230, "2948": 230, "6659": 230, "7523": 230, "sibx0afl3q": 230, "9696": 230, "27s_theorem": 230, "inftyright": 230, "nright": 230, "0right": 230, "domain_check": 230, "3z": 230, "9z": 230, "nonlinearerror": 230, "cccc": 230, "eq3": 230, "eq4": 230, "391": 230, "_solve_system": 230, "_solve_using_known_valu": 230, "_transolv": 230, "_tsolv": 230, "tsolv": 230, "outright": 230, "interf": 230, "add_typ": 230, "_is_exponenti": 230, "new_eq": 230, "_solve_exponenti": 230, "_is_class": 230, "_solve_class": 230, "_solve_expo": 230, "9x": 230, "solve_expo": 230, "log_b": 230, "_solve_logarithm": 230, "solve_log": 230, "_is_logarithm": 230, "prebuilt": 231, "finiterv": 231, "varianc": 231, "dice": 231, "continuousrv": 231, "continuousdistributionhandmad": 231, "dist": 231, "discreterv": 231, "discretedistributionhandmad": 231, "pmf": 231, "finitedistributionhandmad": 231, "discreteuniform": 231, "randomsymbol": 231, "r828": 231, "discrete_uniform_distribut": 231, "r829": 231, "discreteuniformdistribut": 231, "d6": 231, "diedistribut": 231, "toss": 231, "r830": 231, "bernoulli_distribut": 231, "r831": 231, "bernoullidistribut": 231, "unfair": 231, "r832": 231, "coin_flip": 231, "binomialdistribut": 231, "r833": 231, "binomial_distribut": 231, "r834": 231, "betabinomi": 231, "r835": 231, "r836": 231, "betabinomialdistribut": 231, "popul": 231, "marbl": 231, "r837": 231, "hypergeometric_distribut": 231, "r838": 231, "hypergeometricdistribut": 231, "700000000000000": 231, "r839": 231, "rademacher_distribut": 231, "r840": 231, "geometric_distribut": 231, "r841": 231, "geometricdistribut": 231, "r842": 231, "hermite_distribut": 231, "poisson": 231, "r843": 231, "poisson_distribut": 231, "r844": 231, "poissondistribut": 231, "r845": 231, "logarithmic_distribut": 231, "r846": 231, "logarithmicdistribut": 231, "negativebinomi": 231, "r847": 231, "negative_binomial_distribut": 231, "r848": 231, "negativebinomialdistribut": 231, "skellam": 231, "mu1": 231, "mu2": 231, "mu_1": 231, "mu_2": 231, "i_k": 231, "r849": 231, "skellam_distribut": 231, "yulesimon": 231, "yule": 231, "simon": 231, "r850": 231, "93simon_distribut": 231, "8100": 231, "r851": 231, "zeta_distribut": 231, "cdf": 231, "r852": 231, "arcsine_distribut": 231, "benini": 231, "r853": 231, "benini_distribut": 231, "r854": 231, "v8": 231, "beninidistribut": 231, "r855": 231, "beta_distribut": 231, "r856": 231, "betadistribut": 231, "betanoncentr": 231, "noncentr": 231, "r857": 231, "noncentral_beta_distribut": 231, "r858": 231, "noncentralbetadistribut": 231, "betaprim": 231, "r859": 231, "beta_prime_distribut": 231, "r860": 231, "betaprimedistribut": 231, "boundedpareto": 231, "pareto": 231, "r861": 231, "pareto_distribut": 231, "bounded_pareto_distribut": 231, "r862": 231, "cauchy_distribut": 231, "r863": 231, "cauchydistribut": 231, "r864": 231, "chi_distribut": 231, "r865": 231, "chidistribut": 231, "chinoncentr": 231, "r866": 231, "noncentral_chi_distribut": 231, "chisquar": 231, "r867": 231, "chi_squared_distribut": 231, "r868": 231, "squareddistribut": 231, "dagum": 231, "r869": 231, "dagum_distribut": 231, "erlang": 231, "r870": 231, "erlang_distribut": 231, "r871": 231, "erlangdistribut": 231, "exgaussian": 231, "emg": 231, "r872": 231, "exponentially_modified_gaussian_distribut": 231, "quantil": 231, "r873": 231, "exponential_distribut": 231, "r874": 231, "exponentialdistribut": 231, "fdistribut": 231, "______________________________": 231, "r875": 231, "r876": 231, "fisherz": 231, "fisher": 231, "2d_1": 231, "d_1z": 231, "d_1e": 231, "r877": 231, "27s_z": 231, "r878": 231, "fishersz": 231, "frechet": 231, "r879": 231, "a9chet_distribut": 231, "r880": 231, "gamma_distribut": 231, "r881": 231, "gammadistribut": 231, "gammainvers": 231, "r882": 231, "gompertz": 231, "r883": 231, "gompertz_distribut": 231, "gumbel": 231, "dfrac": 231, "r884": 231, "gumbeldistribut": 231, "r885": 231, "gumbel_distribut": 231, "r886": 231, "20200628222206": 231, "mathwav": 231, "easyfit": 231, "gumbel_max": 231, "r887": 231, "20200628222212": 231, "gumbel_min": 231, "kumaraswami": 231, "r888": 231, "kumaraswamy_distribut": 231, "r889": 231, "laplace_distribut": 231, "r890": 231, "laplacedistribut": 231, "r891": 231, "a9vy_distribut": 231, "r892": 231, "levydistribut": 231, "logist": 231, "r893": 231, "logistic_distribut": 231, "r894": 231, "logisticdistribut": 231, "loglogist": 231, "unimod": 231, "r895": 231, "lognorm": 231, "r896": 231, "r897": 231, "lognormaldistribut": 231, "lomax": 231, "r898": 231, "lomax_distribut": 231, "maxwel": 231, "r899": 231, "maxwell_distribut": 231, "r900": 231, "maxwelldistribut": 231, "moyal": 231, "r901": 231, "moyaldistribut": 231, "r902": 231, "rice": 231, "dobelman": 231, "textfil": 231, "distributionshandbook": 231, "nakagami": 231, "r903": 231, "nakagami_distribut": 231, "marginal_distribut": 231, "r904": 231, "normal_distribut": 231, "r905": 231, "normaldistributionfunct": 231, "xm": 231, "x_m": 231, "r906": 231, "r907": 231, "paretodistribut": 231, "powerfunct": 231, "r908": 231, "20200204081320": 231, "power_func": 231, "quadraticu": 231, "r909": 231, "quadratic_distribut": 231, "raisedcosin": 231, "r910": 231, "raised_cosine_distribut": 231, "r911": 231, "rayleigh_distribut": 231, "r912": 231, "rayleighdistribut": 231, "r913": 231, "reciprocal_distribut": 231, "studentt": 231, "r914": 231, "student_t": 231, "r915": 231, "studentst": 231, "shiftedgompertz": 231, "r916": 231, "shifted_gompertz_distribut": 231, "r917": 231, "trapezoidal_distribut": 231, "r918": 231, "triangular_distribut": 231, "r919": 231, "triangulardistribut": 231, "r920": 231, "uniform_distribution_": 231, "28continu": 231, "r921": 231, "uniformdistribut": 231, "uniformsum": 231, "irwin": 231, "r922": 231, "uniform_sum_distribut": 231, "r923": 231, "uniformsumdistribut": 231, "vonmis": 231, "mise": 231, "i_0": 231, "r924": 231, "von_mises_distribut": 231, "r925": 231, "vonmisesdistribut": 231, "wald": 231, "gaussianinvers": 231, "r926": 231, "inverse_gaussian_distribut": 231, "r927": 231, "inversegaussiandistribut": 231, "weibul": 231, "geq0": 231, "r928": 231, "weibull_distribut": 231, "r929": 231, "weibulldistribut": 231, "wignersemicircl": 231, "semicircl": 231, "frac2": 231, "r930": 231, "wigner_semicircle_distribut": 231, "r931": 231, "wignerssemicirclelaw": 231, "jointrv": 231, "_set": 231, "multivariatenorm": 231, "noninvert": 231, "ob": 231, "r932": 231, "multivariate_normal_distribut": 231, "multivariatelaplac": 231, "r933": 231, "multivariate_laplace_distribut": 231, "generalizedmultivariateloggamma": 231, "joint_rv_typ": 231, "gd": 231, "y_3": 231, "gmvlg": 231, "generalizedmultivariateloggammaomega": 231, "r934": 231, "generalized_multivariate_log": 231, "r935": 231, "234137346_on_a_multivariate_log": 231, "gamma_distribution_and_the_use_of_the_distribution_in_the_bayesian_analysi": 231, "correl": 231, "gmvlgo": 231, "r936": 231, "r937": 231, "r938": 231, "multinomial_distribut": 231, "r939": 231, "multinomialdistribut": 231, "multivariatebeta": 231, "r940": 231, "dirichlet_distribut": 231, "r941": 231, "dirichletdistribut": 231, "multivariateewen": 231, "ewen": 231, "r942": 231, "27s_sampling_formula": 231, "r943": 231, "280311472_the_ubiquitous_ewens_sampling_formula": 231, "multivariatet": 231, "negativemultinomi": 231, "n_c": 231, "r944": 231, "negative_multinomial_distribut": 231, "r945": 231, "normalgamma": 231, "r946": 231, "discretemarkovchain": 231, "state_spac": 231, "trans_prob": 231, "markov": 231, "characteris": 231, "transitionmatrixof": 231, "transition_prob": 231, "sunni": 231, "cloudi": 231, "raini": 231, "randomindexedsymbol": 231, "409": 231, "6963328": 231, "3096": 231, "query_gt": 231, "64705": 231, "r947": 231, "markov_chain": 231, "time_markov_chain": 231, "r948": 231, "20201230182007": 231, "dartmouth": 231, "teaching_aid": 231, "books_articl": 231, "probability_book": 231, "chapter11": 231, "canonical_form": 231, "transient": 231, "p_new": 231, "new_matrix": 231, "communication_class": 231, "r949": 231, "onlinelibrari": 231, "wilei": 231, "1002": 231, "9780470316887": 231, "app1": 231, "r950": 231, "columbia": 231, "ww2040": 231, "6711f12": 231, "lect1023big": 231, "is_recurr": 231, "tarjan": [231, 249], "r951": 231, "20220207032113": 231, "4701sum07": 231, "4701": 231, "mcii": 231, "r952": 231, "ceca": 231, "clemson": 231, "shierd": 231, "shier": 231, "r953": 231, "ujcont": 231, "uj": 231, "esploro": 231, "graduat": 231, "999849107691": 231, "r954": 231, "econ": 231, "dtmc": 231, "reccur": 231, "r955": 231, "absorbing_markov_chain": 231, "r956": 231, "brandei": 231, "igusa": 231, "math56as08": 231, "math56a_s08_notes015": 231, "fixed_row_vector": 231, "stationary_distribut": 231, "fundamental_matrix": 231, "r957": 231, "lip": 231, "limiting_distribut": 231, "condition_set": 231, "wm": 231, "r958": 231, "probabilitycours": 231, "11_2_6_stationary_and_limiting_distribut": 231, "r959": 231, "20210508104430": 231, "galton": 231, "uchicago": 231, "yibi": 231, "stat317": 231, "lecture4_6up": 231, "continuousmarkovchain": 231, "gen_mat": 231, "generator_matrix": 231, "45279": 231, "58602": 231, "37933": 231, "34211": 231, "7143": 231, "4002723175": 231, "6832579186": 231, "r960": 231, "r961": 231, "biu": 231, "il": 231, "amirgi": 231, "ctmcnote": 231, "bernoulliprocess": 231, "joint_distribut": 231, "jointdistributionhandmad": 231, "r962": 231, "bernoulli_process": 231, "r963": 231, "mathc": 231, "clarku": 231, "djoyc": 231, "ma217": 231, "given_condit": 231, "poissonprocess": 231, "648": 231, "r964": 231, "11_0_0_intro": 231, "r965": 231, "poisson_point_process": 231, "wiener": 231, "brownian": 231, "scottish": 231, "botanist": 231, "r966": 231, "11_4_0_brownian_motion_wiener_process": 231, "r967": 231, "wiener_process": 231, "gammaprocess": 231, "jump": [231, 288], "472": 231, "r968": 231, "gamma_process": 231, "matrixgamma": 231, "scale_matrix": 231, "r969": 231, "matrix_gamma_distribut": 231, "wishart": 231, "r970": 231, "wishart_distribut": 231, "matrixnorm": 231, "location_matrix": 231, "scale_matrix_1": 231, "scale_matrix_2": 231, "r971": 231, "matrix_normal_distribut": 231, "compound_rv": 231, "compounddistribut": 231, "crv_type": 231, "r972": 231, "compound_probability_distribut": 231, "numsampl": 231, "evaluate_integr": 231, "r973": 231, "entropy_": 231, "28information_theori": 231, "r974": 231, "crmarsh": 231, "charles_marsh_continuous_entropi": 231, "r975": 231, "entropypost": 231, "arg1": 231, "arg2": 231, "cexpr": 231, "coskew": 231, "sigma_": 231, "r976": 231, "r977": 231, "probability_distribut": 231, "randomst": 231, "die_rol": 231, "samp": 231, "pspace": 231, "samp_list": 231, "sam": 231, "42519758": 231, "40207856": 231, "94991743": 231, "85819627": 231, "83403519": 231, "9412172": 231, "85768055": 231, "38954165": 231, "11163337": 231, "3176591": 231, "79115232": 231, "63232916": 231, "01747268": 231, "96716083": 231, "sampling_p": 231, "sampling_": 231, "factorial_mo": 231, "r978": 231, "r979": 231, "factorialmo": 231, "kurtosi": 231, "outlier": 231, "sigma_x": 231, "r980": 231, "r981": 231, "asymmetri": 231, "pearson": 231, "sampling_dens": 231, "centralmo": 231, "cmoment": 231, "expectationmatrix": 231, "randommatrixsymbol": 231, "n11": 231, "n12": 231, "n21": 231, "n22": 231, "variancematrix": 231, "crosscovariancematrix": 231, "randomdomain": 231, "singledomain": 231, "singlepspac": 231, "productdomain": 231, "productpspac": 231, "conditionaldomain": 231, "frv": 231, "finitedomain": 231, "finitepspac": 231, "crv": 231, "continuousdomain": 231, "continuouspspac": 231, "diepspac": 231, "singlefinitepspac": 231, "normalpspac": 231, "singlecontinuouspspac": 231, "frv_type": 231, "randomvari": 231, "tactic": 231, "random_symbol": 231, "rs_swap": 231, "pspace1": 231, "pspace2": 231, "immutabledensendimarrai": 232, "tomatrix": 232, "j_m": 232, "i_a": 232, "i_b": 232, "sum_k": 232, "tensorcontract": [232, 233], "arraycontract": [232, 233], "tensordiagon": [232, 233], "derive_by_arrai": 232, "sum_m": 232, "immutablesparsendimarrai": 232, "mutabledensendimarrai": 232, "mutablesparsendimarrai": 232, "array_der": [232, 233], "index_order_old": [232, 233], "index_order_new": [232, 233], "cab": 232, "array_express": 232, "contraction_ax": 232, "diagonal_ax": 232, "arraydiagon": [232, 233], "arraysymbol": 233, "convert_indexed_to_arrai": 233, "arrayadd": 233, "convert_matrix_to_arrai": 233, "convert_array_to_matrix": 233, "expr_tr": 233, "contraction_indic": 233, "diagonal_indic": 233, "adi": 233, "from_array_to_matrix": 233, "ijklm": 233, "kijml": 233, "perm1": 233, "perm2": 233, "index_method": 235, "get_contraction_structur": [235, 236], "deepest": 235, "nested_contract": 235, "get_indic": [235, 236, 237, 238], "indexconformanceexcept": 235, "______": 236, "stem": 236, "dim1": 236, "dim2": 236, "qwerti": 236, "a_ij": 236, "b_ij": 236, "syntact": 236, "a_real": 236, "c_inherit": 236, "c_explicit": 236, "unrol": 236, "tensorindextyp": [237, 238], "eps_dim": 237, "metric_nam": 237, "su": 237, "lorentz": 237, "tensor_index_typ": 237, "is_up": 237, "tensor_inde_typ": 237, "typ": 237, "tensorhead": [237, 238], "index_typ": 237, "tensorsymmetri": 237, "monoterm": 237, "_tensormanag": 237, "set_comm": 237, "asym2": 237, "fully_symmetr": 237, "tensori": [237, 238], "e_z": 237, "no_symmetri": 237, "p_x": 237, "p_y": 237, "p_z": 237, "ipos1": 237, "ipos2": 237, "icomp1": 237, "icomp2": 237, "nameless": 237, "replacement_dict": 237, "free_arg": 237, "addend": 237, "canon_bp": 237, "contract_metr": 237, "contract_al": 237, "ipo": 237, "icomp": 237, "nonrep": 237, "dum": 237, "ext_rank": 237, "is_canon_bp": 237, "get_free_indic": [237, 238], "perm2tensor": 237, "tid": 237, "sorted_compon": 237, "riemann_cyclic_replac": 237, "riemann_cycl": 237, "cadabra": 237, "multiterm": 237, "bianchi": 237, "sym2": 237, "direct_product": 237, "monotorem": 237, "tableaux": 237, "tensortyp": 237, "repetit": [237, 249], "tensormanag": 237, "comm_i2symbol": 237, "comm_symbols2i": 237, "get_comm": 237, "gcomm": 237, "ghcomm": 237, "toper": 238, "partialderiv": 238, "valenc": 238, "uncontract": 238, "compa": 238, "compb": 238, "derivand": 238, "xpass": [240, 242], "nocache_fail": 240, "expectedexcept": 240, "assertionerror": 240, "exceptioninfo": 240, "abort": 240, "9999": 240, "warningcl": [240, 247], "test_stacklevel": 240, "randtest": 241, "portabl": [242, 243], "pytestreport": 242, "force_color": 242, "readlin": 242, "sympydoctestfind": 242, "doctestpars": 242, "exclude_empti": 242, "sympydoctestrunn": 242, "checker": 242, "optionflag": 242, "5140": 242, "doctestrunn": 242, "clear_glob": 242, "writer": 242, "garbag": 242, "check_output": 242, "report_": 242, "sympyoutputcheck": 242, "outputcheck": 242, "stdlib": 242, "testrunn": 242, "sympytestresult": 242, "convert_to_native_path": 242, "lst": 242, "blacklist": 242, "get_sympy_dir": 242, "raise_on_deprec": 242, "deprecationwarn": [242, 247], "run_all_test": 242, "test_arg": 242, "test_kwarg": 242, "doctest_arg": 242, "doctest_kwarg": 242, "examples_arg": 242, "examples_kwarg": 242, "run_in_subprocess_with_hash_random": 242, "function_kwarg": 242, "hostedtoolcach": 242, "x64": 242, "pythonhashse": 242, "_test": 242, "split_list": 242, "sympytestfil": 242, "module_rel": 242, "extraglob": 242, "raise_on_error": 242, "basenam": [242, 243, 244], "slate": 242, "dont_accept_true_for_1": 242, "dont_accept_blanklin": 242, "normalize_whitespac": 242, "ellipsi": [242, 250], "ignore_exception_detail": 242, "report_udiff": 242, "report_cdiff": 242, "report_ndiff": 242, "report_only_first_failur": 242, "mortem": 242, "tomfooleri": 242, "testmod": 242, "tester": 242, "fiddl": [242, 288], "timeout": 242, "keyboardinterrupt": 242, "interrupt": 242, "_basic": 242, "kw": 242, "test_equ": 242, "pdb": 242, "pipe": 242, "time_bal": 242, "tandem": 243, "matvec": 243, "codewrapp": 243, "distutil": 243, "fwrap": 243, "swig": 243, "binary_cal": 243, "22925376": 243, "25165824": 243, "_imp_": [243, 250], "filepath": 243, "cythoncodewrapp": 243, "dump_pyx": 243, "dummywrapp": 243, "f2pycodewrapp": 243, "ufuncifycodewrapp": 243, "dump_c": [243, 244], "funcnam": 243, "code_gen": [243, 244], "argument_tupl": 243, "include_dir": 243, "library_dir": 243, "extra_compile_arg": 243, "extra_link_arg": 243, "symfunc": [243, 250], "funtion_nam": 243, "ndimension": 243, "f_fortran": 243, "f_cython": 243, "r982": 243, "fortran77": 244, "fortran90": 244, "julia": 244, "rust": 244, "mileston": 244, "unsurmount": 244, "pyf": 244, "inputoutput": 244, "tcc": 244, "libtcc": 244, "date": 244, "hostnam": 244, "sha1": 244, "ccodegen": 244, "preprocessor_stat": 244, "dump_h": 244, "guard": 244, "get_prototyp": 244, "codegenerror": 244, "function_prototyp": 244, "dump_cod": 244, "cname": 244, "fname": 244, "pynam": 244, "jlname": 244, "octnam": 244, "rsname": 244, "fcodegen": 244, "f90": 244, "dump_f95": 244, "get_interfac": 244, "juliacodegen": 244, "dump_jl": 244, "octavecodegen": 244, "dump_m": 244, "returnvalu": 244, "destin": 244, "local_var": 244, "result_vari": 244, "unnam": 244, "rustcodegen": 244, "dump_r": 244, "f_result": 244, "myfcn": 244, "fcn2": 244, "myfcn_result": 244, "void": 244, "get_default_datatyp": 244, "complex_allow": 244, "agnost": 244, "conserve_mpmath_dp": 245, "doctest_depends_on": 245, "disable_view": 245, "python_vers": 245, "memoize_properti": 245, "propfunc": 245, "no_attrs_in_subclass": 245, "__all__": 245, "some_funct": 245, "thread": 245, "xthread": 245, "threaded_factori": 245, "use_add": 245, "multiset_partitions_taocp": 246, "visitor": 246, "pstack": 246, "lpart": 246, "topmost": 246, "partcompon": 246, "peek": [246, 288], "unpredict": 246, "list_visitor": 246, "abb": [246, 249], "factoring_visitor": 246, "multisetpartitiontravers": 246, "aocp": 246, "count_partit": 246, "127750": 246, "686": 246, "4a": 246, "factorisatio": 246, "oppenheim": 246, "numerorum": 246, "canfield": 246, "erdo": 246, "OF": 246, "yorgei": 246, "monad": 246, "persist": 246, "288716": 246, "memoiz": [246, 248, 275], "dramat": 246, "hypothet": 246, "borrow": 246, "coalesc": 246, "_rang": 246, "stretch": 246, "brain": 246, "histogram": 246, "enum_al": 246, "enum_larg": 246, "enum_rang": 246, "enum_smal": 246, "ub": 246, "parti": 247, "catch_warn": 247, "simplefilt": 247, "dedent": [247, 252], "miscellan": [248, 275], "pkgdata": [248, 275], "notiter": 249, "binary_partit": 249, "r983": 249, "taocp": 249, "nx": 249, "common_prefix": 249, "common_suffix": 249, "unhash": 249, "r984": 249, "component_": 249, "28graph_theori": 249, "r985": 249, "27s_strongly_connected_components_algorithm": 249, "dict_merg": 249, "filter_symbol": 249, "myop": 249, "kog": 249, "informatik": 249, "hamburg": 249, "mein": 249, "python_trick": 249, "neighbor": 249, "xxxxxx": 249, "xxxx": 249, "r986": 249, "method_ring": 249, "r987": 249, "4856615": 249, "4857018": 249, "r988": 249, "20160313023044": 249, "programminggeek": 249, "r989": 249, "steinhau": 249, "93johnson": 249, "93trotter_algorithm": 249, "r990": 249, "involut": 249, "eco": 249, "vajnovszki": 249, "dmtc": 249, "generate_involut": 249, "r991": 249, "permutationinvolut": 249, "generate_oriented_forest": 249, "forest": 249, "acycl": 249, "r992": 249, "beyer": 249, "hedetniemi": 249, "novemb": 249, "r993": 249, "1633833": 249, "has_dup": 249, "has_varieti": 249, "iproduct": 249, "abcbb": 249, "is_sequ": 249, "generatortyp": 249, "_iter": 249, "kbin": 249, "ordered_flag": 249, "least_rot": 249, "rotate_left": 249, "r994": 249, "lexicographically_minimal_string_rot": 249, "minlex": 249, "acb": 249, "11010011000": 249, "00011010011": 249, "00011001011": 249, "aaa": 249, "abi": 249, "bby": 249, "abracadabra": 249, "banana": 249, "multiset_derang": 249, "uniq": 249, "1233": 249, "3312": 249, "3321": 249, "aba": 249, "baa": 249, "bead": 249, "ooo": 249, "r995": 249, "r996": 249, "carla": 249, "savag": 249, "terri": 249, "yih": 249, "414": 249, "430": 249, "0196": 249, "6774": 249, "90047": 249, "ordered_partit": 249, "r997": 249, "jeromekelleh": 249, "r998": 249, "jerom": 249, "kelleh": 249, "barri": 249, "sullivan": 249, "0909": 249, "2331v2": 249, "r999": 249, "activest": 249, "218332": 249, "random_derang": 249, "reseed": 249, "rotate_right": 249, "roundrobin": 249, "ef": 249, "credit": 249, "sakki": 249, "sequence_partit": 249, "l_m": 249, "kleen": 249, "enricogiampieri": 249, "13131491": 249, "sequence_partitions_empti": 249, "keyfunc": 249, "subgraph": 249, "r1000": 249, "r1001": 249, "longest": 249, "r1002": 249, "unflatten": 249, "bcd": 249, "afunc": 250, "lambdastr": 250, "dummifi": 250, "use_imp": 250, "docstring_limit": 250, "custom_sin": 250, "spent": 250, "38177329": 250, "49315059": 250, "8414709848078965": 250, "eager": 250, "enable_eager_execut": 250, "eagertensor": 250, "__class__": 250, "placehold": 250, "numexpr3": 250, "user_guid": 250, "runtimewarn": 250, "sin_cos_sympi": 250, "sin_co": 250, "sin_cos_numpi": 250, "38177329068": 250, "module_dictionari": 250, "getsourc": 250, "_lambdifygener": 250, "__globals__": 250, "lambdaprint": 250, "90929743": [250, 277], "assoc_recurrence_memo": 251, "base_seq": 251, "memo": 251, "pn0": 251, "recurrence_memo": 251, "specfun": 251, "__index__": 252, "sanit": 252, "99999999999999991611392": 252, "debug_decor": 252, "debugf": 252, "fillded": 252, "strline": 252, "rawlin": 252, "find_execut": 252, "pathsep": 252, "pastabl": 252, "bee": 252, "spamham": 252, "sha": 252, "spam": 252, "egg": 252, "md5": 252, "eggsham": 252, "r1003": 252, "6116978": 252, "substr": 252, "roken": 252, "deletechar": 252, "multicharact": 252, "oldchar": 252, "newchar": 252, "acquir": 253, "getresourc": 253, "pkgname": 253, "pkgpath": 253, "dirnam": 253, "normpath": 253, "__loader__": 253, "stringio": 253, "get_resourc": 253, "ioerror": 253, "mydata": 253, "mypkgdata": 253, "jpg": 253, "get_class": 254, "lookup_view": 254, "get_mod_func": 254, "callback": 254, "timeutil": 255, "coordsysrect": 256, "coordsys3d": [256, 258, 259, 260, 262, 263, 266], "rotation_matrix": [256, 258, 261], "vector_nam": 256, "variable_nam": [256, 263], "latex_vect": 256, "pretty_vect": 256, "latex_scalar": 256, "pretty_scalar": 256, "new_system": 256, "create_new": [256, 261], "transformation_to_par": 256, "transformation_from_par": 256, "locate_new": [256, 259, 260, 261, 262, 263], "position_wrt": [256, 260, 261, 262], "orient_new": [256, 258], "axisorient": [256, 258, 261], "axis_orient": [256, 261], "bodyorient": [256, 258, 261], "body_orient": [256, 258, 261], "spaceorient": [256, 258, 261], "space_orient": [256, 258], "quaternionorient": [256, 258, 261], "q_orient": [256, 258], "orient_new_axi": [256, 259, 261], "orient_new_bodi": [256, 261], "angle1": [256, 258], "angle2": [256, 258], "angle3": [256, 258], "euler_angl": [256, 258], "orient_new_quaternion": [256, 261], "orient_new_spac": [256, 261], "coordsyrect": 256, "v_a": 256, "v_b": 256, "scalar_map": 256, "basevector": [256, 260, 261], "delop": [256, 262, 263], "r1004": 256, "r1005": 256, "basedyad": [256, 260], "second_system": 256, "deloper": [256, 264], "parametricregion": [256, 259, 266], "implicitregion": [256, 259, 266], "parabola": 256, "rational_parametr": 256, "singular_point": 256, "regular_point": 256, "reg_point": 256, "cubic_curv": 256, "calulc": 256, "hoffmann": 256, "purdu": 256, "lib": 256, "cgi": 256, "viewcont": 256, "1827": 256, "cstech": 256, "erik": 256, "hillgart": 256, "diploma": 256, "linz": 256, "universitat": 256, "risc_1355": 256, "20point": 256, "20on": 256, "20conic": 256, "parametricintegr": 256, "semispher": [256, 266], "axis_orienter1": 258, "axis_orienter2": 258, "axis_orienter3": 258, "body_orienter1": 258, "body_orienter2": 258, "body_orienter3": 258, "matrix_to_vector": 259, "system2": 259, "vector_integr": [259, 266], "essenc": 260, "vectormul": 260, "vectoradd": 260, "ofcours": 260, "vectorzero": 260, "expressli": 260, "express_coordin": [260, 261], "dyadicmul": 260, "dyadicadd": 260, "cleanest": 261, "orient_new_": 261, "basescalar": [261, 263], "oabc": 262, "oa": 262, "pq": 262, "sr": 262, "wikidel": 262, "ffield": 262, "gradient_field": 263, "instantan": 263, "directional_deriv": 263, "lame": 263, "dyadicproduct": 264, "quantifi": 265, "necesssari": 266, "param_circl": 266, "implicit_circl": 266, "obextj": 266, "solidspher": 266, "lamina": 266, "\ud835\udc45": 266, "cylind": 266, "vectorfield": 266, "hemispher": 266, "top_fac": 266, "bottom_fac": 266, "27_theorem": 266, "cone": 266, "divergence_theorem": 266, "12288": 266, "truss": 273, "str_expr": 277, "82842712474619": 277, "141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068": 277, "0874989834394464": 277, "roundoff": 277, "14112001": 277, "7568025": 277, "95892427": 277, "2794155": 277, "6569866": 277, "98935825": 277, "41211849": 277, "0998334166468": 277, "sympy_nam": 277, "numerical_funct": 277, "rephras": 278, "oh": 278, "integration_vari": 278, "dfdx": 278, "equidistantli": 278, "d2fdx2": 278, "django": 280, "oop": 280, "crazi": 280, "abcdef": 280, "reevalu": 280, "infal": 280, "entertain": 281, "preliminari": 281, "82842712475": 282, "cass": 282, "wrote": [282, 283], "theme": 282, "expanded_expr": 282, "whet": 282, "appetit": 282, "c\u2082": [282, 289], "c\u2081": [282, 289], "\u03bd": 282, "sell": 282, "battl": 282, "confid": 282, "gigabyt": 282, "tear": 283, "dotprint": [283, 287], "stopper": 283, "uexpr": 283, "downsid": 284, "algebraic_multipl": 284, "pdp": 284, "undertest": 284, "underevalu": 284, "my_iszero": 284, "stronger": 284, "tradeoff": 284, "wonder": 284, "5b7c3e8ee5b40332abdb206c": 284, "15141": 284, "19548": 284, "10120": 284, "10279": 284, "constant_problem": 284, "possiblezeroq": 284, "20200307091449": 284, "mupad_ref": 284, "iszero": 284, "congratul": 285, "decent": 286, "austin": 286, "video": 286, "javascript": 287, "bvar": 287, "unnecessarili": 288, "whittl": 288, "catchal": 288, "collected_expr": 288, "cdot1": 288, "undertak": 288, "undon": 288, "cdot2": 288, "nck": 288, "pronounc": 288, "_2f_1": 288, "cfrac": 288, "list_to_frac": 288, "a\u2080": 288, "a\u2083": 288, "a\u2084": 288, "pointless": 288, "orig_frac": 288, "diffeq": 289}, "objects": {"": [[32, 0, 0, "-", "sympy"]], "sympy": [[34, 0, 0, "-", "abc"], [35, 0, 0, "-", "algebras"], [38, 0, 0, "-", "assumptions"], [41, 0, 0, "-", "calculus"], [42, 0, 0, "-", "categories"], [64, 0, 0, "-", "diffgeom"], [65, 0, 0, "-", "discrete"], [69, 0, 0, "-", "functions"], [82, 0, 0, "-", "holonomic"], [89, 0, 0, "-", "integrals"], [90, 0, 0, "-", "interactive"], [91, 0, 0, "-", "liealgebras"], [92, 0, 0, "-", "logic"], [97, 0, 0, "-", "matrices"], [104, 0, 0, "-", "parsing"], [273, 0, 0, "-", "physics"], [207, 0, 0, "-", "polys"], [229, 0, 0, "-", "solvers"], [231, 0, 0, "-", "stats"], [234, 0, 0, "-", "tensor"], [239, 0, 0, "-", "testing"], [248, 0, 0, "-", "utilities"], [264, 0, 0, "-", "vector"]], "sympy.algebras": [[35, 1, 1, "", "Quaternion"]], "sympy.algebras.Quaternion": [[35, 2, 1, "", "add"], [35, 2, 1, "", "angle"], [35, 2, 1, "", "arc_coplanar"], [35, 2, 1, "", "axis"], [35, 2, 1, "", "exp"], [35, 2, 1, "", "from_Matrix"], [35, 2, 1, "", "from_axis_angle"], [35, 2, 1, "", "from_euler"], [35, 2, 1, "", "from_rotation_matrix"], [35, 2, 1, "", "index_vector"], [35, 2, 1, "", "integrate"], [35, 2, 1, "", "inverse"], [35, 2, 1, "", "is_pure"], [35, 2, 1, "", "is_zero_quaternion"], [35, 2, 1, "", "mensor"], [35, 2, 1, "", "mul"], [35, 2, 1, "", "norm"], [35, 2, 1, "", "normalize"], [35, 2, 1, "", "orthogonal"], [35, 2, 1, "", "parallel"], [35, 2, 1, "", "pow"], [35, 2, 1, "", "pow_cos_sin"], [35, 3, 1, "", "product_matrix_left"], [35, 3, 1, "", "product_matrix_right"], [35, 2, 1, "", "rotate_point"], [35, 2, 1, "", "scalar_part"], [35, 2, 1, "", "set_norm"], [35, 2, 1, "", "to_Matrix"], [35, 2, 1, "", "to_axis_angle"], [35, 2, 1, "", "to_euler"], [35, 2, 1, "", "to_rotation_matrix"], [35, 2, 1, "", "vector_coplanar"], [35, 2, 1, "", "vector_part"]], "sympy.assumptions": [[36, 0, 0, "-", "ask"], [37, 0, 0, "-", "assume"], [39, 0, 0, "-", "predicates"], [40, 0, 0, "-", "refine"]], "sympy.assumptions.ask": [[36, 1, 1, "", "AssumptionKeys"], [36, 4, 1, "", "ask"], [36, 4, 1, "", "register_handler"], [36, 4, 1, "", "remove_handler"]], "sympy.assumptions.assume": [[37, 1, 1, "", "AppliedPredicate"], [37, 1, 1, "", "AssumptionsContext"], [37, 1, 1, "", "Predicate"], [37, 1, 1, "", "UndefinedPredicate"], [37, 4, 1, "", "assuming"]], "sympy.assumptions.assume.AppliedPredicate": [[37, 3, 1, "", "arg"], [37, 3, 1, "", "arguments"], [37, 3, 1, "", "function"]], "sympy.assumptions.assume.AssumptionsContext": [[37, 2, 1, "", "add"]], "sympy.assumptions.assume.Predicate": [[37, 2, 1, "", "eval"], [37, 5, 1, "", "handler"], [37, 2, 1, "", "register"], [37, 2, 1, "", "register_many"]], "sympy.assumptions.predicates.calculus": [[39, 1, 1, "", "FinitePredicate"], [39, 1, 1, "", "InfinitePredicate"]], "sympy.assumptions.predicates.calculus.FinitePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.calculus.InfinitePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common": [[39, 1, 1, "", "CommutativePredicate"], [39, 1, 1, "", "IsTruePredicate"]], "sympy.assumptions.predicates.common.CommutativePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common.IsTruePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices": [[39, 1, 1, "", "ComplexElementsPredicate"], [39, 1, 1, "", "DiagonalPredicate"], [39, 1, 1, "", "FullRankPredicate"], [39, 1, 1, "", "IntegerElementsPredicate"], [39, 1, 1, "", "InvertiblePredicate"], [39, 1, 1, "", "LowerTriangularPredicate"], [39, 1, 1, "", "NormalPredicate"], [39, 1, 1, "", "OrthogonalPredicate"], [39, 1, 1, "", "PositiveDefinitePredicate"], [39, 1, 1, "", "RealElementsPredicate"], [39, 1, 1, "", "SingularPredicate"], [39, 1, 1, "", "SquarePredicate"], [39, 1, 1, "", "SymmetricPredicate"], [39, 1, 1, "", "TriangularPredicate"], [39, 1, 1, "", "UnitTriangularPredicate"], [39, 1, 1, "", "UnitaryPredicate"], [39, 1, 1, "", "UpperTriangularPredicate"]], "sympy.assumptions.predicates.matrices.ComplexElementsPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.DiagonalPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.FullRankPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.IntegerElementsPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.InvertiblePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.LowerTriangularPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.NormalPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.OrthogonalPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.RealElementsPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SingularPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SquarePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SymmetricPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.TriangularPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitTriangularPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitaryPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UpperTriangularPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory": [[39, 1, 1, "", "CompositePredicate"], [39, 1, 1, "", "EvenPredicate"], [39, 1, 1, "", "OddPredicate"], [39, 1, 1, "", "PrimePredicate"]], "sympy.assumptions.predicates.ntheory.CompositePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.EvenPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.OddPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.PrimePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order": [[39, 1, 1, "", "NegativePredicate"], [39, 1, 1, "", "NonNegativePredicate"], [39, 1, 1, "", "NonPositivePredicate"], [39, 1, 1, "", "NonZeroPredicate"], [39, 1, 1, "", "PositivePredicate"], [39, 1, 1, "", "ZeroPredicate"]], "sympy.assumptions.predicates.order.NegativePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonNegativePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonPositivePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonZeroPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.PositivePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.ZeroPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets": [[39, 1, 1, "", "AlgebraicPredicate"], [39, 1, 1, "", "AntihermitianPredicate"], [39, 1, 1, "", "ComplexPredicate"], [39, 1, 1, "", "ExtendedRealPredicate"], [39, 1, 1, "", "HermitianPredicate"], [39, 1, 1, "", "ImaginaryPredicate"], [39, 1, 1, "", "IntegerPredicate"], [39, 1, 1, "", "IrrationalPredicate"], [39, 1, 1, "", "RationalPredicate"], [39, 1, 1, "", "RealPredicate"], [39, 1, 1, "", "TranscendentalPredicate"]], "sympy.assumptions.predicates.sets.AlgebraicPredicate": [[39, 5, 1, "", "AlgebraicHandler"], [39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.AntihermitianPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ComplexPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ExtendedRealPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.HermitianPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ImaginaryPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IntegerPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IrrationalPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RationalPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RealPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.TranscendentalPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.refine": [[40, 4, 1, "", "refine"], [40, 4, 1, "", "refine_Pow"], [40, 4, 1, "", "refine_abs"], [40, 4, 1, "", "refine_arg"], [40, 4, 1, "", "refine_atan2"], [40, 4, 1, "", "refine_im"], [40, 4, 1, "", "refine_matrixelement"], [40, 4, 1, "", "refine_re"], [40, 4, 1, "", "refine_sign"]], "sympy.calculus": [[41, 0, 0, "-", "euler"], [41, 0, 0, "-", "finite_diff"], [41, 0, 0, "-", "singularities"], [41, 0, 0, "-", "util"]], "sympy.calculus.euler": [[41, 4, 1, "", "euler_equations"]], "sympy.calculus.finite_diff": [[41, 4, 1, "", "apply_finite_diff"], [41, 4, 1, "", "differentiate_finite"], [41, 4, 1, "", "finite_diff_weights"]], "sympy.calculus.singularities": [[41, 4, 1, "", "is_decreasing"], [41, 4, 1, "", "is_increasing"], [41, 4, 1, "", "is_monotonic"], [41, 4, 1, "", "is_strictly_decreasing"], [41, 4, 1, "", "is_strictly_increasing"], [41, 4, 1, "", "monotonicity_helper"], [41, 4, 1, "", "singularities"]], "sympy.calculus.util": [[41, 4, 1, "", "continuous_domain"], [41, 4, 1, "", "function_range"], [41, 4, 1, "", "is_convex"], [41, 4, 1, "", "lcim"], [41, 4, 1, "", "maximum"], [41, 4, 1, "", "minimum"], [41, 4, 1, "", "not_empty_in"], [41, 4, 1, "", "periodicity"], [41, 4, 1, "", "stationary_points"]], "sympy.categories": [[42, 1, 1, "", "Category"], [42, 1, 1, "", "CompositeMorphism"], [42, 1, 1, "", "Diagram"], [42, 1, 1, "", "IdentityMorphism"], [42, 1, 1, "", "Morphism"], [42, 1, 1, "", "NamedMorphism"], [42, 1, 1, "", "Object"], [42, 0, 0, "-", "diagram_drawing"]], "sympy.categories.Category": [[42, 3, 1, "", "commutative_diagrams"], [42, 3, 1, "", "name"], [42, 3, 1, "", "objects"]], "sympy.categories.CompositeMorphism": [[42, 3, 1, "", "codomain"], [42, 3, 1, "", "components"], [42, 3, 1, "", "domain"], [42, 2, 1, "", "flatten"]], "sympy.categories.Diagram": [[42, 3, 1, "", "conclusions"], [42, 2, 1, "", "hom"], [42, 2, 1, "", "is_subdiagram"], [42, 3, 1, "", "objects"], [42, 3, 1, "", "premises"], [42, 2, 1, "", "subdiagram_from_objects"]], "sympy.categories.Morphism": [[42, 3, 1, "", "codomain"], [42, 2, 1, "", "compose"], [42, 3, 1, "", "domain"]], "sympy.categories.NamedMorphism": [[42, 3, 1, "", "name"]], "sympy.categories.diagram_drawing": [[42, 1, 1, "", "ArrowStringDescription"], [42, 1, 1, "", "DiagramGrid"], [42, 1, 1, "", "XypicDiagramDrawer"], [42, 4, 1, "", "preview_diagram"], [42, 4, 1, "", "xypic_draw_diagram"]], "sympy.categories.diagram_drawing.DiagramGrid": [[42, 3, 1, "", "height"], [42, 3, 1, "", "morphisms"], [42, 3, 1, "", "width"]], "sympy.categories.diagram_drawing.XypicDiagramDrawer": [[42, 2, 1, "", "draw"]], "sympy.codegen": [[43, 0, 0, "-", "algorithms"], [43, 0, 0, "-", "approximations"], [43, 0, 0, "-", "ast"], [43, 0, 0, "-", "cfunctions"], [43, 0, 0, "-", "cnodes"], [43, 0, 0, "-", "cutils"], [43, 0, 0, "-", "cxxnodes"], [43, 0, 0, "-", "fnodes"], [43, 0, 0, "-", "futils"], [43, 0, 0, "-", "matrix_nodes"], [43, 0, 0, "-", "pyutils"], [43, 0, 0, "-", "rewriting"]], "sympy.codegen.algorithms": [[43, 4, 1, "", "newtons_method"], [43, 4, 1, "", "newtons_method_function"]], "sympy.codegen.approximations": [[43, 1, 1, "", "SeriesApprox"], [43, 1, 1, "", "SumApprox"]], "sympy.codegen.ast": [[43, 1, 1, "", "Assignment"], [43, 1, 1, "", "AssignmentBase"], [43, 1, 1, "", "Attribute"], [43, 1, 1, "", "AugmentedAssignment"], [43, 1, 1, "", "BreakToken"], [43, 1, 1, "", "CodeBlock"], [43, 1, 1, "", "Comment"], [43, 1, 1, "", "ComplexType"], [43, 1, 1, "", "ContinueToken"], [43, 1, 1, "", "Declaration"], [43, 1, 1, "", "Element"], [43, 1, 1, "", "FloatBaseType"], [43, 1, 1, "", "FloatType"], [43, 1, 1, "", "For"], [43, 1, 1, "", "FunctionCall"], [43, 1, 1, "", "FunctionDefinition"], [43, 1, 1, "", "FunctionPrototype"], [43, 1, 1, "", "IntBaseType"], [43, 1, 1, "", "Node"], [43, 1, 1, "", "NoneToken"], [43, 1, 1, "", "Pointer"], [43, 1, 1, "", "Print"], [43, 1, 1, "", "QuotedString"], [43, 1, 1, "", "Return"], [43, 1, 1, "", "Scope"], [43, 1, 1, "", "SignedIntType"], [43, 1, 1, "", "Stream"], [43, 1, 1, "", "String"], [43, 1, 1, "", "Token"], [43, 1, 1, "", "Type"], [43, 1, 1, "", "UnsignedIntType"], [43, 1, 1, "", "Variable"], [43, 1, 1, "", "While"], [43, 4, 1, "", "aug_assign"]], "sympy.codegen.ast.CodeBlock": [[43, 2, 1, "", "cse"], [43, 2, 1, "", "topological_sort"]], "sympy.codegen.ast.FloatBaseType": [[43, 5, 1, "", "cast_nocheck"]], "sympy.codegen.ast.FloatType": [[43, 2, 1, "", "cast_nocheck"], [43, 3, 1, "", "decimal_dig"], [43, 3, 1, "", "dig"], [43, 3, 1, "", "eps"], [43, 3, 1, "", "max"], [43, 3, 1, "", "max_exponent"], [43, 3, 1, "", "min_exponent"], [43, 3, 1, "", "tiny"]], "sympy.codegen.ast.Node": [[43, 2, 1, "", "attr_params"]], "sympy.codegen.ast.Token": [[43, 2, 1, "", "kwargs"]], "sympy.codegen.ast.Type": [[43, 2, 1, "", "cast_check"], [43, 2, 1, "", "from_expr"]], "sympy.codegen.ast.Variable": [[43, 2, 1, "", "as_Declaration"], [43, 2, 1, "", "deduced"]], "sympy.codegen.cfunctions": [[43, 1, 1, "", "Cbrt"], [43, 1, 1, "", "Sqrt"], [43, 1, 1, "", "exp2"], [43, 1, 1, "", "expm1"], [43, 1, 1, "", "fma"], [43, 1, 1, "", "hypot"], [43, 1, 1, "", "log10"], [43, 1, 1, "", "log1p"], [43, 1, 1, "", "log2"]], "sympy.codegen.cfunctions.Cbrt": [[43, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.Sqrt": [[43, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.exp2": [[43, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.expm1": [[43, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.fma": [[43, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.hypot": [[43, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log10": [[43, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log1p": [[43, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log2": [[43, 2, 1, "", "fdiff"]], "sympy.codegen.cnodes": [[43, 1, 1, "", "CommaOperator"], [43, 1, 1, "", "Label"], [43, 1, 1, "", "PostDecrement"], [43, 1, 1, "", "PostIncrement"], [43, 1, 1, "", "PreDecrement"], [43, 1, 1, "", "PreIncrement"], [43, 4, 1, "", "alignof"], [43, 1, 1, "", "goto"], [43, 4, 1, "", "sizeof"], [43, 1, 1, "", "struct"], [43, 1, 1, "", "union"]], "sympy.codegen.cutils": [[43, 4, 1, "", "render_as_source_file"]], "sympy.codegen.cxxnodes": [[43, 1, 1, "", "using"]], "sympy.codegen.fnodes": [[43, 1, 1, "", "ArrayConstructor"], [43, 1, 1, "", "Do"], [43, 1, 1, "", "Extent"], [43, 1, 1, "", "FortranReturn"], [43, 1, 1, "", "GoTo"], [43, 1, 1, "", "ImpliedDoLoop"], [43, 1, 1, "", "Module"], [43, 1, 1, "", "Program"], [43, 1, 1, "", "Subroutine"], [43, 1, 1, "", "SubroutineCall"], [43, 4, 1, "", "allocated"], [43, 4, 1, "", "array"], [43, 4, 1, "", "bind_C"], [43, 1, 1, "", "cmplx"], [43, 4, 1, "", "dimension"], [43, 1, 1, "", "dsign"], [43, 1, 1, "", "isign"], [43, 1, 1, "", "kind"], [43, 4, 1, "", "lbound"], [43, 1, 1, "", "literal_dp"], [43, 1, 1, "", "literal_sp"], [43, 1, 1, "", "merge"], [43, 4, 1, "", "reshape"], [43, 4, 1, "", "shape"], [43, 4, 1, "", "size"], [43, 1, 1, "", "use"], [43, 1, 1, "", "use_rename"]], "sympy.codegen.futils": [[43, 4, 1, "", "render_as_module"]], "sympy.codegen.matrix_nodes": [[43, 1, 1, "", "MatrixSolve"]], "sympy.codegen.pyutils": [[43, 4, 1, "", "render_as_module"]], "sympy.codegen.rewriting": [[43, 1, 1, "", "FuncMinusOneOptim"], [43, 1, 1, "", "Optimization"], [43, 1, 1, "", "ReplaceOptim"], [43, 4, 1, "", "create_expand_pow_optimization"], [43, 4, 1, "", "optimize"]], "sympy.codegen.rewriting.FuncMinusOneOptim": [[43, 2, 1, "", "replace_in_Add"]], "sympy.combinatorics": [[45, 0, 0, "-", "galois"], [54, 0, 0, "-", "generators"], [46, 0, 0, "-", "graycode"], [47, 0, 0, "-", "group_constructs"], [48, 0, 0, "-", "group_numbers"], [50, 0, 0, "-", "named_groups"], [51, 0, 0, "-", "partitions"], [53, 0, 0, "-", "perm_groups"], [54, 0, 0, "-", "permutations"], [55, 0, 0, "-", "polyhedron"], [56, 0, 0, "-", "prufer"], [57, 0, 0, "-", "subsets"], [58, 0, 0, "-", "tensor_can"], [59, 0, 0, "-", "testutil"], [60, 0, 0, "-", "util"]], "sympy.combinatorics.galois": [[45, 4, 1, "", "A4_in_S6"], [45, 4, 1, "", "A4xC2"], [45, 4, 1, "", "G18"], [45, 4, 1, "", "G36m"], [45, 4, 1, "", "G36p"], [45, 4, 1, "", "G72"], [45, 4, 1, "", "M20"], [45, 4, 1, "", "PGL2F5"], [45, 4, 1, "", "PSL2F5"], [45, 1, 1, "", "S1TransitiveSubgroups"], [45, 1, 1, "", "S2TransitiveSubgroups"], [45, 1, 1, "", "S3TransitiveSubgroups"], [45, 4, 1, "", "S3_in_S6"], [45, 1, 1, "", "S4TransitiveSubgroups"], [45, 4, 1, "", "S4m"], [45, 4, 1, "", "S4p"], [45, 4, 1, "", "S4xC2"], [45, 1, 1, "", "S5TransitiveSubgroups"], [45, 1, 1, "", "S6TransitiveSubgroups"], [45, 4, 1, "", "find_transitive_subgroups_of_S6"], [45, 4, 1, "", "four_group"]], "sympy.combinatorics.generators": [[54, 2, 1, "", "alternating"], [54, 2, 1, "", "cyclic"], [54, 2, 1, "", "dihedral"], [54, 2, 1, "", "symmetric"]], "sympy.combinatorics.graycode": [[46, 1, 1, "", "GrayCode"], [46, 2, 1, "", "bin_to_gray"], [46, 2, 1, "", "get_subset_from_bitstring"], [46, 2, 1, "", "gray_to_bin"], [46, 2, 1, "", "graycode_subsets"], [46, 2, 1, "", "random_bitstring"]], "sympy.combinatorics.graycode.GrayCode": [[46, 3, 1, "", "current"], [46, 2, 1, "", "generate_gray"], [46, 3, 1, "", "n"], [46, 2, 1, "", "next"], [46, 3, 1, "", "rank"], [46, 3, 1, "", "selections"], [46, 2, 1, "", "skip"], [46, 2, 1, "", "unrank"]], "sympy.combinatorics.group_constructs": [[47, 4, 1, "", "DirectProduct"]], "sympy.combinatorics.group_numbers": [[48, 4, 1, "", "is_abelian_number"], [48, 4, 1, "", "is_cyclic_number"], [48, 4, 1, "", "is_nilpotent_number"]], "sympy.combinatorics.named_groups": [[50, 4, 1, "", "AbelianGroup"], [50, 4, 1, "", "AlternatingGroup"], [50, 4, 1, "", "CyclicGroup"], [50, 4, 1, "", "DihedralGroup"], [50, 4, 1, "", "SymmetricGroup"]], "sympy.combinatorics.partitions": [[51, 1, 1, "", "IntegerPartition"], [51, 1, 1, "", "Partition"], [51, 4, 1, "", "RGS_enum"], [51, 4, 1, "", "RGS_generalized"], [51, 4, 1, "", "RGS_rank"], [51, 4, 1, "", "RGS_unrank"], [51, 4, 1, "", "random_integer_partition"]], "sympy.combinatorics.partitions.IntegerPartition": [[51, 2, 1, "", "as_dict"], [51, 2, 1, "", "as_ferrers"], [51, 3, 1, "", "conjugate"], [51, 2, 1, "", "next_lex"], [51, 2, 1, "", "prev_lex"]], "sympy.combinatorics.partitions.Partition": [[51, 3, 1, "", "RGS"], [51, 2, 1, "", "from_rgs"], [51, 3, 1, "", "partition"], [51, 3, 1, "", "rank"], [51, 2, 1, "", "sort_key"]], "sympy.combinatorics.perm_groups": [[53, 1, 1, "", "PermutationGroup"]], "sympy.combinatorics.perm_groups.PermutationGroup": [[53, 2, 1, "", "__contains__"], [53, 2, 1, "", "__mul__"], [53, 2, 1, "", "__new__"], [53, 5, 1, "", "__weakref__"], [53, 2, 1, "", "_coset_representative"], [53, 2, 1, "", "_distinct_primes_lemma"], [53, 3, 1, "", "_elements"], [53, 2, 1, "", "_eval_is_alt_sym_monte_carlo"], [53, 2, 1, "", "_eval_is_alt_sym_naive"], [53, 2, 1, "", "_p_elements_group"], [53, 2, 1, "", "_random_pr_init"], [53, 2, 1, "", "_sylow_alt_sym"], [53, 2, 1, "", "_union_find_merge"], [53, 2, 1, "", "_union_find_rep"], [53, 2, 1, "", "_verify"], [53, 2, 1, "", "abelian_invariants"], [53, 3, 1, "", "base"], [53, 2, 1, "", "baseswap"], [53, 3, 1, "", "basic_orbits"], [53, 3, 1, "", "basic_stabilizers"], [53, 3, 1, "", "basic_transversals"], [53, 2, 1, "", "center"], [53, 2, 1, "", "centralizer"], [53, 2, 1, "", "commutator"], [53, 2, 1, "", "composition_series"], [53, 2, 1, "", "conjugacy_class"], [53, 2, 1, "", "conjugacy_classes"], [53, 2, 1, "", "contains"], [53, 2, 1, "", "coset_factor"], [53, 2, 1, "", "coset_rank"], [53, 2, 1, "", "coset_table"], [53, 2, 1, "", "coset_transversal"], [53, 2, 1, "", "coset_unrank"], [53, 3, 1, "", "degree"], [53, 2, 1, "", "derived_series"], [53, 2, 1, "", "derived_subgroup"], [53, 3, 1, "", "elements"], [53, 2, 1, "", "equals"], [53, 2, 1, "", "generate"], [53, 2, 1, "", "generate_dimino"], [53, 2, 1, "", "generate_schreier_sims"], [53, 2, 1, "", "generator_product"], [53, 3, 1, "", "generators"], [53, 3, 1, "", "identity"], [53, 2, 1, "", "index"], [53, 3, 1, "", "is_abelian"], [53, 2, 1, "", "is_alt_sym"], [53, 3, 1, "", "is_alternating"], [53, 3, 1, "", "is_cyclic"], [53, 3, 1, "", "is_dihedral"], [53, 2, 1, "", "is_elementary"], [53, 3, 1, "", "is_nilpotent"], [53, 2, 1, "", "is_normal"], [53, 3, 1, "", "is_perfect"], [53, 3, 1, "", "is_polycyclic"], [53, 2, 1, "", "is_primitive"], [53, 3, 1, "", "is_solvable"], [53, 2, 1, "", "is_subgroup"], [53, 3, 1, "", "is_symmetric"], [53, 2, 1, "", "is_transitive"], [53, 3, 1, "", "is_trivial"], [53, 2, 1, "", "lower_central_series"], [53, 2, 1, "", "make_perm"], [53, 3, 1, "", "max_div"], [53, 2, 1, "", "minimal_block"], [53, 2, 1, "", "minimal_blocks"], [53, 2, 1, "", "normal_closure"], [53, 2, 1, "", "orbit"], [53, 2, 1, "", "orbit_rep"], [53, 2, 1, "", "orbit_transversal"], [53, 2, 1, "", "orbits"], [53, 2, 1, "", "order"], [53, 2, 1, "", "pointwise_stabilizer"], [53, 2, 1, "", "polycyclic_group"], [53, 2, 1, "", "presentation"], [53, 2, 1, "", "random"], [53, 2, 1, "", "random_pr"], [53, 2, 1, "", "random_stab"], [53, 2, 1, "", "schreier_sims"], [53, 2, 1, "", "schreier_sims_incremental"], [53, 2, 1, "", "schreier_sims_random"], [53, 2, 1, "", "schreier_vector"], [53, 2, 1, "", "stabilizer"], [53, 3, 1, "", "strong_gens"], [53, 2, 1, "", "strong_presentation"], [53, 2, 1, "", "subgroup"], [53, 2, 1, "", "subgroup_search"], [53, 2, 1, "", "sylow_subgroup"], [53, 3, 1, "", "transitivity_degree"]], "sympy.combinatorics.permutations": [[54, 1, 1, "", "Cycle"], [54, 1, 1, "", "Permutation"], [54, 4, 1, "", "_af_parity"]], "sympy.combinatorics.permutations.Cycle": [[54, 2, 1, "", "list"]], "sympy.combinatorics.permutations.Permutation": [[54, 2, 1, "", "apply"], [54, 3, 1, "", "array_form"], [54, 2, 1, "", "ascents"], [54, 2, 1, "", "atoms"], [54, 3, 1, "", "cardinality"], [54, 2, 1, "", "commutator"], [54, 2, 1, "", "commutes_with"], [54, 3, 1, "", "cycle_structure"], [54, 3, 1, "", "cycles"], [54, 3, 1, "", "cyclic_form"], [54, 2, 1, "", "descents"], [54, 2, 1, "", "from_inversion_vector"], [54, 2, 1, "", "from_sequence"], [54, 3, 1, "", "full_cyclic_form"], [54, 2, 1, "", "get_adjacency_distance"], [54, 2, 1, "", "get_adjacency_matrix"], [54, 2, 1, "", "get_positional_distance"], [54, 2, 1, "", "get_precedence_distance"], [54, 2, 1, "", "get_precedence_matrix"], [54, 2, 1, "", "index"], [54, 2, 1, "", "inversion_vector"], [54, 2, 1, "", "inversions"], [54, 3, 1, "", "is_Empty"], [54, 3, 1, "", "is_Identity"], [54, 3, 1, "", "is_Singleton"], [54, 3, 1, "", "is_even"], [54, 3, 1, "", "is_odd"], [54, 2, 1, "", "josephus"], [54, 2, 1, "", "length"], [54, 2, 1, "", "list"], [54, 2, 1, "", "max"], [54, 2, 1, "", "min"], [54, 2, 1, "", "mul_inv"], [54, 2, 1, "", "next_lex"], [54, 2, 1, "", "next_nonlex"], [54, 2, 1, "", "next_trotterjohnson"], [54, 2, 1, "", "order"], [54, 2, 1, "", "parity"], [54, 2, 1, "", "random"], [54, 2, 1, "", "rank"], [54, 2, 1, "", "rank_nonlex"], [54, 2, 1, "", "rank_trotterjohnson"], [54, 2, 1, "", "resize"], [54, 2, 1, "", "rmul"], [54, 2, 1, "", "rmul_with_af"], [54, 2, 1, "", "runs"], [54, 2, 1, "", "signature"], [54, 3, 1, "", "size"], [54, 2, 1, "", "support"], [54, 2, 1, "", "transpositions"], [54, 2, 1, "", "unrank_lex"], [54, 2, 1, "", "unrank_nonlex"], [54, 2, 1, "", "unrank_trotterjohnson"]], "sympy.combinatorics.polyhedron": [[55, 1, 1, "", "Polyhedron"]], "sympy.combinatorics.polyhedron.Polyhedron": [[55, 3, 1, "", "array_form"], [55, 3, 1, "", "corners"], [55, 3, 1, "", "cyclic_form"], [55, 3, 1, "", "edges"], [55, 3, 1, "", "faces"], [55, 3, 1, "", "pgroup"], [55, 2, 1, "", "reset"], [55, 2, 1, "", "rotate"], [55, 3, 1, "", "size"], [55, 3, 1, "", "vertices"]], "sympy.combinatorics.prufer": [[56, 1, 1, "", "Prufer"]], "sympy.combinatorics.prufer.Prufer": [[56, 2, 1, "", "edges"], [56, 2, 1, "", "next"], [56, 3, 1, "", "nodes"], [56, 2, 1, "", "prev"], [56, 2, 1, "", "prufer_rank"], [56, 3, 1, "", "prufer_repr"], [56, 3, 1, "", "rank"], [56, 3, 1, "", "size"], [56, 2, 1, "", "to_prufer"], [56, 2, 1, "", "to_tree"], [56, 3, 1, "", "tree_repr"], [56, 2, 1, "", "unrank"]], "sympy.combinatorics.subsets": [[57, 1, 1, "", "Subset"], [57, 2, 1, "", "ksubsets"]], "sympy.combinatorics.subsets.Subset": [[57, 2, 1, "", "bitlist_from_subset"], [57, 3, 1, "", "cardinality"], [57, 2, 1, "", "iterate_binary"], [57, 2, 1, "", "iterate_graycode"], [57, 2, 1, "", "next_binary"], [57, 2, 1, "", "next_gray"], [57, 2, 1, "", "next_lexicographic"], [57, 2, 1, "", "prev_binary"], [57, 2, 1, "", "prev_gray"], [57, 2, 1, "", "prev_lexicographic"], [57, 3, 1, "", "rank_binary"], [57, 3, 1, "", "rank_gray"], [57, 3, 1, "", "rank_lexicographic"], [57, 3, 1, "", "size"], [57, 3, 1, "", "subset"], [57, 2, 1, "", "subset_from_bitlist"], [57, 2, 1, "", "subset_indices"], [57, 3, 1, "", "superset"], [57, 3, 1, "", "superset_size"], [57, 2, 1, "", "unrank_binary"], [57, 2, 1, "", "unrank_gray"]], "sympy.combinatorics.tensor_can": [[58, 4, 1, "", "bsgs_direct_product"], [58, 4, 1, "", "canonicalize"], [58, 4, 1, "", "double_coset_can_rep"], [58, 4, 1, "", "get_symmetric_group_sgs"]], "sympy.combinatorics.testutil": [[59, 4, 1, "", "_cmp_perm_lists"], [59, 4, 1, "", "_naive_list_centralizer"], [59, 4, 1, "", "_verify_bsgs"], [59, 4, 1, "", "_verify_centralizer"], [59, 4, 1, "", "_verify_normal_closure"]], "sympy.combinatorics.util": [[60, 4, 1, "", "_base_ordering"], [60, 4, 1, "", "_check_cycles_alt_sym"], [60, 4, 1, "", "_distribute_gens_by_base"], [60, 4, 1, "", "_handle_precomputed_bsgs"], [60, 4, 1, "", "_orbits_transversals_from_bsgs"], [60, 4, 1, "", "_remove_gens"], [60, 4, 1, "", "_strip"], [60, 4, 1, "", "_strong_gens_from_distr"]], "sympy.concrete.expr_with_intlimits": [[61, 1, 1, "", "ExprWithIntLimits"]], "sympy.concrete.expr_with_intlimits.ExprWithIntLimits": [[61, 2, 1, "", "change_index"], [61, 3, 1, "", "has_empty_sequence"], [61, 2, 1, "", "index"], [61, 2, 1, "", "reorder"], [61, 2, 1, "", "reorder_limit"]], "sympy.concrete.expr_with_limits": [[89, 1, 1, "", "ExprWithLimits"]], "sympy.concrete.expr_with_limits.ExprWithLimits": [[89, 3, 1, "", "bound_symbols"], [89, 3, 1, "", "free_symbols"], [89, 3, 1, "", "function"], [89, 3, 1, "", "has_finite_limits"], [89, 3, 1, "", "has_reversed_limits"], [89, 3, 1, "", "is_number"], [89, 3, 1, "", "limits"], [89, 3, 1, "", "variables"]], "sympy.concrete.gosper": [[61, 4, 1, "", "gosper_normal"], [61, 4, 1, "", "gosper_sum"], [61, 4, 1, "", "gosper_term"]], "sympy.concrete.products": [[61, 1, 1, "", "Product"], [61, 4, 1, "", "product"]], "sympy.concrete.products.Product": [[61, 2, 1, "", "is_convergent"], [61, 2, 1, "", "reverse_order"]], "sympy.concrete.summations": [[61, 1, 1, "", "Sum"], [61, 4, 1, "", "summation"]], "sympy.concrete.summations.Sum": [[61, 2, 1, "", "euler_maclaurin"], [61, 2, 1, "", "eval_zeta_function"], [61, 2, 1, "", "is_absolutely_convergent"], [61, 2, 1, "", "is_convergent"], [61, 2, 1, "", "reverse_order"]], "sympy.core": [[62, 0, 0, "-", "add"], [62, 0, 0, "-", "assumptions"], [62, 0, 0, "-", "basic"], [62, 0, 0, "-", "cache"], [62, 0, 0, "-", "containers"], [62, 0, 0, "-", "evalf"], [62, 0, 0, "-", "expr"], [62, 0, 0, "-", "exprtools"], [62, 0, 0, "-", "function"], [62, 0, 0, "-", "kind"], [62, 0, 0, "-", "mod"], [62, 0, 0, "-", "mul"], [62, 0, 0, "-", "multidimensional"], [62, 0, 0, "-", "numbers"], [62, 0, 0, "-", "power"], [62, 0, 0, "-", "random"], [62, 0, 0, "-", "relational"], [62, 0, 0, "-", "singleton"], [62, 0, 0, "-", "symbol"], [62, 0, 0, "-", "sympify"], [62, 0, 0, "-", "traversal"]], "sympy.core.add": [[62, 1, 1, "", "Add"]], "sympy.core.add.Add": [[62, 2, 1, "", "as_coeff_Add"], [62, 2, 1, "", "as_coeff_add"], [62, 2, 1, "", "as_content_primitive"], [62, 2, 1, "", "as_numer_denom"], [62, 2, 1, "", "as_real_imag"], [62, 2, 1, "", "as_two_terms"], [62, 2, 1, "", "extract_leading_order"], [62, 2, 1, "", "flatten"], [62, 2, 1, "", "primitive"]], "sympy.core.basic": [[62, 1, 1, "", "Atom"], [62, 1, 1, "", "Basic"]], "sympy.core.basic.Basic": [[62, 3, 1, "", "args"], [62, 2, 1, "", "as_content_primitive"], [62, 2, 1, "", "as_dummy"], [62, 3, 1, "", "assumptions0"], [62, 2, 1, "", "atoms"], [62, 3, 1, "", "canonical_variables"], [62, 2, 1, "", "class_key"], [62, 2, 1, "", "compare"], [62, 2, 1, "", "count"], [62, 2, 1, "", "count_ops"], [62, 2, 1, "", "doit"], [62, 2, 1, "", "dummy_eq"], [62, 2, 1, "", "find"], [62, 3, 1, "", "free_symbols"], [62, 2, 1, "", "fromiter"], [62, 3, 1, "", "func"], [62, 2, 1, "", "has"], [62, 2, 1, "", "has_free"], [62, 2, 1, "", "has_xfree"], [62, 3, 1, "", "is_comparable"], [62, 2, 1, "", "match"], [62, 2, 1, "", "matches"], [62, 2, 1, "", "rcall"], [62, 2, 1, "", "refine"], [62, 2, 1, "", "replace"], [62, 2, 1, "", "rewrite"], [62, 2, 1, "", "simplify"], [62, 2, 1, "", "sort_key"], [62, 2, 1, "", "subs"], [62, 2, 1, "", "xreplace"]], "sympy.core.cache": [[62, 4, 1, "", "__cacheit"]], "sympy.core.containers": [[62, 1, 1, "", "Dict"], [62, 1, 1, "", "Tuple"], [62, 1, 1, "", "TupleKind"]], "sympy.core.containers.Dict": [[62, 2, 1, "", "get"], [62, 2, 1, "", "items"], [62, 2, 1, "", "keys"], [62, 2, 1, "", "values"]], "sympy.core.containers.Tuple": [[62, 2, 1, "", "index"], [62, 3, 1, "", "kind"], [62, 2, 1, "", "tuple_count"]], "sympy.core.evalf": [[62, 1, 1, "", "EvalfMixin"], [62, 4, 1, "", "N"], [62, 1, 1, "", "PrecisionExhausted"]], "sympy.core.evalf.EvalfMixin": [[62, 2, 1, "", "evalf"], [62, 2, 1, "", "n"]], "sympy.core.expr": [[62, 1, 1, "", "AtomicExpr"], [62, 1, 1, "", "Expr"], [62, 1, 1, "", "UnevaluatedExpr"]], "sympy.core.expr.Expr": [[62, 2, 1, "", "apart"], [62, 2, 1, "", "args_cnc"], [62, 2, 1, "", "as_coeff_Add"], [62, 2, 1, "", "as_coeff_Mul"], [62, 2, 1, "", "as_coeff_add"], [62, 2, 1, "", "as_coeff_exponent"], [62, 2, 1, "", "as_coeff_mul"], [62, 2, 1, "", "as_coefficient"], [62, 2, 1, "", "as_coefficients_dict"], [62, 2, 1, "", "as_content_primitive"], [62, 2, 1, "", "as_expr"], [62, 2, 1, "", "as_independent"], [62, 2, 1, "", "as_leading_term"], [62, 2, 1, "", "as_numer_denom"], [62, 2, 1, "", "as_ordered_factors"], [62, 2, 1, "", "as_ordered_terms"], [62, 2, 1, "", "as_poly"], [62, 2, 1, "", "as_powers_dict"], [62, 2, 1, "", "as_real_imag"], [62, 2, 1, "", "as_terms"], [62, 2, 1, "", "aseries"], [62, 2, 1, "", "cancel"], [62, 2, 1, "", "coeff"], [62, 2, 1, "", "collect"], [62, 2, 1, "", "combsimp"], [62, 2, 1, "", "compute_leading_term"], [62, 2, 1, "", "conjugate"], [62, 2, 1, "", "could_extract_minus_sign"], [62, 2, 1, "", "equals"], [62, 2, 1, "", "expand"], [62, 3, 1, "", "expr_free_symbols"], [62, 2, 1, "", "extract_additively"], [62, 2, 1, "", "extract_branch_factor"], [62, 2, 1, "", "extract_multiplicatively"], [62, 2, 1, "", "factor"], [62, 2, 1, "", "fourier_series"], [62, 2, 1, "", "fps"], [62, 2, 1, "", "gammasimp"], [62, 2, 1, "", "getO"], [62, 2, 1, "", "getn"], [62, 2, 1, "", "integrate"], [62, 2, 1, "", "invert"], [62, 2, 1, "", "is_algebraic_expr"], [62, 2, 1, "", "is_constant"], [62, 2, 1, "", "is_meromorphic"], [62, 3, 1, "", "is_number"], [62, 2, 1, "", "is_polynomial"], [62, 2, 1, "", "is_rational_function"], [62, 2, 1, "", "leadterm"], [62, 2, 1, "", "limit"], [62, 2, 1, "", "lseries"], [62, 2, 1, "", "normal"], [62, 2, 1, "", "nseries"], [62, 2, 1, "", "nsimplify"], [62, 2, 1, "", "powsimp"], [62, 2, 1, "", "primitive"], [62, 2, 1, "", "radsimp"], [62, 2, 1, "", "ratsimp"], [62, 2, 1, "", "removeO"], [62, 2, 1, "", "round"], [62, 2, 1, "", "separate"], [62, 2, 1, "", "series"], [62, 2, 1, "", "taylor_term"], [62, 2, 1, "", "together"], [62, 2, 1, "", "trigsimp"]], "sympy.core.exprtools": [[62, 4, 1, "", "factor_terms"], [62, 4, 1, "", "gcd_terms"]], "sympy.core.function": [[62, 1, 1, "", "Derivative"], [62, 1, 1, "", "Function"], [62, 1, 1, "", "FunctionClass"], [62, 1, 1, "", "Lambda"], [62, 1, 1, "", "PoleError"], [62, 1, 1, "", "Subs"], [62, 1, 1, "", "WildFunction"], [62, 4, 1, "", "count_ops"], [62, 4, 1, "", "diff"], [62, 4, 1, "", "expand"], [62, 4, 1, "", "expand_complex"], [62, 4, 1, "", "expand_func"], [62, 4, 1, "", "expand_log"], [62, 4, 1, "", "expand_mul"], [62, 4, 1, "", "expand_multinomial"], [62, 4, 1, "", "expand_power_base"], [62, 4, 1, "", "expand_power_exp"], [62, 4, 1, "", "expand_trig"], [62, 4, 1, "", "nfloat"]], "sympy.core.function.Derivative": [[62, 3, 1, "", "_diff_wrt"], [62, 2, 1, "", "_sort_variable_count"], [62, 2, 1, "", "as_finite_difference"], [62, 2, 1, "", "doit_numerically"]], "sympy.core.function.Function": [[62, 2, 1, "", "as_base_exp"], [62, 2, 1, "", "fdiff"], [62, 2, 1, "", "is_singular"]], "sympy.core.function.FunctionClass": [[62, 3, 1, "", "nargs"]], "sympy.core.function.Lambda": [[62, 3, 1, "", "bound_symbols"], [62, 3, 1, "", "expr"], [62, 3, 1, "", "is_identity"], [62, 3, 1, "", "signature"], [62, 3, 1, "", "variables"]], "sympy.core.function.Subs": [[62, 3, 1, "", "bound_symbols"], [62, 3, 1, "", "expr"], [62, 3, 1, "", "point"], [62, 3, 1, "", "variables"]], "sympy.core.kind": [[62, 5, 1, "", "BooleanKind"], [62, 1, 1, "", "Kind"], [62, 5, 1, "", "NumberKind"], [62, 5, 1, "", "UndefinedKind"]], "sympy.core.mod": [[62, 1, 1, "", "Mod"]], "sympy.core.mul": [[62, 1, 1, "", "Mul"], [62, 4, 1, "", "prod"]], "sympy.core.mul.Mul": [[62, 2, 1, "", "as_coeff_Mul"], [62, 2, 1, "", "as_content_primitive"], [62, 2, 1, "", "as_ordered_factors"], [62, 2, 1, "", "as_two_terms"], [62, 2, 1, "", "flatten"]], "sympy.core.multidimensional": [[62, 1, 1, "", "vectorize"]], "sympy.core.numbers": [[62, 1, 1, "", "AlgebraicNumber"], [62, 1, 1, "", "Catalan"], [62, 1, 1, "", "ComplexInfinity"], [62, 1, 1, "", "EulerGamma"], [62, 1, 1, "", "Exp1"], [62, 1, 1, "", "Float"], [62, 1, 1, "", "GoldenRatio"], [62, 1, 1, "", "Half"], [62, 1, 1, "", "ImaginaryUnit"], [62, 1, 1, "", "Infinity"], [62, 1, 1, "", "Integer"], [62, 1, 1, "", "NaN"], [62, 1, 1, "", "NegativeInfinity"], [62, 1, 1, "", "NegativeOne"], [62, 1, 1, "", "Number"], [62, 1, 1, "", "NumberSymbol"], [62, 1, 1, "", "One"], [62, 1, 1, "", "Pi"], [62, 1, 1, "", "Rational"], [62, 5, 1, "", "RealNumber"], [62, 1, 1, "", "TribonacciConstant"], [62, 1, 1, "", "Zero"], [62, 4, 1, "", "equal_valued"], [62, 4, 1, "", "igcd"], [62, 4, 1, "", "ilcm"], [62, 4, 1, "", "mod_inverse"], [62, 4, 1, "", "seterr"]], "sympy.core.numbers.AlgebraicNumber": [[62, 2, 1, "", "__new__"], [62, 2, 1, "", "as_expr"], [62, 2, 1, "", "as_poly"], [62, 2, 1, "", "coeffs"], [62, 2, 1, "", "field_element"], [62, 3, 1, "", "is_aliased"], [62, 3, 1, "", "is_primitive_element"], [62, 2, 1, "", "minpoly_of_element"], [62, 2, 1, "", "native_coeffs"], [62, 2, 1, "", "primitive_element"], [62, 2, 1, "", "to_algebraic_integer"], [62, 2, 1, "", "to_primitive_element"], [62, 2, 1, "", "to_root"]], "sympy.core.numbers.Number": [[62, 2, 1, "", "as_coeff_Add"], [62, 2, 1, "", "as_coeff_Mul"], [62, 2, 1, "", "cofactors"], [62, 2, 1, "", "gcd"], [62, 2, 1, "", "lcm"]], "sympy.core.numbers.NumberSymbol": [[62, 2, 1, "", "approximation"]], "sympy.core.numbers.Rational": [[62, 2, 1, "", "as_coeff_Add"], [62, 2, 1, "", "as_coeff_Mul"], [62, 2, 1, "", "as_content_primitive"], [62, 2, 1, "", "factors"], [62, 2, 1, "", "limit_denominator"]], "sympy.core.power": [[62, 1, 1, "", "Pow"], [62, 4, 1, "", "integer_log"], [62, 4, 1, "", "integer_nthroot"]], "sympy.core.power.Pow": [[62, 2, 1, "", "as_base_exp"], [62, 2, 1, "", "as_content_primitive"]], "sympy.core.random": [[62, 4, 1, "", "_randint"], [62, 4, 1, "", "_randrange"], [62, 4, 1, "", "random_complex_number"], [62, 4, 1, "", "test_derivative_numerically"], [62, 4, 1, "", "verify_numerically"]], "sympy.core.relational": [[62, 5, 1, "", "Eq"], [62, 1, 1, "", "Equality"], [62, 5, 1, "", "Ge"], [62, 1, 1, "", "GreaterThan"], [62, 5, 1, "", "Gt"], [62, 5, 1, "", "Le"], [62, 1, 1, "", "LessThan"], [62, 5, 1, "", "Lt"], [62, 5, 1, "", "Ne"], [62, 5, 1, "", "Rel"], [62, 1, 1, "", "Relational"], [62, 1, 1, "", "StrictGreaterThan"], [62, 1, 1, "", "StrictLessThan"], [62, 1, 1, "", "Unequality"]], "sympy.core.relational.Equality": [[62, 2, 1, "", "as_poly"], [62, 2, 1, "", "integrate"]], "sympy.core.relational.Relational": [[62, 3, 1, "", "canonical"], [62, 2, 1, "", "equals"], [62, 3, 1, "", "lhs"], [62, 3, 1, "", "negated"], [62, 3, 1, "", "reversed"], [62, 3, 1, "", "reversedsign"], [62, 3, 1, "", "rhs"], [62, 3, 1, "", "strict"], [62, 3, 1, "", "weak"]], "sympy.core.singleton": [[62, 1, 1, "", "Singleton"], [62, 1, 1, "", "SingletonRegistry"]], "sympy.core.sorting": [[62, 4, 1, "", "default_sort_key"], [62, 4, 1, "", "ordered"]], "sympy.core.symbol": [[62, 1, 1, "", "Dummy"], [62, 1, 1, "", "Symbol"], [62, 1, 1, "", "Wild"], [62, 4, 1, "", "symbols"], [62, 4, 1, "", "var"]], "sympy.core.sympify": [[62, 4, 1, "", "sympify"]], "sympy.core.traversal": [[62, 4, 1, "", "bottom_up"], [62, 4, 1, "", "postorder_traversal"], [62, 4, 1, "", "preorder_traversal"], [62, 4, 1, "", "use"], [62, 4, 1, "", "walk"]], "sympy.crypto": [[63, 0, 0, "-", "crypto"]], "sympy.crypto.crypto": [[63, 4, 1, "", "AZ"], [63, 4, 1, "", "bifid5_square"], [63, 4, 1, "", "bifid6_square"], [63, 4, 1, "", "check_and_join"], [63, 4, 1, "", "cycle_list"], [63, 4, 1, "", "decipher_affine"], [63, 4, 1, "", "decipher_atbash"], [63, 4, 1, "", "decipher_bifid"], [63, 4, 1, "", "decipher_bifid5"], [63, 4, 1, "", "decipher_bifid6"], [63, 4, 1, "", "decipher_elgamal"], [63, 4, 1, "", "decipher_gm"], [63, 4, 1, "", "decipher_hill"], [63, 4, 1, "", "decipher_kid_rsa"], [63, 4, 1, "", "decipher_railfence"], [63, 4, 1, "", "decipher_rot13"], [63, 4, 1, "", "decipher_rsa"], [63, 4, 1, "", "decipher_shift"], [63, 4, 1, "", "decipher_vigenere"], [63, 4, 1, "", "decode_morse"], [63, 4, 1, "", "dh_private_key"], [63, 4, 1, "", "dh_public_key"], [63, 4, 1, "", "dh_shared_key"], [63, 4, 1, "", "elgamal_private_key"], [63, 4, 1, "", "elgamal_public_key"], [63, 4, 1, "", "encipher_affine"], [63, 4, 1, "", "encipher_atbash"], [63, 4, 1, "", "encipher_bifid"], [63, 4, 1, "", "encipher_bifid5"], [63, 4, 1, "", "encipher_bifid6"], [63, 4, 1, "", "encipher_elgamal"], [63, 4, 1, "", "encipher_gm"], [63, 4, 1, "", "encipher_hill"], [63, 4, 1, "", "encipher_kid_rsa"], [63, 4, 1, "", "encipher_railfence"], [63, 4, 1, "", "encipher_rot13"], [63, 4, 1, "", "encipher_rsa"], [63, 4, 1, "", "encipher_shift"], [63, 4, 1, "", "encipher_substitution"], [63, 4, 1, "", "encipher_vigenere"], [63, 4, 1, "", "encode_morse"], [63, 4, 1, "", "gm_private_key"], [63, 4, 1, "", "gm_public_key"], [63, 4, 1, "", "kid_rsa_private_key"], [63, 4, 1, "", "kid_rsa_public_key"], [63, 4, 1, "", "lfsr_autocorrelation"], [63, 4, 1, "", "lfsr_connection_polynomial"], [63, 4, 1, "", "lfsr_sequence"], [63, 4, 1, "", "padded_key"], [63, 4, 1, "", "rsa_private_key"], [63, 4, 1, "", "rsa_public_key"]], "sympy.diffgeom": [[64, 1, 1, "", "BaseCovarDerivativeOp"], [64, 1, 1, "", "BaseScalarField"], [64, 1, 1, "", "BaseVectorField"], [64, 1, 1, "", "Commutator"], [64, 1, 1, "", "CoordSystem"], [64, 1, 1, "", "CoordinateSymbol"], [64, 1, 1, "", "CovarDerivativeOp"], [64, 1, 1, "", "Differential"], [64, 1, 1, "", "LieDerivative"], [64, 1, 1, "", "Manifold"], [64, 1, 1, "", "Patch"], [64, 1, 1, "", "Point"], [64, 1, 1, "", "TensorProduct"], [64, 1, 1, "", "WedgeProduct"], [64, 4, 1, "", "intcurve_diffequ"], [64, 4, 1, "", "intcurve_series"], [64, 4, 1, "", "metric_to_Christoffel_1st"], [64, 4, 1, "", "metric_to_Christoffel_2nd"], [64, 4, 1, "", "metric_to_Ricci_components"], [64, 4, 1, "", "metric_to_Riemann_components"], [64, 4, 1, "", "twoform_to_matrix"], [64, 4, 1, "", "vectors_in_basis"]], "sympy.diffgeom.CoordSystem": [[64, 2, 1, "", "base_oneform"], [64, 2, 1, "", "base_oneforms"], [64, 2, 1, "", "base_scalar"], [64, 2, 1, "", "base_scalars"], [64, 2, 1, "", "base_vector"], [64, 2, 1, "", "base_vectors"], [64, 2, 1, "", "coord_function"], [64, 2, 1, "", "coord_functions"], [64, 2, 1, "", "coord_tuple_transform_to"], [64, 2, 1, "", "jacobian"], [64, 2, 1, "", "jacobian_determinant"], [64, 2, 1, "", "jacobian_matrix"], [64, 2, 1, "", "point"], [64, 2, 1, "", "point_to_coords"], [64, 2, 1, "", "transform"], [64, 2, 1, "", "transformation"]], "sympy.diffgeom.Point": [[64, 2, 1, "", "coords"]], "sympy.discrete": [[65, 0, 0, "-", "convolutions"], [65, 0, 0, "-", "transforms"]], "sympy.discrete.convolutions": [[65, 4, 1, "", "convolution"], [65, 4, 1, "", "convolution_fft"], [65, 4, 1, "", "convolution_fwht"], [65, 4, 1, "", "convolution_ntt"], [65, 4, 1, "", "convolution_subset"], [65, 4, 1, "", "covering_product"], [65, 4, 1, "", "intersecting_product"]], "sympy.discrete.transforms": [[65, 4, 1, "", "fft"], [65, 4, 1, "", "fwht"], [65, 4, 1, "", "ifft"], [65, 4, 1, "", "ifwht"], [65, 4, 1, "", "intt"], [65, 4, 1, "", "inverse_mobius_transform"], [65, 4, 1, "", "mobius_transform"], [65, 4, 1, "", "ntt"]], "sympy.external.pythonmpq": [[202, 1, 1, "", "PythonMPQ"]], "sympy.functions.combinatorial.factorials": [[67, 1, 1, "", "FallingFactorial"], [67, 1, 1, "", "MultiFactorial"], [67, 1, 1, "", "RisingFactorial"], [67, 1, 1, "", "binomial"], [67, 1, 1, "", "factorial"], [67, 1, 1, "", "factorial2"], [67, 1, 1, "", "subfactorial"]], "sympy.functions.combinatorial.numbers": [[67, 1, 1, "", "andre"], [67, 1, 1, "", "bell"], [67, 1, 1, "", "bernoulli"], [67, 1, 1, "", "catalan"], [67, 1, 1, "", "euler"], [67, 1, 1, "", "fibonacci"], [67, 1, 1, "", "genocchi"], [67, 1, 1, "", "harmonic"], [67, 1, 1, "", "lucas"], [67, 4, 1, "", "nC"], [67, 4, 1, "", "nP"], [67, 4, 1, "", "nT"], [67, 1, 1, "", "partition"], [67, 4, 1, "", "stirling"], [67, 1, 1, "", "tribonacci"]], "sympy.functions.elementary.complexes": [[68, 1, 1, "", "Abs"], [68, 1, 1, "", "arg"], [68, 1, 1, "", "conjugate"], [68, 1, 1, "", "im"], [68, 1, 1, "", "periodic_argument"], [68, 1, 1, "", "polar_lift"], [68, 1, 1, "", "principal_branch"], [68, 1, 1, "", "re"], [68, 1, 1, "", "sign"]], "sympy.functions.elementary.complexes.Abs": [[68, 2, 1, "", "fdiff"]], "sympy.functions.elementary.complexes.im": [[68, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.complexes.re": [[68, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.exponential": [[68, 1, 1, "", "LambertW"], [68, 1, 1, "", "exp"], [68, 1, 1, "", "exp_polar"], [68, 1, 1, "", "log"]], "sympy.functions.elementary.exponential.LambertW": [[68, 2, 1, "", "fdiff"]], "sympy.functions.elementary.exponential.exp": [[68, 2, 1, "", "as_real_imag"], [68, 3, 1, "", "base"], [68, 2, 1, "", "fdiff"], [68, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.exponential.log": [[68, 2, 1, "", "as_base_exp"], [68, 2, 1, "", "as_real_imag"], [68, 2, 1, "", "fdiff"], [68, 2, 1, "", "inverse"], [68, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic": [[68, 1, 1, "", "HyperbolicFunction"], [68, 1, 1, "", "acosh"], [68, 1, 1, "", "acoth"], [68, 1, 1, "", "acsch"], [68, 1, 1, "", "asech"], [68, 1, 1, "", "asinh"], [68, 1, 1, "", "atanh"], [68, 1, 1, "", "cosh"], [68, 1, 1, "", "coth"], [68, 1, 1, "", "csch"], [68, 1, 1, "", "sech"], [68, 1, 1, "", "sinh"], [68, 1, 1, "", "tanh"]], "sympy.functions.elementary.hyperbolic.acosh": [[68, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acoth": [[68, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acsch": [[68, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asech": [[68, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asinh": [[68, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.atanh": [[68, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.coth": [[68, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.csch": [[68, 2, 1, "", "fdiff"], [68, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.sinh": [[68, 2, 1, "", "as_real_imag"], [68, 2, 1, "", "fdiff"], [68, 2, 1, "", "inverse"], [68, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.tanh": [[68, 2, 1, "", "inverse"]], "sympy.functions.elementary.integers": [[68, 1, 1, "", "RoundFunction"], [68, 1, 1, "", "ceiling"], [68, 1, 1, "", "floor"], [68, 1, 1, "", "frac"]], "sympy.functions.elementary.miscellaneous": [[68, 1, 1, "", "IdentityFunction"], [68, 1, 1, "", "Max"], [68, 1, 1, "", "Min"], [68, 4, 1, "", "cbrt"], [68, 4, 1, "", "real_root"], [68, 4, 1, "", "root"], [68, 4, 1, "", "sqrt"]], "sympy.functions.elementary.piecewise": [[68, 1, 1, "", "ExprCondPair"], [68, 1, 1, "", "Piecewise"], [68, 4, 1, "", "piecewise_exclusive"], [68, 4, 1, "", "piecewise_fold"]], "sympy.functions.elementary.piecewise.ExprCondPair": [[68, 3, 1, "", "cond"], [68, 3, 1, "", "expr"]], "sympy.functions.elementary.piecewise.Piecewise": [[68, 2, 1, "", "_eval_integral"], [68, 2, 1, "", "as_expr_set_pairs"], [68, 2, 1, "", "doit"], [68, 2, 1, "", "eval"], [68, 2, 1, "", "piecewise_integrate"]], "sympy.functions.elementary.trigonometric": [[68, 1, 1, "", "acos"], [68, 1, 1, "", "acot"], [68, 1, 1, "", "acsc"], [68, 1, 1, "", "asec"], [68, 1, 1, "", "asin"], [68, 1, 1, "", "atan"], [68, 1, 1, "", "atan2"], [68, 1, 1, "", "cos"], [68, 1, 1, "", "cot"], [68, 1, 1, "", "csc"], [68, 1, 1, "", "sec"], [68, 1, 1, "", "sin"], [68, 1, 1, "", "sinc"], [68, 1, 1, "", "tan"]], "sympy.functions.elementary.trigonometric.acos": [[68, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acot": [[68, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acsc": [[68, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asec": [[68, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asin": [[68, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.atan": [[68, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.cot": [[68, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.tan": [[68, 2, 1, "", "inverse"]], "sympy.functions.special": [[70, 0, 0, "-", "bessel"], [70, 0, 0, "-", "beta_functions"], [70, 0, 0, "-", "elliptic_integrals"], [70, 0, 0, "-", "error_functions"], [70, 0, 0, "-", "gamma_functions"], [70, 0, 0, "-", "mathieu_functions"], [70, 0, 0, "-", "polynomials"], [70, 0, 0, "-", "singularity_functions"], [70, 0, 0, "-", "zeta_functions"]], "sympy.functions.special.bessel": [[70, 1, 1, "", "AiryBase"], [70, 1, 1, "", "BesselBase"], [70, 1, 1, "", "airyai"], [70, 1, 1, "", "airyaiprime"], [70, 1, 1, "", "airybi"], [70, 1, 1, "", "airybiprime"], [70, 1, 1, "", "besseli"], [70, 1, 1, "", "besselj"], [70, 1, 1, "", "besselk"], [70, 1, 1, "", "bessely"], [70, 1, 1, "", "hankel1"], [70, 1, 1, "", "hankel2"], [70, 1, 1, "", "jn"], [70, 4, 1, "", "jn_zeros"], [70, 1, 1, "", "marcumq"], [70, 1, 1, "", "yn"]], "sympy.functions.special.bessel.BesselBase": [[70, 3, 1, "", "argument"], [70, 3, 1, "", "order"]], "sympy.functions.special.beta_functions": [[70, 1, 1, "", "beta"]], "sympy.functions.special.bsplines": [[70, 4, 1, "", "bspline_basis"], [70, 4, 1, "", "bspline_basis_set"], [70, 4, 1, "", "interpolating_spline"]], "sympy.functions.special.delta_functions": [[70, 1, 1, "", "DiracDelta"], [70, 1, 1, "", "Heaviside"]], "sympy.functions.special.delta_functions.DiracDelta": [[70, 2, 1, "", "eval"], [70, 2, 1, "", "fdiff"], [70, 2, 1, "", "is_simple"]], "sympy.functions.special.delta_functions.Heaviside": [[70, 2, 1, "", "eval"], [70, 2, 1, "", "fdiff"], [70, 3, 1, "", "pargs"]], "sympy.functions.special.elliptic_integrals": [[70, 1, 1, "", "elliptic_e"], [70, 1, 1, "", "elliptic_f"], [70, 1, 1, "", "elliptic_k"], [70, 1, 1, "", "elliptic_pi"]], "sympy.functions.special.error_functions": [[70, 1, 1, "", "Chi"], [70, 1, 1, "", "Ci"], [70, 4, 1, "", "E1"], [70, 1, 1, "", "Ei"], [70, 1, 1, "", "FresnelIntegral"], [70, 1, 1, "", "Li"], [70, 1, 1, "", "Shi"], [70, 1, 1, "", "Si"], [70, 1, 1, "", "erf"], [70, 1, 1, "", "erf2"], [70, 1, 1, "", "erf2inv"], [70, 1, 1, "", "erfc"], [70, 1, 1, "", "erfcinv"], [70, 1, 1, "", "erfi"], [70, 1, 1, "", "erfinv"], [70, 1, 1, "", "expint"], [70, 1, 1, "", "fresnelc"], [70, 1, 1, "", "fresnels"], [70, 1, 1, "", "li"]], "sympy.functions.special.error_functions.erf": [[70, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfc": [[70, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfcinv": [[70, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfinv": [[70, 2, 1, "", "inverse"]], "sympy.functions.special.gamma_functions": [[70, 1, 1, "", "digamma"], [70, 1, 1, "", "gamma"], [70, 1, 1, "", "loggamma"], [70, 1, 1, "", "lowergamma"], [70, 1, 1, "", "multigamma"], [70, 1, 1, "", "polygamma"], [70, 1, 1, "", "trigamma"], [70, 1, 1, "", "uppergamma"]], "sympy.functions.special.hyper": [[70, 1, 1, "", "appellf1"], [70, 1, 1, "", "hyper"], [70, 1, 1, "", "meijerg"]], "sympy.functions.special.hyper.hyper": [[70, 3, 1, "", "ap"], [70, 3, 1, "", "argument"], [70, 3, 1, "", "bq"], [70, 3, 1, "", "convergence_statement"], [70, 3, 1, "", "eta"], [70, 3, 1, "", "radius_of_convergence"]], "sympy.functions.special.hyper.meijerg": [[70, 3, 1, "", "an"], [70, 3, 1, "", "aother"], [70, 3, 1, "", "ap"], [70, 3, 1, "", "argument"], [70, 3, 1, "", "bm"], [70, 3, 1, "", "bother"], [70, 3, 1, "", "bq"], [70, 3, 1, "", "delta"], [70, 2, 1, "", "get_period"], [70, 2, 1, "", "integrand"], [70, 3, 1, "", "is_number"], [70, 3, 1, "", "nu"]], "sympy.functions.special.mathieu_functions": [[70, 1, 1, "", "MathieuBase"], [70, 1, 1, "", "mathieuc"], [70, 1, 1, "", "mathieucprime"], [70, 1, 1, "", "mathieus"], [70, 1, 1, "", "mathieusprime"]], "sympy.functions.special.polynomials": [[70, 1, 1, "", "assoc_laguerre"], [70, 1, 1, "", "assoc_legendre"], [70, 1, 1, "", "chebyshevt"], [70, 1, 1, "", "chebyshevt_root"], [70, 1, 1, "", "chebyshevu"], [70, 1, 1, "", "chebyshevu_root"], [70, 1, 1, "", "gegenbauer"], [70, 1, 1, "", "hermite"], [70, 1, 1, "", "hermite_prob"], [70, 1, 1, "", "jacobi"], [70, 4, 1, "", "jacobi_normalized"], [70, 1, 1, "", "laguerre"], [70, 1, 1, "", "legendre"]], "sympy.functions.special.singularity_functions": [[70, 1, 1, "", "SingularityFunction"]], "sympy.functions.special.singularity_functions.SingularityFunction": [[70, 2, 1, "", "eval"], [70, 2, 1, "", "fdiff"]], "sympy.functions.special.spherical_harmonics": [[70, 1, 1, "", "Ynm"], [70, 4, 1, "", "Ynm_c"], [70, 1, 1, "", "Znm"]], "sympy.functions.special.tensor_functions": [[70, 4, 1, "", "Eijk"], [70, 1, 1, "", "KroneckerDelta"], [70, 1, 1, "", "LeviCivita"], [70, 4, 1, "", "eval_levicivita"]], "sympy.functions.special.tensor_functions.KroneckerDelta": [[70, 2, 1, "", "eval"], [70, 3, 1, "", "indices_contain_equal_information"], [70, 3, 1, "", "is_above_fermi"], [70, 3, 1, "", "is_below_fermi"], [70, 3, 1, "", "is_only_above_fermi"], [70, 3, 1, "", "is_only_below_fermi"], [70, 3, 1, "", "killable_index"], [70, 3, 1, "", "preferred_index"]], "sympy.functions.special.zeta_functions": [[70, 1, 1, "", "dirichlet_eta"], [70, 1, 1, "", "lerchphi"], [70, 1, 1, "", "polylog"], [70, 1, 1, "", "stieltjes"], [70, 1, 1, "", "zeta"]], "sympy.geometry": [[71, 0, 0, "-", "curve"], [72, 0, 0, "-", "ellipse"], [73, 0, 0, "-", "entity"], [75, 0, 0, "-", "line"], [76, 0, 0, "-", "plane"], [77, 0, 0, "-", "point"], [78, 0, 0, "-", "polygon"], [79, 0, 0, "-", "util"]], "sympy.geometry.curve": [[71, 1, 1, "", "Curve"]], "sympy.geometry.curve.Curve": [[71, 3, 1, "", "ambient_dimension"], [71, 2, 1, "", "arbitrary_point"], [71, 3, 1, "", "free_symbols"], [71, 3, 1, "", "functions"], [71, 3, 1, "", "length"], [71, 3, 1, "", "limits"], [71, 3, 1, "", "parameter"], [71, 2, 1, "", "plot_interval"], [71, 2, 1, "", "rotate"], [71, 2, 1, "", "scale"], [71, 2, 1, "", "translate"]], "sympy.geometry.ellipse": [[72, 1, 1, "", "Circle"], [72, 1, 1, "", "Ellipse"]], "sympy.geometry.ellipse.Circle": [[72, 3, 1, "", "circumference"], [72, 2, 1, "", "equation"], [72, 2, 1, "", "intersection"], [72, 3, 1, "", "radius"], [72, 2, 1, "", "reflect"], [72, 2, 1, "", "scale"], [72, 3, 1, "", "vradius"]], "sympy.geometry.ellipse.Ellipse": [[72, 3, 1, "", "apoapsis"], [72, 2, 1, "", "arbitrary_point"], [72, 3, 1, "", "area"], [72, 2, 1, "", "auxiliary_circle"], [72, 3, 1, "", "bounds"], [72, 3, 1, "", "center"], [72, 3, 1, "", "circumference"], [72, 2, 1, "", "director_circle"], [72, 3, 1, "", "eccentricity"], [72, 2, 1, "", "encloses_point"], [72, 2, 1, "", "equation"], [72, 2, 1, "", "evolute"], [72, 3, 1, "", "foci"], [72, 3, 1, "", "focus_distance"], [72, 3, 1, "", "hradius"], [72, 2, 1, "", "intersection"], [72, 2, 1, "", "is_tangent"], [72, 3, 1, "", "major"], [72, 3, 1, "", "minor"], [72, 2, 1, "", "normal_lines"], [72, 3, 1, "", "periapsis"], [72, 2, 1, "", "plot_interval"], [72, 2, 1, "", "polar_second_moment_of_area"], [72, 2, 1, "", "random_point"], [72, 2, 1, "", "reflect"], [72, 2, 1, "", "rotate"], [72, 2, 1, "", "scale"], [72, 2, 1, "", "second_moment_of_area"], [72, 2, 1, "", "section_modulus"], [72, 3, 1, "", "semilatus_rectum"], [72, 2, 1, "", "tangent_lines"], [72, 3, 1, "", "vradius"]], "sympy.geometry.entity": [[73, 1, 1, "", "GeometryEntity"]], "sympy.geometry.entity.GeometryEntity": [[73, 3, 1, "", "ambient_dimension"], [73, 3, 1, "", "bounds"], [73, 2, 1, "", "encloses"], [73, 2, 1, "", "intersection"], [73, 2, 1, "", "is_similar"], [73, 2, 1, "", "parameter_value"], [73, 2, 1, "", "reflect"], [73, 2, 1, "", "rotate"], [73, 2, 1, "", "scale"], [73, 2, 1, "", "translate"]], "sympy.geometry.line": [[75, 1, 1, "", "Line"], [75, 1, 1, "", "Line2D"], [75, 1, 1, "", "Line3D"], [75, 1, 1, "", "LinearEntity"], [75, 1, 1, "", "LinearEntity2D"], [75, 1, 1, "", "LinearEntity3D"], [75, 1, 1, "", "Ray"], [75, 1, 1, "", "Ray2D"], [75, 1, 1, "", "Ray3D"], [75, 1, 1, "", "Segment"], [75, 1, 1, "", "Segment2D"], [75, 1, 1, "", "Segment3D"]], "sympy.geometry.line.Line": [[75, 2, 1, "", "contains"], [75, 2, 1, "", "distance"], [75, 2, 1, "", "equals"], [75, 2, 1, "", "plot_interval"]], "sympy.geometry.line.Line2D": [[75, 3, 1, "", "coefficients"], [75, 2, 1, "", "equation"]], "sympy.geometry.line.Line3D": [[75, 2, 1, "", "equation"]], "sympy.geometry.line.LinearEntity": [[75, 3, 1, "", "ambient_dimension"], [75, 2, 1, "", "angle_between"], [75, 2, 1, "", "arbitrary_point"], [75, 2, 1, "", "are_concurrent"], [75, 2, 1, "", "bisectors"], [75, 2, 1, "", "contains"], [75, 3, 1, "", "direction"], [75, 2, 1, "", "intersection"], [75, 2, 1, "", "is_parallel"], [75, 2, 1, "", "is_perpendicular"], [75, 2, 1, "", "is_similar"], [75, 3, 1, "", "length"], [75, 3, 1, "", "p1"], [75, 3, 1, "", "p2"], [75, 2, 1, "", "parallel_line"], [75, 2, 1, "", "perpendicular_line"], [75, 2, 1, "", "perpendicular_segment"], [75, 3, 1, "", "points"], [75, 2, 1, "", "projection"], [75, 2, 1, "", "random_point"], [75, 2, 1, "", "smallest_angle_between"]], "sympy.geometry.line.LinearEntity2D": [[75, 3, 1, "", "bounds"], [75, 2, 1, "", "perpendicular_line"], [75, 3, 1, "", "slope"]], "sympy.geometry.line.LinearEntity3D": [[75, 3, 1, "", "direction_cosine"], [75, 3, 1, "", "direction_ratio"]], "sympy.geometry.line.Ray": [[75, 2, 1, "", "contains"], [75, 2, 1, "", "distance"], [75, 2, 1, "", "equals"], [75, 2, 1, "", "plot_interval"], [75, 3, 1, "", "source"]], "sympy.geometry.line.Ray2D": [[75, 2, 1, "", "closing_angle"], [75, 3, 1, "", "xdirection"], [75, 3, 1, "", "ydirection"]], "sympy.geometry.line.Ray3D": [[75, 3, 1, "", "xdirection"], [75, 3, 1, "", "ydirection"], [75, 3, 1, "", "zdirection"]], "sympy.geometry.line.Segment": [[75, 2, 1, "", "contains"], [75, 2, 1, "", "distance"], [75, 2, 1, "", "equals"], [75, 3, 1, "", "length"], [75, 3, 1, "", "midpoint"], [75, 2, 1, "", "perpendicular_bisector"], [75, 2, 1, "", "plot_interval"]], "sympy.geometry.plane": [[76, 1, 1, "", "Plane"]], "sympy.geometry.plane.Plane": [[76, 2, 1, "", "angle_between"], [76, 2, 1, "", "arbitrary_point"], [76, 2, 1, "", "are_concurrent"], [76, 2, 1, "", "distance"], [76, 2, 1, "", "equals"], [76, 2, 1, "", "equation"], [76, 2, 1, "", "intersection"], [76, 2, 1, "", "is_coplanar"], [76, 2, 1, "", "is_parallel"], [76, 2, 1, "", "is_perpendicular"], [76, 3, 1, "", "normal_vector"], [76, 3, 1, "", "p1"], [76, 2, 1, "", "parallel_plane"], [76, 2, 1, "", "parameter_value"], [76, 2, 1, "", "perpendicular_line"], [76, 2, 1, "", "perpendicular_plane"], [76, 2, 1, "", "projection"], [76, 2, 1, "", "projection_line"], [76, 2, 1, "", "random_point"]], "sympy.geometry.point": [[77, 1, 1, "", "Point"], [77, 1, 1, "", "Point2D"], [77, 1, 1, "", "Point3D"]], "sympy.geometry.point.Point": [[77, 2, 1, "", "affine_rank"], [77, 3, 1, "", "ambient_dimension"], [77, 2, 1, "", "are_coplanar"], [77, 2, 1, "", "canberra_distance"], [77, 2, 1, "", "distance"], [77, 2, 1, "", "dot"], [77, 2, 1, "", "equals"], [77, 2, 1, "", "intersection"], [77, 2, 1, "", "is_collinear"], [77, 2, 1, "", "is_concyclic"], [77, 3, 1, "", "is_nonzero"], [77, 2, 1, "", "is_scalar_multiple"], [77, 3, 1, "", "is_zero"], [77, 3, 1, "", "length"], [77, 2, 1, "", "midpoint"], [77, 3, 1, "", "origin"], [77, 3, 1, "", "orthogonal_direction"], [77, 2, 1, "", "project"], [77, 2, 1, "", "taxicab_distance"], [77, 3, 1, "", "unit"]], "sympy.geometry.point.Point2D": [[77, 3, 1, "", "bounds"], [77, 3, 1, "", "coordinates"], [77, 2, 1, "", "rotate"], [77, 2, 1, "", "scale"], [77, 2, 1, "", "transform"], [77, 2, 1, "", "translate"], [77, 3, 1, "", "x"], [77, 3, 1, "", "y"]], "sympy.geometry.point.Point3D": [[77, 2, 1, "", "are_collinear"], [77, 3, 1, "", "coordinates"], [77, 2, 1, "", "direction_cosine"], [77, 2, 1, "", "direction_ratio"], [77, 2, 1, "", "intersection"], [77, 2, 1, "", "scale"], [77, 2, 1, "", "transform"], [77, 2, 1, "", "translate"], [77, 3, 1, "", "x"], [77, 3, 1, "", "y"], [77, 3, 1, "", "z"]], "sympy.geometry.polygon": [[78, 1, 1, "", "Polygon"], [78, 1, 1, "", "RegularPolygon"], [78, 1, 1, "", "Triangle"]], "sympy.geometry.polygon.Polygon": [[78, 3, 1, "", "angles"], [78, 2, 1, "", "arbitrary_point"], [78, 3, 1, "", "area"], [78, 2, 1, "", "bisectors"], [78, 3, 1, "", "bounds"], [78, 3, 1, "", "centroid"], [78, 2, 1, "", "cut_section"], [78, 2, 1, "", "distance"], [78, 2, 1, "", "encloses_point"], [78, 2, 1, "", "first_moment_of_area"], [78, 2, 1, "", "intersection"], [78, 2, 1, "", "is_convex"], [78, 3, 1, "", "perimeter"], [78, 2, 1, "", "plot_interval"], [78, 2, 1, "", "polar_second_moment_of_area"], [78, 2, 1, "", "second_moment_of_area"], [78, 2, 1, "", "section_modulus"], [78, 3, 1, "", "sides"], [78, 3, 1, "", "vertices"]], "sympy.geometry.polygon.RegularPolygon": [[78, 3, 1, "", "angles"], [78, 3, 1, "", "apothem"], [78, 3, 1, "", "area"], [78, 3, 1, "", "args"], [78, 3, 1, "", "center"], [78, 3, 1, "", "centroid"], [78, 3, 1, "", "circumcenter"], [78, 3, 1, "", "circumcircle"], [78, 3, 1, "", "circumradius"], [78, 2, 1, "", "encloses_point"], [78, 3, 1, "", "exterior_angle"], [78, 3, 1, "", "incircle"], [78, 3, 1, "", "inradius"], [78, 3, 1, "", "interior_angle"], [78, 3, 1, "", "length"], [78, 3, 1, "", "radius"], [78, 2, 1, "", "reflect"], [78, 2, 1, "", "rotate"], [78, 3, 1, "", "rotation"], [78, 2, 1, "", "scale"], [78, 2, 1, "", "spin"], [78, 3, 1, "", "vertices"]], "sympy.geometry.polygon.Triangle": [[78, 3, 1, "", "altitudes"], [78, 2, 1, "", "bisectors"], [78, 3, 1, "", "circumcenter"], [78, 3, 1, "", "circumcircle"], [78, 3, 1, "", "circumradius"], [78, 3, 1, "", "eulerline"], [78, 3, 1, "", "excenters"], [78, 3, 1, "", "exradii"], [78, 3, 1, "", "incenter"], [78, 3, 1, "", "incircle"], [78, 3, 1, "", "inradius"], [78, 2, 1, "", "is_equilateral"], [78, 2, 1, "", "is_isosceles"], [78, 2, 1, "", "is_right"], [78, 2, 1, "", "is_scalene"], [78, 2, 1, "", "is_similar"], [78, 3, 1, "", "medial"], [78, 3, 1, "", "medians"], [78, 3, 1, "", "nine_point_circle"], [78, 3, 1, "", "orthocenter"], [78, 3, 1, "", "vertices"]], "sympy.geometry.util": [[79, 4, 1, "", "are_similar"], [79, 4, 1, "", "centroid"], [79, 4, 1, "", "convex_hull"], [79, 4, 1, "", "idiff"], [79, 4, 1, "", "intersection"]], "sympy.holonomic.holonomic": [[85, 1, 1, "", "DifferentialOperator"], [85, 1, 1, "", "DifferentialOperatorAlgebra"], [85, 4, 1, "", "DifferentialOperators"], [85, 1, 1, "", "HolonomicFunction"], [83, 4, 1, "", "_convert_poly_rat_alg"], [83, 4, 1, "", "_create_table"], [81, 4, 1, "", "expr_to_holonomic"], [81, 4, 1, "", "from_hyper"], [81, 4, 1, "", "from_meijerg"]], "sympy.holonomic.holonomic.DifferentialOperator": [[85, 2, 1, "", "is_singular"]], "sympy.holonomic.holonomic.HolonomicFunction": [[84, 2, 1, "", "composition"], [84, 2, 1, "", "diff"], [84, 2, 1, "", "evalf"], [84, 2, 1, "", "integrate"], [84, 2, 1, "", "series"], [84, 2, 1, "", "to_expr"], [84, 2, 1, "", "to_hyper"], [84, 2, 1, "", "to_meijerg"], [84, 2, 1, "", "to_sequence"]], "sympy.integrals.deltafunctions": [[89, 4, 1, "", "deltaintegrate"]], "sympy.integrals.heurisch": [[89, 4, 1, "", "components"], [89, 4, 1, "", "heurisch"]], "sympy.integrals.integrals": [[89, 1, 1, "", "Integral"], [89, 4, 1, "", "integrate"], [89, 4, 1, "", "line_integrate"]], "sympy.integrals.integrals.Integral": [[89, 2, 1, "", "as_sum"], [89, 2, 1, "", "doit"], [89, 3, 1, "", "free_symbols"], [89, 6, 1, "", "is_commutative"], [89, 2, 1, "", "principal_value"], [89, 2, 1, "", "transform"]], "sympy.integrals": [[89, 0, 0, "-", "intpoly"], [87, 0, 0, "-", "meijerint"], [87, 0, 0, "-", "meijerint_doc"], [89, 0, 0, "-", "transforms"]], "sympy.integrals.intpoly": [[89, 4, 1, "", "polytope_integrate"]], "sympy.integrals.manualintegrate": [[89, 4, 1, "", "integral_steps"], [89, 4, 1, "", "manualintegrate"]], "sympy.integrals.meijerint": [[87, 7, 1, "", "_CoeffExpValueError"], [87, 4, 1, "", "_check_antecedents"], [87, 4, 1, "", "_check_antecedents_1"], [87, 4, 1, "", "_check_antecedents_inversion"], [87, 4, 1, "", "_condsimp"], [87, 4, 1, "", "_create_lookup_table"], [87, 4, 1, "", "_dummy"], [87, 4, 1, "", "_dummy_"], [87, 4, 1, "", "_eval_cond"], [87, 4, 1, "", "_exponents"], [87, 4, 1, "", "_find_splitting_points"], [87, 4, 1, "", "_flip_g"], [87, 4, 1, "", "_functions"], [87, 4, 1, "", "_get_coeff_exp"], [87, 4, 1, "", "_guess_expansion"], [87, 4, 1, "", "_inflate_fox_h"], [87, 4, 1, "", "_inflate_g"], [87, 4, 1, "", "_int0oo"], [87, 4, 1, "", "_int0oo_1"], [87, 4, 1, "", "_int_inversion"], [87, 4, 1, "", "_is_analytic"], [87, 4, 1, "", "_meijerint_definite_2"], [87, 4, 1, "", "_meijerint_definite_3"], [87, 4, 1, "", "_meijerint_definite_4"], [87, 4, 1, "", "_meijerint_indefinite_1"], [87, 4, 1, "", "_mul_args"], [87, 4, 1, "", "_mul_as_two_parts"], [87, 4, 1, "", "_my_principal_branch"], [87, 4, 1, "", "_mytype"], [87, 4, 1, "", "_rewrite1"], [87, 4, 1, "", "_rewrite2"], [87, 4, 1, "", "_rewrite_inversion"], [87, 4, 1, "", "_rewrite_saxena"], [87, 4, 1, "", "_rewrite_saxena_1"], [87, 4, 1, "", "_rewrite_single"], [87, 4, 1, "", "_split_mul"], [87, 4, 1, "", "meijerint_definite"], [87, 4, 1, "", "meijerint_indefinite"], [87, 4, 1, "", "meijerint_inversion"]], "sympy.integrals.quadrature": [[89, 4, 1, "", "gauss_chebyshev_t"], [89, 4, 1, "", "gauss_chebyshev_u"], [89, 4, 1, "", "gauss_gen_laguerre"], [89, 4, 1, "", "gauss_hermite"], [89, 4, 1, "", "gauss_jacobi"], [89, 4, 1, "", "gauss_laguerre"], [89, 4, 1, "", "gauss_legendre"], [89, 4, 1, "", "gauss_lobatto"]], "sympy.integrals.rationaltools": [[89, 4, 1, "", "ratint"], [89, 4, 1, "", "ratint_logpart"], [89, 4, 1, "", "ratint_ratpart"]], "sympy.integrals.risch": [[89, 1, 1, "", "NonElementaryIntegral"], [89, 4, 1, "", "risch_integrate"]], "sympy.integrals.singularityfunctions": [[89, 4, 1, "", "singularityintegrate"]], "sympy.integrals.transforms": [[89, 1, 1, "", "CosineTransform"], [89, 1, 1, "", "FourierTransform"], [89, 1, 1, "", "HankelTransform"], [89, 1, 1, "", "IntegralTransform"], [89, 7, 1, "", "IntegralTransformError"], [89, 1, 1, "", "InverseCosineTransform"], [89, 1, 1, "", "InverseFourierTransform"], [89, 1, 1, "", "InverseHankelTransform"], [89, 1, 1, "", "InverseLaplaceTransform"], [89, 1, 1, "", "InverseMellinTransform"], [89, 1, 1, "", "InverseSineTransform"], [89, 1, 1, "", "LaplaceTransform"], [89, 1, 1, "", "MellinTransform"], [89, 1, 1, "", "SineTransform"], [89, 4, 1, "", "_fourier_transform"], [89, 4, 1, "", "cosine_transform"], [89, 4, 1, "", "fourier_transform"], [89, 4, 1, "", "hankel_transform"], [89, 4, 1, "", "inverse_cosine_transform"], [89, 4, 1, "", "inverse_fourier_transform"], [89, 4, 1, "", "inverse_hankel_transform"], [89, 4, 1, "", "inverse_laplace_transform"], [89, 4, 1, "", "inverse_mellin_transform"], [89, 4, 1, "", "inverse_sine_transform"], [89, 4, 1, "", "laplace_transform"], [89, 4, 1, "", "mellin_transform"], [89, 4, 1, "", "sine_transform"]], "sympy.integrals.transforms.IntegralTransform": [[89, 2, 1, "", "doit"], [89, 3, 1, "", "function"], [89, 3, 1, "", "function_variable"], [89, 3, 1, "", "transform_variable"]], "sympy.integrals.transforms.InverseLaplaceTransform": [[89, 2, 1, "", "doit"]], "sympy.integrals.transforms.LaplaceTransform": [[89, 2, 1, "", "doit"]], "sympy.integrals.trigonometry": [[89, 4, 1, "", "trigintegrate"]], "sympy.interactive": [[90, 0, 0, "-", "printing"], [90, 0, 0, "-", "session"]], "sympy.interactive.printing": [[90, 4, 1, "", "init_printing"]], "sympy.interactive.session": [[90, 4, 1, "", "enable_automatic_int_sympification"], [90, 4, 1, "", "enable_automatic_symbols"], [90, 4, 1, "", "init_ipython_session"], [90, 4, 1, "", "init_python_session"], [90, 4, 1, "", "init_session"], [90, 4, 1, "", "int_to_Integer"]], "sympy.liealgebras.cartan_matrix": [[91, 4, 1, "", "CartanMatrix"]], "sympy.liealgebras.cartan_type": [[91, 1, 1, "", "CartanType_generator"], [91, 1, 1, "", "Standard_Cartan"]], "sympy.liealgebras.cartan_type.Standard_Cartan": [[91, 2, 1, "", "rank"], [91, 2, 1, "", "series"]], "sympy.liealgebras.dynkin_diagram": [[91, 4, 1, "", "DynkinDiagram"]], "sympy.liealgebras.root_system": [[91, 1, 1, "", "RootSystem"]], "sympy.liealgebras.root_system.RootSystem": [[91, 2, 1, "", "add_as_roots"], [91, 2, 1, "", "add_simple_roots"], [91, 2, 1, "", "all_roots"], [91, 2, 1, "", "cartan_matrix"], [91, 2, 1, "", "dynkin_diagram"], [91, 2, 1, "", "root_space"], [91, 2, 1, "", "simple_roots"]], "sympy.liealgebras.type_a": [[91, 1, 1, "", "TypeA"]], "sympy.liealgebras.type_a.TypeA": [[91, 2, 1, "", "basic_root"], [91, 2, 1, "", "basis"], [91, 2, 1, "", "cartan_matrix"], [91, 2, 1, "", "dimension"], [91, 2, 1, "", "highest_root"], [91, 2, 1, "", "lie_algebra"], [91, 2, 1, "", "positive_roots"], [91, 2, 1, "", "roots"], [91, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_b": [[91, 1, 1, "", "TypeB"]], "sympy.liealgebras.type_b.TypeB": [[91, 2, 1, "", "basic_root"], [91, 2, 1, "", "basis"], [91, 2, 1, "", "cartan_matrix"], [91, 2, 1, "", "dimension"], [91, 2, 1, "", "lie_algebra"], [91, 2, 1, "", "positive_roots"], [91, 2, 1, "", "roots"], [91, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_c": [[91, 1, 1, "", "TypeC"]], "sympy.liealgebras.type_c.TypeC": [[91, 2, 1, "", "basic_root"], [91, 2, 1, "", "basis"], [91, 2, 1, "", "cartan_matrix"], [91, 2, 1, "", "dimension"], [91, 2, 1, "", "lie_algebra"], [91, 2, 1, "", "positive_roots"], [91, 2, 1, "", "roots"], [91, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_d": [[91, 1, 1, "", "TypeD"]], "sympy.liealgebras.type_d.TypeD": [[91, 2, 1, "", "basic_root"], [91, 2, 1, "", "basis"], [91, 2, 1, "", "cartan_matrix"], [91, 2, 1, "", "dimension"], [91, 2, 1, "", "lie_algebra"], [91, 2, 1, "", "positive_roots"], [91, 2, 1, "", "roots"], [91, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_e": [[91, 1, 1, "", "TypeE"]], "sympy.liealgebras.type_e.TypeE": [[91, 2, 1, "", "basic_root"], [91, 2, 1, "", "basis"], [91, 2, 1, "", "cartan_matrix"], [91, 2, 1, "", "dimension"], [91, 2, 1, "", "positive_roots"], [91, 2, 1, "", "roots"], [91, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_f": [[91, 1, 1, "", "TypeF"]], "sympy.liealgebras.type_f.TypeF": [[91, 2, 1, "", "basic_root"], [91, 2, 1, "", "basis"], [91, 2, 1, "", "cartan_matrix"], [91, 2, 1, "", "dimension"], [91, 2, 1, "", "positive_roots"], [91, 2, 1, "", "roots"], [91, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_g": [[91, 1, 1, "", "TypeG"]], "sympy.liealgebras.type_g.TypeG": [[91, 2, 1, "", "basis"], [91, 2, 1, "", "cartan_matrix"], [91, 2, 1, "", "dimension"], [91, 2, 1, "", "positive_roots"], [91, 2, 1, "", "roots"], [91, 2, 1, "", "simple_root"]], "sympy.liealgebras.weyl_group": [[91, 1, 1, "", "WeylGroup"]], "sympy.liealgebras.weyl_group.WeylGroup": [[91, 2, 1, "", "coxeter_diagram"], [91, 2, 1, "", "delete_doubles"], [91, 2, 1, "", "element_order"], [91, 2, 1, "", "generators"], [91, 2, 1, "", "group_name"], [91, 2, 1, "", "group_order"], [91, 2, 1, "", "matrix_form"]], "sympy.logic.boolalg": [[92, 4, 1, "", "ANFform"], [92, 1, 1, "", "And"], [92, 1, 1, "", "Boolean"], [92, 1, 1, "", "BooleanFalse"], [92, 1, 1, "", "BooleanTrue"], [92, 1, 1, "", "Equivalent"], [92, 1, 1, "", "Exclusive"], [92, 1, 1, "", "ITE"], [92, 1, 1, "", "Implies"], [92, 1, 1, "", "Nand"], [92, 1, 1, "", "Nor"], [92, 1, 1, "", "Not"], [92, 1, 1, "", "Or"], [92, 4, 1, "", "POSform"], [92, 4, 1, "", "SOPform"], [92, 1, 1, "", "Xnor"], [92, 1, 1, "", "Xor"], [92, 4, 1, "", "anf_coeffs"], [92, 4, 1, "", "bool_map"], [92, 4, 1, "", "bool_maxterm"], [92, 4, 1, "", "bool_minterm"], [92, 4, 1, "", "bool_monomial"], [92, 4, 1, "", "distribute_and_over_or"], [92, 4, 1, "", "distribute_or_over_and"], [92, 4, 1, "", "distribute_xor_over_and"], [92, 4, 1, "", "eliminate_implications"], [92, 4, 1, "", "gateinputcount"], [92, 4, 1, "", "integer_to_term"], [92, 4, 1, "", "is_anf"], [92, 4, 1, "", "is_cnf"], [92, 4, 1, "", "is_dnf"], [92, 4, 1, "", "is_nnf"], [92, 4, 1, "", "simplify_logic"], [92, 4, 1, "", "term_to_integer"], [92, 4, 1, "", "to_anf"], [92, 4, 1, "", "to_cnf"], [92, 4, 1, "", "to_dnf"], [92, 4, 1, "", "to_int_repr"], [92, 4, 1, "", "to_nnf"], [92, 4, 1, "", "truth_table"]], "sympy.logic.boolalg.Boolean": [[92, 2, 1, "", "as_set"], [92, 2, 1, "", "equals"]], "sympy.logic.boolalg.BooleanFalse": [[92, 2, 1, "", "as_set"]], "sympy.logic.boolalg.BooleanTrue": [[92, 2, 1, "", "as_set"]], "sympy.logic": [[92, 0, 0, "-", "inference"]], "sympy.logic.inference": [[92, 4, 1, "", "satisfiable"]], "sympy.matrices": [[93, 0, 0, "-", "common"], [95, 0, 0, "-", "expressions"], [96, 0, 0, "-", "immutable"], [98, 0, 0, "-", "matrices"], [100, 0, 0, "-", "sparse"], [101, 0, 0, "-", "sparsetools"]], "sympy.matrices.common": [[93, 1, 1, "", "MatrixCommon"], [93, 1, 1, "", "MatrixKind"]], "sympy.matrices.common.MatrixCommon": [[93, 3, 1, "", "C"], [93, 3, 1, "", "H"], [93, 3, 1, "", "T"], [93, 2, 1, "", "__abs__"], [93, 2, 1, "", "__add__"], [93, 2, 1, "", "__getitem__"], [93, 2, 1, "", "__len__"], [93, 2, 1, "", "__mul__"], [93, 2, 1, "", "__pow__"], [93, 5, 1, "", "__weakref__"], [93, 2, 1, "", "adjoint"], [93, 2, 1, "", "applyfunc"], [93, 2, 1, "", "as_real_imag"], [93, 2, 1, "", "atoms"], [93, 2, 1, "", "col"], [93, 2, 1, "", "col_del"], [93, 2, 1, "", "col_insert"], [93, 2, 1, "", "col_join"], [93, 2, 1, "", "companion"], [93, 2, 1, "", "conjugate"], [93, 2, 1, "", "diag"], [93, 2, 1, "", "diagonal"], [93, 2, 1, "", "evalf"], [93, 2, 1, "", "expand"], [93, 2, 1, "", "extract"], [93, 2, 1, "", "eye"], [93, 3, 1, "", "free_symbols"], [93, 2, 1, "", "get_diag_blocks"], [93, 2, 1, "", "has"], [93, 2, 1, "", "hstack"], [93, 2, 1, "", "is_anti_symmetric"], [93, 2, 1, "", "is_diagonal"], [93, 3, 1, "", "is_hermitian"], [93, 3, 1, "", "is_lower"], [93, 3, 1, "", "is_lower_hessenberg"], [93, 3, 1, "", "is_square"], [93, 3, 1, "", "is_strongly_diagonally_dominant"], [93, 2, 1, "", "is_symbolic"], [93, 2, 1, "", "is_symmetric"], [93, 3, 1, "", "is_upper"], [93, 3, 1, "", "is_upper_hessenberg"], [93, 3, 1, "", "is_weakly_diagonally_dominant"], [93, 3, 1, "", "is_zero_matrix"], [93, 2, 1, "", "jordan_block"], [93, 2, 1, "", "lower_triangular"], [93, 2, 1, "", "multiply"], [93, 2, 1, "", "multiply_elementwise"], [93, 2, 1, "", "n"], [93, 2, 1, "", "ones"], [93, 2, 1, "", "permute"], [93, 2, 1, "", "permute_cols"], [93, 2, 1, "", "permute_rows"], [93, 2, 1, "", "pow"], [93, 2, 1, "", "refine"], [93, 2, 1, "", "replace"], [93, 2, 1, "", "reshape"], [93, 2, 1, "", "rmultiply"], [93, 2, 1, "", "rot90"], [93, 2, 1, "", "row"], [93, 2, 1, "", "row_del"], [93, 2, 1, "", "row_insert"], [93, 2, 1, "", "row_join"], [93, 3, 1, "", "shape"], [93, 2, 1, "", "simplify"], [93, 2, 1, "", "subs"], [93, 2, 1, "", "todod"], [93, 2, 1, "", "todok"], [93, 2, 1, "", "tolist"], [93, 2, 1, "", "trace"], [93, 2, 1, "", "transpose"], [93, 2, 1, "", "upper_triangular"], [93, 2, 1, "", "values"], [93, 2, 1, "", "vec"], [93, 2, 1, "", "vech"], [93, 2, 1, "", "vstack"], [93, 2, 1, "", "wilkinson"], [93, 2, 1, "", "xreplace"], [93, 2, 1, "", "zeros"]], "sympy.matrices.dense": [[94, 1, 1, "", "DenseMatrix"], [98, 4, 1, "", "GramSchmidt"], [94, 5, 1, "", "Matrix"], [94, 1, 1, "", "MutableDenseMatrix"], [98, 4, 1, "", "casoratian"], [98, 4, 1, "", "diag"], [98, 4, 1, "", "eye"], [98, 4, 1, "", "hessian"], [98, 4, 1, "", "jordan_cell"], [98, 4, 1, "", "list2numpy"], [98, 4, 1, "", "matrix2numpy"], [98, 4, 1, "", "matrix_multiply_elementwise"], [98, 4, 1, "", "ones"], [98, 4, 1, "", "randMatrix"], [98, 4, 1, "", "rot_axis1"], [98, 4, 1, "", "rot_axis2"], [98, 4, 1, "", "rot_axis3"], [98, 4, 1, "", "rot_ccw_axis1"], [98, 4, 1, "", "rot_ccw_axis2"], [98, 4, 1, "", "rot_ccw_axis3"], [98, 4, 1, "", "rot_givens"], [98, 4, 1, "", "symarray"], [98, 4, 1, "", "wronskian"], [98, 4, 1, "", "zeros"]], "sympy.matrices.dense.DenseMatrix": [[94, 2, 1, "", "LDLdecomposition"], [94, 2, 1, "", "as_immutable"], [94, 2, 1, "", "as_mutable"], [94, 2, 1, "", "cholesky"], [94, 2, 1, "", "lower_triangular_solve"], [94, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.dense.MutableDenseMatrix": [[94, 2, 1, "", "simplify"]], "sympy.matrices.expressions": [[95, 1, 1, "", "CompanionMatrix"], [95, 1, 1, "", "FunctionMatrix"], [95, 1, 1, "", "HadamardPower"], [95, 1, 1, "", "HadamardProduct"], [95, 1, 1, "", "Identity"], [95, 1, 1, "", "Inverse"], [95, 1, 1, "", "MatAdd"], [95, 1, 1, "", "MatMul"], [95, 1, 1, "", "MatPow"], [95, 1, 1, "", "MatrixExpr"], [95, 1, 1, "", "MatrixPermute"], [95, 1, 1, "", "MatrixSet"], [95, 1, 1, "", "MatrixSymbol"], [95, 1, 1, "", "PermutationMatrix"], [95, 1, 1, "", "Trace"], [95, 1, 1, "", "Transpose"], [95, 1, 1, "", "ZeroMatrix"], [95, 0, 0, "-", "blockmatrix"], [95, 4, 1, "", "hadamard_product"]], "sympy.matrices.expressions.MatrixExpr": [[95, 3, 1, "", "T"], [95, 2, 1, "", "as_coeff_Mul"], [95, 2, 1, "", "as_explicit"], [95, 2, 1, "", "as_mutable"], [95, 2, 1, "", "equals"], [95, 2, 1, "", "from_index_summation"]], "sympy.matrices.expressions.blockmatrix": [[95, 1, 1, "", "BlockDiagMatrix"], [95, 1, 1, "", "BlockMatrix"], [95, 4, 1, "", "block_collapse"]], "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix": [[95, 2, 1, "", "get_diag_blocks"]], "sympy.matrices.expressions.blockmatrix.BlockMatrix": [[95, 2, 1, "", "LDUdecomposition"], [95, 2, 1, "", "LUdecomposition"], [95, 2, 1, "", "UDLdecomposition"], [95, 2, 1, "", "schur"], [95, 2, 1, "", "transpose"]], "sympy.matrices.immutable": [[96, 1, 1, "", "ImmutableDenseMatrix"], [96, 5, 1, "", "ImmutableMatrix"], [100, 1, 1, "", "ImmutableSparseMatrix"]], "sympy.matrices.matrices": [[98, 1, 1, "", "MatrixBase"], [98, 1, 1, "", "MatrixCalculus"], [98, 1, 1, "", "MatrixDeterminant"], [98, 1, 1, "", "MatrixEigen"], [98, 1, 1, "", "MatrixError"], [98, 1, 1, "", "MatrixReductions"], [98, 1, 1, "", "MatrixSubspaces"], [98, 1, 1, "", "NonSquareMatrixError"], [98, 1, 1, "", "ShapeError"], [98, 4, 1, "", "a2idx"]], "sympy.matrices.matrices.MatrixBase": [[98, 3, 1, "", "D"], [98, 2, 1, "", "LDLdecomposition"], [98, 2, 1, "", "LDLsolve"], [98, 2, 1, "", "LUdecomposition"], [98, 2, 1, "", "LUdecompositionFF"], [98, 2, 1, "", "LUdecomposition_Simple"], [98, 2, 1, "", "LUsolve"], [98, 2, 1, "", "QRdecomposition"], [98, 2, 1, "", "QRsolve"], [98, 2, 1, "", "add"], [98, 2, 1, "", "analytic_func"], [98, 2, 1, "", "cholesky"], [98, 2, 1, "", "cholesky_solve"], [98, 2, 1, "", "condition_number"], [98, 2, 1, "", "connected_components"], [98, 2, 1, "", "connected_components_decomposition"], [98, 2, 1, "", "copy"], [98, 2, 1, "", "cross"], [98, 2, 1, "", "diagonal_solve"], [98, 2, 1, "", "dot"], [98, 2, 1, "", "dual"], [98, 2, 1, "", "exp"], [98, 2, 1, "", "gauss_jordan_solve"], [98, 2, 1, "", "inv"], [98, 2, 1, "", "inv_mod"], [98, 2, 1, "", "inverse_ADJ"], [98, 2, 1, "", "inverse_BLOCK"], [98, 2, 1, "", "inverse_CH"], [98, 2, 1, "", "inverse_GE"], [98, 2, 1, "", "inverse_LDL"], [98, 2, 1, "", "inverse_LU"], [98, 2, 1, "", "inverse_QR"], [98, 2, 1, "", "irregular"], [98, 2, 1, "", "is_nilpotent"], [98, 2, 1, "", "key2bounds"], [98, 2, 1, "", "key2ij"], [98, 2, 1, "", "log"], [98, 2, 1, "", "lower_triangular_solve"], [98, 2, 1, "", "norm"], [98, 2, 1, "", "normalized"], [98, 2, 1, "", "pinv"], [98, 2, 1, "", "pinv_solve"], [98, 2, 1, "", "print_nonzero"], [98, 2, 1, "", "project"], [98, 2, 1, "", "rank_decomposition"], [98, 2, 1, "", "singular_value_decomposition"], [98, 2, 1, "", "solve"], [98, 2, 1, "", "solve_least_squares"], [98, 2, 1, "", "strongly_connected_components"], [98, 2, 1, "", "strongly_connected_components_decomposition"], [98, 2, 1, "", "table"], [98, 2, 1, "", "upper_hessenberg_decomposition"], [98, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.matrices.MatrixCalculus": [[98, 2, 1, "", "diff"], [98, 2, 1, "", "integrate"], [98, 2, 1, "", "jacobian"], [98, 2, 1, "", "limit"]], "sympy.matrices.matrices.MatrixDeterminant": [[98, 2, 1, "", "adjugate"], [98, 2, 1, "", "charpoly"], [98, 2, 1, "", "cofactor"], [98, 2, 1, "", "cofactor_matrix"], [98, 2, 1, "", "det"], [98, 2, 1, "", "minor"], [98, 2, 1, "", "minor_submatrix"], [98, 2, 1, "", "per"]], "sympy.matrices.matrices.MatrixEigen": [[98, 2, 1, "", "bidiagonal_decomposition"], [98, 2, 1, "", "bidiagonalize"], [98, 2, 1, "", "diagonalize"], [98, 2, 1, "", "eigenvals"], [98, 2, 1, "", "eigenvects"], [98, 2, 1, "", "is_diagonalizable"], [98, 3, 1, "", "is_indefinite"], [98, 3, 1, "", "is_negative_definite"], [98, 3, 1, "", "is_negative_semidefinite"], [98, 3, 1, "", "is_positive_definite"], [98, 3, 1, "", "is_positive_semidefinite"], [98, 2, 1, "", "jordan_form"], [98, 2, 1, "", "left_eigenvects"], [98, 2, 1, "", "singular_values"]], "sympy.matrices.matrices.MatrixReductions": [[98, 2, 1, "", "echelon_form"], [98, 2, 1, "", "elementary_col_op"], [98, 2, 1, "", "elementary_row_op"], [98, 3, 1, "", "is_echelon"], [98, 2, 1, "", "rank"], [98, 2, 1, "", "rref"]], "sympy.matrices.matrices.MatrixSubspaces": [[98, 2, 1, "", "columnspace"], [98, 2, 1, "", "nullspace"], [98, 2, 1, "", "orthogonalize"], [98, 2, 1, "", "rowspace"]], "sympy.matrices.normalforms": [[99, 4, 1, "", "hermite_normal_form"], [99, 4, 1, "", "smith_normal_form"]], "sympy.matrices.sparse": [[100, 1, 1, "", "MutableSparseMatrix"], [100, 5, 1, "", "SparseMatrix"]], "sympy.matrices.sparsetools": [[101, 2, 1, "", "_csrtodok"], [101, 2, 1, "", "_doktocsr"], [101, 2, 1, "", "banded"]], "sympy.ntheory": [[102, 0, 0, "-", "bbp_pi"], [102, 0, 0, "-", "continued_fraction"], [102, 0, 0, "-", "digits"], [102, 0, 0, "-", "ecm"], [102, 0, 0, "-", "egyptian_fraction"], [102, 0, 0, "-", "factor_"], [102, 0, 0, "-", "generate"], [102, 1, 1, "", "mobius"], [102, 0, 0, "-", "modular"], [102, 0, 0, "-", "multinomial"], [102, 0, 0, "-", "partitions_"], [102, 0, 0, "-", "primetest"], [102, 0, 0, "-", "qs"], [102, 0, 0, "-", "residue_ntheory"]], "sympy.ntheory.bbp_pi": [[102, 4, 1, "", "pi_hex_digits"]], "sympy.ntheory.continued_fraction": [[102, 4, 1, "", "continued_fraction"], [102, 4, 1, "", "continued_fraction_convergents"], [102, 4, 1, "", "continued_fraction_iterator"], [102, 4, 1, "", "continued_fraction_periodic"], [102, 4, 1, "", "continued_fraction_reduce"]], "sympy.ntheory.digits": [[102, 4, 1, "", "count_digits"], [102, 4, 1, "", "digits"], [102, 4, 1, "", "is_palindromic"]], "sympy.ntheory.ecm": [[102, 4, 1, "", "ecm"]], "sympy.ntheory.egyptian_fraction": [[102, 4, 1, "", "egyptian_fraction"]], "sympy.ntheory.factor_": [[102, 4, 1, "", "abundance"], [102, 4, 1, "", "antidivisor_count"], [102, 4, 1, "", "antidivisors"], [102, 4, 1, "", "core"], [102, 4, 1, "", "digits"], [102, 4, 1, "", "divisor_count"], [102, 1, 1, "", "divisor_sigma"], [102, 4, 1, "", "divisors"], [102, 4, 1, "", "factorint"], [102, 4, 1, "", "factorrat"], [102, 4, 1, "", "is_abundant"], [102, 4, 1, "", "is_amicable"], [102, 4, 1, "", "is_deficient"], [102, 4, 1, "", "is_mersenne_prime"], [102, 4, 1, "", "is_perfect"], [102, 4, 1, "", "mersenne_prime_exponent"], [102, 4, 1, "", "multiplicity"], [102, 4, 1, "", "perfect_power"], [102, 4, 1, "", "pollard_pm1"], [102, 4, 1, "", "pollard_rho"], [102, 4, 1, "", "primefactors"], [102, 1, 1, "", "primenu"], [102, 1, 1, "", "primeomega"], [102, 4, 1, "", "proper_divisor_count"], [102, 4, 1, "", "proper_divisors"], [102, 1, 1, "", "reduced_totient"], [102, 4, 1, "", "smoothness"], [102, 4, 1, "", "smoothness_p"], [102, 1, 1, "", "totient"], [102, 4, 1, "", "trailing"], [102, 4, 1, "", "udivisor_count"], [102, 1, 1, "", "udivisor_sigma"], [102, 4, 1, "", "udivisors"]], "sympy.ntheory.generate": [[102, 1, 1, "", "Sieve"], [102, 4, 1, "", "composite"], [102, 4, 1, "", "compositepi"], [102, 4, 1, "", "cycle_length"], [102, 4, 1, "", "nextprime"], [102, 4, 1, "", "prevprime"], [102, 4, 1, "", "prime"], [102, 4, 1, "", "primepi"], [102, 4, 1, "", "primerange"], [102, 4, 1, "", "primorial"], [102, 4, 1, "", "randprime"]], "sympy.ntheory.generate.Sieve": [[102, 2, 1, "", "extend"], [102, 2, 1, "", "extend_to_no"], [102, 2, 1, "", "mobiusrange"], [102, 2, 1, "", "primerange"], [102, 2, 1, "", "search"], [102, 2, 1, "", "totientrange"]], "sympy.ntheory.modular": [[102, 4, 1, "", "crt"], [102, 4, 1, "", "crt1"], [102, 4, 1, "", "crt2"], [102, 4, 1, "", "solve_congruence"], [102, 4, 1, "", "symmetric_residue"]], "sympy.ntheory.multinomial": [[102, 4, 1, "", "binomial_coefficients"], [102, 4, 1, "", "binomial_coefficients_list"], [102, 4, 1, "", "multinomial_coefficients"], [102, 4, 1, "", "multinomial_coefficients_iterator"]], "sympy.ntheory.partitions_": [[102, 4, 1, "", "npartitions"]], "sympy.ntheory.primetest": [[102, 4, 1, "", "is_euler_pseudoprime"], [102, 4, 1, "", "is_extra_strong_lucas_prp"], [102, 4, 1, "", "is_gaussian_prime"], [102, 4, 1, "", "is_lucas_prp"], [102, 4, 1, "", "is_square"], [102, 4, 1, "", "is_strong_lucas_prp"], [102, 4, 1, "", "isprime"], [102, 4, 1, "", "mr"]], "sympy.ntheory.qs": [[102, 4, 1, "", "qs"]], "sympy.ntheory.residue_ntheory": [[102, 4, 1, "", "discrete_log"], [102, 4, 1, "", "is_nthpow_residue"], [102, 4, 1, "", "is_primitive_root"], [102, 4, 1, "", "is_quad_residue"], [102, 4, 1, "", "jacobi_symbol"], [102, 4, 1, "", "legendre_symbol"], [102, 4, 1, "", "n_order"], [102, 4, 1, "", "nthroot_mod"], [102, 4, 1, "", "primitive_root"], [102, 4, 1, "", "quadratic_residues"], [102, 4, 1, "", "sqrt_mod"], [102, 4, 1, "", "sqrt_mod_iter"]], "sympy.parsing.latex": [[104, 1, 1, "", "LaTeXParsingError"], [104, 4, 1, "", "parse_latex"]], "sympy.parsing.mathematica": [[104, 4, 1, "", "parse_mathematica"]], "sympy.parsing.maxima": [[104, 4, 1, "", "parse_maxima"]], "sympy.parsing": [[104, 0, 0, "-", "sym_expr"]], "sympy.parsing.sym_expr": [[104, 1, 1, "", "SymPyExpression"]], "sympy.parsing.sym_expr.SymPyExpression": [[104, 2, 1, "", "convert_to_c"], [104, 2, 1, "", "convert_to_expr"], [104, 2, 1, "", "convert_to_fortran"], [104, 2, 1, "", "convert_to_python"], [104, 2, 1, "", "return_expr"]], "sympy.parsing.sympy_parser": [[104, 4, 1, "", "auto_number"], [104, 4, 1, "", "auto_symbol"], [104, 4, 1, "", "convert_xor"], [104, 4, 1, "", "eval_expr"], [104, 4, 1, "", "factorial_notation"], [104, 4, 1, "", "function_exponentiation"], [104, 4, 1, "", "implicit_application"], [104, 4, 1, "", "implicit_multiplication"], [104, 4, 1, "", "implicit_multiplication_application"], [104, 4, 1, "", "lambda_notation"], [104, 4, 1, "", "parse_expr"], [104, 4, 1, "", "rationalize"], [104, 4, 1, "", "repeated_decimals"], [104, 4, 1, "", "split_symbols"], [104, 4, 1, "", "split_symbols_custom"], [104, 6, 1, "", "standard_transformations"], [104, 4, 1, "", "stringify_expr"]], "sympy.physics.continuum_mechanics": [[105, 0, 0, "-", "beam"], [108, 0, 0, "-", "truss"]], "sympy.physics.continuum_mechanics.beam": [[105, 1, 1, "", "Beam"], [105, 1, 1, "", "Beam3D"]], "sympy.physics.continuum_mechanics.beam.Beam": [[105, 3, 1, "", "applied_loads"], [105, 2, 1, "", "apply_load"], [105, 2, 1, "", "apply_support"], [105, 3, 1, "", "area"], [105, 2, 1, "", "bending_moment"], [105, 3, 1, "", "boundary_conditions"], [105, 3, 1, "", "cross_section"], [105, 2, 1, "", "deflection"], [105, 2, 1, "", "draw"], [105, 3, 1, "", "elastic_modulus"], [105, 3, 1, "", "ild_moment"], [105, 3, 1, "", "ild_reactions"], [105, 3, 1, "", "ild_shear"], [105, 2, 1, "", "join"], [105, 3, 1, "", "length"], [105, 3, 1, "", "load"], [105, 2, 1, "", "max_bmoment"], [105, 2, 1, "", "max_deflection"], [105, 2, 1, "", "max_shear_force"], [105, 2, 1, "", "plot_bending_moment"], [105, 2, 1, "", "plot_deflection"], [105, 2, 1, "", "plot_ild_moment"], [105, 2, 1, "", "plot_ild_reactions"], [105, 2, 1, "", "plot_ild_shear"], [105, 2, 1, "", "plot_loading_results"], [105, 2, 1, "", "plot_shear_force"], [105, 2, 1, "", "plot_shear_stress"], [105, 2, 1, "", "plot_slope"], [105, 2, 1, "", "point_cflexure"], [105, 3, 1, "", "reaction_loads"], [105, 2, 1, "", "remove_load"], [105, 3, 1, "", "second_moment"], [105, 2, 1, "", "shear_force"], [105, 2, 1, "", "shear_stress"], [105, 2, 1, "", "slope"], [105, 2, 1, "", "solve_for_ild_moment"], [105, 2, 1, "", "solve_for_ild_reactions"], [105, 2, 1, "", "solve_for_ild_shear"], [105, 2, 1, "", "solve_for_reaction_loads"], [105, 3, 1, "", "variable"]], "sympy.physics.continuum_mechanics.beam.Beam3D": [[105, 2, 1, "", "angular_deflection"], [105, 2, 1, "", "apply_load"], [105, 2, 1, "", "apply_moment_load"], [105, 3, 1, "", "area"], [105, 2, 1, "", "axial_force"], [105, 2, 1, "", "axial_stress"], [105, 2, 1, "", "bending_moment"], [105, 3, 1, "", "boundary_conditions"], [105, 2, 1, "", "deflection"], [105, 3, 1, "", "load_vector"], [105, 2, 1, "", "max_bending_moment"], [105, 2, 1, "", "max_bmoment"], [105, 2, 1, "", "max_deflection"], [105, 2, 1, "", "max_shear_force"], [105, 3, 1, "", "moment_load_vector"], [105, 2, 1, "", "plot_bending_moment"], [105, 2, 1, "", "plot_deflection"], [105, 2, 1, "", "plot_loading_results"], [105, 2, 1, "", "plot_shear_force"], [105, 2, 1, "", "plot_shear_stress"], [105, 2, 1, "", "plot_slope"], [105, 2, 1, "", "polar_moment"], [105, 3, 1, "", "second_moment"], [105, 2, 1, "", "shear_force"], [105, 3, 1, "", "shear_modulus"], [105, 2, 1, "", "shear_stress"], [105, 2, 1, "", "slope"], [105, 2, 1, "", "solve_for_reaction_loads"], [105, 2, 1, "", "solve_for_torsion"], [105, 2, 1, "", "torsional_moment"]], "sympy.physics.continuum_mechanics.truss": [[108, 1, 1, "", "Truss"]], "sympy.physics.continuum_mechanics.truss.Truss": [[108, 2, 1, "", "add_member"], [108, 2, 1, "", "add_node"], [108, 2, 1, "", "apply_load"], [108, 2, 1, "", "apply_support"], [108, 2, 1, "", "change_member_label"], [108, 2, 1, "", "change_node_label"], [108, 3, 1, "", "internal_forces"], [108, 3, 1, "", "loads"], [108, 3, 1, "", "member_labels"], [108, 3, 1, "", "members"], [108, 3, 1, "", "node_labels"], [108, 3, 1, "", "node_positions"], [108, 3, 1, "", "nodes"], [108, 3, 1, "", "reaction_loads"], [108, 2, 1, "", "remove_load"], [108, 2, 1, "", "remove_member"], [108, 2, 1, "", "remove_node"], [108, 2, 1, "", "remove_support"], [108, 2, 1, "", "solve"], [108, 3, 1, "", "supports"]], "sympy.physics": [[111, 0, 0, "-", "control"], [114, 0, 0, "-", "hydrogen"], [115, 0, 0, "-", "matrices"], [136, 0, 0, "-", "mechanics"], [151, 0, 0, "-", "paulialgebra"], [152, 0, 0, "-", "qho_1d"], [176, 0, 0, "-", "secondquant"], [177, 0, 0, "-", "sho"], [193, 0, 0, "-", "vector"], [196, 0, 0, "-", "wigner"]], "sympy.physics.control.control_plots": [[110, 2, 1, "", "bode_magnitude_numerical_data"], [110, 2, 1, "", "bode_magnitude_plot"], [110, 2, 1, "", "bode_phase_numerical_data"], [110, 2, 1, "", "bode_phase_plot"], [110, 2, 1, "", "bode_plot"], [110, 2, 1, "", "impulse_response_numerical_data"], [110, 2, 1, "", "impulse_response_plot"], [110, 2, 1, "", "pole_zero_numerical_data"], [110, 2, 1, "", "pole_zero_plot"], [110, 2, 1, "", "ramp_response_numerical_data"], [110, 2, 1, "", "ramp_response_plot"], [110, 2, 1, "", "step_response_numerical_data"], [110, 2, 1, "", "step_response_plot"]], "sympy.physics.control": [[112, 0, 0, "-", "lti"]], "sympy.physics.control.lti": [[112, 1, 1, "", "Feedback"], [112, 1, 1, "", "MIMOFeedback"], [112, 1, 1, "", "MIMOParallel"], [112, 1, 1, "", "MIMOSeries"], [112, 1, 1, "", "Parallel"], [112, 1, 1, "", "Series"], [112, 1, 1, "", "TransferFunction"], [112, 1, 1, "", "TransferFunctionMatrix"], [112, 4, 1, "", "backward_diff"], [112, 4, 1, "", "bilinear"]], "sympy.physics.control.lti.Feedback": [[112, 2, 1, "", "doit"], [112, 3, 1, "", "sensitivity"], [112, 3, 1, "", "sign"], [112, 3, 1, "", "sys1"], [112, 3, 1, "", "sys2"], [112, 3, 1, "", "var"]], "sympy.physics.control.lti.MIMOFeedback": [[112, 2, 1, "", "doit"], [112, 3, 1, "", "sensitivity"], [112, 3, 1, "", "sign"], [112, 3, 1, "", "sys1"], [112, 3, 1, "", "sys2"], [112, 3, 1, "", "var"]], "sympy.physics.control.lti.MIMOParallel": [[112, 2, 1, "", "doit"], [112, 3, 1, "", "num_inputs"], [112, 3, 1, "", "num_outputs"], [112, 3, 1, "", "shape"], [112, 3, 1, "", "var"]], "sympy.physics.control.lti.MIMOSeries": [[112, 2, 1, "", "doit"], [112, 3, 1, "", "num_inputs"], [112, 3, 1, "", "num_outputs"], [112, 3, 1, "", "shape"], [112, 3, 1, "", "var"]], "sympy.physics.control.lti.Parallel": [[112, 2, 1, "", "doit"], [112, 3, 1, "", "is_biproper"], [112, 3, 1, "", "is_proper"], [112, 3, 1, "", "is_strictly_proper"], [112, 2, 1, "", "to_expr"], [112, 3, 1, "", "var"]], "sympy.physics.control.lti.Series": [[112, 2, 1, "", "doit"], [112, 3, 1, "", "is_biproper"], [112, 3, 1, "", "is_proper"], [112, 3, 1, "", "is_strictly_proper"], [112, 2, 1, "", "to_expr"], [112, 3, 1, "", "var"]], "sympy.physics.control.lti.TransferFunction": [[112, 2, 1, "", "dc_gain"], [112, 3, 1, "", "den"], [112, 2, 1, "", "expand"], [112, 2, 1, "", "from_rational_expression"], [112, 3, 1, "", "is_biproper"], [112, 3, 1, "", "is_proper"], [112, 2, 1, "", "is_stable"], [112, 3, 1, "", "is_strictly_proper"], [112, 3, 1, "", "num"], [112, 2, 1, "", "poles"], [112, 2, 1, "", "to_expr"], [112, 3, 1, "", "var"], [112, 2, 1, "", "zeros"]], "sympy.physics.control.lti.TransferFunctionMatrix": [[112, 2, 1, "", "elem_poles"], [112, 2, 1, "", "elem_zeros"], [112, 2, 1, "", "expand"], [112, 2, 1, "", "from_Matrix"], [112, 3, 1, "", "num_inputs"], [112, 3, 1, "", "num_outputs"], [112, 3, 1, "", "shape"], [112, 2, 1, "", "transpose"], [112, 3, 1, "", "var"]], "sympy.physics.hep": [[113, 0, 0, "-", "gamma_matrices"]], "sympy.physics.hep.gamma_matrices": [[113, 4, 1, "", "extract_type_tens"], [113, 4, 1, "", "gamma_trace"], [113, 4, 1, "", "kahane_simplify"], [113, 4, 1, "", "simplify_gpgp"]], "sympy.physics.hydrogen": [[114, 4, 1, "", "E_nl"], [114, 4, 1, "", "E_nl_dirac"], [114, 4, 1, "", "Psi_nlm"], [114, 4, 1, "", "R_nl"]], "sympy.physics.matrices": [[115, 4, 1, "", "mdft"], [115, 4, 1, "", "mgamma"], [115, 4, 1, "", "msigma"], [115, 4, 1, "", "pat_matrix"]], "sympy.physics.mechanics": [[117, 0, 0, "-", "body"], [118, 4, 1, "", "find_dynamicsymbols"], [120, 0, 0, "-", "joint"], [120, 0, 0, "-", "jointsmethod"], [121, 0, 0, "-", "kane"], [121, 0, 0, "-", "lagrange"], [122, 0, 0, "-", "linearize"], [118, 4, 1, "", "msubs"], [123, 0, 0, "-", "particle"], [123, 0, 0, "-", "rigidbody"], [125, 0, 0, "-", "system"]], "sympy.physics.mechanics.body": [[117, 1, 1, "", "Body"]], "sympy.physics.mechanics.body.Body": [[117, 2, 1, "", "ang_vel_in"], [117, 2, 1, "", "apply_force"], [117, 2, 1, "", "apply_torque"], [117, 2, 1, "", "clear_loads"], [117, 2, 1, "", "dcm"], [117, 3, 1, "", "inertia"], [117, 2, 1, "", "kinetic_energy"], [117, 2, 1, "", "masscenter_vel"], [117, 2, 1, "", "parallel_axis"], [117, 2, 1, "", "remove_load"], [117, 3, 1, "", "x"], [117, 3, 1, "", "y"], [117, 3, 1, "", "z"]], "sympy.physics.mechanics.functions": [[123, 4, 1, "", "Lagrangian"], [123, 4, 1, "", "angular_momentum"], [123, 4, 1, "", "inertia"], [123, 4, 1, "", "inertia_of_point_mass"], [123, 4, 1, "", "kinetic_energy"], [123, 4, 1, "", "linear_momentum"], [123, 4, 1, "", "potential_energy"]], "sympy.physics.mechanics.joint": [[120, 1, 1, "", "CylindricalJoint"], [120, 1, 1, "", "Joint"], [120, 1, 1, "", "PinJoint"], [120, 1, 1, "", "PlanarJoint"], [120, 1, 1, "", "PrismaticJoint"], [120, 1, 1, "", "SphericalJoint"], [120, 1, 1, "", "WeldJoint"]], "sympy.physics.mechanics.joint.CylindricalJoint": [[120, 3, 1, "", "joint_axis"], [120, 3, 1, "", "rotation_coordinate"], [120, 3, 1, "", "rotation_speed"], [120, 3, 1, "", "translation_coordinate"], [120, 3, 1, "", "translation_speed"]], "sympy.physics.mechanics.joint.Joint": [[120, 3, 1, "", "child"], [120, 3, 1, "", "child_axis"], [120, 3, 1, "", "child_point"], [120, 3, 1, "", "coordinates"], [120, 3, 1, "", "kdes"], [120, 3, 1, "", "name"], [120, 3, 1, "", "parent"], [120, 3, 1, "", "parent_axis"], [120, 3, 1, "", "parent_point"], [120, 3, 1, "", "speeds"]], "sympy.physics.mechanics.joint.PinJoint": [[120, 3, 1, "", "joint_axis"]], "sympy.physics.mechanics.joint.PlanarJoint": [[120, 3, 1, "", "planar_coordinates"], [120, 3, 1, "", "planar_speeds"], [120, 3, 1, "", "planar_vectors"], [120, 3, 1, "", "rotation_axis"], [120, 3, 1, "", "rotation_coordinate"], [120, 3, 1, "", "rotation_speed"]], "sympy.physics.mechanics.joint.PrismaticJoint": [[120, 3, 1, "", "joint_axis"]], "sympy.physics.mechanics.jointsmethod": [[120, 1, 1, "", "JointsMethod"]], "sympy.physics.mechanics.jointsmethod.JointsMethod": [[120, 3, 1, "", "bodies"], [120, 3, 1, "", "forcing"], [120, 3, 1, "", "forcing_full"], [120, 2, 1, "", "form_eoms"], [120, 3, 1, "", "kdes"], [120, 3, 1, "", "loads"], [120, 3, 1, "", "mass_matrix"], [120, 3, 1, "", "mass_matrix_full"], [120, 3, 1, "", "method"], [120, 3, 1, "", "q"], [120, 2, 1, "", "rhs"], [120, 3, 1, "", "u"]], "sympy.physics.mechanics.kane": [[121, 1, 1, "", "KanesMethod"]], "sympy.physics.mechanics.kane.KanesMethod": [[121, 3, 1, "", "auxiliary_eqs"], [121, 3, 1, "", "forcing"], [121, 3, 1, "", "forcing_full"], [121, 3, 1, "", "forcing_kin"], [121, 2, 1, "", "kanes_equations"], [121, 2, 1, "", "kindiffdict"], [121, 2, 1, "", "linearize"], [121, 3, 1, "", "mass_matrix"], [121, 3, 1, "", "mass_matrix_full"], [121, 3, 1, "", "mass_matrix_kin"], [121, 2, 1, "", "rhs"], [121, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.lagrange": [[121, 1, 1, "", "LagrangesMethod"]], "sympy.physics.mechanics.lagrange.LagrangesMethod": [[121, 3, 1, "", "forcing"], [121, 3, 1, "", "forcing_full"], [121, 2, 1, "", "form_lagranges_equations"], [121, 2, 1, "", "linearize"], [121, 3, 1, "", "mass_matrix"], [121, 3, 1, "", "mass_matrix_full"], [121, 2, 1, "", "rhs"], [121, 2, 1, "", "solve_multipliers"], [121, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.linearize": [[122, 1, 1, "", "Linearizer"]], "sympy.physics.mechanics.linearize.Linearizer": [[122, 2, 1, "", "linearize"]], "sympy.physics.mechanics.particle": [[123, 1, 1, "", "Particle"]], "sympy.physics.mechanics.particle.Particle": [[123, 2, 1, "", "angular_momentum"], [123, 2, 1, "", "kinetic_energy"], [123, 2, 1, "", "linear_momentum"], [123, 3, 1, "", "mass"], [123, 2, 1, "", "parallel_axis"], [123, 3, 1, "", "point"], [123, 3, 1, "", "potential_energy"]], "sympy.physics.mechanics.rigidbody": [[123, 1, 1, "", "RigidBody"]], "sympy.physics.mechanics.rigidbody.RigidBody": [[123, 2, 1, "", "angular_momentum"], [123, 3, 1, "", "central_inertia"], [123, 3, 1, "", "frame"], [123, 3, 1, "", "inertia"], [123, 2, 1, "", "kinetic_energy"], [123, 2, 1, "", "linear_momentum"], [123, 3, 1, "", "mass"], [123, 3, 1, "", "masscenter"], [123, 2, 1, "", "parallel_axis"], [123, 3, 1, "", "potential_energy"]], "sympy.physics.mechanics.system": [[125, 1, 1, "", "SymbolicSystem"]], "sympy.physics.mechanics.system.SymbolicSystem": [[125, 3, 1, "", "alg_con"], [125, 3, 1, "", "bodies"], [125, 3, 1, "", "comb_explicit_rhs"], [125, 3, 1, "", "comb_implicit_mat"], [125, 3, 1, "", "comb_implicit_rhs"], [125, 2, 1, "", "compute_explicit_form"], [125, 2, 1, "", "constant_symbols"], [125, 3, 1, "", "coordinates"], [125, 3, 1, "", "dyn_implicit_mat"], [125, 3, 1, "", "dyn_implicit_rhs"], [125, 2, 1, "", "dynamic_symbols"], [125, 3, 1, "", "kin_explicit_rhs"], [125, 3, 1, "", "loads"], [125, 3, 1, "", "speeds"], [125, 3, 1, "", "states"]], "sympy.physics.optics": [[145, 0, 0, "-", "gaussopt"], [147, 0, 0, "-", "medium"], [148, 0, 0, "-", "polarization"], [149, 0, 0, "-", "utils"], [150, 0, 0, "-", "waves"]], "sympy.physics.optics.gaussopt": [[145, 1, 1, "", "BeamParameter"], [145, 1, 1, "", "CurvedMirror"], [145, 1, 1, "", "CurvedRefraction"], [145, 1, 1, "", "FlatMirror"], [145, 1, 1, "", "FlatRefraction"], [145, 1, 1, "", "FreeSpace"], [145, 1, 1, "", "GeometricRay"], [145, 1, 1, "", "RayTransferMatrix"], [145, 1, 1, "", "ThinLens"], [145, 4, 1, "", "conjugate_gauss_beams"], [145, 4, 1, "", "gaussian_conj"], [145, 4, 1, "", "geometric_conj_ab"], [145, 4, 1, "", "geometric_conj_af"], [145, 4, 1, "", "geometric_conj_bf"], [145, 4, 1, "", "rayleigh2waist"], [145, 4, 1, "", "waist2rayleigh"]], "sympy.physics.optics.gaussopt.BeamParameter": [[145, 3, 1, "", "divergence"], [145, 3, 1, "", "gouy"], [145, 3, 1, "", "q"], [145, 3, 1, "", "radius"], [145, 3, 1, "", "w"], [145, 3, 1, "", "w_0"], [145, 3, 1, "", "waist_approximation_limit"]], "sympy.physics.optics.gaussopt.GeometricRay": [[145, 3, 1, "", "angle"], [145, 3, 1, "", "height"]], "sympy.physics.optics.gaussopt.RayTransferMatrix": [[145, 3, 1, "", "A"], [145, 3, 1, "", "B"], [145, 3, 1, "", "C"], [145, 3, 1, "", "D"]], "sympy.physics.optics.medium": [[147, 1, 1, "", "Medium"]], "sympy.physics.optics.medium.Medium": [[147, 3, 1, "", "refractive_index"], [147, 3, 1, "", "speed"]], "sympy.physics.optics.polarization": [[148, 4, 1, "", "half_wave_retarder"], [148, 4, 1, "", "jones_2_stokes"], [148, 4, 1, "", "jones_vector"], [148, 4, 1, "", "linear_polarizer"], [148, 4, 1, "", "mueller_matrix"], [148, 4, 1, "", "phase_retarder"], [148, 4, 1, "", "polarizing_beam_splitter"], [148, 4, 1, "", "quarter_wave_retarder"], [148, 4, 1, "", "reflective_filter"], [148, 4, 1, "", "stokes_vector"], [148, 4, 1, "", "transmissive_filter"]], "sympy.physics.optics.utils": [[149, 4, 1, "", "brewster_angle"], [149, 4, 1, "", "critical_angle"], [149, 4, 1, "", "deviation"], [149, 4, 1, "", "fresnel_coefficients"], [149, 4, 1, "", "hyperfocal_distance"], [149, 4, 1, "", "lens_formula"], [149, 4, 1, "", "lens_makers_formula"], [149, 4, 1, "", "mirror_formula"], [149, 4, 1, "", "refraction_angle"], [149, 4, 1, "", "transverse_magnification"]], "sympy.physics.optics.waves": [[150, 1, 1, "", "TWave"]], "sympy.physics.optics.waves.TWave": [[150, 3, 1, "", "amplitude"], [150, 3, 1, "", "angular_velocity"], [150, 3, 1, "", "frequency"], [150, 3, 1, "", "n"], [150, 3, 1, "", "phase"], [150, 3, 1, "", "speed"], [150, 3, 1, "", "time_period"], [150, 3, 1, "", "wavelength"], [150, 3, 1, "", "wavenumber"]], "sympy.physics.paulialgebra": [[151, 4, 1, "", "evaluate_pauli_product"]], "sympy.physics.qho_1d": [[152, 4, 1, "", "E_n"], [152, 4, 1, "", "coherent_state"], [152, 4, 1, "", "psi_n"]], "sympy.physics.quantum": [[153, 0, 0, "-", "anticommutator"], [154, 0, 0, "-", "cartesian"], [155, 0, 0, "-", "cg"], [156, 0, 0, "-", "circuitplot"], [157, 0, 0, "-", "commutator"], [158, 0, 0, "-", "constants"], [159, 0, 0, "-", "dagger"], [160, 0, 0, "-", "gate"], [161, 0, 0, "-", "grover"], [162, 0, 0, "-", "hilbert"], [164, 0, 0, "-", "innerproduct"], [165, 0, 0, "-", "operator"], [166, 0, 0, "-", "operatorset"], [167, 0, 0, "-", "piab"], [168, 0, 0, "-", "qapply"], [169, 0, 0, "-", "qft"], [170, 0, 0, "-", "qubit"], [171, 0, 0, "-", "represent"], [172, 0, 0, "-", "shor"], [173, 0, 0, "-", "spin"], [174, 0, 0, "-", "state"], [175, 0, 0, "-", "tensorproduct"]], "sympy.physics.quantum.anticommutator": [[153, 1, 1, "", "AntiCommutator"]], "sympy.physics.quantum.anticommutator.AntiCommutator": [[153, 2, 1, "", "doit"]], "sympy.physics.quantum.cartesian": [[154, 1, 1, "", "PositionBra3D"], [154, 1, 1, "", "PositionKet3D"], [154, 1, 1, "", "PositionState3D"], [154, 1, 1, "", "PxBra"], [154, 1, 1, "", "PxKet"], [154, 1, 1, "", "PxOp"], [154, 1, 1, "", "XBra"], [154, 1, 1, "", "XKet"], [154, 1, 1, "", "XOp"], [154, 1, 1, "", "YOp"], [154, 1, 1, "", "ZOp"]], "sympy.physics.quantum.cartesian.PositionState3D": [[154, 3, 1, "", "position_x"], [154, 3, 1, "", "position_y"], [154, 3, 1, "", "position_z"]], "sympy.physics.quantum.cartesian.PxBra": [[154, 3, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.PxKet": [[154, 3, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.XBra": [[154, 3, 1, "", "position"]], "sympy.physics.quantum.cartesian.XKet": [[154, 3, 1, "", "position"]], "sympy.physics.quantum.cg": [[155, 1, 1, "", "CG"], [155, 1, 1, "", "Wigner3j"], [155, 1, 1, "", "Wigner6j"], [155, 1, 1, "", "Wigner9j"], [155, 4, 1, "", "cg_simp"]], "sympy.physics.quantum.circuitplot": [[156, 1, 1, "", "CircuitPlot"], [156, 4, 1, "", "CreateCGate"], [156, 1, 1, "", "Mx"], [156, 1, 1, "", "Mz"], [156, 4, 1, "", "circuit_plot"], [156, 4, 1, "", "labeller"]], "sympy.physics.quantum.circuitplot.CircuitPlot": [[156, 2, 1, "", "control_line"], [156, 2, 1, "", "control_point"], [156, 2, 1, "", "not_point"], [156, 2, 1, "", "one_qubit_box"], [156, 2, 1, "", "swap_point"], [156, 2, 1, "", "two_qubit_box"], [156, 2, 1, "", "update"]], "sympy.physics.quantum.commutator": [[157, 1, 1, "", "Commutator"]], "sympy.physics.quantum.commutator.Commutator": [[157, 2, 1, "", "doit"]], "sympy.physics.quantum.constants": [[158, 1, 1, "", "HBar"]], "sympy.physics.quantum.dagger": [[159, 1, 1, "", "Dagger"]], "sympy.physics.quantum.gate": [[160, 1, 1, "", "CGate"], [160, 1, 1, "", "CGateS"], [160, 5, 1, "", "CNOT"], [160, 1, 1, "", "CNotGate"], [160, 1, 1, "", "Gate"], [160, 5, 1, "", "H"], [160, 1, 1, "", "HadamardGate"], [160, 1, 1, "", "IdentityGate"], [160, 1, 1, "", "OneQubitGate"], [160, 5, 1, "", "Phase"], [160, 1, 1, "", "PhaseGate"], [160, 5, 1, "", "S"], [160, 5, 1, "", "SWAP"], [160, 1, 1, "", "SwapGate"], [160, 5, 1, "", "T"], [160, 1, 1, "", "TGate"], [160, 1, 1, "", "TwoQubitGate"], [160, 1, 1, "", "UGate"], [160, 5, 1, "", "X"], [160, 1, 1, "", "XGate"], [160, 5, 1, "", "Y"], [160, 1, 1, "", "YGate"], [160, 5, 1, "", "Z"], [160, 1, 1, "", "ZGate"], [160, 4, 1, "", "gate_simp"], [160, 4, 1, "", "gate_sort"], [160, 4, 1, "", "normalized"], [160, 4, 1, "", "random_circuit"]], "sympy.physics.quantum.gate.CGate": [[160, 3, 1, "", "controls"], [160, 2, 1, "", "decompose"], [160, 2, 1, "", "eval_controls"], [160, 3, 1, "", "gate"], [160, 3, 1, "", "min_qubits"], [160, 3, 1, "", "nqubits"], [160, 2, 1, "", "plot_gate"], [160, 3, 1, "", "targets"]], "sympy.physics.quantum.gate.CNotGate": [[160, 3, 1, "", "controls"], [160, 3, 1, "", "gate"], [160, 3, 1, "", "min_qubits"], [160, 3, 1, "", "targets"]], "sympy.physics.quantum.gate.Gate": [[160, 2, 1, "", "get_target_matrix"], [160, 3, 1, "", "min_qubits"], [160, 3, 1, "", "nqubits"], [160, 3, 1, "", "targets"]], "sympy.physics.quantum.gate.SwapGate": [[160, 2, 1, "", "decompose"]], "sympy.physics.quantum.gate.UGate": [[160, 2, 1, "", "get_target_matrix"], [160, 3, 1, "", "targets"]], "sympy.physics.quantum.grover": [[161, 1, 1, "", "OracleGate"], [161, 1, 1, "", "WGate"], [161, 4, 1, "", "apply_grover"], [161, 4, 1, "", "grover_iteration"], [161, 4, 1, "", "superposition_basis"]], "sympy.physics.quantum.grover.OracleGate": [[161, 3, 1, "", "search_function"], [161, 3, 1, "", "targets"]], "sympy.physics.quantum.hilbert": [[162, 1, 1, "", "ComplexSpace"], [162, 1, 1, "", "DirectSumHilbertSpace"], [162, 1, 1, "", "FockSpace"], [162, 1, 1, "", "HilbertSpace"], [162, 1, 1, "", "L2"], [162, 1, 1, "", "TensorPowerHilbertSpace"], [162, 1, 1, "", "TensorProductHilbertSpace"]], "sympy.physics.quantum.hilbert.DirectSumHilbertSpace": [[162, 2, 1, "", "eval"], [162, 3, 1, "", "spaces"]], "sympy.physics.quantum.hilbert.HilbertSpace": [[162, 3, 1, "", "dimension"]], "sympy.physics.quantum.hilbert.TensorProductHilbertSpace": [[162, 2, 1, "", "eval"], [162, 3, 1, "", "spaces"]], "sympy.physics.quantum.innerproduct": [[164, 1, 1, "", "InnerProduct"]], "sympy.physics.quantum.operator": [[165, 1, 1, "", "DifferentialOperator"], [165, 1, 1, "", "HermitianOperator"], [165, 1, 1, "", "IdentityOperator"], [165, 1, 1, "", "Operator"], [165, 1, 1, "", "OuterProduct"], [165, 1, 1, "", "UnitaryOperator"]], "sympy.physics.quantum.operator.DifferentialOperator": [[165, 3, 1, "", "expr"], [165, 3, 1, "", "free_symbols"], [165, 3, 1, "", "function"], [165, 3, 1, "", "variables"]], "sympy.physics.quantum.operator.OuterProduct": [[165, 3, 1, "", "bra"], [165, 3, 1, "", "ket"]], "sympy.physics.quantum.operatorset": [[166, 4, 1, "", "operators_to_state"], [166, 4, 1, "", "state_to_operators"]], "sympy.physics.quantum.piab": [[167, 1, 1, "", "PIABBra"], [167, 1, 1, "", "PIABHamiltonian"], [167, 1, 1, "", "PIABKet"]], "sympy.physics.quantum.qapply": [[168, 4, 1, "", "qapply"]], "sympy.physics.quantum.qft": [[169, 1, 1, "", "IQFT"], [169, 1, 1, "", "QFT"], [169, 5, 1, "", "Rk"], [169, 1, 1, "", "RkGate"]], "sympy.physics.quantum.qft.IQFT": [[169, 2, 1, "", "decompose"]], "sympy.physics.quantum.qft.QFT": [[169, 2, 1, "", "decompose"]], "sympy.physics.quantum.qubit": [[170, 1, 1, "", "IntQubit"], [170, 1, 1, "", "IntQubitBra"], [170, 1, 1, "", "Qubit"], [170, 1, 1, "", "QubitBra"], [170, 4, 1, "", "matrix_to_density"], [170, 4, 1, "", "matrix_to_qubit"], [170, 4, 1, "", "measure_all"], [170, 4, 1, "", "measure_all_oneshot"], [170, 4, 1, "", "measure_partial"], [170, 4, 1, "", "measure_partial_oneshot"], [170, 4, 1, "", "qubit_to_matrix"]], "sympy.physics.quantum.represent": [[171, 4, 1, "", "enumerate_states"], [171, 4, 1, "", "get_basis"], [171, 4, 1, "", "integrate_result"], [171, 4, 1, "", "rep_expectation"], [171, 4, 1, "", "rep_innerproduct"], [171, 4, 1, "", "represent"]], "sympy.physics.quantum.shor": [[172, 1, 1, "", "CMod"], [172, 4, 1, "", "period_find"], [172, 4, 1, "", "shor"]], "sympy.physics.quantum.shor.CMod": [[172, 3, 1, "", "N"], [172, 3, 1, "", "a"], [172, 3, 1, "", "t"]], "sympy.physics.quantum.spin": [[173, 1, 1, "", "J2Op"], [173, 1, 1, "", "JxBra"], [173, 1, 1, "", "JxBraCoupled"], [173, 1, 1, "", "JxKet"], [173, 1, 1, "", "JxKetCoupled"], [173, 1, 1, "", "JyBra"], [173, 1, 1, "", "JyBraCoupled"], [173, 1, 1, "", "JyKet"], [173, 1, 1, "", "JyKetCoupled"], [173, 1, 1, "", "JzBra"], [173, 1, 1, "", "JzBraCoupled"], [173, 1, 1, "", "JzKet"], [173, 1, 1, "", "JzKetCoupled"], [173, 1, 1, "", "JzOp"], [173, 1, 1, "", "Rotation"], [173, 1, 1, "", "WignerD"], [173, 4, 1, "", "couple"], [173, 4, 1, "", "uncouple"]], "sympy.physics.quantum.spin.Rotation": [[173, 2, 1, "", "D"], [173, 2, 1, "", "d"]], "sympy.physics.quantum.state": [[174, 1, 1, "", "Bra"], [174, 1, 1, "", "BraBase"], [174, 1, 1, "", "Ket"], [174, 1, 1, "", "KetBase"], [174, 1, 1, "", "OrthogonalBra"], [174, 1, 1, "", "OrthogonalKet"], [174, 1, 1, "", "OrthogonalState"], [174, 1, 1, "", "State"], [174, 1, 1, "", "StateBase"], [174, 1, 1, "", "TimeDepBra"], [174, 1, 1, "", "TimeDepKet"], [174, 1, 1, "", "TimeDepState"], [174, 1, 1, "", "Wavefunction"]], "sympy.physics.quantum.state.StateBase": [[174, 3, 1, "", "dual"], [174, 2, 1, "", "dual_class"], [174, 3, 1, "", "operators"]], "sympy.physics.quantum.state.TimeDepState": [[174, 3, 1, "", "label"], [174, 3, 1, "", "time"]], "sympy.physics.quantum.state.Wavefunction": [[174, 3, 1, "", "expr"], [174, 3, 1, "", "is_commutative"], [174, 3, 1, "", "is_normalized"], [174, 3, 1, "", "limits"], [174, 3, 1, "", "norm"], [174, 2, 1, "", "normalize"], [174, 2, 1, "", "prob"], [174, 3, 1, "", "variables"]], "sympy.physics.quantum.tensorproduct": [[175, 1, 1, "", "TensorProduct"], [175, 4, 1, "", "tensor_product_simp"]], "sympy.physics.secondquant": [[176, 1, 1, "", "AnnihilateBoson"], [176, 1, 1, "", "AnnihilateFermion"], [176, 1, 1, "", "AntiSymmetricTensor"], [176, 5, 1, "", "B"], [176, 5, 1, "", "BBra"], [176, 5, 1, "", "BKet"], [176, 5, 1, "", "Bd"], [176, 1, 1, "", "BosonicBasis"], [176, 1, 1, "", "Commutator"], [176, 1, 1, "", "CreateBoson"], [176, 1, 1, "", "CreateFermion"], [176, 1, 1, "", "Dagger"], [176, 5, 1, "", "F"], [176, 5, 1, "", "FBra"], [176, 5, 1, "", "FKet"], [176, 5, 1, "", "Fd"], [176, 1, 1, "", "FixedBosonicBasis"], [176, 1, 1, "", "FockState"], [176, 1, 1, "", "FockStateBosonBra"], [176, 1, 1, "", "FockStateBosonKet"], [176, 1, 1, "", "FockStateBra"], [176, 1, 1, "", "FockStateFermionBra"], [176, 1, 1, "", "FockStateFermionKet"], [176, 1, 1, "", "FockStateKet"], [176, 1, 1, "", "InnerProduct"], [176, 1, 1, "", "KroneckerDelta"], [176, 1, 1, "", "NO"], [176, 1, 1, "", "PermutationOperator"], [176, 1, 1, "", "VarBosonicBasis"], [176, 4, 1, "", "apply_operators"], [176, 4, 1, "", "contraction"], [176, 4, 1, "", "evaluate_deltas"], [176, 4, 1, "", "matrix_rep"], [176, 4, 1, "", "simplify_index_permutations"], [176, 4, 1, "", "substitute_dummies"], [176, 4, 1, "", "wicks"]], "sympy.physics.secondquant.AnnihilateBoson": [[176, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.AnnihilateFermion": [[176, 2, 1, "", "apply_operator"], [176, 3, 1, "", "is_only_q_annihilator"], [176, 3, 1, "", "is_only_q_creator"], [176, 3, 1, "", "is_q_annihilator"], [176, 3, 1, "", "is_q_creator"]], "sympy.physics.secondquant.AntiSymmetricTensor": [[176, 3, 1, "", "lower"], [176, 3, 1, "", "symbol"], [176, 3, 1, "", "upper"]], "sympy.physics.secondquant.Commutator": [[176, 2, 1, "", "doit"], [176, 2, 1, "", "eval"]], "sympy.physics.secondquant.CreateBoson": [[176, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.CreateFermion": [[176, 2, 1, "", "apply_operator"], [176, 3, 1, "", "is_only_q_annihilator"], [176, 3, 1, "", "is_only_q_creator"], [176, 3, 1, "", "is_q_annihilator"], [176, 3, 1, "", "is_q_creator"]], "sympy.physics.secondquant.Dagger": [[176, 2, 1, "", "eval"]], "sympy.physics.secondquant.FixedBosonicBasis": [[176, 2, 1, "", "index"], [176, 2, 1, "", "state"]], "sympy.physics.secondquant.InnerProduct": [[176, 3, 1, "", "bra"], [176, 3, 1, "", "ket"]], "sympy.physics.secondquant.KroneckerDelta": [[176, 2, 1, "", "eval"], [176, 3, 1, "", "indices_contain_equal_information"], [176, 3, 1, "", "is_above_fermi"], [176, 3, 1, "", "is_below_fermi"], [176, 3, 1, "", "is_only_above_fermi"], [176, 3, 1, "", "is_only_below_fermi"], [176, 3, 1, "", "killable_index"], [176, 3, 1, "", "preferred_index"]], "sympy.physics.secondquant.NO": [[176, 2, 1, "", "doit"], [176, 2, 1, "", "get_subNO"], [176, 3, 1, "", "has_q_annihilators"], [176, 3, 1, "", "has_q_creators"], [176, 2, 1, "", "iter_q_annihilators"], [176, 2, 1, "", "iter_q_creators"]], "sympy.physics.secondquant.PermutationOperator": [[176, 2, 1, "", "get_permuted"]], "sympy.physics.secondquant.VarBosonicBasis": [[176, 2, 1, "", "index"], [176, 2, 1, "", "state"]], "sympy.physics.sho": [[177, 4, 1, "", "E_nl"], [177, 4, 1, "", "R_nl"]], "sympy.physics.units": [[178, 0, 0, "-", "dimensions"], [182, 0, 0, "-", "prefixes"], [183, 0, 0, "-", "quantities"], [184, 0, 0, "-", "unitsystem"], [183, 0, 0, "-", "util"]], "sympy.physics.units.dimensions": [[178, 1, 1, "", "Dimension"], [178, 1, 1, "", "DimensionSystem"]], "sympy.physics.units.dimensions.Dimension": [[178, 2, 1, "", "has_integer_powers"]], "sympy.physics.units.dimensions.DimensionSystem": [[178, 3, 1, "", "can_transf_matrix"], [178, 3, 1, "", "dim"], [178, 2, 1, "", "dim_can_vector"], [178, 2, 1, "", "dim_vector"], [178, 3, 1, "", "inv_can_transf_matrix"], [178, 3, 1, "", "is_consistent"], [178, 2, 1, "", "is_dimensionless"], [178, 3, 1, "", "list_can_dims"], [178, 2, 1, "", "print_dim_base"]], "sympy.physics.units.prefixes": [[182, 1, 1, "", "Prefix"]], "sympy.physics.units.quantities": [[183, 1, 1, "", "Quantity"]], "sympy.physics.units.quantities.Quantity": [[183, 3, 1, "", "abbrev"], [183, 2, 1, "", "convert_to"], [183, 3, 1, "", "free_symbols"], [183, 3, 1, "", "is_prefixed"], [183, 3, 1, "", "scale_factor"], [183, 2, 1, "", "set_global_relative_scale_factor"]], "sympy.physics.units.unitsystem": [[184, 1, 1, "", "UnitSystem"]], "sympy.physics.units.unitsystem.UnitSystem": [[184, 3, 1, "", "dim"], [184, 2, 1, "", "extend"], [184, 2, 1, "", "get_units_non_prefixed"], [184, 3, 1, "", "is_consistent"]], "sympy.physics.units.util": [[183, 4, 1, "", "convert_to"]], "sympy.physics.vector.dyadic": [[186, 1, 1, "", "Dyadic"]], "sympy.physics.vector.dyadic.Dyadic": [[186, 2, 1, "", "applyfunc"], [186, 2, 1, "", "cross"], [186, 2, 1, "", "doit"], [186, 2, 1, "", "dot"], [186, 2, 1, "", "dt"], [186, 2, 1, "", "express"], [186, 3, 1, "", "func"], [186, 2, 1, "", "simplify"], [186, 2, 1, "", "subs"], [186, 2, 1, "", "to_matrix"], [186, 2, 1, "", "xreplace"]], "sympy.physics.vector": [[188, 4, 1, "", "dynamicsymbols"], [190, 0, 0, "-", "functions"], [190, 0, 0, "-", "point"]], "sympy.physics.vector.fieldfunctions": [[187, 4, 1, "", "curl"], [187, 4, 1, "", "divergence"], [187, 4, 1, "", "gradient"], [187, 4, 1, "", "is_conservative"], [187, 4, 1, "", "is_solenoidal"], [187, 4, 1, "", "scalar_potential"], [187, 4, 1, "", "scalar_potential_difference"]], "sympy.physics.vector.frame": [[186, 1, 1, "", "CoordinateSym"], [186, 1, 1, "", "ReferenceFrame"]], "sympy.physics.vector.frame.ReferenceFrame": [[186, 2, 1, "", "ang_acc_in"], [186, 2, 1, "", "ang_vel_in"], [186, 2, 1, "", "dcm"], [186, 2, 1, "", "orient"], [186, 2, 1, "", "orient_axis"], [186, 2, 1, "", "orient_body_fixed"], [186, 2, 1, "", "orient_explicit"], [186, 2, 1, "", "orient_quaternion"], [186, 2, 1, "", "orient_space_fixed"], [186, 2, 1, "", "orientnew"], [186, 2, 1, "", "partial_velocity"], [186, 2, 1, "", "set_ang_acc"], [186, 2, 1, "", "set_ang_vel"], [186, 2, 1, "", "variable_map"], [186, 3, 1, "", "x"], [186, 3, 1, "", "y"], [186, 3, 1, "", "z"]], "sympy.physics.vector.functions": [[188, 4, 1, "", "cross"], [188, 4, 1, "", "dot"], [188, 4, 1, "", "express"], [190, 4, 1, "", "get_motion_params"], [190, 4, 1, "", "kinematic_equations"], [188, 4, 1, "", "outer"], [190, 4, 1, "", "partial_velocity"], [188, 4, 1, "", "time_derivative"]], "sympy.physics.vector.point": [[190, 1, 1, "", "Point"]], "sympy.physics.vector.point.Point": [[190, 2, 1, "", "a1pt_theory"], [190, 2, 1, "", "a2pt_theory"], [190, 2, 1, "", "acc"], [190, 2, 1, "", "locatenew"], [190, 2, 1, "", "partial_velocity"], [190, 2, 1, "", "pos_from"], [190, 2, 1, "", "set_acc"], [190, 2, 1, "", "set_pos"], [190, 2, 1, "", "set_vel"], [190, 2, 1, "", "v1pt_theory"], [190, 2, 1, "", "v2pt_theory"], [190, 2, 1, "", "vel"]], "sympy.physics.vector.printing": [[191, 4, 1, "", "init_vprinting"], [191, 4, 1, "", "vlatex"], [191, 4, 1, "", "vpprint"], [191, 4, 1, "", "vprint"]], "sympy.physics.vector.vector": [[186, 1, 1, "", "Vector"]], "sympy.physics.vector.vector.Vector": [[186, 2, 1, "", "angle_between"], [186, 2, 1, "", "applyfunc"], [186, 2, 1, "", "cross"], [186, 2, 1, "", "diff"], [186, 2, 1, "", "doit"], [186, 2, 1, "", "dot"], [186, 2, 1, "", "dt"], [186, 2, 1, "", "express"], [186, 2, 1, "", "free_dynamicsymbols"], [186, 2, 1, "", "free_symbols"], [186, 3, 1, "", "func"], [186, 2, 1, "", "magnitude"], [186, 2, 1, "", "normalize"], [186, 2, 1, "", "outer"], [186, 2, 1, "", "separate"], [186, 2, 1, "", "simplify"], [186, 2, 1, "", "subs"], [186, 2, 1, "", "to_matrix"], [186, 2, 1, "", "xreplace"]], "sympy.physics.wigner": [[196, 4, 1, "", "clebsch_gordan"], [196, 4, 1, "", "dot_rot_grad_Ynm"], [196, 4, 1, "", "gaunt"], [196, 4, 1, "", "racah"], [196, 4, 1, "", "real_gaunt"], [196, 4, 1, "", "wigner_3j"], [196, 4, 1, "", "wigner_6j"], [196, 4, 1, "", "wigner_9j"], [196, 4, 1, "", "wigner_d"], [196, 4, 1, "", "wigner_d_small"]], "sympy.plotting": [[197, 0, 0, "-", "plot"], [197, 0, 0, "-", "pygletplot"]], "sympy.plotting.plot": [[197, 1, 1, "", "BaseBackend"], [197, 1, 1, "", "BaseSeries"], [197, 1, 1, "", "Line2DBaseSeries"], [197, 1, 1, "", "Line3DBaseSeries"], [197, 1, 1, "", "LineOver1DRangeSeries"], [197, 1, 1, "", "MatplotlibBackend"], [197, 1, 1, "", "Parametric2DLineSeries"], [197, 1, 1, "", "Parametric3DLineSeries"], [197, 1, 1, "", "ParametricSurfaceSeries"], [197, 1, 1, "", "Plot"], [197, 1, 1, "", "PlotGrid"], [197, 1, 1, "", "SurfaceBaseSeries"], [197, 1, 1, "", "SurfaceOver2DRangeSeries"], [197, 1, 1, "", "TextBackend"], [197, 4, 1, "", "plot"], [197, 4, 1, "", "plot3d"], [197, 4, 1, "", "plot3d_parametric_line"], [197, 4, 1, "", "plot3d_parametric_surface"], [197, 4, 1, "", "plot_parametric"]], "sympy.plotting.plot.Line2DBaseSeries": [[197, 2, 1, "", "get_data"]], "sympy.plotting.plot.LineOver1DRangeSeries": [[197, 2, 1, "", "get_points"]], "sympy.plotting.plot.MatplotlibBackend": [[197, 2, 1, "", "get_segments"], [197, 2, 1, "", "process_series"]], "sympy.plotting.plot.Parametric2DLineSeries": [[197, 2, 1, "", "get_points"]], "sympy.plotting.plot.Plot": [[197, 2, 1, "", "append"], [197, 2, 1, "", "extend"]], "sympy.plotting.plot_implicit": [[197, 1, 1, "", "ImplicitSeries"], [197, 4, 1, "", "plot_implicit"]], "sympy.plotting.textplot": [[197, 4, 1, "", "textplot"]], "sympy.polys.agca.extensions": [[198, 1, 1, "", "ExtensionElement"], [198, 1, 1, "", "MonogenicFiniteExtension"]], "sympy.polys.agca.extensions.ExtensionElement": [[198, 2, 1, "", "inverse"]], "sympy.polys.agca.extensions.MonogenicFiniteExtension": [[198, 5, 1, "", "dtype"]], "sympy.polys.agca.homomorphisms": [[198, 1, 1, "", "ModuleHomomorphism"], [198, 4, 1, "", "homomorphism"]], "sympy.polys.agca.homomorphisms.ModuleHomomorphism": [[198, 2, 1, "", "image"], [198, 2, 1, "", "is_injective"], [198, 2, 1, "", "is_isomorphism"], [198, 2, 1, "", "is_surjective"], [198, 2, 1, "", "is_zero"], [198, 2, 1, "", "kernel"], [198, 2, 1, "", "quotient_codomain"], [198, 2, 1, "", "quotient_domain"], [198, 2, 1, "", "restrict_codomain"], [198, 2, 1, "", "restrict_domain"]], "sympy.polys.agca.ideals": [[198, 1, 1, "", "Ideal"]], "sympy.polys.agca.ideals.Ideal": [[198, 2, 1, "", "contains"], [198, 2, 1, "", "depth"], [198, 2, 1, "", "height"], [198, 2, 1, "", "intersect"], [198, 2, 1, "", "is_maximal"], [198, 2, 1, "", "is_primary"], [198, 2, 1, "", "is_prime"], [198, 2, 1, "", "is_principal"], [198, 2, 1, "", "is_radical"], [198, 2, 1, "", "is_whole_ring"], [198, 2, 1, "", "is_zero"], [198, 2, 1, "", "product"], [198, 2, 1, "", "quotient"], [198, 2, 1, "", "radical"], [198, 2, 1, "", "reduce_element"], [198, 2, 1, "", "saturate"], [198, 2, 1, "", "subset"], [198, 2, 1, "", "union"]], "sympy.polys.agca.modules": [[198, 1, 1, "", "FreeModule"], [198, 1, 1, "", "FreeModuleElement"], [198, 1, 1, "", "Module"], [198, 1, 1, "", "QuotientModule"], [198, 1, 1, "", "QuotientModuleElement"], [198, 1, 1, "", "SubModule"], [198, 1, 1, "", "SubQuotientModule"]], "sympy.polys.agca.modules.FreeModule": [[198, 2, 1, "", "basis"], [198, 2, 1, "", "convert"], [198, 5, 1, "", "dtype"], [198, 2, 1, "", "identity_hom"], [198, 2, 1, "", "is_submodule"], [198, 2, 1, "", "is_zero"], [198, 2, 1, "", "multiply_ideal"], [198, 2, 1, "", "quotient_module"]], "sympy.polys.agca.modules.Module": [[198, 2, 1, "", "contains"], [198, 2, 1, "", "convert"], [198, 2, 1, "", "identity_hom"], [198, 2, 1, "", "is_submodule"], [198, 2, 1, "", "is_zero"], [198, 2, 1, "", "multiply_ideal"], [198, 2, 1, "", "quotient_module"], [198, 2, 1, "", "submodule"], [198, 2, 1, "", "subset"]], "sympy.polys.agca.modules.QuotientModule": [[198, 2, 1, "", "convert"], [198, 5, 1, "", "dtype"], [198, 2, 1, "", "identity_hom"], [198, 2, 1, "", "is_submodule"], [198, 2, 1, "", "is_zero"], [198, 2, 1, "", "quotient_hom"], [198, 2, 1, "", "submodule"]], "sympy.polys.agca.modules.QuotientModuleElement": [[198, 2, 1, "", "eq"]], "sympy.polys.agca.modules.SubModule": [[198, 2, 1, "", "convert"], [198, 2, 1, "", "identity_hom"], [198, 2, 1, "", "in_terms_of_generators"], [198, 2, 1, "", "inclusion_hom"], [198, 2, 1, "", "intersect"], [198, 2, 1, "", "is_full_module"], [198, 2, 1, "", "is_submodule"], [198, 2, 1, "", "is_zero"], [198, 2, 1, "", "module_quotient"], [198, 2, 1, "", "multiply_ideal"], [198, 2, 1, "", "quotient_module"], [198, 2, 1, "", "reduce_element"], [198, 2, 1, "", "submodule"], [198, 2, 1, "", "syzygy_module"], [198, 2, 1, "", "union"]], "sympy.polys.agca.modules.SubQuotientModule": [[198, 2, 1, "", "is_full_module"], [198, 2, 1, "", "quotient_hom"]], "sympy.polys.appellseqs": [[207, 4, 1, "", "andre_poly"], [207, 4, 1, "", "bernoulli_c_poly"], [207, 4, 1, "", "bernoulli_poly"], [207, 4, 1, "", "euler_poly"], [207, 4, 1, "", "genocchi_poly"]], "sympy.polys.constructor": [[207, 4, 1, "", "construct_domain"]], "sympy.polys.densearith": [[204, 4, 1, "", "dmp_abs"], [204, 4, 1, "", "dmp_add"], [204, 4, 1, "", "dmp_add_ground"], [204, 4, 1, "", "dmp_add_mul"], [204, 4, 1, "", "dmp_add_term"], [204, 4, 1, "", "dmp_div"], [204, 4, 1, "", "dmp_expand"], [204, 4, 1, "", "dmp_exquo"], [204, 4, 1, "", "dmp_exquo_ground"], [204, 4, 1, "", "dmp_ff_div"], [204, 4, 1, "", "dmp_l1_norm"], [204, 4, 1, "", "dmp_max_norm"], [204, 4, 1, "", "dmp_mul"], [204, 4, 1, "", "dmp_mul_ground"], [204, 4, 1, "", "dmp_mul_term"], [204, 4, 1, "", "dmp_neg"], [204, 4, 1, "", "dmp_pdiv"], [204, 4, 1, "", "dmp_pexquo"], [204, 4, 1, "", "dmp_pow"], [204, 4, 1, "", "dmp_pquo"], [204, 4, 1, "", "dmp_prem"], [204, 4, 1, "", "dmp_quo"], [204, 4, 1, "", "dmp_quo_ground"], [204, 4, 1, "", "dmp_rem"], [204, 4, 1, "", "dmp_rr_div"], [204, 4, 1, "", "dmp_sqr"], [204, 4, 1, "", "dmp_sub"], [204, 4, 1, "", "dmp_sub_ground"], [204, 4, 1, "", "dmp_sub_mul"], [204, 4, 1, "", "dmp_sub_term"], [204, 4, 1, "", "dup_lshift"], [204, 4, 1, "", "dup_rshift"]], "sympy.polys.densebasic": [[204, 4, 1, "", "dmp_LC"], [204, 4, 1, "", "dmp_TC"], [204, 4, 1, "", "dmp_apply_pairs"], [204, 4, 1, "", "dmp_convert"], [204, 4, 1, "", "dmp_copy"], [204, 4, 1, "", "dmp_deflate"], [204, 4, 1, "", "dmp_degree"], [204, 4, 1, "", "dmp_degree_in"], [204, 4, 1, "", "dmp_degree_list"], [204, 4, 1, "", "dmp_eject"], [204, 4, 1, "", "dmp_exclude"], [204, 4, 1, "", "dmp_from_dict"], [204, 4, 1, "", "dmp_from_sympy"], [204, 4, 1, "", "dmp_ground"], [204, 4, 1, "", "dmp_ground_LC"], [204, 4, 1, "", "dmp_ground_TC"], [204, 4, 1, "", "dmp_ground_nth"], [204, 4, 1, "", "dmp_ground_p"], [204, 4, 1, "", "dmp_grounds"], [204, 4, 1, "", "dmp_include"], [204, 4, 1, "", "dmp_inflate"], [204, 4, 1, "", "dmp_inject"], [204, 4, 1, "", "dmp_list_terms"], [204, 4, 1, "", "dmp_multi_deflate"], [204, 4, 1, "", "dmp_negative_p"], [204, 4, 1, "", "dmp_nest"], [204, 4, 1, "", "dmp_normal"], [204, 4, 1, "", "dmp_nth"], [204, 4, 1, "", "dmp_one"], [204, 4, 1, "", "dmp_one_p"], [204, 4, 1, "", "dmp_permute"], [204, 4, 1, "", "dmp_positive_p"], [204, 4, 1, "", "dmp_raise"], [204, 4, 1, "", "dmp_slice"], [204, 4, 1, "", "dmp_strip"], [204, 4, 1, "", "dmp_swap"], [204, 4, 1, "", "dmp_terms_gcd"], [204, 4, 1, "", "dmp_to_dict"], [204, 4, 1, "", "dmp_to_tuple"], [204, 4, 1, "", "dmp_true_LT"], [204, 4, 1, "", "dmp_validate"], [204, 4, 1, "", "dmp_zero"], [204, 4, 1, "", "dmp_zero_p"], [204, 4, 1, "", "dmp_zeros"], [204, 4, 1, "", "dup_random"], [204, 4, 1, "", "dup_reverse"]], "sympy.polys.densetools": [[204, 4, 1, "", "dmp_clear_denoms"], [204, 4, 1, "", "dmp_compose"], [204, 4, 1, "", "dmp_diff"], [204, 4, 1, "", "dmp_diff_eval_in"], [204, 4, 1, "", "dmp_diff_in"], [204, 4, 1, "", "dmp_eval"], [204, 4, 1, "", "dmp_eval_in"], [204, 4, 1, "", "dmp_eval_tail"], [204, 4, 1, "", "dmp_ground_content"], [204, 4, 1, "", "dmp_ground_extract"], [204, 4, 1, "", "dmp_ground_monic"], [204, 4, 1, "", "dmp_ground_primitive"], [204, 4, 1, "", "dmp_ground_trunc"], [204, 4, 1, "", "dmp_integrate"], [204, 4, 1, "", "dmp_integrate_in"], [204, 4, 1, "", "dmp_lift"], [204, 4, 1, "", "dmp_revert"], [204, 4, 1, "", "dmp_trunc"], [204, 4, 1, "", "dup_content"], [204, 4, 1, "", "dup_decompose"], [204, 4, 1, "", "dup_extract"], [204, 4, 1, "", "dup_mirror"], [204, 4, 1, "", "dup_monic"], [204, 4, 1, "", "dup_primitive"], [204, 4, 1, "", "dup_real_imag"], [204, 4, 1, "", "dup_scale"], [204, 4, 1, "", "dup_shift"], [204, 4, 1, "", "dup_sign_variations"], [204, 4, 1, "", "dup_transform"]], "sympy.polys.dispersion": [[207, 4, 1, "", "dispersion"], [207, 4, 1, "", "dispersionset"]], "sympy.polys.distributedmodules": [[204, 4, 1, "", "sdm_LC"], [204, 4, 1, "", "sdm_LM"], [204, 4, 1, "", "sdm_LT"], [204, 4, 1, "", "sdm_add"], [204, 4, 1, "", "sdm_deg"], [204, 4, 1, "", "sdm_ecart"], [204, 4, 1, "", "sdm_from_dict"], [204, 4, 1, "", "sdm_from_vector"], [204, 4, 1, "", "sdm_groebner"], [204, 4, 1, "", "sdm_monomial_deg"], [204, 4, 1, "", "sdm_monomial_divides"], [204, 4, 1, "", "sdm_monomial_mul"], [204, 4, 1, "", "sdm_mul_term"], [204, 4, 1, "", "sdm_nf_mora"], [204, 4, 1, "", "sdm_spoly"], [204, 4, 1, "", "sdm_to_dict"], [204, 4, 1, "", "sdm_to_vector"], [204, 4, 1, "", "sdm_zero"]], "sympy.polys.domains": [[202, 1, 1, "", "AlgebraicField"], [202, 1, 1, "", "ComplexField"], [202, 1, 1, "", "ExpressionDomain"], [202, 1, 1, "", "FiniteField"], [202, 1, 1, "", "FractionField"], [202, 1, 1, "", "GMPYFiniteField"], [202, 1, 1, "", "GMPYIntegerRing"], [202, 1, 1, "", "GMPYRationalField"], [202, 1, 1, "", "IntegerRing"], [202, 1, 1, "", "PolynomialRing"], [202, 1, 1, "", "PythonFiniteField"], [202, 1, 1, "", "PythonIntegerRing"], [202, 1, 1, "", "PythonRationalField"], [202, 1, 1, "", "RationalField"], [202, 1, 1, "", "RealField"]], "sympy.polys.domains.AlgebraicField": [[202, 2, 1, "", "algebraic_field"], [202, 2, 1, "", "denom"], [202, 2, 1, "", "discriminant"], [202, 5, 1, "", "dtype"], [202, 5, 1, "", "ext"], [202, 2, 1, "", "from_AlgebraicField"], [202, 2, 1, "", "from_GaussianIntegerRing"], [202, 2, 1, "", "from_GaussianRationalField"], [202, 2, 1, "", "from_QQ"], [202, 2, 1, "", "from_QQ_gmpy"], [202, 2, 1, "", "from_QQ_python"], [202, 2, 1, "", "from_RealField"], [202, 2, 1, "", "from_ZZ"], [202, 2, 1, "", "from_ZZ_gmpy"], [202, 2, 1, "", "from_ZZ_python"], [202, 2, 1, "", "from_sympy"], [202, 2, 1, "", "galois_group"], [202, 2, 1, "", "get_ring"], [202, 2, 1, "", "integral_basis"], [202, 2, 1, "", "is_negative"], [202, 2, 1, "", "is_nonnegative"], [202, 2, 1, "", "is_nonpositive"], [202, 2, 1, "", "is_positive"], [202, 2, 1, "", "maximal_order"], [202, 5, 1, "", "mod"], [202, 2, 1, "", "numer"], [202, 5, 1, "", "orig_ext"], [202, 2, 1, "", "primes_above"], [202, 2, 1, "", "to_alg_num"], [202, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ComplexField": [[202, 2, 1, "", "almosteq"], [202, 2, 1, "", "from_sympy"], [202, 2, 1, "", "gcd"], [202, 2, 1, "", "get_exact"], [202, 2, 1, "", "get_ring"], [202, 2, 1, "", "is_negative"], [202, 2, 1, "", "is_nonnegative"], [202, 2, 1, "", "is_nonpositive"], [202, 2, 1, "", "is_positive"], [202, 2, 1, "", "lcm"], [202, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ExpressionDomain": [[202, 1, 1, "", "Expression"], [202, 2, 1, "", "denom"], [202, 5, 1, "", "dtype"], [202, 2, 1, "", "from_ExpressionDomain"], [202, 2, 1, "", "from_FractionField"], [202, 2, 1, "", "from_GaussianIntegerRing"], [202, 2, 1, "", "from_GaussianRationalField"], [202, 2, 1, "", "from_PolynomialRing"], [202, 2, 1, "", "from_QQ"], [202, 2, 1, "", "from_QQ_gmpy"], [202, 2, 1, "", "from_QQ_python"], [202, 2, 1, "", "from_RealField"], [202, 2, 1, "", "from_ZZ"], [202, 2, 1, "", "from_ZZ_gmpy"], [202, 2, 1, "", "from_ZZ_python"], [202, 2, 1, "", "from_sympy"], [202, 2, 1, "", "get_field"], [202, 2, 1, "", "get_ring"], [202, 2, 1, "", "is_negative"], [202, 2, 1, "", "is_nonnegative"], [202, 2, 1, "", "is_nonpositive"], [202, 2, 1, "", "is_positive"], [202, 2, 1, "", "numer"], [202, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FiniteField": [[202, 2, 1, "", "characteristic"], [202, 2, 1, "", "from_FF"], [202, 2, 1, "", "from_FF_gmpy"], [202, 2, 1, "", "from_FF_python"], [202, 2, 1, "", "from_QQ"], [202, 2, 1, "", "from_QQ_gmpy"], [202, 2, 1, "", "from_QQ_python"], [202, 2, 1, "", "from_RealField"], [202, 2, 1, "", "from_ZZ"], [202, 2, 1, "", "from_ZZ_gmpy"], [202, 2, 1, "", "from_ZZ_python"], [202, 2, 1, "", "from_sympy"], [202, 2, 1, "", "get_field"], [202, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FractionField": [[202, 2, 1, "", "denom"], [202, 2, 1, "", "factorial"], [202, 2, 1, "", "from_AlgebraicField"], [202, 2, 1, "", "from_ComplexField"], [202, 2, 1, "", "from_FractionField"], [202, 2, 1, "", "from_GaussianIntegerRing"], [202, 2, 1, "", "from_GaussianRationalField"], [202, 2, 1, "", "from_PolynomialRing"], [202, 2, 1, "", "from_QQ"], [202, 2, 1, "", "from_QQ_gmpy"], [202, 2, 1, "", "from_QQ_python"], [202, 2, 1, "", "from_RealField"], [202, 2, 1, "", "from_ZZ"], [202, 2, 1, "", "from_ZZ_gmpy"], [202, 2, 1, "", "from_ZZ_python"], [202, 2, 1, "", "from_sympy"], [202, 2, 1, "", "get_ring"], [202, 2, 1, "", "is_negative"], [202, 2, 1, "", "is_nonnegative"], [202, 2, 1, "", "is_nonpositive"], [202, 2, 1, "", "is_positive"], [202, 2, 1, "", "numer"], [202, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYIntegerRing": [[202, 2, 1, "", "factorial"], [202, 2, 1, "", "from_FF_gmpy"], [202, 2, 1, "", "from_FF_python"], [202, 2, 1, "", "from_QQ"], [202, 2, 1, "", "from_QQ_gmpy"], [202, 2, 1, "", "from_QQ_python"], [202, 2, 1, "", "from_RealField"], [202, 2, 1, "", "from_ZZ_gmpy"], [202, 2, 1, "", "from_ZZ_python"], [202, 2, 1, "", "from_sympy"], [202, 2, 1, "", "gcd"], [202, 2, 1, "", "gcdex"], [202, 2, 1, "", "lcm"], [202, 2, 1, "", "sqrt"], [202, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYRationalField": [[202, 2, 1, "", "denom"], [202, 2, 1, "", "div"], [202, 2, 1, "", "exquo"], [202, 2, 1, "", "factorial"], [202, 2, 1, "", "from_GaussianRationalField"], [202, 2, 1, "", "from_QQ_gmpy"], [202, 2, 1, "", "from_QQ_python"], [202, 2, 1, "", "from_RealField"], [202, 2, 1, "", "from_ZZ_gmpy"], [202, 2, 1, "", "from_ZZ_python"], [202, 2, 1, "", "from_sympy"], [202, 2, 1, "", "get_ring"], [202, 2, 1, "", "numer"], [202, 2, 1, "", "quo"], [202, 2, 1, "", "rem"], [202, 2, 1, "", "to_sympy"]], "sympy.polys.domains.IntegerRing": [[202, 2, 1, "", "algebraic_field"], [202, 2, 1, "", "factorial"], [202, 2, 1, "", "from_AlgebraicField"], [202, 2, 1, "", "from_FF"], [202, 2, 1, "", "from_FF_gmpy"], [202, 2, 1, "", "from_FF_python"], [202, 2, 1, "", "from_QQ"], [202, 2, 1, "", "from_QQ_gmpy"], [202, 2, 1, "", "from_QQ_python"], [202, 2, 1, "", "from_RealField"], [202, 2, 1, "", "from_ZZ"], [202, 2, 1, "", "from_ZZ_gmpy"], [202, 2, 1, "", "from_ZZ_python"], [202, 2, 1, "", "from_sympy"], [202, 2, 1, "", "gcd"], [202, 2, 1, "", "gcdex"], [202, 2, 1, "", "get_field"], [202, 2, 1, "", "lcm"], [202, 2, 1, "", "log"], [202, 2, 1, "", "sqrt"], [202, 2, 1, "", "to_sympy"]], "sympy.polys.domains.PolynomialRing": [[202, 2, 1, "", "factorial"], [202, 2, 1, "", "from_AlgebraicField"], [202, 2, 1, "", "from_ComplexField"], [202, 2, 1, "", "from_FractionField"], [202, 2, 1, "", "from_GaussianIntegerRing"], [202, 2, 1, "", "from_GaussianRationalField"], [202, 2, 1, "", "from_GlobalPolynomialRing"], [202, 2, 1, "", "from_PolynomialRing"], [202, 2, 1, "", "from_QQ"], [202, 2, 1, "", "from_QQ_gmpy"], [202, 2, 1, "", "from_QQ_python"], [202, 2, 1, "", "from_RealField"], [202, 2, 1, "", "from_ZZ"], [202, 2, 1, "", "from_ZZ_gmpy"], [202, 2, 1, "", "from_ZZ_python"], [202, 2, 1, "", "from_sympy"], [202, 2, 1, "", "gcd"], [202, 2, 1, "", "gcdex"], [202, 2, 1, "", "get_field"], [202, 2, 1, "", "is_negative"], [202, 2, 1, "", "is_nonnegative"], [202, 2, 1, "", "is_nonpositive"], [202, 2, 1, "", "is_positive"], [202, 2, 1, "", "is_unit"], [202, 2, 1, "", "lcm"], [202, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RationalField": [[202, 2, 1, "", "algebraic_field"], [202, 2, 1, "", "denom"], [202, 2, 1, "", "div"], [202, 2, 1, "", "exquo"], [202, 2, 1, "", "from_AlgebraicField"], [202, 2, 1, "", "from_GaussianRationalField"], [202, 2, 1, "", "from_QQ"], [202, 2, 1, "", "from_QQ_gmpy"], [202, 2, 1, "", "from_QQ_python"], [202, 2, 1, "", "from_RealField"], [202, 2, 1, "", "from_ZZ"], [202, 2, 1, "", "from_ZZ_gmpy"], [202, 2, 1, "", "from_ZZ_python"], [202, 2, 1, "", "from_sympy"], [202, 2, 1, "", "get_ring"], [202, 2, 1, "", "numer"], [202, 2, 1, "", "quo"], [202, 2, 1, "", "rem"], [202, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RealField": [[202, 2, 1, "", "almosteq"], [202, 2, 1, "", "from_sympy"], [202, 2, 1, "", "gcd"], [202, 2, 1, "", "get_exact"], [202, 2, 1, "", "get_ring"], [202, 2, 1, "", "lcm"], [202, 2, 1, "", "to_rational"], [202, 2, 1, "", "to_sympy"]], "sympy.polys.domains.compositedomain": [[202, 1, 1, "", "CompositeDomain"]], "sympy.polys.domains.compositedomain.CompositeDomain": [[202, 2, 1, "", "drop"], [202, 2, 1, "", "inject"]], "sympy.polys.domains.domain": [[202, 1, 1, "", "Domain"]], "sympy.polys.domains.domain.Domain": [[202, 2, 1, "", "abs"], [202, 2, 1, "", "add"], [202, 2, 1, "", "alg_field_from_poly"], [202, 2, 1, "", "algebraic_field"], [202, 2, 1, "", "almosteq"], [202, 2, 1, "", "characteristic"], [202, 2, 1, "", "cofactors"], [202, 2, 1, "", "convert"], [202, 2, 1, "", "convert_from"], [202, 2, 1, "", "cyclotomic_field"], [202, 2, 1, "", "denom"], [202, 2, 1, "", "div"], [202, 2, 1, "", "drop"], [202, 5, 1, "", "dtype"], [202, 2, 1, "", "evalf"], [202, 2, 1, "", "exquo"], [202, 2, 1, "", "frac_field"], [202, 2, 1, "", "from_AlgebraicField"], [202, 2, 1, "", "from_ComplexField"], [202, 2, 1, "", "from_ExpressionDomain"], [202, 2, 1, "", "from_ExpressionRawDomain"], [202, 2, 1, "", "from_FF"], [202, 2, 1, "", "from_FF_gmpy"], [202, 2, 1, "", "from_FF_python"], [202, 2, 1, "", "from_FractionField"], [202, 2, 1, "", "from_GlobalPolynomialRing"], [202, 2, 1, "", "from_MonogenicFiniteExtension"], [202, 2, 1, "", "from_PolynomialRing"], [202, 2, 1, "", "from_QQ_gmpy"], [202, 2, 1, "", "from_QQ_python"], [202, 2, 1, "", "from_RealField"], [202, 2, 1, "", "from_ZZ_gmpy"], [202, 2, 1, "", "from_ZZ_python"], [202, 2, 1, "", "from_sympy"], [202, 2, 1, "", "gcd"], [202, 2, 1, "", "gcdex"], [202, 2, 1, "", "get_exact"], [202, 2, 1, "", "get_field"], [202, 2, 1, "", "get_ring"], [202, 2, 1, "", "half_gcdex"], [202, 5, 1, "", "has_assoc_Field"], [202, 5, 1, "", "has_assoc_Ring"], [202, 2, 1, "", "inject"], [202, 2, 1, "", "invert"], [202, 5, 1, "", "is_Field"], [202, 5, 1, "", "is_PID"], [202, 5, 1, "", "is_Ring"], [202, 2, 1, "", "is_negative"], [202, 2, 1, "", "is_nonnegative"], [202, 2, 1, "", "is_nonpositive"], [202, 2, 1, "", "is_one"], [202, 2, 1, "", "is_positive"], [202, 2, 1, "", "is_zero"], [202, 2, 1, "", "lcm"], [202, 2, 1, "", "log"], [202, 2, 1, "", "map"], [202, 2, 1, "", "mul"], [202, 2, 1, "", "n"], [202, 2, 1, "", "neg"], [202, 2, 1, "", "numer"], [202, 2, 1, "", "of_type"], [202, 2, 1, "", "old_frac_field"], [202, 2, 1, "", "old_poly_ring"], [202, 5, 1, "", "one"], [202, 2, 1, "", "poly_ring"], [202, 2, 1, "", "pos"], [202, 2, 1, "", "pow"], [202, 2, 1, "", "quo"], [202, 2, 1, "", "rem"], [202, 2, 1, "", "revert"], [202, 2, 1, "", "sqrt"], [202, 2, 1, "", "sub"], [202, 2, 1, "", "to_sympy"], [202, 3, 1, "", "tp"], [202, 2, 1, "", "unify"], [202, 5, 1, "", "zero"]], "sympy.polys.domains.domainelement": [[202, 1, 1, "", "DomainElement"]], "sympy.polys.domains.domainelement.DomainElement": [[202, 2, 1, "", "parent"]], "sympy.polys.domains.expressiondomain.ExpressionDomain": [[202, 1, 1, "", "Expression"]], "sympy.polys.domains.field": [[202, 1, 1, "", "Field"]], "sympy.polys.domains.field.Field": [[202, 2, 1, "", "div"], [202, 2, 1, "", "exquo"], [202, 2, 1, "", "gcd"], [202, 2, 1, "", "get_field"], [202, 2, 1, "", "get_ring"], [202, 2, 1, "", "is_unit"], [202, 2, 1, "", "lcm"], [202, 2, 1, "", "quo"], [202, 2, 1, "", "rem"], [202, 2, 1, "", "revert"]], "sympy.polys.domains.gaussiandomains": [[202, 1, 1, "", "GaussianDomain"], [202, 1, 1, "", "GaussianElement"], [202, 1, 1, "", "GaussianInteger"], [202, 1, 1, "", "GaussianIntegerRing"], [202, 1, 1, "", "GaussianRational"], [202, 1, 1, "", "GaussianRationalField"]], "sympy.polys.domains.gaussiandomains.GaussianDomain": [[202, 2, 1, "", "from_AlgebraicField"], [202, 2, 1, "", "from_QQ"], [202, 2, 1, "", "from_QQ_gmpy"], [202, 2, 1, "", "from_QQ_python"], [202, 2, 1, "", "from_ZZ"], [202, 2, 1, "", "from_ZZ_gmpy"], [202, 2, 1, "", "from_ZZ_python"], [202, 2, 1, "", "from_sympy"], [202, 2, 1, "", "inject"], [202, 2, 1, "", "is_negative"], [202, 2, 1, "", "is_nonnegative"], [202, 2, 1, "", "is_nonpositive"], [202, 2, 1, "", "is_positive"], [202, 2, 1, "", "to_sympy"]], "sympy.polys.domains.gaussiandomains.GaussianElement": [[202, 2, 1, "", "new"], [202, 2, 1, "", "parent"], [202, 2, 1, "", "quadrant"]], "sympy.polys.domains.gaussiandomains.GaussianIntegerRing": [[202, 5, 1, "", "dtype"], [202, 2, 1, "", "from_GaussianIntegerRing"], [202, 2, 1, "", "from_GaussianRationalField"], [202, 2, 1, "", "gcd"], [202, 2, 1, "", "get_field"], [202, 2, 1, "", "get_ring"], [202, 2, 1, "", "lcm"], [202, 2, 1, "", "normalize"]], "sympy.polys.domains.gaussiandomains.GaussianRationalField": [[202, 2, 1, "", "as_AlgebraicField"], [202, 2, 1, "", "denom"], [202, 5, 1, "", "dtype"], [202, 2, 1, "", "from_GaussianIntegerRing"], [202, 2, 1, "", "from_GaussianRationalField"], [202, 2, 1, "", "get_field"], [202, 2, 1, "", "get_ring"], [202, 2, 1, "", "numer"]], "sympy.polys.domains.mpelements": [[202, 1, 1, "", "ComplexElement"], [202, 1, 1, "", "RealElement"]], "sympy.polys.domains.quotientring": [[202, 1, 1, "", "QuotientRing"]], "sympy.polys.domains.ring": [[202, 1, 1, "", "Ring"]], "sympy.polys.domains.ring.Ring": [[202, 2, 1, "", "denom"], [202, 2, 1, "", "div"], [202, 2, 1, "", "exquo"], [202, 2, 1, "", "free_module"], [202, 2, 1, "", "get_ring"], [202, 2, 1, "", "ideal"], [202, 2, 1, "", "invert"], [202, 2, 1, "", "numer"], [202, 2, 1, "", "quo"], [202, 2, 1, "", "quotient_ring"], [202, 2, 1, "", "rem"], [202, 2, 1, "", "revert"]], "sympy.polys.domains.simpledomain": [[202, 1, 1, "", "SimpleDomain"]], "sympy.polys.domains.simpledomain.SimpleDomain": [[202, 2, 1, "", "inject"]], "sympy.polys.euclidtools": [[204, 4, 1, "", "dmp_cancel"], [204, 4, 1, "", "dmp_content"], [204, 4, 1, "", "dmp_discriminant"], [204, 4, 1, "", "dmp_euclidean_prs"], [204, 4, 1, "", "dmp_ff_prs_gcd"], [204, 4, 1, "", "dmp_gcd"], [204, 4, 1, "", "dmp_gcdex"], [204, 4, 1, "", "dmp_half_gcdex"], [204, 4, 1, "", "dmp_inner_gcd"], [204, 4, 1, "", "dmp_inner_subresultants"], [204, 4, 1, "", "dmp_invert"], [204, 4, 1, "", "dmp_lcm"], [204, 4, 1, "", "dmp_primitive"], [204, 4, 1, "", "dmp_primitive_prs"], [204, 4, 1, "", "dmp_prs_resultant"], [204, 4, 1, "", "dmp_qq_collins_resultant"], [204, 4, 1, "", "dmp_qq_heu_gcd"], [204, 4, 1, "", "dmp_resultant"], [204, 4, 1, "", "dmp_rr_prs_gcd"], [204, 4, 1, "", "dmp_subresultants"], [204, 4, 1, "", "dmp_zz_collins_resultant"], [204, 4, 1, "", "dmp_zz_heu_gcd"], [204, 4, 1, "", "dmp_zz_modular_resultant"]], "sympy.polys.factortools": [[204, 4, 1, "", "dmp_ext_factor"], [204, 4, 1, "", "dmp_factor_list"], [204, 4, 1, "", "dmp_factor_list_include"], [204, 4, 1, "", "dmp_irreducible_p"], [204, 4, 1, "", "dmp_trial_division"], [204, 4, 1, "", "dmp_zz_diophantine"], [204, 4, 1, "", "dmp_zz_factor"], [204, 4, 1, "", "dmp_zz_mignotte_bound"], [204, 4, 1, "", "dmp_zz_wang"], [204, 4, 1, "", "dmp_zz_wang_hensel_lifting"], [204, 4, 1, "", "dmp_zz_wang_lead_coeffs"], [204, 4, 1, "", "dmp_zz_wang_non_divisors"], [204, 4, 1, "", "dmp_zz_wang_test_points"], [204, 4, 1, "", "dup_cyclotomic_p"], [204, 4, 1, "", "dup_gf_factor"], [204, 4, 1, "", "dup_zz_cyclotomic_factor"], [204, 4, 1, "", "dup_zz_cyclotomic_poly"], [204, 4, 1, "", "dup_zz_factor"], [204, 4, 1, "", "dup_zz_factor_sqf"], [204, 4, 1, "", "dup_zz_hensel_lift"], [204, 4, 1, "", "dup_zz_hensel_step"], [204, 4, 1, "", "dup_zz_irreducible_p"], [204, 4, 1, "", "dup_zz_zassenhaus"]], "sympy.polys.fglmtools": [[204, 4, 1, "", "matrix_fglm"]], "sympy.polys.fields": [[202, 1, 1, "", "FracElement"], [202, 1, 1, "", "FracField"], [202, 4, 1, "", "field"], [202, 4, 1, "", "sfield"], [202, 4, 1, "", "vfield"], [202, 4, 1, "", "xfield"]], "sympy.polys.fields.FracElement": [[202, 2, 1, "", "diff"]], "sympy.polys.galoistools": [[204, 4, 1, "", "gf_LC"], [204, 4, 1, "", "gf_Qbasis"], [204, 4, 1, "", "gf_Qmatrix"], [204, 4, 1, "", "gf_TC"], [204, 4, 1, "", "gf_add"], [204, 4, 1, "", "gf_add_ground"], [204, 4, 1, "", "gf_add_mul"], [204, 4, 1, "", "gf_berlekamp"], [204, 4, 1, "", "gf_cofactors"], [204, 4, 1, "", "gf_compose"], [204, 4, 1, "", "gf_compose_mod"], [204, 4, 1, "", "gf_crt"], [204, 4, 1, "", "gf_crt1"], [204, 4, 1, "", "gf_crt2"], [204, 4, 1, "", "gf_csolve"], [204, 4, 1, "", "gf_degree"], [204, 4, 1, "", "gf_diff"], [204, 4, 1, "", "gf_div"], [204, 4, 1, "", "gf_eval"], [204, 4, 1, "", "gf_expand"], [204, 4, 1, "", "gf_exquo"], [204, 4, 1, "", "gf_factor"], [204, 4, 1, "", "gf_factor_sqf"], [204, 4, 1, "", "gf_from_dict"], [204, 4, 1, "", "gf_from_int_poly"], [204, 4, 1, "", "gf_gcd"], [204, 4, 1, "", "gf_gcdex"], [204, 4, 1, "", "gf_int"], [204, 4, 1, "", "gf_irreducible"], [204, 4, 1, "", "gf_irreducible_p"], [204, 4, 1, "", "gf_lcm"], [204, 4, 1, "", "gf_lshift"], [204, 4, 1, "", "gf_monic"], [204, 4, 1, "", "gf_mul"], [204, 4, 1, "", "gf_mul_ground"], [204, 4, 1, "", "gf_multi_eval"], [204, 4, 1, "", "gf_neg"], [204, 4, 1, "", "gf_normal"], [204, 4, 1, "", "gf_pow"], [204, 4, 1, "", "gf_pow_mod"], [204, 4, 1, "", "gf_quo"], [204, 4, 1, "", "gf_quo_ground"], [204, 4, 1, "", "gf_random"], [204, 4, 1, "", "gf_rem"], [204, 4, 1, "", "gf_rshift"], [204, 4, 1, "", "gf_shoup"], [204, 4, 1, "", "gf_sqf_list"], [204, 4, 1, "", "gf_sqf_p"], [204, 4, 1, "", "gf_sqf_part"], [204, 4, 1, "", "gf_sqr"], [204, 4, 1, "", "gf_strip"], [204, 4, 1, "", "gf_sub"], [204, 4, 1, "", "gf_sub_ground"], [204, 4, 1, "", "gf_sub_mul"], [204, 4, 1, "", "gf_to_dict"], [204, 4, 1, "", "gf_to_int_poly"], [204, 4, 1, "", "gf_trace_map"], [204, 4, 1, "", "gf_trunc"], [204, 4, 1, "", "gf_value"], [204, 4, 1, "", "gf_zassenhaus"]], "sympy.polys.groebnertools": [[204, 4, 1, "", "groebner"], [204, 4, 1, "", "is_groebner"], [204, 4, 1, "", "is_minimal"], [204, 4, 1, "", "is_reduced"], [204, 4, 1, "", "red_groebner"], [204, 4, 1, "", "spoly"]], "sympy.polys.matrices.ddm": [[200, 1, 1, "", "DDM"]], "sympy.polys.matrices.ddm.DDM": [[200, 2, 1, "", "add"], [200, 2, 1, "", "charpoly"], [200, 2, 1, "", "det"], [200, 2, 1, "", "hstack"], [200, 2, 1, "", "inv"], [200, 2, 1, "", "is_lower"], [200, 2, 1, "", "is_upper"], [200, 2, 1, "", "is_zero_matrix"], [200, 2, 1, "", "lu"], [200, 2, 1, "", "lu_solve"], [200, 2, 1, "", "matmul"], [200, 2, 1, "", "neg"], [200, 2, 1, "", "rref"], [200, 2, 1, "", "scc"], [200, 2, 1, "", "sub"], [200, 2, 1, "", "vstack"]], "sympy.polys.matrices.domainmatrix": [[200, 1, 1, "", "DomainMatrix"]], "sympy.polys.matrices.domainmatrix.DomainMatrix": [[200, 2, 1, "", "add"], [200, 2, 1, "", "charpoly"], [200, 2, 1, "", "columnspace"], [200, 2, 1, "", "convert_to"], [200, 2, 1, "", "det"], [200, 2, 1, "", "diag"], [200, 2, 1, "", "eye"], [200, 2, 1, "", "from_Matrix"], [200, 2, 1, "", "from_dict_sympy"], [200, 2, 1, "", "from_list"], [200, 2, 1, "", "from_list_sympy"], [200, 2, 1, "", "from_rep"], [200, 2, 1, "", "hstack"], [200, 2, 1, "", "inv"], [200, 3, 1, "", "is_lower"], [200, 3, 1, "", "is_upper"], [200, 2, 1, "", "lll"], [200, 2, 1, "", "lll_transform"], [200, 2, 1, "", "lu"], [200, 2, 1, "", "lu_solve"], [200, 2, 1, "", "matmul"], [200, 2, 1, "", "mul"], [200, 2, 1, "", "neg"], [200, 2, 1, "", "nullspace"], [200, 2, 1, "", "ones"], [200, 2, 1, "", "pow"], [200, 2, 1, "", "rowspace"], [200, 2, 1, "", "rref"], [200, 2, 1, "", "scc"], [200, 2, 1, "", "sub"], [200, 2, 1, "", "to_Matrix"], [200, 2, 1, "", "to_dense"], [200, 2, 1, "", "to_field"], [200, 2, 1, "", "to_sparse"], [200, 2, 1, "", "transpose"], [200, 2, 1, "", "unify"], [200, 2, 1, "", "vstack"], [200, 2, 1, "", "zeros"]], "sympy.polys.matrices.normalforms": [[200, 4, 1, "", "hermite_normal_form"], [200, 4, 1, "", "smith_normal_form"]], "sympy.polys.matrices.sdm": [[200, 1, 1, "", "SDM"]], "sympy.polys.matrices.sdm.SDM": [[200, 2, 1, "", "add"], [200, 2, 1, "", "charpoly"], [200, 2, 1, "", "convert_to"], [200, 2, 1, "", "copy"], [200, 2, 1, "", "det"], [200, 2, 1, "", "eye"], [200, 2, 1, "", "from_ddm"], [200, 2, 1, "", "from_list"], [200, 2, 1, "", "hstack"], [200, 2, 1, "", "inv"], [200, 2, 1, "", "is_lower"], [200, 2, 1, "", "is_upper"], [200, 2, 1, "", "is_zero_matrix"], [200, 2, 1, "", "lu"], [200, 2, 1, "", "lu_solve"], [200, 2, 1, "", "matmul"], [200, 2, 1, "", "mul"], [200, 2, 1, "", "neg"], [200, 2, 1, "", "new"], [200, 2, 1, "", "nullspace"], [200, 2, 1, "", "rref"], [200, 2, 1, "", "scc"], [200, 2, 1, "", "sub"], [200, 2, 1, "", "to_ddm"], [200, 2, 1, "", "to_list"], [200, 2, 1, "", "transpose"], [200, 2, 1, "", "vstack"], [200, 2, 1, "", "zeros"]], "sympy.polys.modulargcd": [[204, 4, 1, "", "_modgcd_multivariate_p"], [204, 4, 1, "", "func_field_modgcd"], [204, 4, 1, "", "modgcd_bivariate"], [204, 4, 1, "", "modgcd_multivariate"], [204, 4, 1, "", "modgcd_univariate"]], "sympy.polys.monomials": [[207, 1, 1, "", "Monomial"], [207, 4, 1, "", "itermonomials"], [207, 4, 1, "", "monomial_count"]], "sympy.polys.monomials.Monomial": [[207, 2, 1, "", "as_expr"], [207, 2, 1, "", "gcd"], [207, 2, 1, "", "lcm"]], "sympy.polys.numberfields.basis": [[206, 4, 1, "", "round_two"]], "sympy.polys.numberfields.galoisgroups": [[206, 4, 1, "", "galois_group"]], "sympy.polys.numberfields.minpoly": [[206, 4, 1, "", "minimal_polynomial"], [206, 4, 1, "", "minpoly"]], "sympy.polys.numberfields": [[206, 0, 0, "-", "modules"], [206, 0, 0, "-", "subfield"]], "sympy.polys.numberfields.modules": [[206, 1, 1, "", "EndomorphismRing"], [206, 1, 1, "", "InnerEndomorphism"], [206, 1, 1, "", "Module"], [206, 1, 1, "", "ModuleElement"], [206, 1, 1, "", "ModuleEndomorphism"], [206, 1, 1, "", "ModuleHomomorphism"], [206, 1, 1, "", "PowerBasis"], [206, 1, 1, "", "PowerBasisElement"], [206, 1, 1, "", "Submodule"], [206, 4, 1, "", "find_min_poly"], [206, 4, 1, "", "make_mod_elt"]], "sympy.polys.numberfields.modules.EndomorphismRing": [[206, 2, 1, "", "__init__"], [206, 2, 1, "", "inner_endomorphism"], [206, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.InnerEndomorphism": [[206, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.Module": [[206, 2, 1, "", "__call__"], [206, 2, 1, "", "ancestors"], [206, 2, 1, "", "basis_elements"], [206, 2, 1, "", "element_from_rational"], [206, 2, 1, "", "endomorphism_ring"], [206, 2, 1, "", "is_compat_col"], [206, 2, 1, "", "mult_tab"], [206, 3, 1, "", "n"], [206, 2, 1, "", "nearest_common_ancestor"], [206, 3, 1, "", "number_field"], [206, 2, 1, "", "one"], [206, 3, 1, "", "parent"], [206, 2, 1, "", "power_basis_ancestor"], [206, 2, 1, "", "represent"], [206, 2, 1, "", "starts_with_unity"], [206, 2, 1, "", "submodule_from_gens"], [206, 2, 1, "", "submodule_from_matrix"], [206, 2, 1, "", "whole_submodule"], [206, 2, 1, "", "zero"]], "sympy.polys.numberfields.modules.ModuleElement": [[206, 3, 1, "", "QQ_col"], [206, 2, 1, "", "__add__"], [206, 2, 1, "", "__init__"], [206, 2, 1, "", "__mod__"], [206, 2, 1, "", "__mul__"], [206, 2, 1, "", "column"], [206, 2, 1, "", "equiv"], [206, 2, 1, "", "from_int_list"], [206, 2, 1, "", "is_compat"], [206, 3, 1, "", "n"], [206, 2, 1, "", "over_power_basis"], [206, 2, 1, "", "reduced"], [206, 2, 1, "", "reduced_mod_p"], [206, 2, 1, "", "to_ancestor"], [206, 2, 1, "", "to_parent"], [206, 2, 1, "", "unify"]], "sympy.polys.numberfields.modules.ModuleEndomorphism": [[206, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.ModuleHomomorphism": [[206, 2, 1, "", "__init__"], [206, 2, 1, "", "kernel"], [206, 2, 1, "", "matrix"]], "sympy.polys.numberfields.modules.PowerBasis": [[206, 2, 1, "", "__init__"], [206, 2, 1, "", "element_from_ANP"], [206, 2, 1, "", "element_from_alg_num"], [206, 2, 1, "", "element_from_poly"], [206, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.PowerBasisElement": [[206, 3, 1, "", "T"], [206, 2, 1, "", "as_expr"], [206, 3, 1, "", "generator"], [206, 3, 1, "", "is_rational"], [206, 2, 1, "", "norm"], [206, 2, 1, "", "numerator"], [206, 2, 1, "", "poly"], [206, 2, 1, "", "to_ANP"], [206, 2, 1, "", "to_alg_num"]], "sympy.polys.numberfields.modules.Submodule": [[206, 3, 1, "", "QQ_matrix"], [206, 2, 1, "", "__init__"], [206, 2, 1, "", "add"], [206, 2, 1, "", "basis_element_pullbacks"], [206, 2, 1, "", "discard_before"], [206, 2, 1, "", "mul"], [206, 2, 1, "", "reduce_element"], [206, 2, 1, "", "reduced"], [206, 2, 1, "", "represent"]], "sympy.polys.numberfields.primes": [[206, 1, 1, "", "PrimeIdeal"], [206, 4, 1, "", "prime_decomp"], [206, 4, 1, "", "prime_valuation"]], "sympy.polys.numberfields.primes.PrimeIdeal": [[206, 2, 1, "", "__add__"], [206, 2, 1, "", "__init__"], [206, 2, 1, "", "__mul__"], [206, 2, 1, "", "as_submodule"], [206, 3, 1, "", "is_inert"], [206, 2, 1, "", "reduce_ANP"], [206, 2, 1, "", "reduce_alg_num"], [206, 2, 1, "", "reduce_element"], [206, 2, 1, "", "repr"], [206, 2, 1, "", "test_factor"], [206, 2, 1, "", "valuation"]], "sympy.polys.numberfields.subfield": [[206, 4, 1, "", "field_isomorphism"], [206, 4, 1, "", "primitive_element"], [206, 4, 1, "", "to_number_field"]], "sympy.polys.numberfields.utilities": [[206, 1, 1, "", "AlgIntPowers"], [206, 4, 1, "", "coeff_search"], [206, 4, 1, "", "extract_fundamental_discriminant"], [206, 4, 1, "", "get_num_denom"], [206, 4, 1, "", "is_int"], [206, 4, 1, "", "is_rat"], [206, 4, 1, "", "isolate"], [206, 4, 1, "", "supplement_a_subspace"]], "sympy.polys.numberfields.utilities.AlgIntPowers": [[206, 2, 1, "", "__init__"]], "sympy.polys.orderings": [[207, 1, 1, "", "GradedLexOrder"], [207, 1, 1, "", "LexOrder"], [207, 1, 1, "", "MonomialOrder"], [207, 1, 1, "", "ReversedGradedLexOrder"]], "sympy.polys.orthopolys": [[207, 4, 1, "", "chebyshevt_poly"], [207, 4, 1, "", "chebyshevu_poly"], [207, 4, 1, "", "gegenbauer_poly"], [207, 4, 1, "", "hermite_poly"], [207, 4, 1, "", "hermite_prob_poly"], [207, 4, 1, "", "jacobi_poly"], [207, 4, 1, "", "laguerre_poly"], [207, 4, 1, "", "legendre_poly"], [207, 4, 1, "", "spherical_bessel_fn"]], "sympy.polys.partfrac": [[207, 4, 1, "", "apart"], [207, 4, 1, "", "apart_list"], [207, 4, 1, "", "assemble_partfrac_list"]], "sympy.polys.polyclasses": [[202, 1, 1, "", "ANP"], [202, 1, 1, "", "DMF"], [202, 1, 1, "", "DMP"]], "sympy.polys.polyclasses.ANP": [[202, 2, 1, "", "LC"], [202, 2, 1, "", "TC"], [202, 3, 1, "", "is_ground"], [202, 3, 1, "", "is_one"], [202, 3, 1, "", "is_zero"], [202, 2, 1, "", "pow"], [202, 2, 1, "", "to_dict"], [202, 2, 1, "", "to_list"], [202, 2, 1, "", "to_sympy_dict"], [202, 2, 1, "", "to_sympy_list"], [202, 2, 1, "", "to_tuple"], [202, 2, 1, "", "unify"]], "sympy.polys.polyclasses.DMF": [[202, 2, 1, "", "add"], [202, 2, 1, "", "cancel"], [202, 2, 1, "", "denom"], [202, 2, 1, "", "exquo"], [202, 2, 1, "", "frac_unify"], [202, 2, 1, "", "half_per"], [202, 2, 1, "", "invert"], [202, 3, 1, "", "is_one"], [202, 3, 1, "", "is_zero"], [202, 2, 1, "", "mul"], [202, 2, 1, "", "neg"], [202, 2, 1, "", "numer"], [202, 2, 1, "", "per"], [202, 2, 1, "", "poly_unify"], [202, 2, 1, "", "pow"], [202, 2, 1, "", "quo"], [202, 2, 1, "", "sub"]], "sympy.polys.polyclasses.DMP": [[202, 2, 1, "", "LC"], [202, 2, 1, "", "TC"], [202, 2, 1, "", "abs"], [202, 2, 1, "", "add"], [202, 2, 1, "", "add_ground"], [202, 2, 1, "", "all_coeffs"], [202, 2, 1, "", "all_monoms"], [202, 2, 1, "", "all_terms"], [202, 2, 1, "", "cancel"], [202, 2, 1, "", "cauchy_lower_bound"], [202, 2, 1, "", "cauchy_upper_bound"], [202, 2, 1, "", "clear_denoms"], [202, 2, 1, "", "coeffs"], [202, 2, 1, "", "cofactors"], [202, 2, 1, "", "compose"], [202, 2, 1, "", "content"], [202, 2, 1, "", "convert"], [202, 2, 1, "", "count_complex_roots"], [202, 2, 1, "", "count_real_roots"], [202, 2, 1, "", "decompose"], [202, 2, 1, "", "deflate"], [202, 2, 1, "", "degree"], [202, 2, 1, "", "degree_list"], [202, 2, 1, "", "diff"], [202, 2, 1, "", "discriminant"], [202, 2, 1, "", "div"], [202, 2, 1, "", "eject"], [202, 2, 1, "", "eval"], [202, 2, 1, "", "exclude"], [202, 2, 1, "", "exquo"], [202, 2, 1, "", "exquo_ground"], [202, 2, 1, "", "factor_list"], [202, 2, 1, "", "factor_list_include"], [202, 2, 1, "", "from_dict"], [202, 2, 1, "", "from_list"], [202, 2, 1, "", "from_sympy_list"], [202, 2, 1, "", "gcd"], [202, 2, 1, "", "gcdex"], [202, 2, 1, "", "gff_list"], [202, 2, 1, "", "half_gcdex"], [202, 2, 1, "", "homogeneous_order"], [202, 2, 1, "", "homogenize"], [202, 2, 1, "", "inject"], [202, 2, 1, "", "integrate"], [202, 2, 1, "", "intervals"], [202, 2, 1, "", "invert"], [202, 3, 1, "", "is_cyclotomic"], [202, 3, 1, "", "is_ground"], [202, 3, 1, "", "is_homogeneous"], [202, 3, 1, "", "is_irreducible"], [202, 3, 1, "", "is_linear"], [202, 3, 1, "", "is_monic"], [202, 3, 1, "", "is_monomial"], [202, 3, 1, "", "is_one"], [202, 3, 1, "", "is_primitive"], [202, 3, 1, "", "is_quadratic"], [202, 3, 1, "", "is_sqf"], [202, 3, 1, "", "is_zero"], [202, 2, 1, "", "l1_norm"], [202, 2, 1, "", "l2_norm_squared"], [202, 2, 1, "", "lcm"], [202, 2, 1, "", "lift"], [202, 2, 1, "", "max_norm"], [202, 2, 1, "", "mignotte_sep_bound_squared"], [202, 2, 1, "", "monic"], [202, 2, 1, "", "monoms"], [202, 2, 1, "", "mul"], [202, 2, 1, "", "mul_ground"], [202, 2, 1, "", "neg"], [202, 2, 1, "", "norm"], [202, 2, 1, "", "nth"], [202, 2, 1, "", "pdiv"], [202, 2, 1, "", "per"], [202, 2, 1, "", "permute"], [202, 2, 1, "", "pexquo"], [202, 2, 1, "", "pow"], [202, 2, 1, "", "pquo"], [202, 2, 1, "", "prem"], [202, 2, 1, "", "primitive"], [202, 2, 1, "", "quo"], [202, 2, 1, "", "quo_ground"], [202, 2, 1, "", "refine_root"], [202, 2, 1, "", "rem"], [202, 2, 1, "", "resultant"], [202, 2, 1, "", "revert"], [202, 2, 1, "", "shift"], [202, 2, 1, "", "slice"], [202, 2, 1, "", "sqf_list"], [202, 2, 1, "", "sqf_list_include"], [202, 2, 1, "", "sqf_norm"], [202, 2, 1, "", "sqf_part"], [202, 2, 1, "", "sqr"], [202, 2, 1, "", "sturm"], [202, 2, 1, "", "sub"], [202, 2, 1, "", "sub_ground"], [202, 2, 1, "", "subresultants"], [202, 2, 1, "", "terms"], [202, 2, 1, "", "terms_gcd"], [202, 2, 1, "", "to_dict"], [202, 2, 1, "", "to_exact"], [202, 2, 1, "", "to_field"], [202, 2, 1, "", "to_list"], [202, 2, 1, "", "to_ring"], [202, 2, 1, "", "to_sympy_dict"], [202, 2, 1, "", "to_sympy_list"], [202, 2, 1, "", "to_tuple"], [202, 2, 1, "", "total_degree"], [202, 2, 1, "", "transform"], [202, 2, 1, "", "trunc"], [202, 2, 1, "", "unify"]], "sympy.polys": [[204, 0, 0, "-", "polyconfig"], [204, 0, 0, "-", "polyoptions"], [209, 0, 0, "-", "solvers"]], "sympy.polys.polyconfig": [[204, 4, 1, "", "setup"]], "sympy.polys.polyerrors": [[204, 1, 1, "", "BasePolynomialError"], [204, 1, 1, "", "CoercionFailed"], [204, 1, 1, "", "ComputationFailed"], [204, 1, 1, "", "DomainError"], [204, 1, 1, "", "EvaluationFailed"], [204, 1, 1, "", "ExactQuotientFailed"], [204, 1, 1, "", "ExtraneousFactors"], [204, 1, 1, "", "FlagError"], [204, 1, 1, "", "GeneratorsError"], [204, 1, 1, "", "GeneratorsNeeded"], [204, 1, 1, "", "HeuristicGCDFailed"], [204, 1, 1, "", "HomomorphismFailed"], [204, 1, 1, "", "IsomorphismFailed"], [204, 1, 1, "", "MultivariatePolynomialError"], [204, 1, 1, "", "NotAlgebraic"], [204, 1, 1, "", "NotInvertible"], [204, 1, 1, "", "NotReversible"], [204, 1, 1, "", "OperationNotSupported"], [204, 1, 1, "", "OptionError"], [204, 1, 1, "", "PolificationFailed"], [204, 1, 1, "", "PolynomialError"], [204, 1, 1, "", "RefinementFailed"], [204, 1, 1, "", "UnificationFailed"], [204, 1, 1, "", "UnivariatePolynomialError"]], "sympy.polys.polyfuncs": [[207, 4, 1, "", "horner"], [207, 4, 1, "", "interpolate"], [207, 4, 1, "", "symmetrize"], [207, 4, 1, "", "viete"]], "sympy.polys.polyoptions": [[204, 1, 1, "", "Options"], [204, 4, 1, "", "build_options"]], "sympy.polys.polyoptions.Options": [[204, 2, 1, "", "clone"]], "sympy.polys.polyroots": [[207, 4, 1, "", "roots"]], "sympy.polys.polytools": [[207, 1, 1, "", "GroebnerBasis"], [207, 4, 1, "", "LC"], [207, 4, 1, "", "LM"], [207, 4, 1, "", "LT"], [207, 1, 1, "", "Poly"], [207, 1, 1, "", "PurePoly"], [207, 4, 1, "", "cancel"], [207, 4, 1, "", "cofactors"], [207, 4, 1, "", "compose"], [207, 4, 1, "", "content"], [207, 4, 1, "", "count_roots"], [207, 4, 1, "", "decompose"], [207, 4, 1, "", "degree"], [207, 4, 1, "", "degree_list"], [207, 4, 1, "", "discriminant"], [207, 4, 1, "", "div"], [207, 4, 1, "", "exquo"], [207, 4, 1, "", "factor"], [207, 4, 1, "", "factor_list"], [207, 4, 1, "", "gcd"], [207, 4, 1, "", "gcd_list"], [207, 4, 1, "", "gcdex"], [207, 4, 1, "", "gff"], [207, 4, 1, "", "gff_list"], [207, 4, 1, "", "groebner"], [207, 4, 1, "", "ground_roots"], [207, 4, 1, "", "half_gcdex"], [207, 4, 1, "", "intervals"], [207, 4, 1, "", "invert"], [207, 4, 1, "", "is_zero_dimensional"], [207, 4, 1, "", "lcm"], [207, 4, 1, "", "lcm_list"], [207, 4, 1, "", "monic"], [207, 4, 1, "", "nroots"], [207, 4, 1, "", "nth_power_roots_poly"], [207, 4, 1, "", "parallel_poly_from_expr"], [207, 4, 1, "", "pdiv"], [207, 4, 1, "", "pexquo"], [207, 4, 1, "", "poly"], [207, 4, 1, "", "poly_from_expr"], [207, 4, 1, "", "pquo"], [207, 4, 1, "", "prem"], [207, 4, 1, "", "primitive"], [207, 4, 1, "", "quo"], [207, 4, 1, "", "real_roots"], [207, 4, 1, "", "reduced"], [207, 4, 1, "", "refine_root"], [207, 4, 1, "", "rem"], [207, 4, 1, "", "resultant"], [207, 4, 1, "", "sqf"], [207, 4, 1, "", "sqf_list"], [207, 4, 1, "", "sqf_norm"], [207, 4, 1, "", "sqf_part"], [207, 4, 1, "", "sturm"], [207, 4, 1, "", "subresultants"], [207, 4, 1, "", "terms_gcd"], [207, 4, 1, "", "trunc"]], "sympy.polys.polytools.GroebnerBasis": [[207, 2, 1, "", "contains"], [207, 2, 1, "", "fglm"], [207, 3, 1, "", "is_zero_dimensional"], [207, 2, 1, "", "reduce"]], "sympy.polys.polytools.Poly": [[207, 2, 1, "", "EC"], [207, 2, 1, "", "EM"], [207, 2, 1, "", "ET"], [207, 2, 1, "", "LC"], [207, 2, 1, "", "LM"], [207, 2, 1, "", "LT"], [207, 2, 1, "", "TC"], [207, 2, 1, "", "abs"], [207, 2, 1, "", "add"], [207, 2, 1, "", "add_ground"], [207, 2, 1, "", "all_coeffs"], [207, 2, 1, "", "all_monoms"], [207, 2, 1, "", "all_roots"], [207, 2, 1, "", "all_terms"], [207, 2, 1, "", "as_dict"], [207, 2, 1, "", "as_expr"], [207, 2, 1, "", "as_list"], [207, 2, 1, "", "as_poly"], [207, 2, 1, "", "cancel"], [207, 2, 1, "", "clear_denoms"], [207, 2, 1, "", "coeff_monomial"], [207, 2, 1, "", "coeffs"], [207, 2, 1, "", "cofactors"], [207, 2, 1, "", "compose"], [207, 2, 1, "", "content"], [207, 2, 1, "", "count_roots"], [207, 2, 1, "", "decompose"], [207, 2, 1, "", "deflate"], [207, 2, 1, "", "degree"], [207, 2, 1, "", "degree_list"], [207, 2, 1, "", "diff"], [207, 2, 1, "", "discriminant"], [207, 2, 1, "", "dispersion"], [207, 2, 1, "", "dispersionset"], [207, 2, 1, "", "div"], [207, 3, 1, "", "domain"], [207, 2, 1, "", "eject"], [207, 2, 1, "", "eval"], [207, 2, 1, "", "exclude"], [207, 2, 1, "", "exquo"], [207, 2, 1, "", "exquo_ground"], [207, 2, 1, "", "factor_list"], [207, 2, 1, "", "factor_list_include"], [207, 3, 1, "", "free_symbols"], [207, 3, 1, "", "free_symbols_in_domain"], [207, 2, 1, "", "from_dict"], [207, 2, 1, "", "from_expr"], [207, 2, 1, "", "from_list"], [207, 2, 1, "", "from_poly"], [207, 2, 1, "", "galois_group"], [207, 2, 1, "", "gcd"], [207, 2, 1, "", "gcdex"], [207, 3, 1, "", "gen"], [207, 2, 1, "", "get_domain"], [207, 2, 1, "", "get_modulus"], [207, 2, 1, "", "gff_list"], [207, 2, 1, "", "ground_roots"], [207, 2, 1, "", "half_gcdex"], [207, 2, 1, "", "has_only_gens"], [207, 2, 1, "", "homogeneous_order"], [207, 2, 1, "", "homogenize"], [207, 2, 1, "", "inject"], [207, 2, 1, "", "integrate"], [207, 2, 1, "", "intervals"], [207, 2, 1, "", "invert"], [207, 3, 1, "", "is_cyclotomic"], [207, 3, 1, "", "is_ground"], [207, 3, 1, "", "is_homogeneous"], [207, 3, 1, "", "is_irreducible"], [207, 3, 1, "", "is_linear"], [207, 3, 1, "", "is_monic"], [207, 3, 1, "", "is_monomial"], [207, 3, 1, "", "is_multivariate"], [207, 3, 1, "", "is_one"], [207, 3, 1, "", "is_primitive"], [207, 3, 1, "", "is_quadratic"], [207, 3, 1, "", "is_sqf"], [207, 3, 1, "", "is_univariate"], [207, 3, 1, "", "is_zero"], [207, 2, 1, "", "l1_norm"], [207, 2, 1, "", "lcm"], [207, 2, 1, "", "length"], [207, 2, 1, "", "lift"], [207, 2, 1, "", "ltrim"], [207, 2, 1, "", "make_monic_over_integers_by_scaling_roots"], [207, 2, 1, "", "match"], [207, 2, 1, "", "max_norm"], [207, 2, 1, "", "monic"], [207, 2, 1, "", "monoms"], [207, 2, 1, "", "mul"], [207, 2, 1, "", "mul_ground"], [207, 2, 1, "", "neg"], [207, 2, 1, "", "new"], [207, 2, 1, "", "norm"], [207, 2, 1, "", "nroots"], [207, 2, 1, "", "nth"], [207, 2, 1, "", "nth_power_roots_poly"], [207, 3, 1, "", "one"], [207, 2, 1, "", "pdiv"], [207, 2, 1, "", "per"], [207, 2, 1, "", "pexquo"], [207, 2, 1, "", "pow"], [207, 2, 1, "", "pquo"], [207, 2, 1, "", "prem"], [207, 2, 1, "", "primitive"], [207, 2, 1, "", "quo"], [207, 2, 1, "", "quo_ground"], [207, 2, 1, "", "rat_clear_denoms"], [207, 2, 1, "", "real_roots"], [207, 2, 1, "", "refine_root"], [207, 2, 1, "", "rem"], [207, 2, 1, "", "reorder"], [207, 2, 1, "", "replace"], [207, 2, 1, "", "resultant"], [207, 2, 1, "", "retract"], [207, 2, 1, "", "revert"], [207, 2, 1, "", "root"], [207, 2, 1, "", "same_root"], [207, 2, 1, "", "set_domain"], [207, 2, 1, "", "set_modulus"], [207, 2, 1, "", "shift"], [207, 2, 1, "", "slice"], [207, 2, 1, "", "sqf_list"], [207, 2, 1, "", "sqf_list_include"], [207, 2, 1, "", "sqf_norm"], [207, 2, 1, "", "sqf_part"], [207, 2, 1, "", "sqr"], [207, 2, 1, "", "sturm"], [207, 2, 1, "", "sub"], [207, 2, 1, "", "sub_ground"], [207, 2, 1, "", "subresultants"], [207, 2, 1, "", "terms"], [207, 2, 1, "", "terms_gcd"], [207, 2, 1, "", "termwise"], [207, 2, 1, "", "to_exact"], [207, 2, 1, "", "to_field"], [207, 2, 1, "", "to_ring"], [207, 2, 1, "", "total_degree"], [207, 2, 1, "", "transform"], [207, 2, 1, "", "trunc"], [207, 2, 1, "", "unify"], [207, 3, 1, "", "unit"], [207, 3, 1, "", "zero"]], "sympy.polys.polytools.PurePoly": [[207, 3, 1, "", "free_symbols"]], "sympy.polys.rationaltools": [[207, 4, 1, "", "together"]], "sympy.polys.ring_series": [[208, 4, 1, "", "_tan1"], [208, 4, 1, "", "mul_xin"], [208, 4, 1, "", "pow_xin"], [208, 4, 1, "", "rs_LambertW"], [208, 4, 1, "", "rs_asin"], [208, 4, 1, "", "rs_atan"], [208, 4, 1, "", "rs_atanh"], [208, 4, 1, "", "rs_compose_add"], [208, 4, 1, "", "rs_cos"], [208, 4, 1, "", "rs_cos_sin"], [208, 4, 1, "", "rs_cosh"], [208, 4, 1, "", "rs_cot"], [208, 4, 1, "", "rs_diff"], [208, 4, 1, "", "rs_exp"], [208, 4, 1, "", "rs_fun"], [208, 4, 1, "", "rs_hadamard_exp"], [208, 4, 1, "", "rs_integrate"], [208, 4, 1, "", "rs_is_puiseux"], [208, 4, 1, "", "rs_log"], [208, 4, 1, "", "rs_mul"], [208, 4, 1, "", "rs_newton"], [208, 4, 1, "", "rs_nth_root"], [208, 4, 1, "", "rs_pow"], [208, 4, 1, "", "rs_puiseux"], [208, 4, 1, "", "rs_puiseux2"], [208, 4, 1, "", "rs_series_from_list"], [208, 4, 1, "", "rs_series_inversion"], [208, 4, 1, "", "rs_series_reversion"], [208, 4, 1, "", "rs_sin"], [208, 4, 1, "", "rs_sinh"], [208, 4, 1, "", "rs_square"], [208, 4, 1, "", "rs_subs"], [208, 4, 1, "", "rs_tan"], [208, 4, 1, "", "rs_tanh"], [208, 4, 1, "", "rs_trunc"]], "sympy.polys.rings": [[202, 1, 1, "", "PolyElement"], [202, 1, 1, "", "PolyRing"], [202, 4, 1, "", "ring"], [202, 4, 1, "", "sring"], [202, 4, 1, "", "vring"], [202, 4, 1, "", "xring"]], "sympy.polys.rings.PolyElement": [[202, 2, 1, "", "almosteq"], [202, 2, 1, "", "cancel"], [202, 2, 1, "", "coeff"], [202, 2, 1, "", "coeffs"], [202, 2, 1, "", "const"], [202, 2, 1, "", "content"], [202, 2, 1, "", "copy"], [202, 2, 1, "", "degree"], [202, 2, 1, "", "degrees"], [202, 2, 1, "", "diff"], [202, 2, 1, "", "div"], [202, 2, 1, "", "imul_num"], [202, 2, 1, "", "itercoeffs"], [202, 2, 1, "", "itermonoms"], [202, 2, 1, "", "iterterms"], [202, 2, 1, "", "leading_expv"], [202, 2, 1, "", "leading_monom"], [202, 2, 1, "", "leading_term"], [202, 2, 1, "", "listcoeffs"], [202, 2, 1, "", "listmonoms"], [202, 2, 1, "", "listterms"], [202, 2, 1, "", "monic"], [202, 2, 1, "", "monoms"], [202, 2, 1, "", "primitive"], [202, 2, 1, "", "square"], [202, 2, 1, "", "strip_zero"], [202, 2, 1, "", "symmetrize"], [202, 2, 1, "", "tail_degree"], [202, 2, 1, "", "tail_degrees"], [202, 2, 1, "", "terms"]], "sympy.polys.rings.PolyRing": [[202, 2, 1, "", "add"], [202, 2, 1, "", "add_gens"], [202, 2, 1, "", "compose"], [202, 2, 1, "", "drop"], [202, 2, 1, "", "drop_to_ground"], [202, 2, 1, "", "index"], [202, 2, 1, "", "monomial_basis"], [202, 2, 1, "", "mul"], [202, 2, 1, "", "symmetric_poly"]], "sympy.polys.rootoftools": [[207, 1, 1, "", "ComplexRootOf"], [207, 1, 1, "", "RootOf"], [207, 1, 1, "", "RootSum"], [207, 4, 1, "", "rootof"]], "sympy.polys.rootoftools.ComplexRootOf": [[207, 2, 1, "", "_all_roots"], [207, 2, 1, "", "_complexes_index"], [207, 2, 1, "", "_complexes_sorted"], [207, 2, 1, "", "_count_roots"], [207, 2, 1, "", "_ensure_complexes_init"], [207, 2, 1, "", "_ensure_reals_init"], [207, 2, 1, "", "_eval_evalf"], [207, 2, 1, "", "_eval_is_imaginary"], [207, 2, 1, "", "_eval_is_real"], [207, 2, 1, "", "_get_complexes"], [207, 2, 1, "", "_get_complexes_sqf"], [207, 2, 1, "", "_get_interval"], [207, 2, 1, "", "_get_reals"], [207, 2, 1, "", "_get_reals_sqf"], [207, 2, 1, "", "_get_roots"], [207, 2, 1, "", "_indexed_root"], [207, 2, 1, "", "_new"], [207, 2, 1, "", "_postprocess_root"], [207, 2, 1, "", "_preprocess_roots"], [207, 2, 1, "", "_real_roots"], [207, 2, 1, "", "_reals_index"], [207, 2, 1, "", "_reals_sorted"], [207, 2, 1, "", "_refine_complexes"], [207, 2, 1, "", "_reset"], [207, 2, 1, "", "_roots_trivial"], [207, 2, 1, "", "_set_interval"], [207, 2, 1, "", "all_roots"], [207, 2, 1, "", "clear_cache"], [207, 2, 1, "", "eval_approx"], [207, 2, 1, "", "eval_rational"], [207, 2, 1, "", "real_roots"]], "sympy.polys.rootoftools.RootSum": [[207, 2, 1, "", "new"]], "sympy.polys.solvers": [[209, 4, 1, "", "_solve_lin_sys"], [209, 4, 1, "", "_solve_lin_sys_component"], [209, 4, 1, "", "eqs_to_matrix"], [209, 4, 1, "", "solve_lin_sys"], [209, 4, 1, "", "sympy_eqs_to_ring"]], "sympy.polys.specialpolys": [[207, 4, 1, "", "cyclotomic_poly"], [207, 4, 1, "", "interpolating_poly"], [207, 4, 1, "", "random_poly"], [207, 4, 1, "", "swinnerton_dyer_poly"], [207, 4, 1, "", "symmetric_poly"]], "sympy.printing": [[211, 0, 0, "-", "aesaracode"], [211, 0, 0, "-", "c"], [211, 0, 0, "-", "codeprinter"], [211, 0, 0, "-", "conventions"], [211, 0, 0, "-", "cxx"], [211, 0, 0, "-", "fortran"], [211, 0, 0, "-", "gtk"], [211, 0, 0, "-", "jscode"], [211, 0, 0, "-", "julia"], [211, 0, 0, "-", "lambdarepr"], [211, 0, 0, "-", "latex"], [211, 0, 0, "-", "maple"], [211, 0, 0, "-", "mathematica"], [211, 0, 0, "-", "mathml"], [211, 0, 0, "-", "octave"], [211, 0, 0, "-", "precedence"], [211, 0, 0, "-", "pretty"], [211, 0, 0, "-", "preview"], [211, 0, 0, "-", "printer"], [211, 0, 0, "-", "pycode"], [211, 0, 0, "-", "python"], [211, 0, 0, "-", "rcode"], [211, 0, 0, "-", "repr"], [211, 0, 0, "-", "rust"], [211, 0, 0, "-", "smtlib"], [211, 0, 0, "-", "str"], [211, 0, 0, "-", "tree"]], "sympy.printing.aesaracode": [[211, 1, 1, "", "AesaraPrinter"], [211, 4, 1, "", "aesara_code"], [211, 4, 1, "", "aesara_function"], [211, 4, 1, "", "dim_handling"]], "sympy.printing.aesaracode.AesaraPrinter": [[211, 2, 1, "", "doprint"], [211, 5, 1, "", "printmethod"]], "sympy.printing.c": [[211, 1, 1, "", "C89CodePrinter"], [211, 1, 1, "", "C99CodePrinter"], [211, 4, 1, "", "ccode"], [211, 6, 1, "", "known_functions_C89"], [211, 6, 1, "", "known_functions_C99"], [211, 4, 1, "", "print_ccode"]], "sympy.printing.c.C89CodePrinter": [[211, 2, 1, "", "indent_code"], [211, 5, 1, "", "printmethod"]], "sympy.printing.c.C99CodePrinter": [[211, 5, 1, "", "printmethod"]], "sympy.printing.codeprinter": [[211, 7, 1, "", "AssignmentError"], [211, 1, 1, "", "CodePrinter"], [211, 4, 1, "", "cxxcode"]], "sympy.printing.codeprinter.CodePrinter": [[211, 2, 1, "", "doprint"], [211, 5, 1, "", "printmethod"]], "sympy.printing.conventions": [[211, 4, 1, "", "split_super_sub"]], "sympy.printing.cxx": [[211, 1, 1, "", "CXX11CodePrinter"], [211, 1, 1, "", "CXX98CodePrinter"]], "sympy.printing.cxx.CXX11CodePrinter": [[211, 5, 1, "", "printmethod"]], "sympy.printing.cxx.CXX98CodePrinter": [[211, 5, 1, "", "printmethod"]], "sympy.printing.dot": [[211, 4, 1, "", "dotprint"]], "sympy.printing.fortran": [[211, 1, 1, "", "FCodePrinter"], [211, 4, 1, "", "fcode"], [211, 4, 1, "", "print_fcode"]], "sympy.printing.fortran.FCodePrinter": [[211, 2, 1, "", "indent_code"], [211, 5, 1, "", "printmethod"]], "sympy.printing.gtk": [[211, 4, 1, "", "print_gtk"]], "sympy.printing.jscode": [[211, 1, 1, "", "JavascriptCodePrinter"], [211, 4, 1, "", "jscode"], [211, 6, 1, "", "known_functions"]], "sympy.printing.jscode.JavascriptCodePrinter": [[211, 2, 1, "", "indent_code"], [211, 5, 1, "", "printmethod"]], "sympy.printing.julia": [[211, 1, 1, "", "JuliaCodePrinter"], [211, 4, 1, "", "julia_code"], [211, 6, 1, "", "known_fcns_src1"], [211, 6, 1, "", "known_fcns_src2"]], "sympy.printing.julia.JuliaCodePrinter": [[211, 2, 1, "", "indent_code"], [211, 5, 1, "", "printmethod"]], "sympy.printing.lambdarepr": [[211, 1, 1, "", "LambdaPrinter"], [211, 4, 1, "", "lambdarepr"]], "sympy.printing.lambdarepr.LambdaPrinter": [[211, 5, 1, "", "printmethod"]], "sympy.printing.latex": [[211, 1, 1, "", "LatexPrinter"], [211, 6, 1, "", "accepted_latex_functions"], [211, 4, 1, "", "latex"], [211, 4, 1, "", "print_latex"]], "sympy.printing.latex.LatexPrinter": [[211, 2, 1, "", "parenthesize_super"], [211, 5, 1, "", "printmethod"]], "sympy.printing.maple": [[211, 1, 1, "", "MapleCodePrinter"], [211, 4, 1, "", "maple_code"], [211, 4, 1, "", "print_maple_code"]], "sympy.printing.maple.MapleCodePrinter": [[211, 5, 1, "", "printmethod"]], "sympy.printing.mathematica": [[211, 1, 1, "", "MCodePrinter"], [211, 6, 1, "", "known_functions"], [211, 4, 1, "", "mathematica_code"]], "sympy.printing.mathematica.MCodePrinter": [[211, 5, 1, "", "printmethod"]], "sympy.printing.mathml": [[211, 1, 1, "", "MathMLContentPrinter"], [211, 1, 1, "", "MathMLPresentationPrinter"], [211, 1, 1, "", "MathMLPrinterBase"], [211, 4, 1, "", "mathml"], [211, 4, 1, "", "print_mathml"]], "sympy.printing.mathml.MathMLContentPrinter": [[211, 2, 1, "", "mathml_tag"], [211, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPresentationPrinter": [[211, 2, 1, "", "mathml_tag"], [211, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPrinterBase": [[211, 2, 1, "", "doprint"]], "sympy.printing.octave": [[211, 1, 1, "", "OctaveCodePrinter"], [211, 6, 1, "", "known_fcns_src1"], [211, 6, 1, "", "known_fcns_src2"], [211, 4, 1, "", "octave_code"]], "sympy.printing.octave.OctaveCodePrinter": [[211, 2, 1, "", "indent_code"], [211, 5, 1, "", "printmethod"]], "sympy.printing.precedence": [[211, 6, 1, "", "PRECEDENCE"], [211, 6, 1, "", "PRECEDENCE_FUNCTIONS"], [211, 6, 1, "", "PRECEDENCE_VALUES"], [211, 4, 1, "", "precedence"]], "sympy.printing.pretty": [[211, 0, 0, "-", "pretty"], [211, 0, 0, "-", "pretty_symbology"], [211, 0, 0, "-", "stringpict"]], "sympy.printing.pretty.pretty": [[211, 1, 1, "", "PrettyPrinter"], [211, 4, 1, "", "pretty"], [211, 4, 1, "", "pretty_print"]], "sympy.printing.pretty.pretty.PrettyPrinter": [[211, 5, 1, "", "printmethod"]], "sympy.printing.pretty.pretty_symbology": [[211, 4, 1, "", "G"], [211, 4, 1, "", "U"], [211, 4, 1, "", "VF"], [211, 4, 1, "", "annotated"], [211, 6, 1, "", "atoms_table"], [211, 6, 1, "", "digit_2txt"], [211, 6, 1, "", "frac"], [211, 4, 1, "", "g"], [211, 6, 1, "", "greek_letters"], [211, 4, 1, "", "hobj"], [211, 4, 1, "", "pretty_atom"], [211, 4, 1, "", "pretty_symbol"], [211, 4, 1, "", "pretty_try_use_unicode"], [211, 4, 1, "", "pretty_use_unicode"], [211, 6, 1, "", "root"], [211, 6, 1, "", "sub"], [211, 6, 1, "", "sup"], [211, 6, 1, "", "symb_2txt"], [211, 4, 1, "", "vobj"], [211, 4, 1, "", "xobj"], [211, 4, 1, "", "xstr"], [211, 4, 1, "", "xsym"]], "sympy.printing.pretty.stringpict": [[211, 1, 1, "", "prettyForm"], [211, 1, 1, "", "stringPict"]], "sympy.printing.pretty.stringpict.prettyForm": [[211, 2, 1, "", "apply"]], "sympy.printing.pretty.stringpict.stringPict": [[211, 2, 1, "", "above"], [211, 2, 1, "", "below"], [211, 2, 1, "", "height"], [211, 2, 1, "", "left"], [211, 2, 1, "", "leftslash"], [211, 2, 1, "", "next"], [211, 2, 1, "", "parens"], [211, 2, 1, "", "render"], [211, 2, 1, "", "right"], [211, 2, 1, "", "root"], [211, 2, 1, "", "stack"], [211, 2, 1, "", "terminal_width"], [211, 2, 1, "", "width"]], "sympy.printing.preview": [[211, 4, 1, "", "preview"]], "sympy.printing.printer": [[211, 1, 1, "", "Printer"]], "sympy.printing.printer.Printer": [[211, 2, 1, "", "_print"], [211, 2, 1, "", "doprint"], [211, 5, 1, "", "printmethod"], [211, 2, 1, "", "set_global_settings"]], "sympy.printing.pycode": [[211, 1, 1, "", "MpmathPrinter"], [211, 4, 1, "", "pycode"]], "sympy.printing.rcode": [[211, 1, 1, "", "RCodePrinter"], [211, 6, 1, "", "known_functions"], [211, 4, 1, "", "print_rcode"], [211, 4, 1, "", "rcode"]], "sympy.printing.rcode.RCodePrinter": [[211, 2, 1, "", "indent_code"], [211, 5, 1, "", "printmethod"]], "sympy.printing.repr": [[211, 1, 1, "", "ReprPrinter"], [211, 4, 1, "", "srepr"]], "sympy.printing.repr.ReprPrinter": [[211, 2, 1, "", "emptyPrinter"], [211, 5, 1, "", "printmethod"], [211, 2, 1, "", "reprify"]], "sympy.printing.rust": [[211, 1, 1, "", "RustCodePrinter"], [211, 6, 1, "", "known_functions"], [211, 4, 1, "", "rust_code"]], "sympy.printing.rust.RustCodePrinter": [[211, 2, 1, "", "indent_code"], [211, 5, 1, "", "printmethod"]], "sympy.printing.smtlib": [[211, 1, 1, "", "SMTLibPrinter"], [211, 4, 1, "", "smtlib_code"]], "sympy.printing.smtlib.SMTLibPrinter": [[211, 5, 1, "", "_default_settings"], [211, 5, 1, "", "printmethod"]], "sympy.printing.str": [[211, 1, 1, "", "StrPrinter"], [211, 4, 1, "", "sstr"], [211, 4, 1, "", "sstrrepr"]], "sympy.printing.str.StrPrinter": [[211, 5, 1, "", "printmethod"]], "sympy.printing.tree": [[211, 4, 1, "", "pprint_nodes"], [211, 4, 1, "", "print_node"], [211, 4, 1, "", "print_tree"], [211, 4, 1, "", "tree"]], "sympy.series.acceleration": [[218, 4, 1, "", "richardson"], [218, 4, 1, "", "shanks"]], "sympy.series.formal": [[213, 1, 1, "", "FiniteFormalPowerSeries"], [213, 1, 1, "", "FormalPowerSeries"], [213, 1, 1, "", "FormalPowerSeriesCompose"], [213, 1, 1, "", "FormalPowerSeriesInverse"], [213, 1, 1, "", "FormalPowerSeriesProduct"], [213, 4, 1, "", "compute_fps"], [213, 4, 1, "", "exp_re"], [213, 4, 1, "", "fps"], [213, 4, 1, "", "hyper_algorithm"], [213, 4, 1, "", "hyper_re"], [213, 4, 1, "", "rational_algorithm"], [213, 4, 1, "", "rational_independent"], [213, 4, 1, "", "rsolve_hypergeometric"], [213, 4, 1, "", "simpleDE"], [213, 4, 1, "", "solve_de"]], "sympy.series.formal.FormalPowerSeries": [[213, 2, 1, "", "coeff_bell"], [213, 2, 1, "", "compose"], [213, 3, 1, "", "infinite"], [213, 2, 1, "", "integrate"], [213, 2, 1, "", "inverse"], [213, 2, 1, "", "polynomial"], [213, 2, 1, "", "product"], [213, 2, 1, "", "truncate"]], "sympy.series.formal.FormalPowerSeriesCompose": [[213, 3, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesInverse": [[213, 3, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesProduct": [[213, 3, 1, "", "function"]], "sympy.series.fourier": [[214, 1, 1, "", "FourierSeries"], [214, 4, 1, "", "fourier_series"]], "sympy.series.fourier.FourierSeries": [[214, 2, 1, "", "scale"], [214, 2, 1, "", "scalex"], [214, 2, 1, "", "shift"], [214, 2, 1, "", "shiftx"], [214, 2, 1, "", "sigma_approximation"], [214, 2, 1, "", "truncate"]], "sympy.series.gruntz": [[218, 1, 1, "", "SubsSet"], [218, 4, 1, "", "build_expression_tree"], [218, 4, 1, "", "calculate_series"], [218, 4, 1, "", "compare"], [218, 4, 1, "", "gruntz"], [218, 4, 1, "", "limitinf"], [218, 4, 1, "", "mrv"], [218, 4, 1, "", "mrv_leadterm"], [218, 4, 1, "", "mrv_max1"], [218, 4, 1, "", "mrv_max3"], [218, 4, 1, "", "rewrite"], [218, 4, 1, "", "sign"]], "sympy.series.gruntz.SubsSet": [[218, 2, 1, "", "copy"], [218, 2, 1, "", "do_subs"], [218, 2, 1, "", "meets"], [218, 2, 1, "", "union"]], "sympy.series.limits": [[218, 1, 1, "", "Limit"], [218, 4, 1, "", "limit"]], "sympy.series.limits.Limit": [[218, 2, 1, "", "doit"]], "sympy.series.limitseq": [[216, 4, 1, "", "difference_delta"], [216, 4, 1, "", "dominant"], [216, 4, 1, "", "limit_seq"]], "sympy.series.order": [[218, 1, 1, "", "Order"]], "sympy.series.order.Order": [[218, 2, 1, "", "contains"]], "sympy.series.residues": [[218, 4, 1, "", "residue"]], "sympy.series.sequences": [[217, 1, 1, "", "EmptySequence"], [217, 1, 1, "", "RecursiveSeq"], [217, 1, 1, "", "SeqAdd"], [217, 1, 1, "", "SeqBase"], [217, 1, 1, "", "SeqFormula"], [217, 1, 1, "", "SeqMul"], [217, 1, 1, "", "SeqPer"], [217, 4, 1, "", "sequence"]], "sympy.series.sequences.EmptySequence": [[217, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.RecursiveSeq": [[217, 3, 1, "", "initial"], [217, 3, 1, "", "interval"], [217, 3, 1, "", "n"], [217, 3, 1, "", "recurrence"], [217, 3, 1, "", "start"], [217, 3, 1, "", "stop"], [217, 3, 1, "", "y"], [217, 3, 1, "", "yn"]], "sympy.series.sequences.SeqAdd": [[217, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqBase": [[217, 2, 1, "", "coeff"], [217, 2, 1, "", "coeff_mul"], [217, 2, 1, "", "find_linear_recurrence"], [217, 3, 1, "", "free_symbols"], [217, 3, 1, "", "gen"], [217, 3, 1, "", "interval"], [217, 3, 1, "", "length"], [217, 3, 1, "", "start"], [217, 3, 1, "", "stop"], [217, 3, 1, "", "variables"]], "sympy.series.sequences.SeqFormula": [[217, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.SeqMul": [[217, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqPer": [[217, 2, 1, "", "coeff_mul"]], "sympy.series.series": [[218, 4, 1, "", "series"]], "sympy.sets": [[219, 0, 0, "-", "conditionset"], [219, 0, 0, "-", "fancysets"], [219, 0, 0, "-", "powerset"], [219, 0, 0, "-", "sets"]], "sympy.sets.conditionset": [[219, 1, 1, "", "ConditionSet"], [219, 1, 1, "", "Contains"], [219, 1, 1, "", "SetKind"]], "sympy.sets.fancysets": [[219, 1, 1, "", "CartesianComplexRegion"], [219, 1, 1, "", "ComplexRegion"], [219, 1, 1, "", "Complexes"], [219, 1, 1, "", "ImageSet"], [219, 1, 1, "", "Integers"], [219, 1, 1, "", "Naturals"], [219, 1, 1, "", "Naturals0"], [219, 1, 1, "", "PolarComplexRegion"], [219, 1, 1, "", "Range"], [219, 1, 1, "", "Rationals"], [219, 1, 1, "", "Reals"], [219, 4, 1, "", "normalize_theta_set"]], "sympy.sets.fancysets.ComplexRegion": [[219, 3, 1, "", "a_interval"], [219, 3, 1, "", "b_interval"], [219, 2, 1, "", "from_real"], [219, 3, 1, "", "psets"], [219, 3, 1, "", "sets"]], "sympy.sets.fancysets.Range": [[219, 2, 1, "", "as_relational"], [219, 3, 1, "", "reversed"]], "sympy.sets.powerset": [[219, 1, 1, "", "PowerSet"]], "sympy.sets.sets": [[219, 1, 1, "", "Complement"], [219, 1, 1, "", "DisjointUnion"], [219, 1, 1, "", "EmptySet"], [219, 1, 1, "", "FiniteSet"], [219, 1, 1, "", "Intersection"], [219, 1, 1, "", "Interval"], [219, 1, 1, "", "ProductSet"], [219, 1, 1, "", "Set"], [219, 1, 1, "", "SymmetricDifference"], [219, 1, 1, "", "Union"], [219, 1, 1, "", "UniversalSet"], [219, 4, 1, "", "imageset"]], "sympy.sets.sets.Complement": [[219, 2, 1, "", "as_relational"], [219, 2, 1, "", "reduce"]], "sympy.sets.sets.FiniteSet": [[219, 2, 1, "", "as_relational"]], "sympy.sets.sets.Intersection": [[219, 2, 1, "", "as_relational"]], "sympy.sets.sets.Interval": [[219, 2, 1, "", "Lopen"], [219, 2, 1, "", "Ropen"], [219, 2, 1, "", "as_relational"], [219, 3, 1, "", "end"], [219, 3, 1, "", "is_left_unbounded"], [219, 3, 1, "", "is_right_unbounded"], [219, 3, 1, "", "left_open"], [219, 2, 1, "", "open"], [219, 3, 1, "", "right_open"], [219, 3, 1, "", "start"]], "sympy.sets.sets.ProductSet": [[219, 3, 1, "", "is_iterable"]], "sympy.sets.sets.Set": [[219, 3, 1, "", "boundary"], [219, 3, 1, "", "closure"], [219, 2, 1, "", "complement"], [219, 2, 1, "", "contains"], [219, 3, 1, "", "inf"], [219, 3, 1, "", "interior"], [219, 2, 1, "", "intersect"], [219, 2, 1, "", "intersection"], [219, 3, 1, "", "is_closed"], [219, 2, 1, "", "is_disjoint"], [219, 3, 1, "", "is_open"], [219, 2, 1, "", "is_proper_subset"], [219, 2, 1, "", "is_proper_superset"], [219, 2, 1, "", "is_subset"], [219, 2, 1, "", "is_superset"], [219, 2, 1, "", "isdisjoint"], [219, 2, 1, "", "issubset"], [219, 2, 1, "", "issuperset"], [219, 3, 1, "", "kind"], [219, 3, 1, "", "measure"], [219, 2, 1, "", "powerset"], [219, 3, 1, "", "sup"], [219, 2, 1, "", "symmetric_difference"], [219, 2, 1, "", "union"]], "sympy.sets.sets.SymmetricDifference": [[219, 2, 1, "", "as_relational"]], "sympy.sets.sets.Union": [[219, 2, 1, "", "as_relational"]], "sympy.simplify": [[223, 0, 0, "-", "combsimp"], [223, 0, 0, "-", "cse_main"], [223, 0, 0, "-", "epathtools"], [223, 0, 0, "-", "hyperexpand"], [221, 0, 0, "-", "hyperexpand_doc"], [223, 0, 0, "-", "powsimp"], [223, 0, 0, "-", "radsimp"], [223, 0, 0, "-", "ratsimp"], [12, 0, 0, "-", "simplify"], [223, 0, 0, "-", "sqrtdenest"], [223, 0, 0, "-", "trigsimp"]], "sympy.simplify.combsimp": [[223, 4, 1, "", "combsimp"]], "sympy.simplify.cse_main": [[223, 4, 1, "", "cse"], [223, 4, 1, "", "opt_cse"], [223, 4, 1, "", "tree_cse"]], "sympy.simplify.epathtools": [[223, 1, 1, "", "EPath"], [223, 4, 1, "", "epath"]], "sympy.simplify.epathtools.EPath": [[223, 2, 1, "", "apply"], [223, 2, 1, "", "select"]], "sympy.simplify.fu": [[220, 4, 1, "", "TR0"], [220, 4, 1, "", "TR1"], [220, 4, 1, "", "TR10"], [220, 4, 1, "", "TR10i"], [220, 4, 1, "", "TR11"], [220, 4, 1, "", "TR111"], [220, 4, 1, "", "TR12"], [220, 4, 1, "", "TR12i"], [220, 4, 1, "", "TR13"], [220, 4, 1, "", "TR14"], [220, 4, 1, "", "TR15"], [220, 4, 1, "", "TR16"], [220, 4, 1, "", "TR2"], [220, 4, 1, "", "TR22"], [220, 4, 1, "", "TR2i"], [220, 4, 1, "", "TR3"], [220, 4, 1, "", "TR4"], [220, 4, 1, "", "TR5"], [220, 4, 1, "", "TR6"], [220, 4, 1, "", "TR7"], [220, 4, 1, "", "TR8"], [220, 4, 1, "", "TR9"], [220, 4, 1, "", "TRmorrie"], [220, 4, 1, "", "TRpower"], [220, 4, 1, "", "fu"]], "sympy.simplify.hyperexpand": [[223, 4, 1, "", "hyperexpand"]], "sympy.simplify.powsimp": [[223, 4, 1, "", "powdenest"], [223, 4, 1, "", "powsimp"]], "sympy.simplify.radsimp": [[223, 4, 1, "", "collect"], [223, 4, 1, "", "collect_const"], [223, 4, 1, "", "collect_sqrt"], [223, 4, 1, "", "fraction"], [223, 4, 1, "", "rad_rationalize"], [223, 4, 1, "", "radsimp"], [223, 4, 1, "", "rcollect"]], "sympy.simplify.ratsimp": [[223, 4, 1, "", "ratsimp"], [223, 4, 1, "", "ratsimpmodprime"]], "sympy.simplify.simplify": [[223, 4, 1, "", "besselsimp"], [223, 4, 1, "", "hypersimilar"], [223, 4, 1, "", "hypersimp"], [223, 4, 1, "", "kroneckersimp"], [223, 4, 1, "", "logcombine"], [223, 4, 1, "", "nsimplify"], [223, 4, 1, "", "nthroot"], [223, 4, 1, "", "posify"], [223, 4, 1, "", "separatevars"], [223, 4, 1, "", "simplify"]], "sympy.simplify.sqrtdenest": [[223, 4, 1, "", "sqrtdenest"]], "sympy.simplify.trigsimp": [[223, 4, 1, "", "trigsimp"]], "sympy.solvers.deutils": [[229, 4, 1, "", "ode_order"]], "sympy.solvers.diophantine.diophantine": [[224, 1, 1, "", "BinaryQuadratic"], [224, 1, 1, "", "CubicThue"], [224, 1, 1, "", "DiophantineEquationType"], [224, 1, 1, "", "DiophantineSolutionSet"], [224, 1, 1, "", "GeneralPythagorean"], [224, 1, 1, "", "GeneralSumOfEvenPowers"], [224, 1, 1, "", "GeneralSumOfSquares"], [224, 1, 1, "", "HomogeneousGeneralQuadratic"], [224, 1, 1, "", "HomogeneousTernaryQuadratic"], [224, 1, 1, "", "HomogeneousTernaryQuadraticNormal"], [224, 1, 1, "", "InhomogeneousGeneralQuadratic"], [224, 1, 1, "", "InhomogeneousTernaryQuadratic"], [224, 1, 1, "", "Linear"], [224, 4, 1, "", "PQa"], [224, 1, 1, "", "Univariate"], [224, 4, 1, "", "base_solution_linear"], [224, 4, 1, "", "classify_diop"], [224, 4, 1, "", "cornacchia"], [224, 4, 1, "", "descent"], [224, 4, 1, "", "diop_DN"], [224, 4, 1, "", "diop_bf_DN"], [224, 4, 1, "", "diop_general_pythagorean"], [224, 4, 1, "", "diop_general_sum_of_even_powers"], [224, 4, 1, "", "diop_general_sum_of_squares"], [224, 4, 1, "", "diop_linear"], [224, 4, 1, "", "diop_quadratic"], [224, 4, 1, "", "diop_solve"], [224, 4, 1, "", "diop_ternary_quadratic"], [224, 4, 1, "", "diop_ternary_quadratic_normal"], [224, 4, 1, "", "diophantine"], [224, 4, 1, "", "divisible"], [224, 4, 1, "", "equivalent"], [224, 4, 1, "", "find_DN"], [224, 4, 1, "", "gaussian_reduce"], [224, 4, 1, "", "holzer"], [224, 4, 1, "", "ldescent"], [224, 4, 1, "", "merge_solution"], [224, 4, 1, "", "parametrize_ternary_quadratic"], [224, 4, 1, "", "partition"], [224, 4, 1, "", "power_representation"], [224, 4, 1, "", "prime_as_sum_of_two_squares"], [224, 4, 1, "", "reconstruct"], [224, 4, 1, "", "sqf_normal"], [224, 4, 1, "", "square_factor"], [224, 4, 1, "", "sum_of_four_squares"], [224, 4, 1, "", "sum_of_powers"], [224, 4, 1, "", "sum_of_squares"], [224, 4, 1, "", "sum_of_three_squares"], [224, 4, 1, "", "transformation_to_DN"], [224, 4, 1, "", "transformation_to_normal"]], "sympy.solvers.diophantine.diophantine.DiophantineEquationType": [[224, 2, 1, "", "matches"]], "sympy.solvers": [[226, 0, 0, "-", "inequalities"], [227, 0, 0, "-", "ode"], [228, 0, 0, "-", "pde"], [229, 0, 0, "-", "recurr"], [230, 0, 0, "-", "solveset"]], "sympy.solvers.inequalities": [[226, 4, 1, "", "reduce_abs_inequalities"], [226, 4, 1, "", "reduce_abs_inequality"], [226, 4, 1, "", "reduce_inequalities"], [226, 4, 1, "", "reduce_rational_inequalities"], [226, 4, 1, "", "solve_poly_inequalities"], [226, 4, 1, "", "solve_poly_inequality"], [226, 4, 1, "", "solve_rational_inequalities"], [226, 4, 1, "", "solve_univariate_inequality"]], "sympy.solvers.ode": [[227, 6, 1, "", "allhints"], [227, 4, 1, "", "checkinfsol"], [227, 4, 1, "", "checkodesol"], [227, 4, 1, "", "classify_ode"], [227, 4, 1, "", "constantsimp"], [227, 4, 1, "", "dsolve"], [227, 4, 1, "", "homogeneous_order"], [227, 4, 1, "", "infinitesimals"], [227, 0, 0, "-", "ode"]], "sympy.solvers.ode.lie_group": [[227, 4, 1, "", "lie_heuristic_abaco1_product"], [227, 4, 1, "", "lie_heuristic_abaco1_simple"], [227, 4, 1, "", "lie_heuristic_abaco2_similar"], [227, 4, 1, "", "lie_heuristic_abaco2_unique_general"], [227, 4, 1, "", "lie_heuristic_abaco2_unique_unknown"], [227, 4, 1, "", "lie_heuristic_bivariate"], [227, 4, 1, "", "lie_heuristic_chi"], [227, 4, 1, "", "lie_heuristic_function_sum"], [227, 4, 1, "", "lie_heuristic_linear"]], "sympy.solvers.ode.ode": [[227, 4, 1, "", "_handle_Integral"], [227, 4, 1, "", "_linear_2eq_order1_type6"], [227, 4, 1, "", "_linear_2eq_order1_type7"], [227, 4, 1, "", "_nonlinear_2eq_order1_type1"], [227, 4, 1, "", "_nonlinear_2eq_order1_type2"], [227, 4, 1, "", "_nonlinear_2eq_order1_type3"], [227, 4, 1, "", "_nonlinear_2eq_order1_type4"], [227, 4, 1, "", "_nonlinear_2eq_order1_type5"], [227, 4, 1, "", "_nonlinear_3eq_order1_type1"], [227, 4, 1, "", "_nonlinear_3eq_order1_type2"], [227, 4, 1, "", "_nonlinear_3eq_order1_type3"], [227, 4, 1, "", "_nonlinear_3eq_order1_type4"], [227, 4, 1, "", "_nonlinear_3eq_order1_type5"], [227, 4, 1, "", "constant_renumber"], [227, 4, 1, "", "ode_1st_power_series"], [227, 4, 1, "", "ode_2nd_power_series_ordinary"], [227, 4, 1, "", "ode_2nd_power_series_regular"], [227, 4, 1, "", "ode_sol_simplicity"], [227, 4, 1, "", "odesimp"]], "sympy.solvers.ode.riccati": [[227, 4, 1, "", "compute_m_ybar"], [227, 4, 1, "", "construct_c"], [227, 4, 1, "", "construct_d"], [227, 4, 1, "", "get_gen_sol_from_part_sol"], [227, 4, 1, "", "rational_laurent_series"], [227, 4, 1, "", "remove_redundant_sols"], [227, 4, 1, "", "riccati_inverse_normal"], [227, 4, 1, "", "riccati_normal"], [227, 4, 1, "", "riccati_reduced"], [227, 4, 1, "", "solve_aux_eq"], [227, 4, 1, "", "solve_riccati"]], "sympy.solvers.ode.single": [[227, 1, 1, "", "AlmostLinear"], [227, 1, 1, "", "Bernoulli"], [227, 1, 1, "", "Factorable"], [227, 1, 1, "", "FirstExact"], [227, 1, 1, "", "FirstLinear"], [227, 1, 1, "", "HomogeneousCoeffBest"], [227, 1, 1, "", "HomogeneousCoeffSubsDepDivIndep"], [227, 1, 1, "", "HomogeneousCoeffSubsIndepDivDep"], [227, 1, 1, "", "LieGroup"], [227, 1, 1, "", "LinearCoefficients"], [227, 1, 1, "", "Liouville"], [227, 1, 1, "", "NthAlgebraic"], [227, 1, 1, "", "NthLinearConstantCoeffHomogeneous"], [227, 1, 1, "", "NthLinearConstantCoeffUndeterminedCoefficients"], [227, 1, 1, "", "NthLinearConstantCoeffVariationOfParameters"], [227, 1, 1, "", "NthLinearEulerEqHomogeneous"], [227, 1, 1, "", "NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"], [227, 1, 1, "", "NthLinearEulerEqNonhomogeneousVariationOfParameters"], [227, 1, 1, "", "NthOrderReducible"], [227, 1, 1, "", "RationalRiccati"], [227, 1, 1, "", "RiccatiSpecial"], [227, 1, 1, "", "SecondHypergeometric"], [227, 1, 1, "", "SecondLinearAiry"], [227, 1, 1, "", "SecondLinearBessel"], [227, 1, 1, "", "Separable"], [227, 1, 1, "", "SeparableReduced"]], "sympy.solvers.ode.systems": [[227, 4, 1, "", "canonical_odes"], [227, 4, 1, "", "dsolve_system"], [227, 4, 1, "", "linear_ode_to_matrix"], [227, 4, 1, "", "linodesolve"], [227, 4, 1, "", "linodesolve_type"], [227, 4, 1, "", "matrix_exp"], [227, 4, 1, "", "matrix_exp_jordan_form"]], "sympy.solvers.pde": [[228, 4, 1, "", "checkpdesol"], [228, 4, 1, "", "classify_pde"], [228, 4, 1, "", "pde_1st_linear_constant_coeff"], [228, 4, 1, "", "pde_1st_linear_constant_coeff_homogeneous"], [228, 4, 1, "", "pde_1st_linear_variable_coeff"], [228, 4, 1, "", "pde_separate"], [228, 4, 1, "", "pde_separate_add"], [228, 4, 1, "", "pde_separate_mul"], [228, 4, 1, "", "pdsolve"]], "sympy.solvers.polysys": [[229, 4, 1, "", "solve_poly_system"], [229, 4, 1, "", "solve_triangulated"]], "sympy.solvers.recurr": [[229, 4, 1, "", "rsolve"], [229, 4, 1, "", "rsolve_hyper"], [229, 4, 1, "", "rsolve_poly"], [229, 4, 1, "", "rsolve_ratio"]], "sympy.solvers.solvers": [[229, 4, 1, "", "checksol"], [229, 4, 1, "", "nsolve"], [229, 4, 1, "", "solve"], [229, 4, 1, "", "solve_linear"], [229, 4, 1, "", "solve_linear_system"], [229, 4, 1, "", "solve_linear_system_LU"], [229, 4, 1, "", "solve_undetermined_coeffs"], [229, 4, 1, "", "unrad"]], "sympy.solvers.solveset": [[230, 4, 1, "", "_is_exponential"], [230, 4, 1, "", "_is_logarithmic"], [230, 4, 1, "", "_solve_exponential"], [230, 4, 1, "", "_solve_logarithm"], [230, 4, 1, "", "_transolve"], [230, 4, 1, "", "domain_check"], [230, 4, 1, "", "invert_complex"], [230, 4, 1, "", "invert_real"], [230, 4, 1, "", "linear_eq_to_matrix"], [230, 4, 1, "", "linsolve"], [230, 4, 1, "", "nonlinsolve"], [230, 4, 1, "", "solveset"], [230, 4, 1, "", "solveset_complex"], [230, 4, 1, "", "solveset_real"], [230, 4, 1, "", "solvify"]], "sympy.stats": [[231, 4, 1, "", "Arcsin"], [231, 4, 1, "", "Benini"], [231, 4, 1, "", "Bernoulli"], [231, 1, 1, "", "BernoulliProcess"], [231, 4, 1, "", "Beta"], [231, 4, 1, "", "BetaBinomial"], [231, 4, 1, "", "BetaNoncentral"], [231, 4, 1, "", "BetaPrime"], [231, 4, 1, "", "Binomial"], [231, 4, 1, "", "BoundedPareto"], [231, 4, 1, "", "Cauchy"], [231, 1, 1, "", "CentralMoment"], [231, 4, 1, "", "Chi"], [231, 4, 1, "", "ChiNoncentral"], [231, 4, 1, "", "ChiSquared"], [231, 4, 1, "", "Coin"], [231, 1, 1, "", "ContinuousMarkovChain"], [231, 4, 1, "", "ContinuousRV"], [231, 1, 1, "", "Covariance"], [231, 1, 1, "", "CrossCovarianceMatrix"], [231, 4, 1, "", "Dagum"], [231, 4, 1, "", "Die"], [231, 1, 1, "", "DiscreteMarkovChain"], [231, 4, 1, "", "DiscreteUniform"], [231, 4, 1, "", "E"], [231, 4, 1, "", "Erlang"], [231, 4, 1, "", "ExGaussian"], [231, 1, 1, "", "Expectation"], [231, 1, 1, "", "ExpectationMatrix"], [231, 4, 1, "", "Exponential"], [231, 4, 1, "", "FDistribution"], [231, 4, 1, "", "FiniteRV"], [231, 4, 1, "", "FisherZ"], [231, 4, 1, "", "Frechet"], [231, 4, 1, "", "Gamma"], [231, 4, 1, "", "GammaInverse"], [231, 1, 1, "", "GammaProcess"], [231, 4, 1, "", "GeneralizedMultivariateLogGamma"], [231, 4, 1, "", "GeneralizedMultivariateLogGammaOmega"], [231, 4, 1, "", "Geometric"], [231, 4, 1, "", "Gompertz"], [231, 4, 1, "", "Gumbel"], [231, 4, 1, "", "Hermite"], [231, 4, 1, "", "Hypergeometric"], [231, 4, 1, "", "JointRV"], [231, 4, 1, "", "Kumaraswamy"], [231, 4, 1, "", "Laplace"], [231, 4, 1, "", "Levy"], [231, 4, 1, "", "LogLogistic"], [231, 4, 1, "", "LogNormal"], [231, 4, 1, "", "Logarithmic"], [231, 4, 1, "", "Logistic"], [231, 4, 1, "", "Lomax"], [231, 4, 1, "", "MatrixGamma"], [231, 4, 1, "", "MatrixNormal"], [231, 4, 1, "", "Maxwell"], [231, 1, 1, "", "Moment"], [231, 4, 1, "", "Moyal"], [231, 4, 1, "", "Multinomial"], [231, 4, 1, "", "MultivariateBeta"], [231, 4, 1, "", "MultivariateEwens"], [231, 4, 1, "", "MultivariateLaplace"], [231, 4, 1, "", "MultivariateNormal"], [231, 4, 1, "", "MultivariateT"], [231, 4, 1, "", "Nakagami"], [231, 4, 1, "", "NegativeBinomial"], [231, 4, 1, "", "NegativeMultinomial"], [231, 4, 1, "", "Normal"], [231, 4, 1, "", "NormalGamma"], [231, 4, 1, "", "P"], [231, 4, 1, "", "Pareto"], [231, 4, 1, "", "Poisson"], [231, 1, 1, "", "PoissonProcess"], [231, 4, 1, "", "PowerFunction"], [231, 1, 1, "", "Probability"], [231, 4, 1, "", "QuadraticU"], [231, 4, 1, "", "Rademacher"], [231, 4, 1, "", "RaisedCosine"], [231, 4, 1, "", "Rayleigh"], [231, 4, 1, "", "Reciprocal"], [231, 4, 1, "", "ShiftedGompertz"], [231, 4, 1, "", "Skellam"], [231, 4, 1, "", "StudentT"], [231, 4, 1, "", "Trapezoidal"], [231, 4, 1, "", "Triangular"], [231, 4, 1, "", "Uniform"], [231, 4, 1, "", "UniformSum"], [231, 1, 1, "", "Variance"], [231, 1, 1, "", "VarianceMatrix"], [231, 4, 1, "", "VonMises"], [231, 4, 1, "", "Wald"], [231, 4, 1, "", "Weibull"], [231, 1, 1, "", "WienerProcess"], [231, 4, 1, "", "WignerSemicircle"], [231, 4, 1, "", "Wishart"], [231, 4, 1, "", "YuleSimon"], [231, 4, 1, "", "Zeta"], [231, 4, 1, "", "cmoment"], [231, 4, 1, "", "correlation"], [231, 4, 1, "", "coskewness"], [231, 4, 1, "", "covariance"], [231, 0, 0, "-", "crv"], [231, 0, 0, "-", "crv_types"], [231, 4, 1, "", "density"], [231, 4, 1, "", "entropy"], [231, 4, 1, "", "factorial_moment"], [231, 0, 0, "-", "frv"], [231, 0, 0, "-", "frv_types"], [231, 4, 1, "", "given"], [231, 4, 1, "", "kurtosis"], [231, 4, 1, "", "marginal_distribution"], [231, 4, 1, "", "median"], [231, 4, 1, "", "moment"], [231, 4, 1, "", "quantile"], [231, 0, 0, "-", "rv"], [231, 4, 1, "", "sample"], [231, 4, 1, "", "sample_iter"], [231, 4, 1, "", "skewness"], [231, 4, 1, "", "std"], [231, 4, 1, "", "variance"], [231, 4, 1, "", "where"]], "sympy.stats.BernoulliProcess": [[231, 2, 1, "", "expectation"], [231, 2, 1, "", "probability"]], "sympy.stats.DiscreteMarkovChain": [[231, 2, 1, "", "absorbing_probabilities"], [231, 2, 1, "", "canonical_form"], [231, 2, 1, "", "communication_classes"], [231, 2, 1, "", "decompose"], [231, 2, 1, "", "fixed_row_vector"], [231, 2, 1, "", "fundamental_matrix"], [231, 3, 1, "", "limiting_distribution"], [231, 2, 1, "", "sample"], [231, 2, 1, "", "stationary_distribution"], [231, 3, 1, "", "transition_probabilities"]], "sympy.stats.compound_rv": [[231, 1, 1, "", "CompoundDistribution"]], "sympy.stats.crv": [[231, 1, 1, "", "ContinuousDomain"], [231, 1, 1, "", "ContinuousPSpace"]], "sympy.stats.crv_types": [[231, 1, 1, "", "NormalPSpace"]], "sympy.stats.crv_types.sympy.stats": [[231, 4, 1, "", "Die"], [231, 4, 1, "", "Normal"]], "sympy.stats.frv": [[231, 1, 1, "", "FiniteDomain"], [231, 1, 1, "", "FinitePSpace"]], "sympy.stats.frv_types": [[231, 1, 1, "", "DiePSpace"]], "sympy.stats.rv": [[231, 1, 1, "", "ConditionalDomain"], [231, 1, 1, "", "PSpace"], [231, 1, 1, "", "ProductDomain"], [231, 1, 1, "", "ProductPSpace"], [231, 1, 1, "", "RandomDomain"], [231, 1, 1, "", "RandomSymbol"], [231, 1, 1, "", "SingleDomain"], [231, 1, 1, "", "SinglePSpace"], [231, 4, 1, "", "pspace"], [231, 4, 1, "", "random_symbols"], [231, 4, 1, "", "rs_swap"], [231, 4, 1, "", "sampling_E"], [231, 4, 1, "", "sampling_P"], [231, 4, 1, "", "sampling_density"]], "sympy.tensor": [[232, 0, 0, "-", "array"], [235, 0, 0, "-", "index_methods"], [236, 0, 0, "-", "indexed"], [237, 0, 0, "-", "tensor"], [238, 0, 0, "-", "toperators"]], "sympy.tensor.array": [[232, 1, 1, "", "ImmutableDenseNDimArray"], [232, 1, 1, "", "ImmutableSparseNDimArray"], [232, 1, 1, "", "MutableDenseNDimArray"], [232, 1, 1, "", "MutableSparseNDimArray"], [232, 4, 1, "", "derive_by_array"], [233, 0, 0, "-", "expressions"], [232, 4, 1, "", "permutedims"], [232, 4, 1, "", "tensorcontraction"], [232, 4, 1, "", "tensordiagonal"], [232, 4, 1, "", "tensorproduct"]], "sympy.tensor.array.expressions": [[233, 1, 1, "", "ArrayContraction"], [233, 1, 1, "", "ArrayDiagonal"], [233, 1, 1, "", "ArrayTensorProduct"], [233, 1, 1, "", "PermuteDims"]], "sympy.tensor.index_methods": [[235, 4, 1, "", "get_contraction_structure"], [235, 4, 1, "", "get_indices"]], "sympy.tensor.indexed": [[236, 1, 1, "", "Idx"], [236, 1, 1, "", "Indexed"], [236, 1, 1, "", "IndexedBase"]], "sympy.tensor.indexed.Idx": [[236, 3, 1, "", "label"], [236, 3, 1, "", "lower"], [236, 3, 1, "", "upper"]], "sympy.tensor.indexed.Indexed": [[236, 3, 1, "", "base"], [236, 3, 1, "", "indices"], [236, 3, 1, "", "ranges"], [236, 3, 1, "", "rank"], [236, 3, 1, "", "shape"]], "sympy.tensor.indexed.IndexedBase": [[236, 3, 1, "", "label"], [236, 3, 1, "", "offset"], [236, 3, 1, "", "shape"], [236, 3, 1, "", "strides"]], "sympy.tensor.tensor": [[237, 1, 1, "", "TensAdd"], [237, 1, 1, "", "TensExpr"], [237, 1, 1, "", "TensMul"], [237, 1, 1, "", "TensorHead"], [237, 1, 1, "", "TensorIndex"], [237, 1, 1, "", "TensorIndexType"], [237, 1, 1, "", "TensorSymmetry"], [237, 1, 1, "", "TensorType"], [237, 1, 1, "", "_TensorManager"], [237, 4, 1, "", "canon_bp"], [237, 4, 1, "", "riemann_cyclic"], [237, 4, 1, "", "riemann_cyclic_replace"], [237, 4, 1, "", "tensor_heads"], [237, 4, 1, "", "tensorsymmetry"]], "sympy.tensor.tensor.TensAdd": [[237, 2, 1, "", "canon_bp"], [237, 2, 1, "", "contract_metric"]], "sympy.tensor.tensor.TensExpr": [[237, 2, 1, "", "get_matrix"], [237, 2, 1, "", "replace_with_arrays"]], "sympy.tensor.tensor.TensMul": [[237, 2, 1, "", "canon_bp"], [237, 2, 1, "", "contract_metric"], [237, 2, 1, "", "get_free_indices"], [237, 2, 1, "", "get_indices"], [237, 2, 1, "", "perm2tensor"], [237, 2, 1, "", "sorted_components"], [237, 2, 1, "", "split"]], "sympy.tensor.tensor.TensorHead": [[237, 2, 1, "", "commutes_with"]], "sympy.tensor.tensor.TensorSymmetry": [[237, 2, 1, "", "direct_product"], [237, 2, 1, "", "fully_symmetric"], [237, 2, 1, "", "no_symmetry"], [237, 2, 1, "", "riemann"]], "sympy.tensor.tensor._TensorManager": [[237, 2, 1, "", "clear"], [237, 2, 1, "", "comm_i2symbol"], [237, 2, 1, "", "comm_symbols2i"], [237, 2, 1, "", "get_comm"], [237, 2, 1, "", "set_comm"], [237, 2, 1, "", "set_comms"]], "sympy.tensor.toperators": [[238, 1, 1, "", "PartialDerivative"]], "sympy.testing": [[240, 0, 0, "-", "pytest"], [241, 0, 0, "-", "randtest"], [242, 0, 0, "-", "runtests"]], "sympy.testing.pytest": [[240, 4, 1, "", "SKIP"], [240, 4, 1, "", "nocache_fail"], [240, 4, 1, "", "raises"], [240, 4, 1, "", "warns"], [240, 4, 1, "", "warns_deprecated_sympy"]], "sympy.testing.runtests": [[242, 1, 1, "", "PyTestReporter"], [242, 1, 1, "", "Reporter"], [242, 1, 1, "", "SymPyDocTestFinder"], [242, 1, 1, "", "SymPyDocTestRunner"], [242, 1, 1, "", "SymPyOutputChecker"], [242, 1, 1, "", "SymPyTestResults"], [242, 4, 1, "", "convert_to_native_paths"], [242, 4, 1, "", "doctest"], [242, 4, 1, "", "get_sympy_dir"], [242, 4, 1, "", "raise_on_deprecated"], [242, 4, 1, "", "run_all_tests"], [242, 4, 1, "", "run_in_subprocess_with_hash_randomization"], [242, 4, 1, "", "split_list"], [242, 4, 1, "", "sympytestfile"], [242, 4, 1, "", "test"]], "sympy.testing.runtests.PyTestReporter": [[242, 2, 1, "", "write"]], "sympy.testing.runtests.SymPyDocTestRunner": [[242, 2, 1, "", "run"]], "sympy.testing.runtests.SymPyOutputChecker": [[242, 2, 1, "", "check_output"]], "sympy.testing.runtests.SymPyTestResults": [[242, 5, 1, "", "attempted"], [242, 5, 1, "", "failed"]], "sympy.utilities": [[243, 0, 0, "-", "autowrap"], [244, 0, 0, "-", "codegen"], [245, 0, 0, "-", "decorator"], [246, 0, 0, "-", "enumerative"], [247, 0, 0, "-", "exceptions"], [249, 0, 0, "-", "iterables"], [250, 0, 0, "-", "lambdify"], [251, 0, 0, "-", "memoization"], [252, 0, 0, "-", "misc"], [253, 0, 0, "-", "pkgdata"], [254, 0, 0, "-", "source"], [255, 0, 0, "-", "timeutils"]], "sympy.utilities.autowrap": [[243, 1, 1, "", "CodeWrapper"], [243, 1, 1, "", "CythonCodeWrapper"], [243, 1, 1, "", "DummyWrapper"], [243, 1, 1, "", "F2PyCodeWrapper"], [243, 1, 1, "", "UfuncifyCodeWrapper"], [243, 4, 1, "", "autowrap"], [243, 4, 1, "", "binary_function"], [243, 4, 1, "", "ufuncify"]], "sympy.utilities.autowrap.CythonCodeWrapper": [[243, 2, 1, "", "dump_pyx"]], "sympy.utilities.autowrap.UfuncifyCodeWrapper": [[243, 2, 1, "", "dump_c"]], "sympy.utilities.codegen": [[244, 1, 1, "", "Argument"], [244, 1, 1, "", "CCodeGen"], [244, 1, 1, "", "CodeGen"], [244, 1, 1, "", "DataType"], [244, 1, 1, "", "FCodeGen"], [244, 1, 1, "", "JuliaCodeGen"], [244, 1, 1, "", "OctaveCodeGen"], [244, 1, 1, "", "OutputArgument"], [244, 1, 1, "", "Result"], [244, 1, 1, "", "Routine"], [244, 1, 1, "", "RustCodeGen"], [244, 4, 1, "", "codegen"], [244, 4, 1, "", "get_default_datatype"], [244, 4, 1, "", "make_routine"]], "sympy.utilities.codegen.CCodeGen": [[244, 2, 1, "", "dump_c"], [244, 2, 1, "", "dump_h"], [244, 2, 1, "", "get_prototype"]], "sympy.utilities.codegen.CodeGen": [[244, 2, 1, "", "dump_code"], [244, 2, 1, "", "routine"], [244, 2, 1, "", "write"]], "sympy.utilities.codegen.FCodeGen": [[244, 2, 1, "", "dump_f95"], [244, 2, 1, "", "dump_h"], [244, 2, 1, "", "get_interface"]], "sympy.utilities.codegen.JuliaCodeGen": [[244, 2, 1, "", "dump_jl"], [244, 2, 1, "", "routine"]], "sympy.utilities.codegen.OctaveCodeGen": [[244, 2, 1, "", "dump_m"], [244, 2, 1, "", "routine"]], "sympy.utilities.codegen.Routine": [[244, 3, 1, "", "result_variables"], [244, 3, 1, "", "variables"]], "sympy.utilities.codegen.RustCodeGen": [[244, 2, 1, "", "dump_rs"], [244, 2, 1, "", "get_prototype"], [244, 2, 1, "", "routine"]], "sympy.utilities.decorator": [[245, 4, 1, "", "conserve_mpmath_dps"], [245, 4, 1, "", "deprecated"], [245, 4, 1, "", "doctest_depends_on"], [245, 4, 1, "", "memoize_property"], [245, 1, 1, "", "no_attrs_in_subclass"], [245, 4, 1, "", "public"], [245, 4, 1, "", "threaded"], [245, 4, 1, "", "threaded_factory"], [245, 4, 1, "", "xthreaded"]], "sympy.utilities.enumerative": [[246, 1, 1, "", "MultisetPartitionTraverser"], [246, 4, 1, "", "factoring_visitor"], [246, 4, 1, "", "list_visitor"], [246, 4, 1, "", "multiset_partitions_taocp"]], "sympy.utilities.enumerative.MultisetPartitionTraverser": [[246, 2, 1, "", "count_partitions"], [246, 2, 1, "", "enum_all"], [246, 2, 1, "", "enum_large"], [246, 2, 1, "", "enum_range"], [246, 2, 1, "", "enum_small"]], "sympy.utilities.exceptions": [[247, 7, 1, "", "SymPyDeprecationWarning"], [247, 4, 1, "", "ignore_warnings"], [247, 4, 1, "", "sympy_deprecation_warning"]], "sympy.utilities.iterables": [[249, 1, 1, "", "NotIterable"], [249, 4, 1, "", "binary_partitions"], [249, 4, 1, "", "bracelets"], [249, 4, 1, "", "capture"], [249, 4, 1, "", "common_prefix"], [249, 4, 1, "", "common_suffix"], [249, 4, 1, "", "connected_components"], [249, 4, 1, "", "dict_merge"], [249, 4, 1, "", "filter_symbols"], [249, 4, 1, "", "flatten"], [249, 4, 1, "", "generate_bell"], [249, 4, 1, "", "generate_derangements"], [249, 4, 1, "", "generate_involutions"], [249, 4, 1, "", "generate_oriented_forest"], [249, 4, 1, "", "group"], [249, 4, 1, "", "has_dups"], [249, 4, 1, "", "has_variety"], [249, 4, 1, "", "ibin"], [249, 4, 1, "", "iproduct"], [249, 4, 1, "", "is_palindromic"], [249, 4, 1, "", "is_sequence"], [249, 4, 1, "", "iterable"], [249, 4, 1, "", "kbins"], [249, 4, 1, "", "least_rotation"], [249, 4, 1, "", "minlex"], [249, 4, 1, "", "multiset"], [249, 4, 1, "", "multiset_combinations"], [249, 4, 1, "", "multiset_derangements"], [249, 4, 1, "", "multiset_partitions"], [249, 4, 1, "", "multiset_permutations"], [249, 4, 1, "", "necklaces"], [249, 4, 1, "", "numbered_symbols"], [249, 4, 1, "", "ordered_partitions"], [249, 4, 1, "", "partitions"], [249, 4, 1, "", "permute_signs"], [249, 4, 1, "", "postfixes"], [249, 4, 1, "", "prefixes"], [249, 4, 1, "", "random_derangement"], [249, 4, 1, "", "reshape"], [249, 4, 1, "", "rotate_left"], [249, 4, 1, "", "rotate_right"], [249, 4, 1, "", "rotations"], [249, 4, 1, "", "roundrobin"], [249, 4, 1, "", "runs"], [249, 4, 1, "", "sequence_partitions"], [249, 4, 1, "", "sequence_partitions_empty"], [249, 4, 1, "", "sift"], [249, 4, 1, "", "signed_permutations"], [249, 4, 1, "", "strongly_connected_components"], [249, 4, 1, "", "subsets"], [249, 4, 1, "", "take"], [249, 4, 1, "", "topological_sort"], [249, 4, 1, "", "unflatten"], [249, 4, 1, "", "uniq"], [249, 4, 1, "", "variations"]], "sympy.utilities.lambdify": [[250, 4, 1, "", "implemented_function"], [250, 4, 1, "", "lambdastr"], [250, 4, 1, "", "lambdify"]], "sympy.utilities.memoization": [[251, 4, 1, "", "assoc_recurrence_memo"], [251, 4, 1, "", "recurrence_memo"]], "sympy.utilities.misc": [[252, 4, 1, "", "as_int"], [252, 4, 1, "", "debug"], [252, 4, 1, "", "debug_decorator"], [252, 4, 1, "", "debugf"], [252, 4, 1, "", "filldedent"], [252, 4, 1, "", "find_executable"], [252, 4, 1, "", "func_name"], [252, 4, 1, "", "ordinal"], [252, 4, 1, "", "rawlines"], [252, 4, 1, "", "replace"], [252, 4, 1, "", "strlines"], [252, 4, 1, "", "translate"]], "sympy.utilities.pkgdata": [[253, 4, 1, "", "get_resource"]], "sympy.utilities.source": [[254, 4, 1, "", "get_class"], [254, 4, 1, "", "get_mod_func"]], "sympy.utilities.timeutils": [[255, 4, 1, "", "timed"]], "sympy.vector.coordsysrect": [[256, 1, 1, "", "CoordSys3D"]], "sympy.vector.coordsysrect.CoordSys3D": [[256, 2, 1, "", "__init__"], [256, 2, 1, "", "create_new"], [256, 2, 1, "", "locate_new"], [256, 2, 1, "", "orient_new"], [256, 2, 1, "", "orient_new_axis"], [256, 2, 1, "", "orient_new_body"], [256, 2, 1, "", "orient_new_quaternion"], [256, 2, 1, "", "orient_new_space"], [256, 2, 1, "", "position_wrt"], [256, 2, 1, "", "rotation_matrix"], [256, 2, 1, "", "scalar_map"]], "sympy.vector": [[259, 4, 1, "", "curl"], [259, 4, 1, "", "divergence"], [259, 4, 1, "", "express"], [259, 4, 1, "", "gradient"], [259, 4, 1, "", "is_conservative"], [259, 4, 1, "", "is_solenoidal"], [259, 4, 1, "", "matrix_to_vector"], [259, 4, 1, "", "scalar_potential"], [259, 4, 1, "", "scalar_potential_difference"]], "sympy.vector.deloperator": [[256, 1, 1, "", "Del"]], "sympy.vector.deloperator.Del": [[256, 2, 1, "", "cross"], [256, 2, 1, "", "dot"], [256, 2, 1, "", "gradient"]], "sympy.vector.dyadic": [[256, 1, 1, "", "Dyadic"]], "sympy.vector.dyadic.Dyadic": [[256, 3, 1, "", "components"], [256, 2, 1, "", "cross"], [256, 2, 1, "", "dot"], [256, 2, 1, "", "to_matrix"]], "sympy.vector.implicitregion": [[256, 1, 1, "", "ImplicitRegion"]], "sympy.vector.implicitregion.ImplicitRegion": [[256, 2, 1, "", "multiplicity"], [256, 2, 1, "", "rational_parametrization"], [256, 2, 1, "", "regular_point"], [256, 2, 1, "", "singular_points"]], "sympy.vector.integrals": [[256, 1, 1, "", "ParametricIntegral"], [259, 4, 1, "", "vector_integrate"]], "sympy.vector.orienters": [[258, 1, 1, "", "AxisOrienter"], [258, 1, 1, "", "BodyOrienter"], [258, 1, 1, "", "Orienter"], [258, 1, 1, "", "QuaternionOrienter"], [258, 1, 1, "", "SpaceOrienter"]], "sympy.vector.orienters.AxisOrienter": [[258, 2, 1, "", "__init__"], [258, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.BodyOrienter": [[258, 2, 1, "", "__init__"]], "sympy.vector.orienters.Orienter": [[258, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.QuaternionOrienter": [[258, 2, 1, "", "__init__"]], "sympy.vector.orienters.SpaceOrienter": [[258, 2, 1, "", "__init__"]], "sympy.vector.parametricregion": [[256, 1, 1, "", "ParametricRegion"]], "sympy.vector.vector": [[256, 1, 1, "", "Vector"]], "sympy.vector.vector.Vector": [[256, 3, 1, "", "components"], [256, 2, 1, "", "cross"], [256, 2, 1, "", "dot"], [256, 2, 1, "", "magnitude"], [256, 2, 1, "", "normalize"], [256, 2, 1, "", "outer"], [256, 2, 1, "", "projection"], [256, 2, 1, "", "separate"], [256, 2, 1, "", "to_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"cite": 0, "sympi": [0, 1, 5, 6, 10, 12, 15, 16, 17, 24, 26, 30, 32, 33, 43, 85, 104, 143, 192, 201, 256, 259, 260, 263, 277, 279, 282], "build": [1, 3], "document": [1, 3, 4, 6, 7, 32], "requir": [1, 4], "depend": [1, 3, 140, 201, 261], "docker": 1, "debian": 1, "ubuntu": 1, "fedora": 1, "mac": 1, "window": [1, 197], "10": [1, 10, 106], "doc": [1, 202], "local": 1, "instal": [1, 32, 33, 104, 286], "logo": 1, "view": 1, "auto": 1, "rebuild": 1, "live": 1, "server": 1, "pdf": 1, "debug": 2, "hard": 3, "option": [3, 26, 29, 30, 31, 204], "recommend": [3, 7], "interact": [3, 90, 197], "us": [3, 7, 10, 16, 22, 24, 25, 26, 27, 28, 29, 30, 31, 43, 65, 86, 87, 103, 106, 135, 140, 141, 195, 197, 208, 230, 261], "print": [3, 10, 20, 43, 90, 116, 124, 185, 191, 211, 287], "pars": [3, 31, 104], "logic": [3, 19, 92, 267, 270], "plot": [3, 10, 110, 156, 197], "lambdifi": [3, 10, 103, 250, 277], "code": [3, 4, 5, 7, 10, 43, 46, 116, 195, 211, 254, 267, 269], "gener": [3, 6, 7, 43, 52, 54, 201, 206, 230, 262, 267, 269], "autowrap": [3, 43, 243], "printer": [3, 43, 211, 287], "test": [3, 5, 10, 59, 92, 210, 239, 241, 242, 284], "onli": [3, 24, 29, 230], "statist": 3, "symengin": 3, "backend": [3, 197], "sage": 3, "develop": [3, 5, 62], "get": [3, 5, 12, 22], "sourc": [3, 254], "run": [3, 5, 33, 242], "benchmark": 3, "deprec": [4, 10], "polici": 4, "what": [4, 140, 200, 201, 230, 282, 285], "i": [4, 12, 28, 29, 87, 103, 140, 200, 211, 230, 282], "try": 4, "avoid": 4, "backward": 4, "incompat": 4, "chang": [4, 10], "first": [4, 10], "place": 4, "when": [4, 31, 87], "doe": [4, 12, 230], "public": 4, "api": [4, 32, 83, 87, 89, 112, 119, 189, 230, 243, 244, 257, 267], "Not": [4, 22, 24, 25, 26, 28, 29, 30, 31], "The": [4, 10, 18, 20, 44, 52, 87, 140, 181, 193, 206, 218, 221, 262, 263, 282], "purpos": 4, "technic": 4, "possibl": [4, 26, 284], "how": [4, 21, 32, 87, 195, 230], "long": 4, "should": [4, 103], "last": 4, "checklist": 4, "ad": 4, "releas": 4, "note": [4, 20, 62, 74, 140, 218, 220, 280, 289], "entri": [4, 98], "environ": 5, "setup": 5, "git": [5, 33], "virtual": 5, "docstr": [6, 7, 105, 108, 117, 118, 120, 121, 122, 123, 124, 125, 187, 188, 190, 191, 256, 258, 259], "style": [6, 7], "guid": [6, 7, 21, 32, 136, 193, 264], "guidelin": [6, 7], "format": [6, 7, 10, 31], "section": 6, "1": [6, 10, 29, 87, 106, 126, 140, 152], "singl": [6, 12, 14, 24], "sentenc": 6, "summari": 6, "2": [6, 29, 87, 106, 126, 140], "explan": [6, 13, 32], "3": [6, 89, 106, 126, 177], "exampl": [6, 20, 22, 24, 25, 28, 30, 34, 62, 74, 86, 89, 102, 106, 113, 127, 140, 144, 148, 179, 180, 181, 195, 210, 211, 218, 221, 231, 232, 233, 236, 262, 282, 288], "4": [6, 10, 106], "paramet": [6, 25, 221, 230], "5": [6, 10, 106], "see": [6, 62, 249, 262], "also": [6, 62, 249], "6": [6, 10, 106], "refer": [6, 18, 32, 35, 42, 45, 61, 62, 64, 74, 80, 87, 89, 95, 96, 98, 100, 102, 104, 119, 142, 148, 151, 181, 193, 195, 196, 197, 198, 202, 204, 206, 207, 208, 218, 220, 221, 224, 230, 243, 244, 264, 267], "sampl": [6, 10], "class": [6, 15, 42, 43, 61, 64, 96, 98, 100, 102, 140, 186, 197, 206, 211, 224, 232, 256, 258], "ar": [6, 24, 29, 195, 201, 230], "mathemat": [6, 12, 22, 143], "function": [6, 10, 12, 20, 22, 24, 26, 28, 29, 31, 43, 52, 61, 62, 68, 69, 70, 80, 81, 84, 85, 87, 92, 98, 102, 104, 106, 116, 141, 163, 166, 187, 188, 192, 197, 199, 201, 202, 207, 210, 211, 221, 224, 227, 228, 232, 259, 263, 287, 288], "best": [6, 7, 20], "practic": [6, 7, 20], "write": [6, 7, 20], "import": 6, "sphinx": 6, "cross": 6, "referenc": 6, "type": [7, 14, 24, 43, 70, 187, 230, 231], "narr": 7, "markdown": 7, "prefer": [7, 31], "math": [7, 43], "latex": [7, 104, 287], "head": 7, "spell": 7, "punctuat": 7, "capit": 7, "tone": 7, "contribut": [8, 9, 32, 208], "make": [9, 26, 31], "list": [10, 12, 14, 22, 24], "activ": 10, "silenc": 10, "warn": [10, 247], "version": 10, "13": 10, "12": 10, "managedproperti": 10, "metaclass": 10, "new": [10, 261], "joint": [10, 120, 137, 231], "coordin": [10, 116, 130, 140, 197, 260, 261, 263, 265], "intermedi": 10, "frame": [10, 195], "attach": 10, "point": [10, 20, 66, 77, 116, 185, 194, 260], "argument": [10, 12, 230], "11": [10, 106], "modul": [10, 111, 146, 185, 193, 198, 199, 200, 201, 204, 206, 207, 224, 227, 228, 230, 243], "tensor": [10, 58, 70, 175, 234, 237, 238], "arrai": [10, 232, 233], "express": [10, 12, 22, 25, 26, 28, 43, 74, 81, 84, 92, 95, 104, 118, 201, 210, 233, 261, 277, 283], "conv_": 10, "renam": 10, "from_": 10, "mathematica": [10, 211], "parser": [10, 126], "redund": 10, "static": 10, "method": [10, 16, 20, 27, 33, 121, 130, 133, 134, 135, 138, 139, 140, 211, 228, 230, 235, 261, 284], "carmichael": 10, "check": [10, 187], "hadamardproduct": 10, "matadd": 10, "matmul": 10, "some": [10, 29, 143, 230], "travers": [10, 62], "have": [10, 26, 30, 210], "been": 10, "move": [10, 221], "core": [10, 62, 95], "trace": 10, "compat": [10, 233], "submodul": [10, 74], "9": [10, 106], "expr_free_symbol": 10, "stat": [10, 231], "numsampl": 10, "n": [10, 232, 233], "poli": [10, 200, 201, 202, 209], "solver": [10, 29, 209, 225, 226, 227, 229, 230, 289], "rawmatrix": 10, "non": 10, "expr": [10, 62], "object": [10, 15, 236], "matrix": [10, 27, 39, 95, 98, 99, 140, 231, 284], "get_seg": 10, "attribut": [10, 44, 52], "mdft": 10, "physic": [10, 113, 116, 127, 137, 138, 139, 140, 141, 142, 143, 144, 183, 185, 189, 192, 193, 194, 195, 267, 273], "matric": [10, 16, 27, 93, 94, 95, 96, 97, 98, 100, 113, 115, 233, 267, 271, 284], "privat": 10, "sparsematrix": [10, 100], "_smat": 10, "densematrix": 10, "_mat": 10, "laplace_transform": 10, "nocond": 10, "fals": 10, "8": [10, 106], "theanocod": 10, "assumpt": [10, 15, 18, 20, 38, 62], "handler": [10, 18], "askhandl": 10, "relat": [10, 12, 14, 18, 24, 62, 70, 92, 192, 195, 263], "7": [10, 106], "call": [10, 24, 31], "stochasticprocess": 10, "distribut": [10, 204, 231], "randomindexedsymbol": 10, "discretemarkovchain": 10, "absorbing_probabilit": 10, "util": [10, 43, 59, 60, 79, 98, 149, 206, 229, 248, 255, 267, 275], "misc": [10, 38], "find_execut": 10, "mutabl": 10, "diffgeom": 10, "unicod": [10, 287], "pretti": [10, 211, 287], "stringpict": 10, "prettyform": 10, "pretty_symbologi": 10, "xstr": 10, "pass": 10, "set": [10, 15, 26, 29, 30, 39, 74, 195, 219, 230, 287], "oper": [10, 12, 84, 98, 154, 163, 165, 166, 187, 192, 195, 221, 232, 238, 260, 262, 263, 277, 284], "longer": 10, "accept": 10, "arg": [10, 283], "variou": [10, 210], "randtest": 10, "mix": 10, "polynomi": [10, 22, 70, 84, 199, 201, 202, 203, 204, 206, 207, 208, 210, 229, 288], "binari": 10, "print_cycl": 10, "flag": 10, "combinator": [10, 49], "permut": [10, 53, 54], "integr": [10, 29, 66, 70, 84, 86, 87, 88, 89, 116, 199, 206, 266, 278], "string": [10, 18, 31, 277], "fallback": 10, "sympifi": [10, 62], "creat": [10, 12, 20, 28, 98], "an": [10, 26, 28, 29, 74, 126, 181, 221, 230, 283], "indefinit": 10, "eq": [10, 26], "fun_ev": 10, "__call__": 10, "tensortyp": 10, "dummy_fmt": 10, "tensorindextyp": 10, "metric": 10, "get_kronecker_delta": 10, "get_epsilon": 10, "tensorsymmetri": 10, "tensorhead": 10, "is_emptyset": 10, "productset": 10, "iter": [10, 219, 249], "set_potential_energi": 10, "mechan": [10, 18, 107, 116, 119, 127, 136, 137, 138, 139, 140, 141, 142, 143, 144, 163, 231], "condit": [10, 29, 87, 219], "conditionset": 10, "max_degre": 10, "get_upper_degre": 10, "properti": [10, 18, 198], "multivariate_result": 10, "dixonresult": 10, "tupl": [10, 12, 14, 24, 207], "lambda": 10, "evalu": [10, 12, 20, 22, 66, 84, 143, 283], "differentiate_finit": 10, "data": 10, "glossari": 11, "gotcha": [12, 18, 126, 280], "pitfal": 12, "introduct": [12, 16, 35, 42, 43, 44, 52, 64, 74, 92, 126, 143, 181, 192, 194, 197, 198, 199, 206, 210, 265, 282], "equal": [12, 25, 26, 280], "sign": [12, 280], "doubl": 12, "variabl": [12, 24, 29, 31, 197, 231, 261], "assign": 12, "between": [12, 18, 183, 201], "symbol": [12, 18, 19, 20, 24, 25, 27, 62, 81, 140, 144, 196, 201, 207, 210, 230, 280, 282], "python": [12, 43], "number": [12, 39, 48, 62, 65, 66, 87, 102, 201, 206, 210, 267, 272], "v": [12, 19, 201], "float": [12, 66], "ration": [12, 201, 202, 207, 210, 213, 227, 288], "immut": [12, 96], "invers": [12, 20, 68, 87], "trig": 12, "sqrt": 12, "special": [12, 17, 43, 70, 207, 219, 288], "dictionari": [12, 14, 22, 30], "keyword": 12, "help": 12, "from": [12, 25, 26, 27, 31, 210, 233], "within": 12, "solv": [14, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 106, 199, 206, 229, 230, 289], "output": [14, 116, 230], "empti": 14, "Of": 14, "valu": [14, 19, 31], "boolean": [14, 19, 92], "classif": 15, "kind": [15, 62], "func": [15, 283], "finit": [16, 41, 44, 198, 201, 204, 206, 210, 221, 231, 278], "differ": [16, 18, 41, 143, 201, 261, 278], "approxim": [16, 22, 43], "deriv": [16, 29, 195, 232, 263, 278], "A": [16, 128, 129, 132, 133, 134, 135, 140, 282, 289], "direct": [16, 263], "topic": [17, 116, 185, 267, 274], "old": [18, 201], "system": [18, 24, 28, 30, 110, 131, 144, 178, 180, 181, 184, 227, 229, 260, 261, 263, 265], "appli": [18, 87, 221], "input": [18, 230], "predic": [18, 38, 39], "abov": 18, "definit": [18, 20, 80], "implic": 18, "interpret": 18, "other": [18, 20, 33, 81, 192, 261], "is_": 18, "implement": [18, 87, 192, 211, 221, 243, 244, 260, 263], "limit": [18, 24, 25, 86, 126, 216, 218, 278], "combin": [18, 84], "fuzzi": 19, "three": [19, 74], "bool": 19, "custom": [20, 197, 211], "easi": 20, "case": [20, 230], "fulli": 20, "defin": [20, 29], "automat": [20, 210], "eval": 20, "remind": 20, "kei": [20, 143, 283], "numer": [20, 22, 28, 29, 31, 66, 84, 89, 103, 116, 143], "evalf": [20, 62, 103, 277], "rewrit": [20, 43, 212, 288], "simplif": [20, 66, 92, 220, 288], "doit": 20, "expand": [20, 210, 212, 288], "differenti": [20, 29, 64, 84, 116, 229, 230, 289], "as_real_imag": 20, "miscellan": [20, 68, 74, 252], "_eval_": 20, "complet": [20, 22, 126], "versin": 20, "divid": 20, "fuse": 20, "multipli": 20, "add": [20, 62], "fma": 20, "addit": [20, 84], "tip": [20, 277, 278, 280, 283, 284], "find": [22, 28, 206, 207], "root": [22, 28, 207], "algebra": [22, 24, 25, 26, 27, 29, 30, 35, 91, 98, 151, 195, 198, 201, 206, 210, 229, 289], "altern": [22, 24, 25, 26, 27, 28, 29, 30, 195], "consid": [22, 24, 25, 26, 27, 28, 29, 30], "guidanc": [22, 24, 25, 26, 27, 28, 29, 30, 31], "solut": [22, 25, 26, 27, 28, 29, 30, 31, 163, 230, 262], "without": [22, 29], "multipl": [22, 29, 84, 195, 206], "With": [22, 25, 26, 27, 28, 29, 30, 31], "factor": [22, 199, 204, 210, 288], "equat": [22, 23, 25, 26, 27, 28, 29, 30, 31, 138, 139, 140, 179, 199, 224, 229, 230, 289], "exact": [22, 31], "real_root": 22, "nroot": 22, "complex": [22, 28, 68, 201], "result": [22, 24, 25, 26, 27, 28, 29, 30, 210], "all_root": 22, "tradeoff": 22, "speed": [22, 26, 27, 30, 31, 116, 140], "all": [22, 24, 25, 26, 28, 29, 30], "perhap": 22, "implicitli": [22, 29], "crootof": 22, "repres": [22, 26, 31, 87, 171, 201, 206], "can": [22, 24, 25, 26, 28, 29, 30, 31], "Be": [22, 24, 25, 26, 27, 28, 29], "No": [22, 25, 26, 27, 29], "close": [22, 26, 29, 30, 31], "form": [22, 26, 29, 30, 31, 92, 99, 140, 233], "report": [22, 24, 25, 26, 27, 28, 29, 30, 31], "bug": [22, 24, 25, 26, 27, 28, 29, 30, 31, 89], "reduc": [24, 210], "One": [24, 28, 29], "inequ": [24, 226, 229, 230], "includ": [24, 29, 31], "extract": [24, 25, 27, 29], "decompos": 24, "reduct": [24, 221], "interest": [24, 282], "per": 24, "That": [24, 25, 26, 28, 30, 31], "return": [24, 29, 230], "period": 24, "which": [24, 26, 30, 103, 211], "cannot": [24, 26, 29, 30], "satisfi": 24, "analyt": [24, 163], "diophantin": [25, 224, 229, 230], "zero": [25, 26, 31, 110, 204, 210, 284], "specifi": [25, 29, 197], "order": [25, 39, 207, 218, 221], "work": [25, 27, 29, 74, 210], "verifi": [25, 266], "programmat": [25, 26], "your": 26, "Into": [26, 28, 30], "put": 26, "restrict": 26, "domain": [26, 199, 201, 202, 207, 210, 230], "explicitli": [26, 29], "infinit": [26, 230], "substitut": [26, 28, 116, 185, 277], "solveset": [26, 230], "necessarili": 26, "interrog": 26, "up": [26, 27, 30, 31, 287], "usual": 27, "must": 27, "squar": [27, 199], "sever": 27, "same": 27, "vector": [27, 52, 136, 185, 187, 189, 192, 193, 194, 195, 204, 256, 257, 259, 260, 261, 263, 264, 265, 266], "element": [27, 140, 201, 206], "real": [28, 201], "ensur": [28, 31, 230], "found": 28, "given": [28, 30], "interv": [28, 197], "increas": 28, "precis": 28, "scipi": [28, 29], "ordinari": [29, 229, 230], "od": [29, 227, 229, 230], "Its": 29, "independ": 29, "initi": 29, "boundari": 29, "bewar": 29, "copi": 29, "past": 29, "pair": 29, "If": 29, "There": 29, "arbitrari": 29, "constant": [29, 158, 181], "hint": [29, 227, 228], "unevalu": 29, "select": 29, "specif": [29, 43], "linear": [30, 84, 98, 116, 122, 140, 141, 181, 210], "nonlinear": 30, "you": 31, "might": 31, "consist": 31, "ani": [31, 230], "denomin": 31, "do": [31, 230], "simplifi": [31, 43, 204, 222, 223, 288], "welcom": 32, "": [32, 121, 130, 133, 134, 135, 138, 139, 140, 161, 172, 210, 220, 229, 230, 261, 266, 285], "tutori": [32, 224, 276, 281], "anaconda": 33, "mpmath": 33, "question": 33, "abc": 34, "caveat": [34, 104], "quaternion": 35, "ask": 36, "assum": 37, "queri": 38, "content": [38, 49, 69, 82, 88, 203, 215, 225, 234], "perform": 38, "improv": [38, 126], "common": [39, 93, 116, 185, 210, 211, 212], "calculu": [39, 41, 195, 278], "theori": [39, 42, 102, 267, 272], "refin": 40, "singular": [41, 106], "weight": 41, "categori": 42, "base": [42, 64, 98, 198, 199, 210, 217, 230], "diagram": 42, "draw": 42, "codegen": [43, 244], "tool": [43, 101], "abstract": [43, 107, 111, 113, 136, 146, 163, 193, 202], "syntax": 43, "tree": [43, 201, 211, 283], "ast": [43, 126], "predefin": 43, "node": 43, "c": [43, 211], "cfunction": 43, "cnode": 43, "cxxnode": 43, "fortran": [43, 211], "fnode": 43, "algorithm": [43, 44, 161, 172, 204, 207, 213, 218, 221], "pyutil": 43, "cutil": 43, "futil": 43, "present": [44, 52], "group": [44, 45, 47, 50, 52, 53, 181, 206], "overview": [44, 52, 87], "facil": 44, "construct": [44, 52, 233], "free": [44, 199], "word": [44, 52], "coset": 44, "enumer": [44, 67], "todd": 44, "coxet": 44, "cosett": 44, "compress": 44, "standard": 44, "subgroup": 44, "index": [44, 52, 233, 236], "low": 44, "reidemeist": 44, "schreier": 44, "bibliographi": [44, 52], "galoi": [45, 206], "grai": 46, "constructor": [47, 207, 284], "nilpot": 48, "abelian": 48, "cyclic": 48, "name": 50, "partit": [51, 249], "polycycl": 52, "polycyclicgroup": 52, "collector": 52, "comput": [52, 87, 103, 163, 210, 282], "minim": [52, 206], "uncollect": 52, "subword": 52, "collect": [52, 212, 288], "expon": [52, 210], "depth": [52, 74], "lead": 52, "polyhedron": 55, "prufer": 56, "sequenc": [56, 84, 204, 207, 216, 217], "subset": [57, 65], "canonic": 58, "concret": 61, "hypergeometr": [61, 70, 81, 84, 213, 221], "term": [61, 210, 212, 218], "cach": 62, "basic": [62, 66, 98, 187, 199, 201, 207, 219, 260, 267, 268, 277, 284], "singleton": [62, 217, 219], "power": [62, 213, 219, 282, 288], "mul": 62, "mod": 62, "multidimension": 62, "contain": 62, "exprtool": 62, "sort": 62, "random": [62, 231], "cryptographi": 63, "geometri": [64, 74, 198], "discret": [65, 231], "transform": [65, 87, 89, 104, 261], "fast": 65, "fourier": [65, 214], "theoret": 65, "walsh": 65, "hadamard": 65, "m\u00f6biu": 65, "convolut": 65, "cover": 65, "product": [65, 164, 175, 232, 262], "intersect": [65, 74], "accuraci": 66, "error": [66, 70], "handl": [66, 230], "sum": 66, "combinatori": 67, "elementari": [68, 198, 217, 219], "trigonometr": [68, 70, 220, 288], "hyperbol": 68, "integ": [68, 201], "exponenti": [68, 70, 288], "piecewis": 68, "dirac": 70, "delta": 70, "discontinu": 70, "gamma": [70, 113], "beta": 70, "fresnel": 70, "logarithm": [70, 288], "bessel": 70, "airi": 70, "b": 70, "spline": 70, "riemann": 70, "zeta": 70, "ellipt": 70, "mathieu": 70, "orthogon": [70, 207, 263], "jacobi": 70, "gegenbau": 70, "chebyshev": 70, "legendr": 70, "hermit": 70, "laguerr": 70, "spheric": 70, "harmon": [70, 152, 177], "curv": 71, "ellips": 72, "entiti": [73, 74, 197], "avail": 74, "usag": [74, 126, 144, 201, 262], "median": 74, "pappu": 74, "hexagon": 74, "theorem": [74, 87, 266], "futur": [74, 116, 126, 185], "truth": [74, 92], "dimens": [74, 178, 181], "beyond": 74, "visual": [74, 143], "line": 75, "plane": [76, 87], "polygon": [78, 89], "about": [80, 230, 261, 289], "holonom": [80, 81, 82, 84, 85, 131], "convert": [81, 84, 201, 277], "represent": [81, 85, 181, 195, 201], "meijer": [81, 84, 87, 221], "g": [81, 84, 87, 221], "intern": [83, 87, 89, 201, 204, 206, 224], "composit": 84, "seri": [84, 197, 208, 213, 214, 215, 218, 278], "expans": [84, 218, 221, 278], "current": 86, "polar": [87, 148], "branch": 87, "argand": 87, "tabl": [87, 92, 221], "lookup": 87, "mellin": 87, "converg": 87, "laplac": 87, "thi": [87, 230], "valid": 87, "exist": 87, "formula": [87, 221], "todo": 89, "over": [89, 210, 219], "polytop": 89, "For": 89, "2d": 89, "polyhedra": 89, "session": 90, "lie": [91, 227], "equival": [92, 143], "manipul": [92, 98, 118, 203, 204, 207, 208, 230, 283], "infer": 92, "dens": [94, 201, 202, 204], "block": 95, "immutablematrix": 96, "except": [98, 104, 204, 247], "rotat": 98, "numpi": 98, "normal": [99, 210], "spars": [100, 101, 201, 202, 204], "immutablesparsematrix": 100, "ntheori": 102, "ecm": 102, "q": 102, "sub": 103, "ufuncifi": 103, "aesara": [103, 211], "so": 103, "experiment": 104, "mathrm": [104, 287], "runtim": 104, "beam": [105, 106, 107], "bend": 106, "problem": [106, 206, 262], "continuum": 107, "truss": [107, 108], "control": [109, 110, 111, 112, 197], "pole": 110, "bode": 110, "impuls": 110, "respons": [110, 211], "step": [110, 230], "ramp": 110, "lti": 112, "high": 113, "energi": [113, 141], "hydrogen": 114, "wavefunct": 114, "potenti": [116, 140, 141, 185, 192, 263], "issu": [116, 126, 140, 185, 284], "advanc": [116, 185, 210, 283, 284], "featur": [116, 185, 279], "choic": 116, "acceler": [116, 185, 194, 218], "interfac": [116, 185, 197, 231], "bodi": [117, 141, 266], "framework": [120, 137], "kane": [121, 130, 133, 134, 138, 140], "lagrang": [121, 130, 135, 139, 140], "mass": [123, 141, 266], "inertia": [123, 141, 185], "particl": [123, 141, 167], "rigidbodi": 123, "mechanics_print": 124, "mprint": 124, "mpprint": 124, "mlatex": 124, "symbolicsystem": [125, 144], "autolev": [126, 143], "dynam": 126, "onlin": 126, "fix": 126, "switch": 126, "bicycl": 128, "four": 129, "bar": 129, "linkag": 129, "nonminim": 130, "pendulum": 130, "multi": 131, "degre": 131, "freedom": 131, "roll": [132, 133, 134, 135], "disc": [132, 133, 134, 135], "constraint": 134, "forc": 134, "classic": [136, 204], "jointsmethod": 137, "structur": [138, 139, 181, 224], "background": 140, "directli": [140, 261], "new_method": 140, "kwarg": 140, "a_and_b": 140, "true": 140, "slow": 140, "ha": 140, "nan": 140, "zoo": 140, "oo": 140, "further": [140, 280], "rigid": 141, "dyadic": [141, 185, 260, 261], "momentum": 141, "angular": [141, 194], "momenta": 141, "kinet": 141, "lagrangian": 141, "user": [143, 224, 227, 228], "rough": 143, "link": 143, "gaussian": [145, 201, 202, 210], "optic": [145, 146], "medium": 147, "wave": 150, "pauli": 151, "quantum": [152, 163, 177], "oscil": [152, 177], "d": [152, 177], "anticommut": 153, "cartesian": 154, "state": [154, 163, 166, 174], "clebsch": 155, "gordan": 155, "coeffici": [155, 204], "circuit": 156, "commut": [157, 198], "dagger": 159, "gate": 160, "grover": 161, "hilbert": 162, "space": [162, 181, 221], "inner": 164, "helper": [166, 211], "box": 167, "qappli": 168, "qft": 169, "qubit": 170, "shor": 172, "spin": 173, "second": 176, "quantiz": 176, "more": [179, 180, 218, 261, 282], "dimension": 179, "analysi": 179, "quantiti": [179, 181, 183, 261], "unit": [180, 181, 182, 184], "philosophi": 181, "behind": 181, "need": 181, "literatur": [181, 205, 210], "prefix": 182, "convers": 183, "referencefram": [185, 195], "dynamicsymbol": 185, "essenti": [186, 188, 256, 259], "field": [187, 192, 201, 204, 206, 210, 263, 265], "kinemat": [190, 194], "kinematic_equ": 190, "scalar": [192, 263, 265], "curl": [192, 263], "diverg": [192, 263, 266], "gradient": [192, 263], "conserv": [192, 263], "solenoid": [192, 263], "veloc": 194, "basi": [195, 204, 206], "wigner": 196, "credit": 196, "copyright": 196, "author": 196, "plotgrid": 197, "pyglet": 197, "mode": 197, "color": 197, "geometr": 197, "ascii": [197, 287], "art": 197, "agca": 198, "ring": [198, 201, 202], "ideal": 198, "homomorph": [198, 206], "syzygi": 198, "extens": [198, 210], "concept": 199, "divis": 199, "factori": 199, "euclidean": 199, "gcd": [199, 204, 210], "lcm": 199, "groebner": [199, 204], "introduc": [200, 201], "domainmatrix": 200, "dup": 201, "dmp": 201, "polyr": 201, "polynomialr": 201, "choos": 201, "unifi": 201, "gf": 202, "p": [202, 206], "zz": 202, "qq": 202, "mpq": 202, "zz_i": 202, "qq_i": 202, "rr": 202, "cc": 202, "k": 202, "x": 202, "ex": 202, "quotient": 202, "level": 204, "multivari": [204, 210], "univari": [204, 210], "remaind": 204, "subresult": 204, "configur": 204, "modular": 204, "undocu": 204, "main": 206, "prime": 206, "decomposit": [206, 207, 210], "adic": 206, "valuat": 206, "subfield": 206, "As": 206, "arithmet": 206, "extra": 207, "monomi": 207, "encod": 207, "formal": [207, 213], "appel": 207, "partial": [207, 210, 229, 230], "fraction": [207, 210, 288], "dispers": 207, "rs_seri": 208, "wester": 210, "articl": 210, "simpl": 210, "support": 210, "back": 210, "cyclotom": 210, "gr\u00f6bner": 210, "mistak": 211, "prettyprint": 211, "rcodeprint": 211, "smt": 211, "lib": 211, "mapl": 211, "javascript": 211, "julia": 211, "octav": 211, "matlab": 211, "rust": 211, "gtk": 211, "lambdaprint": 211, "latexprint": 211, "mathmlprint": 211, "pythoncodeprint": 211, "pythonprint": 211, "srepr": [211, 287], "strprinter": 211, "preview": 211, "codeprint": 211, "preced": 211, "dotprint": 211, "subexpress": 212, "detect": 212, "compound": [217, 219, 231], "recurs": [217, 283], "gruntz": 218, "intuit": 218, "residu": 218, "setkind": 219, "hongguang": 220, "fu": 220, "rule": [220, 262], "notat": 221, "increment": 221, "decrement": 221, "indic": 221, "around": 221, "loos": 221, "end": 221, "confluenc": 221, "extend": 221, "heurist": 227, "riccati": 227, "inform": [227, 228], "pde": [228, 229, 230], "deutil": 229, "recurr": 229, "de": [229, 230], "wrong": 230, "why": [230, 282], "we": 230, "emploi": 230, "search": 230, "deal": 230, "where": 230, "known": 230, "plan": 230, "transolv": 230, "continu": [231, 288], "stochast": 231, "process": 231, "dim": [232, 233], "contract": 232, "diagon": [232, 284], "explicit": 233, "pytest": 240, "randomis": 241, "detail": [243, 244, 260], "routin": 244, "decor": 245, "enum": 246, "variat": 249, "memoiz": 251, "pkgdata": 253, "inspect": 254, "time": 255, "orient": [258, 261], "locat": 261, "coordsys3d": 261, "orient_new": 261, "AND": 261, "quadrilater": 262, "third": 262, "del": [262, 263], "curvilinear": 263, "applic": 266, "calcul": 266, "perimet": 266, "surfac": 266, "area": 266, "volum": 266, "flux": 266, "stoke": 266, "introductori": [276, 281], "quick": [277, 278, 280, 283, 284], "two": 280, "final": 280, "read": 280, "understand": 283, "through": 283, "invari": 283, "walk": 283, "prevent": 283, "shape": 284, "access": 284, "row": 284, "column": 284, "delet": 284, "insert": 284, "determin": 284, "rref": 284, "nullspac": 284, "columnspac": 284, "eigenvalu": 284, "eigenvector": 284, "next": 285, "preliminari": 286, "exercis": 286, "str": 287, "mathml": 287, "dot": 287, "cancel": 288, "apart": 288, "trigsimp": 288, "expand_trig": 288, "powsimp": 288, "expand_power_exp": 288, "expand_power_bas": 288, "powdenest": 288, "expand_log": 288, "logcombin": 288, "expand_func": 288, "hyperexpand": 288, "combsimp": 288, "gammasimp": 288}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Citing SymPy": [[0, "citing-sympy"]], "Build the Documentation": [[1, "build-the-documentation"]], "Required dependencies": [[1, "required-dependencies"]], "Docker": [[1, "docker"], [1, "id3"], [1, "id4"]], "Debian/Ubuntu": [[1, "debian-ubuntu"]], "Fedora": [[1, "fedora"]], "Mac": [[1, "mac"]], "Windows 10": [[1, "windows-10"]], "Build the Docs": [[1, "build-the-docs"]], "Local Installation": [[1, "local-installation"], [1, "id5"]], "SymPy Logos": [[1, "sympy-logos"]], "View the Docs": [[1, "view-the-docs"]], "Auto-Rebuild with the Live Server": [[1, "auto-rebuild-with-the-live-server"]], "PDF Documentation": [[1, "pdf-documentation"]], "Debugging": [[2, "debugging"]], "Dependencies": [[3, "dependencies"]], "Hard Dependencies": [[3, "hard-dependencies"]], "Optional Dependencies": [[3, "optional-dependencies"]], "Recommended Optional Dependencies": [[3, "recommended-optional-dependencies"]], "Interactive Use": [[3, "interactive-use"]], "Printing": [[3, "printing"], [20, "printing"], [90, "module-sympy.interactive.printing"], [116, "printing"], [185, "printing"], [211, "printing"], [287, "printing"]], "Parsing": [[3, "parsing"], [104, "module-sympy.parsing"]], "Logic": [[3, "logic"], [92, "module-sympy.logic"], [267, "logic"], [270, "logic"]], "Plotting": [[3, "plotting"], [197, "module-sympy.plotting.plot"]], "lambdify": [[3, "lambdify"], [277, "lambdify"]], "Code Generation": [[3, "code-generation"], [43, "code-generation"], [267, "code-generation"], [269, "code-generation"]], "Autowrap": [[3, "autowrap"], [43, "autowrap"]], "Code Printers": [[3, "code-printers"]], "Testing-Only Dependencies": [[3, "testing-only-dependencies"]], "Statistics": [[3, "statistics"]], "Optional SymEngine Backend": [[3, "optional-symengine-backend"]], "Sage": [[3, "sage"]], "Development Dependencies": [[3, "development-dependencies"]], "Getting the Source Code": [[3, "getting-the-source-code"]], "Running the Tests": [[3, "running-the-tests"]], "Building the Documentation": [[3, "building-the-documentation"]], "Running the Benchmarks": [[3, "running-the-benchmarks"]], "Deprecation Policy": [[4, "deprecation-policy"]], "What is a deprecation?": [[4, "what-is-a-deprecation"]], "Try to avoid backwards incompatible changes in the first place": [[4, "try-to-avoid-backwards-incompatible-changes-in-the-first-place"]], "When does a change require deprecation?": [[4, "when-does-a-change-require-deprecation"]], "Public API": [[4, null]], "Not Public API": [[4, null]], "The purpose of deprecation": [[4, "the-purpose-of-deprecation"]], "When it is not technically possible to deprecate": [[4, "when-it-is-not-technically-possible-to-deprecate"]], "How long should deprecations last?": [[4, "how-long-should-deprecations-last"]], "How to deprecate code": [[4, "how-to-deprecate-code"]], "Checklist": [[4, "checklist"]], "Adding the deprecation to the code": [[4, "adding-the-deprecation-to-the-code"]], "Documenting a deprecation": [[4, "documenting-a-deprecation"]], "Release notes entry": [[4, "release-notes-entry"]], "Development Environment Setup": [[5, "development-environment-setup"]], "Git Setup": [[5, "git-setup"]], "Get the SymPy Code": [[5, "get-the-sympy-code"]], "Virtual Environment Setup": [[5, "virtual-environment-setup"]], "Run the Tests": [[5, "run-the-tests"]], "SymPy Docstrings Style Guide": [[6, "sympy-docstrings-style-guide"]], "General Guidelines": [[6, "general-guidelines"], [7, "general-guidelines"]], "Formatting": [[6, "formatting"]], "Sections": [[6, "sections"]], "1. Single-Sentence Summary": [[6, "single-sentence-summary"]], "2. Explanation Section": [[6, "explanation-section"]], "3. Examples Section": [[6, "examples-section"]], "4. Parameters Section": [[6, "parameters-section"]], "5. See Also Section": [[6, "see-also-section"]], "6. References Section": [[6, "references-section"]], "Sample Docstring": [[6, "sample-docstring"]], "Docstrings for Classes that are Mathematical Functions": [[6, "docstrings-for-classes-that-are-mathematical-functions"]], "Best Practices for Writing Docstrings": [[6, "best-practices-for-writing-docstrings"]], "Importing Docstrings into the Sphinx Documentation": [[6, "importing-docstrings-into-the-sphinx-documentation"]], "Cross-Referencing": [[6, "cross-referencing"]], "Docstring Style Guide": [[7, "docstring-style-guide"]], "Types of Documentation": [[7, "types-of-documentation"]], "Narrative Documentation Guidelines": [[7, "narrative-documentation-guidelines"]], "Documentation using Markdown": [[7, "documentation-using-markdown"]], "Best Practices for Writing Documentation": [[7, "best-practices-for-writing-documentation"]], "Formatting Preferences": [[7, "formatting-preferences"]], "Math": [[7, "math"]], "LaTeX Recommendations": [[7, "latex-recommendations"]], "Code": [[7, "code"]], "Headings": [[7, "headings"]], "Style Preferences": [[7, "style-preferences"]], "Spelling and Punctuation": [[7, "spelling-and-punctuation"]], "Capitalization": [[7, "capitalization"]], "Tone Preferences": [[7, "tone-preferences"]], "Contributing": [[8, "contributing"], [32, "contributing"]], "Making a Contribution": [[9, "making-a-contribution"]], "List of active deprecations": [[10, "list-of-active-deprecations"]], "Silencing SymPy Deprecation Warnings": [[10, "silencing-sympy-deprecation-warnings"]], "Version 1.13": [[10, "version-1-13"]], "Version 1.12": [[10, "version-1-12"]], "The ManagedProperties metaclass": [[10, "the-managedproperties-metaclass"]], "New Joint coordinate format": [[10, "new-joint-coordinate-format"]], "New Joint intermediate frames": [[10, "new-joint-intermediate-frames"]], "Change in joint attachment point argument": [[10, "change-in-joint-attachment-point-argument"]], "Version 1.11": [[10, "version-1-11"]], "Modules sympy.tensor.array.expressions.conv_* renamed to sympy.tensor.array.expressions.from_*": [[10, "modules-sympy-tensor-array-expressions-conv-renamed-to-sympy-tensor-array-expressions-from"]], "New Mathematica code parser": [[10, "new-mathematica-code-parser"]], "Redundant static methods in carmichael": [[10, "redundant-static-methods-in-carmichael"]], "The check argument to HadamardProduct, MatAdd and MatMul": [[10, "the-check-argument-to-hadamardproduct-matadd-and-matmul"]], "Version 1.10": [[10, "version-1-10"]], "Some traversal functions have been moved": [[10, "some-traversal-functions-have-been-moved"]], "sympy.core.trace": [[10, "sympy-core-trace"]], "The sympy.core.compatibility submodule": [[10, "the-sympy-core-compatibility-submodule"]], "Version 1.9": [[10, "version-1-9"]], "expr_free_symbols": [[10, "expr-free-symbols"]], "sympy.stats.sample(numsamples=n)": [[10, "sympy-stats-sample-numsamples-n"]], "sympy.polys.solvers.RawMatrix": [[10, "sympy-polys-solvers-rawmatrix"]], "Non-Expr objects in a Matrix": [[10, "non-expr-objects-in-a-matrix"]], "The get_segments attribute of plotting objects": [[10, "the-get-segments-attribute-of-plotting-objects"]], "The mdft function in sympy.physics.matrices": [[10, "the-mdft-function-in-sympy-physics-matrices"]], "The private SparseMatrix._smat and DenseMatrix._mat attributes": [[10, "the-private-sparsematrix-smat-and-densematrix-mat-attributes"]], "laplace_transform of a Matrix with noconds=False": [[10, "laplace-transform-of-a-matrix-with-noconds-false"]], "Version 1.8": [[10, "version-1-8"]], "sympy.printing.theanocode": [[10, "sympy-printing-theanocode"]], "sympy.assumptions.handlers.AskHandler and related methods": [[10, "sympy-assumptions-handlers-askhandler-and-related-methods"]], "Version 1.7.1": [[10, "version-1-7-1"]], "Calling sympy.stats.StochasticProcess.distribution with RandomIndexedSymbol": [[10, "calling-sympy-stats-stochasticprocess-distribution-with-randomindexedsymbol"]], "Version 1.7": [[10, "version-1-7"]], "sympy.stats.DiscreteMarkovChain.absorbing_probabilites()": [[10, "sympy-stats-discretemarkovchain-absorbing-probabilites"]], "sympy.utilities.misc.find_executable()": [[10, "sympy-utilities-misc-find-executable"]], "Mutable attributes in sympy.diffgeom": [[10, "mutable-attributes-in-sympy-diffgeom"]], "The unicode argument and attribute to sympy.printing.pretty.stringpict.prettyForm and the sympy.printing.pretty.pretty_symbology.xstr function": [[10, "the-unicode-argument-and-attribute-to-sympy-printing-pretty-stringpict-prettyform-and-the-sympy-printing-pretty-pretty-symbology-xstr-function"]], "Passing the arguments to lambdify as a set": [[10, "passing-the-arguments-to-lambdify-as-a-set"]], "Core operators no longer accept non-Expr args": [[10, "core-operators-no-longer-accept-non-expr-args"]], "Version 1.6": [[10, "version-1-6"]], "Various sympy.utilities submodules have moved": [[10, "various-sympy-utilities-submodules-have-moved"]], "sympy.testing.randtest": [[10, "sympy-testing-randtest"]], "Mixing Poly and non-polynomial expressions in binary operations": [[10, "mixing-poly-and-non-polynomial-expressions-in-binary-operations"]], "The print_cyclic flag of sympy.combinatorics.Permutation": [[10, "the-print-cyclic-flag-of-sympy-combinatorics-permutation"]], "Using integrate with Poly": [[10, "using-integrate-with-poly"]], "The string fallback in sympify()": [[10, "the-string-fallback-in-sympify"]], "Creating an indefinite Integral with an Eq argument": [[10, "creating-an-indefinite-integral-with-an-eq-argument"]], "Version 1.5": [[10, "version-1-5"]], "Tensor.fun_eval and Tensor.__call__": [[10, "tensor-fun-eval-and-tensor-call"]], "TensorType": [[10, "tensortype"]], "The dummy_fmt argument to TensorIndexType": [[10, "the-dummy-fmt-argument-to-tensorindextype"]], "The metric argument to TensorIndexType": [[10, "the-metric-argument-to-tensorindextype"]], "The get_kronecker_delta() and get_epsilon() methods of TensorIndexType": [[10, "the-get-kronecker-delta-and-get-epsilon-methods-of-tensorindextype"]], "The tensorsymmetry() function": [[10, "the-tensorsymmetry-function"]], "The tensorhead() function": [[10, "the-tensorhead-function"]], "The is_EmptySet attribute of sets": [[10, "the-is-emptyset-attribute-of-sets"]], "ProductSet(iterable)": [[10, "productset-iterable"]], "The set_potential_energy method in sympy.physics.mechanics": [[10, "the-set-potential-energy-method-in-sympy-physics-mechanics"]], "Using a set for the condition in ConditionSet": [[10, "using-a-set-for-the-condition-in-conditionset"]], "The max_degree and get_upper_degree properties of sympy.polys.multivariate_resultants.DixonResultant": [[10, "the-max-degree-and-get-upper-degree-properties-of-sympy-polys-multivariate-resultants-dixonresultant"]], "Non-tuple iterable for the first argument to Lambda": [[10, "non-tuple-iterable-for-the-first-argument-to-lambda"]], "The evaluate flag to differentiate_finite": [[10, "the-evaluate-flag-to-differentiate-finite"]], "Version 1.4": [[10, "version-1-4"]], "TensorIndexType.data and related methods": [[10, "tensorindextype-data-and-related-methods"]], "Glossary": [[11, "glossary"]], "Gotchas and Pitfalls": [[12, "gotchas-and-pitfalls"]], "Introduction": [[12, "introduction"], [16, "introduction"], [35, "introduction"], [42, "introduction"], [43, "introduction"], [44, "introduction"], [52, "introduction"], [64, "introduction"], [74, "introduction"], [92, "introduction"], [126, "introduction"], [143, "introduction"], [181, "introduction"], [192, "introduction"], [197, "introduction"], [198, "introduction"], [199, "introduction"], [206, "introduction"], [210, "introduction"], [265, "introduction"], [282, "introduction"]], "Equals Signs (=)": [[12, "equals-signs"]], "Single Equals Sign": [[12, "single-equals-sign"]], "Double Equals Signs": [[12, "double-equals-signs"]], "Variables": [[12, "variables"]], "Variables Assignment does not Create a Relation Between Expressions": [[12, "variables-assignment-does-not-create-a-relation-between-expressions"]], "Symbols": [[12, "symbols"], [280, "symbols"]], "Functions": [[12, "functions"], [69, "functions"], [232, "functions"]], "Symbolic Expressions": [[12, "symbolic-expressions"]], "Python numbers vs. SymPy Numbers": [[12, "python-numbers-vs-sympy-numbers"]], "Evaluating Expressions with Floats and Rationals": [[12, "evaluating-expressions-with-floats-and-rationals"]], "Immutability of Expressions": [[12, "immutability-of-expressions"]], "Mathematical Operators": [[12, "mathematical-operators"]], "Inverse Trig Functions": [[12, "inverse-trig-functions"]], "Sqrt is not a Function": [[12, "sqrt-is-not-a-function"]], "Special Symbols": [[12, "special-symbols"]], "Lists": [[12, "lists"]], "Dictionaries": [[12, "dictionaries"]], "Tuples": [[12, "tuples"]], "Keyword Arguments": [[12, "keyword-arguments"]], "Getting help from within SymPy": [[12, "getting-help-from-within-sympy"]], "help()": [[12, "help"]], "Explanations": [[13, "explanations"], [32, "explanations"]], "Solve Output by Type": [[14, "solve-output-by-type"]], "Empty List": [[14, "empty-list"]], "List Of Values": [[14, "list-of-values"]], "Single Dictionary": [[14, "single-dictionary"]], "List of Tuples": [[14, "list-of-tuples"]], "List of Dictionaries": [[14, "list-of-dictionaries"]], "Boolean or Relational": [[14, "boolean-or-relational"]], "Classification of SymPy objects": [[15, "classification-of-sympy-objects"]], "class": [[15, "class"]], "kind": [[15, "kind"], [62, "module-sympy.core.kind"]], "sets and assumptions": [[15, "sets-and-assumptions"]], "func": [[15, "func"], [283, "func"]], "Finite Difference Approximations to Derivatives": [[16, "finite-difference-approximations-to-derivatives"]], "A Direct Method Using SymPy Matrices": [[16, "a-direct-method-using-sympy-matrices"]], "SymPy Special Topics": [[17, "sympy-special-topics"]], "Assumptions": [[18, "assumptions"], [20, "assumptions"], [38, "module-sympy.assumptions"]], "The (old) assumptions system": [[18, "the-old-assumptions-system"]], "Gotcha: symbols with different assumptions": [[18, "gotcha-symbols-with-different-assumptions"]], "Applying assumptions to string inputs": [[18, "applying-assumptions-to-string-inputs"]], "Predicates": [[18, "predicates"], [39, "id1"]], "Assumptions predicates for the (old) assumptions": [[18, "id28"]], "References for the above definitions": [[18, "references-for-the-above-definitions"]], "Implications": [[18, "implications"]], "Interpretation of the predicates": [[18, "interpretation-of-the-predicates"]], "Other is_* properties": [[18, "other-is-properties"]], "Implementing assumptions handlers": [[18, "implementing-assumptions-handlers"]], "Mechanism of the assumptions system": [[18, "mechanism-of-the-assumptions-system"]], "Limitations": [[18, "limitations"], [25, "limitations"], [86, "limitations"]], "Combining predicates with or": [[18, "combining-predicates-with-or"]], "Relations between different symbols": [[18, "relations-between-different-symbols"]], "Symbolic and fuzzy booleans": [[19, "symbolic-and-fuzzy-booleans"]], "Symbolic Boolean vs three valued bool": [[19, "symbolic-boolean-vs-three-valued-bool"]], "Three-valued logic with fuzzy bools": [[19, "three-valued-logic-with-fuzzy-bools"]], "Three-valued logic with symbolic Booleans": [[19, "three-valued-logic-with-symbolic-booleans"]], "Writing Custom Functions": [[20, "writing-custom-functions"]], "Easy Cases: Fully Symbolic or Fully Evaluated": [[20, "easy-cases-fully-symbolic-or-fully-evaluated"]], "The Fully Symbolic Case": [[20, "the-fully-symbolic-case"]], "The Fully Evaluated Case": [[20, "the-fully-evaluated-case"]], "Creating a Custom Function": [[20, "creating-a-custom-function"]], "Defining Automatic Evaluation with eval()": [[20, "defining-automatic-evaluation-with-eval"]], "Reminder": [[20, null]], "Best Practices for eval()": [[20, "best-practices-for-eval"]], "Key Point": [[20, null]], "Note": [[20, null]], "Numerical Evaluation with evalf()": [[20, "numerical-evaluation-with-evalf"]], "Rewriting and Simplification": [[20, "rewriting-and-simplification"]], "rewrite()": [[20, "rewrite"]], "doit()": [[20, "doit"]], "expand()": [[20, "expand"]], "Differentiation": [[20, "differentiation"]], "Other Methods": [[20, "other-methods"], [33, "other-methods"]], "inverse()": [[20, "inverse"]], "as_real_imag()": [[20, "as-real-imag"]], "Miscellaneous _eval_* methods": [[20, "miscellaneous-eval-methods"]], "Complete Examples": [[20, "complete-examples"]], "Versine": [[20, "versine"]], "Definition": [[20, "definition"], [20, "id2"], [20, "id4"], [80, "definition"]], "Examples": [[20, "examples"], [20, "id3"], [20, "id5"], [24, "examples"], [34, "examples"], [62, "examples"], [62, "id48"], [86, "examples"], [89, "examples"], [89, "id38"], [102, "examples"], [102, "id61"], [106, "examples"], [113, "examples"], [148, "examples"], [180, "examples"], [195, "examples"], [195, "id1"], [210, "examples"], [218, "examples"], [218, "id3"], [231, "examples"], [232, "examples"], [233, "examples"], [236, "examples"]], "divides": [[20, "divides"]], "Fused Multiply-Add (FMA)": [[20, "fused-multiply-add-fma"]], "Additional Tips": [[20, "additional-tips"]], "How-to Guides": [[21, "how-to-guides"], [32, "how-to-guides"]], "Find the Roots of a Polynomial Algebraically or Numerically": [[22, "find-the-roots-of-a-polynomial-algebraically-or-numerically"]], "Alternatives to Consider": [[22, "alternatives-to-consider"], [24, "alternatives-to-consider"], [25, "alternatives-to-consider"], [27, "alternatives-to-consider"], [28, "alternatives-to-consider"], [29, "alternatives-to-consider"], [30, "alternatives-to-consider"]], "Example of Finding the Roots of a Polynomial Algebraically": [[22, "example-of-finding-the-roots-of-a-polynomial-algebraically"]], "Functions to Find the Roots of a Polynomial": [[22, "functions-to-find-the-roots-of-a-polynomial"]], "Guidance": [[22, "guidance"], [24, "guidance"], [25, "guidance"], [26, "guidance"], [27, "guidance"], [28, "guidance"], [29, "guidance"], [30, "guidance"]], "Find the Roots of a Polynomial": [[22, "find-the-roots-of-a-polynomial"]], "Algebraic Solution Without Root Multiplicities": [[22, "algebraic-solution-without-root-multiplicities"]], "Algebraic Solution With Root Multiplicities": [[22, "algebraic-solution-with-root-multiplicities"]], "roots": [[22, "roots"]], "Factor the Equation": [[22, "factor-the-equation"]], "Exact Numeric Solution With Root Multiplicities": [[22, "exact-numeric-solution-with-root-multiplicities"]], "real_roots": [[22, "real-roots"]], "Approximate Numeric Solution With Root Multiplicities": [[22, "approximate-numeric-solution-with-root-multiplicities"]], "nroots": [[22, "nroots"]], "Complex Roots": [[22, "complex-roots"]], "Use the Solution Result": [[22, "use-the-solution-result"], [25, "use-the-solution-result"], [26, "use-the-solution-result"], [27, "use-the-solution-result"], [28, "use-the-solution-result"], [29, "use-the-solution-result"]], "List (all_roots, real_roots, nroots)": [[22, "list-all-roots-real-roots-nroots"]], "List of dictionaries (solve)": [[22, "list-of-dictionaries-solve"]], "Dictionary (roots)": [[22, "dictionary-roots"]], "Expression (factor)": [[22, "expression-factor"]], "Tradeoffs": [[22, "tradeoffs"]], "Mathematical Exactness, Completeness of List of Roots, and Speed": [[22, "mathematical-exactness-completeness-of-list-of-roots-and-speed"]], "Get All Roots, Perhaps Implicitly": [[22, "get-all-roots-perhaps-implicitly"]], "Numerically Evaluate CRootOf Roots": [[22, "numerically-evaluate-crootof-roots"]], "Representing Roots": [[22, "representing-roots"]], "Not All Equations Can Be Solved": [[22, "not-all-equations-can-be-solved"], [25, "not-all-equations-can-be-solved"], [26, "not-all-equations-can-be-solved"], [29, "not-all-equations-can-be-solved"]], "Equations With No Closed-Form Solution": [[22, "equations-with-no-closed-form-solution"], [26, "equations-with-no-closed-form-solution"], [29, "equations-with-no-closed-form-solution"]], "Report a Bug": [[22, "report-a-bug"], [24, "report-a-bug"], [25, "report-a-bug"], [26, "report-a-bug"], [27, "report-a-bug"], [28, "report-a-bug"], [29, "report-a-bug"], [30, "report-a-bug"], [31, "report-a-bug"]], "Solve Equations": [[23, "solve-equations"]], "Reduce One or a System of Inequalities for a Single Variable Algebraically": [[24, "reduce-one-or-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Reducing a System of Inequalities for a Single Variable Algebraically": [[24, "reducing-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Reducing One Inequality for a Single Variable Algebraically": [[24, "reducing-one-inequality-for-a-single-variable-algebraically"]], "Include the Variable to Be Reduced for in the Function Call": [[24, "include-the-variable-to-be-reduced-for-in-the-function-call"]], "Reduce a System of Inequalities Algebraically": [[24, "reduce-a-system-of-inequalities-algebraically"]], "Use the Result": [[24, "use-the-result"]], "Extract a List of Decomposed Relations": [[24, "extract-a-list-of-decomposed-relations"]], "Extract a Tuple of Relations": [[24, "extract-a-tuple-of-relations"]], "Limitations of Inequality Reduction Using SymPy": [[24, "limitations-of-inequality-reduction-using-sympy"]], "SymPy Can Reduce for Only One Symbol of Interest Per Inequality": [[24, "sympy-can-reduce-for-only-one-symbol-of-interest-per-inequality"]], "Limitations on Types of Inequalities That SymPy Can Solve": [[24, "limitations-on-types-of-inequalities-that-sympy-can-solve"]], "Not All Results Are Returned for Periodic Functions": [[24, "not-all-results-are-returned-for-periodic-functions"]], "Not All Systems of Inequalities Can Be Reduced": [[24, "not-all-systems-of-inequalities-can-be-reduced"]], "Systems of Inequalities Which Cannot Be Satisfied": [[24, "systems-of-inequalities-which-cannot-be-satisfied"]], "Systems of Inequalities That Cannot Be Reduced Analytically": [[24, "systems-of-inequalities-that-cannot-be-reduced-analytically"]], "Inequalities Which Can Be Reduced Analytically, and SymPy Cannot Reduce": [[24, "inequalities-which-can-be-reduced-analytically-and-sympy-cannot-reduce"]], "Solve a Diophantine Equation Algebraically": [[25, "solve-a-diophantine-equation-algebraically"]], "Example of Solving a Diophantine Equation": [[25, "example-of-solving-a-diophantine-equation"]], "Diophantine Equation Can be Expressed as Expression That Equals Zero": [[25, "diophantine-equation-can-be-expressed-as-expression-that-equals-zero"]], "Specify the Order of Symbols in the Result": [[25, "specify-the-order-of-symbols-in-the-result"]], "Extract Expressions From the Result": [[25, "extract-expressions-from-the-result"]], "Work With Parameters": [[25, "work-with-parameters"]], "Verify a Solution": [[25, "verify-a-solution"]], "Programmatically Extract Parameter Symbols": [[25, "programmatically-extract-parameter-symbols"]], "Equations With No Solution": [[25, "equations-with-no-solution"], [27, "equations-with-no-solution"], [29, "equations-with-no-solution"]], "Solve an Equation Algebraically": [[26, "solve-an-equation-algebraically"], [26, "id1"]], "Alternatives to consider": [[26, "alternatives-to-consider"]], "Solving Functions": [[26, "solving-functions"]], "Make Your Equation Into an Expression That Equals Zero": [[26, "make-your-equation-into-an-expression-that-equals-zero"]], "Put Your Equation Into Eq Form": [[26, "put-your-equation-into-eq-form"]], "Restrict the Domain of Solutions": [[26, "restrict-the-domain-of-solutions"]], "Explicitly Represent Infinite Sets of Possible Solutions": [[26, "explicitly-represent-infinite-sets-of-possible-solutions"]], "Substitute Solutions From solve() Into an Expression": [[26, "substitute-solutions-from-solve-into-an-expression"]], "solveset() Solution Sets Cannot Necessarily Be Interrogated Programmatically": [[26, "solveset-solution-sets-cannot-necessarily-be-interrogated-programmatically"]], "Options That Can Speed up solve()": [[26, "options-that-can-speed-up-solve"], [30, "options-that-can-speed-up-solve"], [31, "options-that-can-speed-up-solve"]], "Equations Which Have a Closed-Form Solution, and SymPy Cannot Solve": [[26, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"], [30, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"]], "Solve a Matrix Equation Algebraically": [[27, "solve-a-matrix-equation-algebraically"]], "Solve a Matrix Equation": [[27, "solve-a-matrix-equation"]], "Matrix Usually Must Be Square": [[27, "matrix-usually-must-be-square"]], "Methods for Solving Matrix Equations": [[27, "methods-for-solving-matrix-equations"]], "Solving Several Matrix Equations With the Same Matrix": [[27, "solving-several-matrix-equations-with-the-same-matrix"]], "Work With Symbolic Matrices": [[27, "work-with-symbolic-matrices"]], "Speed up Solving Matrix Equations": [[27, "speed-up-solving-matrix-equations"]], "Use the Solution as a Vector": [[27, "use-the-solution-as-a-vector"]], "Extract Elements From the Solution": [[27, "extract-elements-from-the-solution"]], "Solve One or a System of Equations Numerically": [[28, "solve-one-or-a-system-of-equations-numerically"]], "Example of Numerically Solving an Equation": [[28, "example-of-numerically-solving-an-equation"]], "Find Complex Roots of a Real Function": [[28, "find-complex-roots-of-a-real-function"]], "Ensure the Root Found is in a Given Interval": [[28, "ensure-the-root-found-is-in-a-given-interval"]], "Solve a System of Equations Numerically": [[28, "solve-a-system-of-equations-numerically"]], "Increase Precision of the Solution": [[28, "increase-precision-of-the-solution"]], "Create a Function That Can Be Solved With SciPy": [[28, "create-a-function-that-can-be-solved-with-scipy"]], "Substitute the Result Into an Expression": [[28, "substitute-the-result-into-an-expression"]], "Not all Equations Can be Solved": [[28, "not-all-equations-can-be-solved"]], "Equations With no Solution": [[28, "equations-with-no-solution"]], "Solve an Ordinary Differential Equation (ODE) Algebraically": [[29, "solve-an-ordinary-differential-equation-ode-algebraically"]], "Solve an Ordinary Differential Equation (ODE)": [[29, "solve-an-ordinary-differential-equation-ode"]], "Defining Derivatives": [[29, "defining-derivatives"]], "Options to Define an ODE": [[29, "options-to-define-an-ode"]], "Option 1: Define a Function Without Including Its Independent Variable": [[29, "option-1-define-a-function-without-including-its-independent-variable"]], "Specify Initial Conditions or Boundary Conditions": [[29, "specify-initial-conditions-or-boundary-conditions"], [29, "id1"]], "Option 2: Define a Function of an Independent Variable": [[29, "option-2-define-a-function-of-an-independent-variable"]], "Beware Copying and Pasting Results": [[29, "beware-copying-and-pasting-results"]], "Extract the Result for One Solution and Function": [[29, "extract-the-result-for-one-solution-and-function"]], "Some ODEs Cannot Be Solved Explicitly, Only Implicitly": [[29, "some-odes-cannot-be-solved-explicitly-only-implicitly"]], "Extract the Result for Multiple Function-Solution Pairs": [[29, "extract-the-result-for-multiple-function-solution-pairs"]], "If There is One Solution Set": [[29, "if-there-is-one-solution-set"]], "If There are Multiple Solution Sets": [[29, "if-there-are-multiple-solution-sets"]], "Work With Arbitrary Constants": [[29, "work-with-arbitrary-constants"]], "Numerically Solve an ODE in SciPy": [[29, "numerically-solve-an-ode-in-scipy"]], "Ordinary Differential Equation Solving Hints": [[29, "ordinary-differential-equation-solving-hints"]], "Return Unevaluated Integrals": [[29, "return-unevaluated-integrals"]], "Select a Specific Solver": [[29, "select-a-specific-solver"]], "Solve a System of Equations Algebraically": [[30, "solve-a-system-of-equations-algebraically"]], "Examples of Solving a System of Equations Algebraically": [[30, "examples-of-solving-a-system-of-equations-algebraically"]], "Solve a System of Linear Equations Algebraically": [[30, "solve-a-system-of-linear-equations-algebraically"]], "Solve a System of Nonlinear Equations Algebraically": [[30, "solve-a-system-of-nonlinear-equations-algebraically"]], "Solve and Use Results in a Dictionary": [[30, "solve-and-use-results-in-a-dictionary"]], "Solve Into a Solution Given as a Dictionary": [[30, "solve-into-a-solution-given-as-a-dictionary"]], "Use a Solution Given as a Dictionary": [[30, "use-a-solution-given-as-a-dictionary"]], "Solve Results in a Set": [[30, "solve-results-in-a-set"]], "Not All Systems of Equations Can be Solved": [[30, "not-all-systems-of-equations-can-be-solved"]], "Systems of Equations With no Solution": [[30, "systems-of-equations-with-no-solution"]], "Systems of Equations With no Closed-Form Solution": [[30, "systems-of-equations-with-no-closed-form-solution"]], "Solving Guidance": [[31, "solving-guidance"]], "Numeric Solutions": [[31, "numeric-solutions"]], "Equations With no Closed-Form Solution": [[31, "equations-with-no-closed-form-solution"]], "When You Might Prefer a Numeric Solution": [[31, "when-you-might-prefer-a-numeric-solution"]], "Use Exact Values": [[31, "use-exact-values"]], "Include the Variable to be Solved for in the Function Call": [[31, "include-the-variable-to-be-solved-for-in-the-function-call"]], "Ensure Consistent Formatting From solve()": [[31, "ensure-consistent-formatting-from-solve"]], "Include Solutions Making Any Denominator Zero": [[31, "include-solutions-making-any-denominator-zero"]], "Do Not Simplify Solutions": [[31, "do-not-simplify-solutions"]], "Parse a String Representing the Equation": [[31, "parse-a-string-representing-the-equation"]], "Welcome to SymPy\u2019s documentation!": [[32, "welcome-to-sympy-s-documentation"]], "Installation": [[32, "installation"], [33, "installation"], [286, "installation"]], "Tutorials": [[32, "tutorials"], [276, "tutorials"]], "API Reference": [[32, "api-reference"], [243, "module-sympy.utilities.autowrap"], [244, "module-sympy.utilities.codegen"], [267, "api-reference"]], "Anaconda": [[33, "anaconda"]], "Git": [[33, "git"]], "Run SymPy": [[33, "run-sympy"]], "mpmath": [[33, "mpmath"]], "Questions": [[33, "questions"]], "abc": [[34, "module-sympy.abc"]], "Caveats": [[34, "caveats"]], "Algebras": [[35, "algebras"]], "Quaternion Reference": [[35, "module-sympy.algebras"]], "Ask": [[36, "module-sympy.assumptions.ask"]], "Assume": [[37, "module-sympy.assumptions.assume"]], "Predicate": [[38, "predicate"]], "Querying": [[38, "querying"]], "Contents": [[38, "contents"], [49, "contents"], [69, "contents"], [82, "contents"], [88, "contents"], [203, "contents"], [215, "contents"], [225, "contents"], [234, "contents"]], "Performance improvements": [[38, "performance-improvements"]], "Misc": [[38, "misc"]], "Common": [[39, "common"]], "Calculus": [[39, "calculus"], [41, "module-sympy.calculus"], [278, "calculus"]], "Matrix": [[39, "matrix"]], "Number Theory": [[39, "number-theory"], [102, "module-sympy.ntheory.generate"], [267, "number-theory"], [272, "number-theory"]], "Order": [[39, "order"]], "Sets": [[39, "sets"], [219, "sets"]], "Refine": [[40, "module-sympy.assumptions.refine"]], "Singularities": [[41, "singularities"]], "Finite difference weights": [[41, "finite-difference-weights"]], "Category Theory": [[42, "category-theory"]], "Base Class Reference": [[42, "module-sympy.categories"], [64, "base-class-reference"]], "Diagram Drawing": [[42, "module-sympy.categories.diagram_drawing"]], "Code printers (sympy.printing)": [[43, "code-printers-sympy-printing"]], "Codegen (sympy.utilities.codegen)": [[43, "codegen-sympy-utilities-codegen"]], "Classes and functions for rewriting expressions (sympy.codegen.rewriting)": [[43, "module-sympy.codegen.rewriting"]], "Tools for simplifying expressions using approximations (sympy.codegen.approximations)": [[43, "module-sympy.codegen.approximations"]], "Classes for abstract syntax trees (sympy.codegen.ast)": [[43, "module-sympy.codegen.ast"]], "AST Type Tree": [[43, "ast-type-tree"]], "Predefined types": [[43, "predefined-types"]], "Using the nodes": [[43, "using-the-nodes"]], "Special C math functions (sympy.codegen.cfunctions)": [[43, "module-sympy.codegen.cfunctions"]], "C specific AST nodes (sympy.codegen.cnodes)": [[43, "module-sympy.codegen.cnodes"]], "C++ specific AST nodes (sympy.codegen.cxxnodes)": [[43, "module-sympy.codegen.cxxnodes"]], "Fortran specific AST nodes (sympy.codegen.fnodes)": [[43, "module-sympy.codegen.fnodes"]], "Algorithms (sympy.codegen.algorithms)": [[43, "module-sympy.codegen.algorithms"]], "Python utilities (sympy.codegen.pyutils)": [[43, "module-sympy.codegen.pyutils"]], "C utilities (sympy.codegen.cutils)": [[43, "module-sympy.codegen.cutils"]], "Fortran utilities (sympy.codegen.futils)": [[43, "module-sympy.codegen.futils"]], "Finitely Presented Groups": [[44, "finitely-presented-groups"]], "Overview of Facilities": [[44, "overview-of-facilities"]], "The Construction of Finitely Presented Groups": [[44, "the-construction-of-finitely-presented-groups"]], "Free Groups and Words": [[44, "free-groups-and-words"]], "Construction of a Free Group": [[44, "construction-of-a-free-group"]], "Construction of words": [[44, "construction-of-words"]], "Coset Enumeration: The Todd-Coxeter Algorithm": [[44, "coset-enumeration-the-todd-coxeter-algorithm"]], "CosetTable": [[44, "cosettable"]], "Attributes of CosetTable": [[44, "attributes-of-cosettable"]], "Compression and Standardization": [[44, "compression-and-standardization"]], "Subgroups of Finite Index": [[44, "subgroups-of-finite-index"]], "Low Index Subgroups": [[44, "low-index-subgroups"]], "Constructing a presentation for a subgroup": [[44, "constructing-a-presentation-for-a-subgroup"]], "Reidemeister Schreier algorithm": [[44, "reidemeister-schreier-algorithm"]], "Bibliography": [[44, "bibliography"], [52, "bibliography"]], "Galois Groups": [[45, "module-sympy.combinatorics.galois"], [206, "galois-groups"]], "References": [[45, "references"], [62, "references"], [74, "references"], [80, "references"], [89, "references"], [148, "references"], [151, "references"], [196, "references"], [220, "references"], [221, "references"], [224, "references"], [230, "references"]], "Gray Code": [[46, "module-sympy.combinatorics.graycode"]], "Group constructors": [[47, "module-sympy.combinatorics.group_constructs"]], "Nilpotent, Abelian and Cyclic Numbers": [[48, "module-sympy.combinatorics.group_numbers"]], "Combinatorics": [[49, "combinatorics"]], "Named Groups": [[50, "module-sympy.combinatorics.named_groups"]], "Partitions": [[51, "module-sympy.combinatorics.partitions"]], "Polycyclic Groups": [[52, "polycyclic-groups"]], "Overview of functionalities": [[52, "overview-of-functionalities"]], "The Construction of Polycyclic Groups": [[52, "the-construction-of-polycyclic-groups"]], "Attributes of PolycyclicGroup": [[52, "attributes-of-polycyclicgroup"]], "The Construction of Collector": [[52, "the-construction-of-collector"]], "Attributes of Collector": [[52, "attributes-of-collector"]], "Computation of Minimal Uncollected Subword": [[52, "computation-of-minimal-uncollected-subword"]], "Computation of Subword Index": [[52, "computation-of-subword-index"]], "Computation of Collected Word": [[52, "computation-of-collected-word"]], "Computation of Polycyclic Presentation": [[52, "computation-of-polycyclic-presentation"]], "Computation of Exponent Vector": [[52, "computation-of-exponent-vector"]], "Depth of Polycyclic generator": [[52, "depth-of-polycyclic-generator"]], "Computation of Leading Exponent": [[52, "computation-of-leading-exponent"]], "Permutation Groups": [[53, "module-sympy.combinatorics.perm_groups"]], "Permutations": [[54, "module-sympy.combinatorics.permutations"]], "Generators": [[54, "module-sympy.combinatorics.generators"]], "Polyhedron": [[55, "module-sympy.combinatorics.polyhedron"]], "Prufer Sequences": [[56, "module-sympy.combinatorics.prufer"]], "Subsets": [[57, "module-sympy.combinatorics.subsets"]], "Tensor Canonicalization": [[58, "module-sympy.combinatorics.tensor_can"]], "Test Utilities": [[59, "module-sympy.combinatorics.testutil"]], "Utilities": [[60, "module-sympy.combinatorics.util"], [149, "module-sympy.physics.optics.utils"], [206, "utilities"], [248, "module-sympy.utilities"], [267, "utilities"], [275, "utilities"]], "Concrete": [[61, "concrete"]], "Hypergeometric terms": [[61, "hypergeometric-terms"]], "Concrete Class Reference": [[61, "concrete-class-reference"]], "Concrete Functions Reference": [[61, "concrete-functions-reference"]], "Core": [[62, "core"]], "sympify": [[62, "module-sympy.core.sympify"]], "assumptions": [[62, "module-sympy.core.assumptions"]], "See Also": [[62, "see-also"], [249, "see-also"]], "Notes": [[62, "notes"], [218, "notes"], [220, "notes"]], "Developers Notes": [[62, "developers-notes"]], "cache": [[62, "module-sympy.core.cache"]], "basic": [[62, "module-sympy.core.basic"]], "singleton": [[62, "module-sympy.core.singleton"]], "expr": [[62, "module-sympy.core.expr"]], "symbol": [[62, "module-sympy.core.symbol"]], "numbers": [[62, "module-sympy.core.numbers"]], "power": [[62, "module-sympy.core.power"]], "mul": [[62, "module-sympy.core.mul"]], "add": [[62, "module-sympy.core.add"]], "mod": [[62, "module-sympy.core.mod"]], "relational": [[62, "module-sympy.core.relational"]], "multidimensional": [[62, "module-sympy.core.multidimensional"]], "function": [[62, "module-sympy.core.function"]], "evalf": [[62, "module-sympy.core.evalf"], [277, "evalf"]], "containers": [[62, "module-sympy.core.containers"]], "exprtools": [[62, "module-sympy.core.exprtools"]], "Sorting": [[62, "sorting"]], "Random": [[62, "module-sympy.core.random"]], "Traversal": [[62, "module-sympy.core.traversal"]], "Cryptography": [[63, "cryptography"]], "Differential Geometry": [[64, "module-sympy.diffgeom"]], "Discrete": [[65, "discrete"]], "Transforms": [[65, "module-sympy.discrete.transforms"]], "Fast Fourier Transform": [[65, "fast-fourier-transform"]], "Number Theoretic Transform": [[65, "number-theoretic-transform"]], "Fast Walsh Hadamard Transform": [[65, "fast-walsh-hadamard-transform"]], "M\u00f6bius Transform": [[65, "mobius-transform"]], "Convolutions": [[65, "module-sympy.discrete.convolutions"]], "Convolution": [[65, "convolution"]], "Convolution using Fast Fourier Transform": [[65, "convolution-using-fast-fourier-transform"]], "Convolution using Number Theoretic Transform": [[65, "convolution-using-number-theoretic-transform"]], "Convolution using Fast Walsh Hadamard Transform": [[65, "convolution-using-fast-walsh-hadamard-transform"]], "Subset Convolution": [[65, "subset-convolution"]], "Covering Product": [[65, "covering-product"]], "Intersecting Product": [[65, "intersecting-product"]], "Numerical Evaluation": [[66, "numerical-evaluation"]], "Basics": [[66, "basics"], [267, "basics"], [268, "basics"]], "Floating-point numbers": [[66, "floating-point-numbers"]], "Accuracy and error handling": [[66, "accuracy-and-error-handling"]], "Sums and integrals": [[66, "sums-and-integrals"]], "Numerical simplification": [[66, "numerical-simplification"]], "Combinatorial": [[67, "combinatorial"]], "Enumeration": [[67, "enumeration"]], "Elementary": [[68, "elementary"]], "Complex Functions": [[68, "complex-functions"]], "Trigonometric": [[68, "trigonometric"]], "Trigonometric Functions": [[68, "trigonometric-functions"]], "Trigonometric Inverses": [[68, "trigonometric-inverses"]], "Hyperbolic": [[68, "hyperbolic"]], "Hyperbolic Functions": [[68, "hyperbolic-functions"]], "Hyperbolic Inverses": [[68, "hyperbolic-inverses"]], "Integer Functions": [[68, "integer-functions"]], "Exponential": [[68, "exponential"]], "Piecewise": [[68, "piecewise"]], "Miscellaneous": [[68, "miscellaneous"], [252, "module-sympy.utilities.misc"]], "Special": [[70, "special"]], "Dirac Delta and Related Discontinuous Functions": [[70, "dirac-delta-and-related-discontinuous-functions"]], "Gamma, Beta and Related Functions": [[70, "module-sympy.functions.special.gamma_functions"]], "Error Functions and Fresnel Integrals": [[70, "module-sympy.functions.special.error_functions"]], "Exponential, Logarithmic and Trigonometric Integrals": [[70, "exponential-logarithmic-and-trigonometric-integrals"]], "Bessel Type Functions": [[70, "module-sympy.functions.special.bessel"]], "Airy Functions": [[70, "airy-functions"]], "B-Splines": [[70, "b-splines"]], "Riemann Zeta and Related Functions": [[70, "module-sympy.functions.special.zeta_functions"]], "Hypergeometric Functions": [[70, "hypergeometric-functions"]], "Elliptic integrals": [[70, "module-sympy.functions.special.elliptic_integrals"]], "Mathieu Functions": [[70, "module-sympy.functions.special.mathieu_functions"]], "Orthogonal Polynomials": [[70, "module-sympy.functions.special.polynomials"]], "Jacobi Polynomials": [[70, "jacobi-polynomials"]], "Gegenbauer Polynomials": [[70, "gegenbauer-polynomials"]], "Chebyshev Polynomials": [[70, "chebyshev-polynomials"]], "Legendre Polynomials": [[70, "legendre-polynomials"]], "Hermite Polynomials": [[70, "hermite-polynomials"]], "Laguerre Polynomials": [[70, "laguerre-polynomials"]], "Spherical Harmonics": [[70, "spherical-harmonics"]], "Tensor Functions": [[70, "tensor-functions"]], "Curves": [[71, "module-sympy.geometry.curve"]], "Ellipses": [[72, "module-sympy.geometry.ellipse"]], "Entities": [[73, "module-sympy.geometry.entity"]], "Geometry": [[74, "geometry"]], "Available Entities": [[74, "available-entities"]], "Example Usage": [[74, "example-usage"]], "Intersection of medians": [[74, "intersection-of-medians"]], "An in-depth example: Pappus\u2019 Hexagon Theorem": [[74, "an-in-depth-example-pappus-hexagon-theorem"]], "Miscellaneous Notes": [[74, "miscellaneous-notes"]], "Future Work": [[74, "future-work"]], "Truth Setting Expressions": [[74, "truth-setting-expressions"]], "Three Dimensions and Beyond": [[74, "three-dimensions-and-beyond"]], "Geometry Visualization": [[74, "geometry-visualization"]], "Submodules": [[74, "submodules"]], "Lines": [[75, "module-sympy.geometry.line"]], "Plane": [[76, "module-sympy.geometry.plane"]], "Points": [[77, "module-sympy.geometry.point"], [260, "points"]], "Polygons": [[78, "module-sympy.geometry.polygon"]], "Utils": [[79, "module-sympy.geometry.util"]], "About Holonomic Functions": [[80, "about-holonomic-functions"]], "Converting other representations to holonomic": [[81, "converting-other-representations-to-holonomic"]], "Converting hypergeometric functions": [[81, "converting-hypergeometric-functions"]], "Converting Meijer G-functions": [[81, "converting-meijer-g-functions"]], "Converting symbolic expressions": [[81, "converting-symbolic-expressions"]], "Holonomic": [[82, "module-sympy.holonomic"]], "Internal API": [[83, "internal-api"]], "Operations on holonomic functions": [[84, "operations-on-holonomic-functions"]], "Addition and Multiplication": [[84, "addition-and-multiplication"]], "Integration and Differentiation": [[84, "integration-and-differentiation"]], "Composition with polynomials": [[84, "composition-with-polynomials"]], "Convert to holonomic sequence": [[84, "convert-to-holonomic-sequence"]], "Series expansion": [[84, "series-expansion"]], "Numerical evaluation": [[84, "numerical-evaluation"]], "Convert to a linear combination of hypergeometric functions": [[84, "convert-to-a-linear-combination-of-hypergeometric-functions"]], "Convert to a linear combination of Meijer G-functions": [[84, "convert-to-a-linear-combination-of-meijer-g-functions"]], "Convert to expressions": [[84, "convert-to-expressions"]], "Representation of holonomic functions in SymPy": [[85, "representation-of-holonomic-functions-in-sympy"]], "Uses and Current limitations": [[86, "uses-and-current-limitations"]], "Integration": [[86, "integration"]], "Computing Integrals using Meijer G-Functions": [[87, "computing-integrals-using-meijer-g-functions"]], "Overview": [[87, "overview"]], "Polar Numbers and Branched Functions": [[87, "polar-numbers-and-branched-functions"]], "Representing Branched Functions on the Argand Plane": [[87, "representing-branched-functions-on-the-argand-plane"]], "Table Lookups and Inverse Mellin Transforms": [[87, "table-lookups-and-inverse-mellin-transforms"]], "Applying the Integral Theorems": [[87, "applying-the-integral-theorems"]], "The G-Function Integration Theorems": [[87, "the-g-function-integration-theorems"]], "Conditions of Convergence for Integral (1)": [[87, "conditions-of-convergence-for-integral-1"]], "Conditions of Convergence for Integral (2)": [[87, "conditions-of-convergence-for-integral-2"]], "The Inverse Laplace Transform of a G-function": [[87, "the-inverse-laplace-transform-of-a-g-function"]], "How to compute the integral": [[87, "how-to-compute-the-integral"]], "When this computation is valid": [[87, "when-this-computation-is-valid"]], "When the integral exists": [[87, "when-the-integral-exists"]], "Implemented G-Function Formulae": [[87, "implemented-g-function-formulae"]], "Internal API Reference": [[87, "module-sympy.integrals.meijerint"]], "Integrals": [[88, "integrals"], [89, "module-sympy.integrals"], [278, "integrals"]], "Integral Transforms": [[89, "module-sympy.integrals.transforms"]], "Internals": [[89, "internals"], [206, "internals"]], "API reference": [[89, "api-reference"], [89, "id39"]], "TODO and Bugs": [[89, "todo-and-bugs"]], "Numeric Integrals": [[89, "numeric-integrals"]], "Integration over Polytopes": [[89, "module-sympy.integrals.intpoly"]], "For 2D Polygons": [[89, "for-2d-polygons"]], "For 3-Polytopes/Polyhedra": [[89, "for-3-polytopes-polyhedra"]], "Interactive": [[90, "module-sympy.interactive"]], "Session": [[90, "module-sympy.interactive.session"]], "Lie Algebra": [[91, "module-sympy.liealgebras"]], "Forming logical expressions": [[92, "forming-logical-expressions"]], "Boolean functions": [[92, "boolean-functions"]], "Simplification and equivalence-testing": [[92, "simplification-and-equivalence-testing"]], "Manipulating expressions": [[92, "manipulating-expressions"]], "Truth tables and related functions": [[92, "truth-tables-and-related-functions"]], "Inference": [[92, "module-sympy.logic.inference"]], "Common Matrices": [[93, "module-sympy.matrices.common"]], "Dense Matrices": [[94, "dense-matrices"]], "Matrix Expressions": [[95, "module-sympy.matrices.expressions"]], "Matrix Expressions Core Reference": [[95, "matrix-expressions-core-reference"]], "Block Matrices": [[95, "block-matrices"]], "Immutable Matrices": [[96, "immutable-matrices"]], "ImmutableMatrix Class Reference": [[96, "module-sympy.matrices.immutable"]], "Matrices": [[97, "module-sympy.matrices"], [115, "module-sympy.physics.matrices"], [267, "matrices"], [271, "matrices"], [284, "matrices"]], "Matrices (linear algebra)": [[98, "module-sympy.matrices.matrices"]], "Creating Matrices": [[98, "creating-matrices"]], "Basic Manipulation": [[98, "basic-manipulation"]], "Operations on entries": [[98, "operations-on-entries"]], "Linear algebra": [[98, "linear-algebra"]], "Reference": [[98, "reference"], [198, "reference"], [204, "reference"], [208, "reference"], [218, "reference"], [218, "id2"], [218, "id4"], [218, "id7"], [218, "id8"]], "Matrix Base Classes": [[98, "matrix-base-classes"]], "Matrix Exceptions": [[98, "matrix-exceptions"]], "Matrix Functions": [[98, "matrix-functions"]], "Rotation matrices": [[98, "rotation-matrices"]], "Numpy Utility Functions": [[98, "numpy-utility-functions"]], "Matrix Normal Forms": [[99, "matrix-normal-forms"]], "Sparse Matrices": [[100, "module-sympy.matrices.sparse"]], "SparseMatrix Class Reference": [[100, "sparsematrix-class-reference"]], "ImmutableSparseMatrix Class Reference": [[100, "immutablesparsematrix-class-reference"]], "Sparse Tools": [[101, "module-sympy.matrices.sparsetools"]], "Ntheory Class Reference": [[102, "ntheory-class-reference"]], "Ntheory Functions Reference": [[102, "ntheory-functions-reference"]], "ECM function": [[102, "ecm-function"]], "QS function": [[102, "qs-function"]], "Numeric Computation": [[103, "numeric-computation"]], "Subs/evalf": [[103, "subs-evalf"]], "Lambdify": [[103, "lambdify"], [250, "module-sympy.utilities.lambdify"]], "uFuncify": [[103, "ufuncify"]], "Aesara": [[103, "aesara"]], "So Which Should I Use?": [[103, "so-which-should-i-use"]], "Parsing Functions Reference": [[104, "parsing-functions-reference"]], "Parsing Transformations Reference": [[104, "parsing-transformations-reference"]], "Experimental \\mathrm{\\LaTeX} Parsing": [[104, "experimental-mathrm-latex-parsing"]], "\\mathrm{\\LaTeX} Parsing Caveats": [[104, "mathrm-latex-parsing-caveats"]], "\\mathrm{\\LaTeX} Parsing Functions Reference": [[104, "mathrm-latex-parsing-functions-reference"]], "\\mathrm{\\LaTeX} Parsing Exceptions Reference": [[104, "mathrm-latex-parsing-exceptions-reference"]], "SymPy Expression Reference": [[104, "module-sympy.parsing.sym_expr"]], "Runtime Installation": [[104, "runtime-installation"]], "Beam (Docstrings)": [[105, "module-sympy.physics.continuum_mechanics.beam"]], "Solving Beam Bending Problems using Singularity Functions": [[106, "solving-beam-bending-problems-using-singularity-functions"]], "Beam": [[106, "beam"], [107, "beam"]], "Example 1": [[106, "example-1"]], "Example 2": [[106, "example-2"]], "Example 3": [[106, "example-3"]], "Example 4": [[106, "example-4"]], "Example 5": [[106, "example-5"]], "Example 6": [[106, "example-6"]], "Example 7": [[106, "example-7"]], "Example 8": [[106, "example-8"]], "Example 9": [[106, "example-9"]], "Example 10": [[106, "example-10"]], "Example 11": [[106, "example-11"]], "Continuum Mechanics": [[107, "continuum-mechanics"]], "Abstract": [[107, null], [111, null], [113, null], [136, null], [146, null], [163, null], [193, null]], "Truss": [[107, "truss"]], "Truss (Docstrings)": [[108, "module-sympy.physics.continuum_mechanics.truss"]], "Control": [[109, "control"]], "Control System Plots": [[110, "control-system-plots"]], "Pole-Zero Plot": [[110, "pole-zero-plot"]], "Bode Plot": [[110, "bode-plot"]], "Impulse-Response Plot": [[110, "impulse-response-plot"]], "Step-Response Plot": [[110, "step-response-plot"]], "Ramp-Response Plot": [[110, "ramp-response-plot"]], "Control Module": [[111, "module-sympy.physics.control"]], "Control API": [[112, "control-api"]], "lti": [[112, "module-sympy.physics.control.lti"]], "High energy physics": [[113, "high-energy-physics"]], "Gamma matrices": [[113, "module-sympy.physics.hep.gamma_matrices"]], "Hydrogen Wavefunctions": [[114, "module-sympy.physics.hydrogen"]], "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics": [[116, "potential-issues-advanced-topics-future-features-in-physics-mechanics"]], "Common Issues": [[116, "common-issues"], [185, "common-issues"]], "Numerically Integrating Code": [[116, "numerically-integrating-code"]], "Differentiating": [[116, "differentiating"]], "Choice of Coordinates and Speeds": [[116, "choice-of-coordinates-and-speeds"]], "Substitution": [[116, "substitution"], [185, "substitution"], [277, "substitution"]], "Linearization": [[116, "linearization"]], "Acceleration of Points": [[116, "acceleration-of-points"], [185, "acceleration-of-points"]], "Advanced Interfaces": [[116, "advanced-interfaces"], [185, "advanced-interfaces"]], "Advanced Functionality": [[116, "advanced-functionality"]], "Future Features": [[116, "future-features"]], "Code Output": [[116, "code-output"]], "Body (Docstrings)": [[117, "module-sympy.physics.mechanics.body"]], "Expression Manipulation (Docstrings)": [[118, "expression-manipulation-docstrings"]], "Mechanics API Reference": [[119, "mechanics-api-reference"]], "Joints Framework (Docstrings)": [[120, "joints-framework-docstrings"]], "Joint (Docstrings)": [[120, "module-sympy.physics.mechanics.joint"]], "Kane\u2019s Method & Lagrange\u2019s Method (Docstrings)": [[121, "module-sympy.physics.mechanics.kane"]], "Linearization (Docstrings)": [[122, "module-sympy.physics.mechanics.linearize"]], "Masses, Inertias & Particles, RigidBodys (Docstrings)": [[123, "module-sympy.physics.mechanics.particle"]], "Printing (Docstrings)": [[124, "printing-docstrings"], [191, "printing-docstrings"]], "mechanics_printing": [[124, "mechanics-printing"]], "mprint": [[124, "mprint"]], "mpprint": [[124, "mpprint"]], "mlatex": [[124, "mlatex"]], "SymbolicSystem (Docstrings)": [[125, "module-sympy.physics.mechanics.system"]], "Autolev Parser": [[126, "autolev-parser"]], "Usage": [[126, "usage"]], "Gotchas": [[126, "gotchas"], [280, "gotchas"]], "Limitations and Issues": [[126, "limitations-and-issues"]], "Future Improvements": [[126, "future-improvements"]], "1. Completing Dynamics Online": [[126, "completing-dynamics-online"]], "2. Fixing Issues": [[126, "fixing-issues"]], "3. Switching to an AST": [[126, "switching-to-an-ast"]], "Examples for Physics/Mechanics": [[127, "examples-for-physics-mechanics"]], "A bicycle": [[128, "a-bicycle"]], "A four bar linkage": [[129, "a-four-bar-linkage"]], "Nonminimal Coordinates Pendulum": [[130, "nonminimal-coordinates-pendulum"]], "Kane\u2019s Method": [[130, "kane-s-method"]], "Lagrange\u2019s Method": [[130, "lagrange-s-method"]], "Multi Degree of Freedom Holonomic System": [[131, "multi-degree-of-freedom-holonomic-system"]], "A rolling disc": [[132, "a-rolling-disc"]], "A rolling disc, with Kane\u2019s method": [[133, "a-rolling-disc-with-kane-s-method"]], "A rolling disc, with Kane\u2019s method and constraint forces": [[134, "a-rolling-disc-with-kane-s-method-and-constraint-forces"]], "A rolling disc using Lagrange\u2019s Method": [[135, "a-rolling-disc-using-lagrange-s-method"]], "Classical Mechanics": [[136, "classical-mechanics"]], "Vector": [[136, "vector"], [195, "vector"], [264, "vector"]], "Mechanics": [[136, "mechanics"], [231, "module-sympy.stats.rv"]], "Guide to Mechanics": [[136, "guide-to-mechanics"]], "Joints Framework in Physics/Mechanics": [[137, "joints-framework-in-physics-mechanics"]], "Joints in Physics/Mechanics": [[137, "joints-in-physics-mechanics"]], "JointsMethod in Physics/Mechanics": [[137, "jointsmethod-in-physics-mechanics"]], "Kane\u2019s Method in Physics/Mechanics": [[138, "kane-s-method-in-physics-mechanics"], [138, "id2"]], "Structure of Equations": [[138, "structure-of-equations"], [139, "structure-of-equations"]], "Lagrange\u2019s Method in Physics/Mechanics": [[139, "lagrange-s-method-in-physics-mechanics"], [139, "id1"]], "Linearization in Physics/Mechanics": [[140, "linearization-in-physics-mechanics"]], "Background": [[140, "background"]], "A Note on Dependent Coordinates and Speeds": [[140, null]], "Linearizing Kane\u2019s Equations": [[140, "linearizing-kane-s-equations"]], "1. Using the Linearizer class directly:": [[140, "using-the-linearizer-class-directly"], [140, "id2"]], "2. Using the linearize class method:": [[140, "using-the-linearize-class-method"], [140, "id3"]], "What\u2019s with the new_method kwarg?": [[140, null]], "Linearizing Lagrange\u2019s Equations": [[140, "linearizing-lagrange-s-equations"]], "Potential Issues": [[140, "potential-issues"]], "1. Symbolic linearization with A_and_B=True is slow": [[140, "symbolic-linearization-with-a-and-b-true-is-slow"]], "2. The linearized form has nan, zoo, or oo as matrix elements": [[140, "the-linearized-form-has-nan-zoo-or-oo-as-matrix-elements"]], "Further Examples": [[140, "further-examples"]], "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics": [[141, "masses-inertias-particles-and-rigid-bodies-in-physics-mechanics"]], "Mass": [[141, "mass"]], "Particle": [[141, "particle"]], "Inertia": [[141, "inertia"]], "Rigid Body": [[141, "rigid-body"]], "Dyadic": [[141, "dyadic"]], "Linear Momentum": [[141, "linear-momentum"]], "Angular Momentum": [[141, "angular-momentum"]], "Using momenta functions in Mechanics": [[141, "using-momenta-functions-in-mechanics"]], "Kinetic Energy": [[141, "kinetic-energy"]], "Potential Energy": [[141, "potential-energy"]], "Lagrangian": [[141, "lagrangian"]], "Using energy functions in Mechanics": [[141, "using-energy-functions-in-mechanics"]], "References for Physics/Mechanics": [[142, "references-for-physics-mechanics"]], "SymPy Mechanics for Autolev Users": [[143, "sympy-mechanics-for-autolev-users"]], "Some Key Differences": [[143, "some-key-differences"]], "Rough Autolev-SymPy Equivalents": [[143, "rough-autolev-sympy-equivalents"]], "Mathematical Equivalents": [[143, "mathematical-equivalents"]], "Physical Equivalents": [[143, "physical-equivalents"]], "Numerical Evaluation and Visualization": [[143, "numerical-evaluation-and-visualization"]], "Links": [[143, "links"]], "Symbolic Systems in Physics/Mechanics": [[144, "symbolic-systems-in-physics-mechanics"]], "SymbolicSystem Example Usage": [[144, "symbolicsystem-example-usage"]], "Gaussian Optics": [[145, "module-sympy.physics.optics.gaussopt"]], "Optics Module": [[146, "optics-module"]], "Medium": [[147, "module-sympy.physics.optics.medium"]], "Polarization": [[148, "module-sympy.physics.optics.polarization"]], "Waves": [[150, "module-sympy.physics.optics.waves"]], "Pauli Algebra": [[151, "module-sympy.physics.paulialgebra"]], "Quantum Harmonic Oscillator in 1-D": [[152, "module-sympy.physics.qho_1d"]], "Anticommutator": [[153, "module-sympy.physics.quantum.anticommutator"]], "Cartesian Operators and States": [[154, "module-sympy.physics.quantum.cartesian"]], "Clebsch-Gordan Coefficients": [[155, "module-sympy.physics.quantum.cg"]], "Circuit Plot": [[156, "module-sympy.physics.quantum.circuitplot"]], "Commutator": [[157, "module-sympy.physics.quantum.commutator"]], "Constants": [[158, "module-sympy.physics.quantum.constants"], [181, "constants"]], "Dagger": [[159, "module-sympy.physics.quantum.dagger"]], "Gates": [[160, "module-sympy.physics.quantum.gate"]], "Grover\u2019s Algorithm": [[161, "module-sympy.physics.quantum.grover"]], "Hilbert Space": [[162, "module-sympy.physics.quantum.hilbert"]], "Quantum Mechanics": [[163, "quantum-mechanics"]], "Quantum Functions": [[163, "quantum-functions"]], "States and Operators": [[163, "states-and-operators"]], "Quantum Computation": [[163, "quantum-computation"]], "Analytic Solutions": [[163, "analytic-solutions"]], "Inner Product": [[164, "module-sympy.physics.quantum.innerproduct"]], "Operator": [[165, "module-sympy.physics.quantum.operator"]], "Operator/State Helper Functions": [[166, "module-sympy.physics.quantum.operatorset"]], "Particle in a Box": [[167, "module-sympy.physics.quantum.piab"]], "Qapply": [[168, "module-sympy.physics.quantum.qapply"]], "QFT": [[169, "module-sympy.physics.quantum.qft"]], "Qubit": [[170, "module-sympy.physics.quantum.qubit"]], "Represent": [[171, "module-sympy.physics.quantum.represent"]], "Shor\u2019s Algorithm": [[172, "module-sympy.physics.quantum.shor"]], "Spin": [[173, "module-sympy.physics.quantum.spin"]], "State": [[174, "module-sympy.physics.quantum.state"]], "Tensor Product": [[175, "module-sympy.physics.quantum.tensorproduct"]], "Second Quantization": [[176, "module-sympy.physics.secondquant"]], "Quantum Harmonic Oscillator in 3-D": [[177, "module-sympy.physics.sho"]], "Dimensions and dimension systems": [[178, "module-sympy.physics.units.dimensions"]], "More examples": [[179, "more-examples"]], "Dimensional analysis": [[179, "dimensional-analysis"]], "Equation with quantities": [[179, "equation-with-quantities"]], "Unit systems": [[180, "unit-systems"]], "More": [[180, "more"]], "Philosophy behind unit systems": [[181, "philosophy-behind-unit-systems"]], "Dimensions": [[181, "dimensions"]], "Group structure": [[181, "group-structure"]], "Linear space representation": [[181, "linear-space-representation"]], "An example": [[181, "an-example"], [221, "an-example"]], "Quantities": [[181, "quantities"]], "Units": [[181, "units"]], "The need for a reference": [[181, "the-need-for-a-reference"]], "Literature": [[181, "literature"], [205, "literature"], [210, "literature"]], "Unit prefixes": [[182, "module-sympy.physics.units.prefixes"]], "Physical quantities": [[183, "module-sympy.physics.units.quantities"]], "Conversion between quantities": [[183, "module-sympy.physics.units.util"]], "Units and unit systems": [[184, "module-sympy.physics.units.unitsystem"]], "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module": [[185, "potential-issues-advanced-topics-future-features-in-physics-vector-module"]], "Inertia (Dyadics)": [[185, "inertia-dyadics"]], "ReferenceFrame": [[185, "referenceframe"]], "dynamicsymbols": [[185, "dynamicsymbols"]], "Essential Classes": [[186, "essential-classes"]], "Docstrings for basic field functions": [[187, "docstrings-for-basic-field-functions"]], "Field operation functions": [[187, "field-operation-functions"]], "Checking the type of vector field": [[187, "checking-the-type-of-vector-field"]], "Essential Functions (Docstrings)": [[188, "essential-functions-docstrings"]], "Physics Vector API": [[189, "physics-vector-api"]], "Kinematics (Docstrings)": [[190, "module-sympy.physics.vector.point"]], "kinematic_equations": [[190, "module-sympy.physics.vector.functions"]], "Scalar and Vector Field Functionality": [[192, "scalar-and-vector-field-functionality"], [263, "scalar-and-vector-field-functionality"]], "Vectors and Scalars": [[192, "vectors-and-scalars"], [265, "vectors-and-scalars"]], "Fields": [[192, "fields"], [265, "fields"]], "Implementation of fields in sympy.physics.vector": [[192, "implementation-of-fields-in-sympy-physics-vector"]], "Field operators and other related functions": [[192, "field-operators-and-other-related-functions"]], "Curl": [[192, "curl"], [263, "curl"]], "Divergence": [[192, "divergence"], [263, "divergence"]], "Gradient": [[192, "gradient"], [263, "gradient"]], "Conservative and Solenoidal fields": [[192, "conservative-and-solenoidal-fields"], [263, "conservative-and-solenoidal-fields"]], "Scalar potential functions": [[192, "scalar-potential-functions"], [263, "scalar-potential-functions"]], "The Physics Vector Module": [[193, "the-physics-vector-module"]], "References for Physics/Vector": [[193, "references-for-physics-vector"]], "Guide to Vector": [[193, "guide-to-vector"], [264, "guide-to-vector"]], "Vector: Kinematics": [[194, "vector-kinematics"]], "Introduction to Kinematics": [[194, "introduction-to-kinematics"]], "Angular Velocity": [[194, "angular-velocity"]], "Angular Acceleration": [[194, "angular-acceleration"]], "Point Velocity & Acceleration": [[194, "point-velocity-acceleration"]], "Kinematics in physics.vector": [[194, "kinematics-in-physics-vector"]], "Vector & ReferenceFrame": [[195, "vector-referenceframe"]], "Vector Algebra": [[195, "vector-algebra"]], "Vector Operations": [[195, "vector-operations"]], "Alternative Representation": [[195, "alternative-representation"]], "Vector Calculus": [[195, "vector-calculus"]], "Derivatives of Vectors": [[195, "derivatives-of-vectors"]], "Relating Sets of Basis Vectors": [[195, "relating-sets-of-basis-vectors"]], "Derivatives with Multiple Frames": [[195, "derivatives-with-multiple-frames"]], "Using Vectors and Reference Frames": [[195, "using-vectors-and-reference-frames"]], "Vector Algebra, in physics.vector": [[195, "vector-algebra-in-physics-vector"]], "Vector Calculus, in physics.vector": [[195, "vector-calculus-in-physics-vector"]], "How Vectors are Coded": [[195, "how-vectors-are-coded"]], "Wigner Symbols": [[196, "module-sympy.physics.wigner"]], "Credits and Copyright": [[196, "credits-and-copyright"]], "Authors": [[196, "authors"]], "Plot Class": [[197, "plot-class"]], "Plotting Function Reference": [[197, "plotting-function-reference"]], "PlotGrid Class": [[197, "plotgrid-class"]], "Series Classes": [[197, "series-classes"]], "Backends": [[197, "backends"]], "Pyglet Plotting": [[197, "module-sympy.plotting.pygletplot"]], "Plot Window Controls": [[197, "plot-window-controls"]], "Coordinate Modes": [[197, "coordinate-modes"]], "Specifying Intervals for Variables": [[197, "specifying-intervals-for-variables"]], "Using the Interactive Interface": [[197, "using-the-interactive-interface"]], "Using Custom Color Functions": [[197, "using-custom-color-functions"]], "Plotting Geometric Entities": [[197, "plotting-geometric-entities"]], "Plotting with ASCII art": [[197, "plotting-with-ascii-art"]], "AGCA - Algebraic Geometry and Commutative Algebra Module": [[198, "agca-algebraic-geometry-and-commutative-algebra-module"]], "Base Rings": [[198, "base-rings"]], "Modules, Ideals and their Elementary Properties": [[198, "modules-ideals-and-their-elementary-properties"]], "Module Homomorphisms and Syzygies": [[198, "module-homomorphisms-and-syzygies"]], "Finite Extensions": [[198, "finite-extensions"]], "Basic functionality of the module": [[199, "basic-functionality-of-the-module"]], "Basic concepts": [[199, "basic-concepts"]], "Polynomials": [[199, "polynomials"]], "Divisibility": [[199, "divisibility"]], "Integral domains": [[199, "integral-domains"]], "Factorial domains": [[199, "factorial-domains"]], "Euclidean domains": [[199, "euclidean-domains"]], "Divisibility of polynomials": [[199, "divisibility-of-polynomials"]], "Basic functionality": [[199, "basic-functionality"]], "Division": [[199, "division"]], "GCD and LCM": [[199, "gcd-and-lcm"]], "Square-free factorization": [[199, "square-free-factorization"]], "Factorization": [[199, "factorization"]], "Groebner bases": [[199, "groebner-bases"]], "Solving Equations": [[199, "solving-equations"]], "Introducing the domainmatrix of the poly module": [[200, "introducing-the-domainmatrix-of-the-poly-module"]], "What is domainmatrix?": [[200, "what-is-domainmatrix"]], "Introducing the Domains of the poly module": [[201, "introducing-the-domains-of-the-poly-module"]], "What are the domains?": [[201, "what-are-the-domains"]], "Representing expressions symbolically": [[201, "representing-expressions-symbolically"]], "Tree representation": [[201, "tree-representation"]], "DUP representation": [[201, "dup-representation"]], "DMP representation": [[201, "dmp-representation"]], "Sparse polynomial representation": [[201, "sparse-polynomial-representation"]], "Basic usage of domains": [[201, "basic-usage-of-domains"]], "Domain elements vs sympy expressions": [[201, "domain-elements-vs-sympy-expressions"]], "Gaussian integers and Gaussian rationals": [[201, "gaussian-integers-and-gaussian-rationals"]], "Finite fields": [[201, "finite-fields"]], "Real and complex fields": [[201, "real-and-complex-fields"]], "Algebraic number fields": [[201, "algebraic-number-fields"], [206, "algebraic-number-fields"]], "Polynomial ring domains": [[201, "polynomial-ring-domains"]], "Old (dense) polynomial rings": [[201, "old-dense-polynomial-rings"]], "PolyRing vs PolynomialRing": [[201, "polyring-vs-polynomialring"]], "Rational function fields": [[201, "rational-function-fields"]], "Expression domain": [[201, "expression-domain"]], "Choosing a domain": [[201, "choosing-a-domain"]], "Converting elements between different domains": [[201, "converting-elements-between-different-domains"]], "Unifying domains": [[201, "unifying-domains"]], "Internals of a Poly": [[201, "internals-of-a-poly"]], "Choosing a domain for a Poly": [[201, "choosing-a-domain-for-a-poly"]], "Choosing generators": [[201, "choosing-generators"]], "Algebraically dependent generators": [[201, "algebraically-dependent-generators"]], "Reference docs for the Poly Domains": [[202, "reference-docs-for-the-poly-domains"]], "Domains": [[202, "domains"]], "Abstract Domains": [[202, "abstract-domains"]], "GF(p)": [[202, "gf-p"]], "ZZ": [[202, "zz"]], "QQ": [[202, "qq"]], "MPQ": [[202, "mpq"]], "Gaussian domains": [[202, "gaussian-domains"]], "ZZ_I": [[202, "zz-i"]], "QQ_I": [[202, "qq-i"]], "QQ<a>": [[202, "qq-a"]], "RR": [[202, "rr"]], "CC": [[202, "cc"]], "K[x]": [[202, "k-x"]], "K(x)": [[202, "id11"]], "EX": [[202, "ex"]], "Quotient ring": [[202, "quotient-ring"]], "Sparse polynomials": [[202, "sparse-polynomials"]], "Sparse rational functions": [[202, "sparse-rational-functions"]], "Dense polynomials": [[202, "dense-polynomials"]], "Polynomial Manipulation": [[203, "polynomial-manipulation"]], "Internals of the Polynomial Manipulation Module": [[204, "internals-of-the-polynomial-manipulation-module"]], "Level Zero": [[204, "level-zero"]], "Manipulation of dense, multivariate polynomials": [[204, "manipulation-of-dense-multivariate-polynomials"]], "Manipulation of dense, univariate polynomials with finite field coefficients": [[204, "manipulation-of-dense-univariate-polynomials-with-finite-field-coefficients"]], "Manipulation of sparse, distributed polynomials and vectors": [[204, "manipulation-of-sparse-distributed-polynomials-and-vectors"]], "Polynomial factorization algorithms": [[204, "polynomial-factorization-algorithms"]], "Classical remainder sequence": [[204, "classical-remainder-sequence"]], "Simplified remainder sequences": [[204, "simplified-remainder-sequences"]], "Subresultant sequence": [[204, "subresultant-sequence"]], "Groebner basis algorithms": [[204, "groebner-basis-algorithms"]], "Options": [[204, "module-sympy.polys.polyoptions"]], "Configuration": [[204, "module-sympy.polys.polyconfig"]], "Exceptions": [[204, "exceptions"]], "Modular GCD": [[204, "modular-gcd"]], "Undocumented": [[204, "undocumented"]], "Number Fields": [[206, "number-fields"]], "Solving the Main Problems": [[206, "solving-the-main-problems"]], "Integral Basis": [[206, "integral-basis"]], "Prime Decomposition": [[206, "prime-decomposition"]], "p-adic Valuation": [[206, "p-adic-valuation"]], "Finding Minimal Polynomials": [[206, "finding-minimal-polynomials"]], "The Subfield Problem": [[206, "the-subfield-problem"]], "Representing algebraic numbers": [[206, "representing-algebraic-numbers"]], "As number field elements": [[206, "as-number-field-elements"]], "As elements of finitely-generated modules": [[206, "as-elements-of-finitely-generated-modules"]], "Finitely-generated modules": [[206, "module-sympy.polys.numberfields.modules"]], "Arithmetic with module elements": [[206, "arithmetic-with-module-elements"]], "Multiplication": [[206, "multiplication"]], "Module Homomorphisms": [[206, "module-homomorphisms"]], "Class Reference": [[206, "class-reference"]], "Polynomials Manipulation Module Reference": [[207, "module-sympy.polys"]], "Basic polynomial manipulation functions": [[207, "basic-polynomial-manipulation-functions"]], "Extra polynomial manipulation functions": [[207, "extra-polynomial-manipulation-functions"]], "Domain constructors": [[207, "domain-constructors"]], "Monomials encoded as tuples": [[207, "monomials-encoded-as-tuples"]], "Orderings of monomials": [[207, "orderings-of-monomials"]], "Formal manipulation of roots of polynomials": [[207, "formal-manipulation-of-roots-of-polynomials"]], "Symbolic root-finding algorithms": [[207, "symbolic-root-finding-algorithms"]], "Special polynomials": [[207, "special-polynomials"]], "Orthogonal polynomials": [[207, "orthogonal-polynomials"]], "Appell sequences": [[207, "appell-sequences"]], "Manipulation of rational functions": [[207, "manipulation-of-rational-functions"]], "Partial fraction decomposition": [[207, "partial-fraction-decomposition"], [210, "partial-fraction-decomposition"]], "Dispersion of Polynomials": [[207, "dispersion-of-polynomials"]], "Series Manipulation using Polynomials": [[208, "series-manipulation-using-polynomials"]], "rs_series": [[208, "rs-series"]], "Contribute": [[208, "contribute"]], "Poly solvers": [[209, "poly-solvers"]], "Examples from Wester\u2019s Article": [[210, "examples-from-wester-s-article"]], "Simple univariate polynomial factorization": [[210, "simple-univariate-polynomial-factorization"]], "Univariate GCD, resultant and factorization": [[210, "univariate-gcd-resultant-and-factorization"]], "Multivariate GCD and factorization": [[210, "multivariate-gcd-and-factorization"]], "Support for symbols in exponents": [[210, "support-for-symbols-in-exponents"]], "Testing if polynomials have common zeros": [[210, "testing-if-polynomials-have-common-zeros"]], "Normalizing simple rational functions": [[210, "normalizing-simple-rational-functions"]], "Expanding expressions and factoring back": [[210, "expanding-expressions-and-factoring-back"]], "Factoring in terms of cyclotomic polynomials": [[210, "factoring-in-terms-of-cyclotomic-polynomials"]], "Univariate factoring over Gaussian numbers": [[210, "univariate-factoring-over-gaussian-numbers"]], "Computing with automatic field extensions": [[210, "computing-with-automatic-field-extensions"]], "Univariate factoring over various domains": [[210, "univariate-factoring-over-various-domains"]], "Factoring polynomials into linear factors": [[210, "factoring-polynomials-into-linear-factors"]], "Advanced factoring over finite fields": [[210, "advanced-factoring-over-finite-fields"]], "Working with expressions as polynomials": [[210, "working-with-expressions-as-polynomials"]], "Computing reduced Gr\u00f6bner bases": [[210, "computing-reduced-grobner-bases"]], "Multivariate factoring over algebraic numbers": [[210, "multivariate-factoring-over-algebraic-numbers"]], "Printer Class": [[211, "module-sympy.printing.printer"]], "Which Method is Responsible for Printing?": [[211, "which-method-is-responsible-for-printing"]], "Example of Custom Printer": [[211, "example-of-custom-printer"]], "Example of Custom Printing Method": [[211, "example-of-custom-printing-method"]], "Common mistakes": [[211, "common-mistakes"]], "PrettyPrinter Class": [[211, "prettyprinter-class"]], "C code printers": [[211, "module-sympy.printing.c"]], "C++ code printers": [[211, "module-sympy.printing.cxx"]], "RCodePrinter": [[211, "module-sympy.printing.rcode"]], "Fortran Printing": [[211, "fortran-printing"]], "SMT-Lib printing": [[211, "module-sympy.printing.smtlib"]], "Mathematica code printing": [[211, "module-sympy.printing.mathematica"]], "Maple code printing": [[211, "module-sympy.printing.maple"]], "Javascript Code printing": [[211, "module-sympy.printing.jscode"]], "Julia code printing": [[211, "module-sympy.printing.julia"]], "Octave (and Matlab) Code printing": [[211, "module-sympy.printing.octave"]], "Rust code printing": [[211, "module-sympy.printing.rust"]], "Aesara Code printing": [[211, "module-sympy.printing.aesaracode"]], "Gtk": [[211, "module-sympy.printing.gtk"]], "LambdaPrinter": [[211, "module-sympy.printing.lambdarepr"]], "LatexPrinter": [[211, "module-sympy.printing.latex"]], "MathMLPrinter": [[211, "module-sympy.printing.mathml"]], "PythonCodePrinter": [[211, "module-sympy.printing.pycode"]], "PythonPrinter": [[211, "module-sympy.printing.python"]], "srepr": [[211, "module-sympy.printing.repr"], [287, "srepr"]], "StrPrinter": [[211, "module-sympy.printing.str"]], "Tree Printing": [[211, "module-sympy.printing.tree"]], "Preview": [[211, "preview"]], "Implementation - Helper Classes/Functions": [[211, "module-sympy.printing.conventions"]], "CodePrinter": [[211, "module-sympy.printing.codeprinter"]], "Precedence": [[211, "module-sympy.printing.precedence"]], "Pretty-Printing Implementation Helpers": [[211, "module-sympy.printing.pretty.pretty_symbology"]], "dotprint": [[211, "dotprint"]], "Term Rewriting": [[212, "term-rewriting"]], "Expanding": [[212, "expanding"]], "Common Subexpression Detection and Collection": [[212, "common-subexpression-detection-and-collection"]], "Formal Power Series": [[213, "formal-power-series"]], "Rational Algorithm": [[213, "rational-algorithm"]], "Hypergeometric Algorithm": [[213, "hypergeometric-algorithm"]], "Fourier Series": [[214, "fourier-series"]], "Series": [[215, "series"]], "Limits of Sequences": [[216, "limits-of-sequences"]], "Sequences": [[217, "sequences"]], "Sequences Base": [[217, "sequences-base"]], "Elementary Sequences": [[217, "elementary-sequences"]], "Singleton Sequences": [[217, "singleton-sequences"]], "Compound Sequences": [[217, "compound-sequences"]], "Recursive Sequences": [[217, "recursive-sequences"]], "Series Expansions": [[218, "series-expansions"]], "Limits": [[218, "limits"], [278, "limits"]], "The Gruntz Algorithm": [[218, "the-gruntz-algorithm"]], "More Intuitive Series Expansion": [[218, "more-intuitive-series-expansion"]], "Order Terms": [[218, "order-terms"]], "Series Acceleration": [[218, "series-acceleration"]], "Residues": [[218, "residues"]], "Basic Sets": [[219, "module-sympy.sets.sets"]], "Elementary Sets": [[219, "elementary-sets"]], "Compound Sets": [[219, "compound-sets"]], "Singleton Sets": [[219, "singleton-sets"]], "Special Sets": [[219, "module-sympy.sets.fancysets"]], "Power sets": [[219, "module-sympy.sets.powerset"]], "Condition Sets": [[219, "module-sympy.sets.conditionset"]], "SetKind": [[219, "setkind"]], "Iteration over sets": [[219, "iteration-over-sets"]], "Hongguang Fu\u2019s Trigonometric Simplification": [[220, "hongguang-fu-s-trigonometric-simplification"]], "Rules": [[220, "rules"]], "Hypergeometric Expansion": [[221, "hypergeometric-expansion"]], "Hypergeometric Function Expansion Algorithm": [[221, "hypergeometric-function-expansion-algorithm"]], "Notation": [[221, "notation"]], "Incrementing and decrementing indices": [[221, "incrementing-and-decrementing-indices"]], "Reduction of Order": [[221, "reduction-of-order"]], "Moving Around in the Parameter Space": [[221, "moving-around-in-the-parameter-space"]], "Applying the Operators": [[221, "applying-the-operators"]], "Loose Ends": [[221, "loose-ends"]], "Meijer G-Functions of Finite Confluence": [[221, "meijer-g-functions-of-finite-confluence"]], "Extending The Hypergeometric Tables": [[221, "extending-the-hypergeometric-tables"]], "Implemented Hypergeometric Formulae": [[221, "implemented-hypergeometric-formulae"]], "Simplify": [[222, "simplify"], [223, "simplify"]], "Diophantine": [[224, "diophantine"]], "Diophantine equations": [[224, "diophantine-equations"]], "Module structure": [[224, "module-structure"]], "Tutorial": [[224, "tutorial"]], "User Functions": [[224, "user-functions"], [227, "user-functions"], [228, "user-functions"]], "Internal Functions": [[224, "internal-functions"]], "Internal Classes": [[224, "internal-classes"]], "Solvers": [[225, "solvers"], [229, "module-sympy.solvers"], [289, "solvers"]], "Inequality Solvers": [[226, "inequality-solvers"]], "ODE": [[227, "ode"]], "Hint Functions": [[227, "hint-functions"]], "Lie heuristics": [[227, "lie-heuristics"]], "Rational Riccati Solver": [[227, "rational-riccati-solver"]], "System of ODEs": [[227, "system-of-odes"]], "Information on the ode module": [[227, "module-sympy.solvers.ode.ode"]], "PDE": [[228, "pde"]], "Hint Methods": [[228, "hint-methods"]], "Information on the pde module": [[228, "module-sympy.solvers.pde"]], "Algebraic equations": [[229, "algebraic-equations"]], "Ordinary Differential equations (ODEs)": [[229, "ordinary-differential-equations-odes"], [230, "ordinary-differential-equations-odes"]], "Partial Differential Equations (PDEs)": [[229, "partial-differential-equations-pdes"], [230, "partial-differential-equations-pdes"]], "Deutils (Utilities for solving ODE\u2019s and PDE\u2019s)": [[229, "deutils-utilities-for-solving-ode-s-and-pde-s"]], "Recurrence Equations": [[229, "module-sympy.solvers.recurr"]], "Systems of Polynomial Equations": [[229, "systems-of-polynomial-equations"]], "Diophantine Equations (DEs)": [[229, "diophantine-equations-des"], [230, "diophantine-equations-des"]], "Inequalities": [[229, "inequalities"], [230, "inequalities"]], "Solveset": [[230, "solveset"]], "What\u2019s wrong with solve():": [[230, "what-s-wrong-with-solve"]], "Why Solveset?": [[230, "why-solveset"]], "Why do we use Sets as an output type?": [[230, "why-do-we-use-sets-as-an-output-type"]], "Input API of solveset": [[230, "input-api-of-solveset"]], "What is this domain argument about?": [[230, "what-is-this-domain-argument-about"]], "What are the general methods employed by solveset to solve an equation?": [[230, "what-are-the-general-methods-employed-by-solveset-to-solve-an-equation"]], "How do we manipulate and return an infinite solution?": [[230, "how-do-we-manipulate-and-return-an-infinite-solution"]], "How does solveset ensure that it is not returning any wrong solution?": [[230, "how-does-solveset-ensure-that-it-is-not-returning-any-wrong-solution"]], "Search based solver and step-by-step solution": [[230, "search-based-solver-and-step-by-step-solution"]], "How do we deal with cases where only some of the solutions are known?": [[230, "how-do-we-deal-with-cases-where-only-some-of-the-solutions-are-known"]], "What is the plan for solve and solveset?": [[230, "what-is-the-plan-for-solve-and-solveset"]], "How are symbolic parameters handled in solveset?": [[230, "how-are-symbolic-parameters-handled-in-solveset"]], "Solveset Module Reference": [[230, "solveset-module-reference"]], "transolve": [[230, "transolve"]], "Stats": [[231, "module-sympy.stats"]], "Random Variable Types": [[231, "random-variable-types"]], "Finite Types": [[231, "finite-types"]], "Discrete Types": [[231, "discrete-types"]], "Continuous Types": [[231, "continuous-types"]], "Joint Types": [[231, "joint-types"]], "Stochastic Processes": [[231, "stochastic-processes"]], "Matrix Distributions": [[231, "matrix-distributions"]], "Compound Distribution": [[231, "compound-distribution"]], "Interface": [[231, "interface"]], "N-dim array": [[232, "module-sympy.tensor.array"]], "Products and contractions": [[232, "products-and-contractions"]], "Diagonal operator": [[232, "diagonal-operator"]], "Derivatives by array": [[232, "derivatives-by-array"]], "Classes": [[232, "classes"]], "N-dim array expressions": [[233, "module-sympy.tensor.array.expressions"]], "Constructing array expressions from index-explicit forms": [[233, "constructing-array-expressions-from-index-explicit-forms"]], "Compatibility with matrices": [[233, "compatibility-with-matrices"]], "Tensor": [[234, "module-sympy.tensor"], [237, "module-sympy.tensor.tensor"]], "Methods": [[235, "module-sympy.tensor.index_methods"]], "Indexed Objects": [[236, "module-sympy.tensor.indexed"]], "Tensor Operators": [[238, "module-sympy.tensor.toperators"]], "Testing": [[239, "testing"]], "pytest": [[240, "module-sympy.testing.pytest"]], "Randomised Testing": [[241, "module-sympy.testing.randtest"]], "Run Tests": [[242, "module-sympy.testing.runtests"]], "Autowrap Module": [[243, "autowrap-module"]], "Implementation details": [[243, "implementation-details"]], "Codegen": [[244, "codegen"]], "Implementation Details": [[244, "implementation-details"]], "Routine": [[244, "routine"]], "Decorator": [[245, "module-sympy.utilities.decorator"]], "Enumerative": [[246, "module-sympy.utilities.enumerative"]], "Exceptions and Warnings": [[247, "module-sympy.utilities.exceptions"]], "Iterables": [[249, "module-sympy.utilities.iterables"]], "variations": [[249, "variations"]], "partitions": [[249, "partitions"]], "Memoization": [[251, "module-sympy.utilities.memoization"]], "PKGDATA": [[253, "module-sympy.utilities.pkgdata"]], "Source Code Inspection": [[254, "module-sympy.utilities.source"]], "Timing Utilities": [[255, "module-sympy.utilities.timeutils"]], "Essential Classes in sympy.vector (docstrings)": [[256, "essential-classes-in-sympy-vector-docstrings"]], "Vector API": [[257, "vector-api"]], "Orienter classes (docstrings)": [[258, "orienter-classes-docstrings"]], "Essential Functions in sympy.vector (docstrings)": [[259, "essential-functions-in-sympy-vector-docstrings"]], "Basic Implementation details": [[260, "basic-implementation-details"]], "Coordinate Systems and Vectors": [[260, "coordinate-systems-and-vectors"]], "SymPy operations on Vectors": [[260, "sympy-operations-on-vectors"]], "Dyadics": [[260, "dyadics"]], "More about Coordinate Systems": [[261, "more-about-coordinate-systems"]], "Locating new systems": [[261, "locating-new-systems"]], "Orienting new systems": [[261, "orienting-new-systems"]], "Using a method of CoordSys3D directly": [[261, "using-a-method-of-coordsys3d-directly"]], "Using Orienter(s) and the orient_new method": [[261, "using-orienter-s-and-the-orient-new-method"]], "Orienting AND Locating new systems": [[261, "orienting-and-locating-new-systems"]], "Transforming new system": [[261, "transforming-new-system"]], "Expression of quantities in different coordinate systems": [[261, "expression-of-quantities-in-different-coordinate-systems"]], "Vectors and Dyadics": [[261, "vectors-and-dyadics"]], "Coordinate Variables": [[261, "coordinate-variables"]], "Other expression-dependent methods": [[261, "other-expression-dependent-methods"]], "General examples of usage": [[262, "general-examples-of-usage"]], "Quadrilateral problem": [[262, "quadrilateral-problem"]], "The Problem": [[262, "the-problem"], [262, "id1"]], "Solution": [[262, "solution"], [262, "id2"]], "Third product rule for Del operator": [[262, "third-product-rule-for-del-operator"]], "See": [[262, "see"]], "Implementation in sympy.vector": [[263, "implementation-in-sympy-vector"]], "Scalar and vector fields": [[263, "scalar-and-vector-fields"]], "The Del operator": [[263, "the-del-operator"]], "Field operators and related functions": [[263, "field-operators-and-related-functions"]], "Directional Derivative": [[263, "directional-derivative"]], "Field operator in orthogonal curvilinear coordinate system": [[263, "field-operator-in-orthogonal-curvilinear-coordinate-system"]], "References for Vector": [[264, "references-for-vector"]], "Coordinate Systems": [[265, "coordinate-systems"]], "Applications of Vector Integrals": [[266, "applications-of-vector-integrals"]], "Calculation of Perimeter, Surface Area, and Volume": [[266, "calculation-of-perimeter-surface-area-and-volume"]], "Calculation of mass of a body": [[266, "calculation-of-mass-of-a-body"]], "Calculation of Flux": [[266, "calculation-of-flux"]], "Verifying Stoke\u2019s Theorem": [[266, "verifying-stoke-s-theorem"]], "Verifying Divergence Theorem": [[266, "verifying-divergence-theorem"]], "Physics": [[267, "physics"], [273, "module-sympy.physics"]], "Topics": [[267, "topics"], [274, "topics"]], "Introductory Tutorial": [[276, "introductory-tutorial"], [281, "introductory-tutorial"]], "Basic Operations": [[277, "basic-operations"], [284, "basic-operations"]], "Quick Tip": [[277, null], [278, null], [280, null], [283, null], [284, null]], "Converting Strings to SymPy Expressions": [[277, "converting-strings-to-sympy-expressions"]], "Derivatives": [[278, "derivatives"]], "Series Expansion": [[278, "series-expansion"]], "Finite differences": [[278, "finite-differences"]], "SymPy Features": [[279, "sympy-features"]], "Equals signs": [[280, "equals-signs"]], "Two Final Notes: ^ and /": [[280, "two-final-notes-and"]], "Further Reading": [[280, "further-reading"]], "What is Symbolic Computation?": [[282, "what-is-symbolic-computation"]], "A More Interesting Example": [[282, "a-more-interesting-example"]], "The Power of Symbolic Computation": [[282, "the-power-of-symbolic-computation"]], "Why SymPy?": [[282, "why-sympy"]], "Advanced Expression Manipulation": [[283, "advanced-expression-manipulation"]], "Understanding Expression Trees": [[283, "understanding-expression-trees"]], "Recursing through an Expression Tree": [[283, "recursing-through-an-expression-tree"]], "args": [[283, "args"]], "Key Invariant": [[283, null]], "Walking the Tree": [[283, "walking-the-tree"]], "Prevent expression evaluation": [[283, "prevent-expression-evaluation"]], "Shape": [[284, "shape"]], "Accessing Rows and Columns": [[284, "accessing-rows-and-columns"]], "Deleting and Inserting Rows and Columns": [[284, "deleting-and-inserting-rows-and-columns"]], "Basic Methods": [[284, "basic-methods"]], "Matrix Constructors": [[284, "matrix-constructors"]], "Advanced Methods": [[284, "advanced-methods"]], "Determinant": [[284, "determinant"]], "RREF": [[284, "rref"]], "Nullspace": [[284, "nullspace"]], "Columnspace": [[284, "columnspace"]], "Eigenvalues, Eigenvectors, and Diagonalization": [[284, "eigenvalues-eigenvectors-and-diagonalization"]], "Possible Issues": [[284, "possible-issues"]], "Zero Testing": [[284, "zero-testing"]], "What\u2019s Next": [[285, "whats-next"]], "Preliminaries": [[286, "preliminaries"]], "Exercises": [[286, "exercises"]], "Printers": [[287, "printers"]], "Setting up Pretty Printing": [[287, "setting-up-pretty-printing"]], "Printing Functions": [[287, "printing-functions"]], "str": [[287, "str"]], "ASCII Pretty Printer": [[287, "ascii-pretty-printer"]], "Unicode Pretty Printer": [[287, "unicode-pretty-printer"]], "\\mathrm{\\LaTeX}": [[287, "mathrm-latex"]], "MathML": [[287, "mathml"]], "Dot": [[287, "dot"]], "Simplification": [[288, "simplification"]], "simplify": [[288, "simplify"]], "Polynomial/Rational Function Simplification": [[288, "polynomial-rational-function-simplification"]], "expand": [[288, "expand"]], "factor": [[288, "factor"]], "collect": [[288, "collect"]], "cancel": [[288, "cancel"]], "apart": [[288, "apart"]], "Trigonometric Simplification": [[288, "trigonometric-simplification"]], "trigsimp": [[288, "trigsimp"]], "expand_trig": [[288, "expand-trig"]], "Powers": [[288, "powers"]], "powsimp": [[288, "powsimp"]], "expand_power_exp / expand_power_base": [[288, "expand-power-exp-expand-power-base"]], "powdenest": [[288, "powdenest"]], "Exponentials and logarithms": [[288, "exponentials-and-logarithms"]], "expand_log": [[288, "expand-log"]], "logcombine": [[288, "logcombine"]], "Special Functions": [[288, "special-functions"]], "rewrite": [[288, "rewrite"]], "expand_func": [[288, "expand-func"]], "hyperexpand": [[288, "hyperexpand"]], "combsimp": [[288, "combsimp"]], "gammasimp": [[288, "gammasimp"]], "Example: Continued Fractions": [[288, "example-continued-fractions"]], "A Note about Equations": [[289, "a-note-about-equations"]], "Solving Equations Algebraically": [[289, "solving-equations-algebraically"]], "Solving Differential Equations": [[289, "solving-differential-equations"]]}, "indexentries": {"antiderivative": [[11, "term-Antiderivative"]], "assumptions": [[11, "term-Assumptions"]], "atom": [[11, "term-Atom"]], "automatic simplification": [[11, "term-Automatic-Simplification"]], "basic": [[11, "term-Basic"]], "boolean": [[11, "term-Boolean"]], "bound symbols": [[11, "term-Bound-symbols"]], "canonical form": [[11, "term-Canonical-Form"]], "canonicalize": [[11, "term-Canonicalize"]], "code generation": [[11, "term-Code-Generation"]], "core": [[11, "term-Core"]], "dummy": [[11, "term-Dummy"]], "equation": [[11, "term-Equation"]], "evaluate": [[11, "term-Evaluate"]], "expr": [[11, "term-Expr"]], "expression": [[11, "term-Expression"]], "expression tree": [[11, "term-Expression-Tree"]], "free symbols": [[11, "term-Free-symbols"]], "function": [[11, "term-Function"]], "function (class)": [[11, "term-Function-class"]], "immutable": [[11, "term-Immutable"]], "interactive": [[11, "term-Interactive"]], "kind": [[11, "term-Kind"]], "matrix": [[11, "term-Matrix"]], "number": [[11, "term-Number"]], "numeric": [[11, "term-Numeric"]], "polys": [[11, "term-Polys"]], "printing": [[11, "term-Printing"]], "relational": [[11, "term-Relational"]], "s": [[11, "term-S"]], "simplification": [[11, "term-Simplification"]], "solve": [[11, "term-Solve"]], "solvers": [[11, "term-Solvers"]], "structural equality": [[11, "term-Structural-Equality"]], "subexpression": [[11, "term-Subexpression"]], "substitution": [[11, "term-Substitution"]], "symbol": [[11, "term-Symbol"]], "symbolic": [[11, "term-Symbolic"]], "three-valued logic": [[11, "term-Three-valued-logic"]], "undefined function": [[11, "term-Undefined-Function"]], "unevaluated": [[11, "term-Unevaluated"]], "_eval_*": [[11, "term-_eval_"]], "args": [[11, "term-args"]], "evalf": [[11, "term-evalf"]], "func": [[11, "term-func"]], "is_*": [[11, "term-is_"]], "isympy": [[11, "term-isympy"]], "lambdify()": [[11, "term-lambdify"]], "lamda": [[11, "term-lamda"]], "mpmath": [[11, "term-mpmath"]], "oo": [[11, "term-oo"]], "sympify()": [[11, "term-sympify"]], "zoo": [[11, "term-zoo"]], "module": [[12, "module-sympy.simplify.simplify"], [32, "module-sympy"], [34, "module-sympy.abc"], [35, "module-sympy.algebras"], [36, "module-sympy.assumptions.ask"], [37, "module-sympy.assumptions.assume"], [38, "module-sympy.assumptions"], [39, "module-sympy.assumptions.predicates"], [40, "module-sympy.assumptions.refine"], [41, "module-sympy.calculus"], [41, "module-sympy.calculus.euler"], [41, "module-sympy.calculus.finite_diff"], [41, "module-sympy.calculus.singularities"], [41, "module-sympy.calculus.util"], [42, "module-sympy.categories"], [42, "module-sympy.categories.diagram_drawing"], [43, "module-sympy.codegen.algorithms"], [43, "module-sympy.codegen.approximations"], [43, "module-sympy.codegen.ast"], [43, "module-sympy.codegen.cfunctions"], [43, "module-sympy.codegen.cnodes"], [43, "module-sympy.codegen.cutils"], [43, "module-sympy.codegen.cxxnodes"], [43, "module-sympy.codegen.fnodes"], [43, "module-sympy.codegen.futils"], [43, "module-sympy.codegen.matrix_nodes"], [43, "module-sympy.codegen.pyutils"], [43, "module-sympy.codegen.rewriting"], [45, "module-sympy.combinatorics.galois"], [46, "module-sympy.combinatorics.graycode"], [47, "module-sympy.combinatorics.group_constructs"], [48, "module-sympy.combinatorics.group_numbers"], [50, "module-sympy.combinatorics.named_groups"], [51, "module-sympy.combinatorics.partitions"], [53, "module-sympy.combinatorics.perm_groups"], [54, "module-sympy.combinatorics.generators"], [54, "module-sympy.combinatorics.permutations"], [55, "module-sympy.combinatorics.polyhedron"], [56, "module-sympy.combinatorics.prufer"], [57, "module-sympy.combinatorics.subsets"], [58, "module-sympy.combinatorics.tensor_can"], [59, "module-sympy.combinatorics.testutil"], [60, "module-sympy.combinatorics.util"], [62, "module-sympy.core.add"], [62, "module-sympy.core.assumptions"], [62, "module-sympy.core.basic"], [62, "module-sympy.core.cache"], [62, "module-sympy.core.containers"], [62, "module-sympy.core.evalf"], [62, "module-sympy.core.expr"], [62, "module-sympy.core.exprtools"], [62, "module-sympy.core.function"], [62, "module-sympy.core.kind"], [62, "module-sympy.core.mod"], [62, "module-sympy.core.mul"], [62, "module-sympy.core.multidimensional"], [62, "module-sympy.core.numbers"], [62, "module-sympy.core.power"], [62, "module-sympy.core.random"], [62, "module-sympy.core.relational"], [62, "module-sympy.core.singleton"], [62, "module-sympy.core.symbol"], [62, "module-sympy.core.sympify"], [62, "module-sympy.core.traversal"], [63, "module-sympy.crypto.crypto"], [64, "module-sympy.diffgeom"], [65, "module-sympy.discrete"], [65, "module-sympy.discrete.convolutions"], [65, "module-sympy.discrete.transforms"], [69, "module-sympy.functions"], [70, "module-sympy.functions.special.bessel"], [70, "module-sympy.functions.special.beta_functions"], [70, "module-sympy.functions.special.elliptic_integrals"], [70, "module-sympy.functions.special.error_functions"], [70, "module-sympy.functions.special.gamma_functions"], [70, "module-sympy.functions.special.mathieu_functions"], [70, "module-sympy.functions.special.polynomials"], [70, "module-sympy.functions.special.singularity_functions"], [70, "module-sympy.functions.special.zeta_functions"], [71, "module-sympy.geometry.curve"], [72, "module-sympy.geometry.ellipse"], [73, "module-sympy.geometry.entity"], [75, "module-sympy.geometry.line"], [76, "module-sympy.geometry.plane"], [77, "module-sympy.geometry.point"], [78, "module-sympy.geometry.polygon"], [79, "module-sympy.geometry.util"], [82, "module-sympy.holonomic"], [87, "module-sympy.integrals.meijerint"], [87, "module-sympy.integrals.meijerint_doc"], [89, "module-sympy.integrals"], [89, "module-sympy.integrals.intpoly"], [89, "module-sympy.integrals.transforms"], [90, "module-sympy.interactive"], [90, "module-sympy.interactive.printing"], [90, "module-sympy.interactive.session"], [91, "module-sympy.liealgebras"], [92, "module-sympy.logic"], [92, "module-sympy.logic.inference"], [93, "module-sympy.matrices.common"], [95, "module-sympy.matrices.expressions"], [95, "module-sympy.matrices.expressions.blockmatrix"], [96, "module-sympy.matrices.immutable"], [97, "module-sympy.matrices"], [98, "module-sympy.matrices.matrices"], [100, "module-sympy.matrices.sparse"], [101, "module-sympy.matrices.sparsetools"], [102, "module-sympy.ntheory.bbp_pi"], [102, "module-sympy.ntheory.continued_fraction"], [102, "module-sympy.ntheory.digits"], [102, "module-sympy.ntheory.ecm"], [102, "module-sympy.ntheory.egyptian_fraction"], [102, "module-sympy.ntheory.factor_"], [102, "module-sympy.ntheory.generate"], [102, "module-sympy.ntheory.modular"], [102, "module-sympy.ntheory.multinomial"], [102, "module-sympy.ntheory.partitions_"], [102, "module-sympy.ntheory.primetest"], [102, "module-sympy.ntheory.qs"], [102, "module-sympy.ntheory.residue_ntheory"], [104, "module-sympy.parsing"], [104, "module-sympy.parsing.sym_expr"], [105, "module-sympy.physics.continuum_mechanics.beam"], [108, "module-sympy.physics.continuum_mechanics.truss"], [111, "module-sympy.physics.control"], [112, "module-sympy.physics.control.lti"], [113, "module-sympy.physics.hep.gamma_matrices"], [114, "module-sympy.physics.hydrogen"], [115, "module-sympy.physics.matrices"], [117, "module-sympy.physics.mechanics.body"], [120, "module-sympy.physics.mechanics.joint"], [120, "module-sympy.physics.mechanics.jointsmethod"], [121, "module-sympy.physics.mechanics.kane"], [121, "module-sympy.physics.mechanics.lagrange"], [122, "module-sympy.physics.mechanics.linearize"], [123, "module-sympy.physics.mechanics.particle"], [123, "module-sympy.physics.mechanics.rigidbody"], [125, "module-sympy.physics.mechanics.system"], [136, "module-sympy.physics.mechanics"], [145, "module-sympy.physics.optics.gaussopt"], [147, "module-sympy.physics.optics.medium"], [148, "module-sympy.physics.optics.polarization"], [149, "module-sympy.physics.optics.utils"], [150, "module-sympy.physics.optics.waves"], [151, "module-sympy.physics.paulialgebra"], [152, "module-sympy.physics.qho_1d"], [153, "module-sympy.physics.quantum.anticommutator"], [154, "module-sympy.physics.quantum.cartesian"], [155, "module-sympy.physics.quantum.cg"], [156, "module-sympy.physics.quantum.circuitplot"], [157, "module-sympy.physics.quantum.commutator"], [158, "module-sympy.physics.quantum.constants"], [159, "module-sympy.physics.quantum.dagger"], [160, "module-sympy.physics.quantum.gate"], [161, "module-sympy.physics.quantum.grover"], [162, "module-sympy.physics.quantum.hilbert"], [164, "module-sympy.physics.quantum.innerproduct"], [165, "module-sympy.physics.quantum.operator"], [166, "module-sympy.physics.quantum.operatorset"], [167, "module-sympy.physics.quantum.piab"], [168, "module-sympy.physics.quantum.qapply"], [169, "module-sympy.physics.quantum.qft"], [170, "module-sympy.physics.quantum.qubit"], [171, "module-sympy.physics.quantum.represent"], [172, "module-sympy.physics.quantum.shor"], [173, "module-sympy.physics.quantum.spin"], [174, "module-sympy.physics.quantum.state"], [175, "module-sympy.physics.quantum.tensorproduct"], [176, "module-sympy.physics.secondquant"], [177, "module-sympy.physics.sho"], [178, "module-sympy.physics.units.dimensions"], [182, "module-sympy.physics.units.prefixes"], [183, "module-sympy.physics.units.quantities"], [183, "module-sympy.physics.units.util"], [184, "module-sympy.physics.units.unitsystem"], [190, "module-sympy.physics.vector.functions"], [190, "module-sympy.physics.vector.point"], [193, "module-sympy.physics.vector"], [196, "module-sympy.physics.wigner"], [197, "module-sympy.plotting.plot"], [197, "module-sympy.plotting.pygletplot"], [204, "module-sympy.polys.polyconfig"], [204, "module-sympy.polys.polyoptions"], [206, "module-sympy.polys.numberfields.modules"], [206, "module-sympy.polys.numberfields.subfield"], [207, "module-sympy.polys"], [209, "module-sympy.polys.solvers"], [211, "module-sympy.printing.aesaracode"], [211, "module-sympy.printing.c"], [211, "module-sympy.printing.codeprinter"], [211, "module-sympy.printing.conventions"], [211, "module-sympy.printing.cxx"], [211, "module-sympy.printing.fortran"], [211, "module-sympy.printing.gtk"], [211, "module-sympy.printing.jscode"], [211, "module-sympy.printing.julia"], [211, "module-sympy.printing.lambdarepr"], [211, "module-sympy.printing.latex"], [211, "module-sympy.printing.maple"], [211, "module-sympy.printing.mathematica"], [211, "module-sympy.printing.mathml"], [211, "module-sympy.printing.octave"], [211, "module-sympy.printing.precedence"], [211, "module-sympy.printing.pretty"], [211, "module-sympy.printing.pretty.pretty"], [211, "module-sympy.printing.pretty.pretty_symbology"], [211, "module-sympy.printing.pretty.stringpict"], [211, "module-sympy.printing.preview"], [211, "module-sympy.printing.printer"], [211, "module-sympy.printing.pycode"], [211, "module-sympy.printing.python"], [211, "module-sympy.printing.rcode"], [211, "module-sympy.printing.repr"], [211, "module-sympy.printing.rust"], [211, "module-sympy.printing.smtlib"], [211, "module-sympy.printing.str"], [211, "module-sympy.printing.tree"], [219, "module-sympy.sets.conditionset"], [219, "module-sympy.sets.fancysets"], [219, "module-sympy.sets.powerset"], [219, "module-sympy.sets.sets"], [221, "module-sympy.simplify.hyperexpand_doc"], [223, "module-sympy.simplify.combsimp"], [223, "module-sympy.simplify.cse_main"], [223, "module-sympy.simplify.epathtools"], [223, "module-sympy.simplify.hyperexpand"], [223, "module-sympy.simplify.powsimp"], [223, "module-sympy.simplify.radsimp"], [223, "module-sympy.simplify.ratsimp"], [223, "module-sympy.simplify.sqrtdenest"], [223, "module-sympy.simplify.trigsimp"], [226, "module-sympy.solvers.inequalities"], [227, "module-sympy.solvers.ode"], [227, "module-sympy.solvers.ode.ode"], [228, "module-sympy.solvers.pde"], [229, "module-sympy.solvers"], [229, "module-sympy.solvers.recurr"], [230, "module-sympy.solvers.solveset"], [231, "module-sympy.stats"], [231, "module-sympy.stats.crv"], [231, "module-sympy.stats.crv_types"], [231, "module-sympy.stats.frv"], [231, "module-sympy.stats.frv_types"], [231, "module-sympy.stats.rv"], [232, "module-sympy.tensor.array"], [233, "module-sympy.tensor.array.expressions"], [234, "module-sympy.tensor"], [235, "module-sympy.tensor.index_methods"], [236, "module-sympy.tensor.indexed"], [237, "module-sympy.tensor.tensor"], [238, "module-sympy.tensor.toperators"], [239, "module-sympy.testing"], [240, "module-sympy.testing.pytest"], [241, "module-sympy.testing.randtest"], [242, "module-sympy.testing.runtests"], [243, "module-sympy.utilities.autowrap"], [244, "module-sympy.utilities.codegen"], [245, "module-sympy.utilities.decorator"], [246, "module-sympy.utilities.enumerative"], [247, "module-sympy.utilities.exceptions"], [248, "module-sympy.utilities"], [249, "module-sympy.utilities.iterables"], [250, "module-sympy.utilities.lambdify"], [251, "module-sympy.utilities.memoization"], [252, "module-sympy.utilities.misc"], [253, "module-sympy.utilities.pkgdata"], [254, "module-sympy.utilities.source"], [255, "module-sympy.utilities.timeutils"], [264, "module-sympy.vector"], [273, "module-sympy.physics"]], "sympy.simplify.simplify": [[12, "module-sympy.simplify.simplify"]], "sympy": [[32, "module-sympy"]], "sympy.abc": [[34, "module-sympy.abc"]], "quaternion (class in sympy.algebras)": [[35, "sympy.algebras.Quaternion"]], "add() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.add"]], "angle() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.angle"]], "arc_coplanar() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.arc_coplanar"]], "axis() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.axis"]], "exp() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.exp"]], "from_matrix() (sympy.algebras.quaternion class method)": [[35, "sympy.algebras.Quaternion.from_Matrix"]], "from_axis_angle() (sympy.algebras.quaternion class method)": [[35, "sympy.algebras.Quaternion.from_axis_angle"]], "from_euler() (sympy.algebras.quaternion class method)": [[35, "sympy.algebras.Quaternion.from_euler"]], "from_rotation_matrix() (sympy.algebras.quaternion class method)": [[35, "sympy.algebras.Quaternion.from_rotation_matrix"]], "index_vector() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.index_vector"]], "integrate() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.integrate"]], "inverse() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.inverse"]], "is_pure() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.is_pure"]], "is_zero_quaternion() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.is_zero_quaternion"]], "mensor() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.mensor"]], "mul() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.mul"]], "norm() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.norm"]], "normalize() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.normalize"]], "orthogonal() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.orthogonal"]], "parallel() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.parallel"]], "pow() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.pow"]], "pow_cos_sin() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.pow_cos_sin"]], "product_matrix_left (sympy.algebras.quaternion property)": [[35, "sympy.algebras.Quaternion.product_matrix_left"]], "product_matrix_right (sympy.algebras.quaternion property)": [[35, "sympy.algebras.Quaternion.product_matrix_right"]], "rotate_point() (sympy.algebras.quaternion static method)": [[35, "sympy.algebras.Quaternion.rotate_point"]], "scalar_part() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.scalar_part"]], "set_norm() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.set_norm"]], "sympy.algebras": [[35, "module-sympy.algebras"]], "to_matrix() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.to_Matrix"]], "to_axis_angle() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.to_axis_angle"]], "to_euler() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.to_euler"]], "to_rotation_matrix() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.to_rotation_matrix"]], "vector_coplanar() (sympy.algebras.quaternion class method)": [[35, "sympy.algebras.Quaternion.vector_coplanar"]], "vector_part() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.vector_part"]], "assumptionkeys (class in sympy.assumptions.ask)": [[36, "sympy.assumptions.ask.AssumptionKeys"]], "ask() (in module sympy.assumptions.ask)": [[36, "sympy.assumptions.ask.ask"]], "register_handler() (in module sympy.assumptions.ask)": [[36, "sympy.assumptions.ask.register_handler"]], "remove_handler() (in module sympy.assumptions.ask)": [[36, "sympy.assumptions.ask.remove_handler"]], "sympy.assumptions.ask": [[36, "module-sympy.assumptions.ask"]], "appliedpredicate (class in sympy.assumptions.assume)": [[37, "sympy.assumptions.assume.AppliedPredicate"]], "assumptionscontext (class in sympy.assumptions.assume)": [[37, "sympy.assumptions.assume.AssumptionsContext"]], "predicate (class in sympy.assumptions.assume)": [[37, "sympy.assumptions.assume.Predicate"]], "undefinedpredicate (class in sympy.assumptions.assume)": [[37, "sympy.assumptions.assume.UndefinedPredicate"]], "add() (sympy.assumptions.assume.assumptionscontext method)": [[37, "sympy.assumptions.assume.AssumptionsContext.add"]], "arg (sympy.assumptions.assume.appliedpredicate property)": [[37, "sympy.assumptions.assume.AppliedPredicate.arg"]], "arguments (sympy.assumptions.assume.appliedpredicate property)": [[37, "sympy.assumptions.assume.AppliedPredicate.arguments"]], "assuming() (in module sympy.assumptions.assume)": [[37, "sympy.assumptions.assume.assuming"]], "eval() (sympy.assumptions.assume.predicate method)": [[37, "sympy.assumptions.assume.Predicate.eval"]], "function (sympy.assumptions.assume.appliedpredicate property)": [[37, "sympy.assumptions.assume.AppliedPredicate.function"]], "handler (sympy.assumptions.assume.predicate attribute)": [[37, "sympy.assumptions.assume.Predicate.handler"]], "register() (sympy.assumptions.assume.predicate class method)": [[37, "sympy.assumptions.assume.Predicate.register"]], "register_many() (sympy.assumptions.assume.predicate class method)": [[37, "sympy.assumptions.assume.Predicate.register_many"]], "sympy.assumptions.assume": [[37, "module-sympy.assumptions.assume"]], "sympy.assumptions": [[38, "module-sympy.assumptions"]], "algebraichandler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.AlgebraicPredicate.AlgebraicHandler"]], "algebraicpredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.AlgebraicPredicate"]], "antihermitianpredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.AntihermitianPredicate"]], "commutativepredicate (class in sympy.assumptions.predicates.common)": [[39, "sympy.assumptions.predicates.common.CommutativePredicate"]], "complexelementspredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate"]], "complexpredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.ComplexPredicate"]], "compositepredicate (class in sympy.assumptions.predicates.ntheory)": [[39, "sympy.assumptions.predicates.ntheory.CompositePredicate"]], "diagonalpredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.DiagonalPredicate"]], "evenpredicate (class in sympy.assumptions.predicates.ntheory)": [[39, "sympy.assumptions.predicates.ntheory.EvenPredicate"]], "extendedrealpredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.ExtendedRealPredicate"]], "finitepredicate (class in sympy.assumptions.predicates.calculus)": [[39, "sympy.assumptions.predicates.calculus.FinitePredicate"]], "fullrankpredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.FullRankPredicate"]], "hermitianpredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.HermitianPredicate"]], "imaginarypredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.ImaginaryPredicate"]], "infinitepredicate (class in sympy.assumptions.predicates.calculus)": [[39, "sympy.assumptions.predicates.calculus.InfinitePredicate"]], "integerelementspredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate"]], "integerpredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.IntegerPredicate"]], "invertiblepredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.InvertiblePredicate"]], "irrationalpredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.IrrationalPredicate"]], "istruepredicate (class in sympy.assumptions.predicates.common)": [[39, "sympy.assumptions.predicates.common.IsTruePredicate"]], "lowertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate"]], "negativepredicate (class in sympy.assumptions.predicates.order)": [[39, "sympy.assumptions.predicates.order.NegativePredicate"]], "nonnegativepredicate (class in sympy.assumptions.predicates.order)": [[39, "sympy.assumptions.predicates.order.NonNegativePredicate"]], "nonpositivepredicate (class in sympy.assumptions.predicates.order)": [[39, "sympy.assumptions.predicates.order.NonPositivePredicate"]], "nonzeropredicate (class in sympy.assumptions.predicates.order)": [[39, "sympy.assumptions.predicates.order.NonZeroPredicate"]], "normalpredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.NormalPredicate"]], "oddpredicate (class in sympy.assumptions.predicates.ntheory)": [[39, "sympy.assumptions.predicates.ntheory.OddPredicate"]], "orthogonalpredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.OrthogonalPredicate"]], "positivedefinitepredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate"]], "positivepredicate (class in sympy.assumptions.predicates.order)": [[39, "sympy.assumptions.predicates.order.PositivePredicate"]], "primepredicate (class in sympy.assumptions.predicates.ntheory)": [[39, "sympy.assumptions.predicates.ntheory.PrimePredicate"]], "rationalpredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.RationalPredicate"]], "realelementspredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.RealElementsPredicate"]], "realpredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.RealPredicate"]], "singularpredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.SingularPredicate"]], "squarepredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.SquarePredicate"]], "symmetricpredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.SymmetricPredicate"]], "transcendentalpredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.TranscendentalPredicate"]], "triangularpredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.TriangularPredicate"]], "unittriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate"]], "unitarypredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.UnitaryPredicate"]], "uppertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate"]], "zeropredicate (class in sympy.assumptions.predicates.order)": [[39, "sympy.assumptions.predicates.order.ZeroPredicate"]], "handler (sympy.assumptions.predicates.calculus.finitepredicate attribute)": [[39, "sympy.assumptions.predicates.calculus.FinitePredicate.handler"]], "handler (sympy.assumptions.predicates.calculus.infinitepredicate attribute)": [[39, "sympy.assumptions.predicates.calculus.InfinitePredicate.handler"]], "handler (sympy.assumptions.predicates.common.commutativepredicate attribute)": [[39, "sympy.assumptions.predicates.common.CommutativePredicate.handler"]], "handler (sympy.assumptions.predicates.common.istruepredicate attribute)": [[39, "sympy.assumptions.predicates.common.IsTruePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.complexelementspredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.diagonalpredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.DiagonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.fullrankpredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.FullRankPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.integerelementspredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.invertiblepredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.InvertiblePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.lowertriangularpredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.normalpredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.NormalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.orthogonalpredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.OrthogonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.positivedefinitepredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.realelementspredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.RealElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.singularpredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.SingularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.squarepredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.SquarePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.symmetricpredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.SymmetricPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.triangularpredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.TriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unittriangularpredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unitarypredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.UnitaryPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.uppertriangularpredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.compositepredicate attribute)": [[39, "sympy.assumptions.predicates.ntheory.CompositePredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.evenpredicate attribute)": [[39, "sympy.assumptions.predicates.ntheory.EvenPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.oddpredicate attribute)": [[39, "sympy.assumptions.predicates.ntheory.OddPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.primepredicate attribute)": [[39, "sympy.assumptions.predicates.ntheory.PrimePredicate.handler"]], "handler (sympy.assumptions.predicates.order.negativepredicate attribute)": [[39, "sympy.assumptions.predicates.order.NegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonnegativepredicate attribute)": [[39, "sympy.assumptions.predicates.order.NonNegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonpositivepredicate attribute)": [[39, "sympy.assumptions.predicates.order.NonPositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonzeropredicate attribute)": [[39, "sympy.assumptions.predicates.order.NonZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.order.positivepredicate attribute)": [[39, "sympy.assumptions.predicates.order.PositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.zeropredicate attribute)": [[39, "sympy.assumptions.predicates.order.ZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.AlgebraicPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.antihermitianpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.AntihermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.complexpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.ComplexPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.extendedrealpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.ExtendedRealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.hermitianpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.HermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.imaginarypredicate attribute)": [[39, "sympy.assumptions.predicates.sets.ImaginaryPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.integerpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.IntegerPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.irrationalpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.IrrationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.rationalpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.RationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.realpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.RealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.transcendentalpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.TranscendentalPredicate.handler"]], "sympy.assumptions.predicates": [[39, "module-sympy.assumptions.predicates"]], "refine() (in module sympy.assumptions.refine)": [[40, "sympy.assumptions.refine.refine"]], "refine_pow() (in module sympy.assumptions.refine)": [[40, "sympy.assumptions.refine.refine_Pow"]], "refine_abs() (in module sympy.assumptions.refine)": [[40, "sympy.assumptions.refine.refine_abs"]], "refine_arg() (in module sympy.assumptions.refine)": [[40, "sympy.assumptions.refine.refine_arg"]], "refine_atan2() (in module sympy.assumptions.refine)": [[40, "sympy.assumptions.refine.refine_atan2"]], "refine_im() (in module sympy.assumptions.refine)": [[40, "sympy.assumptions.refine.refine_im"]], "refine_matrixelement() (in module sympy.assumptions.refine)": [[40, "sympy.assumptions.refine.refine_matrixelement"]], "refine_re() (in module sympy.assumptions.refine)": [[40, "sympy.assumptions.refine.refine_re"]], "refine_sign() (in module sympy.assumptions.refine)": [[40, "sympy.assumptions.refine.refine_sign"]], "sympy.assumptions.refine": [[40, "module-sympy.assumptions.refine"]], "apply_finite_diff() (in module sympy.calculus.finite_diff)": [[41, "sympy.calculus.finite_diff.apply_finite_diff"]], "continuous_domain() (in module sympy.calculus.util)": [[41, "sympy.calculus.util.continuous_domain"]], "differentiate_finite() (in module sympy.calculus.finite_diff)": [[41, "sympy.calculus.finite_diff.differentiate_finite"]], "euler_equations() (in module sympy.calculus.euler)": [[41, "sympy.calculus.euler.euler_equations"]], "finite_diff_weights() (in module sympy.calculus.finite_diff)": [[41, "sympy.calculus.finite_diff.finite_diff_weights"]], "function_range() (in module sympy.calculus.util)": [[41, "sympy.calculus.util.function_range"]], "is_convex() (in module sympy.calculus.util)": [[41, "sympy.calculus.util.is_convex"]], "is_decreasing() (in module sympy.calculus.singularities)": [[41, "sympy.calculus.singularities.is_decreasing"]], "is_increasing() (in module sympy.calculus.singularities)": [[41, "sympy.calculus.singularities.is_increasing"]], "is_monotonic() (in module sympy.calculus.singularities)": [[41, "sympy.calculus.singularities.is_monotonic"]], "is_strictly_decreasing() (in module sympy.calculus.singularities)": [[41, "sympy.calculus.singularities.is_strictly_decreasing"]], "is_strictly_increasing() (in module sympy.calculus.singularities)": [[41, "sympy.calculus.singularities.is_strictly_increasing"]], "lcim() (in module sympy.calculus.util)": [[41, "sympy.calculus.util.lcim"]], "maximum() (in module sympy.calculus.util)": [[41, "sympy.calculus.util.maximum"]], "minimum() (in module sympy.calculus.util)": [[41, "sympy.calculus.util.minimum"]], "monotonicity_helper() (in module sympy.calculus.singularities)": [[41, "sympy.calculus.singularities.monotonicity_helper"]], "not_empty_in() (in module sympy.calculus.util)": [[41, "sympy.calculus.util.not_empty_in"]], "periodicity() (in module sympy.calculus.util)": [[41, "sympy.calculus.util.periodicity"]], "singularities() (in module sympy.calculus.singularities)": [[41, "sympy.calculus.singularities.singularities"]], "stationary_points() (in module sympy.calculus.util)": [[41, "sympy.calculus.util.stationary_points"]], "sympy.calculus": [[41, "module-sympy.calculus"]], "sympy.calculus.euler": [[41, "module-sympy.calculus.euler"]], "sympy.calculus.finite_diff": [[41, "module-sympy.calculus.finite_diff"]], "sympy.calculus.singularities": [[41, "module-sympy.calculus.singularities"]], "sympy.calculus.util": [[41, "module-sympy.calculus.util"]], "arrowstringdescription (class in sympy.categories.diagram_drawing)": [[42, "sympy.categories.diagram_drawing.ArrowStringDescription"]], "category (class in sympy.categories)": [[42, "sympy.categories.Category"]], "compositemorphism (class in sympy.categories)": [[42, "sympy.categories.CompositeMorphism"]], "diagram (class in sympy.categories)": [[42, "sympy.categories.Diagram"]], "diagramgrid (class in sympy.categories.diagram_drawing)": [[42, "sympy.categories.diagram_drawing.DiagramGrid"]], "identitymorphism (class in sympy.categories)": [[42, "sympy.categories.IdentityMorphism"]], "morphism (class in sympy.categories)": [[42, "sympy.categories.Morphism"]], "namedmorphism (class in sympy.categories)": [[42, "sympy.categories.NamedMorphism"]], "object (class in sympy.categories)": [[42, "sympy.categories.Object"]], "xypicdiagramdrawer (class in sympy.categories.diagram_drawing)": [[42, "sympy.categories.diagram_drawing.XypicDiagramDrawer"]], "codomain (sympy.categories.compositemorphism property)": [[42, "sympy.categories.CompositeMorphism.codomain"]], "codomain (sympy.categories.morphism property)": [[42, "sympy.categories.Morphism.codomain"]], "commutative_diagrams (sympy.categories.category property)": [[42, "sympy.categories.Category.commutative_diagrams"]], "components (sympy.categories.compositemorphism property)": [[42, "sympy.categories.CompositeMorphism.components"]], "compose() (sympy.categories.morphism method)": [[42, "sympy.categories.Morphism.compose"]], "conclusions (sympy.categories.diagram property)": [[42, "sympy.categories.Diagram.conclusions"]], "domain (sympy.categories.compositemorphism property)": [[42, "sympy.categories.CompositeMorphism.domain"]], "domain (sympy.categories.morphism property)": [[42, "sympy.categories.Morphism.domain"]], "draw() (sympy.categories.diagram_drawing.xypicdiagramdrawer method)": [[42, "sympy.categories.diagram_drawing.XypicDiagramDrawer.draw"]], "flatten() (sympy.categories.compositemorphism method)": [[42, "sympy.categories.CompositeMorphism.flatten"]], "height (sympy.categories.diagram_drawing.diagramgrid property)": [[42, "sympy.categories.diagram_drawing.DiagramGrid.height"]], "hom() (sympy.categories.diagram method)": [[42, "sympy.categories.Diagram.hom"]], "is_subdiagram() (sympy.categories.diagram method)": [[42, "sympy.categories.Diagram.is_subdiagram"]], "morphisms (sympy.categories.diagram_drawing.diagramgrid property)": [[42, "sympy.categories.diagram_drawing.DiagramGrid.morphisms"]], "name (sympy.categories.category property)": [[42, "sympy.categories.Category.name"]], "name (sympy.categories.namedmorphism property)": [[42, "sympy.categories.NamedMorphism.name"]], "objects (sympy.categories.category property)": [[42, "sympy.categories.Category.objects"]], "objects (sympy.categories.diagram property)": [[42, "sympy.categories.Diagram.objects"]], "premises (sympy.categories.diagram property)": [[42, "sympy.categories.Diagram.premises"]], "preview_diagram() (in module sympy.categories.diagram_drawing)": [[42, "sympy.categories.diagram_drawing.preview_diagram"]], "subdiagram_from_objects() (sympy.categories.diagram method)": [[42, "sympy.categories.Diagram.subdiagram_from_objects"]], "sympy.categories": [[42, "module-sympy.categories"]], "sympy.categories.diagram_drawing": [[42, "module-sympy.categories.diagram_drawing"]], "width (sympy.categories.diagram_drawing.diagramgrid property)": [[42, "sympy.categories.diagram_drawing.DiagramGrid.width"]], "xypic_draw_diagram() (in module sympy.categories.diagram_drawing)": [[42, "sympy.categories.diagram_drawing.xypic_draw_diagram"]], "arrayconstructor (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.ArrayConstructor"]], "assignment (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Assignment"]], "assignmentbase (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.AssignmentBase"]], "attribute (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Attribute"]], "augmentedassignment (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.AugmentedAssignment"]], "breaktoken (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.BreakToken"]], "cbrt (class in sympy.codegen.cfunctions)": [[43, "sympy.codegen.cfunctions.Cbrt"]], "codeblock (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.CodeBlock"]], "commaoperator (class in sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.CommaOperator"]], "comment (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Comment"]], "complextype (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.ComplexType"]], "continuetoken (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.ContinueToken"]], "declaration (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Declaration"]], "do (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.Do"]], "element (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Element"]], "extent (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.Extent"]], "floatbasetype (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.FloatBaseType"]], "floattype (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.FloatType"]], "for (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.For"]], "fortranreturn (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.FortranReturn"]], "funcminusoneoptim (class in sympy.codegen.rewriting)": [[43, "sympy.codegen.rewriting.FuncMinusOneOptim"]], "functioncall (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.FunctionCall"]], "functiondefinition (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.FunctionDefinition"]], "functionprototype (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.FunctionPrototype"]], "goto (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.GoTo"]], "implieddoloop (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.ImpliedDoLoop"]], "intbasetype (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.IntBaseType"]], "label (class in sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.Label"]], "matrixsolve (class in sympy.codegen.matrix_nodes)": [[43, "sympy.codegen.matrix_nodes.MatrixSolve"]], "module (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.Module"]], "node (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Node"]], "nonetoken (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.NoneToken"]], "optimization (class in sympy.codegen.rewriting)": [[43, "sympy.codegen.rewriting.Optimization"]], "pointer (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Pointer"]], "postdecrement (class in sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.PostDecrement"]], "postincrement (class in sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.PostIncrement"]], "predecrement (class in sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.PreDecrement"]], "preincrement (class in sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.PreIncrement"]], "print (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Print"]], "program (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.Program"]], "quotedstring (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.QuotedString"]], "replaceoptim (class in sympy.codegen.rewriting)": [[43, "sympy.codegen.rewriting.ReplaceOptim"]], "return (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Return"]], "scope (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Scope"]], "seriesapprox (class in sympy.codegen.approximations)": [[43, "sympy.codegen.approximations.SeriesApprox"]], "signedinttype (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.SignedIntType"]], "sqrt (class in sympy.codegen.cfunctions)": [[43, "sympy.codegen.cfunctions.Sqrt"]], "stream (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Stream"]], "string (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.String"]], "subroutine (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.Subroutine"]], "subroutinecall (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.SubroutineCall"]], "sumapprox (class in sympy.codegen.approximations)": [[43, "sympy.codegen.approximations.SumApprox"]], "token (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Token"]], "type (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Type"]], "unsignedinttype (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.UnsignedIntType"]], "variable (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Variable"]], "while (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.While"]], "alignof() (in module sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.alignof"]], "allocated() (in module sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.allocated"]], "array() (in module sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.array"]], "as_declaration() (sympy.codegen.ast.variable method)": [[43, "sympy.codegen.ast.Variable.as_Declaration"]], "attr_params() (sympy.codegen.ast.node method)": [[43, "sympy.codegen.ast.Node.attr_params"]], "aug_assign() (in module sympy.codegen.ast)": [[43, "sympy.codegen.ast.aug_assign"]], "bind_c() (in module sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.bind_C"]], "cast_check() (sympy.codegen.ast.type method)": [[43, "sympy.codegen.ast.Type.cast_check"]], "cast_nocheck (sympy.codegen.ast.floatbasetype attribute)": [[43, "sympy.codegen.ast.FloatBaseType.cast_nocheck"]], "cast_nocheck() (sympy.codegen.ast.floattype method)": [[43, "sympy.codegen.ast.FloatType.cast_nocheck"]], "cmplx (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.cmplx"]], "create_expand_pow_optimization() (in module sympy.codegen.rewriting)": [[43, "sympy.codegen.rewriting.create_expand_pow_optimization"]], "cse() (sympy.codegen.ast.codeblock method)": [[43, "sympy.codegen.ast.CodeBlock.cse"]], "decimal_dig (sympy.codegen.ast.floattype property)": [[43, "sympy.codegen.ast.FloatType.decimal_dig"]], "deduced() (sympy.codegen.ast.variable class method)": [[43, "sympy.codegen.ast.Variable.deduced"]], "dig (sympy.codegen.ast.floattype property)": [[43, "sympy.codegen.ast.FloatType.dig"]], "dimension() (in module sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.dimension"]], "dsign (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.dsign"]], "eps (sympy.codegen.ast.floattype property)": [[43, "sympy.codegen.ast.FloatType.eps"]], "exp2 (class in sympy.codegen.cfunctions)": [[43, "sympy.codegen.cfunctions.exp2"]], "expm1 (class in sympy.codegen.cfunctions)": [[43, "sympy.codegen.cfunctions.expm1"]], "fdiff() (sympy.codegen.cfunctions.cbrt method)": [[43, "sympy.codegen.cfunctions.Cbrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.sqrt method)": [[43, "sympy.codegen.cfunctions.Sqrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.exp2 method)": [[43, "sympy.codegen.cfunctions.exp2.fdiff"]], "fdiff() (sympy.codegen.cfunctions.expm1 method)": [[43, "sympy.codegen.cfunctions.expm1.fdiff"]], "fdiff() (sympy.codegen.cfunctions.fma method)": [[43, "sympy.codegen.cfunctions.fma.fdiff"]], "fdiff() (sympy.codegen.cfunctions.hypot method)": [[43, "sympy.codegen.cfunctions.hypot.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log10 method)": [[43, "sympy.codegen.cfunctions.log10.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log1p method)": [[43, "sympy.codegen.cfunctions.log1p.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log2 method)": [[43, "sympy.codegen.cfunctions.log2.fdiff"]], "fma (class in sympy.codegen.cfunctions)": [[43, "sympy.codegen.cfunctions.fma"]], "from_expr() (sympy.codegen.ast.type class method)": [[43, "sympy.codegen.ast.Type.from_expr"]], "goto (class in sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.goto"]], "hypot (class in sympy.codegen.cfunctions)": [[43, "sympy.codegen.cfunctions.hypot"]], "isign (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.isign"]], "kind (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.kind"]], "kwargs() (sympy.codegen.ast.token method)": [[43, "sympy.codegen.ast.Token.kwargs"]], "lbound() (in module sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.lbound"]], "literal_dp (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.literal_dp"]], "literal_sp (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.literal_sp"]], "log10 (class in sympy.codegen.cfunctions)": [[43, "sympy.codegen.cfunctions.log10"]], "log1p (class in sympy.codegen.cfunctions)": [[43, "sympy.codegen.cfunctions.log1p"]], "log2 (class in sympy.codegen.cfunctions)": [[43, "sympy.codegen.cfunctions.log2"]], "max (sympy.codegen.ast.floattype property)": [[43, "sympy.codegen.ast.FloatType.max"]], "max_exponent (sympy.codegen.ast.floattype property)": [[43, "sympy.codegen.ast.FloatType.max_exponent"]], "merge (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.merge"]], "min_exponent (sympy.codegen.ast.floattype property)": [[43, "sympy.codegen.ast.FloatType.min_exponent"]], "newtons_method() (in module sympy.codegen.algorithms)": [[43, "sympy.codegen.algorithms.newtons_method"]], "newtons_method_function() (in module sympy.codegen.algorithms)": [[43, "sympy.codegen.algorithms.newtons_method_function"]], "optimize() (in module sympy.codegen.rewriting)": [[43, "sympy.codegen.rewriting.optimize"]], "render_as_module() (in module sympy.codegen.futils)": [[43, "sympy.codegen.futils.render_as_module"]], "render_as_module() (in module sympy.codegen.pyutils)": [[43, "sympy.codegen.pyutils.render_as_module"]], "render_as_source_file() (in module sympy.codegen.cutils)": [[43, "sympy.codegen.cutils.render_as_source_file"]], "replace_in_add() (sympy.codegen.rewriting.funcminusoneoptim method)": [[43, "sympy.codegen.rewriting.FuncMinusOneOptim.replace_in_Add"]], "reshape() (in module sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.reshape"]], "shape() (in module sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.shape"]], "size() (in module sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.size"]], "sizeof() (in module sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.sizeof"]], "struct (class in sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.struct"]], "sympy.codegen.algorithms": [[43, "module-sympy.codegen.algorithms"]], "sympy.codegen.approximations": [[43, "module-sympy.codegen.approximations"]], "sympy.codegen.ast": [[43, "module-sympy.codegen.ast"]], "sympy.codegen.cfunctions": [[43, "module-sympy.codegen.cfunctions"]], "sympy.codegen.cnodes": [[43, "module-sympy.codegen.cnodes"]], "sympy.codegen.cutils": [[43, "module-sympy.codegen.cutils"]], "sympy.codegen.cxxnodes": [[43, "module-sympy.codegen.cxxnodes"]], "sympy.codegen.fnodes": [[43, "module-sympy.codegen.fnodes"]], "sympy.codegen.futils": [[43, "module-sympy.codegen.futils"]], "sympy.codegen.matrix_nodes": [[43, "module-sympy.codegen.matrix_nodes"]], "sympy.codegen.pyutils": [[43, "module-sympy.codegen.pyutils"]], "sympy.codegen.rewriting": [[43, "module-sympy.codegen.rewriting"]], "tiny (sympy.codegen.ast.floattype property)": [[43, "sympy.codegen.ast.FloatType.tiny"]], "topological_sort() (sympy.codegen.ast.codeblock class method)": [[43, "sympy.codegen.ast.CodeBlock.topological_sort"]], "union (class in sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.union"]], "use (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.use"]], "use_rename (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.use_rename"]], "using (class in sympy.codegen.cxxnodes)": [[43, "sympy.codegen.cxxnodes.using"]], "a4_in_s6() (in module sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.A4_in_S6"]], "a4xc2() (in module sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.A4xC2"]], "g18() (in module sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.G18"]], "g36m() (in module sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.G36m"]], "g36p() (in module sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.G36p"]], "g72() (in module sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.G72"]], "m20() (in module sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.M20"]], "pgl2f5() (in module sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.PGL2F5"]], "psl2f5() (in module sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.PSL2F5"]], "s1transitivesubgroups (class in sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.S1TransitiveSubgroups"]], "s2transitivesubgroups (class in sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.S2TransitiveSubgroups"]], "s3transitivesubgroups (class in sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.S3TransitiveSubgroups"]], "s3_in_s6() (in module sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.S3_in_S6"]], "s4transitivesubgroups (class in sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.S4TransitiveSubgroups"]], "s4m() (in module sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.S4m"]], "s4p() (in module sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.S4p"]], "s4xc2() (in module sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.S4xC2"]], "s5transitivesubgroups (class in sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.S5TransitiveSubgroups"]], "s6transitivesubgroups (class in sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.S6TransitiveSubgroups"]], "find_transitive_subgroups_of_s6() (in module sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.find_transitive_subgroups_of_S6"]], "four_group() (in module sympy.combinatorics.galois)": [[45, "sympy.combinatorics.galois.four_group"]], "sympy.combinatorics.galois": [[45, "module-sympy.combinatorics.galois"]], "graycode (class in sympy.combinatorics.graycode)": [[46, "sympy.combinatorics.graycode.GrayCode"]], "bin_to_gray() (sympy.combinatorics.graycode method)": [[46, "sympy.combinatorics.graycode.bin_to_gray"]], "current (sympy.combinatorics.graycode.graycode property)": [[46, "sympy.combinatorics.graycode.GrayCode.current"]], "generate_gray() (sympy.combinatorics.graycode.graycode method)": [[46, "sympy.combinatorics.graycode.GrayCode.generate_gray"]], "get_subset_from_bitstring() (sympy.combinatorics.graycode method)": [[46, "sympy.combinatorics.graycode.get_subset_from_bitstring"]], "gray_to_bin() (sympy.combinatorics.graycode method)": [[46, "sympy.combinatorics.graycode.gray_to_bin"]], "graycode_subsets() (sympy.combinatorics.graycode method)": [[46, "sympy.combinatorics.graycode.graycode_subsets"]], "n (sympy.combinatorics.graycode.graycode property)": [[46, "sympy.combinatorics.graycode.GrayCode.n"]], "next() (sympy.combinatorics.graycode.graycode method)": [[46, "sympy.combinatorics.graycode.GrayCode.next"]], "random_bitstring() (sympy.combinatorics.graycode method)": [[46, "sympy.combinatorics.graycode.random_bitstring"]], "rank (sympy.combinatorics.graycode.graycode property)": [[46, "sympy.combinatorics.graycode.GrayCode.rank"]], "selections (sympy.combinatorics.graycode.graycode property)": [[46, "sympy.combinatorics.graycode.GrayCode.selections"]], "skip() (sympy.combinatorics.graycode.graycode method)": [[46, "sympy.combinatorics.graycode.GrayCode.skip"]], "sympy.combinatorics.graycode": [[46, "module-sympy.combinatorics.graycode"]], "unrank() (sympy.combinatorics.graycode.graycode class method)": [[46, "sympy.combinatorics.graycode.GrayCode.unrank"]], "directproduct() (in module sympy.combinatorics.group_constructs)": [[47, "sympy.combinatorics.group_constructs.DirectProduct"]], "sympy.combinatorics.group_constructs": [[47, "module-sympy.combinatorics.group_constructs"]], "is_abelian_number() (in module sympy.combinatorics.group_numbers)": [[48, "sympy.combinatorics.group_numbers.is_abelian_number"]], "is_cyclic_number() (in module sympy.combinatorics.group_numbers)": [[48, "sympy.combinatorics.group_numbers.is_cyclic_number"]], "is_nilpotent_number() (in module sympy.combinatorics.group_numbers)": [[48, "sympy.combinatorics.group_numbers.is_nilpotent_number"]], "sympy.combinatorics.group_numbers": [[48, "module-sympy.combinatorics.group_numbers"]], "abeliangroup() (in module sympy.combinatorics.named_groups)": [[50, "sympy.combinatorics.named_groups.AbelianGroup"]], "alternatinggroup() (in module sympy.combinatorics.named_groups)": [[50, "sympy.combinatorics.named_groups.AlternatingGroup"]], "cyclicgroup() (in module sympy.combinatorics.named_groups)": [[50, "sympy.combinatorics.named_groups.CyclicGroup"]], "dihedralgroup() (in module sympy.combinatorics.named_groups)": [[50, "sympy.combinatorics.named_groups.DihedralGroup"]], "symmetricgroup() (in module sympy.combinatorics.named_groups)": [[50, "sympy.combinatorics.named_groups.SymmetricGroup"]], "sympy.combinatorics.named_groups": [[50, "module-sympy.combinatorics.named_groups"]], "integerpartition (class in sympy.combinatorics.partitions)": [[51, "sympy.combinatorics.partitions.IntegerPartition"]], "partition (class in sympy.combinatorics.partitions)": [[51, "sympy.combinatorics.partitions.Partition"]], "rgs (sympy.combinatorics.partitions.partition property)": [[51, "sympy.combinatorics.partitions.Partition.RGS"]], "rgs_enum() (in module sympy.combinatorics.partitions)": [[51, "sympy.combinatorics.partitions.RGS_enum"]], "rgs_generalized() (in module sympy.combinatorics.partitions)": [[51, "sympy.combinatorics.partitions.RGS_generalized"]], "rgs_rank() (in module sympy.combinatorics.partitions)": [[51, "sympy.combinatorics.partitions.RGS_rank"]], "rgs_unrank() (in module sympy.combinatorics.partitions)": [[51, "sympy.combinatorics.partitions.RGS_unrank"]], "as_dict() (sympy.combinatorics.partitions.integerpartition method)": [[51, "sympy.combinatorics.partitions.IntegerPartition.as_dict"]], "as_ferrers() (sympy.combinatorics.partitions.integerpartition method)": [[51, "sympy.combinatorics.partitions.IntegerPartition.as_ferrers"]], "conjugate (sympy.combinatorics.partitions.integerpartition property)": [[51, "sympy.combinatorics.partitions.IntegerPartition.conjugate"]], "from_rgs() (sympy.combinatorics.partitions.partition class method)": [[51, "sympy.combinatorics.partitions.Partition.from_rgs"]], "next_lex() (sympy.combinatorics.partitions.integerpartition method)": [[51, "sympy.combinatorics.partitions.IntegerPartition.next_lex"]], "partition (sympy.combinatorics.partitions.partition property)": [[51, "sympy.combinatorics.partitions.Partition.partition"]], "prev_lex() (sympy.combinatorics.partitions.integerpartition method)": [[51, "sympy.combinatorics.partitions.IntegerPartition.prev_lex"]], "random_integer_partition() (in module sympy.combinatorics.partitions)": [[51, "sympy.combinatorics.partitions.random_integer_partition"]], "rank (sympy.combinatorics.partitions.partition property)": [[51, "sympy.combinatorics.partitions.Partition.rank"]], "sort_key() (sympy.combinatorics.partitions.partition method)": [[51, "sympy.combinatorics.partitions.Partition.sort_key"]], "sympy.combinatorics.partitions": [[51, "module-sympy.combinatorics.partitions"]], "permutationgroup (class in sympy.combinatorics.perm_groups)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup"]], "__contains__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.__contains__"]], "__mul__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.__mul__"]], "__new__() (sympy.combinatorics.perm_groups.permutationgroup static method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.__new__"]], "__weakref__ (sympy.combinatorics.perm_groups.permutationgroup attribute)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.__weakref__"]], "_coset_representative() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup._coset_representative"]], "_distinct_primes_lemma() (sympy.combinatorics.perm_groups.permutationgroup class method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup._distinct_primes_lemma"]], "_elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup._elements"]], "_eval_is_alt_sym_monte_carlo() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_monte_carlo"]], "_eval_is_alt_sym_naive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_naive"]], "_p_elements_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup._p_elements_group"]], "_random_pr_init() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup._random_pr_init"]], "_sylow_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup._sylow_alt_sym"]], "_union_find_merge() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge"]], "_union_find_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep"]], "_verify() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup._verify"]], "abelian_invariants() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.abelian_invariants"]], "base (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.base"]], "baseswap() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.baseswap"]], "basic_orbits (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits"]], "basic_stabilizers (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers"]], "basic_transversals (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals"]], "center() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.center"]], "centralizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.centralizer"]], "commutator() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.commutator"]], "composition_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.composition_series"]], "conjugacy_class() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_class"]], "conjugacy_classes() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_classes"]], "contains() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.contains"]], "coset_factor() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.coset_factor"]], "coset_rank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.coset_rank"]], "coset_table() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.coset_table"]], "coset_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.coset_transversal"]], "coset_unrank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.coset_unrank"]], "degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.degree"]], "derived_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.derived_series"]], "derived_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup"]], "elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.elements"]], "equals() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.equals"]], "generate() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.generate"]], "generate_dimino() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.generate_dimino"]], "generate_schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.generate_schreier_sims"]], "generator_product() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.generator_product"]], "generators (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.generators"]], "identity (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.identity"]], "index() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.index"]], "is_abelian (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.is_abelian"]], "is_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym"]], "is_alternating (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.is_alternating"]], "is_cyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.is_cyclic"]], "is_dihedral (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.is_dihedral"]], "is_elementary() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.is_elementary"]], "is_nilpotent (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.is_nilpotent"]], "is_normal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.is_normal"]], "is_perfect (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.is_perfect"]], "is_polycyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.is_polycyclic"]], "is_primitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.is_primitive"]], "is_solvable (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.is_solvable"]], "is_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.is_subgroup"]], "is_symmetric (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.is_symmetric"]], "is_transitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.is_transitive"]], "is_trivial (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.is_trivial"]], "lower_central_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.lower_central_series"]], "make_perm() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.make_perm"]], "max_div (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.max_div"]], "minimal_block() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"]], "minimal_blocks() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_blocks"]], "normal_closure() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.normal_closure"]], "orbit() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.orbit"]], "orbit_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_rep"]], "orbit_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_transversal"]], "orbits() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.orbits"]], "order() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.order"]], "pointwise_stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.pointwise_stabilizer"]], "polycyclic_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.polycyclic_group"]], "presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.presentation"]], "random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.random"]], "random_pr() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.random_pr"]], "random_stab() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.random_stab"]], "schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims"]], "schreier_sims_incremental() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental"]], "schreier_sims_random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random"]], "schreier_vector() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_vector"]], "stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.stabilizer"]], "strong_gens (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens"]], "strong_presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.strong_presentation"]], "subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup"]], "subgroup_search() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup_search"]], "sylow_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.sylow_subgroup"]], "sympy.combinatorics.perm_groups": [[53, "module-sympy.combinatorics.perm_groups"]], "transitivity_degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[53, "sympy.combinatorics.perm_groups.PermutationGroup.transitivity_degree"]], "cycle (class in sympy.combinatorics.permutations)": [[54, "sympy.combinatorics.permutations.Cycle"]], "permutation (class in sympy.combinatorics.permutations)": [[54, "sympy.combinatorics.permutations.Permutation"]], "_af_parity() (in module sympy.combinatorics.permutations)": [[54, "sympy.combinatorics.permutations._af_parity"]], "alternating() (sympy.combinatorics.generators method)": [[54, "sympy.combinatorics.generators.alternating"]], "apply() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.apply"]], "array_form (sympy.combinatorics.permutations.permutation property)": [[54, "sympy.combinatorics.permutations.Permutation.array_form"]], "ascents() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.ascents"]], "atoms() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.atoms"]], "cardinality (sympy.combinatorics.permutations.permutation property)": [[54, "sympy.combinatorics.permutations.Permutation.cardinality"]], "commutator() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.commutator"]], "commutes_with() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.commutes_with"]], "cycle_structure (sympy.combinatorics.permutations.permutation property)": [[54, "sympy.combinatorics.permutations.Permutation.cycle_structure"]], "cycles (sympy.combinatorics.permutations.permutation property)": [[54, "sympy.combinatorics.permutations.Permutation.cycles"]], "cyclic() (sympy.combinatorics.generators method)": [[54, "sympy.combinatorics.generators.cyclic"]], "cyclic_form (sympy.combinatorics.permutations.permutation property)": [[54, "sympy.combinatorics.permutations.Permutation.cyclic_form"]], "descents() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.descents"]], "dihedral() (sympy.combinatorics.generators method)": [[54, "sympy.combinatorics.generators.dihedral"]], "from_inversion_vector() (sympy.combinatorics.permutations.permutation class method)": [[54, "sympy.combinatorics.permutations.Permutation.from_inversion_vector"]], "from_sequence() (sympy.combinatorics.permutations.permutation class method)": [[54, "sympy.combinatorics.permutations.Permutation.from_sequence"]], "full_cyclic_form (sympy.combinatorics.permutations.permutation property)": [[54, "sympy.combinatorics.permutations.Permutation.full_cyclic_form"]], "get_adjacency_distance() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.get_adjacency_distance"]], "get_adjacency_matrix() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix"]], "get_positional_distance() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.get_positional_distance"]], "get_precedence_distance() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.get_precedence_distance"]], "get_precedence_matrix() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"]], "index() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.index"]], "inversion_vector() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.inversion_vector"]], "inversions() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.inversions"]], "is_empty (sympy.combinatorics.permutations.permutation property)": [[54, "sympy.combinatorics.permutations.Permutation.is_Empty"]], "is_identity (sympy.combinatorics.permutations.permutation property)": [[54, "sympy.combinatorics.permutations.Permutation.is_Identity"]], "is_singleton (sympy.combinatorics.permutations.permutation property)": [[54, "sympy.combinatorics.permutations.Permutation.is_Singleton"]], "is_even (sympy.combinatorics.permutations.permutation property)": [[54, "sympy.combinatorics.permutations.Permutation.is_even"]], "is_odd (sympy.combinatorics.permutations.permutation property)": [[54, "sympy.combinatorics.permutations.Permutation.is_odd"]], "josephus() (sympy.combinatorics.permutations.permutation class method)": [[54, "sympy.combinatorics.permutations.Permutation.josephus"]], "length() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.length"]], "list() (sympy.combinatorics.permutations.cycle method)": [[54, "sympy.combinatorics.permutations.Cycle.list"]], "list() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.list"]], "max() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.max"]], "min() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.min"]], "mul_inv() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.mul_inv"]], "next_lex() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.next_lex"]], "next_nonlex() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.next_nonlex"]], "next_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.next_trotterjohnson"]], "order() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.order"]], "parity() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.parity"]], "random() (sympy.combinatorics.permutations.permutation class method)": [[54, "sympy.combinatorics.permutations.Permutation.random"]], "rank() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.rank"]], "rank_nonlex() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.rank_nonlex"]], "rank_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.rank_trotterjohnson"]], "resize() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.resize"]], "rmul() (sympy.combinatorics.permutations.permutation static method)": [[54, "sympy.combinatorics.permutations.Permutation.rmul"]], "rmul_with_af() (sympy.combinatorics.permutations.permutation class method)": [[54, "sympy.combinatorics.permutations.Permutation.rmul_with_af"]], "runs() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.runs"]], "signature() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.signature"]], "size (sympy.combinatorics.permutations.permutation property)": [[54, "sympy.combinatorics.permutations.Permutation.size"]], "support() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.support"]], "symmetric() (sympy.combinatorics.generators method)": [[54, "sympy.combinatorics.generators.symmetric"]], "sympy.combinatorics.generators": [[54, "module-sympy.combinatorics.generators"]], "sympy.combinatorics.permutations": [[54, "module-sympy.combinatorics.permutations"]], "transpositions() (sympy.combinatorics.permutations.permutation method)": [[54, "sympy.combinatorics.permutations.Permutation.transpositions"]], "unrank_lex() (sympy.combinatorics.permutations.permutation class method)": [[54, "sympy.combinatorics.permutations.Permutation.unrank_lex"]], "unrank_nonlex() (sympy.combinatorics.permutations.permutation class method)": [[54, "sympy.combinatorics.permutations.Permutation.unrank_nonlex"]], "unrank_trotterjohnson() (sympy.combinatorics.permutations.permutation class method)": [[54, "sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson"]], "polyhedron (class in sympy.combinatorics.polyhedron)": [[55, "sympy.combinatorics.polyhedron.Polyhedron"]], "array_form (sympy.combinatorics.polyhedron.polyhedron property)": [[55, "sympy.combinatorics.polyhedron.Polyhedron.array_form"]], "corners (sympy.combinatorics.polyhedron.polyhedron property)": [[55, "sympy.combinatorics.polyhedron.Polyhedron.corners"]], "cyclic_form (sympy.combinatorics.polyhedron.polyhedron property)": [[55, "sympy.combinatorics.polyhedron.Polyhedron.cyclic_form"]], "edges (sympy.combinatorics.polyhedron.polyhedron property)": [[55, "sympy.combinatorics.polyhedron.Polyhedron.edges"]], "faces (sympy.combinatorics.polyhedron.polyhedron property)": [[55, "sympy.combinatorics.polyhedron.Polyhedron.faces"]], "pgroup (sympy.combinatorics.polyhedron.polyhedron property)": [[55, "sympy.combinatorics.polyhedron.Polyhedron.pgroup"]], "reset() (sympy.combinatorics.polyhedron.polyhedron method)": [[55, "sympy.combinatorics.polyhedron.Polyhedron.reset"]], "rotate() (sympy.combinatorics.polyhedron.polyhedron method)": [[55, "sympy.combinatorics.polyhedron.Polyhedron.rotate"]], "size (sympy.combinatorics.polyhedron.polyhedron property)": [[55, "sympy.combinatorics.polyhedron.Polyhedron.size"]], "sympy.combinatorics.polyhedron": [[55, "module-sympy.combinatorics.polyhedron"]], "vertices (sympy.combinatorics.polyhedron.polyhedron property)": [[55, "sympy.combinatorics.polyhedron.Polyhedron.vertices"]], "prufer (class in sympy.combinatorics.prufer)": [[56, "sympy.combinatorics.prufer.Prufer"]], "edges() (sympy.combinatorics.prufer.prufer static method)": [[56, "sympy.combinatorics.prufer.Prufer.edges"]], "next() (sympy.combinatorics.prufer.prufer method)": [[56, "sympy.combinatorics.prufer.Prufer.next"]], "nodes (sympy.combinatorics.prufer.prufer property)": [[56, "sympy.combinatorics.prufer.Prufer.nodes"]], "prev() (sympy.combinatorics.prufer.prufer method)": [[56, "sympy.combinatorics.prufer.Prufer.prev"]], "prufer_rank() (sympy.combinatorics.prufer.prufer method)": [[56, "sympy.combinatorics.prufer.Prufer.prufer_rank"]], "prufer_repr (sympy.combinatorics.prufer.prufer property)": [[56, "sympy.combinatorics.prufer.Prufer.prufer_repr"]], "rank (sympy.combinatorics.prufer.prufer property)": [[56, "sympy.combinatorics.prufer.Prufer.rank"]], "size (sympy.combinatorics.prufer.prufer property)": [[56, "sympy.combinatorics.prufer.Prufer.size"]], "sympy.combinatorics.prufer": [[56, "module-sympy.combinatorics.prufer"]], "to_prufer() (sympy.combinatorics.prufer.prufer static method)": [[56, "sympy.combinatorics.prufer.Prufer.to_prufer"]], "to_tree() (sympy.combinatorics.prufer.prufer static method)": [[56, "sympy.combinatorics.prufer.Prufer.to_tree"]], "tree_repr (sympy.combinatorics.prufer.prufer property)": [[56, "sympy.combinatorics.prufer.Prufer.tree_repr"]], "unrank() (sympy.combinatorics.prufer.prufer class method)": [[56, "sympy.combinatorics.prufer.Prufer.unrank"]], "subset (class in sympy.combinatorics.subsets)": [[57, "sympy.combinatorics.subsets.Subset"]], "bitlist_from_subset() (sympy.combinatorics.subsets.subset class method)": [[57, "sympy.combinatorics.subsets.Subset.bitlist_from_subset"]], "cardinality (sympy.combinatorics.subsets.subset property)": [[57, "sympy.combinatorics.subsets.Subset.cardinality"]], "iterate_binary() (sympy.combinatorics.subsets.subset method)": [[57, "sympy.combinatorics.subsets.Subset.iterate_binary"]], "iterate_graycode() (sympy.combinatorics.subsets.subset method)": [[57, "sympy.combinatorics.subsets.Subset.iterate_graycode"]], "ksubsets() (sympy.combinatorics.subsets method)": [[57, "sympy.combinatorics.subsets.ksubsets"]], "next_binary() (sympy.combinatorics.subsets.subset method)": [[57, "sympy.combinatorics.subsets.Subset.next_binary"]], "next_gray() (sympy.combinatorics.subsets.subset method)": [[57, "sympy.combinatorics.subsets.Subset.next_gray"]], "next_lexicographic() (sympy.combinatorics.subsets.subset method)": [[57, "sympy.combinatorics.subsets.Subset.next_lexicographic"]], "prev_binary() (sympy.combinatorics.subsets.subset method)": [[57, "sympy.combinatorics.subsets.Subset.prev_binary"]], "prev_gray() (sympy.combinatorics.subsets.subset method)": [[57, "sympy.combinatorics.subsets.Subset.prev_gray"]], "prev_lexicographic() (sympy.combinatorics.subsets.subset method)": [[57, "sympy.combinatorics.subsets.Subset.prev_lexicographic"]], "rank_binary (sympy.combinatorics.subsets.subset property)": [[57, "sympy.combinatorics.subsets.Subset.rank_binary"]], "rank_gray (sympy.combinatorics.subsets.subset property)": [[57, "sympy.combinatorics.subsets.Subset.rank_gray"]], "rank_lexicographic (sympy.combinatorics.subsets.subset property)": [[57, "sympy.combinatorics.subsets.Subset.rank_lexicographic"]], "size (sympy.combinatorics.subsets.subset property)": [[57, "sympy.combinatorics.subsets.Subset.size"]], "subset (sympy.combinatorics.subsets.subset property)": [[57, "sympy.combinatorics.subsets.Subset.subset"]], "subset_from_bitlist() (sympy.combinatorics.subsets.subset class method)": [[57, "sympy.combinatorics.subsets.Subset.subset_from_bitlist"]], "subset_indices() (sympy.combinatorics.subsets.subset class method)": [[57, "sympy.combinatorics.subsets.Subset.subset_indices"]], "superset (sympy.combinatorics.subsets.subset property)": [[57, "sympy.combinatorics.subsets.Subset.superset"]], "superset_size (sympy.combinatorics.subsets.subset property)": [[57, "sympy.combinatorics.subsets.Subset.superset_size"]], "sympy.combinatorics.subsets": [[57, "module-sympy.combinatorics.subsets"]], "unrank_binary() (sympy.combinatorics.subsets.subset class method)": [[57, "sympy.combinatorics.subsets.Subset.unrank_binary"]], "unrank_gray() (sympy.combinatorics.subsets.subset class method)": [[57, "sympy.combinatorics.subsets.Subset.unrank_gray"]], "bsgs_direct_product() (in module sympy.combinatorics.tensor_can)": [[58, "sympy.combinatorics.tensor_can.bsgs_direct_product"]], "canonicalize() (in module sympy.combinatorics.tensor_can)": [[58, "sympy.combinatorics.tensor_can.canonicalize"]], "double_coset_can_rep() (in module sympy.combinatorics.tensor_can)": [[58, "sympy.combinatorics.tensor_can.double_coset_can_rep"]], "get_symmetric_group_sgs() (in module sympy.combinatorics.tensor_can)": [[58, "sympy.combinatorics.tensor_can.get_symmetric_group_sgs"]], "sympy.combinatorics.tensor_can": [[58, "module-sympy.combinatorics.tensor_can"]], "_cmp_perm_lists() (in module sympy.combinatorics.testutil)": [[59, "sympy.combinatorics.testutil._cmp_perm_lists"]], "_naive_list_centralizer() (in module sympy.combinatorics.testutil)": [[59, "sympy.combinatorics.testutil._naive_list_centralizer"]], "_verify_bsgs() (in module sympy.combinatorics.testutil)": [[59, "sympy.combinatorics.testutil._verify_bsgs"]], "_verify_centralizer() (in module sympy.combinatorics.testutil)": [[59, "sympy.combinatorics.testutil._verify_centralizer"]], "_verify_normal_closure() (in module sympy.combinatorics.testutil)": [[59, "sympy.combinatorics.testutil._verify_normal_closure"]], "sympy.combinatorics.testutil": [[59, "module-sympy.combinatorics.testutil"]], "_base_ordering() (in module sympy.combinatorics.util)": [[60, "sympy.combinatorics.util._base_ordering"]], "_check_cycles_alt_sym() (in module sympy.combinatorics.util)": [[60, "sympy.combinatorics.util._check_cycles_alt_sym"]], "_distribute_gens_by_base() (in module sympy.combinatorics.util)": [[60, "sympy.combinatorics.util._distribute_gens_by_base"]], "_handle_precomputed_bsgs() (in module sympy.combinatorics.util)": [[60, "sympy.combinatorics.util._handle_precomputed_bsgs"]], "_orbits_transversals_from_bsgs() (in module sympy.combinatorics.util)": [[60, "sympy.combinatorics.util._orbits_transversals_from_bsgs"]], "_remove_gens() (in module sympy.combinatorics.util)": [[60, "sympy.combinatorics.util._remove_gens"]], "_strip() (in module sympy.combinatorics.util)": [[60, "sympy.combinatorics.util._strip"]], "_strong_gens_from_distr() (in module sympy.combinatorics.util)": [[60, "sympy.combinatorics.util._strong_gens_from_distr"]], "sympy.combinatorics.util": [[60, "module-sympy.combinatorics.util"]], "exprwithintlimits (class in sympy.concrete.expr_with_intlimits)": [[61, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits"]], "product (class in sympy.concrete.products)": [[61, "sympy.concrete.products.Product"]], "sum (class in sympy.concrete.summations)": [[61, "sympy.concrete.summations.Sum"]], "change_index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[61, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.change_index"]], "euler_maclaurin() (sympy.concrete.summations.sum method)": [[61, "sympy.concrete.summations.Sum.euler_maclaurin"]], "eval_zeta_function() (sympy.concrete.summations.sum method)": [[61, "sympy.concrete.summations.Sum.eval_zeta_function"]], "gosper_normal() (in module sympy.concrete.gosper)": [[61, "sympy.concrete.gosper.gosper_normal"]], "gosper_sum() (in module sympy.concrete.gosper)": [[61, "sympy.concrete.gosper.gosper_sum"]], "gosper_term() (in module sympy.concrete.gosper)": [[61, "sympy.concrete.gosper.gosper_term"]], "has_empty_sequence (sympy.concrete.expr_with_intlimits.exprwithintlimits property)": [[61, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.has_empty_sequence"]], "index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[61, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.index"]], "is_absolutely_convergent() (sympy.concrete.summations.sum method)": [[61, "sympy.concrete.summations.Sum.is_absolutely_convergent"]], "is_convergent() (sympy.concrete.products.product method)": [[61, "sympy.concrete.products.Product.is_convergent"]], "is_convergent() (sympy.concrete.summations.sum method)": [[61, "sympy.concrete.summations.Sum.is_convergent"]], "product() (in module sympy.concrete.products)": [[61, "sympy.concrete.products.product"]], "reorder() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[61, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder"]], "reorder_limit() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[61, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder_limit"]], "reverse_order() (sympy.concrete.products.product method)": [[61, "sympy.concrete.products.Product.reverse_order"]], "reverse_order() (sympy.concrete.summations.sum method)": [[61, "sympy.concrete.summations.Sum.reverse_order"]], "summation() (in module sympy.concrete.summations)": [[61, "sympy.concrete.summations.summation"]], "add (class in sympy.core.add)": [[62, "sympy.core.add.Add"]], "algebraicnumber (class in sympy.core.numbers)": [[62, "sympy.core.numbers.AlgebraicNumber"]], "atom (class in sympy.core.basic)": [[62, "sympy.core.basic.Atom"]], "atomicexpr (class in sympy.core.expr)": [[62, "sympy.core.expr.AtomicExpr"]], "basic (class in sympy.core.basic)": [[62, "sympy.core.basic.Basic"]], "booleankind (in module sympy.core.kind)": [[62, "sympy.core.kind.BooleanKind"]], "catalan (class in sympy.core.numbers)": [[62, "sympy.core.numbers.Catalan"]], "complexinfinity (class in sympy.core.numbers)": [[62, "sympy.core.numbers.ComplexInfinity"]], "derivative (class in sympy.core.function)": [[62, "sympy.core.function.Derivative"]], "dict (class in sympy.core.containers)": [[62, "sympy.core.containers.Dict"]], "dummy (class in sympy.core.symbol)": [[62, "sympy.core.symbol.Dummy"]], "eq (in module sympy.core.relational)": [[62, "sympy.core.relational.Eq"]], "equality (class in sympy.core.relational)": [[62, "sympy.core.relational.Equality"]], "eulergamma (class in sympy.core.numbers)": [[62, "sympy.core.numbers.EulerGamma"]], "evalfmixin (class in sympy.core.evalf)": [[62, "sympy.core.evalf.EvalfMixin"]], "exp1 (class in sympy.core.numbers)": [[62, "sympy.core.numbers.Exp1"]], "expr (class in sympy.core.expr)": [[62, "sympy.core.expr.Expr"]], "float (class in sympy.core.numbers)": [[62, "sympy.core.numbers.Float"]], "function (class in sympy.core.function)": [[62, "sympy.core.function.Function"]], "functionclass (class in sympy.core.function)": [[62, "sympy.core.function.FunctionClass"]], "ge (in module sympy.core.relational)": [[62, "sympy.core.relational.Ge"]], "goldenratio (class in sympy.core.numbers)": [[62, "sympy.core.numbers.GoldenRatio"]], "greaterthan (class in sympy.core.relational)": [[62, "sympy.core.relational.GreaterThan"]], "gt (in module sympy.core.relational)": [[62, "sympy.core.relational.Gt"]], "half (class in sympy.core.numbers)": [[62, "sympy.core.numbers.Half"]], "imaginaryunit (class in sympy.core.numbers)": [[62, "sympy.core.numbers.ImaginaryUnit"]], "infinity (class in sympy.core.numbers)": [[62, "sympy.core.numbers.Infinity"]], "integer (class in sympy.core.numbers)": [[62, "sympy.core.numbers.Integer"]], "kind (class in sympy.core.kind)": [[62, "sympy.core.kind.Kind"]], "lambda (class in sympy.core.function)": [[62, "sympy.core.function.Lambda"]], "le (in module sympy.core.relational)": [[62, "sympy.core.relational.Le"]], "lessthan (class in sympy.core.relational)": [[62, "sympy.core.relational.LessThan"]], "lt (in module sympy.core.relational)": [[62, "sympy.core.relational.Lt"]], "mod (class in sympy.core.mod)": [[62, "sympy.core.mod.Mod"]], "mul (class in sympy.core.mul)": [[62, "sympy.core.mul.Mul"]], "n() (in module sympy.core.evalf)": [[62, "sympy.core.evalf.N"]], "nan (class in sympy.core.numbers)": [[62, "sympy.core.numbers.NaN"]], "ne (in module sympy.core.relational)": [[62, "sympy.core.relational.Ne"]], "negativeinfinity (class in sympy.core.numbers)": [[62, "sympy.core.numbers.NegativeInfinity"]], "negativeone (class in sympy.core.numbers)": [[62, "sympy.core.numbers.NegativeOne"]], "number (class in sympy.core.numbers)": [[62, "sympy.core.numbers.Number"]], "numberkind (in module sympy.core.kind)": [[62, "sympy.core.kind.NumberKind"]], "numbersymbol (class in sympy.core.numbers)": [[62, "sympy.core.numbers.NumberSymbol"]], "one (class in sympy.core.numbers)": [[62, "sympy.core.numbers.One"]], "pep 335": [[62, "index-0"], [62, "index-1"], [62, "index-2"], [62, "index-3"]], "pi (class in sympy.core.numbers)": [[62, "sympy.core.numbers.Pi"]], "poleerror (class in sympy.core.function)": [[62, "sympy.core.function.PoleError"]], "pow (class in sympy.core.power)": [[62, "sympy.core.power.Pow"]], "precisionexhausted (class in sympy.core.evalf)": [[62, "sympy.core.evalf.PrecisionExhausted"]], "python enhancement proposals": [[62, "index-0"], [62, "index-1"], [62, "index-2"], [62, "index-3"]], "rational (class in sympy.core.numbers)": [[62, "sympy.core.numbers.Rational"]], "realnumber (in module sympy.core.numbers)": [[62, "sympy.core.numbers.RealNumber"]], "rel (in module sympy.core.relational)": [[62, "sympy.core.relational.Rel"]], "relational (class in sympy.core.relational)": [[62, "sympy.core.relational.Relational"]], "singleton (class in sympy.core.singleton)": [[62, "sympy.core.singleton.Singleton"]], "singletonregistry (class in sympy.core.singleton)": [[62, "sympy.core.singleton.SingletonRegistry"]], "strictgreaterthan (class in sympy.core.relational)": [[62, "sympy.core.relational.StrictGreaterThan"]], "strictlessthan (class in sympy.core.relational)": [[62, "sympy.core.relational.StrictLessThan"]], "subs (class in sympy.core.function)": [[62, "sympy.core.function.Subs"]], "symbol (class in sympy.core.symbol)": [[62, "sympy.core.symbol.Symbol"]], "tribonacciconstant (class in sympy.core.numbers)": [[62, "sympy.core.numbers.TribonacciConstant"]], "tuple (class in sympy.core.containers)": [[62, "sympy.core.containers.Tuple"]], "tuplekind (class in sympy.core.containers)": [[62, "sympy.core.containers.TupleKind"]], "undefinedkind (in module sympy.core.kind)": [[62, "sympy.core.kind.UndefinedKind"]], "unequality (class in sympy.core.relational)": [[62, "sympy.core.relational.Unequality"]], "unevaluatedexpr (class in sympy.core.expr)": [[62, "sympy.core.expr.UnevaluatedExpr"]], "wild (class in sympy.core.symbol)": [[62, "sympy.core.symbol.Wild"]], "wildfunction (class in sympy.core.function)": [[62, "sympy.core.function.WildFunction"]], "zero (class in sympy.core.numbers)": [[62, "sympy.core.numbers.Zero"]], "__cacheit() (in module sympy.core.cache)": [[62, "sympy.core.cache.__cacheit"]], "__new__() (sympy.core.numbers.algebraicnumber static method)": [[62, "sympy.core.numbers.AlgebraicNumber.__new__"]], "_diff_wrt (sympy.core.function.derivative property)": [[62, "sympy.core.function.Derivative._diff_wrt"]], "_randint() (in module sympy.core.random)": [[62, "sympy.core.random._randint"]], "_randrange() (in module sympy.core.random)": [[62, "sympy.core.random._randrange"]], "_sort_variable_count() (sympy.core.function.derivative class method)": [[62, "sympy.core.function.Derivative._sort_variable_count"]], "algebraic": [[62, "term-algebraic"]], "antihermitian": [[62, "term-antihermitian"]], "apart() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.apart"]], "approximation() (sympy.core.numbers.numbersymbol method)": [[62, "sympy.core.numbers.NumberSymbol.approximation"]], "args (sympy.core.basic.basic property)": [[62, "sympy.core.basic.Basic.args"]], "args_cnc() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.args_cnc"]], "as_base_exp() (sympy.core.function.function method)": [[62, "sympy.core.function.Function.as_base_exp"]], "as_base_exp() (sympy.core.power.pow method)": [[62, "sympy.core.power.Pow.as_base_exp"]], "as_coeff_add() (sympy.core.add.add method)": [[62, "sympy.core.add.Add.as_coeff_Add"], [62, "sympy.core.add.Add.as_coeff_add"]], "as_coeff_add() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.as_coeff_Add"], [62, "sympy.core.expr.Expr.as_coeff_add"]], "as_coeff_add() (sympy.core.numbers.number method)": [[62, "sympy.core.numbers.Number.as_coeff_Add"]], "as_coeff_add() (sympy.core.numbers.rational method)": [[62, "sympy.core.numbers.Rational.as_coeff_Add"]], "as_coeff_mul() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.as_coeff_Mul"], [62, "sympy.core.expr.Expr.as_coeff_mul"]], "as_coeff_mul() (sympy.core.mul.mul method)": [[62, "sympy.core.mul.Mul.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.number method)": [[62, "sympy.core.numbers.Number.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.rational method)": [[62, "sympy.core.numbers.Rational.as_coeff_Mul"]], "as_coeff_exponent() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.as_coeff_exponent"]], "as_coefficient() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.as_coefficient"]], "as_coefficients_dict() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.as_coefficients_dict"]], "as_content_primitive() (sympy.core.add.add method)": [[62, "sympy.core.add.Add.as_content_primitive"]], "as_content_primitive() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.as_content_primitive"]], "as_content_primitive() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.as_content_primitive"]], "as_content_primitive() (sympy.core.mul.mul method)": [[62, "sympy.core.mul.Mul.as_content_primitive"]], "as_content_primitive() (sympy.core.numbers.rational method)": [[62, "sympy.core.numbers.Rational.as_content_primitive"]], "as_content_primitive() (sympy.core.power.pow method)": [[62, "sympy.core.power.Pow.as_content_primitive"]], "as_dummy() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.as_dummy"]], "as_expr() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.as_expr"]], "as_expr() (sympy.core.numbers.algebraicnumber method)": [[62, "sympy.core.numbers.AlgebraicNumber.as_expr"]], "as_finite_difference() (sympy.core.function.derivative method)": [[62, "sympy.core.function.Derivative.as_finite_difference"]], "as_independent() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.as_independent"]], "as_leading_term() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.as_leading_term"]], "as_numer_denom() (sympy.core.add.add method)": [[62, "sympy.core.add.Add.as_numer_denom"]], "as_numer_denom() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.as_numer_denom"]], "as_ordered_factors() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.as_ordered_factors"]], "as_ordered_factors() (sympy.core.mul.mul method)": [[62, "sympy.core.mul.Mul.as_ordered_factors"]], "as_ordered_terms() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.as_ordered_terms"]], "as_poly() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.as_poly"]], "as_poly() (sympy.core.numbers.algebraicnumber method)": [[62, "sympy.core.numbers.AlgebraicNumber.as_poly"]], "as_poly() (sympy.core.relational.equality method)": [[62, "sympy.core.relational.Equality.as_poly"]], "as_powers_dict() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.as_powers_dict"]], "as_real_imag() (sympy.core.add.add method)": [[62, "sympy.core.add.Add.as_real_imag"]], "as_real_imag() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.as_real_imag"]], "as_terms() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.as_terms"]], "as_two_terms() (sympy.core.add.add method)": [[62, "sympy.core.add.Add.as_two_terms"]], "as_two_terms() (sympy.core.mul.mul method)": [[62, "sympy.core.mul.Mul.as_two_terms"]], "aseries() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.aseries"]], "assumptions0 (sympy.core.basic.basic property)": [[62, "sympy.core.basic.Basic.assumptions0"]], "atoms() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.atoms"]], "bottom_up() (in module sympy.core.traversal)": [[62, "sympy.core.traversal.bottom_up"]], "bound_symbols (sympy.core.function.lambda property)": [[62, "sympy.core.function.Lambda.bound_symbols"]], "bound_symbols (sympy.core.function.subs property)": [[62, "sympy.core.function.Subs.bound_symbols"]], "cancel() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.cancel"]], "canonical (sympy.core.relational.relational property)": [[62, "sympy.core.relational.Relational.canonical"]], "canonical_variables (sympy.core.basic.basic property)": [[62, "sympy.core.basic.Basic.canonical_variables"]], "class_key() (sympy.core.basic.basic class method)": [[62, "sympy.core.basic.Basic.class_key"]], "coeff() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.coeff"]], "coeffs() (sympy.core.numbers.algebraicnumber method)": [[62, "sympy.core.numbers.AlgebraicNumber.coeffs"]], "cofactors() (sympy.core.numbers.number method)": [[62, "sympy.core.numbers.Number.cofactors"]], "collect() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.collect"]], "combsimp() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.combsimp"]], "commutative": [[62, "term-commutative"]], "compare() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.compare"]], "complex": [[62, "term-complex"]], "composite": [[62, "term-composite"]], "compute_leading_term() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.compute_leading_term"]], "conjugate() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.conjugate"]], "could_extract_minus_sign() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.could_extract_minus_sign"]], "count() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.count"]], "count_ops() (in module sympy.core.function)": [[62, "sympy.core.function.count_ops"]], "count_ops() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.count_ops"]], "default_sort_key() (in module sympy.core.sorting)": [[62, "sympy.core.sorting.default_sort_key"]], "diff() (in module sympy.core.function)": [[62, "sympy.core.function.diff"]], "doit() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.doit"]], "doit_numerically() (sympy.core.function.derivative method)": [[62, "sympy.core.function.Derivative.doit_numerically"]], "dummy_eq() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.dummy_eq"]], "equal_valued() (in module sympy.core.numbers)": [[62, "sympy.core.numbers.equal_valued"]], "equals() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.equals"]], "equals() (sympy.core.relational.relational method)": [[62, "sympy.core.relational.Relational.equals"]], "evalf() (sympy.core.evalf.evalfmixin method)": [[62, "sympy.core.evalf.EvalfMixin.evalf"]], "even": [[62, "term-even"]], "expand() (in module sympy.core.function)": [[62, "sympy.core.function.expand"]], "expand() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.expand"]], "expand_complex() (in module sympy.core.function)": [[62, "sympy.core.function.expand_complex"]], "expand_func() (in module sympy.core.function)": [[62, "sympy.core.function.expand_func"]], "expand_log() (in module sympy.core.function)": [[62, "sympy.core.function.expand_log"]], "expand_mul() (in module sympy.core.function)": [[62, "sympy.core.function.expand_mul"]], "expand_multinomial() (in module sympy.core.function)": [[62, "sympy.core.function.expand_multinomial"]], "expand_power_base() (in module sympy.core.function)": [[62, "sympy.core.function.expand_power_base"]], "expand_power_exp() (in module sympy.core.function)": [[62, "sympy.core.function.expand_power_exp"]], "expand_trig() (in module sympy.core.function)": [[62, "sympy.core.function.expand_trig"]], "expr (sympy.core.function.lambda property)": [[62, "sympy.core.function.Lambda.expr"]], "expr (sympy.core.function.subs property)": [[62, "sympy.core.function.Subs.expr"]], "expr_free_symbols (sympy.core.expr.expr property)": [[62, "sympy.core.expr.Expr.expr_free_symbols"]], "extended_negative": [[62, "term-extended_negative"]], "extended_nonnegative": [[62, "term-extended_nonnegative"]], "extended_nonpositive": [[62, "term-extended_nonpositive"]], "extended_nonzero": [[62, "term-extended_nonzero"]], "extended_positive": [[62, "term-extended_positive"]], "extended_real": [[62, "term-extended_real"]], "extract_additively() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.extract_additively"]], "extract_branch_factor() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.extract_branch_factor"]], "extract_leading_order() (sympy.core.add.add method)": [[62, "sympy.core.add.Add.extract_leading_order"]], "extract_multiplicatively() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.extract_multiplicatively"]], "factor() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.factor"]], "factor_terms() (in module sympy.core.exprtools)": [[62, "sympy.core.exprtools.factor_terms"]], "factors() (sympy.core.numbers.rational method)": [[62, "sympy.core.numbers.Rational.factors"]], "fdiff() (sympy.core.function.function method)": [[62, "sympy.core.function.Function.fdiff"]], "field_element() (sympy.core.numbers.algebraicnumber method)": [[62, "sympy.core.numbers.AlgebraicNumber.field_element"]], "find() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.find"]], "finite": [[62, "term-finite"]], "flatten() (sympy.core.add.add class method)": [[62, "sympy.core.add.Add.flatten"]], "flatten() (sympy.core.mul.mul class method)": [[62, "sympy.core.mul.Mul.flatten"]], "fourier_series() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.fourier_series"]], "fps() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.fps"]], "free_symbols (sympy.core.basic.basic property)": [[62, "sympy.core.basic.Basic.free_symbols"]], "fromiter() (sympy.core.basic.basic class method)": [[62, "sympy.core.basic.Basic.fromiter"]], "func (sympy.core.basic.basic property)": [[62, "sympy.core.basic.Basic.func"]], "gammasimp() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.gammasimp"]], "gcd() (sympy.core.numbers.number method)": [[62, "sympy.core.numbers.Number.gcd"]], "gcd_terms() (in module sympy.core.exprtools)": [[62, "sympy.core.exprtools.gcd_terms"]], "get() (sympy.core.containers.dict method)": [[62, "sympy.core.containers.Dict.get"]], "geto() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.getO"]], "getn() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.getn"]], "has() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.has"]], "has_free() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.has_free"]], "has_xfree() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.has_xfree"]], "hermitian": [[62, "term-hermitian"]], "igcd() (in module sympy.core.numbers)": [[62, "sympy.core.numbers.igcd"]], "ilcm() (in module sympy.core.numbers)": [[62, "sympy.core.numbers.ilcm"]], "imaginary": [[62, "term-imaginary"]], "index() (sympy.core.containers.tuple method)": [[62, "sympy.core.containers.Tuple.index"]], "infinite": [[62, "term-infinite"]], "integer": [[62, "term-integer"]], "integer_log() (in module sympy.core.power)": [[62, "sympy.core.power.integer_log"]], "integer_nthroot() (in module sympy.core.power)": [[62, "sympy.core.power.integer_nthroot"]], "integrate() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.integrate"]], "integrate() (sympy.core.relational.equality method)": [[62, "sympy.core.relational.Equality.integrate"]], "invert() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.invert"]], "irrational": [[62, "term-irrational"]], "is_algebraic_expr() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.is_algebraic_expr"]], "is_aliased (sympy.core.numbers.algebraicnumber property)": [[62, "sympy.core.numbers.AlgebraicNumber.is_aliased"]], "is_comparable (sympy.core.basic.basic property)": [[62, "sympy.core.basic.Basic.is_comparable"]], "is_constant() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.is_constant"]], "is_identity (sympy.core.function.lambda property)": [[62, "sympy.core.function.Lambda.is_identity"]], "is_meromorphic() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.is_meromorphic"]], "is_number (sympy.core.expr.expr property)": [[62, "sympy.core.expr.Expr.is_number"]], "is_polynomial() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.is_polynomial"]], "is_primitive_element (sympy.core.numbers.algebraicnumber property)": [[62, "sympy.core.numbers.AlgebraicNumber.is_primitive_element"]], "is_rational_function() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.is_rational_function"]], "is_singular() (sympy.core.function.function class method)": [[62, "sympy.core.function.Function.is_singular"]], "items() (sympy.core.containers.dict method)": [[62, "sympy.core.containers.Dict.items"]], "keys() (sympy.core.containers.dict method)": [[62, "sympy.core.containers.Dict.keys"]], "kind (sympy.core.containers.tuple property)": [[62, "sympy.core.containers.Tuple.kind"]], "lcm() (sympy.core.numbers.number method)": [[62, "sympy.core.numbers.Number.lcm"]], "leadterm() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.leadterm"]], "lhs (sympy.core.relational.relational property)": [[62, "sympy.core.relational.Relational.lhs"]], "limit() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.limit"]], "limit_denominator() (sympy.core.numbers.rational method)": [[62, "sympy.core.numbers.Rational.limit_denominator"]], "lseries() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.lseries"]], "match() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.match"]], "matches() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.matches"]], "minpoly_of_element() (sympy.core.numbers.algebraicnumber method)": [[62, "sympy.core.numbers.AlgebraicNumber.minpoly_of_element"]], "mod_inverse() (in module sympy.core.numbers)": [[62, "sympy.core.numbers.mod_inverse"]], "n() (sympy.core.evalf.evalfmixin method)": [[62, "sympy.core.evalf.EvalfMixin.n"]], "nargs (sympy.core.function.functionclass property)": [[62, "sympy.core.function.FunctionClass.nargs"]], "native_coeffs() (sympy.core.numbers.algebraicnumber method)": [[62, "sympy.core.numbers.AlgebraicNumber.native_coeffs"]], "negated (sympy.core.relational.relational property)": [[62, "sympy.core.relational.Relational.negated"]], "negative": [[62, "term-negative"]], "nfloat() (in module sympy.core.function)": [[62, "sympy.core.function.nfloat"]], "nonnegative": [[62, "term-nonnegative"]], "nonpositive": [[62, "term-nonpositive"]], "nonzero": [[62, "term-nonzero"]], "normal() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.normal"]], "nseries() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.nseries"]], "nsimplify() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.nsimplify"]], "odd": [[62, "term-odd"]], "ordered() (in module sympy.core.sorting)": [[62, "sympy.core.sorting.ordered"]], "point (sympy.core.function.subs property)": [[62, "sympy.core.function.Subs.point"]], "positive": [[62, "term-positive"]], "postorder_traversal() (in module sympy.core.traversal)": [[62, "sympy.core.traversal.postorder_traversal"]], "powsimp() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.powsimp"]], "preorder_traversal() (in module sympy.core.traversal)": [[62, "sympy.core.traversal.preorder_traversal"]], "prime": [[62, "term-prime"]], "primitive() (sympy.core.add.add method)": [[62, "sympy.core.add.Add.primitive"]], "primitive() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.primitive"]], "primitive_element() (sympy.core.numbers.algebraicnumber method)": [[62, "sympy.core.numbers.AlgebraicNumber.primitive_element"]], "prod() (in module sympy.core.mul)": [[62, "sympy.core.mul.prod"]], "radsimp() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.radsimp"]], "random_complex_number() (in module sympy.core.random)": [[62, "sympy.core.random.random_complex_number"]], "rational": [[62, "term-rational"]], "ratsimp() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.ratsimp"]], "rcall() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.rcall"]], "real": [[62, "term-real"]], "refine() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.refine"]], "removeo() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.removeO"]], "replace() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.replace"]], "reversed (sympy.core.relational.relational property)": [[62, "sympy.core.relational.Relational.reversed"]], "reversedsign (sympy.core.relational.relational property)": [[62, "sympy.core.relational.Relational.reversedsign"]], "rewrite() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.rewrite"]], "rhs (sympy.core.relational.relational property)": [[62, "sympy.core.relational.Relational.rhs"]], "round() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.round"]], "separate() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.separate"]], "series() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.series"]], "seterr() (in module sympy.core.numbers)": [[62, "sympy.core.numbers.seterr"]], "signature (sympy.core.function.lambda property)": [[62, "sympy.core.function.Lambda.signature"]], "simplify() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.simplify"]], "sort_key() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.sort_key"]], "strict (sympy.core.relational.relational property)": [[62, "sympy.core.relational.Relational.strict"]], "subs() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.subs"]], "symbols() (in module sympy.core.symbol)": [[62, "sympy.core.symbol.symbols"]], "sympify() (in module sympy.core.sympify)": [[62, "sympy.core.sympify.sympify"]], "sympy.core.add": [[62, "module-sympy.core.add"]], "sympy.core.assumptions": [[62, "module-sympy.core.assumptions"]], "sympy.core.basic": [[62, "module-sympy.core.basic"]], "sympy.core.cache": [[62, "module-sympy.core.cache"]], "sympy.core.containers": [[62, "module-sympy.core.containers"]], "sympy.core.evalf": [[62, "module-sympy.core.evalf"]], "sympy.core.expr": [[62, "module-sympy.core.expr"]], "sympy.core.exprtools": [[62, "module-sympy.core.exprtools"]], "sympy.core.function": [[62, "module-sympy.core.function"]], "sympy.core.kind": [[62, "module-sympy.core.kind"]], "sympy.core.mod": [[62, "module-sympy.core.mod"]], "sympy.core.mul": [[62, "module-sympy.core.mul"]], "sympy.core.multidimensional": [[62, "module-sympy.core.multidimensional"]], "sympy.core.numbers": [[62, "module-sympy.core.numbers"]], "sympy.core.power": [[62, "module-sympy.core.power"]], "sympy.core.random": [[62, "module-sympy.core.random"]], "sympy.core.relational": [[62, "module-sympy.core.relational"]], "sympy.core.singleton": [[62, "module-sympy.core.singleton"]], "sympy.core.symbol": [[62, "module-sympy.core.symbol"]], "sympy.core.sympify": [[62, "module-sympy.core.sympify"]], "sympy.core.traversal": [[62, "module-sympy.core.traversal"]], "taylor_term() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.taylor_term"]], "test_derivative_numerically() (in module sympy.core.random)": [[62, "sympy.core.random.test_derivative_numerically"]], "to_algebraic_integer() (sympy.core.numbers.algebraicnumber method)": [[62, "sympy.core.numbers.AlgebraicNumber.to_algebraic_integer"]], "to_primitive_element() (sympy.core.numbers.algebraicnumber method)": [[62, "sympy.core.numbers.AlgebraicNumber.to_primitive_element"]], "to_root() (sympy.core.numbers.algebraicnumber method)": [[62, "sympy.core.numbers.AlgebraicNumber.to_root"]], "together() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.together"]], "transcendental": [[62, "term-transcendental"]], "trigsimp() (sympy.core.expr.expr method)": [[62, "sympy.core.expr.Expr.trigsimp"]], "tuple_count() (sympy.core.containers.tuple method)": [[62, "sympy.core.containers.Tuple.tuple_count"]], "use() (in module sympy.core.traversal)": [[62, "sympy.core.traversal.use"]], "values() (sympy.core.containers.dict method)": [[62, "sympy.core.containers.Dict.values"]], "var() (in module sympy.core.symbol)": [[62, "sympy.core.symbol.var"]], "variables (sympy.core.function.lambda property)": [[62, "sympy.core.function.Lambda.variables"]], "variables (sympy.core.function.subs property)": [[62, "sympy.core.function.Subs.variables"]], "vectorize (class in sympy.core.multidimensional)": [[62, "sympy.core.multidimensional.vectorize"]], "verify_numerically() (in module sympy.core.random)": [[62, "sympy.core.random.verify_numerically"]], "walk() (in module sympy.core.traversal)": [[62, "sympy.core.traversal.walk"]], "weak (sympy.core.relational.relational property)": [[62, "sympy.core.relational.Relational.weak"]], "xreplace() (sympy.core.basic.basic method)": [[62, "sympy.core.basic.Basic.xreplace"]], "zero": [[62, "term-zero"]], "az() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.AZ"]], "bifid5_square() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.bifid5_square"]], "bifid6_square() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.bifid6_square"]], "check_and_join() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.check_and_join"]], "cycle_list() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.cycle_list"]], "decipher_affine() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.decipher_affine"]], "decipher_atbash() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.decipher_atbash"]], "decipher_bifid() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.decipher_bifid"]], "decipher_bifid5() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.decipher_bifid5"]], "decipher_bifid6() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.decipher_bifid6"]], "decipher_elgamal() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.decipher_elgamal"]], "decipher_gm() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.decipher_gm"]], "decipher_hill() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.decipher_hill"]], "decipher_kid_rsa() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.decipher_kid_rsa"]], "decipher_railfence() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.decipher_railfence"]], "decipher_rot13() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.decipher_rot13"]], "decipher_rsa() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.decipher_rsa"]], "decipher_shift() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.decipher_shift"]], "decipher_vigenere() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.decipher_vigenere"]], "decode_morse() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.decode_morse"]], "dh_private_key() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.dh_private_key"]], "dh_public_key() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.dh_public_key"]], "dh_shared_key() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.dh_shared_key"]], "elgamal_private_key() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.elgamal_private_key"]], "elgamal_public_key() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.elgamal_public_key"]], "encipher_affine() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.encipher_affine"]], "encipher_atbash() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.encipher_atbash"]], "encipher_bifid() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.encipher_bifid"]], "encipher_bifid5() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.encipher_bifid5"]], "encipher_bifid6() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.encipher_bifid6"]], "encipher_elgamal() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.encipher_elgamal"]], "encipher_gm() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.encipher_gm"]], "encipher_hill() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.encipher_hill"]], "encipher_kid_rsa() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.encipher_kid_rsa"]], "encipher_railfence() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.encipher_railfence"]], "encipher_rot13() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.encipher_rot13"]], "encipher_rsa() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.encipher_rsa"]], "encipher_shift() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.encipher_shift"]], "encipher_substitution() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.encipher_substitution"]], "encipher_vigenere() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.encipher_vigenere"]], "encode_morse() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.encode_morse"]], "gm_private_key() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.gm_private_key"]], "gm_public_key() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.gm_public_key"]], "kid_rsa_private_key() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.kid_rsa_private_key"]], "kid_rsa_public_key() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.kid_rsa_public_key"]], "lfsr_autocorrelation() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.lfsr_autocorrelation"]], "lfsr_connection_polynomial() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.lfsr_connection_polynomial"]], "lfsr_sequence() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.lfsr_sequence"]], "padded_key() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.padded_key"]], "rsa_private_key() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.rsa_private_key"]], "rsa_public_key() (in module sympy.crypto.crypto)": [[63, "sympy.crypto.crypto.rsa_public_key"]], "sympy.crypto.crypto": [[63, "module-sympy.crypto.crypto"]], "basecovarderivativeop (class in sympy.diffgeom)": [[64, "sympy.diffgeom.BaseCovarDerivativeOp"]], "basescalarfield (class in sympy.diffgeom)": [[64, "sympy.diffgeom.BaseScalarField"]], "basevectorfield (class in sympy.diffgeom)": [[64, "sympy.diffgeom.BaseVectorField"]], "commutator (class in sympy.diffgeom)": [[64, "sympy.diffgeom.Commutator"]], "coordsystem (class in sympy.diffgeom)": [[64, "sympy.diffgeom.CoordSystem"]], "coordinatesymbol (class in sympy.diffgeom)": [[64, "sympy.diffgeom.CoordinateSymbol"]], "covarderivativeop (class in sympy.diffgeom)": [[64, "sympy.diffgeom.CovarDerivativeOp"]], "differential (class in sympy.diffgeom)": [[64, "sympy.diffgeom.Differential"]], "liederivative (class in sympy.diffgeom)": [[64, "sympy.diffgeom.LieDerivative"]], "manifold (class in sympy.diffgeom)": [[64, "sympy.diffgeom.Manifold"]], "patch (class in sympy.diffgeom)": [[64, "sympy.diffgeom.Patch"]], "point (class in sympy.diffgeom)": [[64, "sympy.diffgeom.Point"]], "tensorproduct (class in sympy.diffgeom)": [[64, "sympy.diffgeom.TensorProduct"]], "wedgeproduct (class in sympy.diffgeom)": [[64, "sympy.diffgeom.WedgeProduct"]], "base_oneform() (sympy.diffgeom.coordsystem method)": [[64, "sympy.diffgeom.CoordSystem.base_oneform"]], "base_oneforms() (sympy.diffgeom.coordsystem method)": [[64, "sympy.diffgeom.CoordSystem.base_oneforms"]], "base_scalar() (sympy.diffgeom.coordsystem method)": [[64, "sympy.diffgeom.CoordSystem.base_scalar"]], "base_scalars() (sympy.diffgeom.coordsystem method)": [[64, "sympy.diffgeom.CoordSystem.base_scalars"]], "base_vector() (sympy.diffgeom.coordsystem method)": [[64, "sympy.diffgeom.CoordSystem.base_vector"]], "base_vectors() (sympy.diffgeom.coordsystem method)": [[64, "sympy.diffgeom.CoordSystem.base_vectors"]], "coord_function() (sympy.diffgeom.coordsystem method)": [[64, "sympy.diffgeom.CoordSystem.coord_function"]], "coord_functions() (sympy.diffgeom.coordsystem method)": [[64, "sympy.diffgeom.CoordSystem.coord_functions"]], "coord_tuple_transform_to() (sympy.diffgeom.coordsystem method)": [[64, "sympy.diffgeom.CoordSystem.coord_tuple_transform_to"]], "coords() (sympy.diffgeom.point method)": [[64, "sympy.diffgeom.Point.coords"]], "intcurve_diffequ() (in module sympy.diffgeom)": [[64, "sympy.diffgeom.intcurve_diffequ"]], "intcurve_series() (in module sympy.diffgeom)": [[64, "sympy.diffgeom.intcurve_series"]], "jacobian() (sympy.diffgeom.coordsystem method)": [[64, "sympy.diffgeom.CoordSystem.jacobian"]], "jacobian_determinant() (sympy.diffgeom.coordsystem method)": [[64, "sympy.diffgeom.CoordSystem.jacobian_determinant"]], "jacobian_matrix() (sympy.diffgeom.coordsystem method)": [[64, "sympy.diffgeom.CoordSystem.jacobian_matrix"]], "metric_to_christoffel_1st() (in module sympy.diffgeom)": [[64, "sympy.diffgeom.metric_to_Christoffel_1st"]], "metric_to_christoffel_2nd() (in module sympy.diffgeom)": [[64, "sympy.diffgeom.metric_to_Christoffel_2nd"]], "metric_to_ricci_components() (in module sympy.diffgeom)": [[64, "sympy.diffgeom.metric_to_Ricci_components"]], "metric_to_riemann_components() (in module sympy.diffgeom)": [[64, "sympy.diffgeom.metric_to_Riemann_components"]], "point() (sympy.diffgeom.coordsystem method)": [[64, "sympy.diffgeom.CoordSystem.point"]], "point_to_coords() (sympy.diffgeom.coordsystem method)": [[64, "sympy.diffgeom.CoordSystem.point_to_coords"]], "sympy.diffgeom": [[64, "module-sympy.diffgeom"]], "transform() (sympy.diffgeom.coordsystem method)": [[64, "sympy.diffgeom.CoordSystem.transform"]], "transformation() (sympy.diffgeom.coordsystem method)": [[64, "sympy.diffgeom.CoordSystem.transformation"]], "twoform_to_matrix() (in module sympy.diffgeom)": [[64, "sympy.diffgeom.twoform_to_matrix"]], "vectors_in_basis() (in module sympy.diffgeom)": [[64, "sympy.diffgeom.vectors_in_basis"]], "convolution() (in module sympy.discrete.convolutions)": [[65, "sympy.discrete.convolutions.convolution"]], "convolution_fft() (in module sympy.discrete.convolutions)": [[65, "sympy.discrete.convolutions.convolution_fft"]], "convolution_fwht() (in module sympy.discrete.convolutions)": [[65, "sympy.discrete.convolutions.convolution_fwht"]], "convolution_ntt() (in module sympy.discrete.convolutions)": [[65, "sympy.discrete.convolutions.convolution_ntt"]], "convolution_subset() (in module sympy.discrete.convolutions)": [[65, "sympy.discrete.convolutions.convolution_subset"]], "covering_product() (in module sympy.discrete.convolutions)": [[65, "sympy.discrete.convolutions.covering_product"]], "fft() (in module sympy.discrete.transforms)": [[65, "sympy.discrete.transforms.fft"]], "fwht() (in module sympy.discrete.transforms)": [[65, "sympy.discrete.transforms.fwht"]], "ifft() (in module sympy.discrete.transforms)": [[65, "sympy.discrete.transforms.ifft"]], "ifwht() (in module sympy.discrete.transforms)": [[65, "sympy.discrete.transforms.ifwht"]], "intersecting_product() (in module sympy.discrete.convolutions)": [[65, "sympy.discrete.convolutions.intersecting_product"]], "intt() (in module sympy.discrete.transforms)": [[65, "sympy.discrete.transforms.intt"]], "inverse_mobius_transform() (in module sympy.discrete.transforms)": [[65, "sympy.discrete.transforms.inverse_mobius_transform"]], "mobius_transform() (in module sympy.discrete.transforms)": [[65, "sympy.discrete.transforms.mobius_transform"]], "ntt() (in module sympy.discrete.transforms)": [[65, "sympy.discrete.transforms.ntt"]], "sympy.discrete": [[65, "module-sympy.discrete"]], "sympy.discrete.convolutions": [[65, "module-sympy.discrete.convolutions"]], "sympy.discrete.transforms": [[65, "module-sympy.discrete.transforms"]], "fallingfactorial (class in sympy.functions.combinatorial.factorials)": [[67, "sympy.functions.combinatorial.factorials.FallingFactorial"]], "multifactorial (class in sympy.functions.combinatorial.factorials)": [[67, "sympy.functions.combinatorial.factorials.MultiFactorial"]], "risingfactorial (class in sympy.functions.combinatorial.factorials)": [[67, "sympy.functions.combinatorial.factorials.RisingFactorial"]], "andre (class in sympy.functions.combinatorial.numbers)": [[67, "sympy.functions.combinatorial.numbers.andre"]], "bell (class in sympy.functions.combinatorial.numbers)": [[67, "sympy.functions.combinatorial.numbers.bell"]], "bernoulli (class in sympy.functions.combinatorial.numbers)": [[67, "sympy.functions.combinatorial.numbers.bernoulli"]], "binomial (class in sympy.functions.combinatorial.factorials)": [[67, "sympy.functions.combinatorial.factorials.binomial"]], "catalan (class in sympy.functions.combinatorial.numbers)": [[67, "sympy.functions.combinatorial.numbers.catalan"]], "euler (class in sympy.functions.combinatorial.numbers)": [[67, "sympy.functions.combinatorial.numbers.euler"]], "factorial (class in sympy.functions.combinatorial.factorials)": [[67, "sympy.functions.combinatorial.factorials.factorial"]], "factorial2 (class in sympy.functions.combinatorial.factorials)": [[67, "sympy.functions.combinatorial.factorials.factorial2"]], "fibonacci (class in sympy.functions.combinatorial.numbers)": [[67, "sympy.functions.combinatorial.numbers.fibonacci"]], "genocchi (class in sympy.functions.combinatorial.numbers)": [[67, "sympy.functions.combinatorial.numbers.genocchi"]], "harmonic (class in sympy.functions.combinatorial.numbers)": [[67, "sympy.functions.combinatorial.numbers.harmonic"]], "lucas (class in sympy.functions.combinatorial.numbers)": [[67, "sympy.functions.combinatorial.numbers.lucas"]], "nc() (in module sympy.functions.combinatorial.numbers)": [[67, "sympy.functions.combinatorial.numbers.nC"]], "np() (in module sympy.functions.combinatorial.numbers)": [[67, "sympy.functions.combinatorial.numbers.nP"]], "nt() (in module sympy.functions.combinatorial.numbers)": [[67, "sympy.functions.combinatorial.numbers.nT"]], "partition (class in sympy.functions.combinatorial.numbers)": [[67, "sympy.functions.combinatorial.numbers.partition"]], "stirling() (in module sympy.functions.combinatorial.numbers)": [[67, "sympy.functions.combinatorial.numbers.stirling"]], "subfactorial (class in sympy.functions.combinatorial.factorials)": [[67, "sympy.functions.combinatorial.factorials.subfactorial"]], "tribonacci (class in sympy.functions.combinatorial.numbers)": [[67, "sympy.functions.combinatorial.numbers.tribonacci"]], "abs (class in sympy.functions.elementary.complexes)": [[68, "sympy.functions.elementary.complexes.Abs"]], "exprcondpair (class in sympy.functions.elementary.piecewise)": [[68, "sympy.functions.elementary.piecewise.ExprCondPair"]], "hyperbolicfunction (class in sympy.functions.elementary.hyperbolic)": [[68, "sympy.functions.elementary.hyperbolic.HyperbolicFunction"]], "identityfunction (class in sympy.functions.elementary.miscellaneous)": [[68, "sympy.functions.elementary.miscellaneous.IdentityFunction"]], "lambertw (class in sympy.functions.elementary.exponential)": [[68, "sympy.functions.elementary.exponential.LambertW"]], "max (class in sympy.functions.elementary.miscellaneous)": [[68, "sympy.functions.elementary.miscellaneous.Max"]], "min (class in sympy.functions.elementary.miscellaneous)": [[68, "sympy.functions.elementary.miscellaneous.Min"]], "piecewise (class in sympy.functions.elementary.piecewise)": [[68, "sympy.functions.elementary.piecewise.Piecewise"]], "roundfunction (class in sympy.functions.elementary.integers)": [[68, "sympy.functions.elementary.integers.RoundFunction"]], "_eval_integral() (sympy.functions.elementary.piecewise.piecewise method)": [[68, "sympy.functions.elementary.piecewise.Piecewise._eval_integral"]], "acos (class in sympy.functions.elementary.trigonometric)": [[68, "sympy.functions.elementary.trigonometric.acos"]], "acosh (class in sympy.functions.elementary.hyperbolic)": [[68, "sympy.functions.elementary.hyperbolic.acosh"]], "acot (class in sympy.functions.elementary.trigonometric)": [[68, "sympy.functions.elementary.trigonometric.acot"]], "acoth (class in sympy.functions.elementary.hyperbolic)": [[68, "sympy.functions.elementary.hyperbolic.acoth"]], "acsc (class in sympy.functions.elementary.trigonometric)": [[68, "sympy.functions.elementary.trigonometric.acsc"]], "acsch (class in sympy.functions.elementary.hyperbolic)": [[68, "sympy.functions.elementary.hyperbolic.acsch"]], "arg (class in sympy.functions.elementary.complexes)": [[68, "sympy.functions.elementary.complexes.arg"]], "as_base_exp() (sympy.functions.elementary.exponential.log method)": [[68, "sympy.functions.elementary.exponential.log.as_base_exp"]], "as_expr_set_pairs() (sympy.functions.elementary.piecewise.piecewise method)": [[68, "sympy.functions.elementary.piecewise.Piecewise.as_expr_set_pairs"]], "as_real_imag() (sympy.functions.elementary.complexes.im method)": [[68, "sympy.functions.elementary.complexes.im.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.complexes.re method)": [[68, "sympy.functions.elementary.complexes.re.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.exp method)": [[68, "sympy.functions.elementary.exponential.exp.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.log method)": [[68, "sympy.functions.elementary.exponential.log.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.hyperbolic.sinh method)": [[68, "sympy.functions.elementary.hyperbolic.sinh.as_real_imag"]], "asec (class in sympy.functions.elementary.trigonometric)": [[68, "sympy.functions.elementary.trigonometric.asec"]], "asech (class in sympy.functions.elementary.hyperbolic)": [[68, "sympy.functions.elementary.hyperbolic.asech"]], "asin (class in sympy.functions.elementary.trigonometric)": [[68, "sympy.functions.elementary.trigonometric.asin"]], "asinh (class in sympy.functions.elementary.hyperbolic)": [[68, "sympy.functions.elementary.hyperbolic.asinh"]], "atan (class in sympy.functions.elementary.trigonometric)": [[68, "sympy.functions.elementary.trigonometric.atan"]], "atan2 (class in sympy.functions.elementary.trigonometric)": [[68, "sympy.functions.elementary.trigonometric.atan2"]], "atanh (class in sympy.functions.elementary.hyperbolic)": [[68, "sympy.functions.elementary.hyperbolic.atanh"]], "base (sympy.functions.elementary.exponential.exp property)": [[68, "sympy.functions.elementary.exponential.exp.base"]], "cbrt() (in module sympy.functions.elementary.miscellaneous)": [[68, "sympy.functions.elementary.miscellaneous.cbrt"]], "ceiling (class in sympy.functions.elementary.integers)": [[68, "sympy.functions.elementary.integers.ceiling"]], "cond (sympy.functions.elementary.piecewise.exprcondpair property)": [[68, "sympy.functions.elementary.piecewise.ExprCondPair.cond"]], "conjugate (class in sympy.functions.elementary.complexes)": [[68, "sympy.functions.elementary.complexes.conjugate"]], "cos (class in sympy.functions.elementary.trigonometric)": [[68, "sympy.functions.elementary.trigonometric.cos"]], "cosh (class in sympy.functions.elementary.hyperbolic)": [[68, "sympy.functions.elementary.hyperbolic.cosh"]], "cot (class in sympy.functions.elementary.trigonometric)": [[68, "sympy.functions.elementary.trigonometric.cot"]], "coth (class in sympy.functions.elementary.hyperbolic)": [[68, "sympy.functions.elementary.hyperbolic.coth"]], "csc (class in sympy.functions.elementary.trigonometric)": [[68, "sympy.functions.elementary.trigonometric.csc"]], "csch (class in sympy.functions.elementary.hyperbolic)": [[68, "sympy.functions.elementary.hyperbolic.csch"]], "doit() (sympy.functions.elementary.piecewise.piecewise method)": [[68, "sympy.functions.elementary.piecewise.Piecewise.doit"]], "eval() (sympy.functions.elementary.piecewise.piecewise class method)": [[68, "sympy.functions.elementary.piecewise.Piecewise.eval"]], "exp (class in sympy.functions.elementary.exponential)": [[68, "sympy.functions.elementary.exponential.exp"]], "exp_polar (class in sympy.functions.elementary.exponential)": [[68, "sympy.functions.elementary.exponential.exp_polar"]], "expr (sympy.functions.elementary.piecewise.exprcondpair property)": [[68, "sympy.functions.elementary.piecewise.ExprCondPair.expr"]], "fdiff() (sympy.functions.elementary.complexes.abs method)": [[68, "sympy.functions.elementary.complexes.Abs.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.lambertw method)": [[68, "sympy.functions.elementary.exponential.LambertW.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.exp method)": [[68, "sympy.functions.elementary.exponential.exp.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.log method)": [[68, "sympy.functions.elementary.exponential.log.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.csch method)": [[68, "sympy.functions.elementary.hyperbolic.csch.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.sinh method)": [[68, "sympy.functions.elementary.hyperbolic.sinh.fdiff"]], "floor (class in sympy.functions.elementary.integers)": [[68, "sympy.functions.elementary.integers.floor"]], "frac (class in sympy.functions.elementary.integers)": [[68, "sympy.functions.elementary.integers.frac"]], "im (class in sympy.functions.elementary.complexes)": [[68, "sympy.functions.elementary.complexes.im"]], "inverse() (sympy.functions.elementary.exponential.log method)": [[68, "sympy.functions.elementary.exponential.log.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acosh method)": [[68, "sympy.functions.elementary.hyperbolic.acosh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acoth method)": [[68, "sympy.functions.elementary.hyperbolic.acoth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acsch method)": [[68, "sympy.functions.elementary.hyperbolic.acsch.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asech method)": [[68, "sympy.functions.elementary.hyperbolic.asech.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asinh method)": [[68, "sympy.functions.elementary.hyperbolic.asinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.atanh method)": [[68, "sympy.functions.elementary.hyperbolic.atanh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.coth method)": [[68, "sympy.functions.elementary.hyperbolic.coth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.sinh method)": [[68, "sympy.functions.elementary.hyperbolic.sinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.tanh method)": [[68, "sympy.functions.elementary.hyperbolic.tanh.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acos method)": [[68, "sympy.functions.elementary.trigonometric.acos.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acot method)": [[68, "sympy.functions.elementary.trigonometric.acot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acsc method)": [[68, "sympy.functions.elementary.trigonometric.acsc.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asec method)": [[68, "sympy.functions.elementary.trigonometric.asec.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asin method)": [[68, "sympy.functions.elementary.trigonometric.asin.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.atan method)": [[68, "sympy.functions.elementary.trigonometric.atan.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.cot method)": [[68, "sympy.functions.elementary.trigonometric.cot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.tan method)": [[68, "sympy.functions.elementary.trigonometric.tan.inverse"]], "log (class in sympy.functions.elementary.exponential)": [[68, "sympy.functions.elementary.exponential.log"]], "periodic_argument (class in sympy.functions.elementary.complexes)": [[68, "sympy.functions.elementary.complexes.periodic_argument"]], "piecewise_exclusive() (in module sympy.functions.elementary.piecewise)": [[68, "sympy.functions.elementary.piecewise.piecewise_exclusive"]], "piecewise_fold() (in module sympy.functions.elementary.piecewise)": [[68, "sympy.functions.elementary.piecewise.piecewise_fold"]], "piecewise_integrate() (sympy.functions.elementary.piecewise.piecewise method)": [[68, "sympy.functions.elementary.piecewise.Piecewise.piecewise_integrate"]], "polar_lift (class in sympy.functions.elementary.complexes)": [[68, "sympy.functions.elementary.complexes.polar_lift"]], "principal_branch (class in sympy.functions.elementary.complexes)": [[68, "sympy.functions.elementary.complexes.principal_branch"]], "re (class in sympy.functions.elementary.complexes)": [[68, "sympy.functions.elementary.complexes.re"]], "real_root() (in module sympy.functions.elementary.miscellaneous)": [[68, "sympy.functions.elementary.miscellaneous.real_root"]], "root() (in module sympy.functions.elementary.miscellaneous)": [[68, "sympy.functions.elementary.miscellaneous.root"]], "sec (class in sympy.functions.elementary.trigonometric)": [[68, "sympy.functions.elementary.trigonometric.sec"]], "sech (class in sympy.functions.elementary.hyperbolic)": [[68, "sympy.functions.elementary.hyperbolic.sech"]], "sign (class in sympy.functions.elementary.complexes)": [[68, "sympy.functions.elementary.complexes.sign"]], "sin (class in sympy.functions.elementary.trigonometric)": [[68, "sympy.functions.elementary.trigonometric.sin"]], "sinc (class in sympy.functions.elementary.trigonometric)": [[68, "sympy.functions.elementary.trigonometric.sinc"]], "sinh (class in sympy.functions.elementary.hyperbolic)": [[68, "sympy.functions.elementary.hyperbolic.sinh"]], "sqrt() (in module sympy.functions.elementary.miscellaneous)": [[68, "sympy.functions.elementary.miscellaneous.sqrt"]], "tan (class in sympy.functions.elementary.trigonometric)": [[68, "sympy.functions.elementary.trigonometric.tan"]], "tanh (class in sympy.functions.elementary.hyperbolic)": [[68, "sympy.functions.elementary.hyperbolic.tanh"]], "taylor_term() (sympy.functions.elementary.exponential.exp static method)": [[68, "sympy.functions.elementary.exponential.exp.taylor_term"]], "taylor_term() (sympy.functions.elementary.exponential.log static method)": [[68, "sympy.functions.elementary.exponential.log.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.csch static method)": [[68, "sympy.functions.elementary.hyperbolic.csch.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.sinh static method)": [[68, "sympy.functions.elementary.hyperbolic.sinh.taylor_term"]], "sympy.functions": [[69, "module-sympy.functions"]], "airybase (class in sympy.functions.special.bessel)": [[70, "sympy.functions.special.bessel.AiryBase"]], "besselbase (class in sympy.functions.special.bessel)": [[70, "sympy.functions.special.bessel.BesselBase"]], "chi (class in sympy.functions.special.error_functions)": [[70, "sympy.functions.special.error_functions.Chi"]], "ci (class in sympy.functions.special.error_functions)": [[70, "sympy.functions.special.error_functions.Ci"]], "diracdelta (class in sympy.functions.special.delta_functions)": [[70, "sympy.functions.special.delta_functions.DiracDelta"]], "e1() (in module sympy.functions.special.error_functions)": [[70, "sympy.functions.special.error_functions.E1"]], "ei (class in sympy.functions.special.error_functions)": [[70, "sympy.functions.special.error_functions.Ei"]], "eijk() (in module sympy.functions.special.tensor_functions)": [[70, "sympy.functions.special.tensor_functions.Eijk"]], "fresnelintegral (class in sympy.functions.special.error_functions)": [[70, "sympy.functions.special.error_functions.FresnelIntegral"]], "heaviside (class in sympy.functions.special.delta_functions)": [[70, "sympy.functions.special.delta_functions.Heaviside"]], "kroneckerdelta (class in sympy.functions.special.tensor_functions)": [[70, "sympy.functions.special.tensor_functions.KroneckerDelta"]], "levicivita (class in sympy.functions.special.tensor_functions)": [[70, "sympy.functions.special.tensor_functions.LeviCivita"]], "li (class in sympy.functions.special.error_functions)": [[70, "sympy.functions.special.error_functions.Li"], [70, "sympy.functions.special.error_functions.li"]], "mathieubase (class in sympy.functions.special.mathieu_functions)": [[70, "sympy.functions.special.mathieu_functions.MathieuBase"]], "shi (class in sympy.functions.special.error_functions)": [[70, "sympy.functions.special.error_functions.Shi"]], "si (class in sympy.functions.special.error_functions)": [[70, "sympy.functions.special.error_functions.Si"]], "singularityfunction (class in sympy.functions.special.singularity_functions)": [[70, "sympy.functions.special.singularity_functions.SingularityFunction"]], "ynm (class in sympy.functions.special.spherical_harmonics)": [[70, "sympy.functions.special.spherical_harmonics.Ynm"]], "ynm_c() (in module sympy.functions.special.spherical_harmonics)": [[70, "sympy.functions.special.spherical_harmonics.Ynm_c"]], "znm (class in sympy.functions.special.spherical_harmonics)": [[70, "sympy.functions.special.spherical_harmonics.Znm"]], "airyai (class in sympy.functions.special.bessel)": [[70, "sympy.functions.special.bessel.airyai"]], "airyaiprime (class in sympy.functions.special.bessel)": [[70, "sympy.functions.special.bessel.airyaiprime"]], "airybi (class in sympy.functions.special.bessel)": [[70, "sympy.functions.special.bessel.airybi"]], "airybiprime (class in sympy.functions.special.bessel)": [[70, "sympy.functions.special.bessel.airybiprime"]], "an (sympy.functions.special.hyper.meijerg property)": [[70, "sympy.functions.special.hyper.meijerg.an"]], "aother (sympy.functions.special.hyper.meijerg property)": [[70, "sympy.functions.special.hyper.meijerg.aother"]], "ap (sympy.functions.special.hyper.hyper property)": [[70, "sympy.functions.special.hyper.hyper.ap"]], "ap (sympy.functions.special.hyper.meijerg property)": [[70, "sympy.functions.special.hyper.meijerg.ap"]], "appellf1 (class in sympy.functions.special.hyper)": [[70, "sympy.functions.special.hyper.appellf1"]], "argument (sympy.functions.special.bessel.besselbase property)": [[70, "sympy.functions.special.bessel.BesselBase.argument"]], "argument (sympy.functions.special.hyper.hyper property)": [[70, "sympy.functions.special.hyper.hyper.argument"]], "argument (sympy.functions.special.hyper.meijerg property)": [[70, "sympy.functions.special.hyper.meijerg.argument"]], "assoc_laguerre (class in sympy.functions.special.polynomials)": [[70, "sympy.functions.special.polynomials.assoc_laguerre"]], "assoc_legendre (class in sympy.functions.special.polynomials)": [[70, "sympy.functions.special.polynomials.assoc_legendre"]], "besseli (class in sympy.functions.special.bessel)": [[70, "sympy.functions.special.bessel.besseli"]], "besselj (class in sympy.functions.special.bessel)": [[70, "sympy.functions.special.bessel.besselj"]], "besselk (class in sympy.functions.special.bessel)": [[70, "sympy.functions.special.bessel.besselk"]], "bessely (class in sympy.functions.special.bessel)": [[70, "sympy.functions.special.bessel.bessely"]], "beta (class in sympy.functions.special.beta_functions)": [[70, "sympy.functions.special.beta_functions.beta"]], "bm (sympy.functions.special.hyper.meijerg property)": [[70, "sympy.functions.special.hyper.meijerg.bm"]], "bother (sympy.functions.special.hyper.meijerg property)": [[70, "sympy.functions.special.hyper.meijerg.bother"]], "bq (sympy.functions.special.hyper.hyper property)": [[70, "sympy.functions.special.hyper.hyper.bq"]], "bq (sympy.functions.special.hyper.meijerg property)": [[70, "sympy.functions.special.hyper.meijerg.bq"]], "bspline_basis() (in module sympy.functions.special.bsplines)": [[70, "sympy.functions.special.bsplines.bspline_basis"]], "bspline_basis_set() (in module sympy.functions.special.bsplines)": [[70, "sympy.functions.special.bsplines.bspline_basis_set"]], "chebyshevt (class in sympy.functions.special.polynomials)": [[70, "sympy.functions.special.polynomials.chebyshevt"]], "chebyshevt_root (class in sympy.functions.special.polynomials)": [[70, "sympy.functions.special.polynomials.chebyshevt_root"]], "chebyshevu (class in sympy.functions.special.polynomials)": [[70, "sympy.functions.special.polynomials.chebyshevu"]], "chebyshevu_root (class in sympy.functions.special.polynomials)": [[70, "sympy.functions.special.polynomials.chebyshevu_root"]], "convergence_statement (sympy.functions.special.hyper.hyper property)": [[70, "sympy.functions.special.hyper.hyper.convergence_statement"]], "delta (sympy.functions.special.hyper.meijerg property)": [[70, "sympy.functions.special.hyper.meijerg.delta"]], "digamma (class in sympy.functions.special.gamma_functions)": [[70, "sympy.functions.special.gamma_functions.digamma"]], "dirichlet_eta (class in sympy.functions.special.zeta_functions)": [[70, "sympy.functions.special.zeta_functions.dirichlet_eta"]], "elliptic_e (class in sympy.functions.special.elliptic_integrals)": [[70, "sympy.functions.special.elliptic_integrals.elliptic_e"]], "elliptic_f (class in sympy.functions.special.elliptic_integrals)": [[70, "sympy.functions.special.elliptic_integrals.elliptic_f"]], "elliptic_k (class in sympy.functions.special.elliptic_integrals)": [[70, "sympy.functions.special.elliptic_integrals.elliptic_k"]], "elliptic_pi (class in sympy.functions.special.elliptic_integrals)": [[70, "sympy.functions.special.elliptic_integrals.elliptic_pi"]], "erf (class in sympy.functions.special.error_functions)": [[70, "sympy.functions.special.error_functions.erf"]], "erf2 (class in sympy.functions.special.error_functions)": [[70, "sympy.functions.special.error_functions.erf2"]], "erf2inv (class in sympy.functions.special.error_functions)": [[70, "sympy.functions.special.error_functions.erf2inv"]], "erfc (class in sympy.functions.special.error_functions)": [[70, "sympy.functions.special.error_functions.erfc"]], "erfcinv (class in sympy.functions.special.error_functions)": [[70, "sympy.functions.special.error_functions.erfcinv"]], "erfi (class in sympy.functions.special.error_functions)": [[70, "sympy.functions.special.error_functions.erfi"]], "erfinv (class in sympy.functions.special.error_functions)": [[70, "sympy.functions.special.error_functions.erfinv"]], "eta (sympy.functions.special.hyper.hyper property)": [[70, "sympy.functions.special.hyper.hyper.eta"]], "eval() (sympy.functions.special.delta_functions.diracdelta class method)": [[70, "sympy.functions.special.delta_functions.DiracDelta.eval"]], "eval() (sympy.functions.special.delta_functions.heaviside class method)": [[70, "sympy.functions.special.delta_functions.Heaviside.eval"]], "eval() (sympy.functions.special.singularity_functions.singularityfunction class method)": [[70, "sympy.functions.special.singularity_functions.SingularityFunction.eval"]], "eval() (sympy.functions.special.tensor_functions.kroneckerdelta class method)": [[70, "sympy.functions.special.tensor_functions.KroneckerDelta.eval"]], "eval_levicivita() (in module sympy.functions.special.tensor_functions)": [[70, "sympy.functions.special.tensor_functions.eval_levicivita"]], "expint (class in sympy.functions.special.error_functions)": [[70, "sympy.functions.special.error_functions.expint"]], "fdiff() (sympy.functions.special.delta_functions.diracdelta method)": [[70, "sympy.functions.special.delta_functions.DiracDelta.fdiff"]], "fdiff() (sympy.functions.special.delta_functions.heaviside method)": [[70, "sympy.functions.special.delta_functions.Heaviside.fdiff"]], "fdiff() (sympy.functions.special.singularity_functions.singularityfunction method)": [[70, "sympy.functions.special.singularity_functions.SingularityFunction.fdiff"]], "fresnelc (class in sympy.functions.special.error_functions)": [[70, "sympy.functions.special.error_functions.fresnelc"]], "fresnels (class in sympy.functions.special.error_functions)": [[70, "sympy.functions.special.error_functions.fresnels"]], "gamma (class in sympy.functions.special.gamma_functions)": [[70, "sympy.functions.special.gamma_functions.gamma"]], "gegenbauer (class in sympy.functions.special.polynomials)": [[70, "sympy.functions.special.polynomials.gegenbauer"]], "get_period() (sympy.functions.special.hyper.meijerg method)": [[70, "sympy.functions.special.hyper.meijerg.get_period"]], "hankel1 (class in sympy.functions.special.bessel)": [[70, "sympy.functions.special.bessel.hankel1"]], "hankel2 (class in sympy.functions.special.bessel)": [[70, "sympy.functions.special.bessel.hankel2"]], "hermite (class in sympy.functions.special.polynomials)": [[70, "sympy.functions.special.polynomials.hermite"]], "hermite_prob (class in sympy.functions.special.polynomials)": [[70, "sympy.functions.special.polynomials.hermite_prob"]], "hyper (class in sympy.functions.special.hyper)": [[70, "sympy.functions.special.hyper.hyper"]], "indices_contain_equal_information (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[70, "sympy.functions.special.tensor_functions.KroneckerDelta.indices_contain_equal_information"]], "integrand() (sympy.functions.special.hyper.meijerg method)": [[70, "sympy.functions.special.hyper.meijerg.integrand"]], "interpolating_spline() (in module sympy.functions.special.bsplines)": [[70, "sympy.functions.special.bsplines.interpolating_spline"]], "inverse() (sympy.functions.special.error_functions.erf method)": [[70, "sympy.functions.special.error_functions.erf.inverse"]], "inverse() (sympy.functions.special.error_functions.erfc method)": [[70, "sympy.functions.special.error_functions.erfc.inverse"]], "inverse() (sympy.functions.special.error_functions.erfcinv method)": [[70, "sympy.functions.special.error_functions.erfcinv.inverse"]], "inverse() (sympy.functions.special.error_functions.erfinv method)": [[70, "sympy.functions.special.error_functions.erfinv.inverse"]], "is_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[70, "sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[70, "sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi"]], "is_number (sympy.functions.special.hyper.meijerg property)": [[70, "sympy.functions.special.hyper.meijerg.is_number"]], "is_only_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[70, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[70, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi"]], "is_simple() (sympy.functions.special.delta_functions.diracdelta method)": [[70, "sympy.functions.special.delta_functions.DiracDelta.is_simple"]], "jacobi (class in sympy.functions.special.polynomials)": [[70, "sympy.functions.special.polynomials.jacobi"]], "jacobi_normalized() (in module sympy.functions.special.polynomials)": [[70, "sympy.functions.special.polynomials.jacobi_normalized"]], "jn (class in sympy.functions.special.bessel)": [[70, "sympy.functions.special.bessel.jn"]], "jn_zeros() (in module sympy.functions.special.bessel)": [[70, "sympy.functions.special.bessel.jn_zeros"]], "killable_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[70, "sympy.functions.special.tensor_functions.KroneckerDelta.killable_index"]], "laguerre (class in sympy.functions.special.polynomials)": [[70, "sympy.functions.special.polynomials.laguerre"]], "legendre (class in sympy.functions.special.polynomials)": [[70, "sympy.functions.special.polynomials.legendre"]], "lerchphi (class in sympy.functions.special.zeta_functions)": [[70, "sympy.functions.special.zeta_functions.lerchphi"]], "loggamma (class in sympy.functions.special.gamma_functions)": [[70, "sympy.functions.special.gamma_functions.loggamma"]], "lowergamma (class in sympy.functions.special.gamma_functions)": [[70, "sympy.functions.special.gamma_functions.lowergamma"]], "marcumq (class in sympy.functions.special.bessel)": [[70, "sympy.functions.special.bessel.marcumq"]], "mathieuc (class in sympy.functions.special.mathieu_functions)": [[70, "sympy.functions.special.mathieu_functions.mathieuc"]], "mathieucprime (class in sympy.functions.special.mathieu_functions)": [[70, "sympy.functions.special.mathieu_functions.mathieucprime"]], "mathieus (class in sympy.functions.special.mathieu_functions)": [[70, "sympy.functions.special.mathieu_functions.mathieus"]], "mathieusprime (class in sympy.functions.special.mathieu_functions)": [[70, "sympy.functions.special.mathieu_functions.mathieusprime"]], "meijerg (class in sympy.functions.special.hyper)": [[70, "sympy.functions.special.hyper.meijerg"]], "multigamma (class in sympy.functions.special.gamma_functions)": [[70, "sympy.functions.special.gamma_functions.multigamma"]], "nu (sympy.functions.special.hyper.meijerg property)": [[70, "sympy.functions.special.hyper.meijerg.nu"]], "order (sympy.functions.special.bessel.besselbase property)": [[70, "sympy.functions.special.bessel.BesselBase.order"]], "pargs (sympy.functions.special.delta_functions.heaviside property)": [[70, "sympy.functions.special.delta_functions.Heaviside.pargs"]], "polygamma (class in sympy.functions.special.gamma_functions)": [[70, "sympy.functions.special.gamma_functions.polygamma"]], "polylog (class in sympy.functions.special.zeta_functions)": [[70, "sympy.functions.special.zeta_functions.polylog"]], "preferred_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[70, "sympy.functions.special.tensor_functions.KroneckerDelta.preferred_index"]], "radius_of_convergence (sympy.functions.special.hyper.hyper property)": [[70, "sympy.functions.special.hyper.hyper.radius_of_convergence"]], "stieltjes (class in sympy.functions.special.zeta_functions)": [[70, "sympy.functions.special.zeta_functions.stieltjes"]], "sympy.functions.special.bessel": [[70, "module-sympy.functions.special.bessel"]], "sympy.functions.special.beta_functions": [[70, "module-sympy.functions.special.beta_functions"]], "sympy.functions.special.elliptic_integrals": [[70, "module-sympy.functions.special.elliptic_integrals"]], "sympy.functions.special.error_functions": [[70, "module-sympy.functions.special.error_functions"]], "sympy.functions.special.gamma_functions": [[70, "module-sympy.functions.special.gamma_functions"]], "sympy.functions.special.mathieu_functions": [[70, "module-sympy.functions.special.mathieu_functions"]], "sympy.functions.special.polynomials": [[70, "module-sympy.functions.special.polynomials"]], "sympy.functions.special.singularity_functions": [[70, "module-sympy.functions.special.singularity_functions"]], "sympy.functions.special.zeta_functions": [[70, "module-sympy.functions.special.zeta_functions"]], "trigamma (class in sympy.functions.special.gamma_functions)": [[70, "sympy.functions.special.gamma_functions.trigamma"]], "uppergamma (class in sympy.functions.special.gamma_functions)": [[70, "sympy.functions.special.gamma_functions.uppergamma"]], "yn (class in sympy.functions.special.bessel)": [[70, "sympy.functions.special.bessel.yn"]], "zeta (class in sympy.functions.special.zeta_functions)": [[70, "sympy.functions.special.zeta_functions.zeta"]], "curve (class in sympy.geometry.curve)": [[71, "sympy.geometry.curve.Curve"]], "ambient_dimension (sympy.geometry.curve.curve property)": [[71, "sympy.geometry.curve.Curve.ambient_dimension"]], "arbitrary_point() (sympy.geometry.curve.curve method)": [[71, "sympy.geometry.curve.Curve.arbitrary_point"]], "free_symbols (sympy.geometry.curve.curve property)": [[71, "sympy.geometry.curve.Curve.free_symbols"]], "functions (sympy.geometry.curve.curve property)": [[71, "sympy.geometry.curve.Curve.functions"]], "length (sympy.geometry.curve.curve property)": [[71, "sympy.geometry.curve.Curve.length"]], "limits (sympy.geometry.curve.curve property)": [[71, "sympy.geometry.curve.Curve.limits"]], "parameter (sympy.geometry.curve.curve property)": [[71, "sympy.geometry.curve.Curve.parameter"]], "plot_interval() (sympy.geometry.curve.curve method)": [[71, "sympy.geometry.curve.Curve.plot_interval"]], "rotate() (sympy.geometry.curve.curve method)": [[71, "sympy.geometry.curve.Curve.rotate"]], "scale() (sympy.geometry.curve.curve method)": [[71, "sympy.geometry.curve.Curve.scale"]], "sympy.geometry.curve": [[71, "module-sympy.geometry.curve"]], "translate() (sympy.geometry.curve.curve method)": [[71, "sympy.geometry.curve.Curve.translate"]], "circle (class in sympy.geometry.ellipse)": [[72, "sympy.geometry.ellipse.Circle"]], "ellipse (class in sympy.geometry.ellipse)": [[72, "sympy.geometry.ellipse.Ellipse"]], "apoapsis (sympy.geometry.ellipse.ellipse property)": [[72, "sympy.geometry.ellipse.Ellipse.apoapsis"]], "arbitrary_point() (sympy.geometry.ellipse.ellipse method)": [[72, "sympy.geometry.ellipse.Ellipse.arbitrary_point"]], "area (sympy.geometry.ellipse.ellipse property)": [[72, "sympy.geometry.ellipse.Ellipse.area"]], "auxiliary_circle() (sympy.geometry.ellipse.ellipse method)": [[72, "sympy.geometry.ellipse.Ellipse.auxiliary_circle"]], "bounds (sympy.geometry.ellipse.ellipse property)": [[72, "sympy.geometry.ellipse.Ellipse.bounds"]], "center (sympy.geometry.ellipse.ellipse property)": [[72, "sympy.geometry.ellipse.Ellipse.center"]], "circumference (sympy.geometry.ellipse.circle property)": [[72, "sympy.geometry.ellipse.Circle.circumference"]], "circumference (sympy.geometry.ellipse.ellipse property)": [[72, "sympy.geometry.ellipse.Ellipse.circumference"]], "director_circle() (sympy.geometry.ellipse.ellipse method)": [[72, "sympy.geometry.ellipse.Ellipse.director_circle"]], "eccentricity (sympy.geometry.ellipse.ellipse property)": [[72, "sympy.geometry.ellipse.Ellipse.eccentricity"]], "encloses_point() (sympy.geometry.ellipse.ellipse method)": [[72, "sympy.geometry.ellipse.Ellipse.encloses_point"]], "equation() (sympy.geometry.ellipse.circle method)": [[72, "sympy.geometry.ellipse.Circle.equation"]], "equation() (sympy.geometry.ellipse.ellipse method)": [[72, "sympy.geometry.ellipse.Ellipse.equation"]], "evolute() (sympy.geometry.ellipse.ellipse method)": [[72, "sympy.geometry.ellipse.Ellipse.evolute"]], "foci (sympy.geometry.ellipse.ellipse property)": [[72, "sympy.geometry.ellipse.Ellipse.foci"]], "focus_distance (sympy.geometry.ellipse.ellipse property)": [[72, "sympy.geometry.ellipse.Ellipse.focus_distance"]], "hradius (sympy.geometry.ellipse.ellipse property)": [[72, "sympy.geometry.ellipse.Ellipse.hradius"]], "intersection() (sympy.geometry.ellipse.circle method)": [[72, "sympy.geometry.ellipse.Circle.intersection"]], "intersection() (sympy.geometry.ellipse.ellipse method)": [[72, "sympy.geometry.ellipse.Ellipse.intersection"]], "is_tangent() (sympy.geometry.ellipse.ellipse method)": [[72, "sympy.geometry.ellipse.Ellipse.is_tangent"]], "major (sympy.geometry.ellipse.ellipse property)": [[72, "sympy.geometry.ellipse.Ellipse.major"]], "minor (sympy.geometry.ellipse.ellipse property)": [[72, "sympy.geometry.ellipse.Ellipse.minor"]], "normal_lines() (sympy.geometry.ellipse.ellipse method)": [[72, "sympy.geometry.ellipse.Ellipse.normal_lines"]], "periapsis (sympy.geometry.ellipse.ellipse property)": [[72, "sympy.geometry.ellipse.Ellipse.periapsis"]], "plot_interval() (sympy.geometry.ellipse.ellipse method)": [[72, "sympy.geometry.ellipse.Ellipse.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[72, "sympy.geometry.ellipse.Ellipse.polar_second_moment_of_area"]], "radius (sympy.geometry.ellipse.circle property)": [[72, "sympy.geometry.ellipse.Circle.radius"]], "random_point() (sympy.geometry.ellipse.ellipse method)": [[72, "sympy.geometry.ellipse.Ellipse.random_point"]], "reflect() (sympy.geometry.ellipse.circle method)": [[72, "sympy.geometry.ellipse.Circle.reflect"]], "reflect() (sympy.geometry.ellipse.ellipse method)": [[72, "sympy.geometry.ellipse.Ellipse.reflect"]], "rotate() (sympy.geometry.ellipse.ellipse method)": [[72, "sympy.geometry.ellipse.Ellipse.rotate"]], "scale() (sympy.geometry.ellipse.circle method)": [[72, "sympy.geometry.ellipse.Circle.scale"]], "scale() (sympy.geometry.ellipse.ellipse method)": [[72, "sympy.geometry.ellipse.Ellipse.scale"]], "second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[72, "sympy.geometry.ellipse.Ellipse.second_moment_of_area"]], "section_modulus() (sympy.geometry.ellipse.ellipse method)": [[72, "sympy.geometry.ellipse.Ellipse.section_modulus"]], "semilatus_rectum (sympy.geometry.ellipse.ellipse property)": [[72, "sympy.geometry.ellipse.Ellipse.semilatus_rectum"]], "sympy.geometry.ellipse": [[72, "module-sympy.geometry.ellipse"]], "tangent_lines() (sympy.geometry.ellipse.ellipse method)": [[72, "sympy.geometry.ellipse.Ellipse.tangent_lines"]], "vradius (sympy.geometry.ellipse.circle property)": [[72, "sympy.geometry.ellipse.Circle.vradius"]], "vradius (sympy.geometry.ellipse.ellipse property)": [[72, "sympy.geometry.ellipse.Ellipse.vradius"]], "geometryentity (class in sympy.geometry.entity)": [[73, "sympy.geometry.entity.GeometryEntity"]], "ambient_dimension (sympy.geometry.entity.geometryentity property)": [[73, "sympy.geometry.entity.GeometryEntity.ambient_dimension"]], "bounds (sympy.geometry.entity.geometryentity property)": [[73, "sympy.geometry.entity.GeometryEntity.bounds"]], "encloses() (sympy.geometry.entity.geometryentity method)": [[73, "sympy.geometry.entity.GeometryEntity.encloses"]], "intersection() (sympy.geometry.entity.geometryentity method)": [[73, "sympy.geometry.entity.GeometryEntity.intersection"]], "is_similar() (sympy.geometry.entity.geometryentity method)": [[73, "sympy.geometry.entity.GeometryEntity.is_similar"]], "parameter_value() (sympy.geometry.entity.geometryentity method)": [[73, "sympy.geometry.entity.GeometryEntity.parameter_value"]], "reflect() (sympy.geometry.entity.geometryentity method)": [[73, "sympy.geometry.entity.GeometryEntity.reflect"]], "rotate() (sympy.geometry.entity.geometryentity method)": [[73, "sympy.geometry.entity.GeometryEntity.rotate"]], "scale() (sympy.geometry.entity.geometryentity method)": [[73, "sympy.geometry.entity.GeometryEntity.scale"]], "sympy.geometry.entity": [[73, "module-sympy.geometry.entity"]], "translate() (sympy.geometry.entity.geometryentity method)": [[73, "sympy.geometry.entity.GeometryEntity.translate"]], "line (class in sympy.geometry.line)": [[75, "sympy.geometry.line.Line"]], "line2d (class in sympy.geometry.line)": [[75, "sympy.geometry.line.Line2D"]], "line3d (class in sympy.geometry.line)": [[75, "sympy.geometry.line.Line3D"]], "linearentity (class in sympy.geometry.line)": [[75, "sympy.geometry.line.LinearEntity"]], "linearentity2d (class in sympy.geometry.line)": [[75, "sympy.geometry.line.LinearEntity2D"]], "linearentity3d (class in sympy.geometry.line)": [[75, "sympy.geometry.line.LinearEntity3D"]], "ray (class in sympy.geometry.line)": [[75, "sympy.geometry.line.Ray"]], "ray2d (class in sympy.geometry.line)": [[75, "sympy.geometry.line.Ray2D"]], "ray3d (class in sympy.geometry.line)": [[75, "sympy.geometry.line.Ray3D"]], "segment (class in sympy.geometry.line)": [[75, "sympy.geometry.line.Segment"]], "segment2d (class in sympy.geometry.line)": [[75, "sympy.geometry.line.Segment2D"]], "segment3d (class in sympy.geometry.line)": [[75, "sympy.geometry.line.Segment3D"]], "ambient_dimension (sympy.geometry.line.linearentity property)": [[75, "sympy.geometry.line.LinearEntity.ambient_dimension"]], "angle_between() (sympy.geometry.line.linearentity method)": [[75, "sympy.geometry.line.LinearEntity.angle_between"]], "arbitrary_point() (sympy.geometry.line.linearentity method)": [[75, "sympy.geometry.line.LinearEntity.arbitrary_point"]], "are_concurrent() (sympy.geometry.line.linearentity static method)": [[75, "sympy.geometry.line.LinearEntity.are_concurrent"]], "bisectors() (sympy.geometry.line.linearentity method)": [[75, "sympy.geometry.line.LinearEntity.bisectors"]], "bounds (sympy.geometry.line.linearentity2d property)": [[75, "sympy.geometry.line.LinearEntity2D.bounds"]], "closing_angle() (sympy.geometry.line.ray2d method)": [[75, "sympy.geometry.line.Ray2D.closing_angle"]], "coefficients (sympy.geometry.line.line2d property)": [[75, "sympy.geometry.line.Line2D.coefficients"]], "contains() (sympy.geometry.line.line method)": [[75, "sympy.geometry.line.Line.contains"]], "contains() (sympy.geometry.line.linearentity method)": [[75, "sympy.geometry.line.LinearEntity.contains"]], "contains() (sympy.geometry.line.ray method)": [[75, "sympy.geometry.line.Ray.contains"]], "contains() (sympy.geometry.line.segment method)": [[75, "sympy.geometry.line.Segment.contains"]], "direction (sympy.geometry.line.linearentity property)": [[75, "sympy.geometry.line.LinearEntity.direction"]], "direction_cosine (sympy.geometry.line.linearentity3d property)": [[75, "sympy.geometry.line.LinearEntity3D.direction_cosine"]], "direction_ratio (sympy.geometry.line.linearentity3d property)": [[75, "sympy.geometry.line.LinearEntity3D.direction_ratio"]], "distance() (sympy.geometry.line.line method)": [[75, "sympy.geometry.line.Line.distance"]], "distance() (sympy.geometry.line.ray method)": [[75, "sympy.geometry.line.Ray.distance"]], "distance() (sympy.geometry.line.segment method)": [[75, "sympy.geometry.line.Segment.distance"]], "equals() (sympy.geometry.line.line method)": [[75, "sympy.geometry.line.Line.equals"]], "equals() (sympy.geometry.line.ray method)": [[75, "sympy.geometry.line.Ray.equals"]], "equals() (sympy.geometry.line.segment method)": [[75, "sympy.geometry.line.Segment.equals"]], "equation() (sympy.geometry.line.line2d method)": [[75, "sympy.geometry.line.Line2D.equation"]], "equation() (sympy.geometry.line.line3d method)": [[75, "sympy.geometry.line.Line3D.equation"]], "intersection() (sympy.geometry.line.linearentity method)": [[75, "sympy.geometry.line.LinearEntity.intersection"]], "is_parallel() (sympy.geometry.line.linearentity method)": [[75, "sympy.geometry.line.LinearEntity.is_parallel"]], "is_perpendicular() (sympy.geometry.line.linearentity method)": [[75, "sympy.geometry.line.LinearEntity.is_perpendicular"]], "is_similar() (sympy.geometry.line.linearentity method)": [[75, "sympy.geometry.line.LinearEntity.is_similar"]], "length (sympy.geometry.line.linearentity property)": [[75, "sympy.geometry.line.LinearEntity.length"]], "length (sympy.geometry.line.segment property)": [[75, "sympy.geometry.line.Segment.length"]], "midpoint (sympy.geometry.line.segment property)": [[75, "sympy.geometry.line.Segment.midpoint"]], "p1 (sympy.geometry.line.linearentity property)": [[75, "sympy.geometry.line.LinearEntity.p1"]], "p2 (sympy.geometry.line.linearentity property)": [[75, "sympy.geometry.line.LinearEntity.p2"]], "parallel_line() (sympy.geometry.line.linearentity method)": [[75, "sympy.geometry.line.LinearEntity.parallel_line"]], "perpendicular_bisector() (sympy.geometry.line.segment method)": [[75, "sympy.geometry.line.Segment.perpendicular_bisector"]], "perpendicular_line() (sympy.geometry.line.linearentity method)": [[75, "sympy.geometry.line.LinearEntity.perpendicular_line"]], "perpendicular_line() (sympy.geometry.line.linearentity2d method)": [[75, "sympy.geometry.line.LinearEntity2D.perpendicular_line"]], "perpendicular_segment() (sympy.geometry.line.linearentity method)": [[75, "sympy.geometry.line.LinearEntity.perpendicular_segment"]], "plot_interval() (sympy.geometry.line.line method)": [[75, "sympy.geometry.line.Line.plot_interval"]], "plot_interval() (sympy.geometry.line.ray method)": [[75, "sympy.geometry.line.Ray.plot_interval"]], "plot_interval() (sympy.geometry.line.segment method)": [[75, "sympy.geometry.line.Segment.plot_interval"]], "points (sympy.geometry.line.linearentity property)": [[75, "sympy.geometry.line.LinearEntity.points"]], "projection() (sympy.geometry.line.linearentity method)": [[75, "sympy.geometry.line.LinearEntity.projection"]], "random_point() (sympy.geometry.line.linearentity method)": [[75, "sympy.geometry.line.LinearEntity.random_point"]], "slope (sympy.geometry.line.linearentity2d property)": [[75, "sympy.geometry.line.LinearEntity2D.slope"]], "smallest_angle_between() (sympy.geometry.line.linearentity method)": [[75, "sympy.geometry.line.LinearEntity.smallest_angle_between"]], "source (sympy.geometry.line.ray property)": [[75, "sympy.geometry.line.Ray.source"]], "sympy.geometry.line": [[75, "module-sympy.geometry.line"]], "xdirection (sympy.geometry.line.ray2d property)": [[75, "sympy.geometry.line.Ray2D.xdirection"]], "xdirection (sympy.geometry.line.ray3d property)": [[75, "sympy.geometry.line.Ray3D.xdirection"]], "ydirection (sympy.geometry.line.ray2d property)": [[75, "sympy.geometry.line.Ray2D.ydirection"]], "ydirection (sympy.geometry.line.ray3d property)": [[75, "sympy.geometry.line.Ray3D.ydirection"]], "zdirection (sympy.geometry.line.ray3d property)": [[75, "sympy.geometry.line.Ray3D.zdirection"]], "plane (class in sympy.geometry.plane)": [[76, "sympy.geometry.plane.Plane"]], "angle_between() (sympy.geometry.plane.plane method)": [[76, "sympy.geometry.plane.Plane.angle_between"]], "arbitrary_point() (sympy.geometry.plane.plane method)": [[76, "sympy.geometry.plane.Plane.arbitrary_point"]], "are_concurrent() (sympy.geometry.plane.plane static method)": [[76, "sympy.geometry.plane.Plane.are_concurrent"]], "distance() (sympy.geometry.plane.plane method)": [[76, "sympy.geometry.plane.Plane.distance"]], "equals() (sympy.geometry.plane.plane method)": [[76, "sympy.geometry.plane.Plane.equals"]], "equation() (sympy.geometry.plane.plane method)": [[76, "sympy.geometry.plane.Plane.equation"]], "intersection() (sympy.geometry.plane.plane method)": [[76, "sympy.geometry.plane.Plane.intersection"]], "is_coplanar() (sympy.geometry.plane.plane method)": [[76, "sympy.geometry.plane.Plane.is_coplanar"]], "is_parallel() (sympy.geometry.plane.plane method)": [[76, "sympy.geometry.plane.Plane.is_parallel"]], "is_perpendicular() (sympy.geometry.plane.plane method)": [[76, "sympy.geometry.plane.Plane.is_perpendicular"]], "normal_vector (sympy.geometry.plane.plane property)": [[76, "sympy.geometry.plane.Plane.normal_vector"]], "p1 (sympy.geometry.plane.plane property)": [[76, "sympy.geometry.plane.Plane.p1"]], "parallel_plane() (sympy.geometry.plane.plane method)": [[76, "sympy.geometry.plane.Plane.parallel_plane"]], "parameter_value() (sympy.geometry.plane.plane method)": [[76, "sympy.geometry.plane.Plane.parameter_value"]], "perpendicular_line() (sympy.geometry.plane.plane method)": [[76, "sympy.geometry.plane.Plane.perpendicular_line"]], "perpendicular_plane() (sympy.geometry.plane.plane method)": [[76, "sympy.geometry.plane.Plane.perpendicular_plane"]], "projection() (sympy.geometry.plane.plane method)": [[76, "sympy.geometry.plane.Plane.projection"]], "projection_line() (sympy.geometry.plane.plane method)": [[76, "sympy.geometry.plane.Plane.projection_line"]], "random_point() (sympy.geometry.plane.plane method)": [[76, "sympy.geometry.plane.Plane.random_point"]], "sympy.geometry.plane": [[76, "module-sympy.geometry.plane"]], "point (class in sympy.geometry.point)": [[77, "sympy.geometry.point.Point"]], "point2d (class in sympy.geometry.point)": [[77, "sympy.geometry.point.Point2D"]], "point3d (class in sympy.geometry.point)": [[77, "sympy.geometry.point.Point3D"]], "affine_rank() (sympy.geometry.point.point static method)": [[77, "sympy.geometry.point.Point.affine_rank"]], "ambient_dimension (sympy.geometry.point.point property)": [[77, "sympy.geometry.point.Point.ambient_dimension"]], "are_collinear() (sympy.geometry.point.point3d static method)": [[77, "sympy.geometry.point.Point3D.are_collinear"]], "are_coplanar() (sympy.geometry.point.point class method)": [[77, "sympy.geometry.point.Point.are_coplanar"]], "bounds (sympy.geometry.point.point2d property)": [[77, "sympy.geometry.point.Point2D.bounds"]], "canberra_distance() (sympy.geometry.point.point method)": [[77, "sympy.geometry.point.Point.canberra_distance"]], "coordinates (sympy.geometry.point.point2d property)": [[77, "sympy.geometry.point.Point2D.coordinates"]], "coordinates (sympy.geometry.point.point3d property)": [[77, "sympy.geometry.point.Point3D.coordinates"]], "direction_cosine() (sympy.geometry.point.point3d method)": [[77, "sympy.geometry.point.Point3D.direction_cosine"]], "direction_ratio() (sympy.geometry.point.point3d method)": [[77, "sympy.geometry.point.Point3D.direction_ratio"]], "distance() (sympy.geometry.point.point method)": [[77, "sympy.geometry.point.Point.distance"]], "dot() (sympy.geometry.point.point method)": [[77, "sympy.geometry.point.Point.dot"]], "equals() (sympy.geometry.point.point method)": [[77, "sympy.geometry.point.Point.equals"]], "intersection() (sympy.geometry.point.point method)": [[77, "sympy.geometry.point.Point.intersection"]], "intersection() (sympy.geometry.point.point3d method)": [[77, "sympy.geometry.point.Point3D.intersection"]], "is_collinear() (sympy.geometry.point.point method)": [[77, "sympy.geometry.point.Point.is_collinear"]], "is_concyclic() (sympy.geometry.point.point method)": [[77, "sympy.geometry.point.Point.is_concyclic"]], "is_nonzero (sympy.geometry.point.point property)": [[77, "sympy.geometry.point.Point.is_nonzero"]], "is_scalar_multiple() (sympy.geometry.point.point method)": [[77, "sympy.geometry.point.Point.is_scalar_multiple"]], "is_zero (sympy.geometry.point.point property)": [[77, "sympy.geometry.point.Point.is_zero"]], "length (sympy.geometry.point.point property)": [[77, "sympy.geometry.point.Point.length"]], "midpoint() (sympy.geometry.point.point method)": [[77, "sympy.geometry.point.Point.midpoint"]], "origin (sympy.geometry.point.point property)": [[77, "sympy.geometry.point.Point.origin"]], "orthogonal_direction (sympy.geometry.point.point property)": [[77, "sympy.geometry.point.Point.orthogonal_direction"]], "project() (sympy.geometry.point.point static method)": [[77, "sympy.geometry.point.Point.project"]], "rotate() (sympy.geometry.point.point2d method)": [[77, "sympy.geometry.point.Point2D.rotate"]], "scale() (sympy.geometry.point.point2d method)": [[77, "sympy.geometry.point.Point2D.scale"]], "scale() (sympy.geometry.point.point3d method)": [[77, "sympy.geometry.point.Point3D.scale"]], "sympy.geometry.point": [[77, "module-sympy.geometry.point"]], "taxicab_distance() (sympy.geometry.point.point method)": [[77, "sympy.geometry.point.Point.taxicab_distance"]], "transform() (sympy.geometry.point.point2d method)": [[77, "sympy.geometry.point.Point2D.transform"]], "transform() (sympy.geometry.point.point3d method)": [[77, "sympy.geometry.point.Point3D.transform"]], "translate() (sympy.geometry.point.point2d method)": [[77, "sympy.geometry.point.Point2D.translate"]], "translate() (sympy.geometry.point.point3d method)": [[77, "sympy.geometry.point.Point3D.translate"]], "unit (sympy.geometry.point.point property)": [[77, "sympy.geometry.point.Point.unit"]], "x (sympy.geometry.point.point2d property)": [[77, "sympy.geometry.point.Point2D.x"]], "x (sympy.geometry.point.point3d property)": [[77, "sympy.geometry.point.Point3D.x"]], "y (sympy.geometry.point.point2d property)": [[77, "sympy.geometry.point.Point2D.y"]], "y (sympy.geometry.point.point3d property)": [[77, "sympy.geometry.point.Point3D.y"]], "z (sympy.geometry.point.point3d property)": [[77, "sympy.geometry.point.Point3D.z"]], "polygon (class in sympy.geometry.polygon)": [[78, "sympy.geometry.polygon.Polygon"]], "regularpolygon (class in sympy.geometry.polygon)": [[78, "sympy.geometry.polygon.RegularPolygon"]], "triangle (class in sympy.geometry.polygon)": [[78, "sympy.geometry.polygon.Triangle"]], "altitudes (sympy.geometry.polygon.triangle property)": [[78, "sympy.geometry.polygon.Triangle.altitudes"]], "angles (sympy.geometry.polygon.polygon property)": [[78, "sympy.geometry.polygon.Polygon.angles"]], "angles (sympy.geometry.polygon.regularpolygon property)": [[78, "sympy.geometry.polygon.RegularPolygon.angles"]], "apothem (sympy.geometry.polygon.regularpolygon property)": [[78, "sympy.geometry.polygon.RegularPolygon.apothem"]], "arbitrary_point() (sympy.geometry.polygon.polygon method)": [[78, "sympy.geometry.polygon.Polygon.arbitrary_point"]], "area (sympy.geometry.polygon.polygon property)": [[78, "sympy.geometry.polygon.Polygon.area"]], "area (sympy.geometry.polygon.regularpolygon property)": [[78, "sympy.geometry.polygon.RegularPolygon.area"]], "args (sympy.geometry.polygon.regularpolygon property)": [[78, "sympy.geometry.polygon.RegularPolygon.args"]], "bisectors() (sympy.geometry.polygon.polygon method)": [[78, "sympy.geometry.polygon.Polygon.bisectors"]], "bisectors() (sympy.geometry.polygon.triangle method)": [[78, "sympy.geometry.polygon.Triangle.bisectors"]], "bounds (sympy.geometry.polygon.polygon property)": [[78, "sympy.geometry.polygon.Polygon.bounds"]], "center (sympy.geometry.polygon.regularpolygon property)": [[78, "sympy.geometry.polygon.RegularPolygon.center"]], "centroid (sympy.geometry.polygon.polygon property)": [[78, "sympy.geometry.polygon.Polygon.centroid"]], "centroid (sympy.geometry.polygon.regularpolygon property)": [[78, "sympy.geometry.polygon.RegularPolygon.centroid"]], "circumcenter (sympy.geometry.polygon.regularpolygon property)": [[78, "sympy.geometry.polygon.RegularPolygon.circumcenter"]], "circumcenter (sympy.geometry.polygon.triangle property)": [[78, "sympy.geometry.polygon.Triangle.circumcenter"]], "circumcircle (sympy.geometry.polygon.regularpolygon property)": [[78, "sympy.geometry.polygon.RegularPolygon.circumcircle"]], "circumcircle (sympy.geometry.polygon.triangle property)": [[78, "sympy.geometry.polygon.Triangle.circumcircle"]], "circumradius (sympy.geometry.polygon.regularpolygon property)": [[78, "sympy.geometry.polygon.RegularPolygon.circumradius"]], "circumradius (sympy.geometry.polygon.triangle property)": [[78, "sympy.geometry.polygon.Triangle.circumradius"]], "cut_section() (sympy.geometry.polygon.polygon method)": [[78, "sympy.geometry.polygon.Polygon.cut_section"]], "distance() (sympy.geometry.polygon.polygon method)": [[78, "sympy.geometry.polygon.Polygon.distance"]], "encloses_point() (sympy.geometry.polygon.polygon method)": [[78, "sympy.geometry.polygon.Polygon.encloses_point"]], "encloses_point() (sympy.geometry.polygon.regularpolygon method)": [[78, "sympy.geometry.polygon.RegularPolygon.encloses_point"]], "eulerline (sympy.geometry.polygon.triangle property)": [[78, "sympy.geometry.polygon.Triangle.eulerline"]], "excenters (sympy.geometry.polygon.triangle property)": [[78, "sympy.geometry.polygon.Triangle.excenters"]], "exradii (sympy.geometry.polygon.triangle property)": [[78, "sympy.geometry.polygon.Triangle.exradii"]], "exterior_angle (sympy.geometry.polygon.regularpolygon property)": [[78, "sympy.geometry.polygon.RegularPolygon.exterior_angle"]], "first_moment_of_area() (sympy.geometry.polygon.polygon method)": [[78, "sympy.geometry.polygon.Polygon.first_moment_of_area"]], "incenter (sympy.geometry.polygon.triangle property)": [[78, "sympy.geometry.polygon.Triangle.incenter"]], "incircle (sympy.geometry.polygon.regularpolygon property)": [[78, "sympy.geometry.polygon.RegularPolygon.incircle"]], "incircle (sympy.geometry.polygon.triangle property)": [[78, "sympy.geometry.polygon.Triangle.incircle"]], "inradius (sympy.geometry.polygon.regularpolygon property)": [[78, "sympy.geometry.polygon.RegularPolygon.inradius"]], "inradius (sympy.geometry.polygon.triangle property)": [[78, "sympy.geometry.polygon.Triangle.inradius"]], "interior_angle (sympy.geometry.polygon.regularpolygon property)": [[78, "sympy.geometry.polygon.RegularPolygon.interior_angle"]], "intersection() (sympy.geometry.polygon.polygon method)": [[78, "sympy.geometry.polygon.Polygon.intersection"]], "is_convex() (sympy.geometry.polygon.polygon method)": [[78, "sympy.geometry.polygon.Polygon.is_convex"]], "is_equilateral() (sympy.geometry.polygon.triangle method)": [[78, "sympy.geometry.polygon.Triangle.is_equilateral"]], "is_isosceles() (sympy.geometry.polygon.triangle method)": [[78, "sympy.geometry.polygon.Triangle.is_isosceles"]], "is_right() (sympy.geometry.polygon.triangle method)": [[78, "sympy.geometry.polygon.Triangle.is_right"]], "is_scalene() (sympy.geometry.polygon.triangle method)": [[78, "sympy.geometry.polygon.Triangle.is_scalene"]], "is_similar() (sympy.geometry.polygon.triangle method)": [[78, "sympy.geometry.polygon.Triangle.is_similar"]], "length (sympy.geometry.polygon.regularpolygon property)": [[78, "sympy.geometry.polygon.RegularPolygon.length"]], "medial (sympy.geometry.polygon.triangle property)": [[78, "sympy.geometry.polygon.Triangle.medial"]], "medians (sympy.geometry.polygon.triangle property)": [[78, "sympy.geometry.polygon.Triangle.medians"]], "nine_point_circle (sympy.geometry.polygon.triangle property)": [[78, "sympy.geometry.polygon.Triangle.nine_point_circle"]], "orthocenter (sympy.geometry.polygon.triangle property)": [[78, "sympy.geometry.polygon.Triangle.orthocenter"]], "perimeter (sympy.geometry.polygon.polygon property)": [[78, "sympy.geometry.polygon.Polygon.perimeter"]], "plot_interval() (sympy.geometry.polygon.polygon method)": [[78, "sympy.geometry.polygon.Polygon.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[78, "sympy.geometry.polygon.Polygon.polar_second_moment_of_area"]], "radius (sympy.geometry.polygon.regularpolygon property)": [[78, "sympy.geometry.polygon.RegularPolygon.radius"]], "reflect() (sympy.geometry.polygon.regularpolygon method)": [[78, "sympy.geometry.polygon.RegularPolygon.reflect"]], "rotate() (sympy.geometry.polygon.regularpolygon method)": [[78, "sympy.geometry.polygon.RegularPolygon.rotate"]], "rotation (sympy.geometry.polygon.regularpolygon property)": [[78, "sympy.geometry.polygon.RegularPolygon.rotation"]], "scale() (sympy.geometry.polygon.regularpolygon method)": [[78, "sympy.geometry.polygon.RegularPolygon.scale"]], "second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[78, "sympy.geometry.polygon.Polygon.second_moment_of_area"]], "section_modulus() (sympy.geometry.polygon.polygon method)": [[78, "sympy.geometry.polygon.Polygon.section_modulus"]], "sides (sympy.geometry.polygon.polygon property)": [[78, "sympy.geometry.polygon.Polygon.sides"]], "spin() (sympy.geometry.polygon.regularpolygon method)": [[78, "sympy.geometry.polygon.RegularPolygon.spin"]], "sympy.geometry.polygon": [[78, "module-sympy.geometry.polygon"]], "vertices (sympy.geometry.polygon.polygon property)": [[78, "sympy.geometry.polygon.Polygon.vertices"]], "vertices (sympy.geometry.polygon.regularpolygon property)": [[78, "sympy.geometry.polygon.RegularPolygon.vertices"]], "vertices (sympy.geometry.polygon.triangle property)": [[78, "sympy.geometry.polygon.Triangle.vertices"]], "are_similar() (in module sympy.geometry.util)": [[79, "sympy.geometry.util.are_similar"]], "centroid() (in module sympy.geometry.util)": [[79, "sympy.geometry.util.centroid"]], "convex_hull() (in module sympy.geometry.util)": [[79, "sympy.geometry.util.convex_hull"]], "idiff() (in module sympy.geometry.util)": [[79, "sympy.geometry.util.idiff"]], "intersection() (in module sympy.geometry.util)": [[79, "sympy.geometry.util.intersection"]], "sympy.geometry.util": [[79, "module-sympy.geometry.util"]], "expr_to_holonomic() (in module sympy.holonomic.holonomic)": [[81, "sympy.holonomic.holonomic.expr_to_holonomic"]], "from_hyper() (in module sympy.holonomic.holonomic)": [[81, "sympy.holonomic.holonomic.from_hyper"]], "from_meijerg() (in module sympy.holonomic.holonomic)": [[81, "sympy.holonomic.holonomic.from_meijerg"]], "sympy.holonomic": [[82, "module-sympy.holonomic"]], "_convert_poly_rat_alg() (in module sympy.holonomic.holonomic)": [[83, "sympy.holonomic.holonomic._convert_poly_rat_alg"]], "_create_table() (in module sympy.holonomic.holonomic)": [[83, "sympy.holonomic.holonomic._create_table"]], "composition() (sympy.holonomic.holonomic.holonomicfunction method)": [[84, "sympy.holonomic.holonomic.HolonomicFunction.composition"]], "diff() (sympy.holonomic.holonomic.holonomicfunction method)": [[84, "sympy.holonomic.holonomic.HolonomicFunction.diff"]], "evalf() (sympy.holonomic.holonomic.holonomicfunction method)": [[84, "sympy.holonomic.holonomic.HolonomicFunction.evalf"]], "integrate() (sympy.holonomic.holonomic.holonomicfunction method)": [[84, "sympy.holonomic.holonomic.HolonomicFunction.integrate"]], "series() (sympy.holonomic.holonomic.holonomicfunction method)": [[84, "sympy.holonomic.holonomic.HolonomicFunction.series"]], "to_expr() (sympy.holonomic.holonomic.holonomicfunction method)": [[84, "sympy.holonomic.holonomic.HolonomicFunction.to_expr"]], "to_hyper() (sympy.holonomic.holonomic.holonomicfunction method)": [[84, "sympy.holonomic.holonomic.HolonomicFunction.to_hyper"]], "to_meijerg() (sympy.holonomic.holonomic.holonomicfunction method)": [[84, "sympy.holonomic.holonomic.HolonomicFunction.to_meijerg"]], "to_sequence() (sympy.holonomic.holonomic.holonomicfunction method)": [[84, "sympy.holonomic.holonomic.HolonomicFunction.to_sequence"]], "differentialoperator (class in sympy.holonomic.holonomic)": [[85, "sympy.holonomic.holonomic.DifferentialOperator"]], "differentialoperatoralgebra (class in sympy.holonomic.holonomic)": [[85, "sympy.holonomic.holonomic.DifferentialOperatorAlgebra"]], "differentialoperators() (in module sympy.holonomic.holonomic)": [[85, "sympy.holonomic.holonomic.DifferentialOperators"]], "holonomicfunction (class in sympy.holonomic.holonomic)": [[85, "sympy.holonomic.holonomic.HolonomicFunction"]], "is_singular() (sympy.holonomic.holonomic.differentialoperator method)": [[85, "sympy.holonomic.holonomic.DifferentialOperator.is_singular"]], "_coeffexpvalueerror": [[87, "sympy.integrals.meijerint._CoeffExpValueError"]], "_check_antecedents() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._check_antecedents"]], "_check_antecedents_1() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._check_antecedents_1"]], "_check_antecedents_inversion() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._check_antecedents_inversion"]], "_condsimp() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._condsimp"]], "_create_lookup_table() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._create_lookup_table"]], "_dummy() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._dummy"]], "_dummy_() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._dummy_"]], "_eval_cond() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._eval_cond"]], "_exponents() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._exponents"]], "_find_splitting_points() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._find_splitting_points"]], "_flip_g() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._flip_g"]], "_functions() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._functions"]], "_get_coeff_exp() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._get_coeff_exp"]], "_guess_expansion() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._guess_expansion"]], "_inflate_fox_h() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._inflate_fox_h"]], "_inflate_g() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._inflate_g"]], "_int0oo() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._int0oo"]], "_int0oo_1() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._int0oo_1"]], "_int_inversion() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._int_inversion"]], "_is_analytic() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._is_analytic"]], "_meijerint_definite_2() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._meijerint_definite_2"]], "_meijerint_definite_3() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._meijerint_definite_3"]], "_meijerint_definite_4() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._meijerint_definite_4"]], "_meijerint_indefinite_1() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._meijerint_indefinite_1"]], "_mul_args() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._mul_args"]], "_mul_as_two_parts() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._mul_as_two_parts"]], "_my_principal_branch() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._my_principal_branch"]], "_mytype() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._mytype"]], "_rewrite1() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._rewrite1"]], "_rewrite2() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._rewrite2"]], "_rewrite_inversion() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._rewrite_inversion"]], "_rewrite_saxena() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._rewrite_saxena"]], "_rewrite_saxena_1() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._rewrite_saxena_1"]], "_rewrite_single() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._rewrite_single"]], "_split_mul() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint._split_mul"]], "meijerint_definite() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint.meijerint_definite"]], "meijerint_indefinite() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint.meijerint_indefinite"]], "meijerint_inversion() (in module sympy.integrals.meijerint)": [[87, "sympy.integrals.meijerint.meijerint_inversion"]], "sympy.integrals.meijerint": [[87, "module-sympy.integrals.meijerint"]], "sympy.integrals.meijerint_doc": [[87, "module-sympy.integrals.meijerint_doc"]], "cosinetransform (class in sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.CosineTransform"]], "exprwithlimits (class in sympy.concrete.expr_with_limits)": [[89, "sympy.concrete.expr_with_limits.ExprWithLimits"]], "fouriertransform (class in sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.FourierTransform"]], "hankeltransform (class in sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.HankelTransform"]], "integral (class in sympy.integrals.integrals)": [[89, "sympy.integrals.integrals.Integral"]], "integral.is_commutative (in module sympy.integrals.integrals)": [[89, "sympy.integrals.integrals.Integral.is_commutative"]], "integraltransform (class in sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.IntegralTransform"]], "integraltransformerror": [[89, "sympy.integrals.transforms.IntegralTransformError"]], "inversecosinetransform (class in sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.InverseCosineTransform"]], "inversefouriertransform (class in sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.InverseFourierTransform"]], "inversehankeltransform (class in sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.InverseHankelTransform"]], "inverselaplacetransform (class in sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.InverseLaplaceTransform"]], "inversemellintransform (class in sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.InverseMellinTransform"]], "inversesinetransform (class in sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.InverseSineTransform"]], "laplacetransform (class in sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.LaplaceTransform"]], "mellintransform (class in sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.MellinTransform"]], "nonelementaryintegral (class in sympy.integrals.risch)": [[89, "sympy.integrals.risch.NonElementaryIntegral"]], "sinetransform (class in sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.SineTransform"]], "_fourier_transform() (in module sympy.integrals.transforms)": [[89, "sympy.integrals.transforms._fourier_transform"]], "as_sum() (sympy.integrals.integrals.integral method)": [[89, "sympy.integrals.integrals.Integral.as_sum"]], "bound_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[89, "sympy.concrete.expr_with_limits.ExprWithLimits.bound_symbols"]], "components() (in module sympy.integrals.heurisch)": [[89, "sympy.integrals.heurisch.components"]], "cosine_transform() (in module sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.cosine_transform"]], "deltaintegrate() (in module sympy.integrals.deltafunctions)": [[89, "sympy.integrals.deltafunctions.deltaintegrate"]], "doit() (sympy.integrals.integrals.integral method)": [[89, "sympy.integrals.integrals.Integral.doit"]], "doit() (sympy.integrals.transforms.integraltransform method)": [[89, "sympy.integrals.transforms.IntegralTransform.doit"]], "doit() (sympy.integrals.transforms.inverselaplacetransform method)": [[89, "sympy.integrals.transforms.InverseLaplaceTransform.doit"]], "doit() (sympy.integrals.transforms.laplacetransform method)": [[89, "sympy.integrals.transforms.LaplaceTransform.doit"]], "fourier_transform() (in module sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.fourier_transform"]], "free_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[89, "sympy.concrete.expr_with_limits.ExprWithLimits.free_symbols"]], "free_symbols (sympy.integrals.integrals.integral property)": [[89, "sympy.integrals.integrals.Integral.free_symbols"]], "function (sympy.concrete.expr_with_limits.exprwithlimits property)": [[89, "sympy.concrete.expr_with_limits.ExprWithLimits.function"]], "function (sympy.integrals.transforms.integraltransform property)": [[89, "sympy.integrals.transforms.IntegralTransform.function"]], "function_variable (sympy.integrals.transforms.integraltransform property)": [[89, "sympy.integrals.transforms.IntegralTransform.function_variable"]], "gauss_chebyshev_t() (in module sympy.integrals.quadrature)": [[89, "sympy.integrals.quadrature.gauss_chebyshev_t"]], "gauss_chebyshev_u() (in module sympy.integrals.quadrature)": [[89, "sympy.integrals.quadrature.gauss_chebyshev_u"]], "gauss_gen_laguerre() (in module sympy.integrals.quadrature)": [[89, "sympy.integrals.quadrature.gauss_gen_laguerre"]], "gauss_hermite() (in module sympy.integrals.quadrature)": [[89, "sympy.integrals.quadrature.gauss_hermite"]], "gauss_jacobi() (in module sympy.integrals.quadrature)": [[89, "sympy.integrals.quadrature.gauss_jacobi"]], "gauss_laguerre() (in module sympy.integrals.quadrature)": [[89, "sympy.integrals.quadrature.gauss_laguerre"]], "gauss_legendre() (in module sympy.integrals.quadrature)": [[89, "sympy.integrals.quadrature.gauss_legendre"]], "gauss_lobatto() (in module sympy.integrals.quadrature)": [[89, "sympy.integrals.quadrature.gauss_lobatto"]], "hankel_transform() (in module sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.hankel_transform"]], "has_finite_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[89, "sympy.concrete.expr_with_limits.ExprWithLimits.has_finite_limits"]], "has_reversed_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[89, "sympy.concrete.expr_with_limits.ExprWithLimits.has_reversed_limits"]], "heurisch() (in module sympy.integrals.heurisch)": [[89, "sympy.integrals.heurisch.heurisch"]], "integral_steps() (in module sympy.integrals.manualintegrate)": [[89, "sympy.integrals.manualintegrate.integral_steps"]], "integrate() (in module sympy.integrals.integrals)": [[89, "sympy.integrals.integrals.integrate"]], "inverse_cosine_transform() (in module sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.inverse_cosine_transform"]], "inverse_fourier_transform() (in module sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.inverse_fourier_transform"]], "inverse_hankel_transform() (in module sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.inverse_hankel_transform"]], "inverse_laplace_transform() (in module sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.inverse_laplace_transform"]], "inverse_mellin_transform() (in module sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.inverse_mellin_transform"]], "inverse_sine_transform() (in module sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.inverse_sine_transform"]], "is_number (sympy.concrete.expr_with_limits.exprwithlimits property)": [[89, "sympy.concrete.expr_with_limits.ExprWithLimits.is_number"]], "laplace_transform() (in module sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.laplace_transform"]], "limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[89, "sympy.concrete.expr_with_limits.ExprWithLimits.limits"]], "line_integrate() (in module sympy.integrals.integrals)": [[89, "sympy.integrals.integrals.line_integrate"]], "manualintegrate() (in module sympy.integrals.manualintegrate)": [[89, "sympy.integrals.manualintegrate.manualintegrate"]], "mellin_transform() (in module sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.mellin_transform"]], "polytope_integrate() (in module sympy.integrals.intpoly)": [[89, "sympy.integrals.intpoly.polytope_integrate"]], "principal_value() (sympy.integrals.integrals.integral method)": [[89, "sympy.integrals.integrals.Integral.principal_value"]], "ratint() (in module sympy.integrals.rationaltools)": [[89, "sympy.integrals.rationaltools.ratint"]], "ratint_logpart() (in module sympy.integrals.rationaltools)": [[89, "sympy.integrals.rationaltools.ratint_logpart"]], "ratint_ratpart() (in module sympy.integrals.rationaltools)": [[89, "sympy.integrals.rationaltools.ratint_ratpart"]], "risch_integrate() (in module sympy.integrals.risch)": [[89, "sympy.integrals.risch.risch_integrate"]], "sine_transform() (in module sympy.integrals.transforms)": [[89, "sympy.integrals.transforms.sine_transform"]], "singularityintegrate() (in module sympy.integrals.singularityfunctions)": [[89, "sympy.integrals.singularityfunctions.singularityintegrate"]], "sympy.integrals": [[89, "module-sympy.integrals"]], "sympy.integrals.intpoly": [[89, "module-sympy.integrals.intpoly"]], "sympy.integrals.transforms": [[89, "module-sympy.integrals.transforms"]], "transform() (sympy.integrals.integrals.integral method)": [[89, "sympy.integrals.integrals.Integral.transform"]], "transform_variable (sympy.integrals.transforms.integraltransform property)": [[89, "sympy.integrals.transforms.IntegralTransform.transform_variable"]], "trigintegrate() (in module sympy.integrals.trigonometry)": [[89, "sympy.integrals.trigonometry.trigintegrate"]], "variables (sympy.concrete.expr_with_limits.exprwithlimits property)": [[89, "sympy.concrete.expr_with_limits.ExprWithLimits.variables"]], "enable_automatic_int_sympification() (in module sympy.interactive.session)": [[90, "sympy.interactive.session.enable_automatic_int_sympification"]], "enable_automatic_symbols() (in module sympy.interactive.session)": [[90, "sympy.interactive.session.enable_automatic_symbols"]], "init_ipython_session() (in module sympy.interactive.session)": [[90, "sympy.interactive.session.init_ipython_session"]], "init_printing() (in module sympy.interactive.printing)": [[90, "sympy.interactive.printing.init_printing"]], "init_python_session() (in module sympy.interactive.session)": [[90, "sympy.interactive.session.init_python_session"]], "init_session() (in module sympy.interactive.session)": [[90, "sympy.interactive.session.init_session"]], "int_to_integer() (in module sympy.interactive.session)": [[90, "sympy.interactive.session.int_to_Integer"]], "sympy.interactive": [[90, "module-sympy.interactive"]], "sympy.interactive.printing": [[90, "module-sympy.interactive.printing"]], "sympy.interactive.session": [[90, "module-sympy.interactive.session"]], "cartanmatrix() (in module sympy.liealgebras.cartan_matrix)": [[91, "sympy.liealgebras.cartan_matrix.CartanMatrix"]], "cartantype_generator (class in sympy.liealgebras.cartan_type)": [[91, "sympy.liealgebras.cartan_type.CartanType_generator"]], "dynkindiagram() (in module sympy.liealgebras.dynkin_diagram)": [[91, "sympy.liealgebras.dynkin_diagram.DynkinDiagram"]], "rootsystem (class in sympy.liealgebras.root_system)": [[91, "sympy.liealgebras.root_system.RootSystem"]], "standard_cartan (class in sympy.liealgebras.cartan_type)": [[91, "sympy.liealgebras.cartan_type.Standard_Cartan"]], "typea (class in sympy.liealgebras.type_a)": [[91, "sympy.liealgebras.type_a.TypeA"]], "typeb (class in sympy.liealgebras.type_b)": [[91, "sympy.liealgebras.type_b.TypeB"]], "typec (class in sympy.liealgebras.type_c)": [[91, "sympy.liealgebras.type_c.TypeC"]], "typed (class in sympy.liealgebras.type_d)": [[91, "sympy.liealgebras.type_d.TypeD"]], "typee (class in sympy.liealgebras.type_e)": [[91, "sympy.liealgebras.type_e.TypeE"]], "typef (class in sympy.liealgebras.type_f)": [[91, "sympy.liealgebras.type_f.TypeF"]], "typeg (class in sympy.liealgebras.type_g)": [[91, "sympy.liealgebras.type_g.TypeG"]], "weylgroup (class in sympy.liealgebras.weyl_group)": [[91, "sympy.liealgebras.weyl_group.WeylGroup"]], "add_as_roots() (sympy.liealgebras.root_system.rootsystem method)": [[91, "sympy.liealgebras.root_system.RootSystem.add_as_roots"]], "add_simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[91, "sympy.liealgebras.root_system.RootSystem.add_simple_roots"]], "all_roots() (sympy.liealgebras.root_system.rootsystem method)": [[91, "sympy.liealgebras.root_system.RootSystem.all_roots"]], "basic_root() (sympy.liealgebras.type_a.typea method)": [[91, "sympy.liealgebras.type_a.TypeA.basic_root"]], "basic_root() (sympy.liealgebras.type_b.typeb method)": [[91, "sympy.liealgebras.type_b.TypeB.basic_root"]], "basic_root() (sympy.liealgebras.type_c.typec method)": [[91, "sympy.liealgebras.type_c.TypeC.basic_root"]], "basic_root() (sympy.liealgebras.type_d.typed method)": [[91, "sympy.liealgebras.type_d.TypeD.basic_root"]], "basic_root() (sympy.liealgebras.type_e.typee method)": [[91, "sympy.liealgebras.type_e.TypeE.basic_root"]], "basic_root() (sympy.liealgebras.type_f.typef method)": [[91, "sympy.liealgebras.type_f.TypeF.basic_root"]], "basis() (sympy.liealgebras.type_a.typea method)": [[91, "sympy.liealgebras.type_a.TypeA.basis"]], "basis() (sympy.liealgebras.type_b.typeb method)": [[91, "sympy.liealgebras.type_b.TypeB.basis"]], "basis() (sympy.liealgebras.type_c.typec method)": [[91, "sympy.liealgebras.type_c.TypeC.basis"]], "basis() (sympy.liealgebras.type_d.typed method)": [[91, "sympy.liealgebras.type_d.TypeD.basis"]], "basis() (sympy.liealgebras.type_e.typee method)": [[91, "sympy.liealgebras.type_e.TypeE.basis"]], "basis() (sympy.liealgebras.type_f.typef method)": [[91, "sympy.liealgebras.type_f.TypeF.basis"]], "basis() (sympy.liealgebras.type_g.typeg method)": [[91, "sympy.liealgebras.type_g.TypeG.basis"]], "cartan_matrix() (sympy.liealgebras.root_system.rootsystem method)": [[91, "sympy.liealgebras.root_system.RootSystem.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_a.typea method)": [[91, "sympy.liealgebras.type_a.TypeA.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_b.typeb method)": [[91, "sympy.liealgebras.type_b.TypeB.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_c.typec method)": [[91, "sympy.liealgebras.type_c.TypeC.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_d.typed method)": [[91, "sympy.liealgebras.type_d.TypeD.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_e.typee method)": [[91, "sympy.liealgebras.type_e.TypeE.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_f.typef method)": [[91, "sympy.liealgebras.type_f.TypeF.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_g.typeg method)": [[91, "sympy.liealgebras.type_g.TypeG.cartan_matrix"]], "coxeter_diagram() (sympy.liealgebras.weyl_group.weylgroup method)": [[91, "sympy.liealgebras.weyl_group.WeylGroup.coxeter_diagram"]], "delete_doubles() (sympy.liealgebras.weyl_group.weylgroup method)": [[91, "sympy.liealgebras.weyl_group.WeylGroup.delete_doubles"]], "dimension() (sympy.liealgebras.type_a.typea method)": [[91, "sympy.liealgebras.type_a.TypeA.dimension"]], "dimension() (sympy.liealgebras.type_b.typeb method)": [[91, "sympy.liealgebras.type_b.TypeB.dimension"]], "dimension() (sympy.liealgebras.type_c.typec method)": [[91, "sympy.liealgebras.type_c.TypeC.dimension"]], "dimension() (sympy.liealgebras.type_d.typed method)": [[91, "sympy.liealgebras.type_d.TypeD.dimension"]], "dimension() (sympy.liealgebras.type_e.typee method)": [[91, "sympy.liealgebras.type_e.TypeE.dimension"]], "dimension() (sympy.liealgebras.type_f.typef method)": [[91, "sympy.liealgebras.type_f.TypeF.dimension"]], "dimension() (sympy.liealgebras.type_g.typeg method)": [[91, "sympy.liealgebras.type_g.TypeG.dimension"]], "dynkin_diagram() (sympy.liealgebras.root_system.rootsystem method)": [[91, "sympy.liealgebras.root_system.RootSystem.dynkin_diagram"]], "element_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[91, "sympy.liealgebras.weyl_group.WeylGroup.element_order"]], "generators() (sympy.liealgebras.weyl_group.weylgroup method)": [[91, "sympy.liealgebras.weyl_group.WeylGroup.generators"]], "group_name() (sympy.liealgebras.weyl_group.weylgroup method)": [[91, "sympy.liealgebras.weyl_group.WeylGroup.group_name"]], "group_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[91, "sympy.liealgebras.weyl_group.WeylGroup.group_order"]], "highest_root() (sympy.liealgebras.type_a.typea method)": [[91, "sympy.liealgebras.type_a.TypeA.highest_root"]], "lie_algebra() (sympy.liealgebras.type_a.typea method)": [[91, "sympy.liealgebras.type_a.TypeA.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_b.typeb method)": [[91, "sympy.liealgebras.type_b.TypeB.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_c.typec method)": [[91, "sympy.liealgebras.type_c.TypeC.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_d.typed method)": [[91, "sympy.liealgebras.type_d.TypeD.lie_algebra"]], "matrix_form() (sympy.liealgebras.weyl_group.weylgroup method)": [[91, "sympy.liealgebras.weyl_group.WeylGroup.matrix_form"]], "positive_roots() (sympy.liealgebras.type_a.typea method)": [[91, "sympy.liealgebras.type_a.TypeA.positive_roots"]], "positive_roots() (sympy.liealgebras.type_b.typeb method)": [[91, "sympy.liealgebras.type_b.TypeB.positive_roots"]], "positive_roots() (sympy.liealgebras.type_c.typec method)": [[91, "sympy.liealgebras.type_c.TypeC.positive_roots"]], "positive_roots() (sympy.liealgebras.type_d.typed method)": [[91, "sympy.liealgebras.type_d.TypeD.positive_roots"]], "positive_roots() (sympy.liealgebras.type_e.typee method)": [[91, "sympy.liealgebras.type_e.TypeE.positive_roots"]], "positive_roots() (sympy.liealgebras.type_f.typef method)": [[91, "sympy.liealgebras.type_f.TypeF.positive_roots"]], "positive_roots() (sympy.liealgebras.type_g.typeg method)": [[91, "sympy.liealgebras.type_g.TypeG.positive_roots"]], "rank() (sympy.liealgebras.cartan_type.standard_cartan method)": [[91, "sympy.liealgebras.cartan_type.Standard_Cartan.rank"]], "root_space() (sympy.liealgebras.root_system.rootsystem method)": [[91, "sympy.liealgebras.root_system.RootSystem.root_space"]], "roots() (sympy.liealgebras.type_a.typea method)": [[91, "sympy.liealgebras.type_a.TypeA.roots"]], "roots() (sympy.liealgebras.type_b.typeb method)": [[91, "sympy.liealgebras.type_b.TypeB.roots"]], "roots() (sympy.liealgebras.type_c.typec method)": [[91, "sympy.liealgebras.type_c.TypeC.roots"]], "roots() (sympy.liealgebras.type_d.typed method)": [[91, "sympy.liealgebras.type_d.TypeD.roots"]], "roots() (sympy.liealgebras.type_e.typee method)": [[91, "sympy.liealgebras.type_e.TypeE.roots"]], "roots() (sympy.liealgebras.type_f.typef method)": [[91, "sympy.liealgebras.type_f.TypeF.roots"]], "roots() (sympy.liealgebras.type_g.typeg method)": [[91, "sympy.liealgebras.type_g.TypeG.roots"]], "series() (sympy.liealgebras.cartan_type.standard_cartan method)": [[91, "sympy.liealgebras.cartan_type.Standard_Cartan.series"]], "simple_root() (sympy.liealgebras.type_a.typea method)": [[91, "sympy.liealgebras.type_a.TypeA.simple_root"]], "simple_root() (sympy.liealgebras.type_b.typeb method)": [[91, "sympy.liealgebras.type_b.TypeB.simple_root"]], "simple_root() (sympy.liealgebras.type_c.typec method)": [[91, "sympy.liealgebras.type_c.TypeC.simple_root"]], "simple_root() (sympy.liealgebras.type_d.typed method)": [[91, "sympy.liealgebras.type_d.TypeD.simple_root"]], "simple_root() (sympy.liealgebras.type_e.typee method)": [[91, "sympy.liealgebras.type_e.TypeE.simple_root"]], "simple_root() (sympy.liealgebras.type_f.typef method)": [[91, "sympy.liealgebras.type_f.TypeF.simple_root"]], "simple_root() (sympy.liealgebras.type_g.typeg method)": [[91, "sympy.liealgebras.type_g.TypeG.simple_root"]], "simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[91, "sympy.liealgebras.root_system.RootSystem.simple_roots"]], "sympy.liealgebras": [[91, "module-sympy.liealgebras"]], "anfform() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.ANFform"]], "and (class in sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.And"]], "boolean (class in sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.Boolean"]], "booleanfalse (class in sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.BooleanFalse"]], "booleantrue (class in sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.BooleanTrue"]], "equivalent (class in sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.Equivalent"]], "exclusive (class in sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.Exclusive"]], "ite (class in sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.ITE"]], "implies (class in sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.Implies"]], "nand (class in sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.Nand"]], "nor (class in sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.Nor"]], "not (class in sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.Not"]], "or (class in sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.Or"]], "posform() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.POSform"]], "sopform() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.SOPform"]], "xnor (class in sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.Xnor"]], "xor (class in sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.Xor"]], "anf_coeffs() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.anf_coeffs"]], "as_set() (sympy.logic.boolalg.boolean method)": [[92, "sympy.logic.boolalg.Boolean.as_set"]], "as_set() (sympy.logic.boolalg.booleanfalse method)": [[92, "sympy.logic.boolalg.BooleanFalse.as_set"]], "as_set() (sympy.logic.boolalg.booleantrue method)": [[92, "sympy.logic.boolalg.BooleanTrue.as_set"]], "bool_map() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.bool_map"]], "bool_maxterm() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.bool_maxterm"]], "bool_minterm() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.bool_minterm"]], "bool_monomial() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.bool_monomial"]], "distribute_and_over_or() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.distribute_and_over_or"]], "distribute_or_over_and() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.distribute_or_over_and"]], "distribute_xor_over_and() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.distribute_xor_over_and"]], "eliminate_implications() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.eliminate_implications"]], "equals() (sympy.logic.boolalg.boolean method)": [[92, "sympy.logic.boolalg.Boolean.equals"]], "gateinputcount() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.gateinputcount"]], "integer_to_term() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.integer_to_term"]], "is_anf() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.is_anf"]], "is_cnf() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.is_cnf"]], "is_dnf() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.is_dnf"]], "is_nnf() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.is_nnf"]], "satisfiable() (in module sympy.logic.inference)": [[92, "sympy.logic.inference.satisfiable"]], "simplify_logic() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.simplify_logic"]], "sympy.logic": [[92, "module-sympy.logic"]], "sympy.logic.inference": [[92, "module-sympy.logic.inference"]], "term_to_integer() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.term_to_integer"]], "to_anf() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.to_anf"]], "to_cnf() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.to_cnf"]], "to_dnf() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.to_dnf"]], "to_int_repr() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.to_int_repr"]], "to_nnf() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.to_nnf"]], "truth_table() (in module sympy.logic.boolalg)": [[92, "sympy.logic.boolalg.truth_table"]], "c (sympy.matrices.common.matrixcommon property)": [[93, "sympy.matrices.common.MatrixCommon.C"]], "h (sympy.matrices.common.matrixcommon property)": [[93, "sympy.matrices.common.MatrixCommon.H"]], "matrixcommon (class in sympy.matrices.common)": [[93, "sympy.matrices.common.MatrixCommon"]], "matrixkind (class in sympy.matrices.common)": [[93, "sympy.matrices.common.MatrixKind"]], "t (sympy.matrices.common.matrixcommon property)": [[93, "sympy.matrices.common.MatrixCommon.T"]], "__abs__() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.__abs__"]], "__add__() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.__add__"]], "__getitem__() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.__getitem__"]], "__len__() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.__len__"]], "__mul__() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.__mul__"]], "__pow__() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.__pow__"]], "__weakref__ (sympy.matrices.common.matrixcommon attribute)": [[93, "sympy.matrices.common.MatrixCommon.__weakref__"]], "adjoint() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.adjoint"]], "applyfunc() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.applyfunc"]], "as_real_imag() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.as_real_imag"]], "atoms() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.atoms"]], "col() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.col"]], "col_del() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.col_del"]], "col_insert() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.col_insert"]], "col_join() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.col_join"]], "companion() (sympy.matrices.common.matrixcommon class method)": [[93, "sympy.matrices.common.MatrixCommon.companion"]], "conjugate() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.conjugate"]], "diag() (sympy.matrices.common.matrixcommon class method)": [[93, "sympy.matrices.common.MatrixCommon.diag"]], "diagonal() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.diagonal"]], "evalf() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.evalf"]], "expand() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.expand"]], "extract() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.extract"]], "eye() (sympy.matrices.common.matrixcommon class method)": [[93, "sympy.matrices.common.MatrixCommon.eye"]], "free_symbols (sympy.matrices.common.matrixcommon property)": [[93, "sympy.matrices.common.MatrixCommon.free_symbols"]], "get_diag_blocks() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.get_diag_blocks"]], "has() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.has"]], "hstack() (sympy.matrices.common.matrixcommon class method)": [[93, "sympy.matrices.common.MatrixCommon.hstack"]], "is_anti_symmetric() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.is_anti_symmetric"]], "is_diagonal() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.is_diagonal"]], "is_hermitian (sympy.matrices.common.matrixcommon property)": [[93, "sympy.matrices.common.MatrixCommon.is_hermitian"]], "is_lower (sympy.matrices.common.matrixcommon property)": [[93, "sympy.matrices.common.MatrixCommon.is_lower"]], "is_lower_hessenberg (sympy.matrices.common.matrixcommon property)": [[93, "sympy.matrices.common.MatrixCommon.is_lower_hessenberg"]], "is_square (sympy.matrices.common.matrixcommon property)": [[93, "sympy.matrices.common.MatrixCommon.is_square"]], "is_strongly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[93, "sympy.matrices.common.MatrixCommon.is_strongly_diagonally_dominant"]], "is_symbolic() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.is_symbolic"]], "is_symmetric() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.is_symmetric"]], "is_upper (sympy.matrices.common.matrixcommon property)": [[93, "sympy.matrices.common.MatrixCommon.is_upper"]], "is_upper_hessenberg (sympy.matrices.common.matrixcommon property)": [[93, "sympy.matrices.common.MatrixCommon.is_upper_hessenberg"]], "is_weakly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[93, "sympy.matrices.common.MatrixCommon.is_weakly_diagonally_dominant"]], "is_zero_matrix (sympy.matrices.common.matrixcommon property)": [[93, "sympy.matrices.common.MatrixCommon.is_zero_matrix"]], "jordan_block() (sympy.matrices.common.matrixcommon class method)": [[93, "sympy.matrices.common.MatrixCommon.jordan_block"]], "lower_triangular() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.lower_triangular"]], "multiply() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.multiply"]], "multiply_elementwise() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.multiply_elementwise"]], "n() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.n"]], "ones() (sympy.matrices.common.matrixcommon class method)": [[93, "sympy.matrices.common.MatrixCommon.ones"]], "permute() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.permute"]], "permute_cols() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.permute_cols"]], "permute_rows() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.permute_rows"]], "pow() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.pow"]], "refine() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.refine"]], "replace() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.replace"]], "reshape() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.reshape"]], "rmultiply() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.rmultiply"]], "rot90() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.rot90"]], "row() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.row"]], "row_del() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.row_del"]], "row_insert() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.row_insert"]], "row_join() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.row_join"]], "shape (sympy.matrices.common.matrixcommon property)": [[93, "sympy.matrices.common.MatrixCommon.shape"]], "simplify() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.simplify"]], "subs() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.subs"]], "sympy.matrices.common": [[93, "module-sympy.matrices.common"]], "todod() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.todod"]], "todok() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.todok"]], "tolist() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.tolist"]], "trace() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.trace"]], "transpose() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.transpose"]], "upper_triangular() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.upper_triangular"]], "values() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.values"]], "vec() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.vec"]], "vech() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.vech"]], "vstack() (sympy.matrices.common.matrixcommon class method)": [[93, "sympy.matrices.common.MatrixCommon.vstack"]], "wilkinson() (sympy.matrices.common.matrixcommon class method)": [[93, "sympy.matrices.common.MatrixCommon.wilkinson"]], "xreplace() (sympy.matrices.common.matrixcommon method)": [[93, "sympy.matrices.common.MatrixCommon.xreplace"]], "zeros() (sympy.matrices.common.matrixcommon class method)": [[93, "sympy.matrices.common.MatrixCommon.zeros"]], "densematrix (class in sympy.matrices.dense)": [[94, "sympy.matrices.dense.DenseMatrix"]], "ldldecomposition() (sympy.matrices.dense.densematrix method)": [[94, "sympy.matrices.dense.DenseMatrix.LDLdecomposition"]], "matrix (in module sympy.matrices.dense)": [[94, "sympy.matrices.dense.Matrix"]], "mutabledensematrix (class in sympy.matrices.dense)": [[94, "sympy.matrices.dense.MutableDenseMatrix"]], "as_immutable() (sympy.matrices.dense.densematrix method)": [[94, "sympy.matrices.dense.DenseMatrix.as_immutable"]], "as_mutable() (sympy.matrices.dense.densematrix method)": [[94, "sympy.matrices.dense.DenseMatrix.as_mutable"]], "cholesky() (sympy.matrices.dense.densematrix method)": [[94, "sympy.matrices.dense.DenseMatrix.cholesky"]], "lower_triangular_solve() (sympy.matrices.dense.densematrix method)": [[94, "sympy.matrices.dense.DenseMatrix.lower_triangular_solve"]], "simplify() (sympy.matrices.dense.mutabledensematrix method)": [[94, "sympy.matrices.dense.MutableDenseMatrix.simplify"]], "upper_triangular_solve() (sympy.matrices.dense.densematrix method)": [[94, "sympy.matrices.dense.DenseMatrix.upper_triangular_solve"]], "blockdiagmatrix (class in sympy.matrices.expressions.blockmatrix)": [[95, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix"]], "blockmatrix (class in sympy.matrices.expressions.blockmatrix)": [[95, "sympy.matrices.expressions.blockmatrix.BlockMatrix"]], "companionmatrix (class in sympy.matrices.expressions)": [[95, "sympy.matrices.expressions.CompanionMatrix"]], "functionmatrix (class in sympy.matrices.expressions)": [[95, "sympy.matrices.expressions.FunctionMatrix"]], "hadamardpower (class in sympy.matrices.expressions)": [[95, "sympy.matrices.expressions.HadamardPower"]], "hadamardproduct (class in sympy.matrices.expressions)": [[95, "sympy.matrices.expressions.HadamardProduct"]], "identity (class in sympy.matrices.expressions)": [[95, "sympy.matrices.expressions.Identity"]], "inverse (class in sympy.matrices.expressions)": [[95, "sympy.matrices.expressions.Inverse"]], "ldudecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[95, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LDUdecomposition"]], "ludecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[95, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LUdecomposition"]], "matadd (class in sympy.matrices.expressions)": [[95, "sympy.matrices.expressions.MatAdd"]], "matmul (class in sympy.matrices.expressions)": [[95, "sympy.matrices.expressions.MatMul"]], "matpow (class in sympy.matrices.expressions)": [[95, "sympy.matrices.expressions.MatPow"]], "matrixexpr (class in sympy.matrices.expressions)": [[95, "sympy.matrices.expressions.MatrixExpr"]], "matrixpermute (class in sympy.matrices.expressions)": [[95, "sympy.matrices.expressions.MatrixPermute"]], "matrixset (class in sympy.matrices.expressions)": [[95, "sympy.matrices.expressions.MatrixSet"]], "matrixsymbol (class in sympy.matrices.expressions)": [[95, "sympy.matrices.expressions.MatrixSymbol"]], "permutationmatrix (class in sympy.matrices.expressions)": [[95, "sympy.matrices.expressions.PermutationMatrix"]], "t (sympy.matrices.expressions.matrixexpr property)": [[95, "sympy.matrices.expressions.MatrixExpr.T"]], "trace (class in sympy.matrices.expressions)": [[95, "sympy.matrices.expressions.Trace"]], "transpose (class in sympy.matrices.expressions)": [[95, "sympy.matrices.expressions.Transpose"]], "udldecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[95, "sympy.matrices.expressions.blockmatrix.BlockMatrix.UDLdecomposition"]], "zeromatrix (class in sympy.matrices.expressions)": [[95, "sympy.matrices.expressions.ZeroMatrix"]], "as_coeff_mul() (sympy.matrices.expressions.matrixexpr method)": [[95, "sympy.matrices.expressions.MatrixExpr.as_coeff_Mul"]], "as_explicit() (sympy.matrices.expressions.matrixexpr method)": [[95, "sympy.matrices.expressions.MatrixExpr.as_explicit"]], "as_mutable() (sympy.matrices.expressions.matrixexpr method)": [[95, "sympy.matrices.expressions.MatrixExpr.as_mutable"]], "block_collapse() (in module sympy.matrices.expressions.blockmatrix)": [[95, "sympy.matrices.expressions.blockmatrix.block_collapse"]], "equals() (sympy.matrices.expressions.matrixexpr method)": [[95, "sympy.matrices.expressions.MatrixExpr.equals"]], "from_index_summation() (sympy.matrices.expressions.matrixexpr static method)": [[95, "sympy.matrices.expressions.MatrixExpr.from_index_summation"]], "get_diag_blocks() (sympy.matrices.expressions.blockmatrix.blockdiagmatrix method)": [[95, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.get_diag_blocks"]], "hadamard_product() (in module sympy.matrices.expressions)": [[95, "sympy.matrices.expressions.hadamard_product"]], "schur() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[95, "sympy.matrices.expressions.blockmatrix.BlockMatrix.schur"]], "sympy.matrices.expressions": [[95, "module-sympy.matrices.expressions"]], "sympy.matrices.expressions.blockmatrix": [[95, "module-sympy.matrices.expressions.blockmatrix"]], "transpose() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[95, "sympy.matrices.expressions.blockmatrix.BlockMatrix.transpose"]], "immutabledensematrix (class in sympy.matrices.immutable)": [[96, "sympy.matrices.immutable.ImmutableDenseMatrix"]], "immutablematrix (in module sympy.matrices.immutable)": [[96, "sympy.matrices.immutable.ImmutableMatrix"]], "sympy.matrices.immutable": [[96, "module-sympy.matrices.immutable"]], "sympy.matrices": [[97, "module-sympy.matrices"]], "d (sympy.matrices.matrices.matrixbase property)": [[98, "sympy.matrices.matrices.MatrixBase.D"]], "gramschmidt() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.GramSchmidt"]], "ldldecomposition() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.LDLdecomposition"]], "ldlsolve() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.LDLsolve"]], "ludecomposition() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.LUdecomposition"]], "ludecompositionff() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.LUdecompositionFF"]], "ludecomposition_simple() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.LUdecomposition_Simple"]], "lusolve() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.LUsolve"]], "matrixbase (class in sympy.matrices.matrices)": [[98, "sympy.matrices.matrices.MatrixBase"]], "matrixcalculus (class in sympy.matrices.matrices)": [[98, "sympy.matrices.matrices.MatrixCalculus"]], "matrixdeterminant (class in sympy.matrices.matrices)": [[98, "sympy.matrices.matrices.MatrixDeterminant"]], "matrixeigen (class in sympy.matrices.matrices)": [[98, "sympy.matrices.matrices.MatrixEigen"]], "matrixerror (class in sympy.matrices.matrices)": [[98, "sympy.matrices.matrices.MatrixError"]], "matrixreductions (class in sympy.matrices.matrices)": [[98, "sympy.matrices.matrices.MatrixReductions"]], "matrixsubspaces (class in sympy.matrices.matrices)": [[98, "sympy.matrices.matrices.MatrixSubspaces"]], "nonsquarematrixerror (class in sympy.matrices.matrices)": [[98, "sympy.matrices.matrices.NonSquareMatrixError"]], "qrdecomposition() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.QRdecomposition"]], "qrsolve() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.QRsolve"]], "shapeerror (class in sympy.matrices.matrices)": [[98, "sympy.matrices.matrices.ShapeError"]], "a2idx() (in module sympy.matrices.matrices)": [[98, "sympy.matrices.matrices.a2idx"]], "add() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.add"]], "adjugate() (sympy.matrices.matrices.matrixdeterminant method)": [[98, "sympy.matrices.matrices.MatrixDeterminant.adjugate"]], "analytic_func() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.analytic_func"]], "bidiagonal_decomposition() (sympy.matrices.matrices.matrixeigen method)": [[98, "sympy.matrices.matrices.MatrixEigen.bidiagonal_decomposition"]], "bidiagonalize() (sympy.matrices.matrices.matrixeigen method)": [[98, "sympy.matrices.matrices.MatrixEigen.bidiagonalize"]], "casoratian() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.casoratian"]], "charpoly() (sympy.matrices.matrices.matrixdeterminant method)": [[98, "sympy.matrices.matrices.MatrixDeterminant.charpoly"]], "cholesky() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.cholesky"]], "cholesky_solve() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.cholesky_solve"]], "cofactor() (sympy.matrices.matrices.matrixdeterminant method)": [[98, "sympy.matrices.matrices.MatrixDeterminant.cofactor"]], "cofactor_matrix() (sympy.matrices.matrices.matrixdeterminant method)": [[98, "sympy.matrices.matrices.MatrixDeterminant.cofactor_matrix"]], "columnspace() (sympy.matrices.matrices.matrixsubspaces method)": [[98, "sympy.matrices.matrices.MatrixSubspaces.columnspace"]], "condition_number() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.condition_number"]], "connected_components() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.connected_components"]], "connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.connected_components_decomposition"]], "copy() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.copy"]], "cross() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.cross"]], "det() (sympy.matrices.matrices.matrixdeterminant method)": [[98, "sympy.matrices.matrices.MatrixDeterminant.det"]], "diag() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.diag"]], "diagonal_solve() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.diagonal_solve"]], "diagonalize() (sympy.matrices.matrices.matrixeigen method)": [[98, "sympy.matrices.matrices.MatrixEigen.diagonalize"]], "diff() (sympy.matrices.matrices.matrixcalculus method)": [[98, "sympy.matrices.matrices.MatrixCalculus.diff"]], "dot() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.dot"]], "dual() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.dual"]], "echelon_form() (sympy.matrices.matrices.matrixreductions method)": [[98, "sympy.matrices.matrices.MatrixReductions.echelon_form"]], "eigenvals() (sympy.matrices.matrices.matrixeigen method)": [[98, "sympy.matrices.matrices.MatrixEigen.eigenvals"]], "eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[98, "sympy.matrices.matrices.MatrixEigen.eigenvects"]], "elementary_col_op() (sympy.matrices.matrices.matrixreductions method)": [[98, "sympy.matrices.matrices.MatrixReductions.elementary_col_op"]], "elementary_row_op() (sympy.matrices.matrices.matrixreductions method)": [[98, "sympy.matrices.matrices.MatrixReductions.elementary_row_op"]], "exp() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.exp"]], "eye() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.eye"]], "gauss_jordan_solve() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.gauss_jordan_solve"]], "hessian() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.hessian"]], "integrate() (sympy.matrices.matrices.matrixcalculus method)": [[98, "sympy.matrices.matrices.MatrixCalculus.integrate"]], "inv() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.inv"]], "inv_mod() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.inv_mod"]], "inverse_adj() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.inverse_ADJ"]], "inverse_block() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.inverse_BLOCK"]], "inverse_ch() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.inverse_CH"]], "inverse_ge() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.inverse_GE"]], "inverse_ldl() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.inverse_LDL"]], "inverse_lu() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.inverse_LU"]], "inverse_qr() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.inverse_QR"]], "irregular() (sympy.matrices.matrices.matrixbase class method)": [[98, "sympy.matrices.matrices.MatrixBase.irregular"]], "is_diagonalizable() (sympy.matrices.matrices.matrixeigen method)": [[98, "sympy.matrices.matrices.MatrixEigen.is_diagonalizable"]], "is_echelon (sympy.matrices.matrices.matrixreductions property)": [[98, "sympy.matrices.matrices.MatrixReductions.is_echelon"]], "is_indefinite (sympy.matrices.matrices.matrixeigen property)": [[98, "sympy.matrices.matrices.MatrixEigen.is_indefinite"]], "is_negative_definite (sympy.matrices.matrices.matrixeigen property)": [[98, "sympy.matrices.matrices.MatrixEigen.is_negative_definite"]], "is_negative_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[98, "sympy.matrices.matrices.MatrixEigen.is_negative_semidefinite"]], "is_nilpotent() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.is_nilpotent"]], "is_positive_definite (sympy.matrices.matrices.matrixeigen property)": [[98, "sympy.matrices.matrices.MatrixEigen.is_positive_definite"]], "is_positive_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[98, "sympy.matrices.matrices.MatrixEigen.is_positive_semidefinite"]], "jacobian() (sympy.matrices.matrices.matrixcalculus method)": [[98, "sympy.matrices.matrices.MatrixCalculus.jacobian"]], "jordan_cell() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.jordan_cell"]], "jordan_form() (sympy.matrices.matrices.matrixeigen method)": [[98, "sympy.matrices.matrices.MatrixEigen.jordan_form"]], "key2bounds() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.key2bounds"]], "key2ij() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.key2ij"]], "left_eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[98, "sympy.matrices.matrices.MatrixEigen.left_eigenvects"]], "limit() (sympy.matrices.matrices.matrixcalculus method)": [[98, "sympy.matrices.matrices.MatrixCalculus.limit"]], "list2numpy() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.list2numpy"]], "log() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.log"]], "lower_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.lower_triangular_solve"]], "matrix2numpy() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.matrix2numpy"]], "matrix_multiply_elementwise() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.matrix_multiply_elementwise"]], "minor() (sympy.matrices.matrices.matrixdeterminant method)": [[98, "sympy.matrices.matrices.MatrixDeterminant.minor"]], "minor_submatrix() (sympy.matrices.matrices.matrixdeterminant method)": [[98, "sympy.matrices.matrices.MatrixDeterminant.minor_submatrix"]], "norm() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.norm"]], "normalized() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.normalized"]], "nullspace() (sympy.matrices.matrices.matrixsubspaces method)": [[98, "sympy.matrices.matrices.MatrixSubspaces.nullspace"]], "ones() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.ones"]], "orthogonalize() (sympy.matrices.matrices.matrixsubspaces class method)": [[98, "sympy.matrices.matrices.MatrixSubspaces.orthogonalize"]], "per() (sympy.matrices.matrices.matrixdeterminant method)": [[98, "sympy.matrices.matrices.MatrixDeterminant.per"]], "pinv() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.pinv"]], "pinv_solve() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.pinv_solve"]], "print_nonzero() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.print_nonzero"]], "project() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.project"]], "randmatrix() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.randMatrix"]], "rank() (sympy.matrices.matrices.matrixreductions method)": [[98, "sympy.matrices.matrices.MatrixReductions.rank"]], "rank_decomposition() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.rank_decomposition"]], "rot_axis1() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.rot_axis1"]], "rot_axis2() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.rot_axis2"]], "rot_axis3() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.rot_axis3"]], "rot_ccw_axis1() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.rot_ccw_axis1"]], "rot_ccw_axis2() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.rot_ccw_axis2"]], "rot_ccw_axis3() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.rot_ccw_axis3"]], "rot_givens() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.rot_givens"]], "rowspace() (sympy.matrices.matrices.matrixsubspaces method)": [[98, "sympy.matrices.matrices.MatrixSubspaces.rowspace"]], "rref() (sympy.matrices.matrices.matrixreductions method)": [[98, "sympy.matrices.matrices.MatrixReductions.rref"]], "singular_value_decomposition() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.singular_value_decomposition"]], "singular_values() (sympy.matrices.matrices.matrixeigen method)": [[98, "sympy.matrices.matrices.MatrixEigen.singular_values"]], "solve() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.solve"]], "solve_least_squares() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.solve_least_squares"]], "strongly_connected_components() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.strongly_connected_components"]], "strongly_connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.strongly_connected_components_decomposition"]], "symarray() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.symarray"]], "sympy.matrices.matrices": [[98, "module-sympy.matrices.matrices"]], "table() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.table"]], "upper_hessenberg_decomposition() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.upper_hessenberg_decomposition"]], "upper_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[98, "sympy.matrices.matrices.MatrixBase.upper_triangular_solve"]], "wronskian() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.wronskian"]], "zeros() (in module sympy.matrices.dense)": [[98, "sympy.matrices.dense.zeros"]], "hermite_normal_form() (in module sympy.matrices.normalforms)": [[99, "sympy.matrices.normalforms.hermite_normal_form"]], "smith_normal_form() (in module sympy.matrices.normalforms)": [[99, "sympy.matrices.normalforms.smith_normal_form"]], "immutablesparsematrix (class in sympy.matrices.immutable)": [[100, "sympy.matrices.immutable.ImmutableSparseMatrix"]], "mutablesparsematrix (class in sympy.matrices.sparse)": [[100, "sympy.matrices.sparse.MutableSparseMatrix"]], "sparsematrix (in module sympy.matrices.sparse)": [[100, "sympy.matrices.sparse.SparseMatrix"]], "sympy.matrices.sparse": [[100, "module-sympy.matrices.sparse"]], "_csrtodok() (in module sympy.matrices.sparsetools)": [[101, "sympy.matrices.sparsetools._csrtodok"]], "_doktocsr() (in module sympy.matrices.sparsetools)": [[101, "sympy.matrices.sparsetools._doktocsr"]], "banded() (in module sympy.matrices.sparsetools)": [[101, "sympy.matrices.sparsetools.banded"]], "sympy.matrices.sparsetools": [[101, "module-sympy.matrices.sparsetools"]], "sieve (class in sympy.ntheory.generate)": [[102, "sympy.ntheory.generate.Sieve"]], "abundance() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.abundance"]], "antidivisor_count() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.antidivisor_count"]], "antidivisors() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.antidivisors"]], "binomial_coefficients() (in module sympy.ntheory.multinomial)": [[102, "sympy.ntheory.multinomial.binomial_coefficients"]], "binomial_coefficients_list() (in module sympy.ntheory.multinomial)": [[102, "sympy.ntheory.multinomial.binomial_coefficients_list"]], "composite() (in module sympy.ntheory.generate)": [[102, "sympy.ntheory.generate.composite"]], "compositepi() (in module sympy.ntheory.generate)": [[102, "sympy.ntheory.generate.compositepi"]], "continued_fraction() (in module sympy.ntheory.continued_fraction)": [[102, "sympy.ntheory.continued_fraction.continued_fraction"]], "continued_fraction_convergents() (in module sympy.ntheory.continued_fraction)": [[102, "sympy.ntheory.continued_fraction.continued_fraction_convergents"]], "continued_fraction_iterator() (in module sympy.ntheory.continued_fraction)": [[102, "sympy.ntheory.continued_fraction.continued_fraction_iterator"]], "continued_fraction_periodic() (in module sympy.ntheory.continued_fraction)": [[102, "sympy.ntheory.continued_fraction.continued_fraction_periodic"]], "continued_fraction_reduce() (in module sympy.ntheory.continued_fraction)": [[102, "sympy.ntheory.continued_fraction.continued_fraction_reduce"]], "core() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.core"]], "count_digits() (in module sympy.ntheory.digits)": [[102, "sympy.ntheory.digits.count_digits"]], "crt() (in module sympy.ntheory.modular)": [[102, "sympy.ntheory.modular.crt"]], "crt1() (in module sympy.ntheory.modular)": [[102, "sympy.ntheory.modular.crt1"]], "crt2() (in module sympy.ntheory.modular)": [[102, "sympy.ntheory.modular.crt2"]], "cycle_length() (in module sympy.ntheory.generate)": [[102, "sympy.ntheory.generate.cycle_length"]], "digits() (in module sympy.ntheory.digits)": [[102, "sympy.ntheory.digits.digits"]], "digits() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.digits"]], "discrete_log() (in module sympy.ntheory.residue_ntheory)": [[102, "sympy.ntheory.residue_ntheory.discrete_log"]], "divisor_count() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.divisor_count"]], "divisor_sigma (class in sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.divisor_sigma"]], "divisors() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.divisors"]], "ecm() (in module sympy.ntheory.ecm)": [[102, "sympy.ntheory.ecm.ecm"]], "egyptian_fraction() (in module sympy.ntheory.egyptian_fraction)": [[102, "sympy.ntheory.egyptian_fraction.egyptian_fraction"]], "extend() (sympy.ntheory.generate.sieve method)": [[102, "sympy.ntheory.generate.Sieve.extend"]], "extend_to_no() (sympy.ntheory.generate.sieve method)": [[102, "sympy.ntheory.generate.Sieve.extend_to_no"]], "factorint() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.factorint"]], "factorrat() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.factorrat"]], "is_abundant() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.is_abundant"]], "is_amicable() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.is_amicable"]], "is_deficient() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.is_deficient"]], "is_euler_pseudoprime() (in module sympy.ntheory.primetest)": [[102, "sympy.ntheory.primetest.is_euler_pseudoprime"]], "is_extra_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[102, "sympy.ntheory.primetest.is_extra_strong_lucas_prp"]], "is_gaussian_prime() (in module sympy.ntheory.primetest)": [[102, "sympy.ntheory.primetest.is_gaussian_prime"]], "is_lucas_prp() (in module sympy.ntheory.primetest)": [[102, "sympy.ntheory.primetest.is_lucas_prp"]], "is_mersenne_prime() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.is_mersenne_prime"]], "is_nthpow_residue() (in module sympy.ntheory.residue_ntheory)": [[102, "sympy.ntheory.residue_ntheory.is_nthpow_residue"]], "is_palindromic() (in module sympy.ntheory.digits)": [[102, "sympy.ntheory.digits.is_palindromic"]], "is_perfect() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.is_perfect"]], "is_primitive_root() (in module sympy.ntheory.residue_ntheory)": [[102, "sympy.ntheory.residue_ntheory.is_primitive_root"]], "is_quad_residue() (in module sympy.ntheory.residue_ntheory)": [[102, "sympy.ntheory.residue_ntheory.is_quad_residue"]], "is_square() (in module sympy.ntheory.primetest)": [[102, "sympy.ntheory.primetest.is_square"]], "is_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[102, "sympy.ntheory.primetest.is_strong_lucas_prp"]], "isprime() (in module sympy.ntheory.primetest)": [[102, "sympy.ntheory.primetest.isprime"]], "jacobi_symbol() (in module sympy.ntheory.residue_ntheory)": [[102, "sympy.ntheory.residue_ntheory.jacobi_symbol"]], "legendre_symbol() (in module sympy.ntheory.residue_ntheory)": [[102, "sympy.ntheory.residue_ntheory.legendre_symbol"]], "mersenne_prime_exponent() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.mersenne_prime_exponent"]], "mobius (class in sympy.ntheory)": [[102, "sympy.ntheory.mobius"]], "mobiusrange() (sympy.ntheory.generate.sieve method)": [[102, "sympy.ntheory.generate.Sieve.mobiusrange"]], "mr() (in module sympy.ntheory.primetest)": [[102, "sympy.ntheory.primetest.mr"]], "multinomial_coefficients() (in module sympy.ntheory.multinomial)": [[102, "sympy.ntheory.multinomial.multinomial_coefficients"]], "multinomial_coefficients_iterator() (in module sympy.ntheory.multinomial)": [[102, "sympy.ntheory.multinomial.multinomial_coefficients_iterator"]], "multiplicity() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.multiplicity"]], "n_order() (in module sympy.ntheory.residue_ntheory)": [[102, "sympy.ntheory.residue_ntheory.n_order"]], "nextprime() (in module sympy.ntheory.generate)": [[102, "sympy.ntheory.generate.nextprime"]], "npartitions() (in module sympy.ntheory.partitions_)": [[102, "sympy.ntheory.partitions_.npartitions"]], "nthroot_mod() (in module sympy.ntheory.residue_ntheory)": [[102, "sympy.ntheory.residue_ntheory.nthroot_mod"]], "perfect_power() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.perfect_power"]], "pi_hex_digits() (in module sympy.ntheory.bbp_pi)": [[102, "sympy.ntheory.bbp_pi.pi_hex_digits"]], "pollard_pm1() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.pollard_pm1"]], "pollard_rho() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.pollard_rho"]], "prevprime() (in module sympy.ntheory.generate)": [[102, "sympy.ntheory.generate.prevprime"]], "prime() (in module sympy.ntheory.generate)": [[102, "sympy.ntheory.generate.prime"]], "primefactors() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.primefactors"]], "primenu (class in sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.primenu"]], "primeomega (class in sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.primeomega"]], "primepi() (in module sympy.ntheory.generate)": [[102, "sympy.ntheory.generate.primepi"]], "primerange() (in module sympy.ntheory.generate)": [[102, "sympy.ntheory.generate.primerange"]], "primerange() (sympy.ntheory.generate.sieve method)": [[102, "sympy.ntheory.generate.Sieve.primerange"]], "primitive_root() (in module sympy.ntheory.residue_ntheory)": [[102, "sympy.ntheory.residue_ntheory.primitive_root"]], "primorial() (in module sympy.ntheory.generate)": [[102, "sympy.ntheory.generate.primorial"]], "proper_divisor_count() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.proper_divisor_count"]], "proper_divisors() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.proper_divisors"]], "qs() (in module sympy.ntheory.qs)": [[102, "sympy.ntheory.qs.qs"]], "quadratic_residues() (in module sympy.ntheory.residue_ntheory)": [[102, "sympy.ntheory.residue_ntheory.quadratic_residues"]], "randprime() (in module sympy.ntheory.generate)": [[102, "sympy.ntheory.generate.randprime"]], "reduced_totient (class in sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.reduced_totient"]], "search() (sympy.ntheory.generate.sieve method)": [[102, "sympy.ntheory.generate.Sieve.search"]], "smoothness() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.smoothness"]], "smoothness_p() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.smoothness_p"]], "solve_congruence() (in module sympy.ntheory.modular)": [[102, "sympy.ntheory.modular.solve_congruence"]], "sqrt_mod() (in module sympy.ntheory.residue_ntheory)": [[102, "sympy.ntheory.residue_ntheory.sqrt_mod"]], "sqrt_mod_iter() (in module sympy.ntheory.residue_ntheory)": [[102, "sympy.ntheory.residue_ntheory.sqrt_mod_iter"]], "symmetric_residue() (in module sympy.ntheory.modular)": [[102, "sympy.ntheory.modular.symmetric_residue"]], "sympy.ntheory.bbp_pi": [[102, "module-sympy.ntheory.bbp_pi"]], "sympy.ntheory.continued_fraction": [[102, "module-sympy.ntheory.continued_fraction"]], "sympy.ntheory.digits": [[102, "module-sympy.ntheory.digits"]], "sympy.ntheory.ecm": [[102, "module-sympy.ntheory.ecm"]], "sympy.ntheory.egyptian_fraction": [[102, "module-sympy.ntheory.egyptian_fraction"]], "sympy.ntheory.factor_": [[102, "module-sympy.ntheory.factor_"]], "sympy.ntheory.generate": [[102, "module-sympy.ntheory.generate"]], "sympy.ntheory.modular": [[102, "module-sympy.ntheory.modular"]], "sympy.ntheory.multinomial": [[102, "module-sympy.ntheory.multinomial"]], "sympy.ntheory.partitions_": [[102, "module-sympy.ntheory.partitions_"]], "sympy.ntheory.primetest": [[102, "module-sympy.ntheory.primetest"]], "sympy.ntheory.qs": [[102, "module-sympy.ntheory.qs"]], "sympy.ntheory.residue_ntheory": [[102, "module-sympy.ntheory.residue_ntheory"]], "totient (class in sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.totient"]], "totientrange() (sympy.ntheory.generate.sieve method)": [[102, "sympy.ntheory.generate.Sieve.totientrange"]], "trailing() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.trailing"]], "udivisor_count() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.udivisor_count"]], "udivisor_sigma (class in sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.udivisor_sigma"]], "udivisors() (in module sympy.ntheory.factor_)": [[102, "sympy.ntheory.factor_.udivisors"]], "latexparsingerror (class in sympy.parsing.latex)": [[104, "sympy.parsing.latex.LaTeXParsingError"]], "sympyexpression (class in sympy.parsing.sym_expr)": [[104, "sympy.parsing.sym_expr.SymPyExpression"]], "auto_number() (in module sympy.parsing.sympy_parser)": [[104, "sympy.parsing.sympy_parser.auto_number"]], "auto_symbol() (in module sympy.parsing.sympy_parser)": [[104, "sympy.parsing.sympy_parser.auto_symbol"]], "convert_to_c() (sympy.parsing.sym_expr.sympyexpression method)": [[104, "sympy.parsing.sym_expr.SymPyExpression.convert_to_c"]], "convert_to_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[104, "sympy.parsing.sym_expr.SymPyExpression.convert_to_expr"]], "convert_to_fortran() (sympy.parsing.sym_expr.sympyexpression method)": [[104, "sympy.parsing.sym_expr.SymPyExpression.convert_to_fortran"]], "convert_to_python() (sympy.parsing.sym_expr.sympyexpression method)": [[104, "sympy.parsing.sym_expr.SymPyExpression.convert_to_python"]], "convert_xor() (in module sympy.parsing.sympy_parser)": [[104, "sympy.parsing.sympy_parser.convert_xor"]], "eval_expr() (in module sympy.parsing.sympy_parser)": [[104, "sympy.parsing.sympy_parser.eval_expr"]], "factorial_notation() (in module sympy.parsing.sympy_parser)": [[104, "sympy.parsing.sympy_parser.factorial_notation"]], "function_exponentiation() (in module sympy.parsing.sympy_parser)": [[104, "sympy.parsing.sympy_parser.function_exponentiation"]], "implicit_application() (in module sympy.parsing.sympy_parser)": [[104, "sympy.parsing.sympy_parser.implicit_application"]], "implicit_multiplication() (in module sympy.parsing.sympy_parser)": [[104, "sympy.parsing.sympy_parser.implicit_multiplication"]], "implicit_multiplication_application() (in module sympy.parsing.sympy_parser)": [[104, "sympy.parsing.sympy_parser.implicit_multiplication_application"]], "lambda_notation() (in module sympy.parsing.sympy_parser)": [[104, "sympy.parsing.sympy_parser.lambda_notation"]], "parse_expr() (in module sympy.parsing.sympy_parser)": [[104, "sympy.parsing.sympy_parser.parse_expr"]], "parse_latex() (in module sympy.parsing.latex)": [[104, "sympy.parsing.latex.parse_latex"]], "parse_mathematica() (in module sympy.parsing.mathematica)": [[104, "sympy.parsing.mathematica.parse_mathematica"]], "parse_maxima() (in module sympy.parsing.maxima)": [[104, "sympy.parsing.maxima.parse_maxima"]], "rationalize() (in module sympy.parsing.sympy_parser)": [[104, "sympy.parsing.sympy_parser.rationalize"]], "repeated_decimals() (in module sympy.parsing.sympy_parser)": [[104, "sympy.parsing.sympy_parser.repeated_decimals"]], "return_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[104, "sympy.parsing.sym_expr.SymPyExpression.return_expr"]], "split_symbols() (in module sympy.parsing.sympy_parser)": [[104, "sympy.parsing.sympy_parser.split_symbols"]], "split_symbols_custom() (in module sympy.parsing.sympy_parser)": [[104, "sympy.parsing.sympy_parser.split_symbols_custom"]], "standard_transformations (in module sympy.parsing.sympy_parser)": [[104, "sympy.parsing.sympy_parser.standard_transformations"]], "stringify_expr() (in module sympy.parsing.sympy_parser)": [[104, "sympy.parsing.sympy_parser.stringify_expr"]], "sympy.parsing": [[104, "module-sympy.parsing"]], "sympy.parsing.sym_expr": [[104, "module-sympy.parsing.sym_expr"]], "beam (class in sympy.physics.continuum_mechanics.beam)": [[105, "sympy.physics.continuum_mechanics.beam.Beam"]], "beam3d (class in sympy.physics.continuum_mechanics.beam)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D"]], "angular_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.angular_deflection"]], "applied_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.applied_loads"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.apply_load"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_load"]], "apply_moment_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_moment_load"]], "apply_support() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.apply_support"]], "area (sympy.physics.continuum_mechanics.beam.beam property)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.area"]], "area (sympy.physics.continuum_mechanics.beam.beam3d property)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.area"]], "axial_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_force"]], "axial_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_stress"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.bending_moment"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.bending_moment"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam property)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.boundary_conditions"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam3d property)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.boundary_conditions"]], "cross_section (sympy.physics.continuum_mechanics.beam.beam property)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.cross_section"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.deflection"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.deflection"]], "draw() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.draw"]], "elastic_modulus (sympy.physics.continuum_mechanics.beam.beam property)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.elastic_modulus"]], "ild_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.ild_moment"]], "ild_reactions (sympy.physics.continuum_mechanics.beam.beam property)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.ild_reactions"]], "ild_shear (sympy.physics.continuum_mechanics.beam.beam property)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.ild_shear"]], "join() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.join"]], "length (sympy.physics.continuum_mechanics.beam.beam property)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.length"]], "load (sympy.physics.continuum_mechanics.beam.beam property)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.load"]], "load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.load_vector"]], "max_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bending_moment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.max_bmoment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bmoment"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.max_deflection"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.max_deflection"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.max_shear_force"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.max_shear_force"]], "moment_load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.moment_load_vector"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.plot_bending_moment"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_bending_moment"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.plot_deflection"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_deflection"]], "plot_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_moment"]], "plot_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_reactions"]], "plot_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_shear"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.plot_loading_results"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_loading_results"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_force"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_force"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_stress"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_stress"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.plot_slope"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_slope"]], "point_cflexure() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.point_cflexure"]], "polar_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.polar_moment"]], "reaction_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.remove_load"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.second_moment"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam3d property)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.second_moment"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.shear_force"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_force"]], "shear_modulus (sympy.physics.continuum_mechanics.beam.beam3d property)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_modulus"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.shear_stress"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_stress"]], "slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.slope"]], "slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.slope"]], "solve_for_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_moment"]], "solve_for_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_reactions"]], "solve_for_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_shear"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_reaction_loads"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_reaction_loads"]], "solve_for_torsion() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_torsion"]], "sympy.physics.continuum_mechanics.beam": [[105, "module-sympy.physics.continuum_mechanics.beam"]], "torsional_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[105, "sympy.physics.continuum_mechanics.beam.Beam3D.torsional_moment"]], "variable (sympy.physics.continuum_mechanics.beam.beam property)": [[105, "sympy.physics.continuum_mechanics.beam.Beam.variable"]], "truss (class in sympy.physics.continuum_mechanics.truss)": [[108, "sympy.physics.continuum_mechanics.truss.Truss"]], "add_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[108, "sympy.physics.continuum_mechanics.truss.Truss.add_member"]], "add_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[108, "sympy.physics.continuum_mechanics.truss.Truss.add_node"]], "apply_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[108, "sympy.physics.continuum_mechanics.truss.Truss.apply_load"]], "apply_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[108, "sympy.physics.continuum_mechanics.truss.Truss.apply_support"]], "change_member_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[108, "sympy.physics.continuum_mechanics.truss.Truss.change_member_label"]], "change_node_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[108, "sympy.physics.continuum_mechanics.truss.Truss.change_node_label"]], "internal_forces (sympy.physics.continuum_mechanics.truss.truss property)": [[108, "sympy.physics.continuum_mechanics.truss.Truss.internal_forces"]], "loads (sympy.physics.continuum_mechanics.truss.truss property)": [[108, "sympy.physics.continuum_mechanics.truss.Truss.loads"]], "member_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[108, "sympy.physics.continuum_mechanics.truss.Truss.member_labels"]], "members (sympy.physics.continuum_mechanics.truss.truss property)": [[108, "sympy.physics.continuum_mechanics.truss.Truss.members"]], "node_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[108, "sympy.physics.continuum_mechanics.truss.Truss.node_labels"]], "node_positions (sympy.physics.continuum_mechanics.truss.truss property)": [[108, "sympy.physics.continuum_mechanics.truss.Truss.node_positions"]], "nodes (sympy.physics.continuum_mechanics.truss.truss property)": [[108, "sympy.physics.continuum_mechanics.truss.Truss.nodes"]], "reaction_loads (sympy.physics.continuum_mechanics.truss.truss property)": [[108, "sympy.physics.continuum_mechanics.truss.Truss.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[108, "sympy.physics.continuum_mechanics.truss.Truss.remove_load"]], "remove_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[108, "sympy.physics.continuum_mechanics.truss.Truss.remove_member"]], "remove_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[108, "sympy.physics.continuum_mechanics.truss.Truss.remove_node"]], "remove_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[108, "sympy.physics.continuum_mechanics.truss.Truss.remove_support"]], "solve() (sympy.physics.continuum_mechanics.truss.truss method)": [[108, "sympy.physics.continuum_mechanics.truss.Truss.solve"]], "supports (sympy.physics.continuum_mechanics.truss.truss property)": [[108, "sympy.physics.continuum_mechanics.truss.Truss.supports"]], "sympy.physics.continuum_mechanics.truss": [[108, "module-sympy.physics.continuum_mechanics.truss"]], "bode_magnitude_numerical_data() (sympy.physics.control.control_plots method)": [[110, "sympy.physics.control.control_plots.bode_magnitude_numerical_data"]], "bode_magnitude_plot() (sympy.physics.control.control_plots method)": [[110, "sympy.physics.control.control_plots.bode_magnitude_plot"]], "bode_phase_numerical_data() (sympy.physics.control.control_plots method)": [[110, "sympy.physics.control.control_plots.bode_phase_numerical_data"]], "bode_phase_plot() (sympy.physics.control.control_plots method)": [[110, "sympy.physics.control.control_plots.bode_phase_plot"]], "bode_plot() (sympy.physics.control.control_plots method)": [[110, "sympy.physics.control.control_plots.bode_plot"]], "impulse_response_numerical_data() (sympy.physics.control.control_plots method)": [[110, "sympy.physics.control.control_plots.impulse_response_numerical_data"]], "impulse_response_plot() (sympy.physics.control.control_plots method)": [[110, "sympy.physics.control.control_plots.impulse_response_plot"]], "pole_zero_numerical_data() (sympy.physics.control.control_plots method)": [[110, "sympy.physics.control.control_plots.pole_zero_numerical_data"]], "pole_zero_plot() (sympy.physics.control.control_plots method)": [[110, "sympy.physics.control.control_plots.pole_zero_plot"]], "ramp_response_numerical_data() (sympy.physics.control.control_plots method)": [[110, "sympy.physics.control.control_plots.ramp_response_numerical_data"]], "ramp_response_plot() (sympy.physics.control.control_plots method)": [[110, "sympy.physics.control.control_plots.ramp_response_plot"]], "step_response_numerical_data() (sympy.physics.control.control_plots method)": [[110, "sympy.physics.control.control_plots.step_response_numerical_data"]], "step_response_plot() (sympy.physics.control.control_plots method)": [[110, "sympy.physics.control.control_plots.step_response_plot"]], "sympy.physics.control": [[111, "module-sympy.physics.control"]], "feedback (class in sympy.physics.control.lti)": [[112, "sympy.physics.control.lti.Feedback"]], "mimofeedback (class in sympy.physics.control.lti)": [[112, "sympy.physics.control.lti.MIMOFeedback"]], "mimoparallel (class in sympy.physics.control.lti)": [[112, "sympy.physics.control.lti.MIMOParallel"]], "mimoseries (class in sympy.physics.control.lti)": [[112, "sympy.physics.control.lti.MIMOSeries"]], "parallel (class in sympy.physics.control.lti)": [[112, "sympy.physics.control.lti.Parallel"]], "series (class in sympy.physics.control.lti)": [[112, "sympy.physics.control.lti.Series"]], "transferfunction (class in sympy.physics.control.lti)": [[112, "sympy.physics.control.lti.TransferFunction"]], "transferfunctionmatrix (class in sympy.physics.control.lti)": [[112, "sympy.physics.control.lti.TransferFunctionMatrix"]], "backward_diff() (in module sympy.physics.control.lti)": [[112, "sympy.physics.control.lti.backward_diff"]], "bilinear() (in module sympy.physics.control.lti)": [[112, "sympy.physics.control.lti.bilinear"]], "dc_gain() (sympy.physics.control.lti.transferfunction method)": [[112, "sympy.physics.control.lti.TransferFunction.dc_gain"]], "den (sympy.physics.control.lti.transferfunction property)": [[112, "sympy.physics.control.lti.TransferFunction.den"]], "doit() (sympy.physics.control.lti.feedback method)": [[112, "sympy.physics.control.lti.Feedback.doit"]], "doit() (sympy.physics.control.lti.mimofeedback method)": [[112, "sympy.physics.control.lti.MIMOFeedback.doit"]], "doit() (sympy.physics.control.lti.mimoparallel method)": [[112, "sympy.physics.control.lti.MIMOParallel.doit"]], "doit() (sympy.physics.control.lti.mimoseries method)": [[112, "sympy.physics.control.lti.MIMOSeries.doit"]], "doit() (sympy.physics.control.lti.parallel method)": [[112, "sympy.physics.control.lti.Parallel.doit"]], "doit() (sympy.physics.control.lti.series method)": [[112, "sympy.physics.control.lti.Series.doit"]], "elem_poles() (sympy.physics.control.lti.transferfunctionmatrix method)": [[112, "sympy.physics.control.lti.TransferFunctionMatrix.elem_poles"]], "elem_zeros() (sympy.physics.control.lti.transferfunctionmatrix method)": [[112, "sympy.physics.control.lti.TransferFunctionMatrix.elem_zeros"]], "expand() (sympy.physics.control.lti.transferfunction method)": [[112, "sympy.physics.control.lti.TransferFunction.expand"]], "expand() (sympy.physics.control.lti.transferfunctionmatrix method)": [[112, "sympy.physics.control.lti.TransferFunctionMatrix.expand"]], "from_matrix() (sympy.physics.control.lti.transferfunctionmatrix class method)": [[112, "sympy.physics.control.lti.TransferFunctionMatrix.from_Matrix"]], "from_rational_expression() (sympy.physics.control.lti.transferfunction class method)": [[112, "sympy.physics.control.lti.TransferFunction.from_rational_expression"]], "is_biproper (sympy.physics.control.lti.parallel property)": [[112, "sympy.physics.control.lti.Parallel.is_biproper"]], "is_biproper (sympy.physics.control.lti.series property)": [[112, "sympy.physics.control.lti.Series.is_biproper"]], "is_biproper (sympy.physics.control.lti.transferfunction property)": [[112, "sympy.physics.control.lti.TransferFunction.is_biproper"]], "is_proper (sympy.physics.control.lti.parallel property)": [[112, "sympy.physics.control.lti.Parallel.is_proper"]], "is_proper (sympy.physics.control.lti.series property)": [[112, "sympy.physics.control.lti.Series.is_proper"]], "is_proper (sympy.physics.control.lti.transferfunction property)": [[112, "sympy.physics.control.lti.TransferFunction.is_proper"]], "is_stable() (sympy.physics.control.lti.transferfunction method)": [[112, "sympy.physics.control.lti.TransferFunction.is_stable"]], "is_strictly_proper (sympy.physics.control.lti.parallel property)": [[112, "sympy.physics.control.lti.Parallel.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.series property)": [[112, "sympy.physics.control.lti.Series.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.transferfunction property)": [[112, "sympy.physics.control.lti.TransferFunction.is_strictly_proper"]], "num (sympy.physics.control.lti.transferfunction property)": [[112, "sympy.physics.control.lti.TransferFunction.num"]], "num_inputs (sympy.physics.control.lti.mimoparallel property)": [[112, "sympy.physics.control.lti.MIMOParallel.num_inputs"]], "num_inputs (sympy.physics.control.lti.mimoseries property)": [[112, "sympy.physics.control.lti.MIMOSeries.num_inputs"]], "num_inputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[112, "sympy.physics.control.lti.TransferFunctionMatrix.num_inputs"]], "num_outputs (sympy.physics.control.lti.mimoparallel property)": [[112, "sympy.physics.control.lti.MIMOParallel.num_outputs"]], "num_outputs (sympy.physics.control.lti.mimoseries property)": [[112, "sympy.physics.control.lti.MIMOSeries.num_outputs"]], "num_outputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[112, "sympy.physics.control.lti.TransferFunctionMatrix.num_outputs"]], "poles() (sympy.physics.control.lti.transferfunction method)": [[112, "sympy.physics.control.lti.TransferFunction.poles"]], "sensitivity (sympy.physics.control.lti.feedback property)": [[112, "sympy.physics.control.lti.Feedback.sensitivity"]], "sensitivity (sympy.physics.control.lti.mimofeedback property)": [[112, "sympy.physics.control.lti.MIMOFeedback.sensitivity"]], "shape (sympy.physics.control.lti.mimoparallel property)": [[112, "sympy.physics.control.lti.MIMOParallel.shape"]], "shape (sympy.physics.control.lti.mimoseries property)": [[112, "sympy.physics.control.lti.MIMOSeries.shape"]], "shape (sympy.physics.control.lti.transferfunctionmatrix property)": [[112, "sympy.physics.control.lti.TransferFunctionMatrix.shape"]], "sign (sympy.physics.control.lti.feedback property)": [[112, "sympy.physics.control.lti.Feedback.sign"]], "sign (sympy.physics.control.lti.mimofeedback property)": [[112, "sympy.physics.control.lti.MIMOFeedback.sign"]], "sympy.physics.control.lti": [[112, "module-sympy.physics.control.lti"]], "sys1 (sympy.physics.control.lti.feedback property)": [[112, "sympy.physics.control.lti.Feedback.sys1"]], "sys1 (sympy.physics.control.lti.mimofeedback property)": [[112, "sympy.physics.control.lti.MIMOFeedback.sys1"]], "sys2 (sympy.physics.control.lti.feedback property)": [[112, "sympy.physics.control.lti.Feedback.sys2"]], "sys2 (sympy.physics.control.lti.mimofeedback property)": [[112, "sympy.physics.control.lti.MIMOFeedback.sys2"]], "to_expr() (sympy.physics.control.lti.parallel method)": [[112, "sympy.physics.control.lti.Parallel.to_expr"]], "to_expr() (sympy.physics.control.lti.series method)": [[112, "sympy.physics.control.lti.Series.to_expr"]], "to_expr() (sympy.physics.control.lti.transferfunction method)": [[112, "sympy.physics.control.lti.TransferFunction.to_expr"]], "transpose() (sympy.physics.control.lti.transferfunctionmatrix method)": [[112, "sympy.physics.control.lti.TransferFunctionMatrix.transpose"]], "var (sympy.physics.control.lti.feedback property)": [[112, "sympy.physics.control.lti.Feedback.var"]], "var (sympy.physics.control.lti.mimofeedback property)": [[112, "sympy.physics.control.lti.MIMOFeedback.var"]], "var (sympy.physics.control.lti.mimoparallel property)": [[112, "sympy.physics.control.lti.MIMOParallel.var"]], "var (sympy.physics.control.lti.mimoseries property)": [[112, "sympy.physics.control.lti.MIMOSeries.var"]], "var (sympy.physics.control.lti.parallel property)": [[112, "sympy.physics.control.lti.Parallel.var"]], "var (sympy.physics.control.lti.series property)": [[112, "sympy.physics.control.lti.Series.var"]], "var (sympy.physics.control.lti.transferfunction property)": [[112, "sympy.physics.control.lti.TransferFunction.var"]], "var (sympy.physics.control.lti.transferfunctionmatrix property)": [[112, "sympy.physics.control.lti.TransferFunctionMatrix.var"]], "zeros() (sympy.physics.control.lti.transferfunction method)": [[112, "sympy.physics.control.lti.TransferFunction.zeros"]], "extract_type_tens() (in module sympy.physics.hep.gamma_matrices)": [[113, "sympy.physics.hep.gamma_matrices.extract_type_tens"]], "gamma_trace() (in module sympy.physics.hep.gamma_matrices)": [[113, "sympy.physics.hep.gamma_matrices.gamma_trace"]], "kahane_simplify() (in module sympy.physics.hep.gamma_matrices)": [[113, "sympy.physics.hep.gamma_matrices.kahane_simplify"]], "simplify_gpgp() (in module sympy.physics.hep.gamma_matrices)": [[113, "sympy.physics.hep.gamma_matrices.simplify_gpgp"]], "sympy.physics.hep.gamma_matrices": [[113, "module-sympy.physics.hep.gamma_matrices"]], "e_nl() (in module sympy.physics.hydrogen)": [[114, "sympy.physics.hydrogen.E_nl"]], "e_nl_dirac() (in module sympy.physics.hydrogen)": [[114, "sympy.physics.hydrogen.E_nl_dirac"]], "psi_nlm() (in module sympy.physics.hydrogen)": [[114, "sympy.physics.hydrogen.Psi_nlm"]], "r_nl() (in module sympy.physics.hydrogen)": [[114, "sympy.physics.hydrogen.R_nl"]], "sympy.physics.hydrogen": [[114, "module-sympy.physics.hydrogen"]], "mdft() (in module sympy.physics.matrices)": [[115, "sympy.physics.matrices.mdft"]], "mgamma() (in module sympy.physics.matrices)": [[115, "sympy.physics.matrices.mgamma"]], "msigma() (in module sympy.physics.matrices)": [[115, "sympy.physics.matrices.msigma"]], "pat_matrix() (in module sympy.physics.matrices)": [[115, "sympy.physics.matrices.pat_matrix"]], "sympy.physics.matrices": [[115, "module-sympy.physics.matrices"]], "body (class in sympy.physics.mechanics.body)": [[117, "sympy.physics.mechanics.body.Body"]], "ang_vel_in() (sympy.physics.mechanics.body.body method)": [[117, "sympy.physics.mechanics.body.Body.ang_vel_in"]], "apply_force() (sympy.physics.mechanics.body.body method)": [[117, "sympy.physics.mechanics.body.Body.apply_force"]], "apply_torque() (sympy.physics.mechanics.body.body method)": [[117, "sympy.physics.mechanics.body.Body.apply_torque"]], "clear_loads() (sympy.physics.mechanics.body.body method)": [[117, "sympy.physics.mechanics.body.Body.clear_loads"]], "dcm() (sympy.physics.mechanics.body.body method)": [[117, "sympy.physics.mechanics.body.Body.dcm"]], "inertia (sympy.physics.mechanics.body.body property)": [[117, "sympy.physics.mechanics.body.Body.inertia"]], "kinetic_energy() (sympy.physics.mechanics.body.body method)": [[117, "sympy.physics.mechanics.body.Body.kinetic_energy"]], "masscenter_vel() (sympy.physics.mechanics.body.body method)": [[117, "sympy.physics.mechanics.body.Body.masscenter_vel"]], "parallel_axis() (sympy.physics.mechanics.body.body method)": [[117, "sympy.physics.mechanics.body.Body.parallel_axis"]], "remove_load() (sympy.physics.mechanics.body.body method)": [[117, "sympy.physics.mechanics.body.Body.remove_load"]], "sympy.physics.mechanics.body": [[117, "module-sympy.physics.mechanics.body"]], "x (sympy.physics.mechanics.body.body property)": [[117, "sympy.physics.mechanics.body.Body.x"]], "y (sympy.physics.mechanics.body.body property)": [[117, "sympy.physics.mechanics.body.Body.y"]], "z (sympy.physics.mechanics.body.body property)": [[117, "sympy.physics.mechanics.body.Body.z"]], "find_dynamicsymbols() (in module sympy.physics.mechanics)": [[118, "sympy.physics.mechanics.find_dynamicsymbols"]], "msubs() (in module sympy.physics.mechanics)": [[118, "sympy.physics.mechanics.msubs"]], "cylindricaljoint (class in sympy.physics.mechanics.joint)": [[120, "sympy.physics.mechanics.joint.CylindricalJoint"]], "joint (class in sympy.physics.mechanics.joint)": [[120, "sympy.physics.mechanics.joint.Joint"]], "jointsmethod (class in sympy.physics.mechanics.jointsmethod)": [[120, "sympy.physics.mechanics.jointsmethod.JointsMethod"]], "pinjoint (class in sympy.physics.mechanics.joint)": [[120, "sympy.physics.mechanics.joint.PinJoint"]], "planarjoint (class in sympy.physics.mechanics.joint)": [[120, "sympy.physics.mechanics.joint.PlanarJoint"]], "prismaticjoint (class in sympy.physics.mechanics.joint)": [[120, "sympy.physics.mechanics.joint.PrismaticJoint"]], "sphericaljoint (class in sympy.physics.mechanics.joint)": [[120, "sympy.physics.mechanics.joint.SphericalJoint"]], "weldjoint (class in sympy.physics.mechanics.joint)": [[120, "sympy.physics.mechanics.joint.WeldJoint"]], "bodies (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[120, "sympy.physics.mechanics.jointsmethod.JointsMethod.bodies"]], "child (sympy.physics.mechanics.joint.joint property)": [[120, "sympy.physics.mechanics.joint.Joint.child"]], "child_axis (sympy.physics.mechanics.joint.joint property)": [[120, "sympy.physics.mechanics.joint.Joint.child_axis"]], "child_point (sympy.physics.mechanics.joint.joint property)": [[120, "sympy.physics.mechanics.joint.Joint.child_point"]], "coordinates (sympy.physics.mechanics.joint.joint property)": [[120, "sympy.physics.mechanics.joint.Joint.coordinates"]], "forcing (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[120, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing"]], "forcing_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[120, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing_full"]], "form_eoms() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[120, "sympy.physics.mechanics.jointsmethod.JointsMethod.form_eoms"]], "joint_axis (sympy.physics.mechanics.joint.cylindricaljoint property)": [[120, "sympy.physics.mechanics.joint.CylindricalJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.pinjoint property)": [[120, "sympy.physics.mechanics.joint.PinJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.prismaticjoint property)": [[120, "sympy.physics.mechanics.joint.PrismaticJoint.joint_axis"]], "kdes (sympy.physics.mechanics.joint.joint property)": [[120, "sympy.physics.mechanics.joint.Joint.kdes"]], "kdes (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[120, "sympy.physics.mechanics.jointsmethod.JointsMethod.kdes"]], "loads (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[120, "sympy.physics.mechanics.jointsmethod.JointsMethod.loads"]], "mass_matrix (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[120, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[120, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix_full"]], "method (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[120, "sympy.physics.mechanics.jointsmethod.JointsMethod.method"]], "name (sympy.physics.mechanics.joint.joint property)": [[120, "sympy.physics.mechanics.joint.Joint.name"]], "parent (sympy.physics.mechanics.joint.joint property)": [[120, "sympy.physics.mechanics.joint.Joint.parent"]], "parent_axis (sympy.physics.mechanics.joint.joint property)": [[120, "sympy.physics.mechanics.joint.Joint.parent_axis"]], "parent_point (sympy.physics.mechanics.joint.joint property)": [[120, "sympy.physics.mechanics.joint.Joint.parent_point"]], "planar_coordinates (sympy.physics.mechanics.joint.planarjoint property)": [[120, "sympy.physics.mechanics.joint.PlanarJoint.planar_coordinates"]], "planar_speeds (sympy.physics.mechanics.joint.planarjoint property)": [[120, "sympy.physics.mechanics.joint.PlanarJoint.planar_speeds"]], "planar_vectors (sympy.physics.mechanics.joint.planarjoint property)": [[120, "sympy.physics.mechanics.joint.PlanarJoint.planar_vectors"]], "q (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[120, "sympy.physics.mechanics.jointsmethod.JointsMethod.q"]], "rhs() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[120, "sympy.physics.mechanics.jointsmethod.JointsMethod.rhs"]], "rotation_axis (sympy.physics.mechanics.joint.planarjoint property)": [[120, "sympy.physics.mechanics.joint.PlanarJoint.rotation_axis"]], "rotation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[120, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_coordinate"]], "rotation_coordinate (sympy.physics.mechanics.joint.planarjoint property)": [[120, "sympy.physics.mechanics.joint.PlanarJoint.rotation_coordinate"]], "rotation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[120, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_speed"]], "rotation_speed (sympy.physics.mechanics.joint.planarjoint property)": [[120, "sympy.physics.mechanics.joint.PlanarJoint.rotation_speed"]], "speeds (sympy.physics.mechanics.joint.joint property)": [[120, "sympy.physics.mechanics.joint.Joint.speeds"]], "sympy.physics.mechanics.joint": [[120, "module-sympy.physics.mechanics.joint"]], "sympy.physics.mechanics.jointsmethod": [[120, "module-sympy.physics.mechanics.jointsmethod"]], "translation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[120, "sympy.physics.mechanics.joint.CylindricalJoint.translation_coordinate"]], "translation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[120, "sympy.physics.mechanics.joint.CylindricalJoint.translation_speed"]], "u (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[120, "sympy.physics.mechanics.jointsmethod.JointsMethod.u"]], "kanesmethod (class in sympy.physics.mechanics.kane)": [[121, "sympy.physics.mechanics.kane.KanesMethod"]], "lagrangesmethod (class in sympy.physics.mechanics.lagrange)": [[121, "sympy.physics.mechanics.lagrange.LagrangesMethod"]], "auxiliary_eqs (sympy.physics.mechanics.kane.kanesmethod property)": [[121, "sympy.physics.mechanics.kane.KanesMethod.auxiliary_eqs"]], "forcing (sympy.physics.mechanics.kane.kanesmethod property)": [[121, "sympy.physics.mechanics.kane.KanesMethod.forcing"]], "forcing (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[121, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing"]], "forcing_full (sympy.physics.mechanics.kane.kanesmethod property)": [[121, "sympy.physics.mechanics.kane.KanesMethod.forcing_full"]], "forcing_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[121, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing_full"]], "forcing_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[121, "sympy.physics.mechanics.kane.KanesMethod.forcing_kin"]], "form_lagranges_equations() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[121, "sympy.physics.mechanics.lagrange.LagrangesMethod.form_lagranges_equations"]], "kanes_equations() (sympy.physics.mechanics.kane.kanesmethod method)": [[121, "sympy.physics.mechanics.kane.KanesMethod.kanes_equations"]], "kindiffdict() (sympy.physics.mechanics.kane.kanesmethod method)": [[121, "sympy.physics.mechanics.kane.KanesMethod.kindiffdict"]], "linearize() (sympy.physics.mechanics.kane.kanesmethod method)": [[121, "sympy.physics.mechanics.kane.KanesMethod.linearize"]], "linearize() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[121, "sympy.physics.mechanics.lagrange.LagrangesMethod.linearize"]], "mass_matrix (sympy.physics.mechanics.kane.kanesmethod property)": [[121, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix"]], "mass_matrix (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[121, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.kane.kanesmethod property)": [[121, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_full"]], "mass_matrix_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[121, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix_full"]], "mass_matrix_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[121, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_kin"]], "rhs() (sympy.physics.mechanics.kane.kanesmethod method)": [[121, "sympy.physics.mechanics.kane.KanesMethod.rhs"]], "rhs() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[121, "sympy.physics.mechanics.lagrange.LagrangesMethod.rhs"]], "solve_multipliers() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[121, "sympy.physics.mechanics.lagrange.LagrangesMethod.solve_multipliers"]], "sympy.physics.mechanics.kane": [[121, "module-sympy.physics.mechanics.kane"]], "sympy.physics.mechanics.lagrange": [[121, "module-sympy.physics.mechanics.lagrange"]], "to_linearizer() (sympy.physics.mechanics.kane.kanesmethod method)": [[121, "sympy.physics.mechanics.kane.KanesMethod.to_linearizer"]], "to_linearizer() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[121, "sympy.physics.mechanics.lagrange.LagrangesMethod.to_linearizer"]], "linearizer (class in sympy.physics.mechanics.linearize)": [[122, "sympy.physics.mechanics.linearize.Linearizer"]], "linearize() (sympy.physics.mechanics.linearize.linearizer method)": [[122, "sympy.physics.mechanics.linearize.Linearizer.linearize"]], "sympy.physics.mechanics.linearize": [[122, "module-sympy.physics.mechanics.linearize"]], "lagrangian() (in module sympy.physics.mechanics.functions)": [[123, "sympy.physics.mechanics.functions.Lagrangian"]], "particle (class in sympy.physics.mechanics.particle)": [[123, "sympy.physics.mechanics.particle.Particle"]], "rigidbody (class in sympy.physics.mechanics.rigidbody)": [[123, "sympy.physics.mechanics.rigidbody.RigidBody"]], "angular_momentum() (in module sympy.physics.mechanics.functions)": [[123, "sympy.physics.mechanics.functions.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.particle.particle method)": [[123, "sympy.physics.mechanics.particle.Particle.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[123, "sympy.physics.mechanics.rigidbody.RigidBody.angular_momentum"]], "central_inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[123, "sympy.physics.mechanics.rigidbody.RigidBody.central_inertia"]], "frame (sympy.physics.mechanics.rigidbody.rigidbody property)": [[123, "sympy.physics.mechanics.rigidbody.RigidBody.frame"]], "inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[123, "sympy.physics.mechanics.rigidbody.RigidBody.inertia"]], "inertia() (in module sympy.physics.mechanics.functions)": [[123, "sympy.physics.mechanics.functions.inertia"]], "inertia_of_point_mass() (in module sympy.physics.mechanics.functions)": [[123, "sympy.physics.mechanics.functions.inertia_of_point_mass"]], "kinetic_energy() (in module sympy.physics.mechanics.functions)": [[123, "sympy.physics.mechanics.functions.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.particle.particle method)": [[123, "sympy.physics.mechanics.particle.Particle.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[123, "sympy.physics.mechanics.rigidbody.RigidBody.kinetic_energy"]], "linear_momentum() (in module sympy.physics.mechanics.functions)": [[123, "sympy.physics.mechanics.functions.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.particle.particle method)": [[123, "sympy.physics.mechanics.particle.Particle.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[123, "sympy.physics.mechanics.rigidbody.RigidBody.linear_momentum"]], "mass (sympy.physics.mechanics.particle.particle property)": [[123, "sympy.physics.mechanics.particle.Particle.mass"]], "mass (sympy.physics.mechanics.rigidbody.rigidbody property)": [[123, "sympy.physics.mechanics.rigidbody.RigidBody.mass"]], "masscenter (sympy.physics.mechanics.rigidbody.rigidbody property)": [[123, "sympy.physics.mechanics.rigidbody.RigidBody.masscenter"]], "parallel_axis() (sympy.physics.mechanics.particle.particle method)": [[123, "sympy.physics.mechanics.particle.Particle.parallel_axis"]], "parallel_axis() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[123, "sympy.physics.mechanics.rigidbody.RigidBody.parallel_axis"]], "point (sympy.physics.mechanics.particle.particle property)": [[123, "sympy.physics.mechanics.particle.Particle.point"]], "potential_energy (sympy.physics.mechanics.particle.particle property)": [[123, "sympy.physics.mechanics.particle.Particle.potential_energy"]], "potential_energy (sympy.physics.mechanics.rigidbody.rigidbody property)": [[123, "sympy.physics.mechanics.rigidbody.RigidBody.potential_energy"]], "potential_energy() (in module sympy.physics.mechanics.functions)": [[123, "sympy.physics.mechanics.functions.potential_energy"]], "sympy.physics.mechanics.particle": [[123, "module-sympy.physics.mechanics.particle"]], "sympy.physics.mechanics.rigidbody": [[123, "module-sympy.physics.mechanics.rigidbody"]], "symbolicsystem (class in sympy.physics.mechanics.system)": [[125, "sympy.physics.mechanics.system.SymbolicSystem"]], "alg_con (sympy.physics.mechanics.system.symbolicsystem property)": [[125, "sympy.physics.mechanics.system.SymbolicSystem.alg_con"]], "bodies (sympy.physics.mechanics.system.symbolicsystem property)": [[125, "sympy.physics.mechanics.system.SymbolicSystem.bodies"]], "comb_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[125, "sympy.physics.mechanics.system.SymbolicSystem.comb_explicit_rhs"]], "comb_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[125, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_mat"]], "comb_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[125, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_rhs"]], "compute_explicit_form() (sympy.physics.mechanics.system.symbolicsystem method)": [[125, "sympy.physics.mechanics.system.SymbolicSystem.compute_explicit_form"]], "constant_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[125, "sympy.physics.mechanics.system.SymbolicSystem.constant_symbols"]], "coordinates (sympy.physics.mechanics.system.symbolicsystem property)": [[125, "sympy.physics.mechanics.system.SymbolicSystem.coordinates"]], "dyn_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[125, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_mat"]], "dyn_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[125, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_rhs"]], "dynamic_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[125, "sympy.physics.mechanics.system.SymbolicSystem.dynamic_symbols"]], "kin_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[125, "sympy.physics.mechanics.system.SymbolicSystem.kin_explicit_rhs"]], "loads (sympy.physics.mechanics.system.symbolicsystem property)": [[125, "sympy.physics.mechanics.system.SymbolicSystem.loads"]], "speeds (sympy.physics.mechanics.system.symbolicsystem property)": [[125, "sympy.physics.mechanics.system.SymbolicSystem.speeds"]], "states (sympy.physics.mechanics.system.symbolicsystem property)": [[125, "sympy.physics.mechanics.system.SymbolicSystem.states"]], "sympy.physics.mechanics.system": [[125, "module-sympy.physics.mechanics.system"]], "sympy.physics.mechanics": [[136, "module-sympy.physics.mechanics"]], "a (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[145, "sympy.physics.optics.gaussopt.RayTransferMatrix.A"]], "b (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[145, "sympy.physics.optics.gaussopt.RayTransferMatrix.B"]], "beamparameter (class in sympy.physics.optics.gaussopt)": [[145, "sympy.physics.optics.gaussopt.BeamParameter"]], "c (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[145, "sympy.physics.optics.gaussopt.RayTransferMatrix.C"]], "curvedmirror (class in sympy.physics.optics.gaussopt)": [[145, "sympy.physics.optics.gaussopt.CurvedMirror"]], "curvedrefraction (class in sympy.physics.optics.gaussopt)": [[145, "sympy.physics.optics.gaussopt.CurvedRefraction"]], "d (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[145, "sympy.physics.optics.gaussopt.RayTransferMatrix.D"]], "flatmirror (class in sympy.physics.optics.gaussopt)": [[145, "sympy.physics.optics.gaussopt.FlatMirror"]], "flatrefraction (class in sympy.physics.optics.gaussopt)": [[145, "sympy.physics.optics.gaussopt.FlatRefraction"]], "freespace (class in sympy.physics.optics.gaussopt)": [[145, "sympy.physics.optics.gaussopt.FreeSpace"]], "geometricray (class in sympy.physics.optics.gaussopt)": [[145, "sympy.physics.optics.gaussopt.GeometricRay"]], "raytransfermatrix (class in sympy.physics.optics.gaussopt)": [[145, "sympy.physics.optics.gaussopt.RayTransferMatrix"]], "thinlens (class in sympy.physics.optics.gaussopt)": [[145, "sympy.physics.optics.gaussopt.ThinLens"]], "angle (sympy.physics.optics.gaussopt.geometricray property)": [[145, "sympy.physics.optics.gaussopt.GeometricRay.angle"]], "conjugate_gauss_beams() (in module sympy.physics.optics.gaussopt)": [[145, "sympy.physics.optics.gaussopt.conjugate_gauss_beams"]], "divergence (sympy.physics.optics.gaussopt.beamparameter property)": [[145, "sympy.physics.optics.gaussopt.BeamParameter.divergence"]], "gaussian_conj() (in module sympy.physics.optics.gaussopt)": [[145, "sympy.physics.optics.gaussopt.gaussian_conj"]], "geometric_conj_ab() (in module sympy.physics.optics.gaussopt)": [[145, "sympy.physics.optics.gaussopt.geometric_conj_ab"]], "geometric_conj_af() (in module sympy.physics.optics.gaussopt)": [[145, "sympy.physics.optics.gaussopt.geometric_conj_af"]], "geometric_conj_bf() (in module sympy.physics.optics.gaussopt)": [[145, "sympy.physics.optics.gaussopt.geometric_conj_bf"]], "gouy (sympy.physics.optics.gaussopt.beamparameter property)": [[145, "sympy.physics.optics.gaussopt.BeamParameter.gouy"]], "height (sympy.physics.optics.gaussopt.geometricray property)": [[145, "sympy.physics.optics.gaussopt.GeometricRay.height"]], "q (sympy.physics.optics.gaussopt.beamparameter property)": [[145, "sympy.physics.optics.gaussopt.BeamParameter.q"]], "radius (sympy.physics.optics.gaussopt.beamparameter property)": [[145, "sympy.physics.optics.gaussopt.BeamParameter.radius"]], "rayleigh2waist() (in module sympy.physics.optics.gaussopt)": [[145, "sympy.physics.optics.gaussopt.rayleigh2waist"]], "sympy.physics.optics.gaussopt": [[145, "module-sympy.physics.optics.gaussopt"]], "w (sympy.physics.optics.gaussopt.beamparameter property)": [[145, "sympy.physics.optics.gaussopt.BeamParameter.w"]], "w_0 (sympy.physics.optics.gaussopt.beamparameter property)": [[145, "sympy.physics.optics.gaussopt.BeamParameter.w_0"]], "waist2rayleigh() (in module sympy.physics.optics.gaussopt)": [[145, "sympy.physics.optics.gaussopt.waist2rayleigh"]], "waist_approximation_limit (sympy.physics.optics.gaussopt.beamparameter property)": [[145, "sympy.physics.optics.gaussopt.BeamParameter.waist_approximation_limit"]], "medium (class in sympy.physics.optics.medium)": [[147, "sympy.physics.optics.medium.Medium"]], "refractive_index (sympy.physics.optics.medium.medium property)": [[147, "sympy.physics.optics.medium.Medium.refractive_index"]], "speed (sympy.physics.optics.medium.medium property)": [[147, "sympy.physics.optics.medium.Medium.speed"]], "sympy.physics.optics.medium": [[147, "module-sympy.physics.optics.medium"]], "half_wave_retarder() (in module sympy.physics.optics.polarization)": [[148, "sympy.physics.optics.polarization.half_wave_retarder"]], "jones_2_stokes() (in module sympy.physics.optics.polarization)": [[148, "sympy.physics.optics.polarization.jones_2_stokes"]], "jones_vector() (in module sympy.physics.optics.polarization)": [[148, "sympy.physics.optics.polarization.jones_vector"]], "linear_polarizer() (in module sympy.physics.optics.polarization)": [[148, "sympy.physics.optics.polarization.linear_polarizer"]], "mueller_matrix() (in module sympy.physics.optics.polarization)": [[148, "sympy.physics.optics.polarization.mueller_matrix"]], "phase_retarder() (in module sympy.physics.optics.polarization)": [[148, "sympy.physics.optics.polarization.phase_retarder"]], "polarizing_beam_splitter() (in module sympy.physics.optics.polarization)": [[148, "sympy.physics.optics.polarization.polarizing_beam_splitter"]], "quarter_wave_retarder() (in module sympy.physics.optics.polarization)": [[148, "sympy.physics.optics.polarization.quarter_wave_retarder"]], "reflective_filter() (in module sympy.physics.optics.polarization)": [[148, "sympy.physics.optics.polarization.reflective_filter"]], "stokes_vector() (in module sympy.physics.optics.polarization)": [[148, "sympy.physics.optics.polarization.stokes_vector"]], "sympy.physics.optics.polarization": [[148, "module-sympy.physics.optics.polarization"]], "transmissive_filter() (in module sympy.physics.optics.polarization)": [[148, "sympy.physics.optics.polarization.transmissive_filter"]], "brewster_angle() (in module sympy.physics.optics.utils)": [[149, "sympy.physics.optics.utils.brewster_angle"]], "critical_angle() (in module sympy.physics.optics.utils)": [[149, "sympy.physics.optics.utils.critical_angle"]], "deviation() (in module sympy.physics.optics.utils)": [[149, "sympy.physics.optics.utils.deviation"]], "fresnel_coefficients() (in module sympy.physics.optics.utils)": [[149, "sympy.physics.optics.utils.fresnel_coefficients"]], "hyperfocal_distance() (in module sympy.physics.optics.utils)": [[149, "sympy.physics.optics.utils.hyperfocal_distance"]], "lens_formula() (in module sympy.physics.optics.utils)": [[149, "sympy.physics.optics.utils.lens_formula"]], "lens_makers_formula() (in module sympy.physics.optics.utils)": [[149, "sympy.physics.optics.utils.lens_makers_formula"]], "mirror_formula() (in module sympy.physics.optics.utils)": [[149, "sympy.physics.optics.utils.mirror_formula"]], "refraction_angle() (in module sympy.physics.optics.utils)": [[149, "sympy.physics.optics.utils.refraction_angle"]], "sympy.physics.optics.utils": [[149, "module-sympy.physics.optics.utils"]], "transverse_magnification() (in module sympy.physics.optics.utils)": [[149, "sympy.physics.optics.utils.transverse_magnification"]], "twave (class in sympy.physics.optics.waves)": [[150, "sympy.physics.optics.waves.TWave"]], "amplitude (sympy.physics.optics.waves.twave property)": [[150, "sympy.physics.optics.waves.TWave.amplitude"]], "angular_velocity (sympy.physics.optics.waves.twave property)": [[150, "sympy.physics.optics.waves.TWave.angular_velocity"]], "frequency (sympy.physics.optics.waves.twave property)": [[150, "sympy.physics.optics.waves.TWave.frequency"]], "n (sympy.physics.optics.waves.twave property)": [[150, "sympy.physics.optics.waves.TWave.n"]], "phase (sympy.physics.optics.waves.twave property)": [[150, "sympy.physics.optics.waves.TWave.phase"]], "speed (sympy.physics.optics.waves.twave property)": [[150, "sympy.physics.optics.waves.TWave.speed"]], "sympy.physics.optics.waves": [[150, "module-sympy.physics.optics.waves"]], "time_period (sympy.physics.optics.waves.twave property)": [[150, "sympy.physics.optics.waves.TWave.time_period"]], "wavelength (sympy.physics.optics.waves.twave property)": [[150, "sympy.physics.optics.waves.TWave.wavelength"]], "wavenumber (sympy.physics.optics.waves.twave property)": [[150, "sympy.physics.optics.waves.TWave.wavenumber"]], "evaluate_pauli_product() (in module sympy.physics.paulialgebra)": [[151, "sympy.physics.paulialgebra.evaluate_pauli_product"]], "sympy.physics.paulialgebra": [[151, "module-sympy.physics.paulialgebra"]], "e_n() (in module sympy.physics.qho_1d)": [[152, "sympy.physics.qho_1d.E_n"]], "coherent_state() (in module sympy.physics.qho_1d)": [[152, "sympy.physics.qho_1d.coherent_state"]], "psi_n() (in module sympy.physics.qho_1d)": [[152, "sympy.physics.qho_1d.psi_n"]], "sympy.physics.qho_1d": [[152, "module-sympy.physics.qho_1d"]], "anticommutator (class in sympy.physics.quantum.anticommutator)": [[153, "sympy.physics.quantum.anticommutator.AntiCommutator"]], "doit() (sympy.physics.quantum.anticommutator.anticommutator method)": [[153, "sympy.physics.quantum.anticommutator.AntiCommutator.doit"]], "sympy.physics.quantum.anticommutator": [[153, "module-sympy.physics.quantum.anticommutator"]], "positionbra3d (class in sympy.physics.quantum.cartesian)": [[154, "sympy.physics.quantum.cartesian.PositionBra3D"]], "positionket3d (class in sympy.physics.quantum.cartesian)": [[154, "sympy.physics.quantum.cartesian.PositionKet3D"]], "positionstate3d (class in sympy.physics.quantum.cartesian)": [[154, "sympy.physics.quantum.cartesian.PositionState3D"]], "pxbra (class in sympy.physics.quantum.cartesian)": [[154, "sympy.physics.quantum.cartesian.PxBra"]], "pxket (class in sympy.physics.quantum.cartesian)": [[154, "sympy.physics.quantum.cartesian.PxKet"]], "pxop (class in sympy.physics.quantum.cartesian)": [[154, "sympy.physics.quantum.cartesian.PxOp"]], "xbra (class in sympy.physics.quantum.cartesian)": [[154, "sympy.physics.quantum.cartesian.XBra"]], "xket (class in sympy.physics.quantum.cartesian)": [[154, "sympy.physics.quantum.cartesian.XKet"]], "xop (class in sympy.physics.quantum.cartesian)": [[154, "sympy.physics.quantum.cartesian.XOp"]], "yop (class in sympy.physics.quantum.cartesian)": [[154, "sympy.physics.quantum.cartesian.YOp"]], "zop (class in sympy.physics.quantum.cartesian)": [[154, "sympy.physics.quantum.cartesian.ZOp"]], "momentum (sympy.physics.quantum.cartesian.pxbra property)": [[154, "sympy.physics.quantum.cartesian.PxBra.momentum"]], "momentum (sympy.physics.quantum.cartesian.pxket property)": [[154, "sympy.physics.quantum.cartesian.PxKet.momentum"]], "position (sympy.physics.quantum.cartesian.xbra property)": [[154, "sympy.physics.quantum.cartesian.XBra.position"]], "position (sympy.physics.quantum.cartesian.xket property)": [[154, "sympy.physics.quantum.cartesian.XKet.position"]], "position_x (sympy.physics.quantum.cartesian.positionstate3d property)": [[154, "sympy.physics.quantum.cartesian.PositionState3D.position_x"]], "position_y (sympy.physics.quantum.cartesian.positionstate3d property)": [[154, "sympy.physics.quantum.cartesian.PositionState3D.position_y"]], "position_z (sympy.physics.quantum.cartesian.positionstate3d property)": [[154, "sympy.physics.quantum.cartesian.PositionState3D.position_z"]], "sympy.physics.quantum.cartesian": [[154, "module-sympy.physics.quantum.cartesian"]], "cg (class in sympy.physics.quantum.cg)": [[155, "sympy.physics.quantum.cg.CG"]], "wigner3j (class in sympy.physics.quantum.cg)": [[155, "sympy.physics.quantum.cg.Wigner3j"]], "wigner6j (class in sympy.physics.quantum.cg)": [[155, "sympy.physics.quantum.cg.Wigner6j"]], "wigner9j (class in sympy.physics.quantum.cg)": [[155, "sympy.physics.quantum.cg.Wigner9j"]], "cg_simp() (in module sympy.physics.quantum.cg)": [[155, "sympy.physics.quantum.cg.cg_simp"]], "sympy.physics.quantum.cg": [[155, "module-sympy.physics.quantum.cg"]], "circuitplot (class in sympy.physics.quantum.circuitplot)": [[156, "sympy.physics.quantum.circuitplot.CircuitPlot"]], "createcgate() (in module sympy.physics.quantum.circuitplot)": [[156, "sympy.physics.quantum.circuitplot.CreateCGate"]], "mx (class in sympy.physics.quantum.circuitplot)": [[156, "sympy.physics.quantum.circuitplot.Mx"]], "mz (class in sympy.physics.quantum.circuitplot)": [[156, "sympy.physics.quantum.circuitplot.Mz"]], "circuit_plot() (in module sympy.physics.quantum.circuitplot)": [[156, "sympy.physics.quantum.circuitplot.circuit_plot"]], "control_line() (sympy.physics.quantum.circuitplot.circuitplot method)": [[156, "sympy.physics.quantum.circuitplot.CircuitPlot.control_line"]], "control_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[156, "sympy.physics.quantum.circuitplot.CircuitPlot.control_point"]], "labeller() (in module sympy.physics.quantum.circuitplot)": [[156, "sympy.physics.quantum.circuitplot.labeller"]], "not_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[156, "sympy.physics.quantum.circuitplot.CircuitPlot.not_point"]], "one_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[156, "sympy.physics.quantum.circuitplot.CircuitPlot.one_qubit_box"]], "swap_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[156, "sympy.physics.quantum.circuitplot.CircuitPlot.swap_point"]], "sympy.physics.quantum.circuitplot": [[156, "module-sympy.physics.quantum.circuitplot"]], "two_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[156, "sympy.physics.quantum.circuitplot.CircuitPlot.two_qubit_box"]], "update() (sympy.physics.quantum.circuitplot.circuitplot method)": [[156, "sympy.physics.quantum.circuitplot.CircuitPlot.update"]], "commutator (class in sympy.physics.quantum.commutator)": [[157, "sympy.physics.quantum.commutator.Commutator"]], "doit() (sympy.physics.quantum.commutator.commutator method)": [[157, "sympy.physics.quantum.commutator.Commutator.doit"]], "sympy.physics.quantum.commutator": [[157, "module-sympy.physics.quantum.commutator"]], "hbar (class in sympy.physics.quantum.constants)": [[158, "sympy.physics.quantum.constants.HBar"]], "sympy.physics.quantum.constants": [[158, "module-sympy.physics.quantum.constants"]], "dagger (class in sympy.physics.quantum.dagger)": [[159, "sympy.physics.quantum.dagger.Dagger"]], "sympy.physics.quantum.dagger": [[159, "module-sympy.physics.quantum.dagger"]], "cgate (class in sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.CGate"]], "cgates (class in sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.CGateS"]], "cnot (in module sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.CNOT"]], "cnotgate (class in sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.CNotGate"]], "gate (class in sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.Gate"]], "h (in module sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.H"]], "hadamardgate (class in sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.HadamardGate"]], "identitygate (class in sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.IdentityGate"]], "onequbitgate (class in sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.OneQubitGate"]], "phase (in module sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.Phase"]], "phasegate (class in sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.PhaseGate"]], "s (in module sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.S"]], "swap (in module sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.SWAP"]], "swapgate (class in sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.SwapGate"]], "t (in module sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.T"]], "tgate (class in sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.TGate"]], "twoqubitgate (class in sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.TwoQubitGate"]], "ugate (class in sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.UGate"]], "x (in module sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.X"]], "xgate (class in sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.XGate"]], "y (in module sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.Y"]], "ygate (class in sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.YGate"]], "z (in module sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.Z"]], "zgate (class in sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.ZGate"]], "controls (sympy.physics.quantum.gate.cgate property)": [[160, "sympy.physics.quantum.gate.CGate.controls"]], "controls (sympy.physics.quantum.gate.cnotgate property)": [[160, "sympy.physics.quantum.gate.CNotGate.controls"]], "decompose() (sympy.physics.quantum.gate.cgate method)": [[160, "sympy.physics.quantum.gate.CGate.decompose"]], "decompose() (sympy.physics.quantum.gate.swapgate method)": [[160, "sympy.physics.quantum.gate.SwapGate.decompose"]], "eval_controls() (sympy.physics.quantum.gate.cgate method)": [[160, "sympy.physics.quantum.gate.CGate.eval_controls"]], "gate (sympy.physics.quantum.gate.cgate property)": [[160, "sympy.physics.quantum.gate.CGate.gate"]], "gate (sympy.physics.quantum.gate.cnotgate property)": [[160, "sympy.physics.quantum.gate.CNotGate.gate"]], "gate_simp() (in module sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.gate_simp"]], "gate_sort() (in module sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.gate_sort"]], "get_target_matrix() (sympy.physics.quantum.gate.gate method)": [[160, "sympy.physics.quantum.gate.Gate.get_target_matrix"]], "get_target_matrix() (sympy.physics.quantum.gate.ugate method)": [[160, "sympy.physics.quantum.gate.UGate.get_target_matrix"]], "min_qubits (sympy.physics.quantum.gate.cgate property)": [[160, "sympy.physics.quantum.gate.CGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.cnotgate property)": [[160, "sympy.physics.quantum.gate.CNotGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.gate property)": [[160, "sympy.physics.quantum.gate.Gate.min_qubits"]], "normalized() (in module sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.normalized"]], "nqubits (sympy.physics.quantum.gate.cgate property)": [[160, "sympy.physics.quantum.gate.CGate.nqubits"]], "nqubits (sympy.physics.quantum.gate.gate property)": [[160, "sympy.physics.quantum.gate.Gate.nqubits"]], "plot_gate() (sympy.physics.quantum.gate.cgate method)": [[160, "sympy.physics.quantum.gate.CGate.plot_gate"]], "random_circuit() (in module sympy.physics.quantum.gate)": [[160, "sympy.physics.quantum.gate.random_circuit"]], "sympy.physics.quantum.gate": [[160, "module-sympy.physics.quantum.gate"]], "targets (sympy.physics.quantum.gate.cgate property)": [[160, "sympy.physics.quantum.gate.CGate.targets"]], "targets (sympy.physics.quantum.gate.cnotgate property)": [[160, "sympy.physics.quantum.gate.CNotGate.targets"]], "targets (sympy.physics.quantum.gate.gate property)": [[160, "sympy.physics.quantum.gate.Gate.targets"]], "targets (sympy.physics.quantum.gate.ugate property)": [[160, "sympy.physics.quantum.gate.UGate.targets"]], "oraclegate (class in sympy.physics.quantum.grover)": [[161, "sympy.physics.quantum.grover.OracleGate"]], "wgate (class in sympy.physics.quantum.grover)": [[161, "sympy.physics.quantum.grover.WGate"]], "apply_grover() (in module sympy.physics.quantum.grover)": [[161, "sympy.physics.quantum.grover.apply_grover"]], "grover_iteration() (in module sympy.physics.quantum.grover)": [[161, "sympy.physics.quantum.grover.grover_iteration"]], "search_function (sympy.physics.quantum.grover.oraclegate property)": [[161, "sympy.physics.quantum.grover.OracleGate.search_function"]], "superposition_basis() (in module sympy.physics.quantum.grover)": [[161, "sympy.physics.quantum.grover.superposition_basis"]], "sympy.physics.quantum.grover": [[161, "module-sympy.physics.quantum.grover"]], "targets (sympy.physics.quantum.grover.oraclegate property)": [[161, "sympy.physics.quantum.grover.OracleGate.targets"]], "complexspace (class in sympy.physics.quantum.hilbert)": [[162, "sympy.physics.quantum.hilbert.ComplexSpace"]], "directsumhilbertspace (class in sympy.physics.quantum.hilbert)": [[162, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace"]], "fockspace (class in sympy.physics.quantum.hilbert)": [[162, "sympy.physics.quantum.hilbert.FockSpace"]], "hilbertspace (class in sympy.physics.quantum.hilbert)": [[162, "sympy.physics.quantum.hilbert.HilbertSpace"]], "l2 (class in sympy.physics.quantum.hilbert)": [[162, "sympy.physics.quantum.hilbert.L2"]], "tensorpowerhilbertspace (class in sympy.physics.quantum.hilbert)": [[162, "sympy.physics.quantum.hilbert.TensorPowerHilbertSpace"]], "tensorproducthilbertspace (class in sympy.physics.quantum.hilbert)": [[162, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace"]], "dimension (sympy.physics.quantum.hilbert.hilbertspace property)": [[162, "sympy.physics.quantum.hilbert.HilbertSpace.dimension"]], "eval() (sympy.physics.quantum.hilbert.directsumhilbertspace class method)": [[162, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.eval"]], "eval() (sympy.physics.quantum.hilbert.tensorproducthilbertspace class method)": [[162, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.eval"]], "spaces (sympy.physics.quantum.hilbert.directsumhilbertspace property)": [[162, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.spaces"]], "spaces (sympy.physics.quantum.hilbert.tensorproducthilbertspace property)": [[162, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.spaces"]], "sympy.physics.quantum.hilbert": [[162, "module-sympy.physics.quantum.hilbert"]], "innerproduct (class in sympy.physics.quantum.innerproduct)": [[164, "sympy.physics.quantum.innerproduct.InnerProduct"]], "sympy.physics.quantum.innerproduct": [[164, "module-sympy.physics.quantum.innerproduct"]], "differentialoperator (class in sympy.physics.quantum.operator)": [[165, "sympy.physics.quantum.operator.DifferentialOperator"]], "hermitianoperator (class in sympy.physics.quantum.operator)": [[165, "sympy.physics.quantum.operator.HermitianOperator"]], "identityoperator (class in sympy.physics.quantum.operator)": [[165, "sympy.physics.quantum.operator.IdentityOperator"]], "operator (class in sympy.physics.quantum.operator)": [[165, "sympy.physics.quantum.operator.Operator"]], "outerproduct (class in sympy.physics.quantum.operator)": [[165, "sympy.physics.quantum.operator.OuterProduct"]], "unitaryoperator (class in sympy.physics.quantum.operator)": [[165, "sympy.physics.quantum.operator.UnitaryOperator"]], "bra (sympy.physics.quantum.operator.outerproduct property)": [[165, "sympy.physics.quantum.operator.OuterProduct.bra"]], "expr (sympy.physics.quantum.operator.differentialoperator property)": [[165, "sympy.physics.quantum.operator.DifferentialOperator.expr"]], "free_symbols (sympy.physics.quantum.operator.differentialoperator property)": [[165, "sympy.physics.quantum.operator.DifferentialOperator.free_symbols"]], "function (sympy.physics.quantum.operator.differentialoperator property)": [[165, "sympy.physics.quantum.operator.DifferentialOperator.function"]], "ket (sympy.physics.quantum.operator.outerproduct property)": [[165, "sympy.physics.quantum.operator.OuterProduct.ket"]], "sympy.physics.quantum.operator": [[165, "module-sympy.physics.quantum.operator"]], "variables (sympy.physics.quantum.operator.differentialoperator property)": [[165, "sympy.physics.quantum.operator.DifferentialOperator.variables"]], "operators_to_state() (in module sympy.physics.quantum.operatorset)": [[166, "sympy.physics.quantum.operatorset.operators_to_state"]], "state_to_operators() (in module sympy.physics.quantum.operatorset)": [[166, "sympy.physics.quantum.operatorset.state_to_operators"]], "sympy.physics.quantum.operatorset": [[166, "module-sympy.physics.quantum.operatorset"]], "piabbra (class in sympy.physics.quantum.piab)": [[167, "sympy.physics.quantum.piab.PIABBra"]], "piabhamiltonian (class in sympy.physics.quantum.piab)": [[167, "sympy.physics.quantum.piab.PIABHamiltonian"]], "piabket (class in sympy.physics.quantum.piab)": [[167, "sympy.physics.quantum.piab.PIABKet"]], "sympy.physics.quantum.piab": [[167, "module-sympy.physics.quantum.piab"]], "qapply() (in module sympy.physics.quantum.qapply)": [[168, "sympy.physics.quantum.qapply.qapply"]], "sympy.physics.quantum.qapply": [[168, "module-sympy.physics.quantum.qapply"]], "iqft (class in sympy.physics.quantum.qft)": [[169, "sympy.physics.quantum.qft.IQFT"]], "qft (class in sympy.physics.quantum.qft)": [[169, "sympy.physics.quantum.qft.QFT"]], "rk (in module sympy.physics.quantum.qft)": [[169, "sympy.physics.quantum.qft.Rk"]], "rkgate (class in sympy.physics.quantum.qft)": [[169, "sympy.physics.quantum.qft.RkGate"]], "decompose() (sympy.physics.quantum.qft.iqft method)": [[169, "sympy.physics.quantum.qft.IQFT.decompose"]], "decompose() (sympy.physics.quantum.qft.qft method)": [[169, "sympy.physics.quantum.qft.QFT.decompose"]], "sympy.physics.quantum.qft": [[169, "module-sympy.physics.quantum.qft"]], "intqubit (class in sympy.physics.quantum.qubit)": [[170, "sympy.physics.quantum.qubit.IntQubit"]], "intqubitbra (class in sympy.physics.quantum.qubit)": [[170, "sympy.physics.quantum.qubit.IntQubitBra"]], "qubit (class in sympy.physics.quantum.qubit)": [[170, "sympy.physics.quantum.qubit.Qubit"]], "qubitbra (class in sympy.physics.quantum.qubit)": [[170, "sympy.physics.quantum.qubit.QubitBra"]], "matrix_to_density() (in module sympy.physics.quantum.qubit)": [[170, "sympy.physics.quantum.qubit.matrix_to_density"]], "matrix_to_qubit() (in module sympy.physics.quantum.qubit)": [[170, "sympy.physics.quantum.qubit.matrix_to_qubit"]], "measure_all() (in module sympy.physics.quantum.qubit)": [[170, "sympy.physics.quantum.qubit.measure_all"]], "measure_all_oneshot() (in module sympy.physics.quantum.qubit)": [[170, "sympy.physics.quantum.qubit.measure_all_oneshot"]], "measure_partial() (in module sympy.physics.quantum.qubit)": [[170, "sympy.physics.quantum.qubit.measure_partial"]], "measure_partial_oneshot() (in module sympy.physics.quantum.qubit)": [[170, "sympy.physics.quantum.qubit.measure_partial_oneshot"]], "qubit_to_matrix() (in module sympy.physics.quantum.qubit)": [[170, "sympy.physics.quantum.qubit.qubit_to_matrix"]], "sympy.physics.quantum.qubit": [[170, "module-sympy.physics.quantum.qubit"]], "enumerate_states() (in module sympy.physics.quantum.represent)": [[171, "sympy.physics.quantum.represent.enumerate_states"]], "get_basis() (in module sympy.physics.quantum.represent)": [[171, "sympy.physics.quantum.represent.get_basis"]], "integrate_result() (in module sympy.physics.quantum.represent)": [[171, "sympy.physics.quantum.represent.integrate_result"]], "rep_expectation() (in module sympy.physics.quantum.represent)": [[171, "sympy.physics.quantum.represent.rep_expectation"]], "rep_innerproduct() (in module sympy.physics.quantum.represent)": [[171, "sympy.physics.quantum.represent.rep_innerproduct"]], "represent() (in module sympy.physics.quantum.represent)": [[171, "sympy.physics.quantum.represent.represent"]], "sympy.physics.quantum.represent": [[171, "module-sympy.physics.quantum.represent"]], "cmod (class in sympy.physics.quantum.shor)": [[172, "sympy.physics.quantum.shor.CMod"]], "n (sympy.physics.quantum.shor.cmod property)": [[172, "sympy.physics.quantum.shor.CMod.N"]], "a (sympy.physics.quantum.shor.cmod property)": [[172, "sympy.physics.quantum.shor.CMod.a"]], "period_find() (in module sympy.physics.quantum.shor)": [[172, "sympy.physics.quantum.shor.period_find"]], "shor() (in module sympy.physics.quantum.shor)": [[172, "sympy.physics.quantum.shor.shor"]], "sympy.physics.quantum.shor": [[172, "module-sympy.physics.quantum.shor"]], "t (sympy.physics.quantum.shor.cmod property)": [[172, "sympy.physics.quantum.shor.CMod.t"]], "d() (sympy.physics.quantum.spin.rotation class method)": [[173, "sympy.physics.quantum.spin.Rotation.D"], [173, "sympy.physics.quantum.spin.Rotation.d"]], "j2op (class in sympy.physics.quantum.spin)": [[173, "sympy.physics.quantum.spin.J2Op"]], "jxbra (class in sympy.physics.quantum.spin)": [[173, "sympy.physics.quantum.spin.JxBra"]], "jxbracoupled (class in sympy.physics.quantum.spin)": [[173, "sympy.physics.quantum.spin.JxBraCoupled"]], "jxket (class in sympy.physics.quantum.spin)": [[173, "sympy.physics.quantum.spin.JxKet"]], "jxketcoupled (class in sympy.physics.quantum.spin)": [[173, "sympy.physics.quantum.spin.JxKetCoupled"]], "jybra (class in sympy.physics.quantum.spin)": [[173, "sympy.physics.quantum.spin.JyBra"]], "jybracoupled (class in sympy.physics.quantum.spin)": [[173, "sympy.physics.quantum.spin.JyBraCoupled"]], "jyket (class in sympy.physics.quantum.spin)": [[173, "sympy.physics.quantum.spin.JyKet"]], "jyketcoupled (class in sympy.physics.quantum.spin)": [[173, "sympy.physics.quantum.spin.JyKetCoupled"]], "jzbra (class in sympy.physics.quantum.spin)": [[173, "sympy.physics.quantum.spin.JzBra"]], "jzbracoupled (class in sympy.physics.quantum.spin)": [[173, "sympy.physics.quantum.spin.JzBraCoupled"]], "jzket (class in sympy.physics.quantum.spin)": [[173, "sympy.physics.quantum.spin.JzKet"]], "jzketcoupled (class in sympy.physics.quantum.spin)": [[173, "sympy.physics.quantum.spin.JzKetCoupled"]], "jzop (class in sympy.physics.quantum.spin)": [[173, "sympy.physics.quantum.spin.JzOp"]], "rotation (class in sympy.physics.quantum.spin)": [[173, "sympy.physics.quantum.spin.Rotation"]], "wignerd (class in sympy.physics.quantum.spin)": [[173, "sympy.physics.quantum.spin.WignerD"]], "couple() (in module sympy.physics.quantum.spin)": [[173, "sympy.physics.quantum.spin.couple"]], "sympy.physics.quantum.spin": [[173, "module-sympy.physics.quantum.spin"]], "uncouple() (in module sympy.physics.quantum.spin)": [[173, "sympy.physics.quantum.spin.uncouple"]], "bra (class in sympy.physics.quantum.state)": [[174, "sympy.physics.quantum.state.Bra"]], "brabase (class in sympy.physics.quantum.state)": [[174, "sympy.physics.quantum.state.BraBase"]], "ket (class in sympy.physics.quantum.state)": [[174, "sympy.physics.quantum.state.Ket"]], "ketbase (class in sympy.physics.quantum.state)": [[174, "sympy.physics.quantum.state.KetBase"]], "orthogonalbra (class in sympy.physics.quantum.state)": [[174, "sympy.physics.quantum.state.OrthogonalBra"]], "orthogonalket (class in sympy.physics.quantum.state)": [[174, "sympy.physics.quantum.state.OrthogonalKet"]], "orthogonalstate (class in sympy.physics.quantum.state)": [[174, "sympy.physics.quantum.state.OrthogonalState"]], "state (class in sympy.physics.quantum.state)": [[174, "sympy.physics.quantum.state.State"]], "statebase (class in sympy.physics.quantum.state)": [[174, "sympy.physics.quantum.state.StateBase"]], "timedepbra (class in sympy.physics.quantum.state)": [[174, "sympy.physics.quantum.state.TimeDepBra"]], "timedepket (class in sympy.physics.quantum.state)": [[174, "sympy.physics.quantum.state.TimeDepKet"]], "timedepstate (class in sympy.physics.quantum.state)": [[174, "sympy.physics.quantum.state.TimeDepState"]], "wavefunction (class in sympy.physics.quantum.state)": [[174, "sympy.physics.quantum.state.Wavefunction"]], "dual (sympy.physics.quantum.state.statebase property)": [[174, "sympy.physics.quantum.state.StateBase.dual"]], "dual_class() (sympy.physics.quantum.state.statebase class method)": [[174, "sympy.physics.quantum.state.StateBase.dual_class"]], "expr (sympy.physics.quantum.state.wavefunction property)": [[174, "sympy.physics.quantum.state.Wavefunction.expr"]], "is_commutative (sympy.physics.quantum.state.wavefunction property)": [[174, "sympy.physics.quantum.state.Wavefunction.is_commutative"]], "is_normalized (sympy.physics.quantum.state.wavefunction property)": [[174, "sympy.physics.quantum.state.Wavefunction.is_normalized"]], "label (sympy.physics.quantum.state.timedepstate property)": [[174, "sympy.physics.quantum.state.TimeDepState.label"]], "limits (sympy.physics.quantum.state.wavefunction property)": [[174, "sympy.physics.quantum.state.Wavefunction.limits"]], "norm (sympy.physics.quantum.state.wavefunction property)": [[174, "sympy.physics.quantum.state.Wavefunction.norm"]], "normalize() (sympy.physics.quantum.state.wavefunction method)": [[174, "sympy.physics.quantum.state.Wavefunction.normalize"]], "operators (sympy.physics.quantum.state.statebase property)": [[174, "sympy.physics.quantum.state.StateBase.operators"]], "prob() (sympy.physics.quantum.state.wavefunction method)": [[174, "sympy.physics.quantum.state.Wavefunction.prob"]], "sympy.physics.quantum.state": [[174, "module-sympy.physics.quantum.state"]], "time (sympy.physics.quantum.state.timedepstate property)": [[174, "sympy.physics.quantum.state.TimeDepState.time"]], "variables (sympy.physics.quantum.state.wavefunction property)": [[174, "sympy.physics.quantum.state.Wavefunction.variables"]], "tensorproduct (class in sympy.physics.quantum.tensorproduct)": [[175, "sympy.physics.quantum.tensorproduct.TensorProduct"]], "sympy.physics.quantum.tensorproduct": [[175, "module-sympy.physics.quantum.tensorproduct"]], "tensor_product_simp() (in module sympy.physics.quantum.tensorproduct)": [[175, "sympy.physics.quantum.tensorproduct.tensor_product_simp"]], "annihilateboson (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.AnnihilateBoson"]], "annihilatefermion (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.AnnihilateFermion"]], "antisymmetrictensor (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.AntiSymmetricTensor"]], "b (in module sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.B"]], "bbra (in module sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.BBra"]], "bket (in module sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.BKet"]], "bd (in module sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.Bd"]], "bosonicbasis (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.BosonicBasis"]], "commutator (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.Commutator"]], "createboson (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.CreateBoson"]], "createfermion (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.CreateFermion"]], "dagger (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.Dagger"]], "f (in module sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.F"]], "fbra (in module sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.FBra"]], "fket (in module sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.FKet"]], "fd (in module sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.Fd"]], "fixedbosonicbasis (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.FixedBosonicBasis"]], "fockstate (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.FockState"]], "fockstatebosonbra (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.FockStateBosonBra"]], "fockstatebosonket (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.FockStateBosonKet"]], "fockstatebra (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.FockStateBra"]], "fockstatefermionbra (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.FockStateFermionBra"]], "fockstatefermionket (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.FockStateFermionKet"]], "fockstateket (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.FockStateKet"]], "innerproduct (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.InnerProduct"]], "kroneckerdelta (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.KroneckerDelta"]], "no (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.NO"]], "permutationoperator (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.PermutationOperator"]], "varbosonicbasis (class in sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.VarBosonicBasis"]], "apply_operator() (sympy.physics.secondquant.annihilateboson method)": [[176, "sympy.physics.secondquant.AnnihilateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.annihilatefermion method)": [[176, "sympy.physics.secondquant.AnnihilateFermion.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createboson method)": [[176, "sympy.physics.secondquant.CreateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createfermion method)": [[176, "sympy.physics.secondquant.CreateFermion.apply_operator"]], "apply_operators() (in module sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.apply_operators"]], "bra (sympy.physics.secondquant.innerproduct property)": [[176, "sympy.physics.secondquant.InnerProduct.bra"]], "contraction() (in module sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.contraction"]], "doit() (sympy.physics.secondquant.commutator method)": [[176, "sympy.physics.secondquant.Commutator.doit"]], "doit() (sympy.physics.secondquant.no method)": [[176, "sympy.physics.secondquant.NO.doit"]], "eval() (sympy.physics.secondquant.commutator class method)": [[176, "sympy.physics.secondquant.Commutator.eval"]], "eval() (sympy.physics.secondquant.dagger class method)": [[176, "sympy.physics.secondquant.Dagger.eval"]], "eval() (sympy.physics.secondquant.kroneckerdelta class method)": [[176, "sympy.physics.secondquant.KroneckerDelta.eval"]], "evaluate_deltas() (in module sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.evaluate_deltas"]], "get_permuted() (sympy.physics.secondquant.permutationoperator method)": [[176, "sympy.physics.secondquant.PermutationOperator.get_permuted"]], "get_subno() (sympy.physics.secondquant.no method)": [[176, "sympy.physics.secondquant.NO.get_subNO"]], "has_q_annihilators (sympy.physics.secondquant.no property)": [[176, "sympy.physics.secondquant.NO.has_q_annihilators"]], "has_q_creators (sympy.physics.secondquant.no property)": [[176, "sympy.physics.secondquant.NO.has_q_creators"]], "index() (sympy.physics.secondquant.fixedbosonicbasis method)": [[176, "sympy.physics.secondquant.FixedBosonicBasis.index"]], "index() (sympy.physics.secondquant.varbosonicbasis method)": [[176, "sympy.physics.secondquant.VarBosonicBasis.index"]], "indices_contain_equal_information (sympy.physics.secondquant.kroneckerdelta property)": [[176, "sympy.physics.secondquant.KroneckerDelta.indices_contain_equal_information"]], "is_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[176, "sympy.physics.secondquant.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[176, "sympy.physics.secondquant.KroneckerDelta.is_below_fermi"]], "is_only_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[176, "sympy.physics.secondquant.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[176, "sympy.physics.secondquant.KroneckerDelta.is_only_below_fermi"]], "is_only_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[176, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_annihilator"]], "is_only_q_annihilator (sympy.physics.secondquant.createfermion property)": [[176, "sympy.physics.secondquant.CreateFermion.is_only_q_annihilator"]], "is_only_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[176, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_creator"]], "is_only_q_creator (sympy.physics.secondquant.createfermion property)": [[176, "sympy.physics.secondquant.CreateFermion.is_only_q_creator"]], "is_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[176, "sympy.physics.secondquant.AnnihilateFermion.is_q_annihilator"]], "is_q_annihilator (sympy.physics.secondquant.createfermion property)": [[176, "sympy.physics.secondquant.CreateFermion.is_q_annihilator"]], "is_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[176, "sympy.physics.secondquant.AnnihilateFermion.is_q_creator"]], "is_q_creator (sympy.physics.secondquant.createfermion property)": [[176, "sympy.physics.secondquant.CreateFermion.is_q_creator"]], "iter_q_annihilators() (sympy.physics.secondquant.no method)": [[176, "sympy.physics.secondquant.NO.iter_q_annihilators"]], "iter_q_creators() (sympy.physics.secondquant.no method)": [[176, "sympy.physics.secondquant.NO.iter_q_creators"]], "ket (sympy.physics.secondquant.innerproduct property)": [[176, "sympy.physics.secondquant.InnerProduct.ket"]], "killable_index (sympy.physics.secondquant.kroneckerdelta property)": [[176, "sympy.physics.secondquant.KroneckerDelta.killable_index"]], "lower (sympy.physics.secondquant.antisymmetrictensor property)": [[176, "sympy.physics.secondquant.AntiSymmetricTensor.lower"]], "matrix_rep() (in module sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.matrix_rep"]], "preferred_index (sympy.physics.secondquant.kroneckerdelta property)": [[176, "sympy.physics.secondquant.KroneckerDelta.preferred_index"]], "simplify_index_permutations() (in module sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.simplify_index_permutations"]], "state() (sympy.physics.secondquant.fixedbosonicbasis method)": [[176, "sympy.physics.secondquant.FixedBosonicBasis.state"]], "state() (sympy.physics.secondquant.varbosonicbasis method)": [[176, "sympy.physics.secondquant.VarBosonicBasis.state"]], "substitute_dummies() (in module sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.substitute_dummies"]], "symbol (sympy.physics.secondquant.antisymmetrictensor property)": [[176, "sympy.physics.secondquant.AntiSymmetricTensor.symbol"]], "sympy.physics.secondquant": [[176, "module-sympy.physics.secondquant"]], "upper (sympy.physics.secondquant.antisymmetrictensor property)": [[176, "sympy.physics.secondquant.AntiSymmetricTensor.upper"]], "wicks() (in module sympy.physics.secondquant)": [[176, "sympy.physics.secondquant.wicks"]], "e_nl() (in module sympy.physics.sho)": [[177, "sympy.physics.sho.E_nl"]], "r_nl() (in module sympy.physics.sho)": [[177, "sympy.physics.sho.R_nl"]], "sympy.physics.sho": [[177, "module-sympy.physics.sho"]], "dimension (class in sympy.physics.units.dimensions)": [[178, "sympy.physics.units.dimensions.Dimension"]], "dimensionsystem (class in sympy.physics.units.dimensions)": [[178, "sympy.physics.units.dimensions.DimensionSystem"]], "can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[178, "sympy.physics.units.dimensions.DimensionSystem.can_transf_matrix"]], "dim (sympy.physics.units.dimensions.dimensionsystem property)": [[178, "sympy.physics.units.dimensions.DimensionSystem.dim"]], "dim_can_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[178, "sympy.physics.units.dimensions.DimensionSystem.dim_can_vector"]], "dim_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[178, "sympy.physics.units.dimensions.DimensionSystem.dim_vector"]], "has_integer_powers() (sympy.physics.units.dimensions.dimension method)": [[178, "sympy.physics.units.dimensions.Dimension.has_integer_powers"]], "inv_can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[178, "sympy.physics.units.dimensions.DimensionSystem.inv_can_transf_matrix"]], "is_consistent (sympy.physics.units.dimensions.dimensionsystem property)": [[178, "sympy.physics.units.dimensions.DimensionSystem.is_consistent"]], "is_dimensionless() (sympy.physics.units.dimensions.dimensionsystem method)": [[178, "sympy.physics.units.dimensions.DimensionSystem.is_dimensionless"]], "list_can_dims (sympy.physics.units.dimensions.dimensionsystem property)": [[178, "sympy.physics.units.dimensions.DimensionSystem.list_can_dims"]], "print_dim_base() (sympy.physics.units.dimensions.dimensionsystem method)": [[178, "sympy.physics.units.dimensions.DimensionSystem.print_dim_base"]], "sympy.physics.units.dimensions": [[178, "module-sympy.physics.units.dimensions"]], "prefix (class in sympy.physics.units.prefixes)": [[182, "sympy.physics.units.prefixes.Prefix"]], "sympy.physics.units.prefixes": [[182, "module-sympy.physics.units.prefixes"]], "quantity (class in sympy.physics.units.quantities)": [[183, "sympy.physics.units.quantities.Quantity"]], "abbrev (sympy.physics.units.quantities.quantity property)": [[183, "sympy.physics.units.quantities.Quantity.abbrev"]], "convert_to() (in module sympy.physics.units.util)": [[183, "sympy.physics.units.util.convert_to"]], "convert_to() (sympy.physics.units.quantities.quantity method)": [[183, "sympy.physics.units.quantities.Quantity.convert_to"]], "free_symbols (sympy.physics.units.quantities.quantity property)": [[183, "sympy.physics.units.quantities.Quantity.free_symbols"]], "is_prefixed (sympy.physics.units.quantities.quantity property)": [[183, "sympy.physics.units.quantities.Quantity.is_prefixed"]], "scale_factor (sympy.physics.units.quantities.quantity property)": [[183, "sympy.physics.units.quantities.Quantity.scale_factor"]], "set_global_relative_scale_factor() (sympy.physics.units.quantities.quantity method)": [[183, "sympy.physics.units.quantities.Quantity.set_global_relative_scale_factor"]], "sympy.physics.units.quantities": [[183, "module-sympy.physics.units.quantities"]], "sympy.physics.units.util": [[183, "module-sympy.physics.units.util"]], "unitsystem (class in sympy.physics.units.unitsystem)": [[184, "sympy.physics.units.unitsystem.UnitSystem"]], "dim (sympy.physics.units.unitsystem.unitsystem property)": [[184, "sympy.physics.units.unitsystem.UnitSystem.dim"]], "extend() (sympy.physics.units.unitsystem.unitsystem method)": [[184, "sympy.physics.units.unitsystem.UnitSystem.extend"]], "get_units_non_prefixed() (sympy.physics.units.unitsystem.unitsystem method)": [[184, "sympy.physics.units.unitsystem.UnitSystem.get_units_non_prefixed"]], "is_consistent (sympy.physics.units.unitsystem.unitsystem property)": [[184, "sympy.physics.units.unitsystem.UnitSystem.is_consistent"]], "sympy.physics.units.unitsystem": [[184, "module-sympy.physics.units.unitsystem"]], "coordinatesym (class in sympy.physics.vector.frame)": [[186, "sympy.physics.vector.frame.CoordinateSym"]], "dyadic (class in sympy.physics.vector.dyadic)": [[186, "sympy.physics.vector.dyadic.Dyadic"]], "referenceframe (class in sympy.physics.vector.frame)": [[186, "sympy.physics.vector.frame.ReferenceFrame"]], "vector (class in sympy.physics.vector.vector)": [[186, "sympy.physics.vector.vector.Vector"]], "ang_acc_in() (sympy.physics.vector.frame.referenceframe method)": [[186, "sympy.physics.vector.frame.ReferenceFrame.ang_acc_in"]], "ang_vel_in() (sympy.physics.vector.frame.referenceframe method)": [[186, "sympy.physics.vector.frame.ReferenceFrame.ang_vel_in"]], "angle_between() (sympy.physics.vector.vector.vector method)": [[186, "sympy.physics.vector.vector.Vector.angle_between"]], "applyfunc() (sympy.physics.vector.dyadic.dyadic method)": [[186, "sympy.physics.vector.dyadic.Dyadic.applyfunc"]], "applyfunc() (sympy.physics.vector.vector.vector method)": [[186, "sympy.physics.vector.vector.Vector.applyfunc"]], "cross() (sympy.physics.vector.dyadic.dyadic method)": [[186, "sympy.physics.vector.dyadic.Dyadic.cross"]], "cross() (sympy.physics.vector.vector.vector method)": [[186, "sympy.physics.vector.vector.Vector.cross"]], "dcm() (sympy.physics.vector.frame.referenceframe method)": [[186, "sympy.physics.vector.frame.ReferenceFrame.dcm"]], "diff() (sympy.physics.vector.vector.vector method)": [[186, "sympy.physics.vector.vector.Vector.diff"]], "doit() (sympy.physics.vector.dyadic.dyadic method)": [[186, "sympy.physics.vector.dyadic.Dyadic.doit"]], "doit() (sympy.physics.vector.vector.vector method)": [[186, "sympy.physics.vector.vector.Vector.doit"]], "dot() (sympy.physics.vector.dyadic.dyadic method)": [[186, "sympy.physics.vector.dyadic.Dyadic.dot"]], "dot() (sympy.physics.vector.vector.vector method)": [[186, "sympy.physics.vector.vector.Vector.dot"]], "dt() (sympy.physics.vector.dyadic.dyadic method)": [[186, "sympy.physics.vector.dyadic.Dyadic.dt"]], "dt() (sympy.physics.vector.vector.vector method)": [[186, "sympy.physics.vector.vector.Vector.dt"]], "express() (sympy.physics.vector.dyadic.dyadic method)": [[186, "sympy.physics.vector.dyadic.Dyadic.express"]], "express() (sympy.physics.vector.vector.vector method)": [[186, "sympy.physics.vector.vector.Vector.express"]], "free_dynamicsymbols() (sympy.physics.vector.vector.vector method)": [[186, "sympy.physics.vector.vector.Vector.free_dynamicsymbols"]], "free_symbols() (sympy.physics.vector.vector.vector method)": [[186, "sympy.physics.vector.vector.Vector.free_symbols"]], "func (sympy.physics.vector.dyadic.dyadic property)": [[186, "sympy.physics.vector.dyadic.Dyadic.func"]], "func (sympy.physics.vector.vector.vector property)": [[186, "sympy.physics.vector.vector.Vector.func"]], "magnitude() (sympy.physics.vector.vector.vector method)": [[186, "sympy.physics.vector.vector.Vector.magnitude"]], "normalize() (sympy.physics.vector.vector.vector method)": [[186, "sympy.physics.vector.vector.Vector.normalize"]], "orient() (sympy.physics.vector.frame.referenceframe method)": [[186, "sympy.physics.vector.frame.ReferenceFrame.orient"]], "orient_axis() (sympy.physics.vector.frame.referenceframe method)": [[186, "sympy.physics.vector.frame.ReferenceFrame.orient_axis"]], "orient_body_fixed() (sympy.physics.vector.frame.referenceframe method)": [[186, "sympy.physics.vector.frame.ReferenceFrame.orient_body_fixed"]], "orient_explicit() (sympy.physics.vector.frame.referenceframe method)": [[186, "sympy.physics.vector.frame.ReferenceFrame.orient_explicit"]], "orient_quaternion() (sympy.physics.vector.frame.referenceframe method)": [[186, "sympy.physics.vector.frame.ReferenceFrame.orient_quaternion"]], "orient_space_fixed() (sympy.physics.vector.frame.referenceframe method)": [[186, "sympy.physics.vector.frame.ReferenceFrame.orient_space_fixed"]], "orientnew() (sympy.physics.vector.frame.referenceframe method)": [[186, "sympy.physics.vector.frame.ReferenceFrame.orientnew"]], "outer() (sympy.physics.vector.vector.vector method)": [[186, "sympy.physics.vector.vector.Vector.outer"]], "partial_velocity() (sympy.physics.vector.frame.referenceframe method)": [[186, "sympy.physics.vector.frame.ReferenceFrame.partial_velocity"]], "separate() (sympy.physics.vector.vector.vector method)": [[186, "sympy.physics.vector.vector.Vector.separate"]], "set_ang_acc() (sympy.physics.vector.frame.referenceframe method)": [[186, "sympy.physics.vector.frame.ReferenceFrame.set_ang_acc"]], "set_ang_vel() (sympy.physics.vector.frame.referenceframe method)": [[186, "sympy.physics.vector.frame.ReferenceFrame.set_ang_vel"]], "simplify() (sympy.physics.vector.dyadic.dyadic method)": [[186, "sympy.physics.vector.dyadic.Dyadic.simplify"]], "simplify() (sympy.physics.vector.vector.vector method)": [[186, "sympy.physics.vector.vector.Vector.simplify"]], "subs() (sympy.physics.vector.dyadic.dyadic method)": [[186, "sympy.physics.vector.dyadic.Dyadic.subs"]], "subs() (sympy.physics.vector.vector.vector method)": [[186, "sympy.physics.vector.vector.Vector.subs"]], "to_matrix() (sympy.physics.vector.dyadic.dyadic method)": [[186, "sympy.physics.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.physics.vector.vector.vector method)": [[186, "sympy.physics.vector.vector.Vector.to_matrix"]], "variable_map() (sympy.physics.vector.frame.referenceframe method)": [[186, "sympy.physics.vector.frame.ReferenceFrame.variable_map"]], "x (sympy.physics.vector.frame.referenceframe property)": [[186, "sympy.physics.vector.frame.ReferenceFrame.x"]], "xreplace() (sympy.physics.vector.dyadic.dyadic method)": [[186, "sympy.physics.vector.dyadic.Dyadic.xreplace"]], "xreplace() (sympy.physics.vector.vector.vector method)": [[186, "sympy.physics.vector.vector.Vector.xreplace"]], "y (sympy.physics.vector.frame.referenceframe property)": [[186, "sympy.physics.vector.frame.ReferenceFrame.y"]], "z (sympy.physics.vector.frame.referenceframe property)": [[186, "sympy.physics.vector.frame.ReferenceFrame.z"]], "curl() (in module sympy.physics.vector.fieldfunctions)": [[187, "sympy.physics.vector.fieldfunctions.curl"]], "divergence() (in module sympy.physics.vector.fieldfunctions)": [[187, "sympy.physics.vector.fieldfunctions.divergence"]], "gradient() (in module sympy.physics.vector.fieldfunctions)": [[187, "sympy.physics.vector.fieldfunctions.gradient"]], "is_conservative() (in module sympy.physics.vector.fieldfunctions)": [[187, "sympy.physics.vector.fieldfunctions.is_conservative"]], "is_solenoidal() (in module sympy.physics.vector.fieldfunctions)": [[187, "sympy.physics.vector.fieldfunctions.is_solenoidal"]], "scalar_potential() (in module sympy.physics.vector.fieldfunctions)": [[187, "sympy.physics.vector.fieldfunctions.scalar_potential"]], "scalar_potential_difference() (in module sympy.physics.vector.fieldfunctions)": [[187, "sympy.physics.vector.fieldfunctions.scalar_potential_difference"]], "cross() (in module sympy.physics.vector.functions)": [[188, "sympy.physics.vector.functions.cross"]], "dot() (in module sympy.physics.vector.functions)": [[188, "sympy.physics.vector.functions.dot"]], "dynamicsymbols() (in module sympy.physics.vector)": [[188, "sympy.physics.vector.dynamicsymbols"]], "express() (in module sympy.physics.vector.functions)": [[188, "sympy.physics.vector.functions.express"]], "outer() (in module sympy.physics.vector.functions)": [[188, "sympy.physics.vector.functions.outer"]], "time_derivative() (in module sympy.physics.vector.functions)": [[188, "sympy.physics.vector.functions.time_derivative"]], "point (class in sympy.physics.vector.point)": [[190, "sympy.physics.vector.point.Point"]], "a1pt_theory() (sympy.physics.vector.point.point method)": [[190, "sympy.physics.vector.point.Point.a1pt_theory"]], "a2pt_theory() (sympy.physics.vector.point.point method)": [[190, "sympy.physics.vector.point.Point.a2pt_theory"]], "acc() (sympy.physics.vector.point.point method)": [[190, "sympy.physics.vector.point.Point.acc"]], "get_motion_params() (in module sympy.physics.vector.functions)": [[190, "sympy.physics.vector.functions.get_motion_params"]], "kinematic_equations() (in module sympy.physics.vector.functions)": [[190, "sympy.physics.vector.functions.kinematic_equations"]], "locatenew() (sympy.physics.vector.point.point method)": [[190, "sympy.physics.vector.point.Point.locatenew"]], "partial_velocity() (in module sympy.physics.vector.functions)": [[190, "sympy.physics.vector.functions.partial_velocity"]], "partial_velocity() (sympy.physics.vector.point.point method)": [[190, "sympy.physics.vector.point.Point.partial_velocity"]], "pos_from() (sympy.physics.vector.point.point method)": [[190, "sympy.physics.vector.point.Point.pos_from"]], "set_acc() (sympy.physics.vector.point.point method)": [[190, "sympy.physics.vector.point.Point.set_acc"]], "set_pos() (sympy.physics.vector.point.point method)": [[190, "sympy.physics.vector.point.Point.set_pos"]], "set_vel() (sympy.physics.vector.point.point method)": [[190, "sympy.physics.vector.point.Point.set_vel"]], "sympy.physics.vector.functions": [[190, "module-sympy.physics.vector.functions"]], "sympy.physics.vector.point": [[190, "module-sympy.physics.vector.point"]], "v1pt_theory() (sympy.physics.vector.point.point method)": [[190, "sympy.physics.vector.point.Point.v1pt_theory"]], "v2pt_theory() (sympy.physics.vector.point.point method)": [[190, "sympy.physics.vector.point.Point.v2pt_theory"]], "vel() (sympy.physics.vector.point.point method)": [[190, "sympy.physics.vector.point.Point.vel"]], "init_vprinting() (in module sympy.physics.vector.printing)": [[191, "sympy.physics.vector.printing.init_vprinting"]], "vlatex() (in module sympy.physics.vector.printing)": [[191, "sympy.physics.vector.printing.vlatex"]], "vpprint() (in module sympy.physics.vector.printing)": [[191, "sympy.physics.vector.printing.vpprint"]], "vprint() (in module sympy.physics.vector.printing)": [[191, "sympy.physics.vector.printing.vprint"]], "sympy.physics.vector": [[193, "module-sympy.physics.vector"]], "clebsch_gordan() (in module sympy.physics.wigner)": [[196, "sympy.physics.wigner.clebsch_gordan"]], "dot_rot_grad_ynm() (in module sympy.physics.wigner)": [[196, "sympy.physics.wigner.dot_rot_grad_Ynm"]], "gaunt() (in module sympy.physics.wigner)": [[196, "sympy.physics.wigner.gaunt"]], "racah() (in module sympy.physics.wigner)": [[196, "sympy.physics.wigner.racah"]], "real_gaunt() (in module sympy.physics.wigner)": [[196, "sympy.physics.wigner.real_gaunt"]], "sympy.physics.wigner": [[196, "module-sympy.physics.wigner"]], "wigner_3j() (in module sympy.physics.wigner)": [[196, "sympy.physics.wigner.wigner_3j"]], "wigner_6j() (in module sympy.physics.wigner)": [[196, "sympy.physics.wigner.wigner_6j"]], "wigner_9j() (in module sympy.physics.wigner)": [[196, "sympy.physics.wigner.wigner_9j"]], "wigner_d() (in module sympy.physics.wigner)": [[196, "sympy.physics.wigner.wigner_d"]], "wigner_d_small() (in module sympy.physics.wigner)": [[196, "sympy.physics.wigner.wigner_d_small"]], "basebackend (class in sympy.plotting.plot)": [[197, "sympy.plotting.plot.BaseBackend"]], "baseseries (class in sympy.plotting.plot)": [[197, "sympy.plotting.plot.BaseSeries"]], "implicitseries (class in sympy.plotting.plot_implicit)": [[197, "sympy.plotting.plot_implicit.ImplicitSeries"]], "line2dbaseseries (class in sympy.plotting.plot)": [[197, "sympy.plotting.plot.Line2DBaseSeries"]], "line3dbaseseries (class in sympy.plotting.plot)": [[197, "sympy.plotting.plot.Line3DBaseSeries"]], "lineover1drangeseries (class in sympy.plotting.plot)": [[197, "sympy.plotting.plot.LineOver1DRangeSeries"]], "matplotlibbackend (class in sympy.plotting.plot)": [[197, "sympy.plotting.plot.MatplotlibBackend"]], "parametric2dlineseries (class in sympy.plotting.plot)": [[197, "sympy.plotting.plot.Parametric2DLineSeries"]], "parametric3dlineseries (class in sympy.plotting.plot)": [[197, "sympy.plotting.plot.Parametric3DLineSeries"]], "parametricsurfaceseries (class in sympy.plotting.plot)": [[197, "sympy.plotting.plot.ParametricSurfaceSeries"]], "plot (class in sympy.plotting.plot)": [[197, "sympy.plotting.plot.Plot"]], "plotgrid (class in sympy.plotting.plot)": [[197, "sympy.plotting.plot.PlotGrid"]], "surfacebaseseries (class in sympy.plotting.plot)": [[197, "sympy.plotting.plot.SurfaceBaseSeries"]], "surfaceover2drangeseries (class in sympy.plotting.plot)": [[197, "sympy.plotting.plot.SurfaceOver2DRangeSeries"]], "textbackend (class in sympy.plotting.plot)": [[197, "sympy.plotting.plot.TextBackend"]], "append() (sympy.plotting.plot.plot method)": [[197, "sympy.plotting.plot.Plot.append"]], "extend() (sympy.plotting.plot.plot method)": [[197, "sympy.plotting.plot.Plot.extend"]], "get_data() (sympy.plotting.plot.line2dbaseseries method)": [[197, "sympy.plotting.plot.Line2DBaseSeries.get_data"]], "get_points() (sympy.plotting.plot.lineover1drangeseries method)": [[197, "sympy.plotting.plot.LineOver1DRangeSeries.get_points"]], "get_points() (sympy.plotting.plot.parametric2dlineseries method)": [[197, "sympy.plotting.plot.Parametric2DLineSeries.get_points"]], "get_segments() (sympy.plotting.plot.matplotlibbackend static method)": [[197, "sympy.plotting.plot.MatplotlibBackend.get_segments"]], "plot() (in module sympy.plotting.plot)": [[197, "sympy.plotting.plot.plot"]], "plot3d() (in module sympy.plotting.plot)": [[197, "sympy.plotting.plot.plot3d"]], "plot3d_parametric_line() (in module sympy.plotting.plot)": [[197, "sympy.plotting.plot.plot3d_parametric_line"]], "plot3d_parametric_surface() (in module sympy.plotting.plot)": [[197, "sympy.plotting.plot.plot3d_parametric_surface"]], "plot_implicit() (in module sympy.plotting.plot_implicit)": [[197, "sympy.plotting.plot_implicit.plot_implicit"]], "plot_parametric() (in module sympy.plotting.plot)": [[197, "sympy.plotting.plot.plot_parametric"]], "process_series() (sympy.plotting.plot.matplotlibbackend method)": [[197, "sympy.plotting.plot.MatplotlibBackend.process_series"]], "sympy.plotting.plot": [[197, "module-sympy.plotting.plot"]], "sympy.plotting.pygletplot": [[197, "module-sympy.plotting.pygletplot"]], "textplot() (in module sympy.plotting.textplot)": [[197, "sympy.plotting.textplot.textplot"]], "extensionelement (class in sympy.polys.agca.extensions)": [[198, "sympy.polys.agca.extensions.ExtensionElement"]], "freemodule (class in sympy.polys.agca.modules)": [[198, "sympy.polys.agca.modules.FreeModule"]], "freemoduleelement (class in sympy.polys.agca.modules)": [[198, "sympy.polys.agca.modules.FreeModuleElement"]], "ideal (class in sympy.polys.agca.ideals)": [[198, "sympy.polys.agca.ideals.Ideal"]], "module (class in sympy.polys.agca.modules)": [[198, "sympy.polys.agca.modules.Module"]], "modulehomomorphism (class in sympy.polys.agca.homomorphisms)": [[198, "sympy.polys.agca.homomorphisms.ModuleHomomorphism"]], "monogenicfiniteextension (class in sympy.polys.agca.extensions)": [[198, "sympy.polys.agca.extensions.MonogenicFiniteExtension"]], "quotientmodule (class in sympy.polys.agca.modules)": [[198, "sympy.polys.agca.modules.QuotientModule"]], "quotientmoduleelement (class in sympy.polys.agca.modules)": [[198, "sympy.polys.agca.modules.QuotientModuleElement"]], "submodule (class in sympy.polys.agca.modules)": [[198, "sympy.polys.agca.modules.SubModule"]], "subquotientmodule (class in sympy.polys.agca.modules)": [[198, "sympy.polys.agca.modules.SubQuotientModule"]], "basis() (sympy.polys.agca.modules.freemodule method)": [[198, "sympy.polys.agca.modules.FreeModule.basis"]], "contains() (sympy.polys.agca.ideals.ideal method)": [[198, "sympy.polys.agca.ideals.Ideal.contains"]], "contains() (sympy.polys.agca.modules.module method)": [[198, "sympy.polys.agca.modules.Module.contains"]], "convert() (sympy.polys.agca.modules.freemodule method)": [[198, "sympy.polys.agca.modules.FreeModule.convert"]], "convert() (sympy.polys.agca.modules.module method)": [[198, "sympy.polys.agca.modules.Module.convert"]], "convert() (sympy.polys.agca.modules.quotientmodule method)": [[198, "sympy.polys.agca.modules.QuotientModule.convert"]], "convert() (sympy.polys.agca.modules.submodule method)": [[198, "sympy.polys.agca.modules.SubModule.convert"]], "depth() (sympy.polys.agca.ideals.ideal method)": [[198, "sympy.polys.agca.ideals.Ideal.depth"]], "dtype (sympy.polys.agca.extensions.monogenicfiniteextension attribute)": [[198, "sympy.polys.agca.extensions.MonogenicFiniteExtension.dtype"]], "dtype (sympy.polys.agca.modules.freemodule attribute)": [[198, "sympy.polys.agca.modules.FreeModule.dtype"]], "dtype (sympy.polys.agca.modules.quotientmodule attribute)": [[198, "sympy.polys.agca.modules.QuotientModule.dtype"]], "eq() (sympy.polys.agca.modules.quotientmoduleelement method)": [[198, "sympy.polys.agca.modules.QuotientModuleElement.eq"]], "height() (sympy.polys.agca.ideals.ideal method)": [[198, "sympy.polys.agca.ideals.Ideal.height"]], "homomorphism() (in module sympy.polys.agca.homomorphisms)": [[198, "sympy.polys.agca.homomorphisms.homomorphism"]], "identity_hom() (sympy.polys.agca.modules.freemodule method)": [[198, "sympy.polys.agca.modules.FreeModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.module method)": [[198, "sympy.polys.agca.modules.Module.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.quotientmodule method)": [[198, "sympy.polys.agca.modules.QuotientModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.submodule method)": [[198, "sympy.polys.agca.modules.SubModule.identity_hom"]], "image() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[198, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.image"]], "in_terms_of_generators() (sympy.polys.agca.modules.submodule method)": [[198, "sympy.polys.agca.modules.SubModule.in_terms_of_generators"]], "inclusion_hom() (sympy.polys.agca.modules.submodule method)": [[198, "sympy.polys.agca.modules.SubModule.inclusion_hom"]], "intersect() (sympy.polys.agca.ideals.ideal method)": [[198, "sympy.polys.agca.ideals.Ideal.intersect"]], "intersect() (sympy.polys.agca.modules.submodule method)": [[198, "sympy.polys.agca.modules.SubModule.intersect"]], "inverse() (sympy.polys.agca.extensions.extensionelement method)": [[198, "sympy.polys.agca.extensions.ExtensionElement.inverse"]], "is_full_module() (sympy.polys.agca.modules.submodule method)": [[198, "sympy.polys.agca.modules.SubModule.is_full_module"]], "is_full_module() (sympy.polys.agca.modules.subquotientmodule method)": [[198, "sympy.polys.agca.modules.SubQuotientModule.is_full_module"]], "is_injective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[198, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_injective"]], "is_isomorphism() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[198, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_isomorphism"]], "is_maximal() (sympy.polys.agca.ideals.ideal method)": [[198, "sympy.polys.agca.ideals.Ideal.is_maximal"]], "is_primary() (sympy.polys.agca.ideals.ideal method)": [[198, "sympy.polys.agca.ideals.Ideal.is_primary"]], "is_prime() (sympy.polys.agca.ideals.ideal method)": [[198, "sympy.polys.agca.ideals.Ideal.is_prime"]], "is_principal() (sympy.polys.agca.ideals.ideal method)": [[198, "sympy.polys.agca.ideals.Ideal.is_principal"]], "is_radical() (sympy.polys.agca.ideals.ideal method)": [[198, "sympy.polys.agca.ideals.Ideal.is_radical"]], "is_submodule() (sympy.polys.agca.modules.freemodule method)": [[198, "sympy.polys.agca.modules.FreeModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.module method)": [[198, "sympy.polys.agca.modules.Module.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.quotientmodule method)": [[198, "sympy.polys.agca.modules.QuotientModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.submodule method)": [[198, "sympy.polys.agca.modules.SubModule.is_submodule"]], "is_surjective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[198, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_surjective"]], "is_whole_ring() (sympy.polys.agca.ideals.ideal method)": [[198, "sympy.polys.agca.ideals.Ideal.is_whole_ring"]], "is_zero() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[198, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_zero"]], "is_zero() (sympy.polys.agca.ideals.ideal method)": [[198, "sympy.polys.agca.ideals.Ideal.is_zero"]], "is_zero() (sympy.polys.agca.modules.freemodule method)": [[198, "sympy.polys.agca.modules.FreeModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.module method)": [[198, "sympy.polys.agca.modules.Module.is_zero"]], "is_zero() (sympy.polys.agca.modules.quotientmodule method)": [[198, "sympy.polys.agca.modules.QuotientModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.submodule method)": [[198, "sympy.polys.agca.modules.SubModule.is_zero"]], "kernel() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[198, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.kernel"]], "module_quotient() (sympy.polys.agca.modules.submodule method)": [[198, "sympy.polys.agca.modules.SubModule.module_quotient"]], "multiply_ideal() (sympy.polys.agca.modules.freemodule method)": [[198, "sympy.polys.agca.modules.FreeModule.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.module method)": [[198, "sympy.polys.agca.modules.Module.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.submodule method)": [[198, "sympy.polys.agca.modules.SubModule.multiply_ideal"]], "product() (sympy.polys.agca.ideals.ideal method)": [[198, "sympy.polys.agca.ideals.Ideal.product"]], "quotient() (sympy.polys.agca.ideals.ideal method)": [[198, "sympy.polys.agca.ideals.Ideal.quotient"]], "quotient_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[198, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_codomain"]], "quotient_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[198, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_domain"]], "quotient_hom() (sympy.polys.agca.modules.quotientmodule method)": [[198, "sympy.polys.agca.modules.QuotientModule.quotient_hom"]], "quotient_hom() (sympy.polys.agca.modules.subquotientmodule method)": [[198, "sympy.polys.agca.modules.SubQuotientModule.quotient_hom"]], "quotient_module() (sympy.polys.agca.modules.freemodule method)": [[198, "sympy.polys.agca.modules.FreeModule.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.module method)": [[198, "sympy.polys.agca.modules.Module.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.submodule method)": [[198, "sympy.polys.agca.modules.SubModule.quotient_module"]], "radical() (sympy.polys.agca.ideals.ideal method)": [[198, "sympy.polys.agca.ideals.Ideal.radical"]], "reduce_element() (sympy.polys.agca.ideals.ideal method)": [[198, "sympy.polys.agca.ideals.Ideal.reduce_element"]], "reduce_element() (sympy.polys.agca.modules.submodule method)": [[198, "sympy.polys.agca.modules.SubModule.reduce_element"]], "restrict_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[198, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_codomain"]], "restrict_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[198, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_domain"]], "saturate() (sympy.polys.agca.ideals.ideal method)": [[198, "sympy.polys.agca.ideals.Ideal.saturate"]], "submodule() (sympy.polys.agca.modules.module method)": [[198, "sympy.polys.agca.modules.Module.submodule"]], "submodule() (sympy.polys.agca.modules.quotientmodule method)": [[198, "sympy.polys.agca.modules.QuotientModule.submodule"]], "submodule() (sympy.polys.agca.modules.submodule method)": [[198, "sympy.polys.agca.modules.SubModule.submodule"]], "subset() (sympy.polys.agca.ideals.ideal method)": [[198, "sympy.polys.agca.ideals.Ideal.subset"]], "subset() (sympy.polys.agca.modules.module method)": [[198, "sympy.polys.agca.modules.Module.subset"]], "syzygy_module() (sympy.polys.agca.modules.submodule method)": [[198, "sympy.polys.agca.modules.SubModule.syzygy_module"]], "union() (sympy.polys.agca.ideals.ideal method)": [[198, "sympy.polys.agca.ideals.Ideal.union"]], "union() (sympy.polys.agca.modules.submodule method)": [[198, "sympy.polys.agca.modules.SubModule.union"]], "ddm (class in sympy.polys.matrices.ddm)": [[200, "sympy.polys.matrices.ddm.DDM"]], "domainmatrix (class in sympy.polys.matrices.domainmatrix)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix"]], "sdm (class in sympy.polys.matrices.sdm)": [[200, "sympy.polys.matrices.sdm.SDM"]], "add() (sympy.polys.matrices.ddm.ddm method)": [[200, "sympy.polys.matrices.ddm.DDM.add"]], "add() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.add"]], "add() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.add"]], "charpoly() (sympy.polys.matrices.ddm.ddm method)": [[200, "sympy.polys.matrices.ddm.DDM.charpoly"]], "charpoly() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly"]], "charpoly() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.charpoly"]], "columnspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.columnspace"]], "convert_to() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.convert_to"]], "convert_to() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.convert_to"]], "copy() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.copy"]], "det() (sympy.polys.matrices.ddm.ddm method)": [[200, "sympy.polys.matrices.ddm.DDM.det"]], "det() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.det"]], "det() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.det"]], "diag() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.diag"]], "eye() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.eye"]], "eye() (sympy.polys.matrices.sdm.sdm class method)": [[200, "sympy.polys.matrices.sdm.SDM.eye"]], "from_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix"]], "from_ddm() (sympy.polys.matrices.sdm.sdm class method)": [[200, "sympy.polys.matrices.sdm.SDM.from_ddm"]], "from_dict_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dict_sympy"]], "from_list() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list"]], "from_list() (sympy.polys.matrices.sdm.sdm class method)": [[200, "sympy.polys.matrices.sdm.SDM.from_list"]], "from_list_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_sympy"]], "from_rep() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_rep"]], "hermite_normal_form() (in module sympy.polys.matrices.normalforms)": [[200, "sympy.polys.matrices.normalforms.hermite_normal_form"]], "hstack() (sympy.polys.matrices.ddm.ddm method)": [[200, "sympy.polys.matrices.ddm.DDM.hstack"]], "hstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.hstack"]], "hstack() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.hstack"]], "inv() (sympy.polys.matrices.ddm.ddm method)": [[200, "sympy.polys.matrices.ddm.DDM.inv"]], "inv() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.inv"]], "inv() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.inv"]], "is_lower (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_lower"]], "is_lower() (sympy.polys.matrices.ddm.ddm method)": [[200, "sympy.polys.matrices.ddm.DDM.is_lower"]], "is_lower() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.is_lower"]], "is_upper (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_upper"]], "is_upper() (sympy.polys.matrices.ddm.ddm method)": [[200, "sympy.polys.matrices.ddm.DDM.is_upper"]], "is_upper() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.is_upper"]], "is_zero_matrix() (sympy.polys.matrices.ddm.ddm method)": [[200, "sympy.polys.matrices.ddm.DDM.is_zero_matrix"]], "is_zero_matrix() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.is_zero_matrix"]], "lll() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.lll"]], "lll_transform() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.lll_transform"]], "lu() (sympy.polys.matrices.ddm.ddm method)": [[200, "sympy.polys.matrices.ddm.DDM.lu"]], "lu() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu"]], "lu() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.lu"]], "lu_solve() (sympy.polys.matrices.ddm.ddm method)": [[200, "sympy.polys.matrices.ddm.DDM.lu_solve"]], "lu_solve() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve"]], "lu_solve() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.lu_solve"]], "matmul() (sympy.polys.matrices.ddm.ddm method)": [[200, "sympy.polys.matrices.ddm.DDM.matmul"]], "matmul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.matmul"]], "matmul() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.matmul"]], "mul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.mul"]], "mul() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.mul"]], "neg() (sympy.polys.matrices.ddm.ddm method)": [[200, "sympy.polys.matrices.ddm.DDM.neg"]], "neg() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.neg"]], "neg() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.neg"]], "new() (sympy.polys.matrices.sdm.sdm class method)": [[200, "sympy.polys.matrices.sdm.SDM.new"]], "nullspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace"]], "nullspace() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.nullspace"]], "ones() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.ones"]], "pow() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.pow"]], "rowspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.rowspace"]], "rref() (sympy.polys.matrices.ddm.ddm method)": [[200, "sympy.polys.matrices.ddm.DDM.rref"]], "rref() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.rref"]], "rref() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.rref"]], "scc() (sympy.polys.matrices.ddm.ddm method)": [[200, "sympy.polys.matrices.ddm.DDM.scc"]], "scc() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.scc"]], "scc() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.scc"]], "smith_normal_form() (in module sympy.polys.matrices.normalforms)": [[200, "sympy.polys.matrices.normalforms.smith_normal_form"]], "sub() (sympy.polys.matrices.ddm.ddm method)": [[200, "sympy.polys.matrices.ddm.DDM.sub"]], "sub() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.sub"]], "sub() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.sub"]], "to_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_Matrix"]], "to_ddm() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.to_ddm"]], "to_dense() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense"]], "to_field() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_field"]], "to_list() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.to_list"]], "to_sparse() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_sparse"]], "transpose() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.transpose"]], "transpose() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.transpose"]], "unify() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.unify"]], "vstack() (sympy.polys.matrices.ddm.ddm method)": [[200, "sympy.polys.matrices.ddm.DDM.vstack"]], "vstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.vstack"]], "vstack() (sympy.polys.matrices.sdm.sdm method)": [[200, "sympy.polys.matrices.sdm.SDM.vstack"]], "zeros() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[200, "sympy.polys.matrices.domainmatrix.DomainMatrix.zeros"]], "zeros() (sympy.polys.matrices.sdm.sdm class method)": [[200, "sympy.polys.matrices.sdm.SDM.zeros"]], "anp (class in sympy.polys.polyclasses)": [[202, "sympy.polys.polyclasses.ANP"]], "algebraicfield (class in sympy.polys.domains)": [[202, "sympy.polys.domains.AlgebraicField"]], "complexelement (class in sympy.polys.domains.mpelements)": [[202, "sympy.polys.domains.mpelements.ComplexElement"]], "complexfield (class in sympy.polys.domains)": [[202, "sympy.polys.domains.ComplexField"]], "compositedomain (class in sympy.polys.domains.compositedomain)": [[202, "sympy.polys.domains.compositedomain.CompositeDomain"]], "dmf (class in sympy.polys.polyclasses)": [[202, "sympy.polys.polyclasses.DMF"]], "dmp (class in sympy.polys.polyclasses)": [[202, "sympy.polys.polyclasses.DMP"]], "domain (class in sympy.polys.domains.domain)": [[202, "sympy.polys.domains.domain.Domain"]], "domainelement (class in sympy.polys.domains.domainelement)": [[202, "sympy.polys.domains.domainelement.DomainElement"]], "expressiondomain (class in sympy.polys.domains)": [[202, "sympy.polys.domains.ExpressionDomain"]], "expressiondomain.expression (class in sympy.polys.domains)": [[202, "sympy.polys.domains.ExpressionDomain.Expression"]], "expressiondomain.expression (class in sympy.polys.domains.expressiondomain)": [[202, "sympy.polys.domains.expressiondomain.ExpressionDomain.Expression"]], "field (class in sympy.polys.domains.field)": [[202, "sympy.polys.domains.field.Field"]], "finitefield (class in sympy.polys.domains)": [[202, "sympy.polys.domains.FiniteField"]], "fracelement (class in sympy.polys.fields)": [[202, "sympy.polys.fields.FracElement"]], "fracfield (class in sympy.polys.fields)": [[202, "sympy.polys.fields.FracField"]], "fractionfield (class in sympy.polys.domains)": [[202, "sympy.polys.domains.FractionField"]], "gmpyfinitefield (class in sympy.polys.domains)": [[202, "sympy.polys.domains.GMPYFiniteField"]], "gmpyintegerring (class in sympy.polys.domains)": [[202, "sympy.polys.domains.GMPYIntegerRing"]], "gmpyrationalfield (class in sympy.polys.domains)": [[202, "sympy.polys.domains.GMPYRationalField"]], "gaussiandomain (class in sympy.polys.domains.gaussiandomains)": [[202, "sympy.polys.domains.gaussiandomains.GaussianDomain"]], "gaussianelement (class in sympy.polys.domains.gaussiandomains)": [[202, "sympy.polys.domains.gaussiandomains.GaussianElement"]], "gaussianinteger (class in sympy.polys.domains.gaussiandomains)": [[202, "sympy.polys.domains.gaussiandomains.GaussianInteger"]], "gaussianintegerring (class in sympy.polys.domains.gaussiandomains)": [[202, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing"]], "gaussianrational (class in sympy.polys.domains.gaussiandomains)": [[202, "sympy.polys.domains.gaussiandomains.GaussianRational"]], "gaussianrationalfield (class in sympy.polys.domains.gaussiandomains)": [[202, "sympy.polys.domains.gaussiandomains.GaussianRationalField"]], "integerring (class in sympy.polys.domains)": [[202, "sympy.polys.domains.IntegerRing"]], "lc() (sympy.polys.polyclasses.anp method)": [[202, "sympy.polys.polyclasses.ANP.LC"]], "lc() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.LC"]], "polyelement (class in sympy.polys.rings)": [[202, "sympy.polys.rings.PolyElement"]], "polyring (class in sympy.polys.rings)": [[202, "sympy.polys.rings.PolyRing"]], "polynomialring (class in sympy.polys.domains)": [[202, "sympy.polys.domains.PolynomialRing"]], "pythonfinitefield (class in sympy.polys.domains)": [[202, "sympy.polys.domains.PythonFiniteField"]], "pythonintegerring (class in sympy.polys.domains)": [[202, "sympy.polys.domains.PythonIntegerRing"]], "pythonmpq (class in sympy.external.pythonmpq)": [[202, "sympy.external.pythonmpq.PythonMPQ"]], "pythonrationalfield (class in sympy.polys.domains)": [[202, "sympy.polys.domains.PythonRationalField"]], "quotientring (class in sympy.polys.domains.quotientring)": [[202, "sympy.polys.domains.quotientring.QuotientRing"]], "rationalfield (class in sympy.polys.domains)": [[202, "sympy.polys.domains.RationalField"]], "realelement (class in sympy.polys.domains.mpelements)": [[202, "sympy.polys.domains.mpelements.RealElement"]], "realfield (class in sympy.polys.domains)": [[202, "sympy.polys.domains.RealField"]], "ring (class in sympy.polys.domains.ring)": [[202, "sympy.polys.domains.ring.Ring"]], "simpledomain (class in sympy.polys.domains.simpledomain)": [[202, "sympy.polys.domains.simpledomain.SimpleDomain"]], "tc() (sympy.polys.polyclasses.anp method)": [[202, "sympy.polys.polyclasses.ANP.TC"]], "tc() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.TC"]], "abs() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.abs"]], "abs() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.abs"]], "add() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.add"]], "add() (sympy.polys.polyclasses.dmf method)": [[202, "sympy.polys.polyclasses.DMF.add"]], "add() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.add"]], "add() (sympy.polys.rings.polyring method)": [[202, "sympy.polys.rings.PolyRing.add"]], "add_gens() (sympy.polys.rings.polyring method)": [[202, "sympy.polys.rings.PolyRing.add_gens"]], "add_ground() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.add_ground"]], "alg_field_from_poly() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.alg_field_from_poly"]], "algebraic_field() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.algebraic_field"]], "algebraic_field() (sympy.polys.domains.rationalfield method)": [[202, "sympy.polys.domains.RationalField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.algebraic_field"]], "all_coeffs() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.all_coeffs"]], "all_monoms() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.all_monoms"]], "all_terms() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.all_terms"]], "almosteq() (sympy.polys.domains.complexfield method)": [[202, "sympy.polys.domains.ComplexField.almosteq"]], "almosteq() (sympy.polys.domains.realfield method)": [[202, "sympy.polys.domains.RealField.almosteq"]], "almosteq() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.almosteq"]], "almosteq() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.almosteq"]], "as_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianRationalField.as_AlgebraicField"]], "cancel() (sympy.polys.polyclasses.dmf method)": [[202, "sympy.polys.polyclasses.DMF.cancel"]], "cancel() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.cancel"]], "cancel() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.cancel"]], "cauchy_lower_bound() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.cauchy_lower_bound"]], "cauchy_upper_bound() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.cauchy_upper_bound"]], "characteristic() (sympy.polys.domains.finitefield method)": [[202, "sympy.polys.domains.FiniteField.characteristic"]], "characteristic() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.characteristic"]], "clear_denoms() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.clear_denoms"]], "coeff() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.coeff"]], "coeffs() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.coeffs"]], "coeffs() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.coeffs"]], "cofactors() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.cofactors"]], "cofactors() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.cofactors"]], "compose() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.compose"]], "compose() (sympy.polys.rings.polyring method)": [[202, "sympy.polys.rings.PolyRing.compose"]], "const() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.const"]], "content() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.content"]], "content() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.content"]], "convert() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.convert"]], "convert() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.convert"]], "convert_from() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.convert_from"]], "copy() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.copy"]], "count_complex_roots() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.count_complex_roots"]], "count_real_roots() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.count_real_roots"]], "cyclotomic_field() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.cyclotomic_field"]], "decompose() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.decompose"]], "deflate() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.deflate"]], "degree() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.degree"]], "degree() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.degree"]], "degree_list() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.degree_list"]], "degrees() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.degrees"]], "denom() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.denom"]], "denom() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.denom"]], "denom() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.denom"]], "denom() (sympy.polys.domains.gmpyrationalfield method)": [[202, "sympy.polys.domains.GMPYRationalField.denom"]], "denom() (sympy.polys.domains.rationalfield method)": [[202, "sympy.polys.domains.RationalField.denom"]], "denom() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.denom"]], "denom() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianRationalField.denom"]], "denom() (sympy.polys.domains.ring.ring method)": [[202, "sympy.polys.domains.ring.Ring.denom"]], "denom() (sympy.polys.polyclasses.dmf method)": [[202, "sympy.polys.polyclasses.DMF.denom"]], "diff() (sympy.polys.fields.fracelement method)": [[202, "sympy.polys.fields.FracElement.diff"]], "diff() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.diff"]], "diff() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.diff"]], "discriminant() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.discriminant"]], "discriminant() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.discriminant"]], "div() (sympy.polys.domains.gmpyrationalfield method)": [[202, "sympy.polys.domains.GMPYRationalField.div"]], "div() (sympy.polys.domains.rationalfield method)": [[202, "sympy.polys.domains.RationalField.div"]], "div() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.div"]], "div() (sympy.polys.domains.field.field method)": [[202, "sympy.polys.domains.field.Field.div"]], "div() (sympy.polys.domains.ring.ring method)": [[202, "sympy.polys.domains.ring.Ring.div"]], "div() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.div"]], "div() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.div"]], "drop() (sympy.polys.domains.compositedomain.compositedomain method)": [[202, "sympy.polys.domains.compositedomain.CompositeDomain.drop"]], "drop() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.drop"]], "drop() (sympy.polys.rings.polyring method)": [[202, "sympy.polys.rings.PolyRing.drop"]], "drop_to_ground() (sympy.polys.rings.polyring method)": [[202, "sympy.polys.rings.PolyRing.drop_to_ground"]], "dtype (sympy.polys.domains.algebraicfield attribute)": [[202, "sympy.polys.domains.AlgebraicField.dtype"]], "dtype (sympy.polys.domains.expressiondomain attribute)": [[202, "sympy.polys.domains.ExpressionDomain.dtype"]], "dtype (sympy.polys.domains.domain.domain attribute)": [[202, "sympy.polys.domains.domain.Domain.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianintegerring attribute)": [[202, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianrationalfield attribute)": [[202, "sympy.polys.domains.gaussiandomains.GaussianRationalField.dtype"]], "eject() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.eject"]], "eval() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.eval"]], "evalf() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.evalf"]], "exclude() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.exclude"]], "exquo() (sympy.polys.domains.gmpyrationalfield method)": [[202, "sympy.polys.domains.GMPYRationalField.exquo"]], "exquo() (sympy.polys.domains.rationalfield method)": [[202, "sympy.polys.domains.RationalField.exquo"]], "exquo() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.exquo"]], "exquo() (sympy.polys.domains.field.field method)": [[202, "sympy.polys.domains.field.Field.exquo"]], "exquo() (sympy.polys.domains.ring.ring method)": [[202, "sympy.polys.domains.ring.Ring.exquo"]], "exquo() (sympy.polys.polyclasses.dmf method)": [[202, "sympy.polys.polyclasses.DMF.exquo"]], "exquo() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.exquo"]], "exquo_ground() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.exquo_ground"]], "ext (sympy.polys.domains.algebraicfield attribute)": [[202, "sympy.polys.domains.AlgebraicField.ext"]], "factor_list() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.factor_list"]], "factor_list_include() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.factor_list_include"]], "factorial() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.factorial"]], "factorial() (sympy.polys.domains.gmpyintegerring method)": [[202, "sympy.polys.domains.GMPYIntegerRing.factorial"]], "factorial() (sympy.polys.domains.gmpyrationalfield method)": [[202, "sympy.polys.domains.GMPYRationalField.factorial"]], "factorial() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.factorial"]], "factorial() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.factorial"]], "field() (in module sympy.polys.fields)": [[202, "sympy.polys.fields.field"]], "frac_field() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.frac_field"]], "frac_unify() (sympy.polys.polyclasses.dmf method)": [[202, "sympy.polys.polyclasses.DMF.frac_unify"]], "free_module() (sympy.polys.domains.ring.ring method)": [[202, "sympy.polys.domains.ring.Ring.free_module"]], "from_algebraicfield() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.rationalfield method)": [[202, "sympy.polys.domains.RationalField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_AlgebraicField"]], "from_complexfield() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.from_ComplexField"]], "from_expressiondomain() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.from_ExpressionDomain"]], "from_expressiondomain() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.from_ExpressionDomain"]], "from_expressionrawdomain() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.from_ExpressionRawDomain"]], "from_ff() (sympy.polys.domains.finitefield method)": [[202, "sympy.polys.domains.FiniteField.from_FF"]], "from_ff() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.from_FF"]], "from_ff() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.from_FF"]], "from_ff_gmpy() (sympy.polys.domains.finitefield method)": [[202, "sympy.polys.domains.FiniteField.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[202, "sympy.polys.domains.GMPYIntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.from_FF_gmpy"]], "from_ff_python() (sympy.polys.domains.finitefield method)": [[202, "sympy.polys.domains.FiniteField.from_FF_python"]], "from_ff_python() (sympy.polys.domains.gmpyintegerring method)": [[202, "sympy.polys.domains.GMPYIntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.from_FF_python"]], "from_fractionfield() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.from_FractionField"]], "from_gaussianintegerring() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianIntegerRing"]], "from_gaussianrationalfield() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gmpyrationalfield method)": [[202, "sympy.polys.domains.GMPYRationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.rationalfield method)": [[202, "sympy.polys.domains.RationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianRationalField"]], "from_globalpolynomialring() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.from_GlobalPolynomialRing"]], "from_globalpolynomialring() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.from_GlobalPolynomialRing"]], "from_monogenicfiniteextension() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.from_MonogenicFiniteExtension"]], "from_polynomialring() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.from_PolynomialRing"]], "from_qq() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.from_QQ"]], "from_qq() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.from_QQ"]], "from_qq() (sympy.polys.domains.finitefield method)": [[202, "sympy.polys.domains.FiniteField.from_QQ"]], "from_qq() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.from_QQ"]], "from_qq() (sympy.polys.domains.gmpyintegerring method)": [[202, "sympy.polys.domains.GMPYIntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.from_QQ"]], "from_qq() (sympy.polys.domains.rationalfield method)": [[202, "sympy.polys.domains.RationalField.from_QQ"]], "from_qq() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ"]], "from_qq_gmpy() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.finitefield method)": [[202, "sympy.polys.domains.FiniteField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[202, "sympy.polys.domains.GMPYIntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[202, "sympy.polys.domains.GMPYRationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.rationalfield method)": [[202, "sympy.polys.domains.RationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_gmpy"]], "from_qq_python() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.finitefield method)": [[202, "sympy.polys.domains.FiniteField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyintegerring method)": [[202, "sympy.polys.domains.GMPYIntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyrationalfield method)": [[202, "sympy.polys.domains.GMPYRationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.rationalfield method)": [[202, "sympy.polys.domains.RationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_python"]], "from_realfield() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.from_RealField"]], "from_realfield() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.from_RealField"]], "from_realfield() (sympy.polys.domains.finitefield method)": [[202, "sympy.polys.domains.FiniteField.from_RealField"]], "from_realfield() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyintegerring method)": [[202, "sympy.polys.domains.GMPYIntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyrationalfield method)": [[202, "sympy.polys.domains.GMPYRationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.from_RealField"]], "from_realfield() (sympy.polys.domains.rationalfield method)": [[202, "sympy.polys.domains.RationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.from_RealField"]], "from_zz() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.from_ZZ"]], "from_zz() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.from_ZZ"]], "from_zz() (sympy.polys.domains.finitefield method)": [[202, "sympy.polys.domains.FiniteField.from_ZZ"]], "from_zz() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.from_ZZ"]], "from_zz() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.from_ZZ"]], "from_zz() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.from_ZZ"]], "from_zz() (sympy.polys.domains.rationalfield method)": [[202, "sympy.polys.domains.RationalField.from_ZZ"]], "from_zz() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ"]], "from_zz_gmpy() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.finitefield method)": [[202, "sympy.polys.domains.FiniteField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[202, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[202, "sympy.polys.domains.GMPYRationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.rationalfield method)": [[202, "sympy.polys.domains.RationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_gmpy"]], "from_zz_python() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.finitefield method)": [[202, "sympy.polys.domains.FiniteField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyintegerring method)": [[202, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyrationalfield method)": [[202, "sympy.polys.domains.GMPYRationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.rationalfield method)": [[202, "sympy.polys.domains.RationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_python"]], "from_dict() (sympy.polys.polyclasses.dmp class method)": [[202, "sympy.polys.polyclasses.DMP.from_dict"]], "from_list() (sympy.polys.polyclasses.dmp class method)": [[202, "sympy.polys.polyclasses.DMP.from_list"]], "from_sympy() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.from_sympy"]], "from_sympy() (sympy.polys.domains.complexfield method)": [[202, "sympy.polys.domains.ComplexField.from_sympy"]], "from_sympy() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.from_sympy"]], "from_sympy() (sympy.polys.domains.finitefield method)": [[202, "sympy.polys.domains.FiniteField.from_sympy"]], "from_sympy() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyintegerring method)": [[202, "sympy.polys.domains.GMPYIntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[202, "sympy.polys.domains.GMPYRationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.from_sympy"]], "from_sympy() (sympy.polys.domains.rationalfield method)": [[202, "sympy.polys.domains.RationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.realfield method)": [[202, "sympy.polys.domains.RealField.from_sympy"]], "from_sympy() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.from_sympy"]], "from_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_sympy"]], "from_sympy_list() (sympy.polys.polyclasses.dmp class method)": [[202, "sympy.polys.polyclasses.DMP.from_sympy_list"]], "galois_group() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.galois_group"]], "gcd() (sympy.polys.domains.complexfield method)": [[202, "sympy.polys.domains.ComplexField.gcd"]], "gcd() (sympy.polys.domains.gmpyintegerring method)": [[202, "sympy.polys.domains.GMPYIntegerRing.gcd"]], "gcd() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.gcd"]], "gcd() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.gcd"]], "gcd() (sympy.polys.domains.realfield method)": [[202, "sympy.polys.domains.RealField.gcd"]], "gcd() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.gcd"]], "gcd() (sympy.polys.domains.field.field method)": [[202, "sympy.polys.domains.field.Field.gcd"]], "gcd() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.gcd"]], "gcd() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.gcd"]], "gcdex() (sympy.polys.domains.gmpyintegerring method)": [[202, "sympy.polys.domains.GMPYIntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.gcdex"]], "gcdex() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.gcdex"]], "gcdex() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.gcdex"]], "get_exact() (sympy.polys.domains.complexfield method)": [[202, "sympy.polys.domains.ComplexField.get_exact"]], "get_exact() (sympy.polys.domains.realfield method)": [[202, "sympy.polys.domains.RealField.get_exact"]], "get_exact() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.get_exact"]], "get_field() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.get_field"]], "get_field() (sympy.polys.domains.finitefield method)": [[202, "sympy.polys.domains.FiniteField.get_field"]], "get_field() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.get_field"]], "get_field() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.get_field"]], "get_field() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.get_field"]], "get_field() (sympy.polys.domains.field.field method)": [[202, "sympy.polys.domains.field.Field.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_field"]], "get_ring() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.get_ring"]], "get_ring() (sympy.polys.domains.complexfield method)": [[202, "sympy.polys.domains.ComplexField.get_ring"]], "get_ring() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.get_ring"]], "get_ring() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.get_ring"]], "get_ring() (sympy.polys.domains.gmpyrationalfield method)": [[202, "sympy.polys.domains.GMPYRationalField.get_ring"]], "get_ring() (sympy.polys.domains.rationalfield method)": [[202, "sympy.polys.domains.RationalField.get_ring"]], "get_ring() (sympy.polys.domains.realfield method)": [[202, "sympy.polys.domains.RealField.get_ring"]], "get_ring() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.get_ring"]], "get_ring() (sympy.polys.domains.field.field method)": [[202, "sympy.polys.domains.field.Field.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_ring"]], "get_ring() (sympy.polys.domains.ring.ring method)": [[202, "sympy.polys.domains.ring.Ring.get_ring"]], "gff_list() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.gff_list"]], "half_gcdex() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.half_gcdex"]], "half_gcdex() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.half_gcdex"]], "half_per() (sympy.polys.polyclasses.dmf method)": [[202, "sympy.polys.polyclasses.DMF.half_per"]], "has_assoc_field (sympy.polys.domains.domain.domain attribute)": [[202, "sympy.polys.domains.domain.Domain.has_assoc_Field"]], "has_assoc_ring (sympy.polys.domains.domain.domain attribute)": [[202, "sympy.polys.domains.domain.Domain.has_assoc_Ring"]], "homogeneous_order() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.homogeneous_order"]], "homogenize() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.homogenize"]], "ideal() (sympy.polys.domains.ring.ring method)": [[202, "sympy.polys.domains.ring.Ring.ideal"]], "imul_num() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.imul_num"]], "index() (sympy.polys.rings.polyring method)": [[202, "sympy.polys.rings.PolyRing.index"]], "inject() (sympy.polys.domains.compositedomain.compositedomain method)": [[202, "sympy.polys.domains.compositedomain.CompositeDomain.inject"]], "inject() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.inject"]], "inject() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianDomain.inject"]], "inject() (sympy.polys.domains.simpledomain.simpledomain method)": [[202, "sympy.polys.domains.simpledomain.SimpleDomain.inject"]], "inject() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.inject"]], "integral_basis() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.integral_basis"]], "integrate() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.integrate"]], "intervals() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.intervals"]], "invert() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.invert"]], "invert() (sympy.polys.domains.ring.ring method)": [[202, "sympy.polys.domains.ring.Ring.invert"]], "invert() (sympy.polys.polyclasses.dmf method)": [[202, "sympy.polys.polyclasses.DMF.invert"]], "invert() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.invert"]], "is_field (sympy.polys.domains.domain.domain attribute)": [[202, "sympy.polys.domains.domain.Domain.is_Field"]], "is_pid (sympy.polys.domains.domain.domain attribute)": [[202, "sympy.polys.domains.domain.Domain.is_PID"]], "is_ring (sympy.polys.domains.domain.domain attribute)": [[202, "sympy.polys.domains.domain.Domain.is_Ring"]], "is_cyclotomic (sympy.polys.polyclasses.dmp property)": [[202, "sympy.polys.polyclasses.DMP.is_cyclotomic"]], "is_ground (sympy.polys.polyclasses.anp property)": [[202, "sympy.polys.polyclasses.ANP.is_ground"]], "is_ground (sympy.polys.polyclasses.dmp property)": [[202, "sympy.polys.polyclasses.DMP.is_ground"]], "is_homogeneous (sympy.polys.polyclasses.dmp property)": [[202, "sympy.polys.polyclasses.DMP.is_homogeneous"]], "is_irreducible (sympy.polys.polyclasses.dmp property)": [[202, "sympy.polys.polyclasses.DMP.is_irreducible"]], "is_linear (sympy.polys.polyclasses.dmp property)": [[202, "sympy.polys.polyclasses.DMP.is_linear"]], "is_monic (sympy.polys.polyclasses.dmp property)": [[202, "sympy.polys.polyclasses.DMP.is_monic"]], "is_monomial (sympy.polys.polyclasses.dmp property)": [[202, "sympy.polys.polyclasses.DMP.is_monomial"]], "is_negative() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.is_negative"]], "is_negative() (sympy.polys.domains.complexfield method)": [[202, "sympy.polys.domains.ComplexField.is_negative"]], "is_negative() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.is_negative"]], "is_negative() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.is_negative"]], "is_negative() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.is_negative"]], "is_negative() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.is_negative"]], "is_negative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_negative"]], "is_nonnegative() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.complexfield method)": [[202, "sympy.polys.domains.ComplexField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonnegative"]], "is_nonpositive() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.complexfield method)": [[202, "sympy.polys.domains.ComplexField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonpositive"]], "is_one (sympy.polys.polyclasses.anp property)": [[202, "sympy.polys.polyclasses.ANP.is_one"]], "is_one (sympy.polys.polyclasses.dmf property)": [[202, "sympy.polys.polyclasses.DMF.is_one"]], "is_one (sympy.polys.polyclasses.dmp property)": [[202, "sympy.polys.polyclasses.DMP.is_one"]], "is_one() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.is_one"]], "is_positive() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.is_positive"]], "is_positive() (sympy.polys.domains.complexfield method)": [[202, "sympy.polys.domains.ComplexField.is_positive"]], "is_positive() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.is_positive"]], "is_positive() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.is_positive"]], "is_positive() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.is_positive"]], "is_positive() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.is_positive"]], "is_positive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_positive"]], "is_primitive (sympy.polys.polyclasses.dmp property)": [[202, "sympy.polys.polyclasses.DMP.is_primitive"]], "is_quadratic (sympy.polys.polyclasses.dmp property)": [[202, "sympy.polys.polyclasses.DMP.is_quadratic"]], "is_sqf (sympy.polys.polyclasses.dmp property)": [[202, "sympy.polys.polyclasses.DMP.is_sqf"]], "is_unit() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.is_unit"]], "is_unit() (sympy.polys.domains.field.field method)": [[202, "sympy.polys.domains.field.Field.is_unit"]], "is_zero (sympy.polys.polyclasses.anp property)": [[202, "sympy.polys.polyclasses.ANP.is_zero"]], "is_zero (sympy.polys.polyclasses.dmf property)": [[202, "sympy.polys.polyclasses.DMF.is_zero"]], "is_zero (sympy.polys.polyclasses.dmp property)": [[202, "sympy.polys.polyclasses.DMP.is_zero"]], "is_zero() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.is_zero"]], "itercoeffs() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.itercoeffs"]], "itermonoms() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.itermonoms"]], "iterterms() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.iterterms"]], "l1_norm() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.l1_norm"]], "l2_norm_squared() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.l2_norm_squared"]], "lcm() (sympy.polys.domains.complexfield method)": [[202, "sympy.polys.domains.ComplexField.lcm"]], "lcm() (sympy.polys.domains.gmpyintegerring method)": [[202, "sympy.polys.domains.GMPYIntegerRing.lcm"]], "lcm() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.lcm"]], "lcm() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.lcm"]], "lcm() (sympy.polys.domains.realfield method)": [[202, "sympy.polys.domains.RealField.lcm"]], "lcm() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.lcm"]], "lcm() (sympy.polys.domains.field.field method)": [[202, "sympy.polys.domains.field.Field.lcm"]], "lcm() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.lcm"]], "lcm() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.lcm"]], "leading_expv() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.leading_expv"]], "leading_monom() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.leading_monom"]], "leading_term() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.leading_term"]], "lift() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.lift"]], "listcoeffs() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.listcoeffs"]], "listmonoms() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.listmonoms"]], "listterms() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.listterms"]], "log() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.log"]], "log() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.log"]], "map() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.map"]], "max_norm() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.max_norm"]], "maximal_order() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.maximal_order"]], "mignotte_sep_bound_squared() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.mignotte_sep_bound_squared"]], "mod (sympy.polys.domains.algebraicfield attribute)": [[202, "sympy.polys.domains.AlgebraicField.mod"]], "monic() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.monic"]], "monic() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.monic"]], "monomial_basis() (sympy.polys.rings.polyring method)": [[202, "sympy.polys.rings.PolyRing.monomial_basis"]], "monoms() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.monoms"]], "monoms() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.monoms"]], "mul() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.mul"]], "mul() (sympy.polys.polyclasses.dmf method)": [[202, "sympy.polys.polyclasses.DMF.mul"]], "mul() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.mul"]], "mul() (sympy.polys.rings.polyring method)": [[202, "sympy.polys.rings.PolyRing.mul"]], "mul_ground() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.mul_ground"]], "n() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.n"]], "neg() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.neg"]], "neg() (sympy.polys.polyclasses.dmf method)": [[202, "sympy.polys.polyclasses.DMF.neg"]], "neg() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.neg"]], "new() (sympy.polys.domains.gaussiandomains.gaussianelement class method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianElement.new"]], "norm() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.norm"]], "normalize() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.normalize"]], "nth() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.nth"]], "numer() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.numer"]], "numer() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.numer"]], "numer() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.numer"]], "numer() (sympy.polys.domains.gmpyrationalfield method)": [[202, "sympy.polys.domains.GMPYRationalField.numer"]], "numer() (sympy.polys.domains.rationalfield method)": [[202, "sympy.polys.domains.RationalField.numer"]], "numer() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.numer"]], "numer() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianRationalField.numer"]], "numer() (sympy.polys.domains.ring.ring method)": [[202, "sympy.polys.domains.ring.Ring.numer"]], "numer() (sympy.polys.polyclasses.dmf method)": [[202, "sympy.polys.polyclasses.DMF.numer"]], "of_type() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.of_type"]], "old_frac_field() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.old_frac_field"]], "old_poly_ring() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.old_poly_ring"]], "one (sympy.polys.domains.domain.domain attribute)": [[202, "sympy.polys.domains.domain.Domain.one"]], "orig_ext (sympy.polys.domains.algebraicfield attribute)": [[202, "sympy.polys.domains.AlgebraicField.orig_ext"]], "parent() (sympy.polys.domains.domainelement.domainelement method)": [[202, "sympy.polys.domains.domainelement.DomainElement.parent"]], "parent() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianElement.parent"]], "pdiv() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.pdiv"]], "per() (sympy.polys.polyclasses.dmf method)": [[202, "sympy.polys.polyclasses.DMF.per"]], "per() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.per"]], "permute() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.permute"]], "pexquo() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.pexquo"]], "poly_ring() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.poly_ring"]], "poly_unify() (sympy.polys.polyclasses.dmf method)": [[202, "sympy.polys.polyclasses.DMF.poly_unify"]], "pos() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.pos"]], "pow() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.pow"]], "pow() (sympy.polys.polyclasses.anp method)": [[202, "sympy.polys.polyclasses.ANP.pow"]], "pow() (sympy.polys.polyclasses.dmf method)": [[202, "sympy.polys.polyclasses.DMF.pow"]], "pow() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.pow"]], "pquo() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.pquo"]], "prem() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.prem"]], "primes_above() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.primes_above"]], "primitive() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.primitive"]], "primitive() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.primitive"]], "quadrant() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianElement.quadrant"]], "quo() (sympy.polys.domains.gmpyrationalfield method)": [[202, "sympy.polys.domains.GMPYRationalField.quo"]], "quo() (sympy.polys.domains.rationalfield method)": [[202, "sympy.polys.domains.RationalField.quo"]], "quo() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.quo"]], "quo() (sympy.polys.domains.field.field method)": [[202, "sympy.polys.domains.field.Field.quo"]], "quo() (sympy.polys.domains.ring.ring method)": [[202, "sympy.polys.domains.ring.Ring.quo"]], "quo() (sympy.polys.polyclasses.dmf method)": [[202, "sympy.polys.polyclasses.DMF.quo"]], "quo() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.quo"]], "quo_ground() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.quo_ground"]], "quotient_ring() (sympy.polys.domains.ring.ring method)": [[202, "sympy.polys.domains.ring.Ring.quotient_ring"]], "refine_root() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.refine_root"]], "rem() (sympy.polys.domains.gmpyrationalfield method)": [[202, "sympy.polys.domains.GMPYRationalField.rem"]], "rem() (sympy.polys.domains.rationalfield method)": [[202, "sympy.polys.domains.RationalField.rem"]], "rem() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.rem"]], "rem() (sympy.polys.domains.field.field method)": [[202, "sympy.polys.domains.field.Field.rem"]], "rem() (sympy.polys.domains.ring.ring method)": [[202, "sympy.polys.domains.ring.Ring.rem"]], "rem() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.rem"]], "resultant() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.resultant"]], "revert() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.revert"]], "revert() (sympy.polys.domains.field.field method)": [[202, "sympy.polys.domains.field.Field.revert"]], "revert() (sympy.polys.domains.ring.ring method)": [[202, "sympy.polys.domains.ring.Ring.revert"]], "revert() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.revert"]], "ring() (in module sympy.polys.rings)": [[202, "sympy.polys.rings.ring"]], "sfield() (in module sympy.polys.fields)": [[202, "sympy.polys.fields.sfield"]], "shift() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.shift"]], "slice() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.slice"]], "sqf_list() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.sqf_list"]], "sqf_list_include() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.sqf_list_include"]], "sqf_norm() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.sqf_norm"]], "sqf_part() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.sqf_part"]], "sqr() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.sqr"]], "sqrt() (sympy.polys.domains.gmpyintegerring method)": [[202, "sympy.polys.domains.GMPYIntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.sqrt"]], "square() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.square"]], "sring() (in module sympy.polys.rings)": [[202, "sympy.polys.rings.sring"]], "strip_zero() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.strip_zero"]], "sturm() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.sturm"]], "sub() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.sub"]], "sub() (sympy.polys.polyclasses.dmf method)": [[202, "sympy.polys.polyclasses.DMF.sub"]], "sub() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.sub"]], "sub_ground() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.sub_ground"]], "subresultants() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.subresultants"]], "symmetric_poly() (sympy.polys.rings.polyring method)": [[202, "sympy.polys.rings.PolyRing.symmetric_poly"]], "symmetrize() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.symmetrize"]], "tail_degree() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.tail_degree"]], "tail_degrees() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.tail_degrees"]], "terms() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.terms"]], "terms() (sympy.polys.rings.polyelement method)": [[202, "sympy.polys.rings.PolyElement.terms"]], "terms_gcd() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.terms_gcd"]], "to_alg_num() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.to_alg_num"]], "to_dict() (sympy.polys.polyclasses.anp method)": [[202, "sympy.polys.polyclasses.ANP.to_dict"]], "to_dict() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.to_dict"]], "to_exact() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.to_exact"]], "to_field() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.to_field"]], "to_list() (sympy.polys.polyclasses.anp method)": [[202, "sympy.polys.polyclasses.ANP.to_list"]], "to_list() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.to_list"]], "to_rational() (sympy.polys.domains.realfield method)": [[202, "sympy.polys.domains.RealField.to_rational"]], "to_ring() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.to_ring"]], "to_sympy() (sympy.polys.domains.algebraicfield method)": [[202, "sympy.polys.domains.AlgebraicField.to_sympy"]], "to_sympy() (sympy.polys.domains.complexfield method)": [[202, "sympy.polys.domains.ComplexField.to_sympy"]], "to_sympy() (sympy.polys.domains.expressiondomain method)": [[202, "sympy.polys.domains.ExpressionDomain.to_sympy"]], "to_sympy() (sympy.polys.domains.finitefield method)": [[202, "sympy.polys.domains.FiniteField.to_sympy"]], "to_sympy() (sympy.polys.domains.fractionfield method)": [[202, "sympy.polys.domains.FractionField.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyintegerring method)": [[202, "sympy.polys.domains.GMPYIntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[202, "sympy.polys.domains.GMPYRationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.integerring method)": [[202, "sympy.polys.domains.IntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.polynomialring method)": [[202, "sympy.polys.domains.PolynomialRing.to_sympy"]], "to_sympy() (sympy.polys.domains.rationalfield method)": [[202, "sympy.polys.domains.RationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.realfield method)": [[202, "sympy.polys.domains.RealField.to_sympy"]], "to_sympy() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.to_sympy"]], "to_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[202, "sympy.polys.domains.gaussiandomains.GaussianDomain.to_sympy"]], "to_sympy_dict() (sympy.polys.polyclasses.anp method)": [[202, "sympy.polys.polyclasses.ANP.to_sympy_dict"]], "to_sympy_dict() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.to_sympy_dict"]], "to_sympy_list() (sympy.polys.polyclasses.anp method)": [[202, "sympy.polys.polyclasses.ANP.to_sympy_list"]], "to_sympy_list() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.to_sympy_list"]], "to_tuple() (sympy.polys.polyclasses.anp method)": [[202, "sympy.polys.polyclasses.ANP.to_tuple"]], "to_tuple() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.to_tuple"]], "total_degree() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.total_degree"]], "tp (sympy.polys.domains.domain.domain property)": [[202, "sympy.polys.domains.domain.Domain.tp"]], "transform() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.transform"]], "trunc() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.trunc"]], "unify() (sympy.polys.domains.domain.domain method)": [[202, "sympy.polys.domains.domain.Domain.unify"]], "unify() (sympy.polys.polyclasses.anp method)": [[202, "sympy.polys.polyclasses.ANP.unify"]], "unify() (sympy.polys.polyclasses.dmp method)": [[202, "sympy.polys.polyclasses.DMP.unify"]], "vfield() (in module sympy.polys.fields)": [[202, "sympy.polys.fields.vfield"]], "vring() (in module sympy.polys.rings)": [[202, "sympy.polys.rings.vring"]], "xfield() (in module sympy.polys.fields)": [[202, "sympy.polys.fields.xfield"]], "xring() (in module sympy.polys.rings)": [[202, "sympy.polys.rings.xring"]], "zero (sympy.polys.domains.domain.domain attribute)": [[202, "sympy.polys.domains.domain.Domain.zero"]], "basepolynomialerror (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.BasePolynomialError"]], "coercionfailed (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.CoercionFailed"]], "computationfailed (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.ComputationFailed"]], "domainerror (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.DomainError"]], "evaluationfailed (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.EvaluationFailed"]], "exactquotientfailed (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.ExactQuotientFailed"]], "extraneousfactors (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.ExtraneousFactors"]], "flagerror (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.FlagError"]], "generatorserror (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.GeneratorsError"]], "generatorsneeded (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.GeneratorsNeeded"]], "heuristicgcdfailed (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.HeuristicGCDFailed"]], "homomorphismfailed (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.HomomorphismFailed"]], "isomorphismfailed (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.IsomorphismFailed"]], "multivariatepolynomialerror (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.MultivariatePolynomialError"]], "notalgebraic (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.NotAlgebraic"]], "notinvertible (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.NotInvertible"]], "notreversible (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.NotReversible"]], "operationnotsupported (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.OperationNotSupported"]], "optionerror (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.OptionError"]], "options (class in sympy.polys.polyoptions)": [[204, "sympy.polys.polyoptions.Options"]], "polificationfailed (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.PolificationFailed"]], "polynomialerror (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.PolynomialError"]], "refinementfailed (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.RefinementFailed"]], "unificationfailed (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.UnificationFailed"]], "univariatepolynomialerror (class in sympy.polys.polyerrors)": [[204, "sympy.polys.polyerrors.UnivariatePolynomialError"]], "_modgcd_multivariate_p() (in module sympy.polys.modulargcd)": [[204, "sympy.polys.modulargcd._modgcd_multivariate_p"]], "build_options() (in module sympy.polys.polyoptions)": [[204, "sympy.polys.polyoptions.build_options"]], "clone() (sympy.polys.polyoptions.options method)": [[204, "sympy.polys.polyoptions.Options.clone"]], "dmp_lc() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_LC"]], "dmp_tc() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_TC"]], "dmp_abs() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_abs"]], "dmp_add() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_add"]], "dmp_add_ground() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_add_ground"]], "dmp_add_mul() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_add_mul"]], "dmp_add_term() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_add_term"]], "dmp_apply_pairs() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_apply_pairs"]], "dmp_cancel() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_cancel"]], "dmp_clear_denoms() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dmp_clear_denoms"]], "dmp_compose() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dmp_compose"]], "dmp_content() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_content"]], "dmp_convert() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_convert"]], "dmp_copy() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_copy"]], "dmp_deflate() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_deflate"]], "dmp_degree() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_degree"]], "dmp_degree_in() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_degree_in"]], "dmp_degree_list() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_degree_list"]], "dmp_diff() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dmp_diff"]], "dmp_diff_eval_in() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dmp_diff_eval_in"]], "dmp_diff_in() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dmp_diff_in"]], "dmp_discriminant() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_discriminant"]], "dmp_div() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_div"]], "dmp_eject() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_eject"]], "dmp_euclidean_prs() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_euclidean_prs"]], "dmp_eval() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dmp_eval"]], "dmp_eval_in() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dmp_eval_in"]], "dmp_eval_tail() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dmp_eval_tail"]], "dmp_exclude() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_exclude"]], "dmp_expand() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_expand"]], "dmp_exquo() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_exquo"]], "dmp_exquo_ground() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_exquo_ground"]], "dmp_ext_factor() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dmp_ext_factor"]], "dmp_factor_list() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dmp_factor_list"]], "dmp_factor_list_include() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dmp_factor_list_include"]], "dmp_ff_div() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_ff_div"]], "dmp_ff_prs_gcd() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_ff_prs_gcd"]], "dmp_from_dict() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_from_dict"]], "dmp_from_sympy() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_from_sympy"]], "dmp_gcd() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_gcd"]], "dmp_gcdex() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_gcdex"]], "dmp_ground() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_ground"]], "dmp_ground_lc() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_ground_LC"]], "dmp_ground_tc() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_ground_TC"]], "dmp_ground_content() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dmp_ground_content"]], "dmp_ground_extract() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dmp_ground_extract"]], "dmp_ground_monic() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dmp_ground_monic"]], "dmp_ground_nth() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_ground_nth"]], "dmp_ground_p() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_ground_p"]], "dmp_ground_primitive() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dmp_ground_primitive"]], "dmp_ground_trunc() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dmp_ground_trunc"]], "dmp_grounds() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_grounds"]], "dmp_half_gcdex() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_half_gcdex"]], "dmp_include() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_include"]], "dmp_inflate() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_inflate"]], "dmp_inject() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_inject"]], "dmp_inner_gcd() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_inner_gcd"]], "dmp_inner_subresultants() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_inner_subresultants"]], "dmp_integrate() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dmp_integrate"]], "dmp_integrate_in() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dmp_integrate_in"]], "dmp_invert() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_invert"]], "dmp_irreducible_p() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dmp_irreducible_p"]], "dmp_l1_norm() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_l1_norm"]], "dmp_lcm() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_lcm"]], "dmp_lift() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dmp_lift"]], "dmp_list_terms() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_list_terms"]], "dmp_max_norm() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_max_norm"]], "dmp_mul() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_mul"]], "dmp_mul_ground() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_mul_ground"]], "dmp_mul_term() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_mul_term"]], "dmp_multi_deflate() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_multi_deflate"]], "dmp_neg() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_neg"]], "dmp_negative_p() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_negative_p"]], "dmp_nest() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_nest"]], "dmp_normal() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_normal"]], "dmp_nth() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_nth"]], "dmp_one() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_one"]], "dmp_one_p() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_one_p"]], "dmp_pdiv() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_pdiv"]], "dmp_permute() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_permute"]], "dmp_pexquo() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_pexquo"]], "dmp_positive_p() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_positive_p"]], "dmp_pow() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_pow"]], "dmp_pquo() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_pquo"]], "dmp_prem() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_prem"]], "dmp_primitive() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_primitive"]], "dmp_primitive_prs() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_primitive_prs"]], "dmp_prs_resultant() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_prs_resultant"]], "dmp_qq_collins_resultant() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_qq_collins_resultant"]], "dmp_qq_heu_gcd() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_qq_heu_gcd"]], "dmp_quo() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_quo"]], "dmp_quo_ground() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_quo_ground"]], "dmp_raise() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_raise"]], "dmp_rem() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_rem"]], "dmp_resultant() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_resultant"]], "dmp_revert() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dmp_revert"]], "dmp_rr_div() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_rr_div"]], "dmp_rr_prs_gcd() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_rr_prs_gcd"]], "dmp_slice() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_slice"]], "dmp_sqr() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_sqr"]], "dmp_strip() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_strip"]], "dmp_sub() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_sub"]], "dmp_sub_ground() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_sub_ground"]], "dmp_sub_mul() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_sub_mul"]], "dmp_sub_term() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dmp_sub_term"]], "dmp_subresultants() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_subresultants"]], "dmp_swap() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_swap"]], "dmp_terms_gcd() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_terms_gcd"]], "dmp_to_dict() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_to_dict"]], "dmp_to_tuple() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_to_tuple"]], "dmp_trial_division() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dmp_trial_division"]], "dmp_true_lt() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_true_LT"]], "dmp_trunc() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dmp_trunc"]], "dmp_validate() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_validate"]], "dmp_zero() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_zero"]], "dmp_zero_p() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_zero_p"]], "dmp_zeros() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dmp_zeros"]], "dmp_zz_collins_resultant() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_zz_collins_resultant"]], "dmp_zz_diophantine() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dmp_zz_diophantine"]], "dmp_zz_factor() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dmp_zz_factor"]], "dmp_zz_heu_gcd() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_zz_heu_gcd"]], "dmp_zz_mignotte_bound() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dmp_zz_mignotte_bound"]], "dmp_zz_modular_resultant() (in module sympy.polys.euclidtools)": [[204, "sympy.polys.euclidtools.dmp_zz_modular_resultant"]], "dmp_zz_wang() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dmp_zz_wang"]], "dmp_zz_wang_hensel_lifting() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dmp_zz_wang_hensel_lifting"]], "dmp_zz_wang_lead_coeffs() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dmp_zz_wang_lead_coeffs"]], "dmp_zz_wang_non_divisors() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dmp_zz_wang_non_divisors"]], "dmp_zz_wang_test_points() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dmp_zz_wang_test_points"]], "dup_content() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dup_content"]], "dup_cyclotomic_p() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dup_cyclotomic_p"]], "dup_decompose() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dup_decompose"]], "dup_extract() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dup_extract"]], "dup_gf_factor() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dup_gf_factor"]], "dup_lshift() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dup_lshift"]], "dup_mirror() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dup_mirror"]], "dup_monic() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dup_monic"]], "dup_primitive() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dup_primitive"]], "dup_random() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dup_random"]], "dup_real_imag() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dup_real_imag"]], "dup_reverse() (in module sympy.polys.densebasic)": [[204, "sympy.polys.densebasic.dup_reverse"]], "dup_rshift() (in module sympy.polys.densearith)": [[204, "sympy.polys.densearith.dup_rshift"]], "dup_scale() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dup_scale"]], "dup_shift() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dup_shift"]], "dup_sign_variations() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dup_sign_variations"]], "dup_transform() (in module sympy.polys.densetools)": [[204, "sympy.polys.densetools.dup_transform"]], "dup_zz_cyclotomic_factor() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dup_zz_cyclotomic_factor"]], "dup_zz_cyclotomic_poly() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dup_zz_cyclotomic_poly"]], "dup_zz_factor() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dup_zz_factor"]], "dup_zz_factor_sqf() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dup_zz_factor_sqf"]], "dup_zz_hensel_lift() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dup_zz_hensel_lift"]], "dup_zz_hensel_step() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dup_zz_hensel_step"]], "dup_zz_irreducible_p() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dup_zz_irreducible_p"]], "dup_zz_zassenhaus() (in module sympy.polys.factortools)": [[204, "sympy.polys.factortools.dup_zz_zassenhaus"]], "func_field_modgcd() (in module sympy.polys.modulargcd)": [[204, "sympy.polys.modulargcd.func_field_modgcd"]], "gf_lc() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_LC"]], "gf_qbasis() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_Qbasis"]], "gf_qmatrix() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_Qmatrix"]], "gf_tc() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_TC"]], "gf_add() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_add"]], "gf_add_ground() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_add_ground"]], "gf_add_mul() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_add_mul"]], "gf_berlekamp() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_berlekamp"]], "gf_cofactors() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_cofactors"]], "gf_compose() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_compose"]], "gf_compose_mod() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_compose_mod"]], "gf_crt() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_crt"]], "gf_crt1() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_crt1"]], "gf_crt2() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_crt2"]], "gf_csolve() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_csolve"]], "gf_degree() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_degree"]], "gf_diff() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_diff"]], "gf_div() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_div"]], "gf_eval() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_eval"]], "gf_expand() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_expand"]], "gf_exquo() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_exquo"]], "gf_factor() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_factor"]], "gf_factor_sqf() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_factor_sqf"]], "gf_from_dict() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_from_dict"]], "gf_from_int_poly() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_from_int_poly"]], "gf_gcd() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_gcd"]], "gf_gcdex() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_gcdex"]], "gf_int() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_int"]], "gf_irreducible() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_irreducible"]], "gf_irreducible_p() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_irreducible_p"]], "gf_lcm() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_lcm"]], "gf_lshift() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_lshift"]], "gf_monic() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_monic"]], "gf_mul() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_mul"]], "gf_mul_ground() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_mul_ground"]], "gf_multi_eval() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_multi_eval"]], "gf_neg() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_neg"]], "gf_normal() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_normal"]], "gf_pow() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_pow"]], "gf_pow_mod() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_pow_mod"]], "gf_quo() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_quo"]], "gf_quo_ground() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_quo_ground"]], "gf_random() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_random"]], "gf_rem() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_rem"]], "gf_rshift() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_rshift"]], "gf_shoup() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_shoup"]], "gf_sqf_list() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_sqf_list"]], "gf_sqf_p() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_sqf_p"]], "gf_sqf_part() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_sqf_part"]], "gf_sqr() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_sqr"]], "gf_strip() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_strip"]], "gf_sub() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_sub"]], "gf_sub_ground() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_sub_ground"]], "gf_sub_mul() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_sub_mul"]], "gf_to_dict() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_to_dict"]], "gf_to_int_poly() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_to_int_poly"]], "gf_trace_map() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_trace_map"]], "gf_trunc() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_trunc"]], "gf_value() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_value"]], "gf_zassenhaus() (in module sympy.polys.galoistools)": [[204, "sympy.polys.galoistools.gf_zassenhaus"]], "groebner() (in module sympy.polys.groebnertools)": [[204, "sympy.polys.groebnertools.groebner"]], "is_groebner() (in module sympy.polys.groebnertools)": [[204, "sympy.polys.groebnertools.is_groebner"]], "is_minimal() (in module sympy.polys.groebnertools)": [[204, "sympy.polys.groebnertools.is_minimal"]], "is_reduced() (in module sympy.polys.groebnertools)": [[204, "sympy.polys.groebnertools.is_reduced"]], "matrix_fglm() (in module sympy.polys.fglmtools)": [[204, "sympy.polys.fglmtools.matrix_fglm"]], "modgcd_bivariate() (in module sympy.polys.modulargcd)": [[204, "sympy.polys.modulargcd.modgcd_bivariate"]], "modgcd_multivariate() (in module sympy.polys.modulargcd)": [[204, "sympy.polys.modulargcd.modgcd_multivariate"]], "modgcd_univariate() (in module sympy.polys.modulargcd)": [[204, "sympy.polys.modulargcd.modgcd_univariate"]], "red_groebner() (in module sympy.polys.groebnertools)": [[204, "sympy.polys.groebnertools.red_groebner"]], "sdm_lc() (in module sympy.polys.distributedmodules)": [[204, "sympy.polys.distributedmodules.sdm_LC"]], "sdm_lm() (in module sympy.polys.distributedmodules)": [[204, "sympy.polys.distributedmodules.sdm_LM"]], "sdm_lt() (in module sympy.polys.distributedmodules)": [[204, "sympy.polys.distributedmodules.sdm_LT"]], "sdm_add() (in module sympy.polys.distributedmodules)": [[204, "sympy.polys.distributedmodules.sdm_add"]], "sdm_deg() (in module sympy.polys.distributedmodules)": [[204, "sympy.polys.distributedmodules.sdm_deg"]], "sdm_ecart() (in module sympy.polys.distributedmodules)": [[204, "sympy.polys.distributedmodules.sdm_ecart"]], "sdm_from_dict() (in module sympy.polys.distributedmodules)": [[204, "sympy.polys.distributedmodules.sdm_from_dict"]], "sdm_from_vector() (in module sympy.polys.distributedmodules)": [[204, "sympy.polys.distributedmodules.sdm_from_vector"]], "sdm_groebner() (in module sympy.polys.distributedmodules)": [[204, "sympy.polys.distributedmodules.sdm_groebner"]], "sdm_monomial_deg() (in module sympy.polys.distributedmodules)": [[204, "sympy.polys.distributedmodules.sdm_monomial_deg"]], "sdm_monomial_divides() (in module sympy.polys.distributedmodules)": [[204, "sympy.polys.distributedmodules.sdm_monomial_divides"]], "sdm_monomial_mul() (in module sympy.polys.distributedmodules)": [[204, "sympy.polys.distributedmodules.sdm_monomial_mul"]], "sdm_mul_term() (in module sympy.polys.distributedmodules)": [[204, "sympy.polys.distributedmodules.sdm_mul_term"]], "sdm_nf_mora() (in module sympy.polys.distributedmodules)": [[204, "sympy.polys.distributedmodules.sdm_nf_mora"]], "sdm_spoly() (in module sympy.polys.distributedmodules)": [[204, "sympy.polys.distributedmodules.sdm_spoly"]], "sdm_to_dict() (in module sympy.polys.distributedmodules)": [[204, "sympy.polys.distributedmodules.sdm_to_dict"]], "sdm_to_vector() (in module sympy.polys.distributedmodules)": [[204, "sympy.polys.distributedmodules.sdm_to_vector"]], "sdm_zero() (in module sympy.polys.distributedmodules)": [[204, "sympy.polys.distributedmodules.sdm_zero"]], "setup() (in module sympy.polys.polyconfig)": [[204, "sympy.polys.polyconfig.setup"]], "spoly() (in module sympy.polys.groebnertools)": [[204, "sympy.polys.groebnertools.spoly"]], "sympy.polys.polyconfig": [[204, "module-sympy.polys.polyconfig"]], "sympy.polys.polyoptions": [[204, "module-sympy.polys.polyoptions"]], "algintpowers (class in sympy.polys.numberfields.utilities)": [[206, "sympy.polys.numberfields.utilities.AlgIntPowers"]], "endomorphismring (class in sympy.polys.numberfields.modules)": [[206, "sympy.polys.numberfields.modules.EndomorphismRing"]], "innerendomorphism (class in sympy.polys.numberfields.modules)": [[206, "sympy.polys.numberfields.modules.InnerEndomorphism"]], "module (class in sympy.polys.numberfields.modules)": [[206, "sympy.polys.numberfields.modules.Module"]], "moduleelement (class in sympy.polys.numberfields.modules)": [[206, "sympy.polys.numberfields.modules.ModuleElement"]], "moduleendomorphism (class in sympy.polys.numberfields.modules)": [[206, "sympy.polys.numberfields.modules.ModuleEndomorphism"]], "modulehomomorphism (class in sympy.polys.numberfields.modules)": [[206, "sympy.polys.numberfields.modules.ModuleHomomorphism"]], "powerbasis (class in sympy.polys.numberfields.modules)": [[206, "sympy.polys.numberfields.modules.PowerBasis"]], "powerbasiselement (class in sympy.polys.numberfields.modules)": [[206, "sympy.polys.numberfields.modules.PowerBasisElement"]], "primeideal (class in sympy.polys.numberfields.primes)": [[206, "sympy.polys.numberfields.primes.PrimeIdeal"]], "qq_col (sympy.polys.numberfields.modules.moduleelement property)": [[206, "sympy.polys.numberfields.modules.ModuleElement.QQ_col"]], "qq_matrix (sympy.polys.numberfields.modules.submodule property)": [[206, "sympy.polys.numberfields.modules.Submodule.QQ_matrix"]], "submodule (class in sympy.polys.numberfields.modules)": [[206, "sympy.polys.numberfields.modules.Submodule"]], "t (sympy.polys.numberfields.modules.powerbasiselement property)": [[206, "sympy.polys.numberfields.modules.PowerBasisElement.T"]], "__add__() (sympy.polys.numberfields.modules.moduleelement method)": [[206, "sympy.polys.numberfields.modules.ModuleElement.__add__"]], "__add__() (sympy.polys.numberfields.primes.primeideal method)": [[206, "sympy.polys.numberfields.primes.PrimeIdeal.__add__"]], "__call__() (sympy.polys.numberfields.modules.module method)": [[206, "sympy.polys.numberfields.modules.Module.__call__"]], "__init__() (sympy.polys.numberfields.modules.endomorphismring method)": [[206, "sympy.polys.numberfields.modules.EndomorphismRing.__init__"]], "__init__() (sympy.polys.numberfields.modules.innerendomorphism method)": [[206, "sympy.polys.numberfields.modules.InnerEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleelement method)": [[206, "sympy.polys.numberfields.modules.ModuleElement.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleendomorphism method)": [[206, "sympy.polys.numberfields.modules.ModuleEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[206, "sympy.polys.numberfields.modules.ModuleHomomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.powerbasis method)": [[206, "sympy.polys.numberfields.modules.PowerBasis.__init__"]], "__init__() (sympy.polys.numberfields.modules.submodule method)": [[206, "sympy.polys.numberfields.modules.Submodule.__init__"]], "__init__() (sympy.polys.numberfields.primes.primeideal method)": [[206, "sympy.polys.numberfields.primes.PrimeIdeal.__init__"]], "__init__() (sympy.polys.numberfields.utilities.algintpowers method)": [[206, "sympy.polys.numberfields.utilities.AlgIntPowers.__init__"]], "__mod__() (sympy.polys.numberfields.modules.moduleelement method)": [[206, "sympy.polys.numberfields.modules.ModuleElement.__mod__"]], "__mul__() (sympy.polys.numberfields.modules.moduleelement method)": [[206, "sympy.polys.numberfields.modules.ModuleElement.__mul__"]], "__mul__() (sympy.polys.numberfields.primes.primeideal method)": [[206, "sympy.polys.numberfields.primes.PrimeIdeal.__mul__"]], "add() (sympy.polys.numberfields.modules.submodule method)": [[206, "sympy.polys.numberfields.modules.Submodule.add"]], "ancestors() (sympy.polys.numberfields.modules.module method)": [[206, "sympy.polys.numberfields.modules.Module.ancestors"]], "as_expr() (sympy.polys.numberfields.modules.powerbasiselement method)": [[206, "sympy.polys.numberfields.modules.PowerBasisElement.as_expr"]], "as_submodule() (sympy.polys.numberfields.primes.primeideal method)": [[206, "sympy.polys.numberfields.primes.PrimeIdeal.as_submodule"]], "basis_element_pullbacks() (sympy.polys.numberfields.modules.submodule method)": [[206, "sympy.polys.numberfields.modules.Submodule.basis_element_pullbacks"]], "basis_elements() (sympy.polys.numberfields.modules.module method)": [[206, "sympy.polys.numberfields.modules.Module.basis_elements"]], "coeff_search() (in module sympy.polys.numberfields.utilities)": [[206, "sympy.polys.numberfields.utilities.coeff_search"]], "column() (sympy.polys.numberfields.modules.moduleelement method)": [[206, "sympy.polys.numberfields.modules.ModuleElement.column"]], "discard_before() (sympy.polys.numberfields.modules.submodule method)": [[206, "sympy.polys.numberfields.modules.Submodule.discard_before"]], "element_from_anp() (sympy.polys.numberfields.modules.powerbasis method)": [[206, "sympy.polys.numberfields.modules.PowerBasis.element_from_ANP"]], "element_from_alg_num() (sympy.polys.numberfields.modules.powerbasis method)": [[206, "sympy.polys.numberfields.modules.PowerBasis.element_from_alg_num"]], "element_from_poly() (sympy.polys.numberfields.modules.powerbasis method)": [[206, "sympy.polys.numberfields.modules.PowerBasis.element_from_poly"]], "element_from_rational() (sympy.polys.numberfields.modules.module method)": [[206, "sympy.polys.numberfields.modules.Module.element_from_rational"]], "endomorphism_ring() (sympy.polys.numberfields.modules.module method)": [[206, "sympy.polys.numberfields.modules.Module.endomorphism_ring"]], "equiv() (sympy.polys.numberfields.modules.moduleelement method)": [[206, "sympy.polys.numberfields.modules.ModuleElement.equiv"]], "extract_fundamental_discriminant() (in module sympy.polys.numberfields.utilities)": [[206, "sympy.polys.numberfields.utilities.extract_fundamental_discriminant"]], "field_isomorphism() (in module sympy.polys.numberfields.subfield)": [[206, "sympy.polys.numberfields.subfield.field_isomorphism"]], "find_min_poly() (in module sympy.polys.numberfields.modules)": [[206, "sympy.polys.numberfields.modules.find_min_poly"]], "from_int_list() (sympy.polys.numberfields.modules.moduleelement class method)": [[206, "sympy.polys.numberfields.modules.ModuleElement.from_int_list"]], "galois_group() (in module sympy.polys.numberfields.galoisgroups)": [[206, "sympy.polys.numberfields.galoisgroups.galois_group"]], "generator (sympy.polys.numberfields.modules.powerbasiselement property)": [[206, "sympy.polys.numberfields.modules.PowerBasisElement.generator"]], "get_num_denom() (in module sympy.polys.numberfields.utilities)": [[206, "sympy.polys.numberfields.utilities.get_num_denom"]], "inner_endomorphism() (sympy.polys.numberfields.modules.endomorphismring method)": [[206, "sympy.polys.numberfields.modules.EndomorphismRing.inner_endomorphism"]], "is_compat() (sympy.polys.numberfields.modules.moduleelement method)": [[206, "sympy.polys.numberfields.modules.ModuleElement.is_compat"]], "is_compat_col() (sympy.polys.numberfields.modules.module method)": [[206, "sympy.polys.numberfields.modules.Module.is_compat_col"]], "is_inert (sympy.polys.numberfields.primes.primeideal property)": [[206, "sympy.polys.numberfields.primes.PrimeIdeal.is_inert"]], "is_int() (in module sympy.polys.numberfields.utilities)": [[206, "sympy.polys.numberfields.utilities.is_int"]], "is_rat() (in module sympy.polys.numberfields.utilities)": [[206, "sympy.polys.numberfields.utilities.is_rat"]], "is_rational (sympy.polys.numberfields.modules.powerbasiselement property)": [[206, "sympy.polys.numberfields.modules.PowerBasisElement.is_rational"]], "isolate() (in module sympy.polys.numberfields.utilities)": [[206, "sympy.polys.numberfields.utilities.isolate"]], "kernel() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[206, "sympy.polys.numberfields.modules.ModuleHomomorphism.kernel"]], "make_mod_elt() (in module sympy.polys.numberfields.modules)": [[206, "sympy.polys.numberfields.modules.make_mod_elt"]], "matrix() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[206, "sympy.polys.numberfields.modules.ModuleHomomorphism.matrix"]], "minimal_polynomial() (in module sympy.polys.numberfields.minpoly)": [[206, "sympy.polys.numberfields.minpoly.minimal_polynomial"]], "minpoly() (in module sympy.polys.numberfields.minpoly)": [[206, "sympy.polys.numberfields.minpoly.minpoly"]], "mul() (sympy.polys.numberfields.modules.submodule method)": [[206, "sympy.polys.numberfields.modules.Submodule.mul"]], "mult_tab() (sympy.polys.numberfields.modules.module method)": [[206, "sympy.polys.numberfields.modules.Module.mult_tab"]], "n (sympy.polys.numberfields.modules.module property)": [[206, "sympy.polys.numberfields.modules.Module.n"]], "n (sympy.polys.numberfields.modules.moduleelement property)": [[206, "sympy.polys.numberfields.modules.ModuleElement.n"]], "nearest_common_ancestor() (sympy.polys.numberfields.modules.module method)": [[206, "sympy.polys.numberfields.modules.Module.nearest_common_ancestor"]], "norm() (sympy.polys.numberfields.modules.powerbasiselement method)": [[206, "sympy.polys.numberfields.modules.PowerBasisElement.norm"]], "number_field (sympy.polys.numberfields.modules.module property)": [[206, "sympy.polys.numberfields.modules.Module.number_field"]], "numerator() (sympy.polys.numberfields.modules.powerbasiselement method)": [[206, "sympy.polys.numberfields.modules.PowerBasisElement.numerator"]], "one() (sympy.polys.numberfields.modules.module method)": [[206, "sympy.polys.numberfields.modules.Module.one"]], "over_power_basis() (sympy.polys.numberfields.modules.moduleelement method)": [[206, "sympy.polys.numberfields.modules.ModuleElement.over_power_basis"]], "parent (sympy.polys.numberfields.modules.module property)": [[206, "sympy.polys.numberfields.modules.Module.parent"]], "poly() (sympy.polys.numberfields.modules.powerbasiselement method)": [[206, "sympy.polys.numberfields.modules.PowerBasisElement.poly"]], "power_basis_ancestor() (sympy.polys.numberfields.modules.module method)": [[206, "sympy.polys.numberfields.modules.Module.power_basis_ancestor"]], "prime_decomp() (in module sympy.polys.numberfields.primes)": [[206, "sympy.polys.numberfields.primes.prime_decomp"]], "prime_valuation() (in module sympy.polys.numberfields.primes)": [[206, "sympy.polys.numberfields.primes.prime_valuation"]], "primitive_element() (in module sympy.polys.numberfields.subfield)": [[206, "sympy.polys.numberfields.subfield.primitive_element"]], "reduce_anp() (sympy.polys.numberfields.primes.primeideal method)": [[206, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP"]], "reduce_alg_num() (sympy.polys.numberfields.primes.primeideal method)": [[206, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num"]], "reduce_element() (sympy.polys.numberfields.modules.submodule method)": [[206, "sympy.polys.numberfields.modules.Submodule.reduce_element"]], "reduce_element() (sympy.polys.numberfields.primes.primeideal method)": [[206, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_element"]], "reduced() (sympy.polys.numberfields.modules.moduleelement method)": [[206, "sympy.polys.numberfields.modules.ModuleElement.reduced"]], "reduced() (sympy.polys.numberfields.modules.submodule method)": [[206, "sympy.polys.numberfields.modules.Submodule.reduced"]], "reduced_mod_p() (sympy.polys.numberfields.modules.moduleelement method)": [[206, "sympy.polys.numberfields.modules.ModuleElement.reduced_mod_p"]], "repr() (sympy.polys.numberfields.primes.primeideal method)": [[206, "sympy.polys.numberfields.primes.PrimeIdeal.repr"]], "represent() (sympy.polys.numberfields.modules.endomorphismring method)": [[206, "sympy.polys.numberfields.modules.EndomorphismRing.represent"]], "represent() (sympy.polys.numberfields.modules.module method)": [[206, "sympy.polys.numberfields.modules.Module.represent"]], "represent() (sympy.polys.numberfields.modules.powerbasis method)": [[206, "sympy.polys.numberfields.modules.PowerBasis.represent"]], "represent() (sympy.polys.numberfields.modules.submodule method)": [[206, "sympy.polys.numberfields.modules.Submodule.represent"]], "round_two() (in module sympy.polys.numberfields.basis)": [[206, "sympy.polys.numberfields.basis.round_two"]], "starts_with_unity() (sympy.polys.numberfields.modules.module method)": [[206, "sympy.polys.numberfields.modules.Module.starts_with_unity"]], "submodule_from_gens() (sympy.polys.numberfields.modules.module method)": [[206, "sympy.polys.numberfields.modules.Module.submodule_from_gens"]], "submodule_from_matrix() (sympy.polys.numberfields.modules.module method)": [[206, "sympy.polys.numberfields.modules.Module.submodule_from_matrix"]], "supplement_a_subspace() (in module sympy.polys.numberfields.utilities)": [[206, "sympy.polys.numberfields.utilities.supplement_a_subspace"]], "sympy.polys.numberfields.modules": [[206, "module-sympy.polys.numberfields.modules"]], "sympy.polys.numberfields.subfield": [[206, "module-sympy.polys.numberfields.subfield"]], "test_factor() (sympy.polys.numberfields.primes.primeideal method)": [[206, "sympy.polys.numberfields.primes.PrimeIdeal.test_factor"]], "to_anp() (sympy.polys.numberfields.modules.powerbasiselement method)": [[206, "sympy.polys.numberfields.modules.PowerBasisElement.to_ANP"]], "to_alg_num() (sympy.polys.numberfields.modules.powerbasiselement method)": [[206, "sympy.polys.numberfields.modules.PowerBasisElement.to_alg_num"]], "to_ancestor() (sympy.polys.numberfields.modules.moduleelement method)": [[206, "sympy.polys.numberfields.modules.ModuleElement.to_ancestor"]], "to_number_field() (in module sympy.polys.numberfields.subfield)": [[206, "sympy.polys.numberfields.subfield.to_number_field"]], "to_parent() (sympy.polys.numberfields.modules.moduleelement method)": [[206, "sympy.polys.numberfields.modules.ModuleElement.to_parent"]], "unify() (sympy.polys.numberfields.modules.moduleelement method)": [[206, "sympy.polys.numberfields.modules.ModuleElement.unify"]], "valuation() (sympy.polys.numberfields.primes.primeideal method)": [[206, "sympy.polys.numberfields.primes.PrimeIdeal.valuation"]], "whole_submodule() (sympy.polys.numberfields.modules.module method)": [[206, "sympy.polys.numberfields.modules.Module.whole_submodule"]], "zero() (sympy.polys.numberfields.modules.module method)": [[206, "sympy.polys.numberfields.modules.Module.zero"]], "complexrootof (class in sympy.polys.rootoftools)": [[207, "sympy.polys.rootoftools.ComplexRootOf"]], "ec() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.EC"]], "em() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.EM"]], "et() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.ET"]], "gradedlexorder (class in sympy.polys.orderings)": [[207, "sympy.polys.orderings.GradedLexOrder"]], "groebnerbasis (class in sympy.polys.polytools)": [[207, "sympy.polys.polytools.GroebnerBasis"]], "lc() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.LC"]], "lc() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.LC"]], "lm() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.LM"]], "lm() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.LM"]], "lt() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.LT"]], "lt() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.LT"]], "lexorder (class in sympy.polys.orderings)": [[207, "sympy.polys.orderings.LexOrder"]], "monomial (class in sympy.polys.monomials)": [[207, "sympy.polys.monomials.Monomial"]], "monomialorder (class in sympy.polys.orderings)": [[207, "sympy.polys.orderings.MonomialOrder"]], "poly (class in sympy.polys.polytools)": [[207, "sympy.polys.polytools.Poly"]], "purepoly (class in sympy.polys.polytools)": [[207, "sympy.polys.polytools.PurePoly"]], "reversedgradedlexorder (class in sympy.polys.orderings)": [[207, "sympy.polys.orderings.ReversedGradedLexOrder"]], "rootof (class in sympy.polys.rootoftools)": [[207, "sympy.polys.rootoftools.RootOf"]], "rootsum (class in sympy.polys.rootoftools)": [[207, "sympy.polys.rootoftools.RootSum"]], "tc() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.TC"]], "_all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._all_roots"]], "_complexes_index() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._complexes_index"]], "_complexes_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._complexes_sorted"]], "_count_roots() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._count_roots"]], "_ensure_complexes_init() (sympy.polys.rootoftools.complexrootof method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._ensure_complexes_init"]], "_ensure_reals_init() (sympy.polys.rootoftools.complexrootof method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._ensure_reals_init"]], "_eval_evalf() (sympy.polys.rootoftools.complexrootof method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._eval_evalf"]], "_eval_is_imaginary() (sympy.polys.rootoftools.complexrootof method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._eval_is_imaginary"]], "_eval_is_real() (sympy.polys.rootoftools.complexrootof method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._eval_is_real"]], "_get_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._get_complexes"]], "_get_complexes_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._get_complexes_sqf"]], "_get_interval() (sympy.polys.rootoftools.complexrootof method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._get_interval"]], "_get_reals() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._get_reals"]], "_get_reals_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._get_reals_sqf"]], "_get_roots() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._get_roots"]], "_indexed_root() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._indexed_root"]], "_new() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._new"]], "_postprocess_root() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._postprocess_root"]], "_preprocess_roots() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._preprocess_roots"]], "_real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._real_roots"]], "_reals_index() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._reals_index"]], "_reals_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._reals_sorted"]], "_refine_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._refine_complexes"]], "_reset() (sympy.polys.rootoftools.complexrootof method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._reset"]], "_roots_trivial() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._roots_trivial"]], "_set_interval() (sympy.polys.rootoftools.complexrootof method)": [[207, "sympy.polys.rootoftools.ComplexRootOf._set_interval"]], "abs() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.abs"]], "add() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.add"]], "add_ground() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.add_ground"]], "all_coeffs() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.all_coeffs"]], "all_monoms() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.all_monoms"]], "all_roots() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.all_roots"]], "all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf.all_roots"]], "all_terms() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.all_terms"]], "andre_poly() (in module sympy.polys.appellseqs)": [[207, "sympy.polys.appellseqs.andre_poly"]], "apart() (in module sympy.polys.partfrac)": [[207, "sympy.polys.partfrac.apart"]], "apart_list() (in module sympy.polys.partfrac)": [[207, "sympy.polys.partfrac.apart_list"]], "as_dict() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.as_dict"]], "as_expr() (sympy.polys.monomials.monomial method)": [[207, "sympy.polys.monomials.Monomial.as_expr"]], "as_expr() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.as_expr"]], "as_list() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.as_list"]], "as_poly() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.as_poly"]], "assemble_partfrac_list() (in module sympy.polys.partfrac)": [[207, "sympy.polys.partfrac.assemble_partfrac_list"]], "bernoulli_c_poly() (in module sympy.polys.appellseqs)": [[207, "sympy.polys.appellseqs.bernoulli_c_poly"]], "bernoulli_poly() (in module sympy.polys.appellseqs)": [[207, "sympy.polys.appellseqs.bernoulli_poly"]], "cancel() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.cancel"]], "cancel() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.cancel"]], "chebyshevt_poly() (in module sympy.polys.orthopolys)": [[207, "sympy.polys.orthopolys.chebyshevt_poly"]], "chebyshevu_poly() (in module sympy.polys.orthopolys)": [[207, "sympy.polys.orthopolys.chebyshevu_poly"]], "clear_cache() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf.clear_cache"]], "clear_denoms() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.clear_denoms"]], "coeff_monomial() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.coeff_monomial"]], "coeffs() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.coeffs"]], "cofactors() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.cofactors"]], "cofactors() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.cofactors"]], "compose() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.compose"]], "compose() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.compose"]], "construct_domain() (in module sympy.polys.constructor)": [[207, "sympy.polys.constructor.construct_domain"]], "contains() (sympy.polys.polytools.groebnerbasis method)": [[207, "sympy.polys.polytools.GroebnerBasis.contains"]], "content() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.content"]], "content() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.content"]], "count_roots() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.count_roots"]], "count_roots() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.count_roots"]], "cyclotomic_poly() (in module sympy.polys.specialpolys)": [[207, "sympy.polys.specialpolys.cyclotomic_poly"]], "decompose() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.decompose"]], "decompose() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.decompose"]], "deflate() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.deflate"]], "degree() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.degree"]], "degree() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.degree"]], "degree_list() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.degree_list"]], "degree_list() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.degree_list"]], "diff() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.diff"]], "discriminant() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.discriminant"]], "discriminant() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.discriminant"]], "dispersion() (in module sympy.polys.dispersion)": [[207, "sympy.polys.dispersion.dispersion"]], "dispersion() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.dispersion"]], "dispersionset() (in module sympy.polys.dispersion)": [[207, "sympy.polys.dispersion.dispersionset"]], "dispersionset() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.dispersionset"]], "div() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.div"]], "div() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.div"]], "domain (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.domain"]], "eject() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.eject"]], "euler_poly() (in module sympy.polys.appellseqs)": [[207, "sympy.polys.appellseqs.euler_poly"]], "eval() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.eval"]], "eval_approx() (sympy.polys.rootoftools.complexrootof method)": [[207, "sympy.polys.rootoftools.ComplexRootOf.eval_approx"]], "eval_rational() (sympy.polys.rootoftools.complexrootof method)": [[207, "sympy.polys.rootoftools.ComplexRootOf.eval_rational"]], "exclude() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.exclude"]], "exquo() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.exquo"]], "exquo() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.exquo"]], "exquo_ground() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.exquo_ground"]], "factor() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.factor"]], "factor_list() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.factor_list"]], "factor_list() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.factor_list"]], "factor_list_include() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.factor_list_include"]], "fglm() (sympy.polys.polytools.groebnerbasis method)": [[207, "sympy.polys.polytools.GroebnerBasis.fglm"]], "free_symbols (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.free_symbols"]], "free_symbols (sympy.polys.polytools.purepoly property)": [[207, "sympy.polys.polytools.PurePoly.free_symbols"]], "free_symbols_in_domain (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.free_symbols_in_domain"]], "from_dict() (sympy.polys.polytools.poly class method)": [[207, "sympy.polys.polytools.Poly.from_dict"]], "from_expr() (sympy.polys.polytools.poly class method)": [[207, "sympy.polys.polytools.Poly.from_expr"]], "from_list() (sympy.polys.polytools.poly class method)": [[207, "sympy.polys.polytools.Poly.from_list"]], "from_poly() (sympy.polys.polytools.poly class method)": [[207, "sympy.polys.polytools.Poly.from_poly"]], "galois_group() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.galois_group"]], "gcd() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.gcd"]], "gcd() (sympy.polys.monomials.monomial method)": [[207, "sympy.polys.monomials.Monomial.gcd"]], "gcd() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.gcd"]], "gcd_list() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.gcd_list"]], "gcdex() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.gcdex"]], "gcdex() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.gcdex"]], "gegenbauer_poly() (in module sympy.polys.orthopolys)": [[207, "sympy.polys.orthopolys.gegenbauer_poly"]], "gen (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.gen"]], "genocchi_poly() (in module sympy.polys.appellseqs)": [[207, "sympy.polys.appellseqs.genocchi_poly"]], "get_domain() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.get_domain"]], "get_modulus() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.get_modulus"]], "gff() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.gff"]], "gff_list() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.gff_list"]], "gff_list() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.gff_list"]], "groebner() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.groebner"]], "ground_roots() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.ground_roots"]], "ground_roots() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.ground_roots"]], "half_gcdex() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.half_gcdex"]], "half_gcdex() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.half_gcdex"]], "has_only_gens() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.has_only_gens"]], "hermite_poly() (in module sympy.polys.orthopolys)": [[207, "sympy.polys.orthopolys.hermite_poly"]], "hermite_prob_poly() (in module sympy.polys.orthopolys)": [[207, "sympy.polys.orthopolys.hermite_prob_poly"]], "homogeneous_order() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.homogeneous_order"]], "homogenize() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.homogenize"]], "horner() (in module sympy.polys.polyfuncs)": [[207, "sympy.polys.polyfuncs.horner"]], "inject() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.inject"]], "integrate() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.integrate"]], "interpolate() (in module sympy.polys.polyfuncs)": [[207, "sympy.polys.polyfuncs.interpolate"]], "interpolating_poly() (in module sympy.polys.specialpolys)": [[207, "sympy.polys.specialpolys.interpolating_poly"]], "intervals() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.intervals"]], "intervals() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.intervals"]], "invert() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.invert"]], "invert() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.invert"]], "is_cyclotomic (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.is_cyclotomic"]], "is_ground (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.is_ground"]], "is_homogeneous (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.is_homogeneous"]], "is_irreducible (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.is_irreducible"]], "is_linear (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.is_linear"]], "is_monic (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.is_monic"]], "is_monomial (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.is_monomial"]], "is_multivariate (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.is_multivariate"]], "is_one (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.is_one"]], "is_primitive (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.is_primitive"]], "is_quadratic (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.is_quadratic"]], "is_sqf (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.is_sqf"]], "is_univariate (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.is_univariate"]], "is_zero (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.is_zero"]], "is_zero_dimensional (sympy.polys.polytools.groebnerbasis property)": [[207, "sympy.polys.polytools.GroebnerBasis.is_zero_dimensional"]], "is_zero_dimensional() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.is_zero_dimensional"]], "itermonomials() (in module sympy.polys.monomials)": [[207, "sympy.polys.monomials.itermonomials"]], "jacobi_poly() (in module sympy.polys.orthopolys)": [[207, "sympy.polys.orthopolys.jacobi_poly"]], "l1_norm() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.l1_norm"]], "laguerre_poly() (in module sympy.polys.orthopolys)": [[207, "sympy.polys.orthopolys.laguerre_poly"]], "lcm() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.lcm"]], "lcm() (sympy.polys.monomials.monomial method)": [[207, "sympy.polys.monomials.Monomial.lcm"]], "lcm() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.lcm"]], "lcm_list() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.lcm_list"]], "legendre_poly() (in module sympy.polys.orthopolys)": [[207, "sympy.polys.orthopolys.legendre_poly"]], "length() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.length"]], "lift() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.lift"]], "ltrim() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.ltrim"]], "make_monic_over_integers_by_scaling_roots() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.make_monic_over_integers_by_scaling_roots"]], "match() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.match"]], "max_norm() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.max_norm"]], "monic() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.monic"]], "monic() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.monic"]], "monomial_count() (in module sympy.polys.monomials)": [[207, "sympy.polys.monomials.monomial_count"]], "monoms() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.monoms"]], "mul() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.mul"]], "mul_ground() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.mul_ground"]], "neg() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.neg"]], "new() (sympy.polys.polytools.poly class method)": [[207, "sympy.polys.polytools.Poly.new"]], "new() (sympy.polys.rootoftools.rootsum class method)": [[207, "sympy.polys.rootoftools.RootSum.new"]], "norm() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.norm"]], "nroots() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.nroots"]], "nroots() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.nroots"]], "nth() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.nth"]], "nth_power_roots_poly() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.nth_power_roots_poly"]], "nth_power_roots_poly() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.nth_power_roots_poly"]], "one (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.one"]], "parallel_poly_from_expr() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.parallel_poly_from_expr"]], "pdiv() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.pdiv"]], "pdiv() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.pdiv"]], "per() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.per"]], "pexquo() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.pexquo"]], "pexquo() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.pexquo"]], "poly() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.poly"]], "poly_from_expr() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.poly_from_expr"]], "pow() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.pow"]], "pquo() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.pquo"]], "pquo() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.pquo"]], "prem() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.prem"]], "prem() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.prem"]], "primitive() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.primitive"]], "primitive() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.primitive"]], "quo() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.quo"]], "quo() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.quo"]], "quo_ground() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.quo_ground"]], "random_poly() (in module sympy.polys.specialpolys)": [[207, "sympy.polys.specialpolys.random_poly"]], "rat_clear_denoms() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.rat_clear_denoms"]], "real_roots() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.real_roots"]], "real_roots() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.real_roots"]], "real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[207, "sympy.polys.rootoftools.ComplexRootOf.real_roots"]], "reduce() (sympy.polys.polytools.groebnerbasis method)": [[207, "sympy.polys.polytools.GroebnerBasis.reduce"]], "reduced() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.reduced"]], "refine_root() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.refine_root"]], "refine_root() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.refine_root"]], "rem() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.rem"]], "rem() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.rem"]], "reorder() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.reorder"]], "replace() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.replace"]], "resultant() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.resultant"]], "resultant() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.resultant"]], "retract() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.retract"]], "revert() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.revert"]], "root() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.root"]], "rootof() (in module sympy.polys.rootoftools)": [[207, "sympy.polys.rootoftools.rootof"]], "roots() (in module sympy.polys.polyroots)": [[207, "sympy.polys.polyroots.roots"]], "same_root() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.same_root"]], "set_domain() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.set_domain"]], "set_modulus() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.set_modulus"]], "shift() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.shift"]], "slice() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.slice"]], "spherical_bessel_fn() (in module sympy.polys.orthopolys)": [[207, "sympy.polys.orthopolys.spherical_bessel_fn"]], "sqf() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.sqf"]], "sqf_list() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.sqf_list"]], "sqf_list() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.sqf_list"]], "sqf_list_include() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.sqf_list_include"]], "sqf_norm() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.sqf_norm"]], "sqf_norm() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.sqf_norm"]], "sqf_part() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.sqf_part"]], "sqf_part() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.sqf_part"]], "sqr() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.sqr"]], "sturm() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.sturm"]], "sturm() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.sturm"]], "sub() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.sub"]], "sub_ground() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.sub_ground"]], "subresultants() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.subresultants"]], "subresultants() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.subresultants"]], "swinnerton_dyer_poly() (in module sympy.polys.specialpolys)": [[207, "sympy.polys.specialpolys.swinnerton_dyer_poly"]], "symmetric_poly() (in module sympy.polys.specialpolys)": [[207, "sympy.polys.specialpolys.symmetric_poly"]], "symmetrize() (in module sympy.polys.polyfuncs)": [[207, "sympy.polys.polyfuncs.symmetrize"]], "sympy.polys": [[207, "module-sympy.polys"]], "terms() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.terms"]], "terms_gcd() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.terms_gcd"]], "terms_gcd() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.terms_gcd"]], "termwise() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.termwise"]], "to_exact() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.to_exact"]], "to_field() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.to_field"]], "to_ring() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.to_ring"]], "together() (in module sympy.polys.rationaltools)": [[207, "sympy.polys.rationaltools.together"]], "total_degree() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.total_degree"]], "transform() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.transform"]], "trunc() (in module sympy.polys.polytools)": [[207, "sympy.polys.polytools.trunc"]], "trunc() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.trunc"]], "unify() (sympy.polys.polytools.poly method)": [[207, "sympy.polys.polytools.Poly.unify"]], "unit (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.unit"]], "viete() (in module sympy.polys.polyfuncs)": [[207, "sympy.polys.polyfuncs.viete"]], "zero (sympy.polys.polytools.poly property)": [[207, "sympy.polys.polytools.Poly.zero"]], "_tan1() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series._tan1"]], "mul_xin() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.mul_xin"]], "pow_xin() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.pow_xin"]], "rs_lambertw() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_LambertW"]], "rs_asin() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_asin"]], "rs_atan() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_atan"]], "rs_atanh() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_atanh"]], "rs_compose_add() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_compose_add"]], "rs_cos() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_cos"]], "rs_cos_sin() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_cos_sin"]], "rs_cosh() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_cosh"]], "rs_cot() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_cot"]], "rs_diff() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_diff"]], "rs_exp() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_exp"]], "rs_fun() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_fun"]], "rs_hadamard_exp() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_hadamard_exp"]], "rs_integrate() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_integrate"]], "rs_is_puiseux() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_is_puiseux"]], "rs_log() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_log"]], "rs_mul() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_mul"]], "rs_newton() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_newton"]], "rs_nth_root() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_nth_root"]], "rs_pow() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_pow"]], "rs_puiseux() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_puiseux"]], "rs_puiseux2() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_puiseux2"]], "rs_series_from_list() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_series_from_list"]], "rs_series_inversion() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_series_inversion"]], "rs_series_reversion() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_series_reversion"]], "rs_sin() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_sin"]], "rs_sinh() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_sinh"]], "rs_square() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_square"]], "rs_subs() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_subs"]], "rs_tan() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_tan"]], "rs_tanh() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_tanh"]], "rs_trunc() (in module sympy.polys.ring_series)": [[208, "sympy.polys.ring_series.rs_trunc"]], "_solve_lin_sys() (in module sympy.polys.solvers)": [[209, "sympy.polys.solvers._solve_lin_sys"]], "_solve_lin_sys_component() (in module sympy.polys.solvers)": [[209, "sympy.polys.solvers._solve_lin_sys_component"]], "eqs_to_matrix() (in module sympy.polys.solvers)": [[209, "sympy.polys.solvers.eqs_to_matrix"]], "solve_lin_sys() (in module sympy.polys.solvers)": [[209, "sympy.polys.solvers.solve_lin_sys"]], "sympy.polys.solvers": [[209, "module-sympy.polys.solvers"]], "sympy_eqs_to_ring() (in module sympy.polys.solvers)": [[209, "sympy.polys.solvers.sympy_eqs_to_ring"]], "aesaraprinter (class in sympy.printing.aesaracode)": [[211, "sympy.printing.aesaracode.AesaraPrinter"]], "assignmenterror": [[211, "sympy.printing.codeprinter.AssignmentError"]], "c89codeprinter (class in sympy.printing.c)": [[211, "sympy.printing.c.C89CodePrinter"]], "c99codeprinter (class in sympy.printing.c)": [[211, "sympy.printing.c.C99CodePrinter"]], "cxx11codeprinter (class in sympy.printing.cxx)": [[211, "sympy.printing.cxx.CXX11CodePrinter"]], "cxx98codeprinter (class in sympy.printing.cxx)": [[211, "sympy.printing.cxx.CXX98CodePrinter"]], "codeprinter (class in sympy.printing.codeprinter)": [[211, "sympy.printing.codeprinter.CodePrinter"]], "fcodeprinter (class in sympy.printing.fortran)": [[211, "sympy.printing.fortran.FCodePrinter"]], "g() (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.G"], [211, "sympy.printing.pretty.pretty_symbology.g"]], "javascriptcodeprinter (class in sympy.printing.jscode)": [[211, "sympy.printing.jscode.JavascriptCodePrinter"]], "juliacodeprinter (class in sympy.printing.julia)": [[211, "sympy.printing.julia.JuliaCodePrinter"]], "lambdaprinter (class in sympy.printing.lambdarepr)": [[211, "sympy.printing.lambdarepr.LambdaPrinter"]], "latexprinter (class in sympy.printing.latex)": [[211, "sympy.printing.latex.LatexPrinter"]], "mcodeprinter (class in sympy.printing.mathematica)": [[211, "sympy.printing.mathematica.MCodePrinter"]], "maplecodeprinter (class in sympy.printing.maple)": [[211, "sympy.printing.maple.MapleCodePrinter"]], "mathmlcontentprinter (class in sympy.printing.mathml)": [[211, "sympy.printing.mathml.MathMLContentPrinter"]], "mathmlpresentationprinter (class in sympy.printing.mathml)": [[211, "sympy.printing.mathml.MathMLPresentationPrinter"]], "mathmlprinterbase (class in sympy.printing.mathml)": [[211, "sympy.printing.mathml.MathMLPrinterBase"]], "mpmathprinter (class in sympy.printing.pycode)": [[211, "sympy.printing.pycode.MpmathPrinter"]], "octavecodeprinter (class in sympy.printing.octave)": [[211, "sympy.printing.octave.OctaveCodePrinter"]], "precedence (in module sympy.printing.precedence)": [[211, "sympy.printing.precedence.PRECEDENCE"]], "precedence_functions (in module sympy.printing.precedence)": [[211, "sympy.printing.precedence.PRECEDENCE_FUNCTIONS"]], "precedence_values (in module sympy.printing.precedence)": [[211, "sympy.printing.precedence.PRECEDENCE_VALUES"]], "prettyprinter (class in sympy.printing.pretty.pretty)": [[211, "sympy.printing.pretty.pretty.PrettyPrinter"]], "printer (class in sympy.printing.printer)": [[211, "sympy.printing.printer.Printer"]], "rcodeprinter (class in sympy.printing.rcode)": [[211, "sympy.printing.rcode.RCodePrinter"]], "reprprinter (class in sympy.printing.repr)": [[211, "sympy.printing.repr.ReprPrinter"]], "rustcodeprinter (class in sympy.printing.rust)": [[211, "sympy.printing.rust.RustCodePrinter"]], "smtlibprinter (class in sympy.printing.smtlib)": [[211, "sympy.printing.smtlib.SMTLibPrinter"]], "strprinter (class in sympy.printing.str)": [[211, "sympy.printing.str.StrPrinter"]], "u() (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.U"]], "vf() (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.VF"]], "_default_settings (sympy.printing.smtlib.smtlibprinter attribute)": [[211, "sympy.printing.smtlib.SMTLibPrinter._default_settings"]], "_print() (sympy.printing.printer.printer method)": [[211, "sympy.printing.printer.Printer._print"]], "above() (sympy.printing.pretty.stringpict.stringpict method)": [[211, "sympy.printing.pretty.stringpict.stringPict.above"]], "accepted_latex_functions (in module sympy.printing.latex)": [[211, "sympy.printing.latex.accepted_latex_functions"]], "aesara_code() (in module sympy.printing.aesaracode)": [[211, "sympy.printing.aesaracode.aesara_code"]], "aesara_function() (in module sympy.printing.aesaracode)": [[211, "sympy.printing.aesaracode.aesara_function"]], "annotated() (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.annotated"]], "apply() (sympy.printing.pretty.stringpict.prettyform static method)": [[211, "sympy.printing.pretty.stringpict.prettyForm.apply"]], "atoms_table (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.atoms_table"]], "below() (sympy.printing.pretty.stringpict.stringpict method)": [[211, "sympy.printing.pretty.stringpict.stringPict.below"]], "ccode() (in module sympy.printing.c)": [[211, "sympy.printing.c.ccode"]], "cxxcode() (in module sympy.printing.codeprinter)": [[211, "sympy.printing.codeprinter.cxxcode"]], "digit_2txt (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.digit_2txt"]], "dim_handling() (in module sympy.printing.aesaracode)": [[211, "sympy.printing.aesaracode.dim_handling"]], "doprint() (sympy.printing.aesaracode.aesaraprinter method)": [[211, "sympy.printing.aesaracode.AesaraPrinter.doprint"]], "doprint() (sympy.printing.codeprinter.codeprinter method)": [[211, "sympy.printing.codeprinter.CodePrinter.doprint"]], "doprint() (sympy.printing.mathml.mathmlprinterbase method)": [[211, "sympy.printing.mathml.MathMLPrinterBase.doprint"]], "doprint() (sympy.printing.printer.printer method)": [[211, "sympy.printing.printer.Printer.doprint"]], "dotprint() (in module sympy.printing.dot)": [[211, "sympy.printing.dot.dotprint"]], "emptyprinter() (sympy.printing.repr.reprprinter method)": [[211, "sympy.printing.repr.ReprPrinter.emptyPrinter"]], "fcode() (in module sympy.printing.fortran)": [[211, "sympy.printing.fortran.fcode"]], "frac (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.frac"]], "greek_letters (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.greek_letters"]], "height() (sympy.printing.pretty.stringpict.stringpict method)": [[211, "sympy.printing.pretty.stringpict.stringPict.height"]], "hobj() (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.hobj"]], "indent_code() (sympy.printing.c.c89codeprinter method)": [[211, "sympy.printing.c.C89CodePrinter.indent_code"]], "indent_code() (sympy.printing.fortran.fcodeprinter method)": [[211, "sympy.printing.fortran.FCodePrinter.indent_code"]], "indent_code() (sympy.printing.jscode.javascriptcodeprinter method)": [[211, "sympy.printing.jscode.JavascriptCodePrinter.indent_code"]], "indent_code() (sympy.printing.julia.juliacodeprinter method)": [[211, "sympy.printing.julia.JuliaCodePrinter.indent_code"]], "indent_code() (sympy.printing.octave.octavecodeprinter method)": [[211, "sympy.printing.octave.OctaveCodePrinter.indent_code"]], "indent_code() (sympy.printing.rcode.rcodeprinter method)": [[211, "sympy.printing.rcode.RCodePrinter.indent_code"]], "indent_code() (sympy.printing.rust.rustcodeprinter method)": [[211, "sympy.printing.rust.RustCodePrinter.indent_code"]], "jscode() (in module sympy.printing.jscode)": [[211, "sympy.printing.jscode.jscode"]], "julia_code() (in module sympy.printing.julia)": [[211, "sympy.printing.julia.julia_code"]], "known_fcns_src1 (in module sympy.printing.julia)": [[211, "sympy.printing.julia.known_fcns_src1"]], "known_fcns_src1 (in module sympy.printing.octave)": [[211, "sympy.printing.octave.known_fcns_src1"]], "known_fcns_src2 (in module sympy.printing.julia)": [[211, "sympy.printing.julia.known_fcns_src2"]], "known_fcns_src2 (in module sympy.printing.octave)": [[211, "sympy.printing.octave.known_fcns_src2"]], "known_functions (in module sympy.printing.jscode)": [[211, "sympy.printing.jscode.known_functions"]], "known_functions (in module sympy.printing.mathematica)": [[211, "sympy.printing.mathematica.known_functions"]], "known_functions (in module sympy.printing.rcode)": [[211, "sympy.printing.rcode.known_functions"]], "known_functions (in module sympy.printing.rust)": [[211, "sympy.printing.rust.known_functions"]], "known_functions_c89 (in module sympy.printing.c)": [[211, "sympy.printing.c.known_functions_C89"]], "known_functions_c99 (in module sympy.printing.c)": [[211, "sympy.printing.c.known_functions_C99"]], "lambdarepr() (in module sympy.printing.lambdarepr)": [[211, "sympy.printing.lambdarepr.lambdarepr"]], "latex() (in module sympy.printing.latex)": [[211, "sympy.printing.latex.latex"]], "left() (sympy.printing.pretty.stringpict.stringpict method)": [[211, "sympy.printing.pretty.stringpict.stringPict.left"]], "leftslash() (sympy.printing.pretty.stringpict.stringpict method)": [[211, "sympy.printing.pretty.stringpict.stringPict.leftslash"]], "maple_code() (in module sympy.printing.maple)": [[211, "sympy.printing.maple.maple_code"]], "mathematica_code() (in module sympy.printing.mathematica)": [[211, "sympy.printing.mathematica.mathematica_code"]], "mathml() (in module sympy.printing.mathml)": [[211, "sympy.printing.mathml.mathml"]], "mathml_tag() (sympy.printing.mathml.mathmlcontentprinter method)": [[211, "sympy.printing.mathml.MathMLContentPrinter.mathml_tag"]], "mathml_tag() (sympy.printing.mathml.mathmlpresentationprinter method)": [[211, "sympy.printing.mathml.MathMLPresentationPrinter.mathml_tag"]], "next() (sympy.printing.pretty.stringpict.stringpict static method)": [[211, "sympy.printing.pretty.stringpict.stringPict.next"]], "octave_code() (in module sympy.printing.octave)": [[211, "sympy.printing.octave.octave_code"]], "parens() (sympy.printing.pretty.stringpict.stringpict method)": [[211, "sympy.printing.pretty.stringpict.stringPict.parens"]], "parenthesize_super() (sympy.printing.latex.latexprinter method)": [[211, "sympy.printing.latex.LatexPrinter.parenthesize_super"]], "pprint_nodes() (in module sympy.printing.tree)": [[211, "sympy.printing.tree.pprint_nodes"]], "precedence() (in module sympy.printing.precedence)": [[211, "sympy.printing.precedence.precedence"]], "pretty() (in module sympy.printing.pretty.pretty)": [[211, "sympy.printing.pretty.pretty.pretty"]], "prettyform (class in sympy.printing.pretty.stringpict)": [[211, "sympy.printing.pretty.stringpict.prettyForm"]], "pretty_atom() (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.pretty_atom"]], "pretty_print() (in module sympy.printing.pretty.pretty)": [[211, "sympy.printing.pretty.pretty.pretty_print"]], "pretty_symbol() (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.pretty_symbol"]], "pretty_try_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.pretty_try_use_unicode"]], "pretty_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.pretty_use_unicode"]], "preview() (in module sympy.printing.preview)": [[211, "sympy.printing.preview.preview"]], "print_ccode() (in module sympy.printing.c)": [[211, "sympy.printing.c.print_ccode"]], "print_fcode() (in module sympy.printing.fortran)": [[211, "sympy.printing.fortran.print_fcode"]], "print_gtk() (in module sympy.printing.gtk)": [[211, "sympy.printing.gtk.print_gtk"]], "print_latex() (in module sympy.printing.latex)": [[211, "sympy.printing.latex.print_latex"]], "print_maple_code() (in module sympy.printing.maple)": [[211, "sympy.printing.maple.print_maple_code"]], "print_mathml() (in module sympy.printing.mathml)": [[211, "sympy.printing.mathml.print_mathml"]], "print_node() (in module sympy.printing.tree)": [[211, "sympy.printing.tree.print_node"]], "print_rcode() (in module sympy.printing.rcode)": [[211, "sympy.printing.rcode.print_rcode"]], "print_tree() (in module sympy.printing.tree)": [[211, "sympy.printing.tree.print_tree"]], "printmethod (sympy.printing.aesaracode.aesaraprinter attribute)": [[211, "sympy.printing.aesaracode.AesaraPrinter.printmethod"]], "printmethod (sympy.printing.c.c89codeprinter attribute)": [[211, "sympy.printing.c.C89CodePrinter.printmethod"]], "printmethod (sympy.printing.c.c99codeprinter attribute)": [[211, "sympy.printing.c.C99CodePrinter.printmethod"]], "printmethod (sympy.printing.codeprinter.codeprinter attribute)": [[211, "sympy.printing.codeprinter.CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx11codeprinter attribute)": [[211, "sympy.printing.cxx.CXX11CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx98codeprinter attribute)": [[211, "sympy.printing.cxx.CXX98CodePrinter.printmethod"]], "printmethod (sympy.printing.fortran.fcodeprinter attribute)": [[211, "sympy.printing.fortran.FCodePrinter.printmethod"]], "printmethod (sympy.printing.jscode.javascriptcodeprinter attribute)": [[211, "sympy.printing.jscode.JavascriptCodePrinter.printmethod"]], "printmethod (sympy.printing.julia.juliacodeprinter attribute)": [[211, "sympy.printing.julia.JuliaCodePrinter.printmethod"]], "printmethod (sympy.printing.lambdarepr.lambdaprinter attribute)": [[211, "sympy.printing.lambdarepr.LambdaPrinter.printmethod"]], "printmethod (sympy.printing.latex.latexprinter attribute)": [[211, "sympy.printing.latex.LatexPrinter.printmethod"]], "printmethod (sympy.printing.maple.maplecodeprinter attribute)": [[211, "sympy.printing.maple.MapleCodePrinter.printmethod"]], "printmethod (sympy.printing.mathematica.mcodeprinter attribute)": [[211, "sympy.printing.mathematica.MCodePrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlcontentprinter attribute)": [[211, "sympy.printing.mathml.MathMLContentPrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlpresentationprinter attribute)": [[211, "sympy.printing.mathml.MathMLPresentationPrinter.printmethod"]], "printmethod (sympy.printing.octave.octavecodeprinter attribute)": [[211, "sympy.printing.octave.OctaveCodePrinter.printmethod"]], "printmethod (sympy.printing.pretty.pretty.prettyprinter attribute)": [[211, "sympy.printing.pretty.pretty.PrettyPrinter.printmethod"]], "printmethod (sympy.printing.printer.printer attribute)": [[211, "sympy.printing.printer.Printer.printmethod"]], "printmethod (sympy.printing.rcode.rcodeprinter attribute)": [[211, "sympy.printing.rcode.RCodePrinter.printmethod"]], "printmethod (sympy.printing.repr.reprprinter attribute)": [[211, "sympy.printing.repr.ReprPrinter.printmethod"]], "printmethod (sympy.printing.rust.rustcodeprinter attribute)": [[211, "sympy.printing.rust.RustCodePrinter.printmethod"]], "printmethod (sympy.printing.smtlib.smtlibprinter attribute)": [[211, "sympy.printing.smtlib.SMTLibPrinter.printmethod"]], "printmethod (sympy.printing.str.strprinter attribute)": [[211, "sympy.printing.str.StrPrinter.printmethod"]], "pycode() (in module sympy.printing.pycode)": [[211, "sympy.printing.pycode.pycode"]], "rcode() (in module sympy.printing.rcode)": [[211, "sympy.printing.rcode.rcode"]], "render() (sympy.printing.pretty.stringpict.stringpict method)": [[211, "sympy.printing.pretty.stringpict.stringPict.render"]], "reprify() (sympy.printing.repr.reprprinter method)": [[211, "sympy.printing.repr.ReprPrinter.reprify"]], "right() (sympy.printing.pretty.stringpict.stringpict method)": [[211, "sympy.printing.pretty.stringpict.stringPict.right"]], "root (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.root"]], "root() (sympy.printing.pretty.stringpict.stringpict method)": [[211, "sympy.printing.pretty.stringpict.stringPict.root"]], "rust_code() (in module sympy.printing.rust)": [[211, "sympy.printing.rust.rust_code"]], "set_global_settings() (sympy.printing.printer.printer class method)": [[211, "sympy.printing.printer.Printer.set_global_settings"]], "smtlib_code() (in module sympy.printing.smtlib)": [[211, "sympy.printing.smtlib.smtlib_code"]], "split_super_sub() (in module sympy.printing.conventions)": [[211, "sympy.printing.conventions.split_super_sub"]], "srepr() (in module sympy.printing.repr)": [[211, "sympy.printing.repr.srepr"]], "sstr() (in module sympy.printing.str)": [[211, "sympy.printing.str.sstr"]], "sstrrepr() (in module sympy.printing.str)": [[211, "sympy.printing.str.sstrrepr"]], "stack() (sympy.printing.pretty.stringpict.stringpict static method)": [[211, "sympy.printing.pretty.stringpict.stringPict.stack"]], "stringpict (class in sympy.printing.pretty.stringpict)": [[211, "sympy.printing.pretty.stringpict.stringPict"]], "sub (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.sub"]], "sup (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.sup"]], "symb_2txt (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.symb_2txt"]], "sympy.printing.aesaracode": [[211, "module-sympy.printing.aesaracode"]], "sympy.printing.c": [[211, "module-sympy.printing.c"]], "sympy.printing.codeprinter": [[211, "module-sympy.printing.codeprinter"]], "sympy.printing.conventions": [[211, "module-sympy.printing.conventions"]], "sympy.printing.cxx": [[211, "module-sympy.printing.cxx"]], "sympy.printing.fortran": [[211, "module-sympy.printing.fortran"]], "sympy.printing.gtk": [[211, "module-sympy.printing.gtk"]], "sympy.printing.jscode": [[211, "module-sympy.printing.jscode"]], "sympy.printing.julia": [[211, "module-sympy.printing.julia"]], "sympy.printing.lambdarepr": [[211, "module-sympy.printing.lambdarepr"]], "sympy.printing.latex": [[211, "module-sympy.printing.latex"]], "sympy.printing.maple": [[211, "module-sympy.printing.maple"]], "sympy.printing.mathematica": [[211, "module-sympy.printing.mathematica"]], "sympy.printing.mathml": [[211, "module-sympy.printing.mathml"]], "sympy.printing.octave": [[211, "module-sympy.printing.octave"]], "sympy.printing.precedence": [[211, "module-sympy.printing.precedence"]], "sympy.printing.pretty": [[211, "module-sympy.printing.pretty"]], "sympy.printing.pretty.pretty": [[211, "module-sympy.printing.pretty.pretty"]], "sympy.printing.pretty.pretty_symbology": [[211, "module-sympy.printing.pretty.pretty_symbology"]], "sympy.printing.pretty.stringpict": [[211, "module-sympy.printing.pretty.stringpict"]], "sympy.printing.preview": [[211, "module-sympy.printing.preview"]], "sympy.printing.printer": [[211, "module-sympy.printing.printer"]], "sympy.printing.pycode": [[211, "module-sympy.printing.pycode"]], "sympy.printing.python": [[211, "module-sympy.printing.python"]], "sympy.printing.rcode": [[211, "module-sympy.printing.rcode"]], "sympy.printing.repr": [[211, "module-sympy.printing.repr"]], "sympy.printing.rust": [[211, "module-sympy.printing.rust"]], "sympy.printing.smtlib": [[211, "module-sympy.printing.smtlib"]], "sympy.printing.str": [[211, "module-sympy.printing.str"]], "sympy.printing.tree": [[211, "module-sympy.printing.tree"]], "terminal_width() (sympy.printing.pretty.stringpict.stringpict method)": [[211, "sympy.printing.pretty.stringpict.stringPict.terminal_width"]], "tree() (in module sympy.printing.tree)": [[211, "sympy.printing.tree.tree"]], "vobj() (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.vobj"]], "width() (sympy.printing.pretty.stringpict.stringpict method)": [[211, "sympy.printing.pretty.stringpict.stringPict.width"]], "xobj() (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.xobj"]], "xstr() (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.xstr"]], "xsym() (in module sympy.printing.pretty.pretty_symbology)": [[211, "sympy.printing.pretty.pretty_symbology.xsym"]], "finiteformalpowerseries (class in sympy.series.formal)": [[213, "sympy.series.formal.FiniteFormalPowerSeries"]], "formalpowerseries (class in sympy.series.formal)": [[213, "sympy.series.formal.FormalPowerSeries"]], "formalpowerseriescompose (class in sympy.series.formal)": [[213, "sympy.series.formal.FormalPowerSeriesCompose"]], "formalpowerseriesinverse (class in sympy.series.formal)": [[213, "sympy.series.formal.FormalPowerSeriesInverse"]], "formalpowerseriesproduct (class in sympy.series.formal)": [[213, "sympy.series.formal.FormalPowerSeriesProduct"]], "coeff_bell() (sympy.series.formal.formalpowerseries method)": [[213, "sympy.series.formal.FormalPowerSeries.coeff_bell"]], "compose() (sympy.series.formal.formalpowerseries method)": [[213, "sympy.series.formal.FormalPowerSeries.compose"]], "compute_fps() (in module sympy.series.formal)": [[213, "sympy.series.formal.compute_fps"]], "exp_re() (in module sympy.series.formal)": [[213, "sympy.series.formal.exp_re"]], "fps() (in module sympy.series.formal)": [[213, "sympy.series.formal.fps"]], "function (sympy.series.formal.formalpowerseriescompose property)": [[213, "sympy.series.formal.FormalPowerSeriesCompose.function"]], "function (sympy.series.formal.formalpowerseriesinverse property)": [[213, "sympy.series.formal.FormalPowerSeriesInverse.function"]], "function (sympy.series.formal.formalpowerseriesproduct property)": [[213, "sympy.series.formal.FormalPowerSeriesProduct.function"]], "hyper_algorithm() (in module sympy.series.formal)": [[213, "sympy.series.formal.hyper_algorithm"]], "hyper_re() (in module sympy.series.formal)": [[213, "sympy.series.formal.hyper_re"]], "infinite (sympy.series.formal.formalpowerseries property)": [[213, "sympy.series.formal.FormalPowerSeries.infinite"]], "integrate() (sympy.series.formal.formalpowerseries method)": [[213, "sympy.series.formal.FormalPowerSeries.integrate"]], "inverse() (sympy.series.formal.formalpowerseries method)": [[213, "sympy.series.formal.FormalPowerSeries.inverse"]], "polynomial() (sympy.series.formal.formalpowerseries method)": [[213, "sympy.series.formal.FormalPowerSeries.polynomial"]], "product() (sympy.series.formal.formalpowerseries method)": [[213, "sympy.series.formal.FormalPowerSeries.product"]], "rational_algorithm() (in module sympy.series.formal)": [[213, "sympy.series.formal.rational_algorithm"]], "rational_independent() (in module sympy.series.formal)": [[213, "sympy.series.formal.rational_independent"]], "rsolve_hypergeometric() (in module sympy.series.formal)": [[213, "sympy.series.formal.rsolve_hypergeometric"]], "simplede() (in module sympy.series.formal)": [[213, "sympy.series.formal.simpleDE"]], "solve_de() (in module sympy.series.formal)": [[213, "sympy.series.formal.solve_de"]], "truncate() (sympy.series.formal.formalpowerseries method)": [[213, "sympy.series.formal.FormalPowerSeries.truncate"]], "fourierseries (class in sympy.series.fourier)": [[214, "sympy.series.fourier.FourierSeries"]], "fourier_series() (in module sympy.series.fourier)": [[214, "sympy.series.fourier.fourier_series"]], "scale() (sympy.series.fourier.fourierseries method)": [[214, "sympy.series.fourier.FourierSeries.scale"]], "scalex() (sympy.series.fourier.fourierseries method)": [[214, "sympy.series.fourier.FourierSeries.scalex"]], "shift() (sympy.series.fourier.fourierseries method)": [[214, "sympy.series.fourier.FourierSeries.shift"]], "shiftx() (sympy.series.fourier.fourierseries method)": [[214, "sympy.series.fourier.FourierSeries.shiftx"]], "sigma_approximation() (sympy.series.fourier.fourierseries method)": [[214, "sympy.series.fourier.FourierSeries.sigma_approximation"]], "truncate() (sympy.series.fourier.fourierseries method)": [[214, "sympy.series.fourier.FourierSeries.truncate"]], "difference_delta() (in module sympy.series.limitseq)": [[216, "sympy.series.limitseq.difference_delta"]], "dominant() (in module sympy.series.limitseq)": [[216, "sympy.series.limitseq.dominant"]], "limit_seq() (in module sympy.series.limitseq)": [[216, "sympy.series.limitseq.limit_seq"]], "emptysequence (class in sympy.series.sequences)": [[217, "sympy.series.sequences.EmptySequence"]], "recursiveseq (class in sympy.series.sequences)": [[217, "sympy.series.sequences.RecursiveSeq"]], "seqadd (class in sympy.series.sequences)": [[217, "sympy.series.sequences.SeqAdd"]], "seqbase (class in sympy.series.sequences)": [[217, "sympy.series.sequences.SeqBase"]], "seqformula (class in sympy.series.sequences)": [[217, "sympy.series.sequences.SeqFormula"]], "seqmul (class in sympy.series.sequences)": [[217, "sympy.series.sequences.SeqMul"]], "seqper (class in sympy.series.sequences)": [[217, "sympy.series.sequences.SeqPer"]], "coeff() (sympy.series.sequences.seqbase method)": [[217, "sympy.series.sequences.SeqBase.coeff"]], "coeff_mul() (sympy.series.sequences.emptysequence method)": [[217, "sympy.series.sequences.EmptySequence.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqbase method)": [[217, "sympy.series.sequences.SeqBase.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqformula method)": [[217, "sympy.series.sequences.SeqFormula.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqper method)": [[217, "sympy.series.sequences.SeqPer.coeff_mul"]], "find_linear_recurrence() (sympy.series.sequences.seqbase method)": [[217, "sympy.series.sequences.SeqBase.find_linear_recurrence"]], "free_symbols (sympy.series.sequences.seqbase property)": [[217, "sympy.series.sequences.SeqBase.free_symbols"]], "gen (sympy.series.sequences.seqbase property)": [[217, "sympy.series.sequences.SeqBase.gen"]], "initial (sympy.series.sequences.recursiveseq property)": [[217, "sympy.series.sequences.RecursiveSeq.initial"]], "interval (sympy.series.sequences.recursiveseq property)": [[217, "sympy.series.sequences.RecursiveSeq.interval"]], "interval (sympy.series.sequences.seqbase property)": [[217, "sympy.series.sequences.SeqBase.interval"]], "length (sympy.series.sequences.seqbase property)": [[217, "sympy.series.sequences.SeqBase.length"]], "n (sympy.series.sequences.recursiveseq property)": [[217, "sympy.series.sequences.RecursiveSeq.n"]], "recurrence (sympy.series.sequences.recursiveseq property)": [[217, "sympy.series.sequences.RecursiveSeq.recurrence"]], "reduce() (sympy.series.sequences.seqadd static method)": [[217, "sympy.series.sequences.SeqAdd.reduce"]], "reduce() (sympy.series.sequences.seqmul static method)": [[217, "sympy.series.sequences.SeqMul.reduce"]], "sequence() (in module sympy.series.sequences)": [[217, "sympy.series.sequences.sequence"]], "start (sympy.series.sequences.recursiveseq property)": [[217, "sympy.series.sequences.RecursiveSeq.start"]], "start (sympy.series.sequences.seqbase property)": [[217, "sympy.series.sequences.SeqBase.start"]], "stop (sympy.series.sequences.recursiveseq property)": [[217, "sympy.series.sequences.RecursiveSeq.stop"]], "stop (sympy.series.sequences.seqbase property)": [[217, "sympy.series.sequences.SeqBase.stop"]], "variables (sympy.series.sequences.seqbase property)": [[217, "sympy.series.sequences.SeqBase.variables"]], "y (sympy.series.sequences.recursiveseq property)": [[217, "sympy.series.sequences.RecursiveSeq.y"]], "yn (sympy.series.sequences.recursiveseq property)": [[217, "sympy.series.sequences.RecursiveSeq.yn"]], "limit (class in sympy.series.limits)": [[218, "sympy.series.limits.Limit"]], "order (class in sympy.series.order)": [[218, "sympy.series.order.Order"]], "subsset (class in sympy.series.gruntz)": [[218, "sympy.series.gruntz.SubsSet"]], "build_expression_tree() (in module sympy.series.gruntz)": [[218, "sympy.series.gruntz.build_expression_tree"]], "calculate_series() (in module sympy.series.gruntz)": [[218, "sympy.series.gruntz.calculate_series"]], "compare() (in module sympy.series.gruntz)": [[218, "sympy.series.gruntz.compare"]], "contains() (sympy.series.order.order method)": [[218, "sympy.series.order.Order.contains"]], "copy() (sympy.series.gruntz.subsset method)": [[218, "sympy.series.gruntz.SubsSet.copy"]], "do_subs() (sympy.series.gruntz.subsset method)": [[218, "sympy.series.gruntz.SubsSet.do_subs"]], "doit() (sympy.series.limits.limit method)": [[218, "sympy.series.limits.Limit.doit"]], "gruntz() (in module sympy.series.gruntz)": [[218, "sympy.series.gruntz.gruntz"]], "limit() (in module sympy.series.limits)": [[218, "sympy.series.limits.limit"]], "limitinf() (in module sympy.series.gruntz)": [[218, "sympy.series.gruntz.limitinf"]], "meets() (sympy.series.gruntz.subsset method)": [[218, "sympy.series.gruntz.SubsSet.meets"]], "mrv() (in module sympy.series.gruntz)": [[218, "sympy.series.gruntz.mrv"]], "mrv_leadterm() (in module sympy.series.gruntz)": [[218, "sympy.series.gruntz.mrv_leadterm"]], "mrv_max1() (in module sympy.series.gruntz)": [[218, "sympy.series.gruntz.mrv_max1"]], "mrv_max3() (in module sympy.series.gruntz)": [[218, "sympy.series.gruntz.mrv_max3"]], "residue() (in module sympy.series.residues)": [[218, "sympy.series.residues.residue"]], "rewrite() (in module sympy.series.gruntz)": [[218, "sympy.series.gruntz.rewrite"]], "richardson() (in module sympy.series.acceleration)": [[218, "sympy.series.acceleration.richardson"]], "series() (in module sympy.series.series)": [[218, "sympy.series.series.series"]], "shanks() (in module sympy.series.acceleration)": [[218, "sympy.series.acceleration.shanks"]], "sign() (in module sympy.series.gruntz)": [[218, "sympy.series.gruntz.sign"]], "union() (sympy.series.gruntz.subsset method)": [[218, "sympy.series.gruntz.SubsSet.union"]], "cartesiancomplexregion (class in sympy.sets.fancysets)": [[219, "sympy.sets.fancysets.CartesianComplexRegion"]], "complement (class in sympy.sets.sets)": [[219, "sympy.sets.sets.Complement"]], "complexregion (class in sympy.sets.fancysets)": [[219, "sympy.sets.fancysets.ComplexRegion"]], "complexes (class in sympy.sets.fancysets)": [[219, "sympy.sets.fancysets.Complexes"]], "conditionset (class in sympy.sets.conditionset)": [[219, "sympy.sets.conditionset.ConditionSet"]], "contains (class in sympy.sets.conditionset)": [[219, "sympy.sets.conditionset.Contains"]], "disjointunion (class in sympy.sets.sets)": [[219, "sympy.sets.sets.DisjointUnion"]], "emptyset (class in sympy.sets.sets)": [[219, "sympy.sets.sets.EmptySet"]], "finiteset (class in sympy.sets.sets)": [[219, "sympy.sets.sets.FiniteSet"]], "imageset (class in sympy.sets.fancysets)": [[219, "sympy.sets.fancysets.ImageSet"]], "integers (class in sympy.sets.fancysets)": [[219, "sympy.sets.fancysets.Integers"]], "intersection (class in sympy.sets.sets)": [[219, "sympy.sets.sets.Intersection"]], "interval (class in sympy.sets.sets)": [[219, "sympy.sets.sets.Interval"]], "lopen() (sympy.sets.sets.interval class method)": [[219, "sympy.sets.sets.Interval.Lopen"]], "naturals (class in sympy.sets.fancysets)": [[219, "sympy.sets.fancysets.Naturals"]], "naturals0 (class in sympy.sets.fancysets)": [[219, "sympy.sets.fancysets.Naturals0"]], "polarcomplexregion (class in sympy.sets.fancysets)": [[219, "sympy.sets.fancysets.PolarComplexRegion"]], "powerset (class in sympy.sets.powerset)": [[219, "sympy.sets.powerset.PowerSet"]], "productset (class in sympy.sets.sets)": [[219, "sympy.sets.sets.ProductSet"]], "range (class in sympy.sets.fancysets)": [[219, "sympy.sets.fancysets.Range"]], "rationals (class in sympy.sets.fancysets)": [[219, "sympy.sets.fancysets.Rationals"]], "reals (class in sympy.sets.fancysets)": [[219, "sympy.sets.fancysets.Reals"]], "ropen() (sympy.sets.sets.interval class method)": [[219, "sympy.sets.sets.Interval.Ropen"]], "set (class in sympy.sets.sets)": [[219, "sympy.sets.sets.Set"]], "setkind (class in sympy.sets.conditionset)": [[219, "sympy.sets.conditionset.SetKind"]], "symmetricdifference (class in sympy.sets.sets)": [[219, "sympy.sets.sets.SymmetricDifference"]], "union (class in sympy.sets.sets)": [[219, "sympy.sets.sets.Union"]], "universalset (class in sympy.sets.sets)": [[219, "sympy.sets.sets.UniversalSet"]], "a_interval (sympy.sets.fancysets.complexregion property)": [[219, "sympy.sets.fancysets.ComplexRegion.a_interval"]], "as_relational() (sympy.sets.fancysets.range method)": [[219, "sympy.sets.fancysets.Range.as_relational"]], "as_relational() (sympy.sets.sets.complement method)": [[219, "sympy.sets.sets.Complement.as_relational"]], "as_relational() (sympy.sets.sets.finiteset method)": [[219, "sympy.sets.sets.FiniteSet.as_relational"]], "as_relational() (sympy.sets.sets.intersection method)": [[219, "sympy.sets.sets.Intersection.as_relational"]], "as_relational() (sympy.sets.sets.interval method)": [[219, "sympy.sets.sets.Interval.as_relational"]], "as_relational() (sympy.sets.sets.symmetricdifference method)": [[219, "sympy.sets.sets.SymmetricDifference.as_relational"]], "as_relational() (sympy.sets.sets.union method)": [[219, "sympy.sets.sets.Union.as_relational"]], "b_interval (sympy.sets.fancysets.complexregion property)": [[219, "sympy.sets.fancysets.ComplexRegion.b_interval"]], "boundary (sympy.sets.sets.set property)": [[219, "sympy.sets.sets.Set.boundary"]], "closure (sympy.sets.sets.set property)": [[219, "sympy.sets.sets.Set.closure"]], "complement() (sympy.sets.sets.set method)": [[219, "sympy.sets.sets.Set.complement"]], "contains() (sympy.sets.sets.set method)": [[219, "sympy.sets.sets.Set.contains"]], "end (sympy.sets.sets.interval property)": [[219, "sympy.sets.sets.Interval.end"]], "from_real() (sympy.sets.fancysets.complexregion class method)": [[219, "sympy.sets.fancysets.ComplexRegion.from_real"]], "imageset() (in module sympy.sets.sets)": [[219, "sympy.sets.sets.imageset"]], "inf (sympy.sets.sets.set property)": [[219, "sympy.sets.sets.Set.inf"]], "interior (sympy.sets.sets.set property)": [[219, "sympy.sets.sets.Set.interior"]], "intersect() (sympy.sets.sets.set method)": [[219, "sympy.sets.sets.Set.intersect"]], "intersection() (sympy.sets.sets.set method)": [[219, "sympy.sets.sets.Set.intersection"]], "is_closed (sympy.sets.sets.set property)": [[219, "sympy.sets.sets.Set.is_closed"]], "is_disjoint() (sympy.sets.sets.set method)": [[219, "sympy.sets.sets.Set.is_disjoint"]], "is_iterable (sympy.sets.sets.productset property)": [[219, "sympy.sets.sets.ProductSet.is_iterable"]], "is_left_unbounded (sympy.sets.sets.interval property)": [[219, "sympy.sets.sets.Interval.is_left_unbounded"]], "is_open (sympy.sets.sets.set property)": [[219, "sympy.sets.sets.Set.is_open"]], "is_proper_subset() (sympy.sets.sets.set method)": [[219, "sympy.sets.sets.Set.is_proper_subset"]], "is_proper_superset() (sympy.sets.sets.set method)": [[219, "sympy.sets.sets.Set.is_proper_superset"]], "is_right_unbounded (sympy.sets.sets.interval property)": [[219, "sympy.sets.sets.Interval.is_right_unbounded"]], "is_subset() (sympy.sets.sets.set method)": [[219, "sympy.sets.sets.Set.is_subset"]], "is_superset() (sympy.sets.sets.set method)": [[219, "sympy.sets.sets.Set.is_superset"]], "isdisjoint() (sympy.sets.sets.set method)": [[219, "sympy.sets.sets.Set.isdisjoint"]], "issubset() (sympy.sets.sets.set method)": [[219, "sympy.sets.sets.Set.issubset"]], "issuperset() (sympy.sets.sets.set method)": [[219, "sympy.sets.sets.Set.issuperset"]], "kind (sympy.sets.sets.set property)": [[219, "sympy.sets.sets.Set.kind"]], "left_open (sympy.sets.sets.interval property)": [[219, "sympy.sets.sets.Interval.left_open"]], "measure (sympy.sets.sets.set property)": [[219, "sympy.sets.sets.Set.measure"]], "normalize_theta_set() (in module sympy.sets.fancysets)": [[219, "sympy.sets.fancysets.normalize_theta_set"]], "open() (sympy.sets.sets.interval class method)": [[219, "sympy.sets.sets.Interval.open"]], "powerset() (sympy.sets.sets.set method)": [[219, "sympy.sets.sets.Set.powerset"]], "psets (sympy.sets.fancysets.complexregion property)": [[219, "sympy.sets.fancysets.ComplexRegion.psets"]], "reduce() (sympy.sets.sets.complement static method)": [[219, "sympy.sets.sets.Complement.reduce"]], "reversed (sympy.sets.fancysets.range property)": [[219, "sympy.sets.fancysets.Range.reversed"]], "right_open (sympy.sets.sets.interval property)": [[219, "sympy.sets.sets.Interval.right_open"]], "sets (sympy.sets.fancysets.complexregion property)": [[219, "sympy.sets.fancysets.ComplexRegion.sets"]], "start (sympy.sets.sets.interval property)": [[219, "sympy.sets.sets.Interval.start"]], "sup (sympy.sets.sets.set property)": [[219, "sympy.sets.sets.Set.sup"]], "symmetric_difference() (sympy.sets.sets.set method)": [[219, "sympy.sets.sets.Set.symmetric_difference"]], "sympy.sets.conditionset": [[219, "module-sympy.sets.conditionset"]], "sympy.sets.fancysets": [[219, "module-sympy.sets.fancysets"]], "sympy.sets.powerset": [[219, "module-sympy.sets.powerset"]], "sympy.sets.sets": [[219, "module-sympy.sets.sets"]], "union() (sympy.sets.sets.set method)": [[219, "sympy.sets.sets.Set.union"]], "tr0() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR0"]], "tr1() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR1"]], "tr10() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR10"]], "tr10i() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR10i"]], "tr11() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR11"]], "tr111() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR111"]], "tr12() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR12"]], "tr12i() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR12i"]], "tr13() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR13"]], "tr14() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR14"]], "tr15() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR15"]], "tr16() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR16"]], "tr2() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR2"]], "tr22() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR22"]], "tr2i() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR2i"]], "tr3() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR3"]], "tr4() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR4"]], "tr5() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR5"]], "tr6() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR6"]], "tr7() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR7"]], "tr8() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR8"]], "tr9() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TR9"]], "trmorrie() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TRmorrie"]], "trpower() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.TRpower"]], "fu() (in module sympy.simplify.fu)": [[220, "sympy.simplify.fu.fu"]], "sympy.simplify.hyperexpand_doc": [[221, "module-sympy.simplify.hyperexpand_doc"]], "epath (class in sympy.simplify.epathtools)": [[223, "sympy.simplify.epathtools.EPath"]], "apply() (sympy.simplify.epathtools.epath method)": [[223, "sympy.simplify.epathtools.EPath.apply"]], "besselsimp() (in module sympy.simplify.simplify)": [[223, "sympy.simplify.simplify.besselsimp"]], "collect() (in module sympy.simplify.radsimp)": [[223, "sympy.simplify.radsimp.collect"]], "collect_const() (in module sympy.simplify.radsimp)": [[223, "sympy.simplify.radsimp.collect_const"]], "collect_sqrt() (in module sympy.simplify.radsimp)": [[223, "sympy.simplify.radsimp.collect_sqrt"]], "combsimp() (in module sympy.simplify.combsimp)": [[223, "sympy.simplify.combsimp.combsimp"]], "cse() (in module sympy.simplify.cse_main)": [[223, "sympy.simplify.cse_main.cse"]], "epath() (in module sympy.simplify.epathtools)": [[223, "sympy.simplify.epathtools.epath"]], "fraction() (in module sympy.simplify.radsimp)": [[223, "sympy.simplify.radsimp.fraction"]], "hyperexpand() (in module sympy.simplify.hyperexpand)": [[223, "sympy.simplify.hyperexpand.hyperexpand"]], "hypersimilar() (in module sympy.simplify.simplify)": [[223, "sympy.simplify.simplify.hypersimilar"]], "hypersimp() (in module sympy.simplify.simplify)": [[223, "sympy.simplify.simplify.hypersimp"]], "kroneckersimp() (in module sympy.simplify.simplify)": [[223, "sympy.simplify.simplify.kroneckersimp"]], "logcombine() (in module sympy.simplify.simplify)": [[223, "sympy.simplify.simplify.logcombine"]], "nsimplify() (in module sympy.simplify.simplify)": [[223, "sympy.simplify.simplify.nsimplify"]], "nthroot() (in module sympy.simplify.simplify)": [[223, "sympy.simplify.simplify.nthroot"]], "opt_cse() (in module sympy.simplify.cse_main)": [[223, "sympy.simplify.cse_main.opt_cse"]], "posify() (in module sympy.simplify.simplify)": [[223, "sympy.simplify.simplify.posify"]], "powdenest() (in module sympy.simplify.powsimp)": [[223, "sympy.simplify.powsimp.powdenest"]], "powsimp() (in module sympy.simplify.powsimp)": [[223, "sympy.simplify.powsimp.powsimp"]], "rad_rationalize() (in module sympy.simplify.radsimp)": [[223, "sympy.simplify.radsimp.rad_rationalize"]], "radsimp() (in module sympy.simplify.radsimp)": [[223, "sympy.simplify.radsimp.radsimp"]], "ratsimp() (in module sympy.simplify.ratsimp)": [[223, "sympy.simplify.ratsimp.ratsimp"]], "ratsimpmodprime() (in module sympy.simplify.ratsimp)": [[223, "sympy.simplify.ratsimp.ratsimpmodprime"]], "rcollect() (in module sympy.simplify.radsimp)": [[223, "sympy.simplify.radsimp.rcollect"]], "select() (sympy.simplify.epathtools.epath method)": [[223, "sympy.simplify.epathtools.EPath.select"]], "separatevars() (in module sympy.simplify.simplify)": [[223, "sympy.simplify.simplify.separatevars"]], "simplify() (in module sympy.simplify.simplify)": [[223, "sympy.simplify.simplify.simplify"]], "sqrtdenest() (in module sympy.simplify.sqrtdenest)": [[223, "sympy.simplify.sqrtdenest.sqrtdenest"]], "sympy.simplify.combsimp": [[223, "module-sympy.simplify.combsimp"]], "sympy.simplify.cse_main": [[223, "module-sympy.simplify.cse_main"]], "sympy.simplify.epathtools": [[223, "module-sympy.simplify.epathtools"]], "sympy.simplify.hyperexpand": [[223, "module-sympy.simplify.hyperexpand"]], "sympy.simplify.powsimp": [[223, "module-sympy.simplify.powsimp"]], "sympy.simplify.radsimp": [[223, "module-sympy.simplify.radsimp"]], "sympy.simplify.ratsimp": [[223, "module-sympy.simplify.ratsimp"]], "sympy.simplify.sqrtdenest": [[223, "module-sympy.simplify.sqrtdenest"]], "sympy.simplify.trigsimp": [[223, "module-sympy.simplify.trigsimp"]], "tree_cse() (in module sympy.simplify.cse_main)": [[223, "sympy.simplify.cse_main.tree_cse"]], "trigsimp() (in module sympy.simplify.trigsimp)": [[223, "sympy.simplify.trigsimp.trigsimp"]], "binaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.BinaryQuadratic"]], "cubicthue (class in sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.CubicThue"]], "diophantineequationtype (class in sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.DiophantineEquationType"]], "diophantinesolutionset (class in sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.DiophantineSolutionSet"]], "generalpythagorean (class in sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.GeneralPythagorean"]], "generalsumofevenpowers (class in sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.GeneralSumOfEvenPowers"]], "generalsumofsquares (class in sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.GeneralSumOfSquares"]], "homogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.HomogeneousGeneralQuadratic"]], "homogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadratic"]], "homogeneousternaryquadraticnormal (class in sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadraticNormal"]], "inhomogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.InhomogeneousGeneralQuadratic"]], "inhomogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.InhomogeneousTernaryQuadratic"]], "linear (class in sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.Linear"]], "pqa() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.PQa"]], "univariate (class in sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.Univariate"]], "base_solution_linear() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.base_solution_linear"]], "classify_diop() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.classify_diop"]], "cornacchia() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.cornacchia"]], "descent() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.descent"]], "diop_dn() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.diop_DN"]], "diop_bf_dn() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.diop_bf_DN"]], "diop_general_pythagorean() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.diop_general_pythagorean"]], "diop_general_sum_of_even_powers() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_even_powers"]], "diop_general_sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_squares"]], "diop_linear() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.diop_linear"]], "diop_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.diop_quadratic"]], "diop_solve() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.diop_solve"]], "diop_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic"]], "diop_ternary_quadratic_normal() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic_normal"]], "diophantine() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.diophantine"]], "divisible() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.divisible"]], "equivalent() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.equivalent"]], "find_dn() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.find_DN"]], "gaussian_reduce() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.gaussian_reduce"]], "holzer() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.holzer"]], "ldescent() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.ldescent"]], "matches() (sympy.solvers.diophantine.diophantine.diophantineequationtype method)": [[224, "sympy.solvers.diophantine.diophantine.DiophantineEquationType.matches"]], "merge_solution() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.merge_solution"]], "parametrize_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.parametrize_ternary_quadratic"]], "partition() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.partition"]], "power_representation() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.power_representation"]], "prime_as_sum_of_two_squares() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.prime_as_sum_of_two_squares"]], "reconstruct() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.reconstruct"]], "sqf_normal() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.sqf_normal"]], "square_factor() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.square_factor"]], "sum_of_four_squares() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.sum_of_four_squares"]], "sum_of_powers() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.sum_of_powers"]], "sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.sum_of_squares"]], "sum_of_three_squares() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.sum_of_three_squares"]], "transformation_to_dn() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.transformation_to_DN"]], "transformation_to_normal() (in module sympy.solvers.diophantine.diophantine)": [[224, "sympy.solvers.diophantine.diophantine.transformation_to_normal"]], "reduce_abs_inequalities() (in module sympy.solvers.inequalities)": [[226, "sympy.solvers.inequalities.reduce_abs_inequalities"]], "reduce_abs_inequality() (in module sympy.solvers.inequalities)": [[226, "sympy.solvers.inequalities.reduce_abs_inequality"]], "reduce_inequalities() (in module sympy.solvers.inequalities)": [[226, "sympy.solvers.inequalities.reduce_inequalities"]], "reduce_rational_inequalities() (in module sympy.solvers.inequalities)": [[226, "sympy.solvers.inequalities.reduce_rational_inequalities"]], "solve_poly_inequalities() (in module sympy.solvers.inequalities)": [[226, "sympy.solvers.inequalities.solve_poly_inequalities"]], "solve_poly_inequality() (in module sympy.solvers.inequalities)": [[226, "sympy.solvers.inequalities.solve_poly_inequality"]], "solve_rational_inequalities() (in module sympy.solvers.inequalities)": [[226, "sympy.solvers.inequalities.solve_rational_inequalities"]], "solve_univariate_inequality() (in module sympy.solvers.inequalities)": [[226, "sympy.solvers.inequalities.solve_univariate_inequality"]], "sympy.solvers.inequalities": [[226, "module-sympy.solvers.inequalities"]], "almostlinear (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.AlmostLinear"]], "bernoulli (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.Bernoulli"]], "factorable (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.Factorable"]], "firstexact (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.FirstExact"]], "firstlinear (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.FirstLinear"]], "homogeneouscoeffbest (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.HomogeneousCoeffBest"]], "homogeneouscoeffsubsdepdivindep (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep"]], "homogeneouscoeffsubsindepdivdep (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep"]], "liegroup (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.LieGroup"]], "linearcoefficients (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.LinearCoefficients"]], "liouville (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.Liouville"]], "nthalgebraic (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.NthAlgebraic"]], "nthlinearconstantcoeffhomogeneous (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.NthLinearConstantCoeffHomogeneous"]], "nthlinearconstantcoeffundeterminedcoefficients (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.NthLinearConstantCoeffUndeterminedCoefficients"]], "nthlinearconstantcoeffvariationofparameters (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.NthLinearConstantCoeffVariationOfParameters"]], "nthlineareulereqhomogeneous (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.NthLinearEulerEqHomogeneous"]], "nthlineareulereqnonhomogeneousundeterminedcoefficients (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"]], "nthlineareulereqnonhomogeneousvariationofparameters (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousVariationOfParameters"]], "nthorderreducible (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.NthOrderReducible"]], "rationalriccati (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.RationalRiccati"]], "riccatispecial (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.RiccatiSpecial"]], "secondhypergeometric (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.SecondHypergeometric"]], "secondlinearairy (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.SecondLinearAiry"]], "secondlinearbessel (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.SecondLinearBessel"]], "separable (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.Separable"]], "separablereduced (class in sympy.solvers.ode.single)": [[227, "sympy.solvers.ode.single.SeparableReduced"]], "_handle_integral() (in module sympy.solvers.ode.ode)": [[227, "sympy.solvers.ode.ode._handle_Integral"]], "_linear_2eq_order1_type6() (in module sympy.solvers.ode.ode)": [[227, "sympy.solvers.ode.ode._linear_2eq_order1_type6"]], "_linear_2eq_order1_type7() (in module sympy.solvers.ode.ode)": [[227, "sympy.solvers.ode.ode._linear_2eq_order1_type7"]], "_nonlinear_2eq_order1_type1() (in module sympy.solvers.ode.ode)": [[227, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type1"]], "_nonlinear_2eq_order1_type2() (in module sympy.solvers.ode.ode)": [[227, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type2"]], "_nonlinear_2eq_order1_type3() (in module sympy.solvers.ode.ode)": [[227, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type3"]], "_nonlinear_2eq_order1_type4() (in module sympy.solvers.ode.ode)": [[227, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type4"]], "_nonlinear_2eq_order1_type5() (in module sympy.solvers.ode.ode)": [[227, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type5"]], "_nonlinear_3eq_order1_type1() (in module sympy.solvers.ode.ode)": [[227, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type1"]], "_nonlinear_3eq_order1_type2() (in module sympy.solvers.ode.ode)": [[227, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type2"]], "_nonlinear_3eq_order1_type3() (in module sympy.solvers.ode.ode)": [[227, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type3"]], "_nonlinear_3eq_order1_type4() (in module sympy.solvers.ode.ode)": [[227, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type4"]], "_nonlinear_3eq_order1_type5() (in module sympy.solvers.ode.ode)": [[227, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type5"]], "allhints (in module sympy.solvers.ode)": [[227, "sympy.solvers.ode.allhints"]], "canonical_odes() (in module sympy.solvers.ode.systems)": [[227, "sympy.solvers.ode.systems.canonical_odes"]], "checkinfsol() (in module sympy.solvers.ode)": [[227, "sympy.solvers.ode.checkinfsol"]], "checkodesol() (in module sympy.solvers.ode)": [[227, "sympy.solvers.ode.checkodesol"]], "classify_ode() (in module sympy.solvers.ode)": [[227, "sympy.solvers.ode.classify_ode"]], "compute_m_ybar() (in module sympy.solvers.ode.riccati)": [[227, "sympy.solvers.ode.riccati.compute_m_ybar"]], "constant_renumber() (in module sympy.solvers.ode.ode)": [[227, "sympy.solvers.ode.ode.constant_renumber"]], "constantsimp() (in module sympy.solvers.ode)": [[227, "sympy.solvers.ode.constantsimp"]], "construct_c() (in module sympy.solvers.ode.riccati)": [[227, "sympy.solvers.ode.riccati.construct_c"]], "construct_d() (in module sympy.solvers.ode.riccati)": [[227, "sympy.solvers.ode.riccati.construct_d"]], "dsolve() (in module sympy.solvers.ode)": [[227, "sympy.solvers.ode.dsolve"]], "dsolve_system() (in module sympy.solvers.ode.systems)": [[227, "sympy.solvers.ode.systems.dsolve_system"]], "get_gen_sol_from_part_sol() (in module sympy.solvers.ode.riccati)": [[227, "sympy.solvers.ode.riccati.get_gen_sol_from_part_sol"]], "homogeneous_order() (in module sympy.solvers.ode)": [[227, "sympy.solvers.ode.homogeneous_order"]], "infinitesimals() (in module sympy.solvers.ode)": [[227, "sympy.solvers.ode.infinitesimals"]], "lie_heuristic_abaco1_product() (in module sympy.solvers.ode.lie_group)": [[227, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_product"]], "lie_heuristic_abaco1_simple() (in module sympy.solvers.ode.lie_group)": [[227, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_simple"]], "lie_heuristic_abaco2_similar() (in module sympy.solvers.ode.lie_group)": [[227, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_similar"]], "lie_heuristic_abaco2_unique_general() (in module sympy.solvers.ode.lie_group)": [[227, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_general"]], "lie_heuristic_abaco2_unique_unknown() (in module sympy.solvers.ode.lie_group)": [[227, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_unknown"]], "lie_heuristic_bivariate() (in module sympy.solvers.ode.lie_group)": [[227, "sympy.solvers.ode.lie_group.lie_heuristic_bivariate"]], "lie_heuristic_chi() (in module sympy.solvers.ode.lie_group)": [[227, "sympy.solvers.ode.lie_group.lie_heuristic_chi"]], "lie_heuristic_function_sum() (in module sympy.solvers.ode.lie_group)": [[227, "sympy.solvers.ode.lie_group.lie_heuristic_function_sum"]], "lie_heuristic_linear() (in module sympy.solvers.ode.lie_group)": [[227, "sympy.solvers.ode.lie_group.lie_heuristic_linear"]], "linear_ode_to_matrix() (in module sympy.solvers.ode.systems)": [[227, "sympy.solvers.ode.systems.linear_ode_to_matrix"]], "linodesolve() (in module sympy.solvers.ode.systems)": [[227, "sympy.solvers.ode.systems.linodesolve"]], "linodesolve_type() (in module sympy.solvers.ode.systems)": [[227, "sympy.solvers.ode.systems.linodesolve_type"]], "matrix_exp() (in module sympy.solvers.ode.systems)": [[227, "sympy.solvers.ode.systems.matrix_exp"]], "matrix_exp_jordan_form() (in module sympy.solvers.ode.systems)": [[227, "sympy.solvers.ode.systems.matrix_exp_jordan_form"]], "ode_1st_power_series() (in module sympy.solvers.ode.ode)": [[227, "sympy.solvers.ode.ode.ode_1st_power_series"]], "ode_2nd_power_series_ordinary() (in module sympy.solvers.ode.ode)": [[227, "sympy.solvers.ode.ode.ode_2nd_power_series_ordinary"]], "ode_2nd_power_series_regular() (in module sympy.solvers.ode.ode)": [[227, "sympy.solvers.ode.ode.ode_2nd_power_series_regular"]], "ode_sol_simplicity() (in module sympy.solvers.ode.ode)": [[227, "sympy.solvers.ode.ode.ode_sol_simplicity"]], "odesimp() (in module sympy.solvers.ode.ode)": [[227, "sympy.solvers.ode.ode.odesimp"]], "rational_laurent_series() (in module sympy.solvers.ode.riccati)": [[227, "sympy.solvers.ode.riccati.rational_laurent_series"]], "remove_redundant_sols() (in module sympy.solvers.ode.riccati)": [[227, "sympy.solvers.ode.riccati.remove_redundant_sols"]], "riccati_inverse_normal() (in module sympy.solvers.ode.riccati)": [[227, "sympy.solvers.ode.riccati.riccati_inverse_normal"]], "riccati_normal() (in module sympy.solvers.ode.riccati)": [[227, "sympy.solvers.ode.riccati.riccati_normal"]], "riccati_reduced() (in module sympy.solvers.ode.riccati)": [[227, "sympy.solvers.ode.riccati.riccati_reduced"]], "solve_aux_eq() (in module sympy.solvers.ode.riccati)": [[227, "sympy.solvers.ode.riccati.solve_aux_eq"]], "solve_riccati() (in module sympy.solvers.ode.riccati)": [[227, "sympy.solvers.ode.riccati.solve_riccati"]], "sympy.solvers.ode": [[227, "module-sympy.solvers.ode"]], "sympy.solvers.ode.ode": [[227, "module-sympy.solvers.ode.ode"]], "checkpdesol() (in module sympy.solvers.pde)": [[228, "sympy.solvers.pde.checkpdesol"]], "classify_pde() (in module sympy.solvers.pde)": [[228, "sympy.solvers.pde.classify_pde"]], "pde_1st_linear_constant_coeff() (in module sympy.solvers.pde)": [[228, "sympy.solvers.pde.pde_1st_linear_constant_coeff"]], "pde_1st_linear_constant_coeff_homogeneous() (in module sympy.solvers.pde)": [[228, "sympy.solvers.pde.pde_1st_linear_constant_coeff_homogeneous"]], "pde_1st_linear_variable_coeff() (in module sympy.solvers.pde)": [[228, "sympy.solvers.pde.pde_1st_linear_variable_coeff"]], "pde_separate() (in module sympy.solvers.pde)": [[228, "sympy.solvers.pde.pde_separate"]], "pde_separate_add() (in module sympy.solvers.pde)": [[228, "sympy.solvers.pde.pde_separate_add"]], "pde_separate_mul() (in module sympy.solvers.pde)": [[228, "sympy.solvers.pde.pde_separate_mul"]], "pdsolve() (in module sympy.solvers.pde)": [[228, "sympy.solvers.pde.pdsolve"]], "sympy.solvers.pde": [[228, "module-sympy.solvers.pde"]], "checksol() (in module sympy.solvers.solvers)": [[229, "sympy.solvers.solvers.checksol"]], "nsolve() (in module sympy.solvers.solvers)": [[229, "sympy.solvers.solvers.nsolve"]], "ode_order() (in module sympy.solvers.deutils)": [[229, "sympy.solvers.deutils.ode_order"]], "rsolve() (in module sympy.solvers.recurr)": [[229, "sympy.solvers.recurr.rsolve"]], "rsolve_hyper() (in module sympy.solvers.recurr)": [[229, "sympy.solvers.recurr.rsolve_hyper"]], "rsolve_poly() (in module sympy.solvers.recurr)": [[229, "sympy.solvers.recurr.rsolve_poly"]], "rsolve_ratio() (in module sympy.solvers.recurr)": [[229, "sympy.solvers.recurr.rsolve_ratio"]], "solve() (in module sympy.solvers.solvers)": [[229, "sympy.solvers.solvers.solve"]], "solve_linear() (in module sympy.solvers.solvers)": [[229, "sympy.solvers.solvers.solve_linear"]], "solve_linear_system() (in module sympy.solvers.solvers)": [[229, "sympy.solvers.solvers.solve_linear_system"]], "solve_linear_system_lu() (in module sympy.solvers.solvers)": [[229, "sympy.solvers.solvers.solve_linear_system_LU"]], "solve_poly_system() (in module sympy.solvers.polysys)": [[229, "sympy.solvers.polysys.solve_poly_system"]], "solve_triangulated() (in module sympy.solvers.polysys)": [[229, "sympy.solvers.polysys.solve_triangulated"]], "solve_undetermined_coeffs() (in module sympy.solvers.solvers)": [[229, "sympy.solvers.solvers.solve_undetermined_coeffs"]], "sympy.solvers": [[229, "module-sympy.solvers"]], "sympy.solvers.recurr": [[229, "module-sympy.solvers.recurr"]], "unrad() (in module sympy.solvers.solvers)": [[229, "sympy.solvers.solvers.unrad"]], "_is_exponential() (in module sympy.solvers.solveset)": [[230, "sympy.solvers.solveset._is_exponential"]], "_is_logarithmic() (in module sympy.solvers.solveset)": [[230, "sympy.solvers.solveset._is_logarithmic"]], "_solve_exponential() (in module sympy.solvers.solveset)": [[230, "sympy.solvers.solveset._solve_exponential"]], "_solve_logarithm() (in module sympy.solvers.solveset)": [[230, "sympy.solvers.solveset._solve_logarithm"]], "_transolve() (in module sympy.solvers.solveset)": [[230, "sympy.solvers.solveset._transolve"]], "domain_check() (in module sympy.solvers.solveset)": [[230, "sympy.solvers.solveset.domain_check"]], "invert_complex() (in module sympy.solvers.solveset)": [[230, "sympy.solvers.solveset.invert_complex"]], "invert_real() (in module sympy.solvers.solveset)": [[230, "sympy.solvers.solveset.invert_real"]], "linear_eq_to_matrix() (in module sympy.solvers.solveset)": [[230, "sympy.solvers.solveset.linear_eq_to_matrix"]], "linsolve() (in module sympy.solvers.solveset)": [[230, "sympy.solvers.solveset.linsolve"]], "nonlinsolve() (in module sympy.solvers.solveset)": [[230, "sympy.solvers.solveset.nonlinsolve"]], "solveset() (in module sympy.solvers.solveset)": [[230, "sympy.solvers.solveset.solveset"]], "solveset_complex() (in module sympy.solvers.solveset)": [[230, "sympy.solvers.solveset.solveset_complex"]], "solveset_real() (in module sympy.solvers.solveset)": [[230, "sympy.solvers.solveset.solveset_real"]], "solvify() (in module sympy.solvers.solveset)": [[230, "sympy.solvers.solveset.solvify"]], "sympy.solvers.solveset": [[230, "module-sympy.solvers.solveset"]], "arcsin() (in module sympy.stats)": [[231, "sympy.stats.Arcsin"]], "benini() (in module sympy.stats)": [[231, "sympy.stats.Benini"]], "bernoulli() (in module sympy.stats)": [[231, "sympy.stats.Bernoulli"]], "bernoulliprocess (class in sympy.stats)": [[231, "sympy.stats.BernoulliProcess"]], "beta() (in module sympy.stats)": [[231, "sympy.stats.Beta"]], "betabinomial() (in module sympy.stats)": [[231, "sympy.stats.BetaBinomial"]], "betanoncentral() (in module sympy.stats)": [[231, "sympy.stats.BetaNoncentral"]], "betaprime() (in module sympy.stats)": [[231, "sympy.stats.BetaPrime"]], "binomial() (in module sympy.stats)": [[231, "sympy.stats.Binomial"]], "boundedpareto() (in module sympy.stats)": [[231, "sympy.stats.BoundedPareto"]], "cauchy() (in module sympy.stats)": [[231, "sympy.stats.Cauchy"]], "centralmoment (class in sympy.stats)": [[231, "sympy.stats.CentralMoment"]], "chi() (in module sympy.stats)": [[231, "sympy.stats.Chi"]], "chinoncentral() (in module sympy.stats)": [[231, "sympy.stats.ChiNoncentral"]], "chisquared() (in module sympy.stats)": [[231, "sympy.stats.ChiSquared"]], "coin() (in module sympy.stats)": [[231, "sympy.stats.Coin"]], "compounddistribution (class in sympy.stats.compound_rv)": [[231, "sympy.stats.compound_rv.CompoundDistribution"]], "conditionaldomain (class in sympy.stats.rv)": [[231, "sympy.stats.rv.ConditionalDomain"]], "continuousdomain (class in sympy.stats.crv)": [[231, "sympy.stats.crv.ContinuousDomain"]], "continuousmarkovchain (class in sympy.stats)": [[231, "sympy.stats.ContinuousMarkovChain"]], "continuouspspace (class in sympy.stats.crv)": [[231, "sympy.stats.crv.ContinuousPSpace"]], "continuousrv() (in module sympy.stats)": [[231, "sympy.stats.ContinuousRV"]], "covariance (class in sympy.stats)": [[231, "sympy.stats.Covariance"]], "crosscovariancematrix (class in sympy.stats)": [[231, "sympy.stats.CrossCovarianceMatrix"]], "dagum() (in module sympy.stats)": [[231, "sympy.stats.Dagum"]], "die() (in module sympy.stats)": [[231, "sympy.stats.Die"]], "diepspace (class in sympy.stats.frv_types)": [[231, "sympy.stats.frv_types.DiePSpace"]], "discretemarkovchain (class in sympy.stats)": [[231, "sympy.stats.DiscreteMarkovChain"]], "discreteuniform() (in module sympy.stats)": [[231, "sympy.stats.DiscreteUniform"]], "e() (in module sympy.stats)": [[231, "sympy.stats.E"]], "erlang() (in module sympy.stats)": [[231, "sympy.stats.Erlang"]], "exgaussian() (in module sympy.stats)": [[231, "sympy.stats.ExGaussian"]], "expectation (class in sympy.stats)": [[231, "sympy.stats.Expectation"]], "expectationmatrix (class in sympy.stats)": [[231, "sympy.stats.ExpectationMatrix"]], "exponential() (in module sympy.stats)": [[231, "sympy.stats.Exponential"]], "fdistribution() (in module sympy.stats)": [[231, "sympy.stats.FDistribution"]], "finitedomain (class in sympy.stats.frv)": [[231, "sympy.stats.frv.FiniteDomain"]], "finitepspace (class in sympy.stats.frv)": [[231, "sympy.stats.frv.FinitePSpace"]], "finiterv() (in module sympy.stats)": [[231, "sympy.stats.FiniteRV"]], "fisherz() (in module sympy.stats)": [[231, "sympy.stats.FisherZ"]], "frechet() (in module sympy.stats)": [[231, "sympy.stats.Frechet"]], "gamma() (in module sympy.stats)": [[231, "sympy.stats.Gamma"]], "gammainverse() (in module sympy.stats)": [[231, "sympy.stats.GammaInverse"]], "gammaprocess (class in sympy.stats)": [[231, "sympy.stats.GammaProcess"]], "generalizedmultivariateloggamma() (in module sympy.stats)": [[231, "sympy.stats.GeneralizedMultivariateLogGamma"]], "generalizedmultivariateloggammaomega() (in module sympy.stats)": [[231, "sympy.stats.GeneralizedMultivariateLogGammaOmega"]], "geometric() (in module sympy.stats)": [[231, "sympy.stats.Geometric"]], "gompertz() (in module sympy.stats)": [[231, "sympy.stats.Gompertz"]], "gumbel() (in module sympy.stats)": [[231, "sympy.stats.Gumbel"]], "hermite() (in module sympy.stats)": [[231, "sympy.stats.Hermite"]], "hypergeometric() (in module sympy.stats)": [[231, "sympy.stats.Hypergeometric"]], "jointrv() (in module sympy.stats)": [[231, "sympy.stats.JointRV"]], "kumaraswamy() (in module sympy.stats)": [[231, "sympy.stats.Kumaraswamy"]], "laplace() (in module sympy.stats)": [[231, "sympy.stats.Laplace"]], "levy() (in module sympy.stats)": [[231, "sympy.stats.Levy"]], "loglogistic() (in module sympy.stats)": [[231, "sympy.stats.LogLogistic"]], "lognormal() (in module sympy.stats)": [[231, "sympy.stats.LogNormal"]], "logarithmic() (in module sympy.stats)": [[231, "sympy.stats.Logarithmic"]], "logistic() (in module sympy.stats)": [[231, "sympy.stats.Logistic"]], "lomax() (in module sympy.stats)": [[231, "sympy.stats.Lomax"]], "matrixgamma() (in module sympy.stats)": [[231, "sympy.stats.MatrixGamma"]], "matrixnormal() (in module sympy.stats)": [[231, "sympy.stats.MatrixNormal"]], "maxwell() (in module sympy.stats)": [[231, "sympy.stats.Maxwell"]], "moment (class in sympy.stats)": [[231, "sympy.stats.Moment"]], "moyal() (in module sympy.stats)": [[231, "sympy.stats.Moyal"]], "multinomial() (in module sympy.stats)": [[231, "sympy.stats.Multinomial"]], "multivariatebeta() (in module sympy.stats)": [[231, "sympy.stats.MultivariateBeta"]], "multivariateewens() (in module sympy.stats)": [[231, "sympy.stats.MultivariateEwens"]], "multivariatelaplace() (in module sympy.stats)": [[231, "sympy.stats.MultivariateLaplace"]], "multivariatenormal() (in module sympy.stats)": [[231, "sympy.stats.MultivariateNormal"]], "multivariatet() (in module sympy.stats)": [[231, "sympy.stats.MultivariateT"]], "nakagami() (in module sympy.stats)": [[231, "sympy.stats.Nakagami"]], "negativebinomial() (in module sympy.stats)": [[231, "sympy.stats.NegativeBinomial"]], "negativemultinomial() (in module sympy.stats)": [[231, "sympy.stats.NegativeMultinomial"]], "normal() (in module sympy.stats)": [[231, "sympy.stats.Normal"]], "normalgamma() (in module sympy.stats)": [[231, "sympy.stats.NormalGamma"]], "normalpspace (class in sympy.stats.crv_types)": [[231, "sympy.stats.crv_types.NormalPSpace"]], "p() (in module sympy.stats)": [[231, "sympy.stats.P"]], "pspace (class in sympy.stats.rv)": [[231, "sympy.stats.rv.PSpace"]], "pareto() (in module sympy.stats)": [[231, "sympy.stats.Pareto"]], "poisson() (in module sympy.stats)": [[231, "sympy.stats.Poisson"]], "poissonprocess (class in sympy.stats)": [[231, "sympy.stats.PoissonProcess"]], "powerfunction() (in module sympy.stats)": [[231, "sympy.stats.PowerFunction"]], "probability (class in sympy.stats)": [[231, "sympy.stats.Probability"]], "productdomain (class in sympy.stats.rv)": [[231, "sympy.stats.rv.ProductDomain"]], "productpspace (class in sympy.stats.rv)": [[231, "sympy.stats.rv.ProductPSpace"]], "quadraticu() (in module sympy.stats)": [[231, "sympy.stats.QuadraticU"]], "rademacher() (in module sympy.stats)": [[231, "sympy.stats.Rademacher"]], "raisedcosine() (in module sympy.stats)": [[231, "sympy.stats.RaisedCosine"]], "randomdomain (class in sympy.stats.rv)": [[231, "sympy.stats.rv.RandomDomain"]], "randomsymbol (class in sympy.stats.rv)": [[231, "sympy.stats.rv.RandomSymbol"]], "rayleigh() (in module sympy.stats)": [[231, "sympy.stats.Rayleigh"]], "reciprocal() (in module sympy.stats)": [[231, "sympy.stats.Reciprocal"]], "shiftedgompertz() (in module sympy.stats)": [[231, "sympy.stats.ShiftedGompertz"]], "singledomain (class in sympy.stats.rv)": [[231, "sympy.stats.rv.SingleDomain"]], "singlepspace (class in sympy.stats.rv)": [[231, "sympy.stats.rv.SinglePSpace"]], "skellam() (in module sympy.stats)": [[231, "sympy.stats.Skellam"]], "studentt() (in module sympy.stats)": [[231, "sympy.stats.StudentT"]], "trapezoidal() (in module sympy.stats)": [[231, "sympy.stats.Trapezoidal"]], "triangular() (in module sympy.stats)": [[231, "sympy.stats.Triangular"]], "uniform() (in module sympy.stats)": [[231, "sympy.stats.Uniform"]], "uniformsum() (in module sympy.stats)": [[231, "sympy.stats.UniformSum"]], "variance (class in sympy.stats)": [[231, "sympy.stats.Variance"]], "variancematrix (class in sympy.stats)": [[231, "sympy.stats.VarianceMatrix"]], "vonmises() (in module sympy.stats)": [[231, "sympy.stats.VonMises"]], "wald() (in module sympy.stats)": [[231, "sympy.stats.Wald"]], "weibull() (in module sympy.stats)": [[231, "sympy.stats.Weibull"]], "wienerprocess (class in sympy.stats)": [[231, "sympy.stats.WienerProcess"]], "wignersemicircle() (in module sympy.stats)": [[231, "sympy.stats.WignerSemicircle"]], "wishart() (in module sympy.stats)": [[231, "sympy.stats.Wishart"]], "yulesimon() (in module sympy.stats)": [[231, "sympy.stats.YuleSimon"]], "zeta() (in module sympy.stats)": [[231, "sympy.stats.Zeta"]], "absorbing_probabilities() (sympy.stats.discretemarkovchain method)": [[231, "sympy.stats.DiscreteMarkovChain.absorbing_probabilities"]], "canonical_form() (sympy.stats.discretemarkovchain method)": [[231, "sympy.stats.DiscreteMarkovChain.canonical_form"]], "cmoment() (in module sympy.stats)": [[231, "sympy.stats.cmoment"]], "communication_classes() (sympy.stats.discretemarkovchain method)": [[231, "sympy.stats.DiscreteMarkovChain.communication_classes"]], "correlation() (in module sympy.stats)": [[231, "sympy.stats.correlation"]], "coskewness() (in module sympy.stats)": [[231, "sympy.stats.coskewness"]], "covariance() (in module sympy.stats)": [[231, "sympy.stats.covariance"]], "decompose() (sympy.stats.discretemarkovchain method)": [[231, "sympy.stats.DiscreteMarkovChain.decompose"]], "density() (in module sympy.stats)": [[231, "sympy.stats.density"]], "entropy() (in module sympy.stats)": [[231, "sympy.stats.entropy"]], "expectation() (sympy.stats.bernoulliprocess method)": [[231, "sympy.stats.BernoulliProcess.expectation"]], "factorial_moment() (in module sympy.stats)": [[231, "sympy.stats.factorial_moment"]], "fixed_row_vector() (sympy.stats.discretemarkovchain method)": [[231, "sympy.stats.DiscreteMarkovChain.fixed_row_vector"]], "fundamental_matrix() (sympy.stats.discretemarkovchain method)": [[231, "sympy.stats.DiscreteMarkovChain.fundamental_matrix"]], "given() (in module sympy.stats)": [[231, "sympy.stats.given"]], "kurtosis() (in module sympy.stats)": [[231, "sympy.stats.kurtosis"]], "limiting_distribution (sympy.stats.discretemarkovchain property)": [[231, "sympy.stats.DiscreteMarkovChain.limiting_distribution"]], "marginal_distribution() (in module sympy.stats)": [[231, "sympy.stats.marginal_distribution"]], "median() (in module sympy.stats)": [[231, "sympy.stats.median"]], "moment() (in module sympy.stats)": [[231, "sympy.stats.moment"]], "probability() (sympy.stats.bernoulliprocess method)": [[231, "sympy.stats.BernoulliProcess.probability"]], "pspace() (in module sympy.stats.rv)": [[231, "sympy.stats.rv.pspace"]], "quantile() (in module sympy.stats)": [[231, "sympy.stats.quantile"]], "random_symbols() (in module sympy.stats.rv)": [[231, "sympy.stats.rv.random_symbols"]], "rs_swap() (in module sympy.stats.rv)": [[231, "sympy.stats.rv.rs_swap"]], "sample() (in module sympy.stats)": [[231, "sympy.stats.sample"]], "sample() (sympy.stats.discretemarkovchain method)": [[231, "sympy.stats.DiscreteMarkovChain.sample"]], "sample_iter() (in module sympy.stats)": [[231, "sympy.stats.sample_iter"]], "sampling_e() (in module sympy.stats.rv)": [[231, "sympy.stats.rv.sampling_E"]], "sampling_p() (in module sympy.stats.rv)": [[231, "sympy.stats.rv.sampling_P"]], "sampling_density() (in module sympy.stats.rv)": [[231, "sympy.stats.rv.sampling_density"]], "skewness() (in module sympy.stats)": [[231, "sympy.stats.skewness"]], "stationary_distribution() (sympy.stats.discretemarkovchain method)": [[231, "sympy.stats.DiscreteMarkovChain.stationary_distribution"]], "std() (in module sympy.stats)": [[231, "sympy.stats.std"]], "sympy.stats": [[231, "module-sympy.stats"]], "sympy.stats.die() (in module sympy.stats.crv_types)": [[231, "sympy.stats.crv_types.sympy.stats.Die"]], "sympy.stats.normal() (in module sympy.stats.crv_types)": [[231, "sympy.stats.crv_types.sympy.stats.Normal"]], "sympy.stats.crv": [[231, "module-sympy.stats.crv"]], "sympy.stats.crv_types": [[231, "module-sympy.stats.crv_types"]], "sympy.stats.frv": [[231, "module-sympy.stats.frv"]], "sympy.stats.frv_types": [[231, "module-sympy.stats.frv_types"]], "sympy.stats.rv": [[231, "module-sympy.stats.rv"]], "transition_probabilities (sympy.stats.discretemarkovchain property)": [[231, "sympy.stats.DiscreteMarkovChain.transition_probabilities"]], "variance() (in module sympy.stats)": [[231, "sympy.stats.variance"]], "where() (in module sympy.stats)": [[231, "sympy.stats.where"]], "immutabledensendimarray (class in sympy.tensor.array)": [[232, "sympy.tensor.array.ImmutableDenseNDimArray"]], "immutablesparsendimarray (class in sympy.tensor.array)": [[232, "sympy.tensor.array.ImmutableSparseNDimArray"]], "mutabledensendimarray (class in sympy.tensor.array)": [[232, "sympy.tensor.array.MutableDenseNDimArray"]], "mutablesparsendimarray (class in sympy.tensor.array)": [[232, "sympy.tensor.array.MutableSparseNDimArray"]], "derive_by_array() (in module sympy.tensor.array)": [[232, "sympy.tensor.array.derive_by_array"]], "permutedims() (in module sympy.tensor.array)": [[232, "sympy.tensor.array.permutedims"]], "sympy.tensor.array": [[232, "module-sympy.tensor.array"]], "tensorcontraction() (in module sympy.tensor.array)": [[232, "sympy.tensor.array.tensorcontraction"]], "tensordiagonal() (in module sympy.tensor.array)": [[232, "sympy.tensor.array.tensordiagonal"]], "tensorproduct() (in module sympy.tensor.array)": [[232, "sympy.tensor.array.tensorproduct"]], "arraycontraction (class in sympy.tensor.array.expressions)": [[233, "sympy.tensor.array.expressions.ArrayContraction"]], "arraydiagonal (class in sympy.tensor.array.expressions)": [[233, "sympy.tensor.array.expressions.ArrayDiagonal"]], "arraytensorproduct (class in sympy.tensor.array.expressions)": [[233, "sympy.tensor.array.expressions.ArrayTensorProduct"]], "permutedims (class in sympy.tensor.array.expressions)": [[233, "sympy.tensor.array.expressions.PermuteDims"]], "sympy.tensor.array.expressions": [[233, "module-sympy.tensor.array.expressions"]], "sympy.tensor": [[234, "module-sympy.tensor"]], "get_contraction_structure() (in module sympy.tensor.index_methods)": [[235, "sympy.tensor.index_methods.get_contraction_structure"]], "get_indices() (in module sympy.tensor.index_methods)": [[235, "sympy.tensor.index_methods.get_indices"]], "sympy.tensor.index_methods": [[235, "module-sympy.tensor.index_methods"]], "idx (class in sympy.tensor.indexed)": [[236, "sympy.tensor.indexed.Idx"]], "indexed (class in sympy.tensor.indexed)": [[236, "sympy.tensor.indexed.Indexed"]], "indexedbase (class in sympy.tensor.indexed)": [[236, "sympy.tensor.indexed.IndexedBase"]], "base (sympy.tensor.indexed.indexed property)": [[236, "sympy.tensor.indexed.Indexed.base"]], "indices (sympy.tensor.indexed.indexed property)": [[236, "sympy.tensor.indexed.Indexed.indices"]], "label (sympy.tensor.indexed.idx property)": [[236, "sympy.tensor.indexed.Idx.label"]], "label (sympy.tensor.indexed.indexedbase property)": [[236, "sympy.tensor.indexed.IndexedBase.label"]], "lower (sympy.tensor.indexed.idx property)": [[236, "sympy.tensor.indexed.Idx.lower"]], "offset (sympy.tensor.indexed.indexedbase property)": [[236, "sympy.tensor.indexed.IndexedBase.offset"]], "ranges (sympy.tensor.indexed.indexed property)": [[236, "sympy.tensor.indexed.Indexed.ranges"]], "rank (sympy.tensor.indexed.indexed property)": [[236, "sympy.tensor.indexed.Indexed.rank"]], "shape (sympy.tensor.indexed.indexed property)": [[236, "sympy.tensor.indexed.Indexed.shape"]], "shape (sympy.tensor.indexed.indexedbase property)": [[236, "sympy.tensor.indexed.IndexedBase.shape"]], "strides (sympy.tensor.indexed.indexedbase property)": [[236, "sympy.tensor.indexed.IndexedBase.strides"]], "sympy.tensor.indexed": [[236, "module-sympy.tensor.indexed"]], "upper (sympy.tensor.indexed.idx property)": [[236, "sympy.tensor.indexed.Idx.upper"]], "tensadd (class in sympy.tensor.tensor)": [[237, "sympy.tensor.tensor.TensAdd"]], "tensexpr (class in sympy.tensor.tensor)": [[237, "sympy.tensor.tensor.TensExpr"]], "tensmul (class in sympy.tensor.tensor)": [[237, "sympy.tensor.tensor.TensMul"]], "tensorhead (class in sympy.tensor.tensor)": [[237, "sympy.tensor.tensor.TensorHead"]], "tensorindex (class in sympy.tensor.tensor)": [[237, "sympy.tensor.tensor.TensorIndex"]], "tensorindextype (class in sympy.tensor.tensor)": [[237, "sympy.tensor.tensor.TensorIndexType"]], "tensorsymmetry (class in sympy.tensor.tensor)": [[237, "sympy.tensor.tensor.TensorSymmetry"]], "tensortype (class in sympy.tensor.tensor)": [[237, "sympy.tensor.tensor.TensorType"]], "_tensormanager (class in sympy.tensor.tensor)": [[237, "sympy.tensor.tensor._TensorManager"]], "canon_bp() (in module sympy.tensor.tensor)": [[237, "sympy.tensor.tensor.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensadd method)": [[237, "sympy.tensor.tensor.TensAdd.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensmul method)": [[237, "sympy.tensor.tensor.TensMul.canon_bp"]], "clear() (sympy.tensor.tensor._tensormanager method)": [[237, "sympy.tensor.tensor._TensorManager.clear"]], "comm_i2symbol() (sympy.tensor.tensor._tensormanager method)": [[237, "sympy.tensor.tensor._TensorManager.comm_i2symbol"]], "comm_symbols2i() (sympy.tensor.tensor._tensormanager method)": [[237, "sympy.tensor.tensor._TensorManager.comm_symbols2i"]], "commutes_with() (sympy.tensor.tensor.tensorhead method)": [[237, "sympy.tensor.tensor.TensorHead.commutes_with"]], "contract_metric() (sympy.tensor.tensor.tensadd method)": [[237, "sympy.tensor.tensor.TensAdd.contract_metric"]], "contract_metric() (sympy.tensor.tensor.tensmul method)": [[237, "sympy.tensor.tensor.TensMul.contract_metric"]], "direct_product() (sympy.tensor.tensor.tensorsymmetry class method)": [[237, "sympy.tensor.tensor.TensorSymmetry.direct_product"]], "fully_symmetric() (sympy.tensor.tensor.tensorsymmetry class method)": [[237, "sympy.tensor.tensor.TensorSymmetry.fully_symmetric"]], "get_comm() (sympy.tensor.tensor._tensormanager method)": [[237, "sympy.tensor.tensor._TensorManager.get_comm"]], "get_free_indices() (sympy.tensor.tensor.tensmul method)": [[237, "sympy.tensor.tensor.TensMul.get_free_indices"]], "get_indices() (sympy.tensor.tensor.tensmul method)": [[237, "sympy.tensor.tensor.TensMul.get_indices"]], "get_matrix() (sympy.tensor.tensor.tensexpr method)": [[237, "sympy.tensor.tensor.TensExpr.get_matrix"]], "no_symmetry() (sympy.tensor.tensor.tensorsymmetry class method)": [[237, "sympy.tensor.tensor.TensorSymmetry.no_symmetry"]], "perm2tensor() (sympy.tensor.tensor.tensmul method)": [[237, "sympy.tensor.tensor.TensMul.perm2tensor"]], "replace_with_arrays() (sympy.tensor.tensor.tensexpr method)": [[237, "sympy.tensor.tensor.TensExpr.replace_with_arrays"]], "riemann() (sympy.tensor.tensor.tensorsymmetry class method)": [[237, "sympy.tensor.tensor.TensorSymmetry.riemann"]], "riemann_cyclic() (in module sympy.tensor.tensor)": [[237, "sympy.tensor.tensor.riemann_cyclic"]], "riemann_cyclic_replace() (in module sympy.tensor.tensor)": [[237, "sympy.tensor.tensor.riemann_cyclic_replace"]], "set_comm() (sympy.tensor.tensor._tensormanager method)": [[237, "sympy.tensor.tensor._TensorManager.set_comm"]], "set_comms() (sympy.tensor.tensor._tensormanager method)": [[237, "sympy.tensor.tensor._TensorManager.set_comms"]], "sorted_components() (sympy.tensor.tensor.tensmul method)": [[237, "sympy.tensor.tensor.TensMul.sorted_components"]], "split() (sympy.tensor.tensor.tensmul method)": [[237, "sympy.tensor.tensor.TensMul.split"]], "sympy.tensor.tensor": [[237, "module-sympy.tensor.tensor"]], "tensor_heads() (in module sympy.tensor.tensor)": [[237, "sympy.tensor.tensor.tensor_heads"]], "tensorsymmetry() (in module sympy.tensor.tensor)": [[237, "sympy.tensor.tensor.tensorsymmetry"]], "partialderivative (class in sympy.tensor.toperators)": [[238, "sympy.tensor.toperators.PartialDerivative"]], "sympy.tensor.toperators": [[238, "module-sympy.tensor.toperators"]], "sympy.testing": [[239, "module-sympy.testing"]], "skip() (in module sympy.testing.pytest)": [[240, "sympy.testing.pytest.SKIP"]], "nocache_fail() (in module sympy.testing.pytest)": [[240, "sympy.testing.pytest.nocache_fail"]], "raises() (in module sympy.testing.pytest)": [[240, "sympy.testing.pytest.raises"]], "sympy.testing.pytest": [[240, "module-sympy.testing.pytest"]], "warns() (in module sympy.testing.pytest)": [[240, "sympy.testing.pytest.warns"]], "warns_deprecated_sympy() (in module sympy.testing.pytest)": [[240, "sympy.testing.pytest.warns_deprecated_sympy"]], "sympy.testing.randtest": [[241, "module-sympy.testing.randtest"]], "pytestreporter (class in sympy.testing.runtests)": [[242, "sympy.testing.runtests.PyTestReporter"]], "reporter (class in sympy.testing.runtests)": [[242, "sympy.testing.runtests.Reporter"]], "sympydoctestfinder (class in sympy.testing.runtests)": [[242, "sympy.testing.runtests.SymPyDocTestFinder"]], "sympydoctestrunner (class in sympy.testing.runtests)": [[242, "sympy.testing.runtests.SymPyDocTestRunner"]], "sympyoutputchecker (class in sympy.testing.runtests)": [[242, "sympy.testing.runtests.SymPyOutputChecker"]], "sympytestresults (class in sympy.testing.runtests)": [[242, "sympy.testing.runtests.SymPyTestResults"]], "attempted (sympy.testing.runtests.sympytestresults attribute)": [[242, "sympy.testing.runtests.SymPyTestResults.attempted"]], "check_output() (sympy.testing.runtests.sympyoutputchecker method)": [[242, "sympy.testing.runtests.SymPyOutputChecker.check_output"]], "convert_to_native_paths() (in module sympy.testing.runtests)": [[242, "sympy.testing.runtests.convert_to_native_paths"]], "doctest() (in module sympy.testing.runtests)": [[242, "sympy.testing.runtests.doctest"]], "failed (sympy.testing.runtests.sympytestresults attribute)": [[242, "sympy.testing.runtests.SymPyTestResults.failed"]], "get_sympy_dir() (in module sympy.testing.runtests)": [[242, "sympy.testing.runtests.get_sympy_dir"]], "raise_on_deprecated() (in module sympy.testing.runtests)": [[242, "sympy.testing.runtests.raise_on_deprecated"]], "run() (sympy.testing.runtests.sympydoctestrunner method)": [[242, "sympy.testing.runtests.SymPyDocTestRunner.run"]], "run_all_tests() (in module sympy.testing.runtests)": [[242, "sympy.testing.runtests.run_all_tests"]], "run_in_subprocess_with_hash_randomization() (in module sympy.testing.runtests)": [[242, "sympy.testing.runtests.run_in_subprocess_with_hash_randomization"]], "split_list() (in module sympy.testing.runtests)": [[242, "sympy.testing.runtests.split_list"]], "sympy.testing.runtests": [[242, "module-sympy.testing.runtests"]], "sympytestfile() (in module sympy.testing.runtests)": [[242, "sympy.testing.runtests.sympytestfile"]], "test() (in module sympy.testing.runtests)": [[242, "sympy.testing.runtests.test"]], "write() (sympy.testing.runtests.pytestreporter method)": [[242, "sympy.testing.runtests.PyTestReporter.write"]], "codewrapper (class in sympy.utilities.autowrap)": [[243, "sympy.utilities.autowrap.CodeWrapper"]], "cythoncodewrapper (class in sympy.utilities.autowrap)": [[243, "sympy.utilities.autowrap.CythonCodeWrapper"]], "dummywrapper (class in sympy.utilities.autowrap)": [[243, "sympy.utilities.autowrap.DummyWrapper"]], "f2pycodewrapper (class in sympy.utilities.autowrap)": [[243, "sympy.utilities.autowrap.F2PyCodeWrapper"]], "ufuncifycodewrapper (class in sympy.utilities.autowrap)": [[243, "sympy.utilities.autowrap.UfuncifyCodeWrapper"]], "autowrap() (in module sympy.utilities.autowrap)": [[243, "sympy.utilities.autowrap.autowrap"]], "binary_function() (in module sympy.utilities.autowrap)": [[243, "sympy.utilities.autowrap.binary_function"]], "dump_c() (sympy.utilities.autowrap.ufuncifycodewrapper method)": [[243, "sympy.utilities.autowrap.UfuncifyCodeWrapper.dump_c"]], "dump_pyx() (sympy.utilities.autowrap.cythoncodewrapper method)": [[243, "sympy.utilities.autowrap.CythonCodeWrapper.dump_pyx"]], "sympy.utilities.autowrap": [[243, "module-sympy.utilities.autowrap"]], "ufuncify() (in module sympy.utilities.autowrap)": [[243, "sympy.utilities.autowrap.ufuncify"]], "argument (class in sympy.utilities.codegen)": [[244, "sympy.utilities.codegen.Argument"]], "ccodegen (class in sympy.utilities.codegen)": [[244, "sympy.utilities.codegen.CCodeGen"]], "codegen (class in sympy.utilities.codegen)": [[244, "sympy.utilities.codegen.CodeGen"]], "datatype (class in sympy.utilities.codegen)": [[244, "sympy.utilities.codegen.DataType"]], "fcodegen (class in sympy.utilities.codegen)": [[244, "sympy.utilities.codegen.FCodeGen"]], "juliacodegen (class in sympy.utilities.codegen)": [[244, "sympy.utilities.codegen.JuliaCodeGen"]], "octavecodegen (class in sympy.utilities.codegen)": [[244, "sympy.utilities.codegen.OctaveCodeGen"]], "outputargument (class in sympy.utilities.codegen)": [[244, "sympy.utilities.codegen.OutputArgument"]], "result (class in sympy.utilities.codegen)": [[244, "sympy.utilities.codegen.Result"]], "routine (class in sympy.utilities.codegen)": [[244, "sympy.utilities.codegen.Routine"]], "rustcodegen (class in sympy.utilities.codegen)": [[244, "sympy.utilities.codegen.RustCodeGen"]], "codegen() (in module sympy.utilities.codegen)": [[244, "sympy.utilities.codegen.codegen"]], "dump_c() (sympy.utilities.codegen.ccodegen method)": [[244, "sympy.utilities.codegen.CCodeGen.dump_c"]], "dump_code() (sympy.utilities.codegen.codegen method)": [[244, "sympy.utilities.codegen.CodeGen.dump_code"]], "dump_f95() (sympy.utilities.codegen.fcodegen method)": [[244, "sympy.utilities.codegen.FCodeGen.dump_f95"]], "dump_h() (sympy.utilities.codegen.ccodegen method)": [[244, "sympy.utilities.codegen.CCodeGen.dump_h"]], "dump_h() (sympy.utilities.codegen.fcodegen method)": [[244, "sympy.utilities.codegen.FCodeGen.dump_h"]], "dump_jl() (sympy.utilities.codegen.juliacodegen method)": [[244, "sympy.utilities.codegen.JuliaCodeGen.dump_jl"]], "dump_m() (sympy.utilities.codegen.octavecodegen method)": [[244, "sympy.utilities.codegen.OctaveCodeGen.dump_m"]], "dump_rs() (sympy.utilities.codegen.rustcodegen method)": [[244, "sympy.utilities.codegen.RustCodeGen.dump_rs"]], "get_default_datatype() (in module sympy.utilities.codegen)": [[244, "sympy.utilities.codegen.get_default_datatype"]], "get_interface() (sympy.utilities.codegen.fcodegen method)": [[244, "sympy.utilities.codegen.FCodeGen.get_interface"]], "get_prototype() (sympy.utilities.codegen.ccodegen method)": [[244, "sympy.utilities.codegen.CCodeGen.get_prototype"]], "get_prototype() (sympy.utilities.codegen.rustcodegen method)": [[244, "sympy.utilities.codegen.RustCodeGen.get_prototype"]], "make_routine() (in module sympy.utilities.codegen)": [[244, "sympy.utilities.codegen.make_routine"]], "result_variables (sympy.utilities.codegen.routine property)": [[244, "sympy.utilities.codegen.Routine.result_variables"]], "routine() (sympy.utilities.codegen.codegen method)": [[244, "sympy.utilities.codegen.CodeGen.routine"]], "routine() (sympy.utilities.codegen.juliacodegen method)": [[244, "sympy.utilities.codegen.JuliaCodeGen.routine"]], "routine() (sympy.utilities.codegen.octavecodegen method)": [[244, "sympy.utilities.codegen.OctaveCodeGen.routine"]], "routine() (sympy.utilities.codegen.rustcodegen method)": [[244, "sympy.utilities.codegen.RustCodeGen.routine"]], "sympy.utilities.codegen": [[244, "module-sympy.utilities.codegen"]], "variables (sympy.utilities.codegen.routine property)": [[244, "sympy.utilities.codegen.Routine.variables"]], "write() (sympy.utilities.codegen.codegen method)": [[244, "sympy.utilities.codegen.CodeGen.write"]], "conserve_mpmath_dps() (in module sympy.utilities.decorator)": [[245, "sympy.utilities.decorator.conserve_mpmath_dps"]], "deprecated() (in module sympy.utilities.decorator)": [[245, "sympy.utilities.decorator.deprecated"]], "doctest_depends_on() (in module sympy.utilities.decorator)": [[245, "sympy.utilities.decorator.doctest_depends_on"]], "memoize_property() (in module sympy.utilities.decorator)": [[245, "sympy.utilities.decorator.memoize_property"]], "no_attrs_in_subclass (class in sympy.utilities.decorator)": [[245, "sympy.utilities.decorator.no_attrs_in_subclass"]], "public() (in module sympy.utilities.decorator)": [[245, "sympy.utilities.decorator.public"]], "sympy.utilities.decorator": [[245, "module-sympy.utilities.decorator"]], "threaded() (in module sympy.utilities.decorator)": [[245, "sympy.utilities.decorator.threaded"]], "threaded_factory() (in module sympy.utilities.decorator)": [[245, "sympy.utilities.decorator.threaded_factory"]], "xthreaded() (in module sympy.utilities.decorator)": [[245, "sympy.utilities.decorator.xthreaded"]], "multisetpartitiontraverser (class in sympy.utilities.enumerative)": [[246, "sympy.utilities.enumerative.MultisetPartitionTraverser"]], "count_partitions() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[246, "sympy.utilities.enumerative.MultisetPartitionTraverser.count_partitions"]], "enum_all() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[246, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all"]], "enum_large() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[246, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large"]], "enum_range() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[246, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range"]], "enum_small() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[246, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small"]], "factoring_visitor() (in module sympy.utilities.enumerative)": [[246, "sympy.utilities.enumerative.factoring_visitor"]], "list_visitor() (in module sympy.utilities.enumerative)": [[246, "sympy.utilities.enumerative.list_visitor"]], "multiset_partitions_taocp() (in module sympy.utilities.enumerative)": [[246, "sympy.utilities.enumerative.multiset_partitions_taocp"]], "sympy.utilities.enumerative": [[246, "module-sympy.utilities.enumerative"]], "sympydeprecationwarning": [[247, "sympy.utilities.exceptions.SymPyDeprecationWarning"]], "ignore_warnings() (in module sympy.utilities.exceptions)": [[247, "sympy.utilities.exceptions.ignore_warnings"]], "sympy.utilities.exceptions": [[247, "module-sympy.utilities.exceptions"]], "sympy_deprecation_warning() (in module sympy.utilities.exceptions)": [[247, "sympy.utilities.exceptions.sympy_deprecation_warning"]], "sympy.utilities": [[248, "module-sympy.utilities"]], "notiterable (class in sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.NotIterable"]], "binary_partitions() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.binary_partitions"]], "bracelets() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.bracelets"]], "capture() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.capture"]], "common_prefix() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.common_prefix"]], "common_suffix() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.common_suffix"]], "connected_components() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.connected_components"]], "dict_merge() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.dict_merge"]], "filter_symbols() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.filter_symbols"]], "flatten() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.flatten"]], "generate_bell() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.generate_bell"]], "generate_derangements() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.generate_derangements"]], "generate_involutions() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.generate_involutions"]], "generate_oriented_forest() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.generate_oriented_forest"]], "group() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.group"]], "has_dups() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.has_dups"]], "has_variety() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.has_variety"]], "ibin() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.ibin"]], "iproduct() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.iproduct"]], "is_palindromic() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.is_palindromic"]], "is_sequence() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.is_sequence"]], "iterable() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.iterable"]], "kbins() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.kbins"]], "least_rotation() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.least_rotation"]], "minlex() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.minlex"]], "multiset() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.multiset"]], "multiset_combinations() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.multiset_combinations"]], "multiset_derangements() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.multiset_derangements"]], "multiset_partitions() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.multiset_partitions"]], "multiset_permutations() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.multiset_permutations"]], "necklaces() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.necklaces"]], "numbered_symbols() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.numbered_symbols"]], "ordered_partitions() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.ordered_partitions"]], "partitions() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.partitions"]], "permute_signs() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.permute_signs"]], "postfixes() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.postfixes"]], "prefixes() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.prefixes"]], "random_derangement() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.random_derangement"]], "reshape() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.reshape"]], "rotate_left() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.rotate_left"]], "rotate_right() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.rotate_right"]], "rotations() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.rotations"]], "roundrobin() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.roundrobin"]], "runs() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.runs"]], "sequence_partitions() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.sequence_partitions"]], "sequence_partitions_empty() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.sequence_partitions_empty"]], "sift() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.sift"]], "signed_permutations() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.signed_permutations"]], "strongly_connected_components() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.strongly_connected_components"]], "subsets() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.subsets"]], "sympy.utilities.iterables": [[249, "module-sympy.utilities.iterables"]], "take() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.take"]], "topological_sort() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.topological_sort"]], "unflatten() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.unflatten"]], "uniq() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.uniq"]], "variations() (in module sympy.utilities.iterables)": [[249, "sympy.utilities.iterables.variations"]], "implemented_function() (in module sympy.utilities.lambdify)": [[250, "sympy.utilities.lambdify.implemented_function"]], "lambdastr() (in module sympy.utilities.lambdify)": [[250, "sympy.utilities.lambdify.lambdastr"]], "lambdify() (in module sympy.utilities.lambdify)": [[250, "sympy.utilities.lambdify.lambdify"]], "sympy.utilities.lambdify": [[250, "module-sympy.utilities.lambdify"]], "assoc_recurrence_memo() (in module sympy.utilities.memoization)": [[251, "sympy.utilities.memoization.assoc_recurrence_memo"]], "recurrence_memo() (in module sympy.utilities.memoization)": [[251, "sympy.utilities.memoization.recurrence_memo"]], "sympy.utilities.memoization": [[251, "module-sympy.utilities.memoization"]], "as_int() (in module sympy.utilities.misc)": [[252, "sympy.utilities.misc.as_int"]], "debug() (in module sympy.utilities.misc)": [[252, "sympy.utilities.misc.debug"]], "debug_decorator() (in module sympy.utilities.misc)": [[252, "sympy.utilities.misc.debug_decorator"]], "debugf() (in module sympy.utilities.misc)": [[252, "sympy.utilities.misc.debugf"]], "filldedent() (in module sympy.utilities.misc)": [[252, "sympy.utilities.misc.filldedent"]], "find_executable() (in module sympy.utilities.misc)": [[252, "sympy.utilities.misc.find_executable"]], "func_name() (in module sympy.utilities.misc)": [[252, "sympy.utilities.misc.func_name"]], "ordinal() (in module sympy.utilities.misc)": [[252, "sympy.utilities.misc.ordinal"]], "rawlines() (in module sympy.utilities.misc)": [[252, "sympy.utilities.misc.rawlines"]], "replace() (in module sympy.utilities.misc)": [[252, "sympy.utilities.misc.replace"]], "strlines() (in module sympy.utilities.misc)": [[252, "sympy.utilities.misc.strlines"]], "sympy.utilities.misc": [[252, "module-sympy.utilities.misc"]], "translate() (in module sympy.utilities.misc)": [[252, "sympy.utilities.misc.translate"]], "get_resource() (in module sympy.utilities.pkgdata)": [[253, "sympy.utilities.pkgdata.get_resource"]], "sympy.utilities.pkgdata": [[253, "module-sympy.utilities.pkgdata"]], "get_class() (in module sympy.utilities.source)": [[254, "sympy.utilities.source.get_class"]], "get_mod_func() (in module sympy.utilities.source)": [[254, "sympy.utilities.source.get_mod_func"]], "sympy.utilities.source": [[254, "module-sympy.utilities.source"]], "sympy.utilities.timeutils": [[255, "module-sympy.utilities.timeutils"]], "timed() (in module sympy.utilities.timeutils)": [[255, "sympy.utilities.timeutils.timed"]], "coordsys3d (class in sympy.vector.coordsysrect)": [[256, "sympy.vector.coordsysrect.CoordSys3D"]], "del (class in sympy.vector.deloperator)": [[256, "sympy.vector.deloperator.Del"]], "dyadic (class in sympy.vector.dyadic)": [[256, "sympy.vector.dyadic.Dyadic"]], "implicitregion (class in sympy.vector.implicitregion)": [[256, "sympy.vector.implicitregion.ImplicitRegion"]], "parametricintegral (class in sympy.vector.integrals)": [[256, "sympy.vector.integrals.ParametricIntegral"]], "parametricregion (class in sympy.vector.parametricregion)": [[256, "sympy.vector.parametricregion.ParametricRegion"]], "vector (class in sympy.vector.vector)": [[256, "sympy.vector.vector.Vector"]], "__init__() (sympy.vector.coordsysrect.coordsys3d method)": [[256, "sympy.vector.coordsysrect.CoordSys3D.__init__"]], "components (sympy.vector.dyadic.dyadic property)": [[256, "sympy.vector.dyadic.Dyadic.components"]], "components (sympy.vector.vector.vector property)": [[256, "sympy.vector.vector.Vector.components"]], "create_new() (sympy.vector.coordsysrect.coordsys3d method)": [[256, "sympy.vector.coordsysrect.CoordSys3D.create_new"]], "cross() (sympy.vector.deloperator.del method)": [[256, "sympy.vector.deloperator.Del.cross"]], "cross() (sympy.vector.dyadic.dyadic method)": [[256, "sympy.vector.dyadic.Dyadic.cross"]], "cross() (sympy.vector.vector.vector method)": [[256, "sympy.vector.vector.Vector.cross"]], "dot() (sympy.vector.deloperator.del method)": [[256, "sympy.vector.deloperator.Del.dot"]], "dot() (sympy.vector.dyadic.dyadic method)": [[256, "sympy.vector.dyadic.Dyadic.dot"]], "dot() (sympy.vector.vector.vector method)": [[256, "sympy.vector.vector.Vector.dot"]], "gradient() (sympy.vector.deloperator.del method)": [[256, "sympy.vector.deloperator.Del.gradient"]], "locate_new() (sympy.vector.coordsysrect.coordsys3d method)": [[256, "sympy.vector.coordsysrect.CoordSys3D.locate_new"]], "magnitude() (sympy.vector.vector.vector method)": [[256, "sympy.vector.vector.Vector.magnitude"]], "multiplicity() (sympy.vector.implicitregion.implicitregion method)": [[256, "sympy.vector.implicitregion.ImplicitRegion.multiplicity"]], "normalize() (sympy.vector.vector.vector method)": [[256, "sympy.vector.vector.Vector.normalize"]], "orient_new() (sympy.vector.coordsysrect.coordsys3d method)": [[256, "sympy.vector.coordsysrect.CoordSys3D.orient_new"]], "orient_new_axis() (sympy.vector.coordsysrect.coordsys3d method)": [[256, "sympy.vector.coordsysrect.CoordSys3D.orient_new_axis"]], "orient_new_body() (sympy.vector.coordsysrect.coordsys3d method)": [[256, "sympy.vector.coordsysrect.CoordSys3D.orient_new_body"]], "orient_new_quaternion() (sympy.vector.coordsysrect.coordsys3d method)": [[256, "sympy.vector.coordsysrect.CoordSys3D.orient_new_quaternion"]], "orient_new_space() (sympy.vector.coordsysrect.coordsys3d method)": [[256, "sympy.vector.coordsysrect.CoordSys3D.orient_new_space"]], "outer() (sympy.vector.vector.vector method)": [[256, "sympy.vector.vector.Vector.outer"]], "position_wrt() (sympy.vector.coordsysrect.coordsys3d method)": [[256, "sympy.vector.coordsysrect.CoordSys3D.position_wrt"]], "projection() (sympy.vector.vector.vector method)": [[256, "sympy.vector.vector.Vector.projection"]], "rational_parametrization() (sympy.vector.implicitregion.implicitregion method)": [[256, "sympy.vector.implicitregion.ImplicitRegion.rational_parametrization"]], "regular_point() (sympy.vector.implicitregion.implicitregion method)": [[256, "sympy.vector.implicitregion.ImplicitRegion.regular_point"]], "rotation_matrix() (sympy.vector.coordsysrect.coordsys3d method)": [[256, "sympy.vector.coordsysrect.CoordSys3D.rotation_matrix"]], "scalar_map() (sympy.vector.coordsysrect.coordsys3d method)": [[256, "sympy.vector.coordsysrect.CoordSys3D.scalar_map"]], "separate() (sympy.vector.vector.vector method)": [[256, "sympy.vector.vector.Vector.separate"]], "singular_points() (sympy.vector.implicitregion.implicitregion method)": [[256, "sympy.vector.implicitregion.ImplicitRegion.singular_points"]], "to_matrix() (sympy.vector.dyadic.dyadic method)": [[256, "sympy.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.vector.vector.vector method)": [[256, "sympy.vector.vector.Vector.to_matrix"]], "axisorienter (class in sympy.vector.orienters)": [[258, "sympy.vector.orienters.AxisOrienter"]], "bodyorienter (class in sympy.vector.orienters)": [[258, "sympy.vector.orienters.BodyOrienter"]], "orienter (class in sympy.vector.orienters)": [[258, "sympy.vector.orienters.Orienter"]], "quaternionorienter (class in sympy.vector.orienters)": [[258, "sympy.vector.orienters.QuaternionOrienter"]], "spaceorienter (class in sympy.vector.orienters)": [[258, "sympy.vector.orienters.SpaceOrienter"]], "__init__() (sympy.vector.orienters.axisorienter method)": [[258, "sympy.vector.orienters.AxisOrienter.__init__"]], "__init__() (sympy.vector.orienters.bodyorienter method)": [[258, "sympy.vector.orienters.BodyOrienter.__init__"]], "__init__() (sympy.vector.orienters.quaternionorienter method)": [[258, "sympy.vector.orienters.QuaternionOrienter.__init__"]], "__init__() (sympy.vector.orienters.spaceorienter method)": [[258, "sympy.vector.orienters.SpaceOrienter.__init__"]], "rotation_matrix() (sympy.vector.orienters.axisorienter method)": [[258, "sympy.vector.orienters.AxisOrienter.rotation_matrix"]], "rotation_matrix() (sympy.vector.orienters.orienter method)": [[258, "sympy.vector.orienters.Orienter.rotation_matrix"]], "curl() (in module sympy.vector)": [[259, "sympy.vector.curl"]], "divergence() (in module sympy.vector)": [[259, "sympy.vector.divergence"]], "express() (in module sympy.vector)": [[259, "sympy.vector.express"]], "gradient() (in module sympy.vector)": [[259, "sympy.vector.gradient"]], "is_conservative() (in module sympy.vector)": [[259, "sympy.vector.is_conservative"]], "is_solenoidal() (in module sympy.vector)": [[259, "sympy.vector.is_solenoidal"]], "matrix_to_vector() (in module sympy.vector)": [[259, "sympy.vector.matrix_to_vector"]], "scalar_potential() (in module sympy.vector)": [[259, "sympy.vector.scalar_potential"]], "scalar_potential_difference() (in module sympy.vector)": [[259, "sympy.vector.scalar_potential_difference"]], "vector_integrate() (in module sympy.vector.integrals)": [[259, "sympy.vector.integrals.vector_integrate"]], "sympy.vector": [[264, "module-sympy.vector"]], "sympy.physics": [[273, "module-sympy.physics"]]}})
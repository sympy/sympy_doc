Search.setIndex({"docnames": ["citing", "contributing/debug", "contributing/dependencies", "contributing/deprecations", "contributing/docstring", "contributing/documentation-style-guide", "contributing/index", "contributing/introduction-to-contributing", "contributing/new-contributors-guide/build-docs", "contributing/new-contributors-guide/dev-setup", "contributing/new-contributors-guide/index", "contributing/new-contributors-guide/workflow-process", "contributing/new-contributors-guide/writing-tests", "explanation/active-deprecations", "explanation/glossary", "explanation/gotchas", "explanation/index", "explanation/solve_output", "explanation/special_topics/classification", "explanation/special_topics/finite_diff_derivatives", "explanation/special_topics/index", "guides/assumptions", "guides/booleans", "guides/custom-functions", "guides/index", "guides/physics/control_problems", "guides/physics/index", "guides/solving/find-roots-polynomial", "guides/solving/index", "guides/solving/reduce-inequalities-algebraically", "guides/solving/solve-diophantine-equation", "guides/solving/solve-equation-algebraically", "guides/solving/solve-matrix-equation", "guides/solving/solve-numerically", "guides/solving/solve-ode", "guides/solving/solve-system-of-equations-algebraically", "guides/solving/solving-guidance", "index", "install", "modules/abc", "modules/algebras", "modules/assumptions/ask", "modules/assumptions/assume", "modules/assumptions/index", "modules/assumptions/predicates", "modules/assumptions/refine", "modules/calculus/index", "modules/categories", "modules/codegen", "modules/combinatorics/fp_groups", "modules/combinatorics/galois", "modules/combinatorics/graycode", "modules/combinatorics/group_constructs", "modules/combinatorics/group_numbers", "modules/combinatorics/index", "modules/combinatorics/named_groups", "modules/combinatorics/partitions", "modules/combinatorics/pc_groups", "modules/combinatorics/perm_groups", "modules/combinatorics/permutations", "modules/combinatorics/polyhedron", "modules/combinatorics/prufer", "modules/combinatorics/subsets", "modules/combinatorics/tensor_can", "modules/combinatorics/testutil", "modules/combinatorics/util", "modules/concrete", "modules/core", "modules/crypto", "modules/diffgeom", "modules/discrete", "modules/evalf", "modules/functions/combinatorial", "modules/functions/elementary", "modules/functions/index", "modules/functions/special", "modules/geometry/curves", "modules/geometry/ellipses", "modules/geometry/entities", "modules/geometry/index", "modules/geometry/lines", "modules/geometry/plane", "modules/geometry/points", "modules/geometry/polygons", "modules/geometry/utils", "modules/holonomic/about", "modules/holonomic/convert", "modules/holonomic/index", "modules/holonomic/internal", "modules/holonomic/operations", "modules/holonomic/represent", "modules/holonomic/uses", "modules/integrals/g-functions", "modules/integrals/index", "modules/integrals/integrals", "modules/interactive", "modules/liealgebras/index", "modules/logic", "modules/matrices/common", "modules/matrices/dense", "modules/matrices/expressions", "modules/matrices/immutablematrices", "modules/matrices/index", "modules/matrices/matrices", "modules/matrices/normalforms", "modules/matrices/sparse", "modules/matrices/sparsetools", "modules/ntheory", "modules/numeric-computation", "modules/parsing", "modules/physics/continuum_mechanics/beam", "modules/physics/continuum_mechanics/beam_problems", "modules/physics/continuum_mechanics/cable", "modules/physics/continuum_mechanics/index", "modules/physics/continuum_mechanics/truss", "modules/physics/control/control", "modules/physics/control/control_plots", "modules/physics/control/index", "modules/physics/control/lti", "modules/physics/hep/index", "modules/physics/hydrogen", "modules/physics/matrices", "modules/physics/mechanics/advanced", "modules/physics/mechanics/api/body", "modules/physics/mechanics/api/expr_manip", "modules/physics/mechanics/api/index", "modules/physics/mechanics/api/joint", "modules/physics/mechanics/api/kane_lagrange", "modules/physics/mechanics/api/linearize", "modules/physics/mechanics/api/part_bod", "modules/physics/mechanics/api/printing", "modules/physics/mechanics/api/system", "modules/physics/mechanics/autolev_parser", "modules/physics/mechanics/examples", "modules/physics/mechanics/examples/bicycle_example", "modules/physics/mechanics/examples/four_bar_linkage_example", "modules/physics/mechanics/examples/lin_pend_nonmin_example", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system", "modules/physics/mechanics/examples/rollingdisc_example", "modules/physics/mechanics/examples/rollingdisc_example_kane", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints", "modules/physics/mechanics/examples/rollingdisc_example_lagrange", "modules/physics/mechanics/index", "modules/physics/mechanics/joints", "modules/physics/mechanics/kane", "modules/physics/mechanics/lagrange", "modules/physics/mechanics/linearize", "modules/physics/mechanics/masses", "modules/physics/mechanics/reference", "modules/physics/mechanics/sympy_mechanics_for_autolev_users", "modules/physics/mechanics/symsystem", "modules/physics/optics/gaussopt", "modules/physics/optics/index", "modules/physics/optics/medium", "modules/physics/optics/polarization", "modules/physics/optics/utils", "modules/physics/optics/waves", "modules/physics/paulialgebra", "modules/physics/qho_1d", "modules/physics/quantum/anticommutator", "modules/physics/quantum/cartesian", "modules/physics/quantum/cg", "modules/physics/quantum/circuitplot", "modules/physics/quantum/commutator", "modules/physics/quantum/constants", "modules/physics/quantum/dagger", "modules/physics/quantum/gate", "modules/physics/quantum/grover", "modules/physics/quantum/hilbert", "modules/physics/quantum/index", "modules/physics/quantum/innerproduct", "modules/physics/quantum/operator", "modules/physics/quantum/operatorset", "modules/physics/quantum/piab", "modules/physics/quantum/qapply", "modules/physics/quantum/qft", "modules/physics/quantum/qubit", "modules/physics/quantum/represent", "modules/physics/quantum/shor", "modules/physics/quantum/spin", "modules/physics/quantum/state", "modules/physics/quantum/tensorproduct", "modules/physics/secondquant", "modules/physics/sho", "modules/physics/units/dimensions", "modules/physics/units/examples", "modules/physics/units/index", "modules/physics/units/philosophy", "modules/physics/units/prefixes", "modules/physics/units/quantities", "modules/physics/units/unitsystem", "modules/physics/vector/advanced", "modules/physics/vector/api/classes", "modules/physics/vector/api/fieldfunctions", "modules/physics/vector/api/functions", "modules/physics/vector/api/index", "modules/physics/vector/api/kinematics", "modules/physics/vector/api/printing", "modules/physics/vector/fields", "modules/physics/vector/index", "modules/physics/vector/kinematics", "modules/physics/vector/vectors", "modules/physics/wigner", "modules/plotting", "modules/polys/agca", "modules/polys/basics", "modules/polys/domainmatrix", "modules/polys/domainsintro", "modules/polys/domainsref", "modules/polys/index", "modules/polys/internals", "modules/polys/literature", "modules/polys/numberfields", "modules/polys/reference", "modules/polys/ringseries", "modules/polys/solvers", "modules/polys/wester", "modules/printing", "modules/rewriting", "modules/series/formal", "modules/series/fourier", "modules/series/index", "modules/series/limitseq", "modules/series/sequences", "modules/series/series", "modules/sets", "modules/simplify/fu", "modules/simplify/hyperexpand", "modules/simplify/index", "modules/simplify/simplify", "modules/solvers/diophantine", "modules/solvers/index", "modules/solvers/inequalities", "modules/solvers/ode", "modules/solvers/pde", "modules/solvers/solvers", "modules/solvers/solveset", "modules/stats", "modules/tensor/array", "modules/tensor/array_expressions", "modules/tensor/index", "modules/tensor/index_methods", "modules/tensor/indexed", "modules/tensor/tensor", "modules/tensor/toperators", "modules/testing/index", "modules/testing/pytest", "modules/testing/randtest", "modules/testing/runtests", "modules/utilities/autowrap", "modules/utilities/codegen", "modules/utilities/decorator", "modules/utilities/enumerative", "modules/utilities/exceptions", "modules/utilities/index", "modules/utilities/iterables", "modules/utilities/lambdify", "modules/utilities/memoization", "modules/utilities/misc", "modules/utilities/pkgdata", "modules/utilities/source", "modules/utilities/timeutils", "modules/vector/api/classes", "modules/vector/api/index", "modules/vector/api/orienterclasses", "modules/vector/api/vectorfunctions", "modules/vector/basics", "modules/vector/coordsys", "modules/vector/examples", "modules/vector/fields", "modules/vector/index", "modules/vector/intro", "modules/vector/vector_integration", "reference/index", "reference/public/basics/index", "reference/public/codegeneration/index", "reference/public/logic/index", "reference/public/matrices/index", "reference/public/numbertheory/index", "reference/public/physics/index", "reference/public/topics/index", "reference/public/utilities/index", "tutorials/index", "tutorials/intro-tutorial/basic_operations", "tutorials/intro-tutorial/calculus", "tutorials/intro-tutorial/features", "tutorials/intro-tutorial/gotchas", "tutorials/intro-tutorial/index", "tutorials/intro-tutorial/intro", "tutorials/intro-tutorial/manipulation", "tutorials/intro-tutorial/matrices", "tutorials/intro-tutorial/next", "tutorials/intro-tutorial/preliminaries", "tutorials/intro-tutorial/printing", "tutorials/intro-tutorial/simplification", "tutorials/intro-tutorial/solvers"], "filenames": ["citing.md", "contributing/debug.rst", "contributing/dependencies.md", "contributing/deprecations.md", "contributing/docstring.rst", "contributing/documentation-style-guide.rst", "contributing/index.md", "contributing/introduction-to-contributing.md", "contributing/new-contributors-guide/build-docs.rst", "contributing/new-contributors-guide/dev-setup.md", "contributing/new-contributors-guide/index.md", "contributing/new-contributors-guide/workflow-process.md", "contributing/new-contributors-guide/writing-tests.md", "explanation/active-deprecations.md", "explanation/glossary.md", "explanation/gotchas.rst", "explanation/index.rst", "explanation/solve_output.rst", "explanation/special_topics/classification.rst", "explanation/special_topics/finite_diff_derivatives.rst", "explanation/special_topics/index.rst", "guides/assumptions.rst", "guides/booleans.rst", "guides/custom-functions.md", "guides/index.rst", "guides/physics/control_problems.rst", "guides/physics/index.rst", "guides/solving/find-roots-polynomial.md", "guides/solving/index.md", "guides/solving/reduce-inequalities-algebraically.md", "guides/solving/solve-diophantine-equation.md", "guides/solving/solve-equation-algebraically.md", "guides/solving/solve-matrix-equation.md", "guides/solving/solve-numerically.md", "guides/solving/solve-ode.md", "guides/solving/solve-system-of-equations-algebraically.md", "guides/solving/solving-guidance.md", "index.rst", "install.md", "modules/abc.rst", "modules/algebras.rst", "modules/assumptions/ask.rst", "modules/assumptions/assume.rst", "modules/assumptions/index.rst", "modules/assumptions/predicates.rst", "modules/assumptions/refine.rst", "modules/calculus/index.rst", "modules/categories.rst", "modules/codegen.rst", "modules/combinatorics/fp_groups.rst", "modules/combinatorics/galois.rst", "modules/combinatorics/graycode.rst", "modules/combinatorics/group_constructs.rst", "modules/combinatorics/group_numbers.rst", "modules/combinatorics/index.rst", "modules/combinatorics/named_groups.rst", "modules/combinatorics/partitions.rst", "modules/combinatorics/pc_groups.rst", "modules/combinatorics/perm_groups.rst", "modules/combinatorics/permutations.rst", "modules/combinatorics/polyhedron.rst", "modules/combinatorics/prufer.rst", "modules/combinatorics/subsets.rst", "modules/combinatorics/tensor_can.rst", "modules/combinatorics/testutil.rst", "modules/combinatorics/util.rst", "modules/concrete.rst", "modules/core.rst", "modules/crypto.rst", "modules/diffgeom.rst", "modules/discrete.rst", "modules/evalf.rst", "modules/functions/combinatorial.rst", "modules/functions/elementary.rst", "modules/functions/index.rst", "modules/functions/special.rst", "modules/geometry/curves.rst", "modules/geometry/ellipses.rst", "modules/geometry/entities.rst", "modules/geometry/index.rst", "modules/geometry/lines.rst", "modules/geometry/plane.rst", "modules/geometry/points.rst", "modules/geometry/polygons.rst", "modules/geometry/utils.rst", "modules/holonomic/about.rst", "modules/holonomic/convert.rst", "modules/holonomic/index.rst", "modules/holonomic/internal.rst", "modules/holonomic/operations.rst", "modules/holonomic/represent.rst", "modules/holonomic/uses.rst", "modules/integrals/g-functions.rst", "modules/integrals/index.rst", "modules/integrals/integrals.rst", "modules/interactive.rst", "modules/liealgebras/index.rst", "modules/logic.rst", "modules/matrices/common.rst", "modules/matrices/dense.rst", "modules/matrices/expressions.rst", "modules/matrices/immutablematrices.rst", "modules/matrices/index.rst", "modules/matrices/matrices.rst", "modules/matrices/normalforms.rst", "modules/matrices/sparse.rst", "modules/matrices/sparsetools.rst", "modules/ntheory.rst", "modules/numeric-computation.rst", "modules/parsing.rst", "modules/physics/continuum_mechanics/beam.rst", "modules/physics/continuum_mechanics/beam_problems.rst", "modules/physics/continuum_mechanics/cable.rst", "modules/physics/continuum_mechanics/index.rst", "modules/physics/continuum_mechanics/truss.rst", "modules/physics/control/control.rst", "modules/physics/control/control_plots.rst", "modules/physics/control/index.rst", "modules/physics/control/lti.rst", "modules/physics/hep/index.rst", "modules/physics/hydrogen.rst", "modules/physics/matrices.rst", "modules/physics/mechanics/advanced.rst", "modules/physics/mechanics/api/body.rst", "modules/physics/mechanics/api/expr_manip.rst", "modules/physics/mechanics/api/index.rst", "modules/physics/mechanics/api/joint.rst", "modules/physics/mechanics/api/kane_lagrange.rst", "modules/physics/mechanics/api/linearize.rst", "modules/physics/mechanics/api/part_bod.rst", "modules/physics/mechanics/api/printing.rst", "modules/physics/mechanics/api/system.rst", "modules/physics/mechanics/autolev_parser.rst", "modules/physics/mechanics/examples.rst", "modules/physics/mechanics/examples/bicycle_example.rst", "modules/physics/mechanics/examples/four_bar_linkage_example.rst", "modules/physics/mechanics/examples/lin_pend_nonmin_example.rst", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system.rst", "modules/physics/mechanics/examples/rollingdisc_example.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints.rst", "modules/physics/mechanics/examples/rollingdisc_example_lagrange.rst", "modules/physics/mechanics/index.rst", "modules/physics/mechanics/joints.rst", "modules/physics/mechanics/kane.rst", "modules/physics/mechanics/lagrange.rst", "modules/physics/mechanics/linearize.rst", "modules/physics/mechanics/masses.rst", "modules/physics/mechanics/reference.rst", "modules/physics/mechanics/sympy_mechanics_for_autolev_users.rst", "modules/physics/mechanics/symsystem.rst", "modules/physics/optics/gaussopt.rst", "modules/physics/optics/index.rst", "modules/physics/optics/medium.rst", "modules/physics/optics/polarization.rst", "modules/physics/optics/utils.rst", "modules/physics/optics/waves.rst", "modules/physics/paulialgebra.rst", "modules/physics/qho_1d.rst", "modules/physics/quantum/anticommutator.rst", "modules/physics/quantum/cartesian.rst", "modules/physics/quantum/cg.rst", "modules/physics/quantum/circuitplot.rst", "modules/physics/quantum/commutator.rst", "modules/physics/quantum/constants.rst", "modules/physics/quantum/dagger.rst", "modules/physics/quantum/gate.rst", "modules/physics/quantum/grover.rst", "modules/physics/quantum/hilbert.rst", "modules/physics/quantum/index.rst", "modules/physics/quantum/innerproduct.rst", "modules/physics/quantum/operator.rst", "modules/physics/quantum/operatorset.rst", "modules/physics/quantum/piab.rst", "modules/physics/quantum/qapply.rst", "modules/physics/quantum/qft.rst", "modules/physics/quantum/qubit.rst", "modules/physics/quantum/represent.rst", "modules/physics/quantum/shor.rst", "modules/physics/quantum/spin.rst", "modules/physics/quantum/state.rst", "modules/physics/quantum/tensorproduct.rst", "modules/physics/secondquant.rst", "modules/physics/sho.rst", "modules/physics/units/dimensions.rst", "modules/physics/units/examples.rst", "modules/physics/units/index.rst", "modules/physics/units/philosophy.rst", "modules/physics/units/prefixes.rst", "modules/physics/units/quantities.rst", "modules/physics/units/unitsystem.rst", "modules/physics/vector/advanced.rst", "modules/physics/vector/api/classes.rst", "modules/physics/vector/api/fieldfunctions.rst", "modules/physics/vector/api/functions.rst", "modules/physics/vector/api/index.rst", "modules/physics/vector/api/kinematics.rst", "modules/physics/vector/api/printing.rst", "modules/physics/vector/fields.rst", "modules/physics/vector/index.rst", "modules/physics/vector/kinematics.rst", "modules/physics/vector/vectors.rst", "modules/physics/wigner.rst", "modules/plotting.rst", "modules/polys/agca.rst", "modules/polys/basics.rst", "modules/polys/domainmatrix.rst", "modules/polys/domainsintro.rst", "modules/polys/domainsref.rst", "modules/polys/index.rst", "modules/polys/internals.rst", "modules/polys/literature.rst", "modules/polys/numberfields.rst", "modules/polys/reference.rst", "modules/polys/ringseries.rst", "modules/polys/solvers.rst", "modules/polys/wester.rst", "modules/printing.rst", "modules/rewriting.rst", "modules/series/formal.rst", "modules/series/fourier.rst", "modules/series/index.rst", "modules/series/limitseq.rst", "modules/series/sequences.rst", "modules/series/series.rst", "modules/sets.rst", "modules/simplify/fu.rst", "modules/simplify/hyperexpand.rst", "modules/simplify/index.rst", "modules/simplify/simplify.rst", "modules/solvers/diophantine.rst", "modules/solvers/index.rst", "modules/solvers/inequalities.rst", "modules/solvers/ode.rst", "modules/solvers/pde.rst", "modules/solvers/solvers.rst", "modules/solvers/solveset.rst", "modules/stats.rst", "modules/tensor/array.rst", "modules/tensor/array_expressions.rst", "modules/tensor/index.rst", "modules/tensor/index_methods.rst", "modules/tensor/indexed.rst", "modules/tensor/tensor.rst", "modules/tensor/toperators.rst", "modules/testing/index.rst", "modules/testing/pytest.rst", "modules/testing/randtest.rst", "modules/testing/runtests.rst", "modules/utilities/autowrap.rst", "modules/utilities/codegen.rst", "modules/utilities/decorator.rst", "modules/utilities/enumerative.rst", "modules/utilities/exceptions.rst", "modules/utilities/index.rst", "modules/utilities/iterables.rst", "modules/utilities/lambdify.rst", "modules/utilities/memoization.rst", "modules/utilities/misc.rst", "modules/utilities/pkgdata.rst", "modules/utilities/source.rst", "modules/utilities/timeutils.rst", "modules/vector/api/classes.rst", "modules/vector/api/index.rst", "modules/vector/api/orienterclasses.rst", "modules/vector/api/vectorfunctions.rst", "modules/vector/basics.rst", "modules/vector/coordsys.rst", "modules/vector/examples.rst", "modules/vector/fields.rst", "modules/vector/index.rst", "modules/vector/intro.rst", "modules/vector/vector_integration.rst", "reference/index.rst", "reference/public/basics/index.rst", "reference/public/codegeneration/index.rst", "reference/public/logic/index.rst", "reference/public/matrices/index.rst", "reference/public/numbertheory/index.rst", "reference/public/physics/index.rst", "reference/public/topics/index.rst", "reference/public/utilities/index.rst", "tutorials/index.rst", "tutorials/intro-tutorial/basic_operations.rst", "tutorials/intro-tutorial/calculus.rst", "tutorials/intro-tutorial/features.rst", "tutorials/intro-tutorial/gotchas.rst", "tutorials/intro-tutorial/index.rst", "tutorials/intro-tutorial/intro.rst", "tutorials/intro-tutorial/manipulation.rst", "tutorials/intro-tutorial/matrices.rst", "tutorials/intro-tutorial/next.rst", "tutorials/intro-tutorial/preliminaries.rst", "tutorials/intro-tutorial/printing.rst", "tutorials/intro-tutorial/simplification.rst", "tutorials/intro-tutorial/solvers.rst"], "titles": ["Citing SymPy", "Debugging", "Dependencies", "Deprecation Policy", "SymPy Docstrings Style Guide", "Docstring Style Guide", "Contributing", "Introduction to Contributing", "Building the Documentation", "Setup Development Environment", "Guide for New Contributors", "Development Workflow Process", "Writing Tests", "List of active deprecations", "Glossary", "Gotchas and Pitfalls", "Explanations", "Solve Output by Type", "Classification of SymPy objects", "Finite Difference Approximations to Derivatives", "SymPy Special Topics", "Assumptions", "Symbolic and fuzzy booleans", "Writing Custom Functions", "How-to Guides", "Control Package Examples", "Physics", "Find the Roots of a Polynomial Algebraically or Numerically", "Solve Equations", "Reduce One or a System of Inequalities for a Single Variable Algebraically", "Solve a Diophantine Equation Algebraically", "Solve an Equation Algebraically", "Solve a Matrix Equation Algebraically", "Solve One or a System of Equations Numerically", "Solve an Ordinary Differential Equation (ODE) Algebraically", "Solve a System of Equations Algebraically", "Solving Guidance", "Welcome to SymPy\u2019s documentation!", "Installation", "abc", "Algebras", "Ask", "Assume", "Assumptions", "Predicates", "Refine", "Calculus", "Category Theory", "Code Generation", "Finitely Presented Groups", "Galois Groups", "Gray Code", "Group constructors", "Nilpotent, Abelian and Cyclic Numbers", "Combinatorics", "Named Groups", "Partitions", "Polycyclic Groups", "Permutation Groups", "Permutations", "Polyhedron", "Prufer Sequences", "Subsets", "Tensor Canonicalization", "Test Utilities", "Utilities", "Concrete", "Core", "Cryptography", "Differential Geometry", "Discrete", "Numerical Evaluation", "Combinatorial", "Elementary", "Functions", "Special", "Curves", "Ellipses", "Entities", "Geometry", "Lines", "Plane", "Points", "Polygons", "Utils", "About Holonomic Functions", "Converting other representations to holonomic", "Holonomic", "Internal API", "Operations on holonomic functions", "Representation of holonomic functions in SymPy", "Uses and Current limitations", "Computing Integrals using Meijer G-Functions", "Integrals", "Integrals", "Interactive", "Lie Algebra", "Logic", "Common Matrices", "Dense Matrices", "Matrix Expressions", "Immutable Matrices", "Matrices", "Matrices (linear algebra)", "Matrix Normal Forms", "Sparse Matrices", "Sparse Tools", "Number Theory", "Numeric Computation", "Parsing", "Beam (Docstrings)", "Solving Beam Bending Problems using Singularity Functions", "Cable (Docstrings)", "Continuum Mechanics", "Truss (Docstrings)", "Control", "Control System Plots", "Control Module", "Control API", "High energy physics", "Hydrogen Wavefunctions", "Matrices", "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics", "Body (Docstrings)", "Expression Manipulation (Docstrings)", "Mechanics API Reference", "Joints Framework (Docstrings)", "Kane\u2019s Method &amp; Lagrange\u2019s Method (Docstrings)", "Linearization (Docstrings)", "Bodies, Inertias, Loads &amp; Other Functions (Docstrings)", "Printing (Docstrings)", "SymbolicSystem (Docstrings)", "Autolev Parser", "Examples for Physics/Mechanics", "A bicycle", "A four bar linkage", "Nonminimal Coordinates Pendulum", "Multi Degree of Freedom Holonomic System", "A rolling disc", "A rolling disc, with Kane\u2019s method", "A rolling disc, with Kane\u2019s method and constraint forces", "A rolling disc using Lagrange\u2019s Method", "Classical Mechanics", "Joints Framework in Physics/Mechanics", "Kane\u2019s Method in Physics/Mechanics", "Lagrange\u2019s Method in Physics/Mechanics", "Linearization in Physics/Mechanics", "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics", "References for Physics/Mechanics", "SymPy Mechanics for Autolev Users", "Symbolic Systems in Physics/Mechanics", "Gaussian Optics", "Optics Module", "Medium", "Polarization", "Utilities", "Waves", "Pauli Algebra", "Quantum Harmonic Oscillator in 1-D", "Anticommutator", "Cartesian Operators and States", "Clebsch-Gordan Coefficients", "Circuit Plot", "Commutator", "Constants", "Dagger", "Gates", "Grover\u2019s Algorithm", "Hilbert Space", "Quantum Mechanics", "Inner Product", "Operator", "Operator/State Helper Functions", "Particle in a Box", "Qapply", "QFT", "Qubit", "Represent", "Shor\u2019s Algorithm", "Spin", "State", "Tensor Product", "Second Quantization", "Quantum Harmonic Oscillator in 3-D", "Dimensions and dimension systems", "More examples", "Unit systems", "Philosophy behind unit systems", "Unit prefixes", "Physical quantities", "Units and unit systems", "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module", "Essential Classes", "Docstrings for basic field functions", "Essential Functions (Docstrings)", "Physics Vector API", "Kinematics (Docstrings)", "Printing (Docstrings)", "Scalar and Vector Field Functionality", "The Physics Vector Module", "Vector: Kinematics", "Vector &amp; ReferenceFrame", "Wigner Symbols", "Plotting", "AGCA - Algebraic Geometry and Commutative Algebra Module", "Basic functionality of the module", "Introducing the domainmatrix of the poly module", "Introducing the Domains of the poly module", "Reference docs for the Poly Domains", "Polynomial Manipulation", "Internals of the Polynomial Manipulation Module", "Literature", "Number Fields", "Polynomials Manipulation Module Reference", "Series Manipulation using Polynomials", "Poly solvers", "Examples from Wester\u2019s Article", "Printing", "Term Rewriting", "Formal Power Series", "Fourier Series", "Series", "Limits of Sequences", "Sequences", "Series Expansions", "Sets", "Hongguang Fu\u2019s Trigonometric Simplification", "Hypergeometric Expansion", "Simplify", "Simplify", "Diophantine", "Solvers", "Inequality Solvers", "ODE", "PDE", "Solvers", "Solveset", "Stats", "N-dim array", "N-dim array expressions", "Tensor", "Methods", "Indexed Objects", "Tensor", "Tensor Operators", "Testing", "pytest", "Randomised Testing", "Run Tests", "Autowrap Module", "Codegen", "Decorator", "Enumerative", "Exceptions and Warnings", "Utilities", "Iterables", "Lambdify", "Memoization", "Miscellaneous", "PKGDATA", "Source Code Inspection", "Timing Utilities", "Essential Classes in sympy.vector (docstrings)", "Vector API", "Orienter classes (docstrings)", "Essential Functions in sympy.vector (docstrings)", "Basic Implementation details", "More about Coordinate Systems", "General examples of usage", "Scalar and Vector Field Functionality", "Vector", "Introduction", "Applications of Vector Integrals", "API Reference", "Basics", "Code Generation", "Logic", "Matrices", "Number Theory", "Physics", "Topics", "Utilities", "Tutorials", "Basic Operations", "Calculus", "SymPy Features", "Gotchas", "Introductory Tutorial", "Introduction", "Advanced Expression Manipulation", "Matrices", "What\u2019s Next", "Preliminaries", "Printing", "Simplification", "Solvers"], "terms": {"To": [0, 1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 19, 22, 23, 25, 29, 30, 31, 33, 34, 35, 36, 38, 39, 42, 43, 46, 47, 48, 49, 57, 58, 59, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75, 80, 90, 92, 94, 96, 97, 98, 100, 103, 107, 109, 110, 111, 116, 118, 119, 121, 123, 126, 127, 131, 145, 146, 147, 149, 159, 163, 176, 185, 187, 198, 201, 203, 205, 207, 208, 210, 212, 213, 214, 216, 217, 224, 225, 227, 230, 233, 234, 235, 236, 237, 238, 241, 242, 246, 248, 249, 252, 253, 255, 256, 262, 264, 266, 267, 269, 271, 272, 283, 284, 286, 287, 289, 290, 293, 294, 295], "public": [0, 4, 11, 12, 48, 67, 68, 89, 207, 208, 210, 211, 215, 230, 233, 237, 251, 262], "us": [0, 1, 3, 4, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 23, 25, 26, 28, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 149, 150, 151, 154, 155, 157, 159, 161, 162, 163, 166, 168, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 191, 192, 193, 194, 196, 197, 198, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 262, 265, 266, 268, 269, 271, 272, 274, 279, 280, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "meurer": 0, "A": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 25, 27, 29, 31, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 109, 110, 111, 112, 114, 116, 118, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 136, 137, 142, 143, 144, 147, 148, 149, 150, 151, 154, 156, 159, 161, 162, 163, 165, 166, 167, 168, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 188, 190, 191, 192, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 255, 256, 262, 264, 266, 267, 268, 269, 271, 272, 279, 285, 287, 289, 290, 294], "smith": [0, 13, 104, 206], "cp": [0, 59, 108, 205, 206], "paprocki": 0, "m": [0, 8, 9, 11, 12, 13, 15, 19, 21, 23, 25, 38, 40, 44, 48, 49, 55, 56, 58, 59, 63, 66, 67, 68, 69, 70, 72, 75, 77, 79, 83, 84, 92, 94, 96, 98, 99, 100, 101, 103, 104, 106, 107, 109, 110, 111, 114, 118, 120, 121, 123, 126, 127, 128, 129, 131, 132, 136, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 153, 158, 165, 179, 180, 183, 185, 187, 198, 202, 204, 205, 206, 208, 210, 211, 212, 213, 214, 217, 218, 219, 220, 222, 223, 224, 225, 227, 229, 230, 233, 235, 236, 237, 238, 239, 242, 243, 249, 250, 252, 255, 257, 262, 265, 267, 271, 272, 284, 290, 293, 294, 295], "\u010dert\u00edk": 0, "o": [0, 4, 8, 11, 12, 14, 15, 19, 21, 39, 47, 48, 58, 59, 65, 67, 68, 73, 75, 77, 78, 80, 81, 83, 89, 92, 107, 111, 123, 127, 129, 131, 132, 144, 145, 146, 147, 149, 150, 172, 182, 193, 196, 198, 200, 202, 210, 211, 213, 214, 217, 219, 224, 227, 233, 237, 242, 248, 255, 258, 259, 265, 268, 284], "kirpichev": 0, "sb": 0, "rocklin": 0, "kumar": [0, 236], "ivanov": 0, "": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 89, 90, 92, 94, 95, 96, 97, 98, 100, 101, 103, 106, 107, 108, 109, 110, 111, 112, 116, 118, 120, 122, 123, 125, 126, 128, 129, 131, 132, 134, 138, 142, 143, 147, 149, 153, 154, 155, 161, 162, 164, 166, 168, 169, 172, 176, 177, 179, 180, 182, 185, 186, 187, 191, 192, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 232, 233, 234, 237, 243, 248, 249, 250, 251, 252, 253, 255, 256, 258, 262, 264, 268, 269, 271, 274, 279, 280, 282, 283, 284, 286, 287, 288, 289, 290, 294, 295], "moor": [0, 32, 100, 103], "jk": 0, "singh": 0, "rathnayak": 0, "t": [0, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 22, 23, 25, 27, 34, 40, 43, 44, 46, 48, 49, 51, 58, 59, 60, 61, 63, 67, 68, 69, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 91, 92, 94, 96, 97, 98, 99, 100, 103, 107, 108, 109, 114, 118, 119, 122, 123, 124, 126, 127, 128, 129, 131, 132, 135, 136, 137, 144, 145, 146, 147, 149, 150, 154, 156, 162, 166, 178, 180, 182, 184, 185, 187, 191, 192, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 217, 220, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 239, 243, 246, 248, 251, 255, 256, 262, 265, 267, 271, 283, 284, 288, 289, 290, 293, 294, 295], "vig": 0, "granger": [0, 168], "BE": [0, 12], "muller": 0, "rp": [0, 83, 154], "bonazzi": 0, "f": [0, 4, 8, 11, 12, 13, 14, 15, 19, 23, 25, 27, 30, 31, 33, 34, 46, 47, 48, 49, 50, 57, 58, 59, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 85, 90, 91, 92, 94, 96, 98, 100, 103, 107, 108, 109, 111, 114, 116, 126, 127, 128, 131, 137, 142, 144, 145, 149, 151, 155, 156, 167, 168, 171, 180, 182, 185, 192, 197, 198, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 214, 216, 217, 219, 220, 223, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 242, 243, 248, 249, 250, 251, 252, 255, 256, 258, 268, 269, 272, 283, 284, 289, 293, 294, 295], "gupta": [0, 236], "h": [0, 15, 19, 46, 47, 48, 49, 50, 51, 58, 63, 66, 67, 68, 72, 75, 89, 92, 94, 98, 99, 103, 104, 109, 118, 126, 129, 147, 151, 154, 166, 168, 171, 176, 180, 187, 202, 203, 204, 205, 206, 210, 211, 212, 213, 216, 217, 225, 229, 233, 235, 236, 237, 238, 243, 250, 272, 284, 293], "vat": 0, "johansson": 0, "pedregosa": 0, "curri": [0, 168], "mj": 0, "terrel": 0, "ar": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 103, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 118, 119, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 154, 155, 156, 157, 159, 161, 163, 166, 168, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 198, 200, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 246, 248, 249, 250, 252, 253, 254, 255, 256, 258, 262, 264, 265, 266, 267, 268, 269, 271, 273, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "rou\u010dka": 0, "\u0161": 0, "saboo": 0, "fernando": 0, "i": [0, 1, 2, 4, 5, 7, 8, 9, 10, 11, 13, 14, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 110, 111, 112, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 166, 168, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 283, 284, 286, 287, 289, 290, 292, 293, 294, 295], "kulal": 0, "cimrman": 0, "r": [0, 4, 5, 8, 12, 13, 15, 19, 21, 23, 27, 40, 47, 48, 49, 51, 58, 59, 67, 68, 69, 71, 72, 73, 80, 81, 83, 85, 89, 90, 92, 94, 103, 107, 109, 111, 114, 118, 120, 123, 126, 127, 128, 129, 131, 132, 134, 136, 139, 140, 141, 146, 147, 148, 149, 150, 151, 154, 178, 179, 182, 183, 185, 192, 193, 196, 198, 200, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 219, 224, 225, 227, 229, 230, 233, 235, 236, 237, 243, 248, 250, 252, 262, 265, 267, 268, 269, 272, 294], "scopatz": 0, "2017": [0, 7, 202], "symbol": [0, 2, 4, 5, 7, 11, 12, 13, 14, 17, 19, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 57, 59, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 94, 95, 97, 98, 100, 103, 107, 108, 109, 110, 111, 112, 114, 115, 116, 118, 120, 122, 123, 124, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 147, 149, 151, 154, 155, 156, 157, 159, 161, 162, 164, 166, 168, 170, 171, 174, 177, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 222, 223, 224, 225, 227, 229, 230, 232, 233, 234, 235, 237, 238, 240, 241, 242, 243, 244, 249, 255, 256, 262, 264, 265, 267, 268, 269, 272, 279, 283, 284, 287, 289, 290, 293, 294, 295], "comput": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33, 38, 40, 46, 48, 49, 50, 51, 56, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 80, 82, 86, 89, 90, 91, 93, 94, 96, 98, 100, 103, 104, 106, 107, 109, 110, 111, 116, 118, 122, 126, 127, 128, 131, 132, 134, 135, 139, 142, 149, 166, 167, 168, 176, 181, 182, 184, 186, 187, 191, 192, 193, 198, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 222, 224, 225, 226, 227, 229, 230, 233, 235, 236, 237, 239, 249, 252, 255, 256, 262, 264, 265, 266, 267, 268, 269, 271, 274, 283, 284, 286, 287, 290, 294], "python": [0, 1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 18, 21, 22, 23, 26, 27, 28, 31, 32, 34, 36, 37, 38, 41, 42, 43, 46, 59, 67, 68, 71, 73, 79, 95, 97, 98, 100, 103, 107, 108, 109, 110, 122, 132, 149, 192, 203, 204, 205, 207, 208, 214, 216, 217, 225, 229, 233, 236, 238, 248, 249, 250, 251, 252, 255, 256, 262, 286, 287, 288, 289, 290, 292, 293, 294], "peerj": [0, 7], "scienc": [0, 59, 92, 103, 148, 149, 204, 211, 226, 227, 284], "3": [0, 3, 5, 7, 9, 11, 12, 13, 15, 17, 19, 21, 22, 23, 27, 29, 30, 31, 32, 33, 34, 36, 38, 40, 41, 43, 44, 45, 46, 48, 49, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 116, 118, 119, 120, 121, 123, 124, 126, 129, 131, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 146, 147, 149, 150, 151, 153, 155, 159, 161, 162, 163, 167, 171, 176, 177, 179, 181, 182, 185, 186, 188, 189, 192, 193, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 248, 249, 251, 252, 253, 255, 256, 258, 262, 264, 265, 266, 267, 269, 271, 272, 279, 283, 284, 286, 288, 289, 290, 293, 294, 295], "e103": 0, "http": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 21, 23, 38, 40, 42, 43, 44, 46, 47, 48, 50, 51, 55, 56, 58, 59, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 79, 83, 84, 85, 89, 92, 94, 95, 96, 97, 98, 100, 103, 107, 110, 116, 118, 120, 121, 151, 153, 154, 155, 157, 158, 159, 163, 164, 165, 168, 170, 171, 180, 182, 192, 194, 197, 199, 202, 206, 208, 211, 213, 216, 217, 220, 222, 224, 225, 226, 229, 230, 233, 236, 237, 249, 250, 251, 253, 255, 256, 258, 262, 264, 268, 270, 272, 290, 293], "doi": [0, 4, 40, 46, 59, 66, 103, 128, 206, 208, 211, 226, 229, 237, 255], "org": [0, 2, 4, 5, 11, 12, 15, 21, 23, 40, 42, 43, 44, 46, 47, 48, 50, 51, 55, 56, 58, 59, 66, 67, 68, 69, 70, 72, 73, 75, 77, 79, 83, 84, 85, 94, 95, 96, 97, 98, 100, 103, 107, 116, 118, 120, 121, 151, 153, 154, 155, 157, 158, 159, 163, 164, 165, 168, 170, 171, 180, 182, 192, 194, 197, 199, 206, 208, 211, 213, 217, 220, 224, 225, 226, 229, 230, 233, 236, 237, 249, 250, 251, 253, 255, 262, 264, 268, 270, 272, 290, 293], "10": [0, 2, 4, 12, 15, 23, 25, 27, 33, 34, 36, 38, 40, 46, 48, 56, 58, 59, 63, 65, 66, 67, 68, 70, 71, 72, 73, 75, 80, 81, 83, 84, 92, 94, 95, 97, 98, 100, 103, 104, 107, 108, 109, 110, 112, 114, 116, 118, 119, 124, 128, 129, 132, 134, 149, 151, 155, 166, 176, 177, 188, 192, 193, 194, 196, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 217, 220, 223, 224, 225, 226, 229, 230, 233, 236, 237, 238, 247, 248, 253, 255, 256, 258, 262, 265, 283, 290, 294], "7717": 0, "c": [0, 2, 7, 8, 12, 14, 15, 19, 21, 23, 25, 27, 28, 30, 32, 39, 40, 46, 47, 51, 52, 56, 58, 59, 60, 62, 63, 64, 66, 67, 68, 70, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 90, 92, 94, 96, 97, 98, 100, 103, 107, 108, 109, 110, 111, 112, 114, 118, 120, 122, 124, 126, 127, 129, 132, 137, 139, 140, 141, 143, 145, 146, 149, 151, 155, 161, 162, 163, 166, 168, 171, 176, 179, 181, 182, 187, 191, 192, 196, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 242, 243, 249, 250, 252, 255, 258, 259, 262, 264, 265, 266, 267, 268, 269, 272, 284, 286, 293, 294, 295], "103": [0, 7, 58], "bibtex": 0, "entri": [0, 11, 32, 44, 49, 57, 59, 65, 68, 79, 92, 96, 98, 99, 100, 106, 127, 129, 132, 134, 147, 154, 206, 210, 212, 213, 227, 237, 256], "latex": [0, 2, 4, 8, 12, 14, 23, 36, 38, 75, 95, 191, 192, 197, 201, 203, 208, 217, 288, 289], "user": [0, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 18, 20, 21, 23, 47, 48, 49, 58, 59, 66, 67, 68, 69, 75, 79, 92, 96, 100, 103, 109, 110, 111, 114, 116, 118, 122, 132, 142, 145, 147, 150, 170, 171, 180, 186, 187, 192, 196, 200, 204, 207, 210, 212, 214, 215, 216, 217, 218, 226, 229, 235, 236, 237, 246, 249, 250, 252, 253, 256, 262, 266, 267, 272, 279, 283, 286, 287, 289, 290, 291], "articl": [0, 7, 9, 11, 67, 68, 100, 103, 209, 211, 212, 217, 226, 262, 280, 288], "titl": [0, 4, 5, 34, 203], "author": [0, 4, 7, 107, 168, 212], "aaron": 0, "christoph": [0, 262], "p": [0, 8, 13, 14, 15, 19, 21, 22, 23, 25, 27, 28, 30, 40, 42, 43, 44, 48, 49, 50, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 72, 73, 75, 77, 80, 81, 82, 83, 84, 89, 90, 92, 94, 98, 100, 103, 107, 109, 110, 111, 112, 114, 118, 119, 123, 126, 127, 128, 129, 131, 132, 136, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 161, 180, 182, 187, 193, 196, 198, 200, 202, 203, 205, 206, 207, 210, 211, 213, 214, 217, 219, 220, 224, 225, 227, 229, 230, 233, 235, 236, 237, 238, 242, 243, 255, 262, 265, 266, 267, 268, 269, 271, 290, 294], "mateusz": 0, "v": [0, 8, 9, 17, 25, 27, 31, 36, 40, 48, 57, 63, 66, 67, 68, 69, 70, 71, 75, 81, 92, 94, 96, 98, 103, 107, 111, 123, 124, 126, 129, 134, 146, 147, 149, 150, 154, 155, 167, 182, 187, 191, 192, 194, 196, 198, 200, 201, 203, 210, 211, 212, 213, 217, 227, 229, 230, 233, 235, 237, 248, 255, 262, 265, 266, 267, 268, 269, 271], "ert": 0, "k": [0, 5, 12, 15, 17, 21, 23, 25, 30, 40, 46, 47, 48, 49, 51, 53, 57, 58, 61, 62, 65, 66, 67, 68, 70, 71, 72, 73, 75, 85, 92, 94, 97, 98, 100, 103, 107, 118, 126, 127, 131, 137, 144, 146, 149, 156, 170, 171, 174, 178, 180, 182, 191, 198, 202, 204, 206, 207, 210, 211, 212, 213, 214, 217, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 233, 235, 237, 238, 239, 241, 242, 243, 244, 248, 252, 255, 262, 264, 265, 266, 267, 268, 269, 271, 272, 293, 294], "ond": 0, "ej": 0, "sergei": 0, "b": [0, 11, 12, 14, 15, 17, 21, 22, 23, 25, 27, 28, 30, 32, 40, 47, 48, 49, 51, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 90, 92, 94, 96, 97, 98, 99, 100, 103, 107, 109, 110, 111, 112, 114, 116, 118, 123, 124, 126, 127, 128, 129, 131, 132, 136, 137, 146, 147, 149, 151, 154, 159, 161, 163, 165, 170, 171, 174, 179, 180, 181, 182, 191, 192, 194, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 217, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 248, 251, 252, 255, 258, 262, 264, 265, 266, 267, 268, 284, 286, 290, 294, 295], "matthew": 0, "amit": [0, 236], "sergiu": 0, "jason": [0, 217], "sartaj": 0, "thilina": 0, "sean": 0, "brian": [0, 168], "e": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 21, 22, 23, 25, 28, 32, 33, 36, 38, 39, 40, 44, 46, 47, 48, 49, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 73, 75, 77, 79, 80, 81, 82, 83, 84, 89, 90, 92, 94, 96, 97, 98, 103, 107, 109, 110, 111, 114, 118, 119, 123, 126, 127, 129, 131, 132, 145, 146, 149, 150, 151, 154, 161, 162, 166, 171, 172, 174, 177, 179, 181, 182, 187, 188, 192, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 223, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 262, 266, 269, 271, 272, 283, 284, 288, 289, 294], "richard": [0, 107], "francesco": 0, "harsh": [0, 236], "shivam": 0, "fredrik": 0, "fabian": 0, "j": [0, 5, 15, 25, 40, 44, 46, 48, 49, 53, 57, 58, 59, 63, 65, 66, 68, 69, 71, 72, 75, 89, 92, 94, 96, 98, 100, 103, 107, 116, 119, 126, 131, 148, 149, 154, 161, 162, 179, 182, 187, 191, 198, 202, 204, 206, 208, 210, 211, 212, 213, 214, 216, 217, 219, 225, 227, 229, 230, 233, 235, 236, 237, 238, 239, 241, 242, 243, 244, 249, 255, 262, 264, 265, 266, 267, 268, 269, 271, 272], "andi": [0, 148], "rou": 0, "ka": 0, "n": [0, 4, 5, 9, 12, 14, 15, 19, 21, 23, 27, 30, 31, 39, 44, 46, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 61, 63, 65, 66, 67, 68, 69, 71, 72, 73, 75, 77, 80, 81, 82, 83, 84, 89, 90, 92, 94, 96, 97, 98, 100, 103, 104, 107, 109, 110, 111, 114, 116, 118, 120, 121, 123, 126, 127, 129, 131, 132, 134, 135, 136, 137, 139, 140, 141, 144, 145, 146, 147, 149, 150, 151, 153, 155, 156, 158, 162, 167, 168, 171, 176, 178, 179, 180, 182, 183, 185, 187, 189, 191, 192, 194, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 233, 235, 236, 237, 240, 242, 243, 246, 249, 255, 257, 258, 262, 264, 265, 266, 267, 271, 277, 284, 290, 293, 294, 295], "ashutosh": 0, "isuru": 0, "sumith": 0, "robert": [0, 206, 237], "anthoni": 0, "year": [0, 3, 4, 13, 186], "month": 0, "jan": [0, 68], "keyword": [0, 3, 4, 12, 13, 14, 17, 23, 47, 48, 49, 58, 59, 67, 68, 71, 72, 80, 82, 83, 84, 98, 103, 107, 110, 116, 118, 127, 144, 145, 176, 182, 197, 203, 205, 206, 207, 208, 210, 212, 213, 216, 217, 218, 224, 229, 230, 235, 242, 248, 249, 251, 253, 255, 256, 258, 267, 290], "algebra": [0, 5, 14, 15, 17, 21, 26, 28, 33, 36, 44, 49, 50, 58, 67, 68, 71, 73, 85, 88, 89, 90, 92, 94, 97, 98, 102, 104, 107, 108, 109, 131, 142, 149, 150, 202, 205, 206, 208, 209, 210, 211, 213, 214, 217, 219, 227, 230, 232, 233, 236, 273, 274, 277, 279, 280, 285, 286, 288, 290], "system": [0, 1, 2, 5, 7, 8, 9, 13, 14, 15, 17, 18, 19, 22, 23, 25, 26, 27, 28, 32, 34, 41, 43, 58, 67, 68, 69, 73, 92, 95, 96, 97, 98, 103, 108, 109, 110, 114, 115, 117, 118, 122, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 139, 141, 142, 143, 144, 145, 146, 147, 149, 160, 161, 176, 179, 180, 182, 185, 189, 192, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 217, 225, 226, 232, 236, 237, 248, 249, 262, 264, 265, 268, 270, 272, 277, 279, 286, 288, 290, 294, 295], "abstract": [0, 13, 46, 47, 56, 67, 69, 73, 75, 80, 85, 100, 126, 132, 166, 168, 177, 180, 181, 182, 204, 212, 236, 237, 239, 243, 250, 271], "an": [0, 2, 3, 4, 5, 7, 8, 9, 10, 12, 14, 15, 17, 18, 19, 21, 22, 23, 25, 27, 28, 29, 30, 32, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 116, 118, 119, 120, 122, 123, 126, 127, 128, 129, 131, 134, 136, 142, 144, 146, 147, 149, 150, 153, 154, 155, 159, 161, 162, 163, 165, 166, 167, 168, 170, 171, 172, 175, 176, 177, 179, 180, 182, 183, 184, 186, 191, 192, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 229, 230, 232, 233, 234, 235, 237, 238, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 262, 264, 266, 267, 269, 270, 271, 272, 283, 284, 285, 286, 287, 288, 290, 293, 294, 295], "open": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 31, 32, 33, 35, 38, 46, 67, 69, 73, 94, 97, 118, 132, 135, 149, 217, 225, 232, 236, 237, 259, 288, 290], "sourc": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 32, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 112, 114, 116, 118, 119, 120, 121, 123, 124, 126, 127, 128, 129, 131, 132, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 190, 192, 193, 194, 196, 197, 198, 202, 203, 204, 206, 207, 208, 210, 212, 213, 214, 215, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 264, 265, 269, 281, 288], "written": [0, 2, 4, 5, 11, 12, 14, 21, 23, 44, 48, 55, 58, 59, 63, 67, 72, 75, 79, 85, 90, 92, 96, 97, 106, 107, 136, 142, 149, 182, 198, 199, 200, 201, 204, 205, 213, 217, 220, 224, 227, 230, 233, 250, 269, 271, 287, 288, 289, 294], "pure": [0, 2, 14, 31, 33, 40, 68, 73, 94, 97, 100, 118, 146, 187, 206, 207, 208, 210, 213, 217, 237, 255], "It": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 27, 30, 31, 33, 34, 35, 38, 40, 41, 42, 43, 46, 47, 48, 55, 58, 59, 61, 62, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 79, 83, 84, 90, 92, 94, 96, 97, 103, 107, 108, 109, 110, 111, 112, 114, 116, 118, 120, 122, 123, 124, 126, 127, 131, 132, 134, 140, 142, 143, 144, 145, 147, 149, 151, 155, 156, 166, 171, 172, 177, 178, 179, 180, 181, 182, 184, 187, 190, 192, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 217, 220, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 248, 249, 250, 251, 252, 253, 256, 262, 265, 266, 267, 269, 271, 272, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294], "built": [0, 2, 4, 5, 8, 14, 15, 18, 41, 43, 49, 67, 73, 94, 103, 132, 149, 205, 208, 217, 218, 222, 233, 236, 237, 243, 252, 255, 256, 288, 289, 293], "focu": [0, 13, 21, 77, 235, 288], "extens": [0, 2, 4, 5, 7, 12, 21, 23, 58, 67, 72, 73, 79, 83, 94, 103, 129, 149, 205, 207, 208, 210, 211, 212, 213, 217, 227, 229, 233, 235, 236, 249, 250, 259, 287, 294], "eas": [0, 132, 201, 203, 217, 220], "through": [0, 3, 4, 7, 8, 13, 14, 15, 21, 23, 27, 31, 32, 34, 36, 38, 46, 48, 58, 59, 61, 66, 67, 68, 71, 72, 75, 77, 78, 79, 80, 81, 83, 92, 96, 97, 103, 107, 110, 111, 112, 116, 123, 127, 132, 134, 142, 147, 153, 154, 192, 204, 210, 212, 217, 223, 227, 229, 233, 235, 236, 237, 238, 249, 255, 262, 264, 269, 272, 285, 286, 287, 292], "both": [0, 2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 18, 21, 22, 23, 27, 29, 30, 31, 34, 39, 40, 46, 47, 48, 59, 62, 63, 65, 66, 67, 68, 72, 73, 75, 82, 91, 92, 94, 97, 98, 103, 107, 109, 110, 111, 118, 123, 126, 127, 129, 131, 134, 136, 137, 143, 146, 154, 155, 166, 172, 179, 182, 186, 187, 192, 196, 200, 201, 203, 204, 205, 207, 208, 210, 212, 213, 215, 216, 217, 219, 224, 225, 226, 227, 229, 230, 233, 235, 236, 238, 242, 248, 250, 255, 256, 262, 264, 284, 287, 288, 289, 294, 295], "interact": [0, 11, 14, 17, 31, 39, 67, 81, 94, 101, 103, 149, 179, 197, 201, 207, 208, 229, 237, 253, 260, 273, 281, 286, 288, 289, 293, 294], "programmat": [0, 14, 17, 18, 35, 36, 236, 267], "applic": [0, 5, 13, 28, 31, 49, 50, 51, 57, 58, 59, 60, 67, 68, 73, 94, 98, 103, 107, 110, 112, 114, 126, 127, 131, 132, 142, 146, 148, 149, 166, 167, 192, 196, 200, 205, 206, 210, 211, 212, 213, 217, 219, 224, 230, 233, 236, 250, 255, 262, 269, 270, 277, 288], "These": [0, 2, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 36, 37, 39, 47, 48, 58, 66, 67, 68, 69, 75, 92, 94, 97, 103, 107, 109, 111, 118, 126, 127, 128, 134, 136, 140, 146, 149, 172, 177, 178, 186, 192, 193, 198, 200, 201, 204, 205, 206, 207, 208, 210, 213, 217, 227, 230, 233, 234, 236, 237, 239, 244, 248, 249, 250, 255, 269, 284, 287, 290, 293, 294], "characterist": [0, 69, 85, 103, 200, 206, 208, 210, 211, 233, 235, 290], "have": [0, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 18, 19, 21, 22, 23, 25, 27, 29, 30, 32, 33, 34, 36, 38, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 73, 75, 77, 78, 82, 83, 85, 90, 91, 92, 94, 96, 97, 98, 99, 100, 103, 106, 107, 108, 109, 110, 111, 116, 118, 119, 121, 122, 126, 127, 128, 129, 131, 132, 133, 134, 140, 142, 146, 147, 149, 166, 168, 171, 175, 177, 179, 180, 181, 182, 184, 185, 187, 190, 191, 192, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 219, 220, 222, 224, 225, 226, 227, 229, 230, 233, 235, 236, 237, 238, 239, 241, 243, 244, 246, 247, 248, 250, 251, 252, 255, 256, 258, 262, 264, 266, 267, 268, 269, 272, 283, 284, 286, 287, 288, 289, 290, 293, 294, 295], "led": 0, "becom": [0, 3, 4, 5, 11, 12, 13, 14, 15, 19, 21, 58, 63, 66, 67, 68, 71, 90, 95, 103, 109, 131, 197, 200, 204, 205, 207, 214, 217, 220, 226, 233, 236, 237, 243, 256, 258, 265, 267, 294], "popular": [0, 2, 68, 108, 149, 288], "librari": [0, 2, 3, 4, 12, 13, 14, 21, 23, 33, 37, 38, 48, 67, 68, 72, 92, 94, 95, 103, 108, 122, 131, 132, 149, 186, 203, 207, 208, 237, 248, 249, 250, 255, 256, 283, 286, 287, 288], "scientif": [0, 14, 38, 67, 149], "ecosystem": 0, "thi": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 118, 119, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 159, 161, 162, 163, 165, 166, 168, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 262, 264, 265, 266, 267, 268, 269, 270, 271, 273, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295], "paper": [0, 4, 107, 134, 201, 212, 213, 226, 227, 230, 233], "present": [0, 2, 5, 13, 14, 15, 19, 46, 47, 51, 54, 58, 59, 61, 65, 67, 70, 94, 103, 107, 110, 114, 116, 118, 127, 131, 134, 182, 184, 192, 194, 197, 198, 203, 204, 210, 211, 212, 216, 217, 230, 236, 250, 256, 259, 265, 266, 267, 271, 274, 295], "architectur": [0, 12, 149, 207, 248], "descript": [0, 3, 4, 5, 13, 28, 37, 47, 49, 57, 75, 94, 107, 154, 172, 179, 190, 200, 201, 202, 217, 241, 248, 250, 252, 253, 273, 291], "its": [0, 2, 3, 4, 5, 7, 12, 13, 14, 15, 17, 19, 21, 22, 23, 27, 29, 30, 31, 32, 33, 34, 36, 40, 42, 43, 44, 47, 48, 49, 51, 55, 57, 58, 59, 66, 67, 68, 69, 72, 73, 75, 77, 79, 83, 85, 92, 94, 95, 97, 98, 100, 103, 107, 109, 110, 111, 112, 114, 118, 122, 123, 126, 127, 129, 131, 132, 134, 135, 136, 142, 143, 146, 147, 149, 150, 155, 161, 167, 168, 170, 171, 176, 177, 180, 182, 186, 187, 189, 192, 193, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 223, 224, 225, 229, 232, 233, 235, 236, 237, 239, 241, 242, 243, 248, 251, 252, 255, 256, 259, 262, 265, 266, 267, 269, 272, 288, 289, 290, 293, 294], "featur": [0, 2, 3, 5, 7, 11, 12, 13, 15, 16, 23, 37, 38, 67, 69, 71, 109, 132, 142, 149, 199, 217, 233, 237, 246, 250, 253, 270, 279, 282, 287, 288, 292, 294], "discuss": [0, 3, 4, 5, 7, 11, 12, 13, 15, 16, 17, 19, 21, 22, 23, 37, 49, 58, 68, 75, 107, 122, 127, 132, 142, 146, 147, 191, 199, 200, 201, 207, 243, 252, 273, 283, 285, 286, 288, 289, 291, 293, 294], "select": [0, 8, 16, 17, 32, 37, 48, 51, 58, 59, 66, 67, 68, 76, 81, 95, 97, 98, 107, 109, 124, 127, 187, 197, 207, 208, 210, 211, 213, 217, 226, 229, 235], "submodul": [0, 2, 3, 4, 11, 12, 14, 48, 122, 204, 208, 210, 212], "The": [0, 2, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 17, 19, 20, 22, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 118, 119, 120, 122, 123, 124, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 153, 154, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 262, 264, 265, 266, 267, 270, 271, 272, 279, 283, 284, 286, 287, 289, 290, 291, 292, 293, 294, 295], "supplementari": 0, "materi": [0, 110, 153, 292], "provid": [0, 2, 3, 4, 5, 7, 8, 9, 11, 13, 16, 17, 19, 20, 21, 22, 23, 25, 28, 29, 33, 37, 40, 46, 47, 48, 49, 50, 56, 57, 58, 59, 65, 66, 67, 69, 71, 75, 76, 78, 83, 86, 89, 90, 94, 95, 97, 98, 100, 103, 104, 106, 107, 108, 109, 111, 114, 116, 122, 123, 126, 127, 129, 131, 134, 135, 136, 137, 142, 143, 144, 145, 146, 147, 149, 150, 155, 156, 176, 184, 185, 186, 190, 192, 193, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 220, 222, 225, 226, 227, 229, 233, 234, 235, 236, 237, 238, 242, 243, 248, 249, 250, 252, 253, 255, 256, 258, 262, 265, 266, 267, 269, 270, 272, 284, 288, 289, 290, 294], "addit": [0, 2, 3, 5, 9, 12, 13, 14, 15, 17, 19, 38, 40, 48, 57, 58, 59, 66, 67, 73, 75, 79, 85, 87, 91, 92, 94, 95, 97, 100, 103, 107, 109, 115, 116, 118, 122, 123, 127, 146, 150, 168, 180, 181, 184, 191, 197, 200, 201, 202, 203, 204, 205, 206, 207, 210, 212, 213, 217, 223, 226, 227, 229, 230, 233, 234, 235, 236, 237, 248, 249, 250, 252, 253, 255, 256, 258, 266, 286, 288, 289, 290, 293, 294], "exampl": [0, 1, 2, 3, 5, 7, 12, 13, 14, 15, 17, 18, 19, 21, 22, 26, 28, 31, 32, 34, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 112, 114, 116, 118, 120, 121, 123, 124, 126, 127, 129, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 149, 151, 153, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 174, 176, 177, 179, 180, 181, 182, 183, 184, 188, 189, 191, 192, 193, 194, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 218, 219, 220, 222, 223, 225, 226, 229, 230, 232, 233, 234, 235, 236, 241, 243, 244, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 264, 265, 267, 269, 270, 271, 272, 277, 279, 280, 283, 284, 285, 286, 287, 289, 290, 292, 293, 295], "further": [0, 2, 11, 21, 23, 27, 43, 47, 68, 73, 75, 79, 92, 94, 99, 100, 103, 109, 110, 115, 116, 123, 126, 127, 147, 154, 200, 202, 203, 204, 206, 210, 212, 213, 226, 227, 229, 233, 237, 243, 287, 288], "outlin": [0, 2, 3, 11, 21, 23, 65, 94, 204, 233], "detail": [0, 2, 3, 4, 5, 6, 9, 11, 12, 13, 14, 16, 18, 21, 23, 37, 47, 58, 67, 69, 72, 74, 75, 92, 93, 94, 95, 103, 107, 116, 126, 127, 132, 147, 149, 154, 172, 176, 192, 194, 202, 203, 204, 206, 210, 212, 219, 224, 229, 230, 231, 233, 234, 237, 242, 243, 248, 251, 253, 256, 267, 268, 269, 270, 273, 277, 284, 286, 290, 291, 293], "volum": [0, 4, 48, 66, 75, 92, 94, 202, 211, 227, 230, 233, 252, 262], "page": [0, 2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 21, 22, 27, 28, 30, 31, 35, 37, 48, 49, 50, 66, 72, 92, 107, 108, 126, 127, 149, 187, 203, 206, 207, 208, 211, 217, 227, 230, 253, 271, 294], "journal": [0, 4, 7, 40, 66, 72, 107, 119, 211, 229, 252, 255], "issn": 0, "2376": 0, "5992": 0, "url": [0, 68, 253], "bsd": [0, 2, 8, 288], "licens": [0, 2, 8, 288], "so": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 55, 56, 58, 59, 61, 63, 65, 67, 68, 71, 73, 75, 77, 79, 80, 81, 83, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 103, 104, 107, 109, 110, 111, 118, 122, 126, 127, 131, 132, 134, 136, 142, 143, 144, 146, 147, 149, 150, 155, 166, 168, 176, 178, 179, 180, 182, 184, 186, 187, 191, 192, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 241, 242, 246, 248, 249, 252, 253, 255, 256, 258, 268, 272, 283, 284, 286, 288, 289, 290, 293, 294, 295], "you": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 42, 43, 44, 46, 48, 49, 50, 58, 59, 66, 67, 68, 69, 71, 73, 74, 75, 79, 81, 83, 85, 86, 91, 92, 94, 95, 97, 98, 100, 101, 103, 104, 107, 108, 109, 118, 120, 121, 122, 126, 127, 128, 129, 131, 132, 133, 143, 144, 146, 147, 149, 171, 176, 177, 180, 182, 186, 191, 192, 194, 198, 200, 201, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 217, 218, 220, 224, 225, 229, 230, 233, 234, 235, 236, 237, 238, 241, 242, 243, 246, 248, 249, 250, 251, 253, 255, 256, 259, 266, 267, 268, 269, 282, 283, 284, 286, 288, 289, 290, 291, 292, 293, 294, 295], "free": [0, 9, 11, 12, 13, 14, 27, 32, 33, 38, 46, 47, 48, 57, 58, 63, 67, 79, 94, 98, 100, 103, 107, 110, 111, 116, 119, 126, 129, 142, 151, 171, 189, 192, 199, 203, 204, 206, 208, 210, 212, 213, 217, 219, 225, 227, 229, 230, 233, 235, 236, 243, 255, 288], "howev": [0, 2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 27, 30, 31, 34, 41, 43, 48, 50, 58, 59, 63, 66, 67, 68, 69, 72, 73, 75, 77, 92, 94, 97, 98, 103, 107, 108, 109, 110, 114, 126, 127, 129, 131, 132, 146, 150, 182, 201, 202, 203, 204, 205, 207, 208, 210, 212, 213, 214, 216, 217, 218, 224, 225, 226, 227, 229, 233, 234, 235, 236, 248, 249, 256, 266, 267, 271, 283, 286, 288, 290, 294, 295], "like": [0, 1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 21, 22, 23, 32, 34, 35, 36, 37, 38, 48, 49, 50, 52, 58, 59, 66, 67, 68, 71, 72, 73, 75, 77, 87, 90, 94, 95, 97, 98, 100, 101, 102, 103, 107, 108, 109, 114, 118, 122, 126, 132, 134, 143, 146, 149, 150, 164, 166, 176, 177, 180, 181, 182, 186, 187, 191, 192, 196, 198, 200, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 216, 217, 220, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 239, 241, 243, 244, 246, 248, 249, 250, 251, 255, 256, 258, 259, 266, 267, 269, 271, 283, 284, 286, 287, 288, 289, 290, 294], "academ": [0, 47, 51, 211], "commerci": [0, 288], "creat": [0, 2, 4, 5, 7, 8, 12, 14, 21, 22, 29, 30, 31, 32, 34, 35, 36, 40, 42, 47, 48, 49, 56, 58, 59, 67, 68, 69, 71, 73, 74, 75, 77, 79, 80, 82, 83, 88, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 109, 110, 114, 118, 123, 126, 127, 129, 131, 132, 135, 136, 137, 139, 141, 143, 145, 146, 147, 149, 150, 159, 161, 163, 167, 170, 171, 172, 176, 177, 179, 180, 182, 185, 188, 191, 192, 194, 196, 200, 201, 203, 204, 206, 207, 208, 210, 212, 213, 214, 217, 224, 229, 233, 236, 237, 238, 242, 243, 248, 249, 250, 252, 253, 255, 256, 262, 267, 269, 284, 286, 289, 290, 293, 294, 295], "fork": [0, 5, 13, 134], "deriv": [0, 4, 11, 12, 13, 14, 20, 23, 31, 46, 47, 48, 51, 57, 58, 67, 69, 73, 74, 75, 77, 84, 89, 90, 92, 94, 95, 97, 100, 103, 114, 118, 122, 124, 126, 127, 128, 129, 131, 134, 136, 137, 139, 142, 144, 145, 146, 171, 180, 184, 187, 188, 191, 192, 194, 196, 197, 198, 200, 203, 204, 205, 206, 208, 210, 212, 213, 214, 217, 219, 227, 229, 233, 234, 235, 239, 244, 250, 262, 265, 266, 285, 288, 295], "long": [0, 4, 5, 11, 12, 27, 36, 48, 59, 66, 67, 68, 70, 80, 92, 94, 95, 97, 103, 107, 110, 111, 134, 147, 197, 213, 214, 217, 226, 227, 235, 237, 249, 256, 258, 265, 286, 289], "copi": [0, 8, 9, 11, 12, 13, 15, 21, 49, 59, 60, 67, 83, 103, 107, 108, 206, 208, 210, 212, 216, 217, 224, 235, 248, 255, 258, 293], "statement": [0, 4, 13, 21, 22, 23, 38, 47, 48, 67, 75, 92, 97, 100, 132, 161, 217, 237, 246, 250, 255], "redistribut": [0, 213], "see": [0, 2, 3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 37, 41, 42, 43, 44, 46, 47, 48, 50, 53, 55, 58, 59, 60, 63, 66, 68, 69, 72, 73, 74, 75, 79, 83, 84, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 103, 104, 107, 108, 109, 116, 122, 126, 127, 128, 131, 138, 140, 144, 146, 151, 154, 157, 158, 167, 171, 172, 176, 177, 178, 179, 181, 182, 185, 187, 192, 197, 200, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 219, 220, 223, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 242, 243, 246, 248, 249, 250, 251, 252, 253, 256, 257, 262, 264, 272, 283, 284, 286, 288, 289, 290, 292, 293, 294, 295], "file": [0, 2, 3, 4, 5, 7, 8, 9, 12, 14, 15, 48, 103, 132, 149, 171, 203, 217, 224, 227, 229, 237, 246, 248, 249, 250, 256, 259], "That": [0, 3, 5, 11, 12, 14, 15, 21, 22, 23, 67, 68, 73, 97, 103, 142, 179, 184, 190, 200, 201, 204, 205, 207, 208, 210, 212, 223, 224, 233, 237, 249, 250, 256, 283, 286, 289, 294], "said": [0, 3, 14, 40, 44, 48, 53, 107, 187, 198, 200, 201, 205, 233, 236, 237, 262, 269], "although": [0, 2, 3, 4, 5, 11, 12, 14, 15, 18, 19, 21, 23, 30, 59, 67, 68, 73, 79, 91, 92, 95, 97, 98, 100, 103, 107, 110, 122, 134, 149, 204, 206, 207, 208, 210, 212, 213, 225, 226, 229, 230, 235, 249, 255, 256, 286, 289, 294], "requir": [0, 2, 4, 5, 7, 9, 11, 12, 13, 14, 15, 23, 32, 36, 38, 48, 58, 67, 68, 70, 71, 75, 77, 78, 80, 81, 84, 86, 97, 103, 106, 107, 108, 109, 110, 116, 122, 123, 126, 127, 129, 131, 132, 134, 136, 143, 147, 156, 179, 191, 192, 194, 202, 203, 204, 206, 207, 208, 210, 212, 214, 217, 220, 226, 227, 230, 233, 235, 236, 237, 241, 248, 249, 250, 251, 253, 255, 256, 265, 266, 267, 290, 292], "conveni": [0, 8, 13, 14, 15, 29, 31, 36, 39, 46, 48, 59, 67, 68, 72, 75, 94, 97, 109, 132, 147, 149, 194, 200, 201, 203, 204, 205, 206, 207, 208, 212, 215, 224, 225, 229, 235, 241, 242, 249, 251, 252, 256, 269, 284, 286], "pleas": [0, 3, 4, 5, 7, 12, 13, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 44, 46, 67, 75, 79, 92, 107, 122, 127, 132, 142, 146, 147, 154, 155, 176, 191, 201, 202, 203, 204, 210, 211, 225, 229, 230, 235, 236, 256, 262, 267, 291, 295], "when": [0, 2, 4, 5, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 27, 31, 33, 34, 35, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 58, 59, 60, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 91, 94, 95, 97, 98, 99, 103, 107, 108, 109, 114, 116, 118, 119, 122, 126, 129, 131, 132, 134, 140, 142, 143, 144, 145, 146, 147, 150, 155, 156, 161, 166, 167, 171, 174, 176, 184, 185, 186, 191, 197, 200, 201, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 218, 219, 223, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 239, 241, 242, 246, 248, 249, 250, 251, 253, 255, 256, 258, 259, 261, 266, 284, 286, 288, 289, 294, 295], "your": [0, 2, 3, 4, 5, 8, 12, 13, 15, 23, 27, 28, 29, 30, 32, 34, 35, 36, 38, 42, 67, 68, 94, 95, 103, 108, 109, 118, 122, 126, 144, 146, 201, 203, 217, 224, 229, 233, 236, 237, 255, 256, 284, 288, 290, 291, 293, 294], "work": [0, 2, 3, 4, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 27, 33, 38, 41, 43, 46, 47, 48, 50, 58, 59, 60, 67, 68, 71, 75, 92, 94, 96, 97, 98, 100, 103, 104, 107, 109, 122, 126, 132, 134, 143, 147, 149, 162, 166, 171, 175, 176, 177, 178, 181, 184, 194, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 217, 224, 225, 226, 227, 229, 230, 233, 235, 236, 237, 243, 248, 249, 250, 252, 255, 256, 257, 258, 266, 267, 286, 287, 288, 289, 290, 293, 294], "also": [0, 2, 3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 50, 56, 58, 59, 66, 68, 69, 71, 72, 73, 74, 75, 79, 83, 85, 87, 89, 90, 92, 94, 96, 97, 98, 101, 103, 104, 107, 108, 109, 110, 111, 114, 115, 116, 118, 122, 123, 124, 126, 127, 129, 131, 132, 134, 135, 136, 137, 140, 143, 144, 145, 146, 147, 149, 150, 151, 155, 165, 166, 168, 172, 176, 181, 182, 185, 186, 187, 191, 192, 194, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 246, 248, 249, 250, 251, 252, 253, 256, 258, 262, 265, 266, 267, 268, 269, 271, 272, 283, 284, 286, 288, 289, 290, 293, 294, 295], "consid": [0, 3, 5, 12, 13, 14, 15, 18, 21, 22, 23, 25, 36, 40, 44, 47, 48, 56, 59, 62, 66, 67, 68, 70, 71, 72, 73, 75, 77, 79, 83, 91, 92, 94, 95, 96, 97, 98, 100, 103, 107, 118, 122, 123, 129, 133, 144, 150, 172, 179, 182, 186, 187, 193, 197, 198, 200, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 220, 224, 229, 230, 233, 234, 235, 236, 237, 248, 250, 255, 265, 267, 269, 271, 272, 286, 290, 294], "contribut": [0, 2, 3, 4, 5, 9, 10, 12, 38, 83, 107, 127, 137, 140, 207, 210, 212, 233, 272, 291], "all": [0, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 32, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 92, 94, 96, 97, 98, 99, 100, 103, 106, 107, 108, 109, 110, 111, 114, 116, 118, 119, 123, 124, 126, 127, 128, 129, 131, 132, 134, 135, 137, 142, 144, 146, 149, 150, 156, 161, 162, 166, 176, 178, 179, 180, 182, 184, 185, 186, 187, 189, 190, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 241, 243, 244, 246, 248, 249, 250, 251, 253, 255, 256, 258, 262, 264, 266, 268, 269, 270, 271, 273, 283, 284, 286, 288, 289, 290, 293, 294, 295], "chang": [0, 4, 5, 7, 8, 12, 14, 15, 21, 38, 47, 48, 49, 58, 59, 63, 66, 67, 68, 71, 72, 73, 75, 81, 82, 92, 94, 97, 103, 107, 109, 110, 112, 114, 118, 126, 129, 131, 132, 134, 139, 156, 167, 177, 187, 188, 191, 198, 200, 201, 202, 203, 204, 205, 206, 210, 213, 214, 217, 224, 225, 226, 227, 229, 232, 233, 235, 236, 237, 238, 248, 255, 256, 267, 269, 283, 286, 289, 293], "back": [0, 23, 30, 31, 33, 47, 48, 63, 66, 67, 68, 73, 75, 82, 83, 89, 91, 92, 94, 95, 98, 107, 108, 118, 176, 197, 200, 207, 212, 213, 215, 217, 227, 233, 235, 238, 239], "we": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 15, 19, 21, 22, 23, 27, 28, 29, 30, 32, 34, 35, 36, 41, 42, 43, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 75, 80, 85, 90, 91, 92, 94, 95, 96, 97, 98, 103, 104, 106, 107, 118, 121, 122, 123, 124, 126, 127, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 154, 157, 165, 168, 171, 172, 174, 175, 176, 177, 178, 179, 181, 182, 184, 185, 187, 191, 192, 194, 196, 198, 200, 201, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 224, 225, 227, 229, 230, 232, 233, 234, 235, 237, 239, 241, 243, 248, 249, 250, 252, 253, 255, 256, 262, 266, 267, 268, 269, 271, 272, 283, 284, 286, 288, 289, 290, 293, 294, 295], "can": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 26, 28, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 118, 120, 122, 123, 124, 126, 127, 128, 129, 131, 132, 135, 136, 137, 140, 142, 143, 144, 145, 146, 147, 149, 150, 154, 155, 156, 161, 163, 166, 170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 246, 248, 249, 250, 252, 253, 255, 256, 258, 265, 266, 267, 268, 269, 271, 272, 283, 284, 286, 288, 289, 290, 292, 293, 294, 295], "incorpor": [0, 2, 19, 205, 229], "u": [0, 8, 9, 15, 19, 21, 22, 23, 25, 31, 40, 46, 47, 48, 58, 63, 66, 67, 68, 70, 81, 84, 89, 92, 94, 100, 103, 107, 123, 126, 127, 128, 131, 132, 134, 136, 139, 142, 143, 144, 146, 149, 150, 154, 155, 166, 171, 177, 187, 191, 192, 196, 198, 200, 202, 203, 204, 205, 206, 210, 212, 213, 216, 217, 224, 227, 229, 230, 233, 234, 235, 236, 237, 242, 256, 269, 286, 288, 289, 290], "benefit": [0, 2, 23, 29, 48, 122, 146, 197, 206], "end": [0, 2, 4, 7, 11, 12, 13, 15, 19, 21, 22, 23, 25, 28, 32, 34, 40, 46, 47, 48, 57, 58, 63, 65, 66, 67, 68, 72, 73, 75, 77, 79, 83, 92, 95, 97, 98, 100, 103, 107, 109, 110, 111, 114, 131, 134, 136, 139, 144, 145, 146, 187, 191, 192, 197, 198, 201, 202, 206, 210, 217, 220, 223, 225, 226, 230, 233, 234, 235, 236, 237, 238, 239, 248, 250, 251, 253, 255, 258, 269, 284, 288, 290, 294], "develop": [0, 3, 4, 5, 6, 10, 14, 19, 21, 23, 37, 46, 49, 65, 109, 112, 149, 186, 203, 204, 207, 210, 235, 236, 288, 291], "team": [0, 3, 11], "member": [0, 4, 13, 21, 27, 47, 56, 58, 68, 90, 112, 114, 204, 225, 242], "list": [0, 2, 3, 4, 5, 9, 11, 12, 16, 21, 30, 31, 32, 33, 34, 35, 36, 38, 40, 43, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 92, 94, 95, 96, 97, 98, 100, 103, 106, 107, 108, 109, 110, 118, 123, 126, 127, 131, 134, 136, 139, 143, 144, 145, 149, 150, 155, 166, 168, 171, 172, 176, 177, 179, 180, 182, 184, 192, 196, 201, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 241, 242, 243, 246, 248, 249, 250, 251, 252, 253, 255, 256, 258, 283, 287, 288, 290, 293, 294, 295], "github": [0, 2, 3, 5, 7, 8, 10, 11, 13, 31, 35, 38, 46, 67, 71, 83, 94, 103, 186, 225, 236, 290], "found": [0, 2, 3, 4, 5, 8, 11, 12, 21, 22, 27, 31, 46, 49, 50, 58, 59, 61, 63, 65, 67, 68, 69, 77, 78, 83, 92, 94, 103, 107, 118, 124, 126, 127, 128, 146, 149, 186, 200, 204, 205, 206, 207, 212, 213, 214, 217, 219, 220, 223, 224, 227, 230, 233, 234, 235, 236, 237, 241, 255, 256, 258, 259, 293], "zotero": 0, "start": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 33, 37, 38, 47, 48, 50, 51, 56, 57, 58, 59, 63, 66, 67, 68, 69, 75, 97, 98, 100, 103, 106, 107, 108, 110, 111, 114, 132, 134, 144, 145, 177, 178, 181, 185, 200, 201, 203, 207, 210, 212, 213, 217, 220, 223, 225, 226, 227, 230, 233, 235, 236, 237, 238, 241, 248, 249, 255, 257, 258, 268, 282, 283, 286, 288], "sympi": [1, 2, 3, 5, 6, 10, 11, 12, 14, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 267, 268, 270, 271, 272, 273, 277, 279, 280, 282, 284, 286, 287, 289, 290, 291, 292, 293, 294, 295], "mode": [1, 8, 27, 67, 95, 109, 154, 177, 197, 213, 217, 248, 259], "set": [1, 2, 3, 4, 5, 7, 8, 11, 12, 14, 15, 17, 19, 20, 21, 22, 27, 29, 30, 36, 39, 40, 42, 46, 47, 48, 49, 50, 55, 56, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 80, 82, 84, 85, 86, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 118, 122, 126, 127, 128, 131, 132, 134, 135, 136, 141, 143, 144, 145, 146, 149, 150, 166, 172, 177, 182, 184, 187, 189, 190, 191, 192, 194, 196, 197, 198, 200, 203, 204, 205, 206, 207, 210, 212, 213, 216, 217, 218, 219, 224, 226, 227, 229, 230, 232, 233, 234, 235, 237, 241, 242, 243, 246, 248, 249, 250, 251, 255, 256, 262, 265, 267, 273, 276, 283, 285, 294], "sympy_debug": [1, 94, 258], "variabl": [1, 2, 4, 5, 11, 12, 13, 14, 17, 19, 22, 23, 25, 27, 28, 30, 31, 33, 35, 39, 40, 41, 43, 44, 46, 48, 49, 62, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 84, 86, 92, 94, 95, 97, 98, 103, 109, 110, 111, 114, 116, 118, 128, 131, 132, 139, 141, 149, 150, 156, 171, 176, 180, 182, 185, 191, 192, 194, 198, 205, 206, 207, 208, 210, 212, 213, 214, 217, 218, 223, 224, 229, 230, 232, 233, 234, 235, 236, 244, 248, 250, 251, 252, 256, 262, 265, 266, 268, 269, 271, 284, 286, 288, 290, 295], "For": [1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 18, 21, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 81, 82, 85, 88, 90, 91, 92, 96, 97, 98, 103, 107, 108, 109, 110, 111, 112, 114, 118, 120, 124, 126, 127, 128, 131, 132, 136, 142, 143, 144, 145, 146, 147, 149, 151, 165, 166, 171, 175, 177, 179, 180, 181, 182, 184, 186, 187, 188, 191, 192, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 229, 230, 232, 233, 235, 236, 237, 238, 241, 242, 243, 244, 248, 249, 250, 252, 253, 255, 256, 259, 260, 262, 264, 267, 269, 271, 272, 283, 284, 286, 289, 290, 294, 295], "instanc": [1, 3, 4, 5, 12, 13, 14, 18, 21, 22, 23, 41, 42, 43, 45, 47, 48, 50, 58, 60, 62, 67, 69, 71, 72, 73, 75, 80, 83, 84, 85, 90, 91, 94, 95, 98, 100, 103, 107, 109, 110, 119, 123, 127, 131, 132, 150, 155, 162, 166, 172, 176, 177, 179, 181, 182, 192, 194, 197, 198, 203, 206, 207, 208, 212, 213, 214, 215, 217, 225, 227, 229, 233, 235, 236, 237, 241, 242, 243, 248, 249, 250, 252, 255, 256, 262, 264, 265, 266, 267, 269, 271, 283, 284, 289, 294, 295], "unix": [1, 248, 249], "would": [1, 3, 4, 5, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 28, 31, 33, 38, 47, 48, 49, 56, 58, 59, 66, 67, 68, 72, 73, 79, 83, 92, 94, 98, 103, 107, 109, 110, 118, 119, 120, 122, 124, 126, 132, 136, 146, 149, 177, 179, 182, 187, 191, 192, 198, 200, 203, 206, 207, 208, 210, 213, 214, 216, 217, 218, 220, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 239, 241, 242, 248, 250, 252, 255, 256, 258, 259, 267, 268, 269, 271, 283, 284, 286, 288, 289, 290, 293, 294, 295], "do": [1, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 24, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 42, 43, 44, 46, 47, 48, 49, 50, 59, 63, 66, 67, 68, 69, 70, 73, 75, 77, 79, 82, 83, 86, 92, 94, 95, 97, 98, 100, 101, 103, 104, 107, 108, 115, 118, 122, 126, 127, 131, 132, 133, 135, 136, 140, 143, 144, 147, 149, 154, 157, 162, 166, 171, 174, 176, 178, 184, 186, 187, 190, 193, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 218, 220, 224, 225, 226, 227, 229, 230, 233, 234, 235, 239, 242, 243, 246, 248, 249, 251, 253, 255, 256, 258, 265, 267, 268, 269, 271, 283, 284, 286, 287, 288, 289, 290, 292, 294], "true": [1, 2, 4, 12, 13, 14, 15, 17, 18, 21, 22, 23, 25, 27, 29, 30, 31, 32, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 92, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 116, 118, 119, 120, 121, 122, 124, 126, 127, 128, 129, 131, 132, 136, 149, 153, 154, 163, 166, 167, 174, 176, 177, 180, 181, 182, 185, 191, 192, 193, 194, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 246, 248, 249, 250, 251, 253, 255, 256, 258, 262, 265, 266, 267, 268, 269, 272, 283, 284, 286, 288, 289, 290, 293, 294, 295], "bin": [1, 2, 4, 8, 9, 11, 12, 95, 217, 248, 255], "isympi": [1, 2, 14, 15, 95], "window": [1, 9, 11, 258], "now": [1, 2, 5, 8, 9, 11, 12, 13, 15, 19, 21, 22, 23, 27, 38, 47, 48, 59, 67, 68, 72, 75, 78, 83, 84, 89, 91, 92, 96, 103, 107, 118, 123, 126, 131, 132, 135, 137, 140, 142, 149, 150, 185, 187, 192, 197, 200, 201, 203, 204, 205, 207, 210, 213, 214, 218, 225, 226, 227, 229, 230, 233, 235, 236, 237, 238, 243, 248, 249, 256, 267, 268, 286, 288, 289, 294, 295], "just": [1, 3, 4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 29, 31, 34, 38, 44, 47, 48, 58, 65, 67, 68, 69, 73, 90, 92, 94, 95, 96, 97, 103, 107, 108, 120, 122, 123, 132, 136, 140, 146, 147, 149, 162, 167, 172, 182, 187, 191, 197, 198, 200, 203, 204, 206, 207, 208, 210, 212, 216, 217, 224, 225, 226, 227, 229, 233, 236, 238, 246, 248, 250, 251, 253, 268, 269, 271, 283, 284, 286, 287, 288, 289, 290, 294, 295], "limit": [1, 3, 13, 15, 25, 31, 32, 36, 38, 44, 46, 48, 66, 67, 69, 71, 72, 73, 75, 76, 79, 87, 89, 94, 95, 97, 103, 107, 116, 147, 171, 177, 180, 197, 203, 208, 210, 213, 214, 217, 220, 221, 223, 225, 229, 230, 232, 233, 234, 235, 237, 242, 249, 252, 255, 256, 258, 261, 262, 272, 274, 280, 285, 286, 288, 290], "function": [1, 2, 3, 5, 7, 11, 14, 17, 18, 19, 21, 22, 24, 25, 28, 30, 32, 35, 37, 41, 42, 43, 45, 46, 47, 49, 50, 58, 59, 62, 63, 65, 68, 69, 70, 71, 72, 76, 77, 78, 79, 84, 87, 88, 91, 93, 94, 95, 96, 98, 100, 102, 106, 108, 110, 113, 114, 115, 116, 118, 119, 120, 124, 125, 126, 130, 131, 132, 135, 136, 137, 138, 142, 144, 145, 149, 154, 155, 156, 157, 161, 166, 167, 168, 171, 176, 177, 178, 179, 180, 181, 182, 185, 186, 191, 192, 195, 196, 197, 199, 201, 202, 204, 206, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 231, 232, 235, 236, 237, 239, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 267, 268, 270, 271, 272, 273, 274, 277, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 292, 295], "get": [1, 3, 4, 5, 8, 11, 12, 13, 18, 19, 21, 22, 23, 31, 33, 34, 35, 38, 39, 42, 43, 46, 47, 48, 50, 51, 56, 57, 59, 60, 62, 63, 66, 67, 68, 69, 71, 72, 73, 75, 80, 90, 92, 94, 96, 100, 103, 107, 109, 110, 116, 118, 121, 127, 132, 135, 136, 144, 145, 146, 147, 149, 154, 155, 162, 166, 171, 176, 177, 178, 179, 184, 186, 187, 201, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 219, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 239, 243, 244, 249, 255, 256, 257, 259, 262, 266, 283, 286, 288, 289, 290, 293, 294, 295], "nice": [1, 4, 9, 38, 67, 79, 103, 107, 132, 146, 149, 203, 217, 227, 258, 289], "print": [1, 3, 4, 5, 7, 11, 12, 14, 15, 19, 21, 22, 25, 27, 30, 31, 33, 38, 41, 42, 43, 44, 46, 47, 49, 50, 51, 56, 58, 59, 66, 67, 68, 71, 72, 73, 75, 94, 96, 97, 100, 103, 104, 107, 108, 109, 110, 111, 118, 125, 127, 131, 132, 134, 142, 148, 154, 162, 175, 176, 180, 182, 192, 195, 199, 201, 203, 206, 207, 208, 210, 212, 213, 223, 224, 226, 227, 229, 233, 235, 242, 244, 248, 250, 255, 256, 258, 262, 266, 273, 279, 281, 284, 285, 286, 287, 288, 289, 290, 294], "tree": [1, 7, 13, 14, 18, 58, 61, 67, 109, 124, 132, 174, 177, 192, 213, 224, 226, 229, 236, 239, 241, 252, 255, 258, 285], "which": [1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 25, 27, 28, 30, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 80, 81, 82, 83, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 103, 106, 107, 109, 110, 111, 112, 114, 115, 116, 118, 119, 120, 122, 123, 124, 126, 127, 128, 129, 131, 132, 134, 135, 137, 140, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 155, 156, 168, 171, 177, 178, 179, 180, 182, 186, 187, 188, 191, 192, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 218, 219, 220, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 241, 243, 248, 249, 250, 251, 252, 253, 255, 256, 258, 262, 264, 267, 271, 272, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295], "veri": [1, 2, 3, 4, 11, 12, 13, 14, 15, 17, 18, 21, 23, 27, 48, 63, 67, 68, 71, 72, 77, 79, 85, 89, 92, 94, 97, 103, 107, 118, 122, 132, 136, 149, 154, 187, 200, 201, 204, 206, 207, 210, 212, 213, 214, 216, 217, 218, 224, 225, 226, 227, 229, 230, 233, 235, 236, 237, 248, 249, 250, 256, 283, 286, 289, 294], "There": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 18, 21, 22, 23, 27, 30, 31, 35, 48, 49, 58, 59, 60, 61, 64, 66, 67, 68, 71, 72, 75, 91, 92, 94, 95, 96, 97, 100, 103, 107, 110, 111, 114, 118, 122, 131, 142, 144, 146, 147, 155, 172, 177, 192, 197, 200, 201, 203, 207, 208, 209, 210, 212, 213, 214, 217, 218, 219, 225, 226, 227, 229, 230, 233, 235, 236, 237, 239, 242, 251, 252, 255, 256, 258, 267, 283, 284, 286, 288, 289, 293, 294], "sever": [2, 3, 4, 11, 12, 13, 14, 18, 21, 23, 27, 31, 38, 48, 52, 58, 59, 66, 67, 71, 72, 74, 75, 79, 92, 94, 107, 112, 124, 127, 128, 143, 187, 189, 203, 205, 207, 210, 212, 216, 217, 218, 224, 225, 233, 237, 248, 250, 260, 273, 286, 290, 293], "packag": [2, 7, 8, 9, 11, 12, 26, 28, 32, 33, 38, 95, 108, 109, 115, 142, 149, 197, 217, 248, 259, 268, 269, 288], "instal": [2, 5, 12, 14, 15, 71, 108, 207, 208, 217, 249, 256, 287, 293], "enabl": [2, 5, 9, 14, 23, 38, 67, 94, 95, 107, 111, 132, 134, 182, 192, 197, 217, 233, 237, 248, 253, 256, 290, 293, 294], "certain": [2, 5, 12, 14, 23, 36, 38, 45, 47, 48, 50, 58, 65, 67, 71, 75, 83, 92, 94, 107, 109, 131, 146, 192, 193, 204, 207, 210, 212, 217, 218, 224, 227, 229, 230, 233, 235, 236, 237, 239, 250, 251, 256, 262, 265, 271, 294], "most": [2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 27, 29, 31, 32, 33, 34, 35, 36, 38, 41, 42, 43, 46, 47, 48, 49, 58, 59, 66, 67, 68, 71, 73, 77, 79, 94, 97, 98, 99, 100, 101, 103, 105, 106, 107, 108, 109, 118, 122, 126, 127, 132, 140, 143, 146, 147, 150, 184, 186, 191, 192, 196, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 224, 225, 227, 230, 233, 234, 235, 236, 237, 246, 249, 250, 251, 252, 253, 255, 256, 258, 265, 267, 283, 286, 288, 289, 290, 292, 293, 294], "contributor": [2, 5, 6, 7, 8, 11, 13, 23], "need": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 42, 43, 46, 47, 48, 52, 58, 59, 63, 65, 66, 67, 68, 69, 72, 73, 75, 78, 82, 83, 90, 91, 92, 94, 95, 97, 98, 103, 107, 108, 109, 110, 111, 114, 118, 122, 127, 129, 131, 132, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 150, 151, 162, 166, 174, 180, 185, 191, 192, 197, 200, 201, 204, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 224, 225, 227, 229, 230, 232, 233, 235, 236, 237, 241, 242, 243, 244, 246, 249, 250, 251, 252, 253, 255, 258, 262, 266, 268, 269, 272, 283, 284, 286, 289, 290, 292, 294], "ani": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 27, 29, 30, 31, 34, 38, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 65, 66, 67, 68, 69, 71, 72, 73, 75, 77, 78, 79, 82, 83, 84, 92, 94, 95, 97, 98, 101, 103, 104, 107, 109, 110, 111, 114, 118, 120, 123, 126, 127, 128, 129, 131, 132, 142, 145, 146, 147, 150, 151, 155, 168, 171, 176, 177, 180, 182, 184, 187, 192, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 217, 218, 223, 224, 225, 226, 227, 229, 230, 233, 234, 235, 237, 239, 242, 243, 248, 249, 251, 252, 253, 255, 256, 262, 266, 267, 268, 269, 271, 272, 283, 284, 286, 289, 290, 293, 294, 295], "mention": [2, 3, 4, 23, 27, 34, 58, 92, 94, 112, 118, 134, 150, 151, 198, 227, 230, 233, 237, 266, 267, 268, 269, 290], "below": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 15, 21, 23, 25, 27, 31, 34, 35, 36, 38, 46, 47, 48, 57, 58, 59, 67, 68, 72, 74, 75, 76, 77, 83, 84, 90, 92, 94, 98, 103, 106, 107, 109, 110, 111, 112, 118, 123, 126, 127, 128, 129, 131, 132, 134, 136, 137, 138, 143, 144, 145, 146, 147, 149, 176, 182, 187, 192, 201, 202, 203, 204, 206, 213, 217, 218, 220, 226, 229, 230, 232, 233, 234, 235, 236, 237, 248, 250, 255, 256, 258, 267, 269, 272, 273, 290, 294], "except": [2, 3, 4, 11, 13, 14, 15, 19, 21, 22, 23, 32, 36, 46, 48, 58, 59, 67, 68, 71, 72, 73, 75, 92, 94, 107, 140, 186, 188, 202, 204, 206, 207, 208, 212, 213, 214, 215, 217, 226, 229, 230, 233, 234, 236, 241, 246, 248, 250, 251, 254, 255, 256, 266, 269, 281, 283, 286, 289, 290], "unless": [2, 4, 11, 12, 14, 21, 23, 41, 43, 46, 48, 58, 66, 67, 68, 72, 75, 82, 83, 92, 103, 106, 155, 200, 201, 205, 206, 207, 212, 213, 217, 222, 225, 226, 233, 235, 248, 252, 255, 256, 258, 262, 271, 284, 290, 294], "thei": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 21, 22, 23, 27, 32, 34, 35, 36, 38, 44, 47, 48, 49, 55, 57, 58, 59, 65, 66, 67, 68, 69, 72, 73, 75, 77, 80, 81, 82, 83, 84, 89, 92, 94, 95, 97, 98, 100, 101, 103, 106, 107, 109, 122, 126, 127, 129, 131, 132, 134, 140, 142, 144, 145, 146, 149, 150, 156, 161, 166, 171, 174, 179, 184, 185, 187, 188, 192, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 217, 218, 223, 224, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 239, 243, 246, 248, 250, 252, 255, 256, 258, 262, 269, 271, 284, 286, 287, 288, 289, 290, 294], "intend": [2, 3, 4, 7, 9, 11, 12, 13, 17, 21, 67, 68, 78, 87, 92, 107, 109, 124, 129, 177, 206, 207, 208, 212, 215, 230, 233, 234, 246, 251, 258, 283], "part": [2, 3, 4, 5, 7, 11, 12, 13, 14, 21, 22, 23, 27, 40, 45, 58, 59, 66, 67, 68, 72, 73, 75, 83, 90, 92, 94, 97, 98, 100, 107, 118, 122, 123, 126, 127, 131, 132, 134, 140, 142, 143, 147, 149, 166, 178, 182, 191, 201, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 218, 225, 227, 229, 230, 233, 235, 248, 250, 252, 255, 284, 289, 294], "those": [2, 4, 11, 12, 13, 14, 15, 17, 21, 22, 27, 31, 35, 36, 39, 44, 47, 48, 49, 50, 58, 59, 65, 66, 67, 68, 71, 80, 81, 92, 94, 97, 103, 106, 107, 114, 122, 126, 127, 131, 134, 140, 143, 155, 179, 191, 194, 197, 200, 201, 203, 206, 207, 208, 210, 212, 213, 215, 216, 217, 223, 225, 229, 233, 234, 235, 236, 237, 243, 246, 248, 252, 255, 262, 265, 286, 288, 294], "everi": [2, 3, 4, 7, 11, 12, 14, 21, 23, 27, 31, 37, 42, 43, 44, 47, 53, 55, 58, 59, 67, 68, 82, 94, 96, 98, 103, 107, 118, 147, 186, 198, 200, 201, 203, 204, 205, 207, 208, 210, 212, 217, 222, 225, 227, 229, 230, 233, 236, 237, 239, 266, 269, 271, 287, 289, 290, 294], "conda": [2, 8, 9, 38, 109], "via": [2, 8, 9, 14, 19, 23, 32, 36, 38, 41, 42, 43, 58, 59, 67, 72, 75, 92, 94, 97, 103, 107, 108, 109, 110, 192, 202, 204, 208, 210, 212, 213, 216, 217, 236, 246, 249, 250, 262, 271, 289], "forg": [2, 8, 109], "pip": [2, 8, 9, 12, 38, 109], "doe": [2, 4, 5, 7, 9, 11, 12, 13, 14, 18, 21, 22, 23, 27, 28, 34, 35, 36, 37, 38, 39, 42, 43, 46, 47, 48, 49, 58, 59, 63, 65, 66, 67, 68, 69, 71, 73, 75, 77, 78, 81, 83, 92, 94, 97, 98, 103, 106, 107, 109, 120, 122, 124, 127, 128, 131, 132, 134, 139, 143, 147, 162, 166, 172, 176, 178, 181, 200, 201, 203, 205, 206, 207, 208, 210, 212, 213, 214, 217, 224, 225, 226, 227, 229, 230, 232, 233, 235, 238, 242, 243, 246, 248, 250, 252, 255, 256, 258, 262, 264, 267, 283, 284, 286, 289, 290, 293, 294, 295], "themselv": [2, 5, 12, 13, 23, 44, 47, 59, 63, 65, 67, 94, 107, 142, 143, 207, 208, 212, 223, 237, 243, 252, 255, 258, 294], "incomplet": [2, 4, 5, 67, 72, 75, 205, 207, 213, 217, 219, 235, 236], "main": [2, 4, 5, 7, 9, 11, 13, 15, 33, 43, 44, 48, 67, 73, 92, 98, 103, 106, 132, 140, 180, 197, 201, 203, 204, 206, 208, 217, 224, 233, 236, 242, 249, 294, 295], "webpag": [2, 5], "more": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 27, 29, 30, 31, 32, 33, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 57, 58, 59, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 89, 92, 94, 97, 98, 100, 101, 103, 104, 106, 107, 108, 109, 116, 118, 122, 126, 127, 128, 131, 132, 134, 136, 138, 140, 142, 144, 145, 146, 147, 149, 151, 154, 166, 170, 171, 176, 179, 180, 181, 182, 187, 191, 192, 196, 197, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 226, 227, 229, 230, 233, 234, 235, 236, 237, 248, 250, 251, 252, 255, 256, 258, 262, 266, 270, 277, 279, 283, 284, 286, 287, 289, 290, 292, 293, 294, 295], "complet": [2, 3, 4, 9, 11, 12, 13, 14, 15, 21, 31, 34, 43, 48, 67, 68, 69, 71, 73, 74, 75, 83, 92, 94, 103, 107, 122, 127, 128, 136, 142, 149, 168, 171, 172, 201, 206, 210, 212, 213, 214, 218, 224, 229, 230, 233, 236, 237, 248, 250, 258, 288, 289, 294], "io": [2, 5, 95, 217, 256], "ha": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 19, 21, 22, 23, 27, 28, 29, 31, 32, 33, 34, 35, 36, 44, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 79, 80, 82, 83, 84, 90, 92, 94, 96, 97, 98, 100, 103, 104, 106, 107, 108, 110, 111, 114, 118, 119, 123, 126, 127, 131, 132, 134, 136, 142, 147, 149, 155, 156, 166, 167, 176, 179, 184, 187, 191, 192, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 222, 224, 225, 227, 229, 230, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 248, 249, 250, 251, 252, 253, 255, 258, 262, 264, 266, 267, 269, 271, 272, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "one": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 37, 39, 40, 43, 44, 46, 47, 48, 50, 51, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 75, 77, 78, 79, 80, 81, 83, 84, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 102, 103, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 118, 119, 122, 123, 126, 127, 129, 131, 132, 133, 136, 146, 147, 149, 151, 154, 155, 156, 162, 167, 176, 180, 182, 184, 185, 186, 187, 190, 191, 192, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 241, 243, 244, 248, 249, 250, 252, 255, 256, 258, 262, 267, 269, 271, 282, 283, 284, 286, 288, 289, 290, 292, 293, 294], "mpmath": [2, 8, 9, 12, 14, 23, 32, 33, 48, 72, 75, 103, 108, 149, 207, 208, 217, 225, 235, 251, 256], "arbitrari": [2, 4, 13, 14, 15, 21, 23, 27, 31, 33, 35, 36, 46, 52, 59, 60, 66, 67, 68, 71, 72, 75, 78, 79, 81, 97, 98, 103, 111, 128, 143, 147, 168, 171, 201, 203, 204, 207, 208, 210, 212, 214, 229, 233, 234, 235, 243, 253, 256, 262, 264, 283, 284, 289, 294, 295], "precis": [2, 3, 4, 14, 15, 21, 22, 23, 27, 31, 48, 58, 67, 70, 71, 72, 75, 83, 94, 103, 107, 116, 147, 202, 204, 207, 208, 212, 213, 214, 217, 224, 229, 230, 235, 236, 249, 250, 258, 283, 294], "arithmet": [2, 48, 67, 68, 71, 98, 103, 107, 171, 178, 202, 203, 204, 206, 207, 208, 210, 211, 215, 218], "under": [2, 3, 4, 8, 12, 14, 15, 21, 22, 42, 43, 45, 46, 48, 49, 57, 58, 63, 65, 75, 85, 92, 94, 96, 97, 103, 107, 109, 110, 111, 151, 177, 202, 204, 205, 212, 213, 217, 224, 225, 227, 230, 233, 235, 236, 237, 243, 246, 288, 294], "hood": [2, 14], "whenev": [2, 3, 12, 13, 14, 15, 23, 65, 92, 94, 103, 189, 203, 204, 205, 208, 219, 224, 227, 237, 284, 286, 289], "calcul": [2, 15, 19, 21, 33, 34, 40, 46, 49, 59, 65, 67, 68, 69, 70, 71, 73, 75, 77, 79, 80, 81, 83, 84, 94, 98, 100, 103, 107, 110, 111, 120, 122, 123, 126, 127, 131, 134, 135, 136, 151, 154, 155, 158, 161, 177, 178, 179, 180, 182, 183, 191, 192, 193, 194, 196, 198, 200, 201, 202, 203, 204, 206, 207, 208, 210, 212, 213, 214, 219, 224, 233, 237, 241, 249, 250, 256, 262, 265, 269, 271, 290, 293], "float": [2, 12, 14, 21, 23, 29, 48, 58, 67, 73, 75, 82, 84, 94, 95, 98, 103, 107, 109, 116, 118, 149, 155, 197, 203, 206, 207, 208, 213, 217, 229, 235, 237, 248, 256, 258, 283, 286], "point": [2, 3, 4, 5, 12, 14, 15, 19, 21, 31, 33, 34, 38, 40, 46, 48, 49, 58, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 89, 90, 91, 92, 94, 103, 107, 110, 111, 112, 114, 116, 123, 126, 127, 128, 129, 131, 132, 134, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 162, 184, 187, 193, 196, 198, 201, 203, 204, 206, 207, 208, 210, 212, 213, 217, 219, 223, 224, 225, 233, 235, 236, 237, 249, 252, 255, 256, 258, 262, 265, 267, 268, 269, 271, 272, 280, 283, 284, 286, 289], "valu": [2, 3, 4, 5, 12, 13, 14, 15, 19, 21, 23, 25, 27, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 58, 59, 63, 66, 67, 68, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 92, 94, 95, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 118, 120, 123, 126, 127, 128, 129, 131, 132, 134, 146, 149, 151, 155, 158, 161, 166, 168, 171, 174, 176, 177, 178, 179, 182, 183, 185, 187, 192, 193, 196, 198, 200, 201, 202, 203, 205, 206, 207, 208, 210, 212, 213, 214, 215, 217, 218, 223, 224, 225, 226, 229, 230, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 248, 250, 251, 255, 256, 258, 265, 267, 269, 272, 284, 286, 289], "g": [2, 3, 5, 8, 9, 11, 12, 13, 15, 21, 22, 23, 25, 33, 34, 36, 46, 47, 48, 49, 52, 55, 57, 58, 59, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 79, 83, 84, 85, 90, 93, 94, 96, 97, 98, 103, 107, 109, 110, 114, 118, 119, 123, 126, 128, 129, 131, 132, 134, 136, 137, 139, 140, 141, 146, 147, 149, 150, 162, 166, 171, 177, 179, 180, 182, 185, 187, 188, 192, 198, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 229, 230, 233, 234, 235, 236, 237, 238, 241, 242, 243, 248, 249, 250, 251, 253, 255, 256, 257, 258, 271, 274, 284, 289, 293, 294, 295], "evalf": [2, 4, 14, 15, 21, 27, 33, 36, 48, 66, 71, 72, 73, 75, 86, 89, 90, 98, 103, 109, 132, 134, 149, 164, 208, 213, 217, 224, 225, 229, 237, 249, 256, 285], "cannot": [2, 3, 4, 5, 12, 13, 14, 15, 18, 22, 23, 27, 30, 33, 38, 41, 42, 43, 44, 45, 46, 48, 59, 64, 66, 67, 69, 71, 73, 77, 79, 80, 82, 84, 89, 94, 96, 99, 101, 103, 105, 107, 109, 118, 177, 185, 187, 200, 201, 203, 208, 210, 212, 213, 214, 217, 224, 225, 229, 230, 232, 233, 235, 236, 237, 238, 246, 248, 249, 250, 255, 259, 262, 264, 288, 289, 290, 294, 295], "without": [2, 3, 4, 5, 11, 12, 13, 14, 15, 21, 23, 25, 38, 42, 44, 45, 48, 66, 67, 68, 69, 71, 75, 92, 94, 95, 98, 100, 103, 118, 119, 126, 132, 138, 140, 145, 146, 182, 186, 187, 191, 192, 193, 200, 203, 206, 207, 210, 213, 217, 219, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 239, 242, 243, 246, 248, 249, 250, 253, 255, 256, 258, 265, 268, 290, 294], "fail": [2, 3, 4, 5, 8, 11, 13, 21, 22, 23, 27, 48, 58, 59, 63, 66, 67, 71, 73, 91, 92, 94, 95, 103, 104, 107, 109, 134, 172, 177, 197, 203, 206, 207, 208, 210, 212, 213, 217, 224, 227, 233, 235, 237, 246, 248, 255, 256, 290], "import": [2, 3, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 129, 131, 132, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 272, 283, 284, 286, 288, 289, 290, 292, 293, 294, 295], "If": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 56, 58, 59, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 92, 94, 95, 96, 97, 98, 100, 103, 104, 106, 107, 108, 109, 110, 116, 118, 119, 121, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 144, 145, 146, 147, 149, 150, 155, 159, 163, 166, 172, 176, 177, 178, 179, 180, 182, 186, 190, 191, 192, 193, 194, 196, 197, 198, 201, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 255, 256, 258, 262, 265, 267, 269, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "error": [2, 3, 4, 5, 8, 11, 12, 13, 17, 21, 22, 29, 30, 31, 32, 33, 34, 36, 39, 46, 48, 56, 59, 66, 67, 68, 73, 77, 82, 92, 94, 103, 106, 107, 109, 127, 131, 132, 201, 202, 205, 206, 207, 208, 210, 214, 217, 219, 225, 233, 234, 235, 236, 237, 248, 249, 250, 253, 255, 258, 262, 283], "importerror": 2, "extern": [2, 38, 67, 95, 109, 114, 116, 134, 142, 197, 207, 208, 218, 225, 229, 237, 248, 249], "doc": [2, 3, 4, 5, 7, 11, 12, 15, 37, 48, 58, 66, 67, 83, 95, 184, 207, 209, 230, 233, 248, 249, 251, 253, 255, 262, 267, 280], "latest": [2, 9, 12, 38, 47, 251, 253, 256], "html": [2, 4, 5, 8, 11, 12, 44, 48, 51, 59, 60, 61, 67, 68, 70, 72, 73, 75, 77, 83, 84, 94, 95, 103, 107, 116, 211, 217, 220, 222, 225, 226, 230, 233, 237, 249, 251, 253, 255, 256, 290], "inform": [2, 3, 4, 5, 7, 8, 9, 11, 14, 15, 18, 21, 22, 27, 36, 37, 43, 44, 47, 48, 49, 53, 58, 59, 65, 67, 68, 72, 75, 79, 92, 94, 96, 100, 103, 108, 111, 123, 124, 126, 127, 129, 131, 132, 134, 142, 143, 144, 146, 147, 149, 150, 177, 182, 187, 192, 197, 201, 203, 207, 212, 213, 217, 218, 224, 227, 229, 230, 235, 236, 237, 241, 242, 243, 248, 249, 250, 251, 252, 262, 267, 269, 294], "mean": [2, 3, 4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 27, 35, 44, 49, 59, 66, 67, 68, 69, 85, 92, 94, 95, 97, 98, 101, 103, 107, 110, 122, 143, 182, 184, 187, 192, 197, 200, 203, 204, 205, 207, 210, 212, 216, 217, 227, 229, 230, 232, 233, 235, 236, 237, 238, 239, 241, 242, 248, 255, 267, 283, 284, 286, 288, 289, 290, 294, 295], "did": [2, 5, 11, 22, 67, 94, 107, 122, 139, 187, 210, 214, 225, 235, 246, 256, 286, 288, 294], "correctli": [2, 3, 4, 5, 8, 11, 12, 13, 22, 23, 46, 71, 92, 95, 103, 132, 134, 146, 217, 224, 230, 233], "explain": [2, 3, 4, 5, 7, 12, 21, 27, 36, 47, 63, 67, 75, 85, 90, 204, 207, 210, 212, 214, 224], "how": [2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 27, 28, 47, 48, 50, 58, 59, 66, 67, 73, 74, 75, 79, 90, 94, 97, 98, 100, 103, 107, 109, 110, 122, 126, 127, 132, 133, 139, 144, 145, 147, 149, 153, 154, 170, 174, 177, 178, 179, 184, 185, 192, 200, 203, 204, 207, 208, 210, 212, 216, 217, 220, 224, 225, 227, 229, 230, 233, 234, 235, 237, 243, 248, 249, 250, 251, 253, 255, 256, 258, 267, 284, 286, 288, 289, 290, 291, 293, 294], "method": [2, 3, 4, 5, 8, 11, 12, 14, 15, 20, 21, 27, 29, 30, 31, 33, 34, 35, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 58, 59, 60, 66, 67, 68, 69, 70, 71, 73, 74, 75, 78, 79, 80, 81, 83, 86, 89, 91, 92, 94, 96, 98, 99, 100, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 122, 125, 126, 128, 129, 131, 132, 135, 137, 138, 142, 143, 147, 148, 149, 156, 159, 161, 163, 171, 172, 177, 179, 182, 184, 186, 189, 190, 191, 192, 194, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 218, 219, 220, 222, 223, 224, 225, 229, 230, 233, 235, 237, 238, 240, 242, 243, 244, 248, 250, 252, 255, 256, 262, 266, 269, 272, 273, 277, 279, 283, 284, 285, 286, 289, 294], "ones": [2, 3, 13, 23, 38, 48, 58, 63, 67, 92, 94, 97, 98, 100, 103, 106, 107, 132, 155, 176, 182, 186, 206, 210, 220, 230, 233, 238, 244, 250, 258, 262, 267, 290, 293], "guid": [2, 6, 7, 8, 9, 11, 14, 16, 23, 32, 38, 47, 67, 74, 132, 146, 217, 230, 232, 233, 235, 236, 243, 287, 291, 292, 295], "automat": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 21, 30, 31, 34, 36, 47, 48, 49, 59, 67, 69, 70, 71, 72, 73, 75, 80, 82, 86, 92, 95, 97, 107, 109, 110, 127, 131, 132, 134, 140, 168, 170, 171, 180, 182, 186, 196, 200, 203, 204, 206, 207, 208, 212, 213, 214, 217, 220, 223, 224, 226, 227, 229, 230, 233, 235, 236, 242, 243, 248, 249, 250, 253, 256, 267, 272, 284, 286, 288, 289, 293, 294, 295], "typic": [2, 3, 12, 13, 14, 23, 63, 73, 92, 107, 118, 123, 129, 133, 147, 201, 203, 205, 210, 213, 214, 227, 249, 250, 267], "manual": [2, 3, 5, 8, 12, 13, 14, 23, 30, 48, 49, 58, 71, 77, 94, 95, 109, 118, 129, 131, 132, 135, 146, 150, 203, 210, 217, 233, 235, 236, 251, 284, 294], "actual": [2, 3, 4, 5, 8, 9, 11, 12, 14, 15, 19, 21, 22, 23, 25, 47, 48, 49, 56, 58, 65, 67, 68, 75, 79, 92, 94, 96, 100, 103, 107, 118, 122, 132, 134, 144, 145, 146, 197, 203, 204, 206, 207, 212, 217, 225, 227, 229, 230, 233, 236, 244, 248, 249, 252, 253, 255, 256, 288], "directli": [2, 3, 4, 11, 12, 13, 14, 15, 19, 21, 22, 23, 27, 38, 42, 43, 46, 47, 48, 58, 66, 67, 69, 73, 78, 98, 100, 103, 107, 131, 132, 165, 168, 180, 185, 192, 196, 203, 204, 206, 207, 208, 212, 213, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 248, 249, 250, 251, 252, 253, 284, 295], "git": [2, 7, 10, 11, 12], "repositori": [2, 5, 9, 38, 230], "vast": [2, 36, 94, 209], "major": [2, 3, 5, 8, 13, 27, 36, 77, 122, 242, 288, 294], "them": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 27, 30, 31, 32, 34, 36, 39, 42, 44, 47, 48, 56, 58, 59, 66, 67, 68, 69, 71, 72, 75, 78, 83, 85, 87, 89, 90, 92, 96, 97, 100, 103, 106, 107, 108, 122, 127, 129, 131, 132, 134, 136, 137, 142, 144, 146, 149, 155, 159, 175, 176, 182, 184, 187, 190, 191, 192, 198, 200, 201, 204, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 218, 224, 225, 226, 227, 229, 230, 233, 235, 236, 238, 239, 248, 250, 252, 255, 265, 283, 284, 286, 288, 289, 294], "few": [2, 3, 8, 12, 13, 14, 21, 30, 36, 44, 57, 59, 67, 68, 94, 95, 107, 108, 134, 142, 185, 191, 197, 200, 201, 204, 212, 217, 225, 226, 227, 233, 236, 237, 250, 255, 294], "wrap": [2, 3, 4, 11, 12, 41, 42, 43, 44, 48, 56, 67, 73, 95, 108, 197, 201, 203, 206, 207, 210, 217, 220, 236, 242, 249, 253, 256, 258, 289], "addition": [2, 4, 11, 13, 67, 144, 180, 201, 210, 217, 237, 246, 253, 266], "some": [2, 3, 4, 7, 8, 9, 11, 12, 14, 15, 19, 21, 22, 23, 25, 27, 30, 31, 32, 33, 35, 36, 38, 39, 40, 44, 47, 48, 49, 50, 55, 58, 59, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 79, 83, 92, 94, 96, 97, 98, 100, 103, 107, 108, 109, 116, 119, 122, 123, 126, 129, 131, 132, 133, 134, 135, 136, 137, 143, 144, 146, 150, 162, 167, 171, 179, 182, 186, 187, 188, 191, 193, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 217, 219, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 237, 243, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 262, 264, 265, 267, 269, 273, 283, 284, 286, 288, 289, 290, 292, 293, 294], "skip": [2, 3, 4, 8, 15, 47, 51, 67, 98, 103, 107, 192, 212, 216, 217, 219, 233, 235, 246, 248, 284, 292, 293], "action": [2, 5, 8, 11, 58, 96, 129, 174, 177, 187, 213, 229, 236], "ci": [2, 5, 9, 11, 12, 75, 92, 217, 293], "pull": [2, 3, 4, 5, 8, 9, 12, 13, 23, 38, 48, 67, 72, 75, 181, 218, 229, 233, 236, 290, 294], "request": [2, 3, 4, 5, 8, 9, 12, 13, 21, 27, 38, 46, 67, 71, 83, 92, 107, 132, 182, 210, 213, 241, 249], "mai": [2, 3, 4, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 44, 46, 47, 48, 49, 50, 58, 59, 60, 66, 67, 68, 69, 71, 72, 73, 75, 77, 79, 80, 82, 83, 84, 92, 94, 95, 97, 98, 99, 103, 104, 106, 107, 109, 114, 124, 127, 128, 131, 132, 136, 142, 146, 168, 177, 182, 183, 184, 186, 189, 192, 196, 198, 200, 203, 204, 205, 206, 208, 210, 212, 216, 217, 218, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 246, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 269, 271, 283, 284, 286, 289, 290, 294, 295], "wish": [2, 4, 11, 15, 23, 34, 38, 48, 67, 68, 71, 92, 107, 177, 191, 201, 252, 256, 284, 288, 290, 295], "local": [2, 11, 12, 39, 41, 42, 43, 67, 69, 92, 109, 139, 141, 194, 204, 210, 235, 248], "improv": [2, 3, 7, 11, 12, 13, 22, 23, 67, 92, 131, 203, 207, 210, 211, 213, 214, 216, 218, 233, 236, 242, 284, 290], "perform": [2, 11, 12, 13, 14, 15, 18, 19, 21, 23, 45, 47, 48, 49, 58, 59, 62, 66, 67, 68, 70, 71, 73, 80, 84, 91, 94, 101, 103, 107, 108, 124, 127, 134, 136, 142, 146, 147, 149, 166, 167, 176, 179, 182, 198, 201, 205, 206, 207, 210, 212, 213, 218, 219, 220, 224, 229, 230, 233, 235, 236, 237, 238, 249, 255, 262, 264, 266, 269, 283, 284, 288, 289, 294], "gmpy2": [2, 207, 208], "wrapper": [2, 13, 14, 23, 42, 44, 48, 59, 67, 75, 103, 146, 194, 197, 206, 207, 210, 217, 224, 233, 236, 237, 249, 253, 255], "gmp": 2, "multipl": [2, 3, 4, 11, 12, 13, 14, 15, 17, 21, 23, 25, 29, 31, 35, 36, 40, 42, 43, 44, 46, 47, 48, 49, 56, 58, 59, 63, 66, 67, 68, 72, 73, 75, 77, 82, 85, 87, 92, 94, 96, 97, 98, 100, 103, 104, 107, 109, 112, 115, 118, 122, 134, 142, 149, 150, 166, 167, 168, 172, 179, 181, 184, 187, 188, 189, 192, 196, 200, 203, 204, 205, 206, 207, 208, 210, 211, 213, 214, 217, 222, 223, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 241, 243, 246, 250, 251, 252, 253, 255, 256, 258, 262, 267, 283, 284, 286, 287, 289, 290, 295], "larg": [2, 3, 4, 7, 11, 12, 15, 21, 27, 32, 58, 59, 67, 68, 77, 92, 94, 106, 107, 122, 128, 146, 149, 162, 187, 191, 202, 206, 207, 208, 210, 213, 216, 217, 218, 224, 227, 229, 237, 242, 249, 256, 258, 265, 283, 288, 294], "integ": [2, 4, 5, 12, 13, 14, 15, 21, 23, 29, 30, 31, 41, 42, 43, 44, 46, 48, 49, 56, 58, 59, 60, 61, 63, 66, 67, 68, 69, 70, 71, 72, 75, 77, 80, 91, 92, 94, 95, 96, 97, 98, 100, 103, 104, 107, 109, 110, 112, 118, 120, 126, 171, 176, 178, 179, 180, 182, 184, 192, 194, 197, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 214, 216, 217, 219, 222, 223, 224, 225, 226, 227, 229, 230, 233, 235, 236, 237, 241, 242, 243, 249, 250, 252, 255, 258, 284, 286, 289, 293, 294], "faster": [2, 11, 21, 27, 32, 33, 48, 52, 67, 75, 98, 107, 108, 122, 124, 127, 128, 146, 206, 207, 208, 210, 212, 213, 214, 218, 220, 224, 229, 230, 233, 234, 236, 249, 252], "than": [2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 27, 29, 31, 32, 33, 34, 35, 36, 39, 40, 44, 48, 49, 50, 52, 58, 59, 60, 66, 67, 68, 71, 72, 73, 75, 76, 81, 82, 83, 85, 89, 92, 94, 96, 97, 98, 100, 103, 104, 106, 107, 108, 109, 114, 116, 118, 122, 127, 131, 132, 136, 139, 156, 162, 176, 179, 180, 182, 191, 201, 202, 205, 206, 207, 208, 210, 213, 214, 215, 217, 220, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 244, 249, 250, 252, 255, 256, 258, 259, 283, 284, 286, 287, 288, 289, 290, 292, 294], "int": [2, 4, 5, 12, 13, 14, 15, 21, 22, 23, 40, 46, 48, 59, 67, 68, 69, 72, 73, 75, 76, 83, 92, 94, 95, 97, 98, 103, 104, 107, 109, 116, 118, 126, 162, 166, 167, 176, 192, 194, 196, 197, 202, 203, 207, 208, 212, 213, 214, 217, 219, 220, 222, 233, 234, 237, 249, 253, 255, 256, 258, 286, 288, 289, 293, 294], "core": [2, 3, 4, 7, 11, 12, 14, 15, 18, 21, 22, 23, 29, 44, 46, 48, 58, 68, 73, 74, 76, 84, 92, 98, 107, 109, 180, 181, 205, 206, 207, 208, 209, 210, 212, 213, 214, 217, 224, 225, 229, 230, 233, 237, 247, 248, 249, 255, 256, 260, 273, 274, 286, 289], "oper": [2, 4, 9, 14, 21, 22, 23, 32, 33, 34, 36, 40, 44, 48, 58, 59, 60, 66, 67, 68, 69, 70, 71, 73, 75, 77, 85, 87, 90, 92, 97, 98, 100, 107, 109, 118, 119, 122, 127, 128, 136, 140, 146, 147, 149, 154, 158, 159, 163, 165, 166, 167, 168, 173, 174, 177, 179, 180, 181, 182, 192, 194, 199, 204, 205, 206, 207, 208, 210, 212, 213, 214, 217, 220, 222, 225, 226, 229, 232, 233, 235, 236, 239, 240, 241, 242, 248, 249, 252, 255, 256, 262, 273, 277, 279, 280, 285, 286, 287, 289, 294], "poli": [2, 14, 27, 50, 66, 67, 68, 72, 73, 75, 76, 83, 89, 94, 98, 100, 103, 107, 149, 204, 205, 209, 210, 212, 213, 214, 216, 219, 232, 233, 235, 236, 248, 280], "refer": [2, 3, 5, 11, 12, 13, 14, 15, 19, 22, 23, 24, 27, 29, 30, 31, 32, 33, 35, 36, 38, 42, 43, 44, 46, 48, 51, 53, 55, 56, 58, 59, 60, 61, 65, 68, 70, 72, 73, 75, 77, 82, 83, 84, 89, 95, 96, 97, 98, 104, 108, 110, 116, 118, 119, 121, 123, 126, 127, 128, 129, 131, 132, 134, 142, 144, 147, 149, 150, 151, 153, 155, 159, 161, 163, 164, 165, 168, 170, 171, 179, 180, 182, 191, 192, 193, 194, 196, 198, 200, 206, 207, 209, 217, 219, 220, 222, 225, 229, 232, 233, 234, 235, 237, 243, 252, 255, 256, 258, 262, 266, 267, 271, 279, 280, 286, 290, 291, 294, 295], "domain": [2, 4, 11, 13, 14, 19, 23, 25, 27, 32, 46, 47, 67, 68, 70, 72, 73, 75, 86, 88, 89, 92, 94, 100, 103, 104, 107, 115, 118, 132, 149, 204, 206, 209, 210, 212, 214, 215, 232, 233, 235, 237, 280, 290, 295], "No": [2, 4, 5, 11, 15, 36, 47, 67, 75, 82, 97, 107, 110, 119, 132, 177, 203, 206, 213, 219, 220, 229, 230, 235, 236, 237, 242, 246, 252, 253, 255, 283, 295], "mani": [2, 3, 4, 7, 12, 14, 15, 17, 19, 21, 22, 23, 27, 28, 29, 31, 33, 34, 36, 38, 46, 47, 48, 49, 55, 58, 63, 67, 68, 69, 71, 72, 73, 75, 79, 92, 94, 97, 98, 103, 107, 108, 127, 128, 132, 134, 142, 145, 146, 149, 166, 182, 190, 201, 204, 206, 207, 208, 210, 212, 213, 221, 224, 225, 227, 229, 230, 233, 234, 235, 236, 237, 241, 250, 255, 283, 284, 286, 287, 288, 289, 293, 294, 295], "integr": [2, 11, 12, 14, 15, 18, 28, 38, 40, 46, 59, 66, 67, 69, 72, 73, 85, 86, 87, 90, 96, 98, 103, 106, 107, 118, 120, 127, 131, 132, 142, 149, 168, 177, 180, 183, 186, 191, 193, 198, 202, 204, 207, 208, 210, 213, 214, 217, 219, 220, 227, 233, 234, 237, 250, 258, 262, 265, 266, 269, 270, 274, 277, 285, 288, 293], "algorithm": [2, 4, 14, 21, 27, 31, 33, 35, 36, 46, 51, 52, 57, 58, 59, 61, 63, 65, 66, 67, 68, 71, 72, 73, 79, 84, 92, 94, 97, 100, 103, 104, 107, 110, 119, 126, 146, 169, 187, 192, 202, 203, 204, 205, 206, 207, 208, 211, 212, 214, 218, 222, 225, 226, 229, 230, 233, 235, 236, 237, 243, 252, 255, 279, 284, 289, 290, 294], "simplif": [2, 14, 15, 21, 25, 41, 43, 45, 46, 48, 67, 69, 72, 73, 92, 98, 103, 109, 124, 132, 146, 149, 166, 182, 192, 213, 218, 228, 229, 233, 235, 236, 273, 274, 283, 285, 287, 288], "collect": [2, 5, 8, 20, 47, 48, 58, 67, 84, 94, 107, 110, 118, 131, 140, 149, 182, 189, 202, 208, 213, 226, 227, 229, 233, 237, 248, 255], "factor": [2, 12, 14, 15, 49, 58, 59, 66, 67, 68, 71, 72, 73, 75, 92, 94, 103, 107, 110, 118, 149, 151, 159, 163, 166, 178, 182, 186, 187, 188, 189, 204, 206, 207, 208, 209, 211, 212, 213, 220, 226, 227, 229, 230, 233, 235, 237, 241, 252, 266, 269, 288, 290], "matric": [2, 4, 14, 20, 21, 44, 48, 67, 68, 94, 104, 106, 118, 126, 127, 128, 132, 136, 146, 149, 151, 154, 155, 157, 165, 166, 176, 181, 192, 201, 202, 206, 212, 217, 218, 225, 227, 229, 230, 233, 235, 236, 238, 250, 251, 279, 285, 287, 288], "thu": [2, 3, 11, 13, 14, 15, 19, 29, 31, 32, 34, 44, 52, 58, 59, 67, 68, 69, 73, 75, 90, 92, 94, 98, 101, 103, 106, 107, 119, 127, 128, 131, 136, 142, 146, 187, 192, 205, 210, 212, 214, 218, 224, 227, 229, 250, 255, 256, 267, 268, 286, 289, 294, 295], "speed": [2, 4, 11, 13, 43, 48, 58, 67, 68, 71, 98, 107, 108, 120, 126, 127, 128, 131, 132, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 149, 150, 153, 156, 186, 191, 192, 196, 201, 202, 214, 217, 218, 224, 229, 233, 249, 252, 255, 289, 290], "up": [2, 3, 7, 8, 9, 11, 12, 13, 14, 19, 21, 22, 23, 34, 38, 43, 46, 48, 50, 58, 59, 61, 67, 68, 69, 71, 72, 73, 75, 76, 83, 84, 88, 92, 94, 95, 97, 98, 103, 107, 108, 110, 120, 122, 129, 131, 134, 135, 139, 141, 146, 147, 149, 150, 162, 177, 179, 196, 202, 203, 204, 206, 207, 208, 212, 214, 217, 218, 219, 224, 226, 227, 229, 230, 233, 234, 235, 236, 249, 250, 251, 252, 253, 256, 285, 286, 289, 290, 292], "becaus": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 21, 22, 23, 27, 30, 31, 32, 33, 34, 35, 36, 38, 39, 44, 48, 59, 66, 67, 68, 73, 79, 83, 84, 92, 94, 97, 101, 103, 107, 109, 126, 131, 132, 136, 162, 170, 182, 184, 186, 187, 200, 203, 204, 206, 207, 208, 210, 212, 213, 214, 216, 217, 220, 224, 227, 229, 230, 233, 234, 235, 236, 246, 248, 249, 251, 255, 256, 258, 266, 284, 286, 288, 289, 290, 293, 294, 295], "make": [2, 3, 4, 5, 8, 9, 12, 13, 14, 15, 17, 19, 21, 22, 23, 27, 32, 33, 35, 39, 42, 43, 44, 46, 48, 49, 57, 58, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 83, 94, 95, 97, 103, 106, 107, 108, 109, 110, 111, 112, 114, 127, 131, 132, 134, 135, 139, 140, 144, 146, 147, 149, 162, 179, 184, 191, 197, 200, 203, 206, 207, 208, 210, 212, 213, 214, 216, 217, 220, 225, 226, 227, 229, 233, 234, 235, 236, 241, 243, 246, 248, 249, 250, 251, 253, 255, 256, 266, 271, 272, 286, 287, 288, 289, 290, 294], "non": [2, 3, 12, 14, 15, 21, 23, 27, 33, 34, 36, 39, 44, 46, 49, 57, 60, 66, 67, 68, 72, 73, 74, 75, 76, 77, 80, 81, 82, 94, 96, 97, 98, 99, 100, 103, 104, 106, 107, 122, 127, 129, 134, 136, 140, 144, 145, 149, 166, 171, 181, 182, 184, 198, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 217, 220, 224, 225, 227, 229, 230, 232, 233, 235, 236, 237, 238, 241, 242, 243, 248, 250, 255, 258, 269, 289, 294, 295], "who": [2, 3, 4, 9, 11, 12, 19, 23, 68, 69, 149, 201, 210, 217, 287], "abl": [2, 3, 4, 11, 12, 14, 19, 21, 23, 30, 34, 47, 48, 58, 63, 67, 68, 69, 78, 86, 94, 100, 103, 107, 115, 132, 144, 146, 147, 149, 150, 204, 206, 207, 208, 213, 214, 233, 236, 248, 266, 288, 293, 295], "better": [2, 3, 4, 8, 11, 12, 13, 14, 15, 21, 22, 23, 40, 47, 48, 59, 67, 71, 75, 94, 97, 118, 132, 162, 190, 203, 206, 207, 208, 220, 224, 225, 226, 227, 233, 234, 235, 236, 237, 249, 255, 256, 288, 294], "experi": [2, 134, 236, 237], "design": [2, 3, 4, 13, 14, 16, 18, 22, 23, 25, 28, 33, 37, 44, 49, 57, 67, 103, 106, 109, 131, 149, 150, 206, 207, 211, 217, 222, 227, 233, 236, 288, 289, 293], "interfac": [2, 5, 7, 9, 11, 12, 14, 31, 46, 67, 95, 126, 151, 177, 197, 201, 206, 207, 210, 215, 236, 249, 250], "ipython": [2, 4, 14, 15, 38, 95, 149, 197, 256, 261, 292, 293], "jupyt": [2, 7, 11, 14, 23, 256], "notebook": [2, 14, 23, 38, 95, 197, 256, 292, 293], "init_sess": [2, 95, 293], "command": [2, 4, 8, 9, 11, 12, 14, 15, 27, 30, 36, 38, 48, 71, 95, 132, 144, 149, 197, 203, 217, 248, 249, 293], "In": [2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 27, 31, 36, 38, 44, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 66, 67, 68, 69, 71, 72, 73, 75, 80, 82, 83, 84, 85, 92, 94, 95, 96, 97, 98, 100, 103, 104, 107, 109, 111, 114, 118, 122, 126, 127, 129, 131, 132, 135, 136, 137, 142, 143, 144, 145, 146, 147, 149, 150, 168, 170, 171, 172, 177, 181, 182, 185, 186, 187, 191, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 217, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 239, 241, 243, 246, 248, 250, 252, 253, 255, 256, 259, 262, 266, 267, 269, 271, 283, 286, 287, 288, 289, 290, 293, 294, 295], "usual": [2, 12, 13, 14, 15, 19, 21, 27, 47, 49, 58, 66, 67, 68, 85, 92, 94, 103, 142, 168, 180, 186, 187, 198, 200, 201, 204, 205, 207, 208, 210, 213, 216, 217, 218, 224, 227, 233, 236, 237, 238, 242, 243, 250, 252, 256, 262, 271, 283, 286, 289, 293, 294], "matplotlib": [2, 4, 5, 8, 13, 34, 38, 90, 95, 116, 149, 162, 197, 203, 293], "flag": [2, 3, 17, 23, 27, 46, 48, 58, 59, 63, 65, 67, 82, 94, 97, 98, 99, 103, 107, 126, 132, 166, 203, 208, 210, 213, 214, 217, 218, 219, 225, 229, 230, 233, 235, 236, 243, 248, 249, 255, 258, 283, 294], "auto_symbol": [2, 95, 109], "auto_int_to_integ": [2, 95], "qt": 2, "consol": [2, 3, 15, 67, 95, 197, 203, 293], "express": [2, 3, 4, 5, 14, 17, 18, 21, 22, 23, 28, 29, 32, 34, 36, 40, 41, 42, 43, 44, 45, 46, 59, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 80, 82, 83, 90, 91, 92, 94, 95, 98, 101, 102, 103, 106, 107, 108, 110, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 136, 142, 143, 144, 145, 146, 147, 149, 150, 157, 161, 165, 166, 170, 171, 174, 177, 179, 180, 181, 182, 184, 185, 186, 187, 189, 191, 192, 194, 196, 197, 198, 201, 202, 203, 204, 205, 206, 208, 210, 212, 213, 214, 217, 218, 220, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 246, 249, 250, 251, 252, 253, 256, 258, 262, 264, 265, 266, 268, 269, 271, 277, 279, 284, 285, 286, 287, 288, 290, 293, 294, 295], "mathjax": [2, 5, 95, 197, 293], "preview": [2, 11, 47, 251], "convert": [2, 3, 8, 13, 14, 15, 17, 21, 22, 23, 25, 30, 32, 33, 34, 40, 44, 48, 51, 59, 63, 67, 68, 71, 72, 73, 80, 81, 82, 84, 87, 88, 91, 95, 97, 98, 103, 106, 107, 109, 118, 129, 147, 176, 179, 185, 186, 187, 189, 196, 203, 204, 206, 208, 210, 212, 213, 214, 215, 217, 218, 219, 225, 226, 227, 229, 230, 233, 234, 236, 237, 238, 239, 242, 248, 249, 255, 256, 258, 260, 265, 280, 285, 286, 289, 294], "imag": [2, 8, 58, 126, 138, 143, 149, 151, 155, 204, 208, 210, 217, 225, 236], "render": [2, 4, 5, 8, 11, 12, 48, 67, 95, 197, 203, 217, 256, 293], "either": [2, 4, 5, 8, 11, 12, 13, 14, 15, 21, 22, 23, 27, 30, 31, 32, 33, 35, 40, 44, 46, 47, 51, 59, 66, 67, 68, 71, 72, 73, 75, 82, 84, 90, 92, 94, 95, 97, 98, 103, 107, 118, 123, 126, 127, 128, 131, 132, 145, 147, 149, 166, 172, 179, 182, 184, 186, 197, 201, 203, 205, 206, 207, 208, 210, 212, 213, 217, 219, 224, 225, 226, 227, 230, 233, 234, 235, 236, 237, 238, 241, 242, 249, 255, 256, 262, 271, 286, 289, 290], "save": [2, 9, 12, 13, 14, 46, 67, 103, 107, 203, 216, 235, 252], "show": [2, 3, 4, 5, 8, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 34, 48, 59, 66, 67, 71, 73, 90, 92, 94, 103, 107, 110, 111, 114, 116, 122, 132, 138, 143, 147, 149, 177, 181, 185, 187, 192, 200, 201, 203, 204, 207, 208, 210, 212, 213, 217, 218, 220, 224, 225, 226, 227, 229, 230, 233, 235, 237, 238, 246, 249, 250, 253, 255, 256, 286, 288, 290, 293], "viewer": [2, 5, 47, 217, 251], "distribut": [2, 8, 38, 58, 65, 67, 75, 83, 94, 110, 111, 112, 181, 205, 208, 213, 217, 243], "texliv": [2, 8, 217], "miktex": [2, 8], "note": [2, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 25, 28, 29, 30, 32, 33, 34, 35, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 59, 60, 63, 65, 66, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 92, 94, 95, 97, 98, 100, 103, 107, 109, 118, 119, 123, 124, 126, 127, 128, 131, 132, 134, 136, 139, 147, 149, 155, 158, 166, 176, 177, 179, 181, 182, 183, 185, 191, 192, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 218, 219, 220, 223, 225, 227, 229, 230, 232, 233, 234, 235, 236, 237, 242, 243, 246, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 267, 269, 271, 283, 284, 285, 287, 288, 289, 290, 294], "parser": [2, 100, 109, 142, 149, 248, 279], "modul": [2, 3, 4, 5, 7, 11, 12, 14, 15, 18, 21, 25, 30, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 57, 59, 67, 68, 70, 72, 73, 75, 79, 83, 87, 90, 93, 94, 95, 97, 100, 101, 102, 103, 108, 109, 110, 112, 113, 114, 116, 119, 122, 131, 132, 133, 138, 142, 144, 145, 147, 149, 151, 154, 156, 157, 169, 172, 185, 186, 187, 188, 198, 201, 203, 208, 209, 211, 214, 215, 217, 221, 224, 227, 231, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 265, 267, 269, 270, 271, 272, 273, 279, 280, 281, 283, 286, 288, 294, 295], "time": [2, 3, 5, 7, 8, 11, 12, 13, 14, 15, 19, 21, 22, 25, 27, 34, 36, 39, 43, 44, 48, 50, 58, 59, 63, 67, 68, 72, 75, 90, 92, 97, 98, 103, 104, 106, 107, 108, 109, 115, 116, 118, 122, 127, 128, 131, 132, 134, 136, 139, 140, 142, 144, 145, 146, 147, 149, 150, 156, 166, 171, 179, 180, 184, 185, 186, 187, 188, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 210, 211, 212, 213, 214, 216, 217, 224, 225, 226, 227, 229, 233, 235, 237, 246, 248, 249, 254, 255, 256, 269, 271, 281, 284, 288, 289, 290], "parse_expr": [2, 13, 21, 36, 109], "mathematca": 2, "parse_mathematica": [2, 13, 109], "maxima": [2, 31, 109, 236], "parse_maxima": [2, 109], "antlr": [2, 109, 132], "runtim": [2, 14, 48, 67, 128, 256], "autolev": [2, 134, 142, 279], "call": [2, 3, 4, 5, 7, 9, 11, 12, 14, 15, 18, 19, 21, 22, 23, 27, 28, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 65, 67, 68, 70, 71, 72, 74, 75, 77, 82, 83, 85, 90, 92, 94, 96, 97, 98, 99, 100, 101, 103, 105, 106, 107, 109, 110, 111, 118, 122, 126, 132, 134, 136, 143, 146, 147, 172, 174, 177, 182, 186, 187, 192, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 219, 224, 225, 227, 229, 230, 232, 233, 235, 236, 237, 238, 239, 241, 243, 244, 246, 248, 249, 250, 251, 252, 253, 255, 256, 258, 262, 265, 266, 269, 271, 284, 286, 288, 289, 290, 293, 294, 295], "antlr4": [2, 109], "python3": [2, 8, 48, 109, 217], "awar": [2, 3, 4, 12, 14, 15, 22, 46, 67, 71, 97, 103, 227, 237, 256], "version": [2, 3, 4, 5, 7, 8, 9, 11, 12, 21, 22, 23, 36, 37, 38, 41, 47, 48, 58, 59, 65, 67, 68, 72, 73, 75, 94, 97, 99, 101, 103, 105, 107, 121, 123, 126, 132, 166, 180, 184, 192, 202, 203, 204, 206, 207, 208, 210, 212, 213, 217, 220, 229, 235, 237, 247, 248, 250, 251, 252, 253, 255, 256, 260, 262, 268, 286, 289, 290], "must": [2, 3, 4, 11, 12, 13, 14, 15, 21, 22, 34, 40, 41, 42, 43, 48, 58, 59, 61, 63, 65, 66, 67, 68, 69, 72, 73, 75, 77, 80, 83, 86, 89, 90, 92, 94, 97, 98, 99, 100, 103, 106, 107, 110, 111, 112, 114, 116, 118, 119, 126, 127, 128, 131, 132, 134, 142, 144, 145, 146, 147, 149, 162, 177, 179, 182, 192, 201, 202, 203, 204, 205, 206, 208, 210, 212, 213, 217, 218, 225, 226, 227, 229, 230, 233, 235, 236, 237, 241, 242, 248, 249, 250, 251, 252, 253, 255, 256, 259, 286, 288, 289, 293, 294], "match": [2, 3, 4, 11, 12, 13, 15, 21, 23, 34, 58, 59, 66, 67, 75, 80, 92, 94, 98, 103, 126, 131, 158, 183, 191, 192, 206, 213, 229, 230, 233, 234, 235, 237, 246, 248, 250, 255, 256, 268, 284], "wa": [2, 3, 9, 11, 12, 13, 15, 17, 21, 23, 34, 50, 56, 58, 59, 61, 67, 68, 69, 75, 80, 103, 107, 109, 122, 123, 129, 132, 134, 136, 146, 147, 177, 187, 200, 201, 202, 204, 206, 210, 212, 213, 214, 216, 217, 226, 227, 229, 233, 235, 237, 246, 248, 251, 253, 255, 256, 284, 286, 288, 289, 292], "compil": [2, 48, 95, 108, 122, 149, 197, 217, 229, 242, 248, 249, 250, 273, 288], "4": [2, 5, 11, 12, 15, 17, 19, 21, 22, 23, 27, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 43, 44, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 89, 90, 92, 94, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 110, 112, 114, 116, 118, 119, 120, 124, 132, 134, 135, 136, 137, 139, 140, 141, 142, 143, 146, 147, 149, 150, 151, 154, 158, 161, 166, 176, 177, 179, 180, 181, 182, 183, 185, 192, 193, 196, 198, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 248, 249, 252, 255, 256, 262, 265, 266, 267, 269, 271, 272, 283, 284, 286, 288, 289, 290, 294, 295], "clang": [2, 109], "bind": [2, 48, 217, 249], "parse_c": 2, "lfortran": [2, 109], "fortran": [2, 14, 19, 23, 46, 108, 109, 122, 149, 202, 250, 293], "satisfi": [2, 5, 12, 13, 21, 30, 31, 35, 43, 44, 46, 49, 55, 58, 63, 67, 68, 72, 75, 77, 90, 92, 96, 97, 103, 107, 128, 146, 166, 171, 204, 205, 208, 210, 212, 213, 217, 223, 224, 225, 230, 233, 234, 235, 236, 237, 243, 289, 294], "includ": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 21, 23, 27, 30, 31, 35, 38, 43, 44, 46, 47, 48, 59, 63, 66, 67, 68, 69, 71, 72, 73, 75, 79, 85, 92, 94, 97, 98, 100, 102, 103, 107, 108, 109, 120, 122, 131, 132, 134, 136, 137, 142, 144, 146, 149, 162, 166, 171, 176, 179, 180, 190, 198, 201, 205, 206, 208, 209, 210, 212, 213, 216, 217, 218, 223, 224, 225, 227, 229, 232, 233, 234, 235, 237, 240, 243, 246, 248, 250, 251, 252, 253, 255, 262, 264, 266, 271, 273, 284, 288, 289, 290, 294, 295], "implement": [2, 4, 5, 11, 12, 13, 14, 16, 18, 22, 23, 31, 33, 35, 36, 37, 40, 41, 42, 43, 46, 47, 48, 49, 52, 57, 58, 59, 64, 67, 68, 70, 72, 73, 75, 78, 80, 87, 88, 90, 91, 94, 97, 98, 99, 103, 107, 108, 109, 122, 132, 142, 147, 151, 153, 154, 157, 166, 167, 175, 176, 178, 186, 191, 193, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 218, 221, 224, 225, 226, 229, 230, 233, 234, 235, 236, 237, 241, 242, 252, 255, 256, 259, 270, 273, 277, 284, 288, 294], "dpll": 2, "But": [2, 3, 5, 7, 12, 13, 14, 15, 23, 27, 36, 66, 67, 75, 81, 91, 98, 103, 107, 170, 171, 182, 187, 192, 204, 205, 210, 214, 224, 226, 227, 229, 230, 233, 235, 236, 242, 252, 255, 256, 265, 284, 286, 288, 289, 294], "sat": [2, 42], "solver": [2, 4, 11, 12, 14, 30, 33, 42, 75, 103, 107, 127, 131, 142, 149, 150, 206, 209, 217, 229, 230, 234, 248, 273, 274, 280, 285, 287], "ask": [2, 4, 7, 9, 11, 14, 15, 18, 21, 22, 42, 43, 44, 45, 67, 79, 92, 132, 187, 204, 223, 229, 236, 255, 274, 286], "pycosat": 2, "forc": [2, 15, 19, 22, 23, 67, 71, 73, 77, 83, 92, 94, 97, 110, 111, 112, 114, 123, 126, 127, 129, 131, 134, 136, 137, 138, 139, 142, 144, 145, 146, 147, 149, 170, 171, 185, 198, 201, 203, 205, 207, 226, 229, 230, 235, 248, 269, 271, 279, 293, 294], "pysat": 2, "minisat": 2, "minisat22": 2, "heavi": [2, 12, 237, 289], "primarili": [2, 14, 21, 48, 67, 73, 107, 110, 181, 213, 215, 249, 252, 258, 266], "support": [2, 3, 4, 5, 11, 13, 14, 15, 23, 33, 38, 40, 41, 42, 43, 46, 47, 48, 59, 67, 71, 74, 75, 77, 91, 94, 100, 103, 107, 108, 109, 110, 111, 112, 114, 115, 118, 122, 126, 132, 149, 177, 192, 200, 203, 205, 206, 207, 208, 210, 212, 213, 214, 217, 222, 223, 224, 225, 229, 233, 234, 235, 236, 237, 238, 242, 246, 248, 249, 250, 256, 267, 269, 284, 286, 289, 293], "give": [2, 3, 4, 7, 11, 15, 17, 21, 22, 23, 27, 29, 31, 32, 33, 34, 35, 36, 40, 41, 43, 48, 49, 56, 58, 59, 60, 61, 66, 67, 68, 69, 72, 73, 75, 77, 79, 80, 82, 83, 91, 92, 94, 95, 97, 100, 103, 106, 107, 108, 110, 114, 118, 126, 132, 149, 161, 176, 177, 179, 180, 184, 185, 187, 188, 190, 192, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 217, 218, 219, 220, 224, 225, 226, 227, 229, 230, 233, 235, 236, 237, 248, 249, 250, 255, 266, 271, 286, 287, 289, 294, 295], "rudimentari": [2, 23, 210], "text": [2, 3, 4, 5, 11, 12, 13, 14, 23, 38, 48, 58, 68, 72, 73, 75, 85, 92, 95, 98, 103, 107, 147, 187, 197, 202, 203, 204, 217, 224, 230, 233, 236, 237, 248], "pyglet": [2, 217], "pygletplot": [2, 203], "2d": [2, 80, 81, 83, 110, 111, 112, 114, 160, 192, 203, 217, 230, 242, 288], "3d": [2, 40, 51, 80, 81, 110, 160, 183, 198, 203, 266, 268, 269, 270, 271], "evalu": [2, 4, 14, 19, 21, 22, 28, 34, 36, 40, 41, 42, 43, 46, 48, 67, 69, 72, 73, 75, 78, 82, 83, 92, 94, 97, 100, 103, 107, 108, 109, 118, 122, 124, 132, 146, 147, 157, 159, 161, 163, 165, 168, 171, 179, 182, 202, 203, 206, 207, 208, 210, 211, 213, 217, 218, 223, 224, 225, 227, 229, 230, 233, 235, 236, 237, 238, 239, 249, 250, 251, 256, 269, 274, 283, 284, 285, 286, 288, 290], "numer": [2, 4, 12, 13, 14, 15, 17, 19, 21, 28, 29, 30, 31, 32, 35, 40, 44, 46, 48, 66, 67, 72, 75, 79, 83, 90, 103, 107, 109, 114, 115, 116, 118, 126, 127, 128, 132, 134, 142, 146, 147, 150, 154, 161, 164, 179, 191, 201, 203, 206, 207, 208, 210, 211, 212, 213, 216, 217, 226, 227, 229, 233, 235, 236, 242, 248, 249, 255, 256, 274, 283, 286, 290, 294], "variou": [2, 4, 5, 14, 19, 23, 27, 30, 46, 48, 50, 51, 58, 66, 67, 72, 87, 92, 94, 97, 103, 129, 147, 161, 165, 166, 177, 179, 204, 205, 208, 209, 210, 212, 218, 224, 227, 230, 233, 234, 236, 250, 294], "primari": [2, 3, 4, 5, 12, 21, 23, 67, 79, 97, 201, 204, 206, 250, 256], "vehicl": 2, "between": [2, 3, 9, 12, 13, 14, 18, 22, 23, 27, 31, 47, 48, 57, 58, 59, 61, 65, 67, 69, 72, 75, 77, 79, 80, 81, 82, 83, 84, 94, 96, 97, 100, 101, 103, 107, 108, 109, 114, 115, 116, 118, 126, 129, 131, 132, 135, 139, 141, 143, 146, 147, 149, 150, 151, 154, 155, 161, 168, 170, 171, 172, 176, 179, 180, 181, 182, 185, 186, 187, 191, 192, 193, 194, 196, 198, 200, 201, 203, 204, 206, 210, 212, 213, 217, 219, 229, 233, 234, 235, 236, 237, 238, 251, 256, 262, 265, 266, 269, 271, 286], "standard": [2, 5, 12, 13, 14, 15, 21, 23, 27, 31, 32, 34, 36, 48, 67, 71, 73, 75, 90, 92, 94, 95, 96, 97, 101, 103, 107, 108, 109, 121, 159, 163, 192, 198, 202, 204, 207, 208, 210, 217, 220, 225, 229, 230, 233, 236, 237, 239, 250, 256, 259, 266, 271, 283, 286, 294], "wai": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 27, 29, 31, 34, 39, 47, 49, 50, 51, 56, 58, 59, 60, 63, 67, 69, 72, 75, 83, 87, 91, 92, 94, 96, 100, 103, 106, 107, 109, 110, 114, 122, 127, 129, 131, 132, 136, 138, 139, 142, 146, 162, 176, 179, 180, 185, 187, 190, 191, 192, 194, 196, 198, 200, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 224, 227, 229, 230, 233, 234, 236, 238, 239, 242, 243, 246, 250, 252, 255, 256, 259, 262, 266, 267, 268, 269, 271, 283, 284, 286, 287, 288, 289, 294, 295], "principl": [2, 68, 98, 107, 153, 202, 204, 205, 210, 226, 235], "pass": [2, 3, 4, 11, 12, 14, 15, 17, 18, 21, 22, 23, 29, 30, 33, 34, 36, 39, 40, 43, 46, 47, 48, 58, 59, 67, 68, 69, 71, 73, 74, 75, 77, 80, 81, 83, 94, 95, 97, 98, 100, 103, 104, 107, 109, 110, 116, 118, 123, 127, 131, 132, 136, 147, 149, 150, 154, 171, 172, 176, 177, 179, 180, 192, 197, 203, 204, 206, 207, 208, 210, 212, 213, 215, 217, 218, 224, 225, 229, 230, 233, 234, 235, 236, 237, 238, 241, 242, 243, 246, 248, 249, 250, 251, 253, 255, 256, 258, 261, 262, 283, 284, 289, 293, 294, 295], "appropri": [2, 4, 5, 11, 12, 13, 15, 19, 31, 35, 58, 67, 73, 82, 103, 122, 134, 171, 172, 182, 192, 200, 206, 207, 213, 214, 217, 223, 224, 229, 230, 235, 237, 242, 250, 267, 293], "namespac": [2, 4, 13, 39, 48, 49, 67, 131, 208, 230, 233, 234, 248, 250, 251, 256], "dictionari": [2, 12, 13, 14, 30, 34, 36, 47, 48, 56, 58, 59, 65, 67, 72, 81, 83, 94, 96, 98, 103, 106, 107, 109, 110, 124, 127, 128, 131, 132, 134, 136, 139, 144, 146, 172, 182, 192, 201, 203, 205, 206, 208, 210, 212, 213, 215, 217, 224, 229, 230, 233, 234, 235, 236, 237, 241, 243, 248, 252, 255, 256, 262, 283, 290], "third": [2, 3, 17, 27, 40, 48, 58, 59, 67, 75, 77, 81, 103, 118, 126, 131, 179, 185, 186, 200, 205, 213, 227, 233, 236, 237, 239, 253, 255, 284, 289], "argument": [2, 3, 4, 11, 12, 14, 18, 21, 22, 23, 27, 29, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 58, 59, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 83, 84, 92, 94, 95, 97, 98, 100, 103, 106, 107, 109, 110, 116, 118, 126, 127, 131, 132, 144, 145, 147, 149, 156, 159, 163, 165, 168, 171, 176, 177, 179, 180, 181, 182, 190, 197, 198, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 216, 217, 218, 219, 223, 224, 225, 226, 227, 229, 230, 233, 234, 235, 237, 239, 241, 242, 248, 249, 250, 251, 252, 253, 255, 256, 258, 266, 267, 269, 283, 284, 289, 290, 294], "default": [2, 3, 4, 5, 11, 12, 13, 14, 15, 21, 23, 27, 31, 32, 34, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 57, 58, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 89, 94, 95, 97, 98, 100, 103, 104, 107, 108, 109, 110, 111, 114, 116, 118, 120, 122, 123, 124, 126, 127, 128, 131, 132, 146, 155, 172, 174, 177, 179, 180, 182, 186, 188, 191, 192, 194, 196, 197, 202, 203, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 218, 219, 220, 224, 225, 226, 229, 230, 233, 234, 235, 236, 237, 242, 243, 248, 249, 250, 252, 253, 255, 256, 258, 262, 283, 284, 288, 290, 293, 294], "translat": [2, 13, 48, 58, 67, 76, 78, 82, 84, 108, 109, 118, 121, 126, 127, 131, 139, 141, 143, 147, 200, 203, 217, 233, 235, 249, 250, 256, 258, 267], "numpi": [2, 4, 12, 13, 14, 23, 27, 32, 33, 34, 38, 48, 67, 90, 95, 108, 116, 132, 149, 166, 176, 206, 217, 237, 242, 249, 250, 256, 283, 286], "By": [2, 15, 21, 23, 27, 31, 32, 34, 40, 41, 43, 48, 57, 66, 67, 69, 71, 72, 75, 81, 82, 86, 90, 92, 97, 98, 103, 106, 107, 108, 109, 110, 111, 116, 123, 177, 182, 203, 205, 207, 208, 210, 212, 213, 214, 216, 217, 219, 224, 226, 229, 230, 233, 235, 236, 237, 241, 243, 244, 248, 251, 255, 256, 269, 283, 288, 289, 294], "produc": [2, 4, 5, 12, 14, 22, 23, 30, 32, 33, 34, 36, 47, 58, 67, 68, 80, 94, 97, 103, 192, 206, 207, 212, 213, 217, 224, 233, 234, 235, 237, 246, 248, 252, 253, 255, 256, 293], "math": [2, 4, 8, 12, 23, 36, 40, 44, 47, 49, 58, 67, 72, 75, 77, 94, 103, 107, 108, 114, 132, 142, 198, 203, 206, 208, 211, 216, 217, 233, 234, 237, 249, 250, 256, 267, 268, 269, 270, 271, 283, 284, 288], "behavior": [2, 3, 12, 13, 14, 15, 23, 58, 67, 72, 75, 94, 109, 121, 122, 142, 146, 177, 204, 205, 212, 213, 217, 218, 222, 224, 226, 229, 246, 249, 251, 255, 256, 286], "backward": [2, 19, 46, 67, 98, 103, 118, 131, 217, 255, 294], "compat": [2, 3, 8, 18, 48, 67, 75, 95, 98, 103, 107, 108, 122, 131, 184, 189, 197, 203, 206, 208, 212, 213, 217, 237, 241, 244, 248, 250, 256], "scipi": [2, 7, 14, 27, 29, 32, 75, 122, 149, 176, 217, 237, 256, 283, 292], "special": [2, 4, 11, 14, 16, 21, 23, 32, 36, 39, 40, 50, 59, 67, 68, 70, 71, 72, 74, 82, 85, 92, 94, 98, 103, 149, 166, 171, 198, 204, 207, 210, 211, 212, 217, 226, 227, 229, 232, 233, 234, 235, 237, 248, 249, 250, 253, 255, 256, 266, 269, 271, 274, 284, 285, 289], "cupi": [2, 108], "cuda": [2, 108], "gpu": [2, 108, 149], "jax": [2, 108, 256], "xla": [2, 108], "program": [2, 5, 15, 21, 48, 51, 59, 149, 187, 202, 250, 252, 286, 288, 292, 294], "tpu": [2, 108], "compatibli": 2, "tensorflow": [2, 256], "machin": [2, 4, 7, 8, 9, 218, 229, 233, 283], "learn": [2, 5, 8, 28, 34, 36, 103, 147, 201, 226, 236, 283, 286, 287, 288, 292], "numexpr": [2, 256], "fast": [2, 21, 34, 48, 67, 102, 103, 107, 127, 128, 154, 208, 209, 210, 211, 212, 213, 214, 220, 224, 233, 235, 252, 255, 256], "alreadi": [2, 3, 7, 9, 10, 11, 12, 13, 15, 21, 23, 30, 31, 34, 36, 38, 40, 58, 59, 67, 68, 76, 77, 80, 81, 83, 92, 94, 98, 104, 107, 114, 119, 123, 131, 132, 146, 151, 177, 179, 182, 198, 200, 201, 203, 206, 207, 210, 212, 216, 220, 226, 227, 229, 233, 236, 237, 243, 267, 269, 284, 286, 287, 288, 292, 293, 294, 295], "number": [2, 3, 4, 5, 11, 12, 13, 14, 17, 18, 21, 23, 25, 27, 30, 31, 32, 35, 36, 40, 42, 43, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 72, 73, 75, 77, 80, 81, 82, 83, 84, 86, 94, 95, 96, 97, 98, 100, 103, 104, 106, 108, 109, 111, 114, 116, 118, 119, 120, 122, 127, 128, 131, 132, 136, 146, 147, 149, 155, 158, 161, 162, 165, 166, 167, 168, 170, 171, 176, 177, 178, 179, 180, 182, 183, 184, 187, 190, 191, 192, 196, 197, 198, 200, 201, 202, 203, 205, 206, 208, 209, 210, 211, 213, 214, 217, 219, 223, 224, 225, 226, 227, 229, 230, 233, 235, 236, 237, 238, 242, 243, 248, 250, 252, 255, 256, 258, 262, 265, 266, 268, 269, 271, 274, 280, 283, 284, 286, 288, 289, 290, 294], "languag": [2, 5, 14, 15, 19, 23, 48, 73, 103, 109, 122, 132, 149, 217, 222, 237, 249, 250, 286, 288, 290, 292, 294], "valid": [2, 4, 5, 11, 13, 21, 22, 23, 30, 34, 41, 43, 45, 46, 47, 48, 60, 66, 67, 72, 73, 83, 103, 107, 109, 124, 126, 127, 128, 131, 132, 134, 151, 155, 174, 179, 186, 189, 191, 192, 197, 201, 207, 210, 213, 216, 217, 225, 229, 230, 233, 235, 236, 237, 256, 290, 294], "rather": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 27, 31, 34, 35, 36, 39, 44, 48, 49, 50, 58, 59, 60, 67, 71, 73, 78, 83, 85, 92, 97, 98, 100, 103, 107, 109, 131, 139, 149, 162, 176, 180, 182, 186, 191, 200, 204, 207, 210, 213, 215, 220, 227, 230, 232, 233, 236, 237, 239, 252, 255, 256, 259, 271, 286, 288, 289], "simpli": [2, 3, 5, 8, 12, 21, 22, 29, 30, 44, 49, 50, 66, 67, 69, 73, 77, 98, 100, 103, 107, 109, 110, 114, 119, 123, 132, 134, 146, 172, 177, 187, 198, 201, 207, 213, 214, 225, 226, 227, 232, 233, 236, 253, 255, 256, 269], "string": [2, 3, 4, 5, 7, 11, 12, 14, 15, 23, 40, 41, 47, 48, 51, 56, 67, 68, 69, 70, 71, 74, 80, 90, 95, 96, 97, 100, 103, 107, 109, 110, 112, 114, 116, 122, 123, 126, 127, 128, 129, 153, 162, 166, 176, 180, 184, 190, 191, 192, 196, 197, 198, 203, 206, 208, 212, 217, 218, 224, 229, 233, 237, 238, 241, 242, 243, 248, 249, 250, 255, 256, 258, 260, 262, 264, 266, 285, 286, 289, 293], "repres": [2, 12, 13, 14, 15, 18, 21, 22, 23, 25, 30, 32, 34, 40, 42, 44, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 62, 63, 66, 67, 68, 69, 72, 73, 75, 77, 78, 80, 82, 83, 84, 89, 90, 94, 96, 97, 98, 100, 103, 107, 109, 110, 111, 115, 116, 118, 123, 126, 127, 129, 131, 132, 134, 135, 136, 137, 140, 142, 144, 145, 146, 147, 149, 151, 153, 154, 156, 168, 169, 171, 175, 176, 179, 180, 182, 184, 186, 187, 188, 189, 190, 191, 192, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 208, 210, 213, 215, 217, 219, 220, 223, 224, 225, 227, 229, 230, 233, 235, 236, 237, 238, 239, 241, 242, 243, 250, 252, 255, 256, 262, 265, 269, 271, 279, 284, 286, 288, 289, 294, 295], "take": [2, 3, 5, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 29, 30, 31, 32, 34, 43, 46, 48, 49, 52, 57, 58, 62, 66, 67, 68, 69, 73, 75, 79, 80, 90, 94, 96, 97, 98, 103, 107, 108, 109, 110, 112, 114, 118, 122, 126, 127, 129, 131, 132, 134, 146, 149, 151, 165, 168, 171, 172, 176, 178, 179, 180, 181, 182, 184, 187, 190, 191, 192, 193, 194, 197, 200, 201, 203, 204, 205, 206, 207, 208, 210, 213, 214, 217, 220, 223, 224, 225, 226, 227, 229, 230, 233, 235, 236, 237, 239, 242, 248, 249, 251, 252, 255, 256, 262, 264, 265, 283, 284, 286, 288, 289, 290, 294], "within": [2, 5, 12, 13, 14, 21, 33, 46, 47, 48, 50, 67, 73, 80, 83, 97, 98, 100, 107, 108, 110, 139, 147, 177, 192, 200, 201, 205, 207, 208, 213, 215, 225, 233, 235, 236, 237, 248, 249, 258], "case": [2, 3, 4, 5, 11, 12, 13, 14, 15, 19, 21, 22, 25, 27, 30, 31, 32, 33, 34, 35, 36, 40, 46, 47, 48, 49, 50, 52, 55, 58, 59, 63, 66, 67, 68, 69, 71, 72, 73, 75, 79, 82, 83, 84, 85, 89, 92, 94, 97, 98, 100, 103, 104, 107, 108, 109, 111, 118, 122, 126, 127, 132, 134, 135, 136, 137, 143, 145, 147, 149, 155, 166, 172, 177, 179, 181, 182, 187, 188, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 222, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 237, 238, 241, 243, 246, 248, 250, 251, 253, 255, 256, 257, 258, 259, 262, 265, 266, 284, 288, 289, 290, 293, 294, 295], "abov": [2, 3, 4, 5, 8, 11, 12, 13, 15, 17, 19, 22, 23, 25, 27, 29, 33, 34, 36, 46, 47, 48, 49, 51, 57, 58, 59, 63, 66, 67, 71, 72, 75, 77, 80, 83, 84, 92, 94, 97, 98, 103, 108, 109, 111, 118, 122, 126, 127, 129, 131, 132, 134, 135, 136, 137, 142, 143, 145, 146, 147, 150, 177, 179, 182, 192, 198, 200, 201, 203, 204, 205, 207, 208, 210, 212, 213, 214, 216, 217, 218, 224, 227, 229, 230, 233, 235, 236, 237, 241, 242, 249, 250, 256, 266, 267, 268, 269, 272, 286, 288, 289, 290, 294], "subpackag": [2, 273], "f2py": [2, 48, 108, 249, 250], "ufuncifi": [2, 48, 249], "cython": [2, 48, 108, 149, 249], "codegen": [2, 23, 108, 217, 249, 254, 281], "relat": [2, 3, 4, 5, 11, 12, 14, 22, 41, 43, 44, 46, 49, 51, 57, 58, 65, 69, 72, 73, 83, 89, 92, 94, 103, 107, 112, 114, 121, 127, 136, 139, 142, 143, 149, 151, 156, 164, 166, 186, 192, 196, 200, 202, 203, 204, 206, 210, 212, 213, 214, 216, 217, 221, 223, 224, 227, 229, 230, 232, 233, 235, 236, 237, 255, 294], "reli": [2, 12, 13, 48, 103, 108, 115, 210, 216, 217, 224, 229, 236, 251, 256, 290], "llvm": 2, "gcc": [2, 250], "ifort": 2, "therefor": [2, 3, 4, 12, 23, 27, 31, 49, 58, 63, 67, 71, 75, 80, 83, 96, 107, 118, 126, 131, 198, 201, 202, 203, 207, 210, 213, 217, 233, 236, 237, 238, 243, 262, 264, 266, 267, 269, 271], "given": [2, 3, 5, 8, 12, 13, 14, 15, 17, 19, 21, 23, 25, 27, 29, 32, 34, 40, 42, 43, 46, 47, 48, 49, 51, 55, 56, 57, 58, 59, 60, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 94, 96, 97, 98, 100, 103, 106, 107, 109, 110, 114, 116, 118, 119, 123, 124, 126, 127, 129, 131, 132, 136, 147, 155, 172, 177, 179, 186, 187, 188, 190, 192, 193, 194, 196, 198, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 220, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 242, 243, 246, 248, 250, 252, 255, 256, 258, 259, 262, 265, 267, 269, 271, 283, 289, 292, 294, 295], "instead": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 21, 22, 23, 29, 31, 32, 34, 35, 36, 39, 40, 41, 43, 47, 48, 58, 60, 63, 67, 69, 70, 71, 72, 75, 94, 95, 97, 98, 100, 101, 103, 107, 116, 119, 121, 131, 132, 134, 136, 146, 149, 180, 184, 192, 197, 198, 200, 201, 204, 206, 207, 208, 210, 212, 213, 215, 217, 219, 227, 229, 233, 235, 236, 237, 241, 242, 243, 246, 251, 252, 253, 255, 256, 269, 272, 283, 284, 286, 288, 289, 290, 294, 295], "aesara": [2, 13, 48, 149], "aesaracod": [2, 13, 48, 108, 217], "contain": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 21, 22, 23, 29, 30, 31, 32, 34, 35, 36, 39, 41, 42, 46, 47, 48, 49, 50, 58, 59, 63, 65, 66, 69, 70, 71, 73, 75, 76, 78, 80, 81, 82, 83, 84, 93, 94, 96, 97, 98, 100, 103, 106, 107, 108, 109, 110, 113, 114, 116, 117, 119, 123, 127, 128, 129, 131, 134, 136, 146, 147, 149, 150, 151, 152, 153, 155, 156, 157, 169, 172, 174, 177, 179, 182, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 217, 218, 219, 224, 225, 227, 229, 230, 231, 233, 234, 235, 236, 237, 241, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 262, 265, 273, 284, 286, 290, 294], "aeseara": 2, "previous": [2, 3, 11, 13, 66, 126, 140, 143, 198, 216, 229, 237, 269], "theano": [2, 13, 149, 293], "return": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 27, 30, 31, 33, 35, 36, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 92, 94, 96, 97, 98, 99, 100, 103, 104, 106, 107, 109, 110, 112, 114, 116, 118, 119, 120, 121, 123, 124, 126, 127, 128, 129, 131, 132, 134, 136, 140, 144, 146, 147, 149, 151, 153, 154, 155, 156, 158, 159, 163, 166, 167, 168, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 196, 198, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 229, 230, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 262, 265, 267, 269, 283, 284, 289, 290, 293, 294, 295], "graph": [2, 4, 14, 59, 75, 96, 103, 108, 206, 217, 236, 237, 255, 289, 293], "object": [2, 3, 4, 5, 7, 11, 12, 14, 15, 20, 21, 22, 23, 25, 34, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 57, 58, 59, 60, 61, 62, 66, 67, 69, 72, 73, 75, 77, 78, 79, 80, 82, 83, 84, 92, 94, 97, 98, 100, 101, 103, 108, 109, 110, 111, 114, 116, 118, 119, 122, 123, 126, 127, 128, 129, 131, 132, 136, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 155, 156, 157, 165, 166, 168, 176, 177, 181, 182, 184, 185, 186, 188, 189, 192, 196, 197, 200, 201, 203, 204, 205, 206, 207, 208, 210, 212, 213, 217, 219, 220, 223, 224, 225, 226, 229, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 248, 249, 250, 251, 252, 255, 256, 259, 260, 265, 266, 267, 272, 273, 277, 283, 284, 286, 288, 289, 290, 293, 294], "llvmlite": 2, "llvmjitcod": 2, "jit": [2, 226], "from": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 17, 18, 19, 21, 22, 23, 25, 27, 29, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 260, 262, 264, 265, 266, 267, 268, 269, 271, 272, 280, 283, 284, 286, 288, 289, 290, 293, 294, 295], "around": [2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 22, 23, 38, 46, 56, 59, 67, 68, 69, 71, 73, 76, 83, 87, 103, 106, 107, 114, 123, 126, 142, 146, 150, 201, 207, 210, 212, 217, 219, 224, 230, 233, 236, 237, 248, 262, 264, 284, 286, 288], "llvm_callabl": 2, "callabl": [2, 15, 34, 48, 58, 103, 109, 127, 128, 167, 212, 217, 218, 229, 246, 249, 250, 255, 256, 257], "unlik": [2, 4, 12, 14, 15, 21, 22, 27, 34, 45, 68, 94, 103, 107, 109, 132, 200, 206, 210, 217, 230, 233, 236, 252, 253, 286, 288, 289, 290, 293], "two": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 27, 29, 31, 34, 35, 40, 46, 47, 48, 49, 52, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 92, 94, 96, 97, 98, 100, 103, 107, 108, 110, 111, 112, 114, 115, 118, 119, 122, 123, 126, 127, 135, 140, 142, 143, 144, 146, 147, 154, 155, 156, 161, 162, 166, 168, 171, 172, 177, 178, 179, 180, 181, 182, 184, 186, 187, 191, 192, 193, 194, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 218, 219, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 239, 242, 252, 255, 256, 262, 265, 267, 268, 269, 271, 283, 284, 287, 289, 290, 294], "tensorflow_cod": 2, "avail": [2, 5, 7, 8, 9, 13, 14, 15, 21, 27, 33, 36, 37, 38, 47, 48, 58, 59, 66, 67, 72, 75, 94, 103, 107, 108, 109, 132, 146, 149, 207, 208, 210, 213, 217, 218, 223, 225, 227, 229, 230, 235, 236, 237, 238, 242, 243, 248, 255, 256, 261, 262, 286, 293], "order": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 19, 21, 22, 25, 27, 29, 34, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 80, 83, 84, 86, 89, 92, 94, 95, 96, 97, 98, 103, 104, 107, 108, 109, 110, 111, 112, 118, 119, 122, 126, 127, 131, 132, 133, 134, 135, 143, 144, 145, 146, 147, 155, 159, 163, 166, 176, 177, 178, 179, 180, 181, 182, 186, 187, 191, 192, 194, 196, 197, 200, 201, 203, 204, 205, 206, 207, 208, 210, 212, 214, 216, 217, 218, 219, 220, 223, 225, 229, 230, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 248, 249, 250, 252, 255, 256, 258, 262, 264, 266, 267, 272, 284, 286, 287, 289, 293, 294, 295], "detect": [2, 8, 39, 46, 100, 103, 107, 203, 207, 217, 233, 234, 236, 238, 255, 293], "assum": [2, 4, 14, 15, 18, 21, 23, 31, 34, 35, 40, 43, 48, 49, 51, 56, 58, 66, 67, 68, 69, 72, 73, 75, 77, 84, 85, 92, 94, 103, 107, 110, 114, 118, 131, 132, 138, 144, 145, 146, 147, 149, 155, 177, 181, 182, 192, 196, 198, 204, 205, 207, 210, 213, 215, 217, 224, 225, 227, 229, 230, 233, 234, 236, 237, 241, 242, 243, 250, 255, 258, 265, 267, 271, 274, 287, 289, 292, 294, 295], "wurlitz": 2, "allow": [2, 3, 5, 11, 12, 13, 14, 15, 21, 23, 27, 44, 47, 48, 49, 51, 58, 60, 63, 66, 67, 68, 71, 73, 75, 77, 78, 79, 92, 95, 97, 98, 100, 101, 103, 107, 108, 109, 111, 126, 127, 132, 134, 142, 146, 147, 149, 154, 166, 182, 186, 187, 188, 201, 203, 204, 207, 208, 210, 212, 213, 214, 217, 222, 224, 225, 226, 229, 230, 233, 235, 236, 237, 238, 242, 248, 251, 253, 255, 256, 267, 286, 289], "captur": [2, 67, 255], "output": [2, 4, 5, 11, 12, 13, 15, 16, 19, 21, 23, 25, 31, 34, 36, 47, 48, 67, 68, 75, 91, 94, 95, 97, 98, 100, 103, 107, 108, 109, 115, 118, 127, 131, 132, 140, 146, 149, 150, 154, 155, 166, 178, 182, 191, 192, 196, 197, 198, 201, 207, 210, 213, 217, 218, 227, 229, 230, 232, 233, 235, 237, 242, 248, 249, 250, 252, 255, 256, 262, 286, 288, 289, 290, 293, 294, 295], "suit": [2, 3, 5, 11, 12, 21, 23, 31, 32, 47, 203, 213, 246, 248], "stat": [2, 9, 273, 280], "sampl": [2, 19, 58, 70, 116, 118, 166, 203, 217, 237, 284, 288], "At": [2, 12, 21, 23, 31, 46, 63, 73, 75, 94, 107, 110, 111, 122, 187, 191, 201, 212, 227, 256], "least": [2, 3, 5, 7, 11, 12, 13, 17, 21, 34, 44, 46, 48, 58, 67, 73, 79, 91, 92, 94, 103, 107, 108, 127, 162, 176, 184, 186, 204, 205, 207, 208, 210, 212, 213, 224, 226, 229, 233, 235, 236, 237, 250, 294], "follow": [2, 3, 4, 5, 7, 8, 11, 12, 13, 15, 17, 19, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 41, 43, 46, 47, 48, 49, 50, 56, 57, 58, 59, 60, 63, 66, 67, 68, 71, 72, 73, 75, 79, 81, 83, 90, 91, 92, 94, 97, 98, 100, 103, 107, 108, 110, 111, 114, 126, 127, 129, 131, 132, 134, 142, 143, 144, 145, 146, 147, 149, 151, 155, 174, 177, 179, 182, 185, 187, 191, 192, 198, 200, 201, 202, 203, 204, 205, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 224, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 241, 242, 243, 248, 251, 252, 255, 256, 259, 266, 267, 269, 283, 284, 286, 287, 289, 290, 294, 295], "random": [2, 4, 13, 50, 51, 56, 58, 59, 65, 68, 77, 80, 81, 102, 103, 107, 166, 178, 203, 208, 210, 212, 213, 217, 247, 248, 251, 255, 286, 290, 294], "pymc": [2, 237], "manipul": [2, 14, 18, 19, 21, 27, 30, 32, 34, 47, 48, 49, 58, 67, 73, 75, 92, 107, 108, 125, 132, 142, 147, 180, 200, 206, 207, 208, 211, 216, 217, 219, 226, 229, 240, 255, 273, 279, 280, 283, 284, 285, 286, 287, 288, 290, 293, 294], "first": [2, 4, 5, 7, 8, 9, 11, 12, 14, 15, 19, 21, 22, 23, 27, 31, 34, 35, 38, 40, 47, 48, 49, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 80, 81, 83, 84, 91, 92, 94, 96, 97, 98, 103, 106, 107, 110, 111, 118, 119, 124, 126, 127, 129, 131, 132, 134, 135, 136, 137, 142, 143, 146, 147, 150, 154, 155, 159, 163, 166, 171, 172, 175, 176, 177, 178, 179, 181, 182, 185, 187, 192, 196, 200, 201, 203, 204, 206, 208, 210, 211, 212, 213, 214, 217, 218, 219, 220, 223, 224, 226, 227, 229, 230, 233, 234, 235, 236, 237, 241, 243, 246, 248, 249, 250, 251, 255, 256, 258, 267, 272, 283, 284, 286, 288, 289, 290, 292, 294, 295], "use_symengin": 2, "1": [2, 3, 5, 7, 8, 11, 12, 14, 15, 17, 18, 19, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 129, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 149, 150, 151, 153, 154, 155, 156, 157, 161, 164, 165, 166, 167, 168, 170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 262, 265, 266, 267, 269, 272, 279, 283, 284, 286, 288, 289, 290, 293, 294, 295], "environ": [2, 6, 8, 10, 11, 12, 13, 14, 67, 95, 197, 217, 237, 248, 258, 286, 288, 293], "physic": [2, 4, 19, 24, 25, 48, 60, 103, 107, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 196, 197, 202, 211, 237, 252, 255, 269, 288, 294], "mechan": [2, 23, 26, 67, 90, 94, 103, 110, 123, 124, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 139, 140, 141, 164, 168, 171, 177, 179, 180, 181, 184, 191, 192, 199, 202, 279], "liealgebra": [2, 96], "thing": [2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 16, 21, 22, 23, 27, 29, 37, 44, 48, 57, 58, 59, 67, 69, 79, 95, 96, 97, 98, 103, 108, 122, 132, 146, 149, 166, 182, 187, 200, 201, 206, 214, 216, 224, 225, 226, 229, 233, 236, 241, 251, 253, 255, 283, 284, 286, 288, 289, 290, 293, 294], "configur": [2, 3, 11, 12, 13, 25, 59, 97, 118, 126, 127, 135, 136, 139, 141, 142, 144, 146, 217], "otherwis": [2, 3, 12, 17, 21, 22, 23, 46, 47, 48, 58, 59, 63, 66, 67, 68, 71, 73, 75, 76, 77, 80, 81, 82, 83, 92, 94, 96, 97, 99, 103, 106, 107, 109, 116, 118, 120, 123, 131, 132, 167, 172, 178, 196, 199, 200, 204, 208, 210, 212, 213, 215, 217, 219, 220, 222, 223, 225, 229, 230, 233, 234, 235, 236, 237, 238, 246, 248, 250, 255, 256, 283, 284, 293], "ordinari": [2, 21, 22, 28, 46, 48, 58, 67, 71, 72, 73, 75, 85, 89, 90, 94, 104, 118, 142, 204, 206, 207, 216, 223, 233, 238, 252, 288, 294], "x": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 56, 58, 59, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 103, 106, 107, 108, 109, 110, 111, 112, 114, 116, 118, 121, 122, 123, 124, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 154, 156, 157, 158, 159, 160, 162, 163, 166, 171, 172, 177, 179, 180, 181, 182, 183, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 248, 249, 250, 251, 253, 255, 256, 258, 262, 265, 266, 267, 268, 269, 271, 272, 283, 284, 286, 288, 289, 290, 293, 294, 295], "still": [2, 3, 4, 5, 12, 13, 14, 15, 21, 23, 38, 39, 40, 47, 59, 66, 67, 68, 75, 79, 94, 98, 103, 132, 182, 201, 203, 204, 205, 210, 212, 217, 224, 226, 227, 229, 233, 235, 236, 242, 248, 255, 269, 290], "experiment": [2, 3, 131, 229], "mathemat": [2, 3, 5, 12, 13, 14, 18, 21, 23, 29, 31, 33, 34, 36, 37, 40, 42, 43, 46, 48, 49, 53, 57, 59, 66, 67, 68, 69, 72, 73, 74, 75, 80, 81, 92, 94, 97, 100, 103, 107, 108, 109, 118, 119, 122, 136, 148, 187, 198, 200, 201, 204, 205, 207, 208, 211, 216, 217, 225, 226, 230, 232, 233, 236, 237, 242, 249, 250, 256, 262, 266, 269, 271, 283, 286, 287, 288, 289, 292, 294], "softwar": [2, 5, 94, 211, 288], "itself": [2, 3, 4, 5, 7, 11, 12, 13, 14, 23, 44, 56, 58, 59, 65, 67, 69, 72, 73, 80, 84, 89, 107, 127, 131, 132, 147, 172, 179, 198, 200, 203, 204, 206, 207, 210, 212, 213, 217, 225, 226, 229, 236, 241, 242, 243, 250, 252, 255, 271, 288], "_sage_": 2, "basic": [2, 3, 4, 5, 7, 10, 11, 13, 14, 21, 23, 36, 40, 42, 47, 48, 49, 55, 58, 62, 65, 66, 70, 73, 83, 85, 90, 91, 92, 97, 98, 101, 104, 118, 126, 131, 132, 144, 145, 147, 149, 150, 156, 166, 180, 187, 190, 195, 198, 199, 201, 203, 204, 206, 208, 209, 210, 212, 214, 215, 217, 218, 224, 229, 230, 233, 234, 235, 236, 237, 248, 250, 255, 256, 260, 268, 269, 270, 277, 279, 280, 284, 285, 286, 287, 292], "should": [2, 4, 5, 8, 9, 11, 12, 13, 14, 15, 18, 21, 22, 23, 27, 34, 36, 39, 41, 43, 46, 47, 48, 49, 58, 59, 60, 61, 63, 66, 67, 68, 70, 71, 73, 75, 77, 78, 79, 80, 81, 82, 84, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 103, 107, 109, 110, 116, 118, 122, 127, 128, 131, 132, 134, 136, 144, 146, 147, 149, 150, 151, 162, 165, 166, 170, 172, 174, 176, 177, 180, 182, 184, 185, 187, 188, 192, 197, 200, 201, 203, 204, 205, 206, 207, 208, 210, 212, 213, 216, 217, 219, 220, 223, 224, 225, 226, 227, 229, 230, 232, 233, 235, 236, 237, 241, 242, 246, 248, 249, 250, 251, 252, 253, 255, 256, 258, 262, 266, 283, 284, 286, 287, 290], "beyond": [2, 11, 12, 21, 29, 61, 83, 107, 146, 204, 207, 226, 229, 290], "control": [2, 7, 9, 13, 15, 17, 21, 23, 26, 47, 49, 67, 68, 71, 92, 97, 98, 146, 149, 162, 166, 177, 178, 182, 206, 213, 214, 218, 225, 230, 236, 255, 279, 283], "workflow": [2, 6, 7, 8, 9, 10, 12, 33, 34, 37, 149, 207, 250, 256, 291], "instruct": [2, 4, 5, 7, 8, 9, 11, 13, 15, 19, 24, 37, 48, 217, 235, 249, 250], "base": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 15, 21, 23, 27, 38, 40, 42, 43, 46, 48, 49, 56, 57, 58, 63, 64, 65, 67, 68, 70, 72, 73, 74, 75, 78, 80, 83, 90, 94, 95, 96, 97, 99, 100, 107, 108, 115, 123, 126, 129, 131, 132, 134, 149, 150, 151, 160, 162, 166, 167, 171, 177, 178, 180, 182, 184, 187, 188, 190, 192, 194, 197, 198, 201, 202, 203, 206, 207, 208, 209, 210, 211, 212, 213, 217, 219, 224, 225, 226, 227, 229, 230, 233, 235, 237, 241, 242, 243, 248, 249, 250, 251, 252, 253, 255, 256, 257, 262, 265, 266, 269, 289, 294], "pytest": [2, 3, 11, 12, 13, 245, 251, 253, 256, 281], "entir": [2, 3, 12, 21, 58, 67, 68, 71, 72, 75, 81, 83, 92, 106, 124, 131, 143, 147, 192, 204, 206, 212, 225, 242, 251, 253, 288, 294], "import_modul": [2, 12], "own": [2, 4, 9, 11, 12, 15, 23, 42, 51, 58, 59, 67, 83, 111, 126, 132, 149, 212, 217, 224, 229, 233, 252, 255, 256, 288], "runner": [2, 12, 248], "access": [2, 4, 5, 9, 14, 15, 21, 23, 41, 42, 43, 48, 67, 75, 96, 97, 100, 103, 108, 111, 118, 119, 126, 127, 131, 132, 150, 191, 192, 198, 201, 203, 206, 207, 208, 210, 212, 229, 233, 238, 241, 249, 250, 266, 269, 289, 293], "script": [2, 4, 11, 14, 39, 75, 197, 249], "directori": [2, 4, 5, 7, 8, 11, 12, 38, 43, 48, 233, 248, 249, 258], "prefer": [2, 4, 8, 9, 11, 12, 13, 14, 21, 23, 27, 32, 33, 34, 48, 50, 59, 66, 67, 75, 107, 109, 126, 132, 182, 186, 187, 192, 203, 206, 208, 210, 212, 217, 225, 229, 233, 235, 242, 248, 250, 253, 256, 288, 290], "cloudpickl": 2, "effect": [2, 4, 7, 12, 23, 33, 38, 58, 60, 67, 84, 92, 94, 98, 103, 110, 132, 134, 146, 154, 182, 192, 203, 207, 210, 214, 216, 233, 286], "pickl": 2, "util": [2, 3, 4, 5, 7, 11, 29, 31, 46, 54, 56, 58, 59, 72, 73, 78, 79, 80, 83, 97, 98, 107, 108, 127, 152, 186, 189, 206, 210, 214, 217, 229, 230, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 274, 279, 280], "test_pickl": 2, "py": [2, 3, 4, 11, 12, 21, 47, 67, 78, 92, 94, 103, 131, 160, 162, 203, 206, 208, 214, 217, 224, 227, 233, 234, 243, 246, 248, 253, 256], "necessari": [2, 3, 4, 6, 8, 11, 12, 13, 15, 21, 23, 37, 46, 47, 58, 59, 67, 77, 92, 94, 97, 103, 107, 127, 134, 142, 203, 205, 207, 212, 213, 217, 220, 226, 229, 233, 234, 235, 236, 237, 238, 243, 248, 250, 255, 256, 262, 287, 292], "want": [2, 3, 4, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 44, 46, 48, 49, 50, 51, 59, 67, 68, 74, 79, 81, 83, 86, 92, 94, 98, 100, 103, 104, 107, 108, 116, 118, 121, 128, 132, 149, 165, 175, 176, 179, 182, 185, 187, 194, 196, 200, 201, 203, 205, 206, 207, 210, 212, 213, 214, 216, 217, 218, 224, 225, 227, 229, 230, 233, 234, 235, 236, 237, 238, 243, 246, 248, 250, 252, 255, 256, 267, 269, 272, 283, 284, 286, 288, 289, 290, 291, 293, 294], "check": [2, 3, 4, 5, 7, 8, 9, 11, 14, 15, 17, 18, 19, 21, 22, 23, 30, 34, 36, 42, 43, 46, 47, 48, 50, 53, 56, 58, 59, 60, 65, 66, 67, 68, 72, 75, 79, 90, 92, 96, 97, 98, 100, 103, 104, 107, 118, 123, 124, 131, 132, 146, 149, 162, 170, 182, 184, 185, 190, 198, 203, 204, 206, 207, 208, 210, 212, 213, 219, 225, 227, 229, 233, 234, 235, 236, 237, 241, 242, 246, 248, 250, 253, 255, 265, 269, 286, 294], "pdf": [2, 5, 7, 25, 34, 37, 46, 47, 58, 68, 70, 72, 89, 94, 103, 107, 110, 111, 114, 116, 118, 203, 206, 208, 211, 216, 217, 220, 226, 229, 230, 233, 237, 255, 262], "view": [2, 4, 7, 11, 12, 14, 36, 48, 49, 50, 67, 103, 110, 184, 187, 201, 203, 210, 217, 233, 236, 250, 252, 255], "host": [2, 5], "onlin": [2, 4, 127, 230, 255], "dev": [2, 3, 8, 9, 11, 253], "index": [2, 8, 11, 12, 13, 15, 23, 27, 34, 35, 36, 40, 48, 56, 58, 59, 63, 66, 67, 68, 69, 72, 73, 75, 78, 83, 92, 94, 97, 98, 100, 103, 106, 107, 118, 131, 132, 149, 150, 151, 153, 155, 156, 166, 175, 177, 179, 182, 187, 192, 203, 204, 206, 208, 212, 213, 214, 217, 222, 223, 227, 235, 237, 238, 240, 241, 243, 244, 249, 277], "com": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 23, 25, 38, 40, 44, 46, 58, 60, 61, 67, 68, 70, 71, 72, 73, 75, 77, 83, 84, 92, 94, 98, 103, 107, 116, 202, 211, 220, 222, 225, 226, 229, 230, 233, 236, 237, 255, 258, 290], "sympy_benchmark": 2, "readm": 2, "yourself": [2, 7, 11, 12, 23, 36, 48, 134, 251, 284], "reproduc": [2, 12, 27, 213, 248, 294], "result": [2, 4, 8, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 36, 40, 41, 42, 43, 44, 46, 47, 48, 57, 58, 59, 63, 66, 67, 68, 69, 71, 73, 75, 79, 84, 85, 89, 91, 92, 94, 96, 97, 98, 100, 103, 106, 107, 108, 109, 110, 118, 119, 122, 123, 124, 127, 128, 132, 136, 142, 146, 149, 165, 167, 174, 176, 177, 179, 181, 182, 184, 185, 186, 187, 191, 192, 201, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 219, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 248, 249, 250, 252, 253, 255, 256, 258, 262, 265, 267, 286, 288, 289, 290, 294], "add": [2, 3, 4, 9, 12, 13, 14, 15, 18, 21, 34, 40, 42, 46, 48, 56, 58, 63, 68, 71, 74, 82, 84, 92, 96, 100, 103, 107, 110, 112, 114, 123, 131, 132, 149, 160, 166, 176, 181, 182, 185, 200, 201, 203, 206, 207, 208, 210, 212, 213, 214, 217, 218, 227, 229, 230, 233, 234, 236, 237, 239, 241, 242, 243, 251, 256, 260, 284, 286, 289, 293, 294], "new": [2, 3, 5, 6, 7, 8, 9, 12, 14, 21, 23, 30, 37, 42, 43, 47, 48, 49, 58, 59, 66, 67, 68, 69, 75, 80, 83, 92, 94, 95, 98, 103, 107, 110, 112, 114, 118, 123, 126, 132, 139, 141, 148, 149, 151, 172, 178, 179, 182, 184, 187, 188, 190, 191, 192, 196, 201, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 217, 224, 227, 229, 230, 233, 235, 236, 237, 238, 239, 248, 249, 253, 256, 262, 264, 266, 282, 283, 286, 289, 290, 292], "asv": 2, "airspe": 2, "veloc": [2, 103, 122, 123, 126, 127, 129, 131, 134, 135, 136, 139, 140, 141, 143, 146, 147, 149, 156, 184, 186, 187, 191, 192, 196, 198, 201, 269, 271], "name": [2, 3, 4, 5, 8, 12, 13, 14, 15, 21, 23, 34, 35, 39, 42, 43, 47, 48, 49, 50, 54, 57, 60, 63, 66, 67, 68, 69, 72, 73, 74, 75, 77, 80, 92, 94, 95, 96, 100, 103, 107, 109, 110, 114, 123, 126, 129, 131, 132, 134, 149, 153, 162, 177, 184, 187, 188, 189, 190, 191, 192, 194, 196, 198, 201, 203, 204, 205, 207, 208, 210, 212, 214, 217, 223, 227, 229, 230, 233, 234, 236, 237, 242, 243, 246, 248, 249, 250, 251, 256, 258, 259, 260, 262, 266, 269, 274, 283, 286, 289, 290, 294], "describ": [3, 4, 5, 7, 11, 13, 15, 21, 22, 23, 27, 34, 40, 47, 49, 57, 58, 59, 61, 62, 65, 66, 67, 68, 72, 75, 77, 82, 83, 92, 94, 98, 103, 106, 107, 118, 122, 126, 127, 128, 129, 131, 132, 135, 136, 137, 139, 141, 142, 143, 144, 145, 146, 147, 161, 182, 187, 191, 192, 198, 200, 201, 204, 206, 207, 210, 212, 218, 224, 227, 229, 230, 233, 236, 237, 241, 250, 255, 256, 262, 264, 269, 284], "step": [3, 8, 9, 23, 24, 25, 37, 46, 48, 58, 62, 63, 66, 67, 68, 75, 91, 92, 94, 103, 107, 108, 127, 131, 139, 142, 144, 149, 150, 184, 196, 201, 202, 203, 206, 207, 208, 210, 212, 213, 217, 218, 219, 222, 225, 226, 227, 229, 230, 233, 235, 237, 242, 249, 255, 256, 284], "properli": [3, 11, 12, 14, 23, 47, 67, 73, 79, 92, 103, 128, 132, 144, 159, 163, 166, 180, 205, 207, 217, 233, 236, 246, 250, 256, 290, 295], "current": [3, 5, 11, 12, 13, 15, 21, 29, 30, 40, 43, 46, 47, 48, 49, 51, 58, 61, 62, 64, 65, 66, 67, 69, 73, 75, 77, 79, 82, 87, 90, 92, 94, 96, 98, 103, 107, 109, 110, 115, 122, 126, 132, 142, 176, 181, 182, 186, 190, 201, 203, 204, 205, 206, 208, 210, 213, 214, 216, 217, 218, 224, 227, 229, 230, 232, 233, 234, 235, 236, 237, 243, 248, 249, 250, 252, 266, 280, 290, 295], "activ": [3, 8, 9, 16, 134, 203, 246, 251, 253], "updat": [3, 11, 13, 15, 34, 38, 67, 131, 136, 162, 172, 175, 176, 178, 202, 206, 210, 213, 217, 230, 243, 253], "continu": [3, 4, 5, 12, 13, 19, 22, 23, 25, 46, 48, 57, 59, 61, 67, 72, 73, 75, 92, 95, 98, 107, 115, 116, 118, 177, 180, 197, 208, 210, 213, 230, 232, 233, 241, 285], "someon": [3, 11, 12, 233, 252, 287], "warn": [3, 4, 15, 23, 67, 68, 82, 109, 192, 201, 203, 205, 217, 233, 235, 246, 248, 250, 254, 255, 281, 290], "screen": [3, 14, 95, 197, 201, 248, 293], "indic": [3, 4, 11, 12, 15, 18, 21, 31, 34, 35, 46, 47, 48, 49, 51, 56, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 75, 77, 82, 83, 92, 94, 97, 98, 100, 103, 106, 107, 119, 131, 136, 166, 177, 179, 180, 182, 187, 191, 192, 202, 206, 207, 208, 212, 213, 214, 217, 224, 225, 226, 229, 230, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 255, 290], "remov": [3, 11, 12, 13, 21, 29, 40, 41, 42, 58, 61, 65, 67, 71, 73, 82, 83, 92, 97, 103, 107, 110, 112, 114, 123, 126, 127, 139, 141, 146, 166, 182, 208, 210, 213, 215, 216, 217, 229, 230, 233, 235, 236, 238, 239, 249, 250, 251, 253, 255, 256, 283, 294], "futur": [3, 11, 12, 21, 22, 48, 49, 67, 92, 94, 103, 109, 126, 131, 134, 142, 146, 182, 186, 199, 203, 205, 206, 216, 217, 229, 233, 242, 248, 251, 253, 256, 279, 289, 295], "chanc": [3, 12, 15, 22, 67, 95, 103, 227, 237, 289], "break": [3, 4, 11, 12, 13, 23, 47, 48, 59, 67, 68, 107, 200, 214, 217, 225, 255], "opportun": [3, 4, 229], "messag": [3, 7, 12, 13, 68, 95, 246, 251, 253, 258], "wrong": [3, 5, 11, 12, 13, 58, 67, 68, 75, 77, 103, 192, 207, 233, 251, 286, 290], "answer": [3, 7, 12, 21, 23, 27, 58, 67, 71, 89, 92, 94, 97, 103, 107, 187, 210, 214, 226, 227, 229, 235, 237, 252, 258, 288, 290, 294], "made": [3, 5, 11, 12, 13, 14, 15, 21, 23, 35, 61, 63, 67, 68, 73, 76, 77, 80, 83, 84, 94, 97, 103, 107, 109, 132, 143, 146, 149, 201, 204, 206, 208, 210, 212, 213, 217, 218, 224, 225, 226, 229, 233, 235, 236, 237, 250, 255, 258, 271, 289], "lightli": 3, "fix": [3, 4, 7, 12, 13, 48, 58, 60, 63, 65, 68, 72, 75, 79, 96, 103, 107, 110, 111, 123, 126, 129, 131, 134, 143, 149, 166, 171, 175, 178, 182, 187, 192, 196, 200, 201, 203, 207, 210, 212, 213, 214, 217, 223, 227, 235, 237, 255, 262, 264], "whether": [3, 7, 8, 12, 13, 14, 21, 22, 23, 27, 32, 34, 35, 36, 46, 47, 48, 53, 58, 66, 67, 68, 74, 75, 79, 82, 94, 95, 97, 98, 103, 107, 114, 122, 127, 128, 131, 132, 165, 170, 189, 194, 201, 203, 206, 207, 208, 212, 213, 217, 220, 224, 225, 229, 230, 233, 235, 236, 237, 238, 248, 250, 255, 256, 262, 265, 286, 290], "worth": [3, 21, 23, 127, 192, 267, 269], "pain": 3, "frustrat": 3, "go": [3, 4, 5, 7, 9, 11, 12, 23, 38, 47, 48, 58, 68, 72, 73, 92, 127, 132, 134, 147, 149, 150, 176, 187, 196, 203, 212, 213, 224, 227, 233, 286, 288, 289, 292, 294], "seek": [3, 235], "stabl": [3, 4, 5, 23, 25, 48, 67, 95, 103, 109, 114, 118, 249, 283], "altern": [3, 4, 8, 13, 14, 15, 22, 23, 38, 48, 55, 58, 59, 66, 67, 71, 72, 73, 74, 75, 98, 100, 104, 108, 132, 144, 146, 192, 200, 202, 203, 205, 206, 207, 212, 213, 217, 222, 224, 226, 235, 236, 238, 239, 255, 286, 288, 290], "done": [3, 4, 9, 11, 12, 13, 14, 15, 19, 23, 42, 43, 45, 46, 47, 48, 58, 60, 65, 67, 68, 69, 72, 75, 78, 79, 92, 94, 98, 103, 107, 126, 127, 131, 132, 134, 140, 147, 149, 168, 177, 178, 179, 182, 184, 185, 192, 198, 200, 201, 203, 204, 206, 210, 213, 214, 216, 217, 218, 226, 229, 230, 233, 235, 236, 237, 242, 243, 248, 249, 252, 256, 266, 267, 283, 286, 288, 289, 290], "exist": [3, 7, 11, 13, 14, 19, 21, 23, 33, 36, 46, 47, 48, 51, 58, 67, 71, 77, 79, 82, 83, 84, 85, 94, 97, 103, 107, 114, 128, 131, 172, 198, 201, 203, 204, 205, 206, 208, 210, 212, 217, 224, 225, 227, 230, 233, 235, 236, 248, 256, 267, 288, 290, 295], "necessarili": [3, 4, 21, 44, 67, 68, 69, 92, 94, 97, 127, 204, 205, 212, 213, 215, 229, 233, 235, 236], "supplant": 3, "old": [3, 12, 13, 14, 15, 67, 68, 69, 95, 146, 151, 187, 197, 203, 204, 208, 217, 218, 229, 233, 236, 238, 283], "sometim": [3, 4, 5, 11, 12, 14, 15, 21, 23, 27, 34, 47, 48, 67, 72, 75, 91, 92, 118, 142, 146, 174, 182, 201, 204, 207, 212, 217, 219, 224, 226, 230, 233, 235, 246, 255, 283, 290], "alongsid": [3, 11, 12, 13, 23, 100], "newer": [3, 12, 14, 200, 235], "solveset": [3, 23, 33, 36, 127, 149, 215, 231, 232, 235, 274, 295], "superior": [3, 217], "replac": [3, 4, 9, 12, 13, 14, 15, 21, 46, 48, 58, 66, 67, 68, 71, 72, 73, 75, 77, 81, 94, 97, 98, 103, 107, 108, 109, 122, 124, 126, 149, 171, 177, 192, 203, 204, 210, 213, 214, 218, 224, 226, 227, 229, 233, 235, 236, 243, 244, 255, 256, 258, 283, 292], "older": [3, 5, 12, 14, 90, 132, 207, 217, 235], "solv": [3, 4, 11, 13, 14, 15, 16, 19, 21, 23, 24, 25, 26, 48, 51, 63, 66, 67, 75, 80, 92, 94, 98, 99, 103, 107, 110, 112, 113, 114, 126, 127, 128, 131, 132, 135, 136, 139, 141, 142, 144, 146, 149, 185, 206, 210, 214, 215, 216, 217, 219, 229, 230, 232, 233, 234, 237, 279, 284, 285, 288, 290, 293], "remain": [3, 12, 13, 14, 23, 42, 43, 48, 58, 59, 61, 63, 67, 68, 73, 92, 98, 107, 109, 119, 132, 181, 198, 200, 201, 212, 213, 214, 223, 226, 227, 233, 234, 235, 237, 239, 243, 252, 255, 256, 266, 271, 283, 286, 288, 289, 290], "intact": [3, 13, 48, 249], "cogniz": 3, "properti": [3, 14, 18, 23, 27, 32, 34, 40, 42, 43, 46, 47, 48, 49, 50, 51, 55, 56, 58, 59, 60, 61, 62, 66, 67, 68, 69, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 90, 92, 94, 98, 100, 103, 107, 110, 111, 112, 114, 115, 118, 123, 126, 127, 129, 131, 147, 149, 151, 153, 156, 157, 160, 161, 166, 167, 168, 170, 171, 178, 180, 182, 184, 186, 187, 189, 190, 191, 192, 193, 194, 198, 201, 202, 203, 205, 206, 207, 208, 210, 212, 213, 216, 219, 220, 223, 224, 225, 227, 230, 233, 236, 237, 242, 243, 248, 250, 251, 262, 265, 266, 267, 269, 271, 290], "attr": [3, 48], "imposs": [3, 4, 12, 13, 14, 23, 34, 67, 207, 226, 233, 234, 246, 286, 294], "later": [3, 13, 19, 48, 58, 92, 97, 98, 122, 128, 129, 131, 134, 136, 137, 144, 146, 149, 156, 191, 200, 207, 210, 216, 217, 218, 227, 229, 233, 252, 266, 283, 284, 286, 288, 289, 294], "unsur": [3, 4, 12], "about": [3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 27, 32, 34, 36, 37, 38, 40, 41, 43, 44, 47, 48, 58, 59, 60, 61, 67, 71, 73, 75, 77, 78, 79, 81, 82, 83, 87, 89, 93, 94, 96, 103, 107, 110, 111, 118, 122, 123, 124, 126, 127, 128, 129, 131, 132, 136, 146, 147, 177, 179, 180, 182, 186, 191, 192, 200, 201, 202, 204, 206, 207, 212, 214, 217, 219, 224, 229, 230, 231, 233, 237, 241, 242, 248, 249, 250, 251, 252, 253, 262, 264, 266, 269, 270, 277, 280, 283, 285, 286, 288, 289, 290, 294], "option": [3, 4, 5, 8, 11, 12, 15, 23, 27, 29, 41, 43, 46, 48, 58, 65, 66, 67, 68, 69, 70, 71, 73, 76, 77, 80, 81, 83, 84, 86, 94, 95, 98, 100, 103, 104, 107, 108, 109, 110, 116, 118, 122, 123, 124, 126, 127, 128, 129, 131, 147, 149, 155, 166, 171, 172, 174, 177, 179, 184, 186, 191, 192, 197, 203, 204, 205, 206, 207, 208, 212, 213, 214, 216, 217, 218, 219, 220, 222, 224, 225, 226, 229, 230, 233, 234, 235, 236, 237, 239, 242, 243, 248, 249, 250, 253, 255, 256, 262, 287, 293, 294], "mark": [3, 4, 5, 116, 155, 167, 230, 246, 251, 253], "explicitli": [3, 12, 13, 14, 21, 23, 48, 58, 59, 67, 68, 70, 73, 75, 80, 84, 100, 103, 108, 118, 132, 147, 192, 203, 205, 206, 207, 208, 210, 213, 217, 229, 233, 235, 253, 286, 290, 293, 295], "privat": [3, 4, 67, 68, 132, 203, 250], "With": [3, 13, 15, 22, 25, 38, 48, 50, 66, 67, 71, 92, 107, 131, 135, 136, 137, 143, 145, 146, 155, 179, 182, 201, 203, 204, 205, 206, 207, 208, 215, 216, 217, 224, 229, 238, 255, 288, 289], "being": [3, 5, 12, 14, 15, 17, 21, 22, 44, 46, 48, 58, 59, 65, 66, 67, 68, 72, 73, 75, 77, 79, 80, 83, 84, 92, 97, 98, 103, 104, 107, 110, 111, 114, 122, 131, 132, 134, 146, 147, 149, 150, 178, 187, 191, 194, 198, 200, 201, 202, 203, 204, 206, 207, 212, 213, 214, 216, 217, 226, 227, 229, 230, 233, 234, 235, 236, 237, 243, 246, 248, 252, 253, 255, 256, 258, 262, 267, 271, 288, 290], "decid": [3, 4, 9, 19, 21, 22, 23, 27, 47, 66, 98, 122, 146, 175, 207, 210, 212, 213, 217, 233, 236, 250, 290], "reason": [3, 5, 11, 12, 13, 14, 17, 21, 22, 23, 33, 34, 40, 48, 59, 65, 67, 71, 75, 92, 95, 101, 103, 127, 128, 132, 134, 139, 142, 146, 153, 187, 197, 201, 206, 207, 210, 211, 214, 217, 225, 227, 229, 233, 236, 246, 252, 253, 255, 256, 283, 284, 288, 289, 290], "confus": [3, 5, 12, 13, 14, 21, 30, 67, 72, 97, 155, 201, 205, 213, 236, 283, 284, 286], "unnecessari": [3, 4, 5, 12, 44, 48, 213, 216, 237, 248, 287], "redund": [3, 12, 21, 58, 65, 97, 103, 206, 233, 250], "usabl": [3, 34, 207, 208, 217, 236, 288], "breakag": 3, "serious": 3, "taken": [3, 12, 14, 48, 49, 50, 55, 58, 65, 66, 67, 72, 73, 75, 84, 98, 107, 118, 120, 122, 123, 146, 149, 179, 185, 192, 196, 202, 203, 207, 212, 213, 217, 220, 224, 226, 227, 236, 237, 242, 250, 255, 262], "commun": [3, 5, 7, 11, 38, 202, 233, 235, 237, 290], "Be": [3, 4, 8, 23, 46, 67, 97, 103, 210, 233, 236, 244, 256], "sure": [3, 4, 5, 8, 9, 11, 12, 23, 48, 58, 67, 79, 131, 132, 162, 187, 213, 214, 224, 233, 235, 236, 249, 255, 286, 289, 294], "inde": [3, 12, 19, 23, 55, 58, 66, 92, 204, 227, 233, 244, 248, 288], "right": [3, 4, 5, 8, 11, 12, 13, 15, 19, 23, 25, 28, 29, 32, 34, 40, 46, 48, 49, 58, 59, 63, 67, 68, 70, 72, 73, 75, 83, 84, 92, 94, 97, 98, 103, 106, 107, 109, 110, 111, 112, 114, 118, 127, 131, 132, 146, 149, 150, 154, 161, 166, 168, 170, 171, 176, 179, 182, 191, 192, 198, 201, 202, 203, 204, 206, 212, 213, 214, 215, 217, 219, 220, 224, 225, 227, 233, 234, 236, 237, 248, 250, 252, 255, 269, 284, 288, 290, 294], "again": [3, 8, 9, 12, 15, 19, 22, 50, 59, 67, 82, 107, 131, 132, 134, 177, 178, 191, 192, 200, 204, 205, 212, 220, 227, 233, 246, 266, 286, 294], "second": [3, 5, 9, 11, 12, 14, 15, 19, 21, 22, 23, 27, 29, 31, 32, 34, 36, 39, 40, 43, 46, 48, 58, 59, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 77, 80, 81, 83, 94, 103, 107, 108, 110, 111, 116, 118, 119, 122, 123, 126, 127, 129, 132, 136, 139, 141, 142, 143, 145, 147, 153, 155, 156, 159, 163, 168, 171, 176, 177, 179, 180, 185, 186, 187, 189, 191, 192, 193, 200, 201, 203, 206, 207, 210, 211, 212, 213, 217, 219, 227, 229, 230, 233, 235, 236, 237, 238, 239, 255, 256, 262, 265, 266, 267, 279, 283, 288, 289, 290], "know": [3, 4, 5, 12, 13, 14, 15, 21, 22, 23, 27, 34, 35, 36, 41, 43, 47, 50, 59, 67, 68, 71, 79, 84, 92, 94, 103, 107, 132, 147, 150, 176, 180, 184, 185, 187, 192, 200, 201, 203, 206, 213, 214, 216, 217, 227, 229, 233, 235, 236, 237, 251, 255, 256, 267, 283, 284, 286, 287, 288, 289, 292, 294], "stop": [3, 8, 11, 48, 49, 59, 67, 103, 107, 203, 223, 225, 233, 237], "after": [3, 4, 5, 8, 9, 11, 12, 13, 15, 38, 40, 42, 43, 47, 49, 55, 58, 59, 63, 65, 66, 67, 68, 69, 73, 82, 84, 89, 94, 98, 103, 107, 109, 110, 118, 131, 143, 144, 146, 149, 151, 155, 167, 179, 187, 191, 198, 201, 206, 210, 212, 213, 214, 215, 217, 218, 223, 230, 233, 234, 235, 236, 238, 248, 251, 256, 258, 262, 265, 269, 283, 284, 286, 290, 294], "count": [3, 5, 14, 59, 66, 67, 68, 72, 77, 97, 103, 106, 107, 177, 213, 225, 226, 229, 236, 237, 243, 252, 255], "basi": [3, 67, 69, 96, 100, 103, 123, 129, 139, 141, 167, 176, 177, 179, 182, 184, 187, 190, 191, 192, 198, 200, 202, 204, 206, 208, 213, 216, 227, 229, 235, 236, 238, 243, 265, 266, 269, 292], "exact": [3, 11, 12, 13, 14, 15, 21, 23, 25, 33, 44, 66, 67, 68, 71, 77, 82, 89, 92, 94, 98, 103, 110, 149, 176, 206, 207, 208, 210, 213, 224, 229, 233, 235, 248, 258, 286, 288, 293], "rule": [3, 5, 11, 12, 13, 19, 21, 23, 48, 58, 59, 66, 67, 75, 90, 92, 94, 97, 98, 103, 110, 127, 132, 163, 166, 187, 192, 198, 201, 202, 208, 214, 216, 217, 218, 223, 227, 229, 233, 243, 255, 256, 269, 286, 289], "doesn": [3, 4, 12, 13, 15, 23, 27, 48, 91, 132, 136, 146, 149, 201, 205, 214, 216, 226, 229, 236, 295], "constitut": [3, 5, 14, 94, 107, 217], "yet": [3, 9, 11, 15, 21, 23, 41, 43, 46, 47, 71, 94, 131, 146, 162, 204, 207, 208, 212, 214, 216, 225, 233, 236, 284], "fulli": [3, 4, 11, 13, 21, 58, 67, 84, 94, 97, 109, 110, 111, 126, 132, 149, 182, 200, 206, 207, 208, 214, 224, 237, 243, 259], "codifi": 3, "clean": [3, 248], "distinct": [3, 5, 14, 17, 21, 23, 35, 48, 58, 59, 67, 68, 72, 80, 92, 97, 103, 107, 131, 200, 207, 212, 213, 217, 225, 227, 294], "well": [3, 4, 5, 7, 11, 13, 14, 15, 17, 19, 21, 23, 38, 44, 46, 47, 48, 49, 50, 51, 59, 66, 67, 72, 73, 75, 94, 98, 101, 103, 114, 119, 122, 126, 131, 132, 134, 136, 137, 146, 147, 172, 181, 184, 185, 191, 200, 202, 203, 204, 206, 207, 208, 210, 212, 217, 224, 225, 226, 227, 229, 233, 235, 236, 248, 249, 266, 267, 271, 286, 288, 289, 294], "categor": [3, 27, 103, 204], "issu": [3, 5, 7, 12, 13, 14, 15, 22, 23, 27, 29, 30, 31, 32, 33, 34, 35, 38, 39, 46, 66, 67, 84, 94, 97, 103, 108, 142, 162, 199, 202, 211, 212, 214, 217, 225, 226, 235, 236, 248, 250, 252, 253, 255, 258, 279, 285, 286, 289, 294], "here": [3, 4, 5, 7, 9, 11, 12, 13, 14, 17, 19, 21, 22, 23, 27, 29, 30, 31, 32, 33, 34, 37, 38, 42, 43, 48, 49, 51, 56, 57, 58, 59, 65, 66, 67, 68, 69, 71, 72, 73, 75, 83, 84, 85, 89, 90, 92, 94, 97, 98, 103, 106, 107, 108, 109, 110, 114, 118, 122, 127, 132, 133, 134, 139, 140, 141, 144, 146, 147, 149, 150, 172, 177, 182, 191, 197, 198, 200, 201, 203, 204, 206, 207, 208, 210, 212, 213, 214, 217, 218, 224, 226, 227, 229, 230, 233, 235, 236, 237, 241, 242, 249, 250, 252, 253, 255, 256, 267, 269, 271, 282, 283, 284, 286, 288, 289, 290, 292, 293, 294], "gener": [3, 8, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 42, 44, 45, 46, 47, 49, 50, 51, 52, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 81, 83, 85, 90, 92, 94, 95, 96, 97, 100, 103, 107, 108, 109, 118, 122, 123, 126, 127, 128, 131, 132, 134, 135, 136, 137, 139, 141, 142, 143, 145, 146, 147, 149, 150, 154, 165, 166, 167, 168, 171, 176, 177, 180, 181, 182, 187, 189, 192, 193, 196, 197, 198, 200, 202, 203, 204, 205, 206, 208, 210, 213, 214, 215, 216, 217, 218, 219, 223, 226, 227, 229, 230, 232, 233, 234, 235, 237, 242, 243, 249, 250, 252, 253, 254, 255, 256, 262, 266, 267, 269, 270, 271, 277, 284, 286, 287, 288, 289, 290, 294, 295], "guidelin": [3, 11, 36, 233], "exhaust": [3, 21, 227, 255, 287], "alwai": [3, 4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 32, 38, 40, 47, 58, 59, 66, 67, 68, 69, 71, 73, 75, 77, 79, 82, 83, 91, 92, 94, 97, 98, 103, 106, 107, 112, 114, 118, 119, 131, 132, 134, 136, 140, 150, 182, 184, 187, 188, 198, 200, 204, 205, 206, 207, 208, 210, 212, 213, 217, 218, 219, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 244, 248, 250, 255, 256, 262, 264, 269, 284, 286, 287, 288, 289, 294], "posit": [3, 11, 12, 13, 14, 15, 21, 22, 23, 25, 27, 31, 41, 42, 43, 44, 45, 47, 48, 49, 51, 56, 58, 59, 60, 62, 63, 66, 67, 68, 69, 71, 72, 73, 75, 77, 79, 80, 83, 92, 94, 96, 97, 98, 99, 103, 104, 106, 107, 110, 111, 112, 114, 118, 120, 126, 129, 132, 134, 136, 139, 141, 143, 146, 147, 149, 151, 154, 156, 160, 177, 180, 182, 193, 194, 196, 198, 200, 201, 204, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 222, 223, 225, 226, 227, 229, 230, 233, 235, 236, 237, 238, 243, 255, 256, 262, 265, 266, 267, 269, 271, 272, 290, 294, 295], "convent": [3, 4, 5, 23, 34, 58, 59, 63, 66, 67, 68, 72, 73, 75, 77, 82, 92, 94, 97, 109, 110, 111, 114, 118, 121, 134, 149, 151, 155, 176, 177, 179, 184, 185, 198, 203, 217, 233, 234, 236, 237, 243, 271, 286, 294], "defin": [3, 4, 5, 11, 12, 13, 14, 15, 17, 19, 21, 22, 36, 39, 40, 42, 43, 46, 48, 49, 50, 51, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 90, 92, 94, 95, 98, 100, 103, 107, 110, 111, 116, 122, 123, 126, 129, 131, 132, 134, 135, 139, 141, 142, 143, 147, 149, 150, 153, 159, 161, 163, 168, 171, 177, 179, 180, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 219, 220, 223, 224, 225, 227, 229, 230, 233, 235, 236, 237, 238, 242, 243, 249, 250, 251, 255, 256, 257, 258, 262, 264, 265, 266, 267, 268, 269, 271, 272, 286, 288, 294], "And": [3, 11, 12, 13, 22, 23, 29, 42, 58, 59, 66, 67, 68, 75, 92, 97, 98, 103, 106, 126, 154, 201, 203, 205, 213, 214, 217, 225, 229, 230, 235, 236, 237, 255, 256, 267, 294], "aren": [3, 11, 12, 13, 14, 23, 48, 67, 132, 216, 236], "don": [3, 11, 12, 13, 15, 22, 23, 43, 48, 92, 97, 103, 108, 109, 122, 132, 191, 200, 201, 207, 217, 227, 236, 238, 246, 251, 271, 283, 284, 288, 289, 294], "onli": [3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 27, 30, 31, 32, 33, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 78, 80, 81, 83, 84, 85, 90, 92, 94, 95, 96, 97, 98, 103, 104, 107, 108, 109, 114, 116, 118, 124, 126, 127, 129, 132, 134, 135, 136, 138, 139, 141, 143, 144, 146, 147, 150, 155, 157, 176, 177, 181, 182, 184, 187, 191, 192, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 229, 230, 233, 234, 235, 237, 238, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 262, 265, 267, 269, 271, 272, 283, 284, 286, 287, 289, 290, 294, 295], "form": [3, 5, 11, 12, 13, 14, 19, 21, 23, 25, 32, 33, 40, 43, 44, 45, 46, 48, 49, 57, 58, 59, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 80, 83, 87, 89, 90, 92, 94, 96, 98, 100, 102, 103, 107, 109, 110, 111, 112, 114, 115, 118, 122, 123, 126, 127, 128, 131, 132, 134, 136, 139, 141, 142, 143, 144, 145, 147, 149, 150, 159, 162, 163, 164, 166, 176, 177, 180, 182, 184, 187, 190, 191, 192, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 242, 243, 248, 249, 255, 262, 265, 266, 268, 269, 271, 277, 284, 288, 289, 290, 293, 294, 295], "differ": [3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 20, 22, 23, 27, 29, 30, 31, 32, 33, 34, 35, 39, 47, 48, 49, 50, 56, 57, 58, 59, 63, 66, 67, 68, 69, 71, 72, 73, 75, 78, 80, 82, 83, 87, 89, 91, 92, 94, 95, 96, 97, 100, 103, 107, 108, 109, 110, 116, 118, 122, 123, 127, 129, 131, 132, 134, 138, 146, 150, 154, 155, 167, 168, 176, 177, 180, 182, 184, 186, 187, 191, 192, 193, 196, 197, 198, 201, 203, 204, 205, 206, 208, 210, 212, 213, 214, 216, 217, 218, 219, 220, 222, 224, 225, 226, 229, 230, 233, 234, 235, 236, 237, 238, 241, 243, 246, 248, 249, 250, 251, 252, 253, 255, 256, 262, 265, 269, 271, 285, 286, 288, 289, 290, 293, 294], "equival": [3, 12, 13, 14, 15, 17, 21, 22, 23, 25, 32, 34, 40, 44, 48, 49, 57, 58, 63, 67, 68, 71, 73, 75, 92, 94, 103, 107, 109, 115, 116, 118, 126, 132, 165, 176, 179, 182, 185, 186, 192, 197, 201, 203, 204, 205, 206, 207, 208, 212, 213, 217, 224, 225, 229, 230, 233, 235, 236, 238, 239, 242, 243, 252, 256, 258, 259], "same": [3, 4, 5, 8, 11, 12, 13, 14, 15, 19, 21, 22, 23, 27, 29, 31, 34, 40, 42, 43, 44, 46, 47, 48, 50, 56, 57, 58, 59, 63, 66, 67, 68, 69, 72, 74, 75, 77, 80, 81, 82, 83, 84, 89, 90, 92, 94, 96, 97, 98, 100, 103, 107, 109, 110, 111, 118, 119, 122, 123, 126, 130, 132, 136, 139, 140, 143, 146, 166, 168, 176, 179, 180, 182, 184, 185, 186, 187, 189, 190, 191, 192, 194, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 242, 243, 244, 246, 248, 250, 251, 252, 253, 255, 256, 258, 262, 264, 266, 267, 271, 284, 286, 289, 290, 293, 294], "intern": [3, 13, 14, 15, 21, 22, 29, 46, 48, 49, 58, 67, 70, 71, 72, 75, 83, 84, 87, 99, 103, 107, 111, 114, 116, 134, 146, 147, 155, 176, 177, 187, 204, 206, 208, 209, 211, 213, 215, 217, 227, 229, 232, 233, 234, 235, 236, 237, 241, 243, 246, 250, 252, 255, 280, 289, 293], "Such": [3, 4, 12, 21, 48, 67, 83, 136, 204, 205, 212, 218, 226, 227, 229, 283, 289], "prefix": [3, 11, 48, 67, 103, 107, 186, 189, 190, 207, 210, 214, 217, 230, 233, 249, 250, 255, 279], "underscor": [3, 4, 12, 13, 67, 103, 233, 243, 251], "_": [3, 4, 5, 11, 13, 15, 17, 19, 23, 25, 42, 43, 47, 55, 56, 58, 59, 60, 63, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78, 80, 81, 82, 83, 92, 94, 97, 98, 99, 100, 101, 103, 105, 107, 109, 118, 144, 147, 149, 161, 182, 187, 191, 197, 200, 202, 206, 208, 212, 213, 216, 217, 218, 220, 224, 225, 226, 227, 229, 230, 233, 234, 235, 238, 239, 255, 265, 267, 293], "univers": [3, 14, 48, 202, 208, 211, 225, 230, 235, 236], "adher": [3, 5, 92], "codebas": [3, 12, 13, 21, 207, 246], "anyth": [3, 4, 5, 12, 13, 15, 23, 46, 48, 67, 68, 78, 82, 103, 132, 156, 166, 214, 217, 223, 225, 229, 233, 235, 249, 255, 258, 286], "were": [3, 5, 11, 12, 13, 14, 15, 17, 21, 23, 47, 50, 59, 61, 67, 68, 73, 84, 92, 98, 103, 107, 108, 109, 122, 131, 146, 191, 198, 201, 204, 206, 208, 210, 211, 212, 213, 216, 217, 218, 226, 229, 235, 255, 256, 258, 286, 288, 289, 293, 294], "incorrect": [3, 5, 11, 12, 13, 22, 23, 33, 58, 67, 77, 107, 116, 196, 208, 233, 236, 249, 252, 253], "bug": [3, 4, 7, 11, 12, 21, 23, 38, 46, 68, 207, 225, 233, 236, 286], "despit": [3, 27, 36, 67, 294], "sai": [3, 5, 11, 14, 15, 19, 21, 49, 57, 66, 67, 68, 96, 107, 122, 127, 132, 142, 149, 187, 200, 201, 204, 205, 206, 210, 212, 216, 217, 224, 227, 230, 233, 235, 236, 237, 256, 283, 288, 294], "befor": [3, 4, 7, 9, 10, 11, 12, 13, 14, 15, 21, 22, 23, 34, 36, 38, 48, 58, 59, 61, 63, 67, 68, 69, 75, 95, 98, 103, 107, 109, 110, 111, 122, 128, 131, 132, 134, 135, 136, 139, 140, 146, 149, 151, 182, 191, 197, 201, 205, 207, 212, 213, 217, 218, 224, 225, 229, 230, 233, 235, 236, 237, 244, 248, 251, 255, 256, 266, 287, 288, 289, 294], "recent": [3, 12, 13, 15, 18, 21, 22, 23, 27, 29, 31, 32, 33, 34, 35, 36, 41, 42, 43, 48, 49, 59, 67, 68, 71, 75, 77, 94, 97, 98, 99, 100, 101, 103, 105, 106, 109, 118, 202, 204, 207, 208, 210, 213, 216, 224, 225, 233, 235, 236, 246, 249, 251, 253, 255, 256, 258, 286, 290], "best": [3, 7, 11, 12, 13, 15, 27, 31, 33, 34, 37, 38, 48, 67, 75, 92, 94, 108, 181, 203, 214, 217, 226, 227, 229, 233, 236, 241, 249, 282, 286, 287, 293, 294], "determin": [3, 5, 13, 14, 17, 19, 21, 22, 23, 25, 27, 30, 31, 32, 35, 41, 43, 44, 45, 46, 48, 49, 50, 51, 58, 67, 68, 69, 70, 71, 73, 77, 78, 80, 82, 83, 94, 95, 96, 100, 103, 107, 109, 110, 111, 118, 124, 126, 128, 129, 131, 141, 147, 150, 161, 174, 176, 178, 179, 182, 185, 187, 192, 198, 203, 204, 205, 206, 210, 212, 213, 217, 223, 224, 225, 227, 229, 230, 232, 233, 235, 236, 237, 241, 253, 255, 262, 269, 272, 286, 294], "someth": [3, 4, 5, 9, 11, 13, 14, 15, 21, 22, 23, 36, 46, 48, 67, 68, 71, 77, 92, 97, 98, 103, 107, 122, 132, 133, 149, 175, 188, 191, 203, 207, 208, 216, 224, 225, 229, 233, 236, 248, 250, 256, 283, 286, 288, 289, 292], "re": [3, 11, 15, 23, 45, 46, 48, 58, 59, 67, 68, 71, 73, 75, 92, 94, 103, 192, 194, 198, 204, 210, 217, 218, 219, 225, 226, 227, 233, 235, 248, 265, 267, 284, 286, 289], "harm": 3, "even": [3, 4, 5, 9, 11, 12, 14, 15, 18, 21, 23, 27, 30, 33, 34, 35, 36, 41, 42, 43, 44, 45, 48, 49, 50, 55, 58, 59, 66, 67, 68, 71, 72, 73, 75, 79, 83, 92, 94, 97, 98, 103, 106, 107, 119, 132, 142, 167, 178, 185, 187, 192, 202, 205, 206, 207, 208, 210, 212, 213, 214, 217, 218, 225, 226, 227, 229, 230, 233, 235, 236, 244, 248, 271, 283, 284, 286, 288, 289, 294, 295], "might": [3, 4, 9, 11, 12, 13, 14, 15, 17, 21, 22, 23, 29, 33, 46, 48, 67, 71, 73, 80, 89, 92, 100, 103, 107, 109, 122, 132, 133, 149, 162, 192, 200, 203, 206, 207, 208, 213, 214, 217, 218, 225, 226, 227, 229, 230, 235, 236, 237, 249, 250, 253, 255, 258, 283, 286, 288, 289, 291, 294], "while": [3, 4, 7, 11, 12, 14, 15, 21, 23, 28, 29, 34, 36, 47, 48, 49, 58, 59, 60, 63, 66, 67, 68, 69, 71, 72, 73, 77, 81, 83, 91, 97, 98, 103, 107, 108, 109, 110, 112, 114, 123, 126, 127, 128, 131, 132, 136, 146, 166, 186, 187, 192, 198, 204, 212, 215, 217, 233, 236, 248, 250, 252, 255, 271, 283, 289, 290], "peopl": [3, 4, 7, 9, 11, 70, 75, 94, 103, 187, 237], "upgrad": [3, 39], "immedi": [3, 12, 21, 32, 50, 58, 67, 92, 97, 131, 182, 204, 207, 238, 249, 256], "fire": 3, "uncondition": [3, 12], "correct": [3, 4, 5, 11, 12, 13, 15, 22, 23, 30, 32, 34, 48, 56, 58, 64, 66, 67, 71, 73, 91, 92, 94, 103, 107, 118, 132, 146, 200, 201, 210, 213, 224, 230, 233, 235, 236, 241, 249, 255, 286, 293], "question": [3, 4, 5, 7, 11, 12, 19, 21, 66, 69, 77, 84, 92, 94, 97, 107, 122, 184, 187, 191, 204, 207, 212, 227, 236, 255, 258], "read": [3, 4, 5, 9, 11, 12, 13, 23, 36, 59, 73, 92, 107, 111, 149, 200, 201, 206, 207, 208, 214, 217, 230, 243, 244, 252, 256, 259, 287, 293, 294], "previou": [3, 4, 12, 13, 23, 51, 56, 57, 58, 59, 62, 67, 72, 73, 94, 97, 98, 106, 123, 146, 184, 200, 201, 210, 223, 230, 234, 238, 255, 287, 289, 294], "unchang": [3, 13, 14, 23, 58, 59, 67, 94, 103, 118, 186, 206, 213, 217, 223, 226, 229, 236, 283], "dure": [3, 12, 13, 15, 39, 48, 67, 68, 98, 103, 107, 109, 123, 127, 149, 150, 200, 212, 217, 226, 235, 236, 253, 255], "period": [3, 4, 11, 13, 31, 46, 67, 68, 73, 92, 107, 118, 146, 156, 178, 185, 212, 217, 220, 223, 232, 236, 237, 255], "silenc": [3, 246, 253], "filterwarn": [3, 13], "caus": [3, 5, 12, 13, 14, 23, 34, 38, 67, 68, 71, 73, 103, 132, 140, 146, 200, 217, 226, 233, 234, 235, 252, 253, 290], "anoth": [3, 4, 5, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 27, 29, 31, 32, 33, 34, 35, 44, 47, 48, 59, 64, 66, 67, 68, 69, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 92, 94, 100, 103, 107, 110, 111, 123, 127, 129, 143, 147, 171, 186, 187, 189, 192, 196, 200, 201, 203, 205, 207, 208, 210, 212, 213, 214, 217, 218, 224, 225, 227, 233, 235, 236, 237, 249, 250, 256, 262, 266, 267, 271, 283, 286, 288, 289, 294, 295], "over": [3, 5, 6, 7, 10, 11, 12, 13, 15, 18, 23, 27, 30, 37, 40, 46, 47, 48, 49, 58, 59, 62, 66, 67, 68, 69, 70, 71, 72, 81, 83, 90, 92, 96, 97, 100, 103, 104, 107, 110, 111, 114, 120, 126, 131, 132, 149, 150, 161, 177, 180, 182, 186, 187, 198, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 220, 222, 224, 229, 230, 232, 233, 235, 236, 237, 238, 239, 241, 242, 251, 255, 256, 262, 265, 269, 272, 288, 292, 294], "defeat": [3, 12, 233], "three": [3, 14, 15, 17, 19, 21, 23, 34, 35, 40, 44, 48, 58, 59, 60, 63, 67, 68, 72, 75, 77, 81, 82, 83, 92, 96, 97, 110, 111, 126, 131, 135, 138, 139, 140, 155, 177, 179, 184, 192, 196, 200, 201, 202, 203, 204, 205, 208, 210, 213, 217, 227, 229, 230, 235, 236, 237, 248, 262, 264, 269, 272, 286, 289, 294], "natur": [3, 12, 15, 21, 25, 32, 40, 44, 48, 49, 50, 58, 67, 68, 72, 73, 101, 107, 132, 184, 186, 187, 204, 207, 208, 210, 212, 214, 217, 225, 226, 230, 236, 237, 255, 272, 289, 294], "heavili": [3, 224, 234], "consider": [3, 12, 22, 67, 108, 122, 207, 216, 225, 230, 233, 266], "easi": [3, 7, 11, 12, 14, 55, 59, 67, 75, 92, 94, 108, 136, 142, 200, 204, 207, 212, 217, 224, 227, 230, 233, 236, 241, 242, 243, 283, 284, 286, 287, 288, 289, 290, 293], "account": [3, 14, 73, 103, 220, 229, 233], "nonetheless": [3, 68, 184, 229, 233], "deprecat": 3, "won": [3, 11, 12, 15, 23, 48, 229, 236, 289], "until": [3, 12, 19, 21, 27, 29, 30, 31, 32, 33, 34, 35, 39, 59, 61, 67, 68, 77, 94, 103, 107, 146, 201, 210, 213, 226, 233, 286], "come": [3, 11, 12, 32, 38, 58, 63, 65, 66, 67, 73, 75, 92, 94, 103, 108, 122, 132, 134, 144, 185, 201, 204, 207, 210, 212, 213, 227, 230, 233, 236, 246, 248, 253, 256, 286, 288, 289, 292, 294], "minimum": [3, 13, 31, 46, 48, 58, 59, 61, 63, 67, 68, 71, 73, 103, 122, 127, 134, 166, 191, 203, 205, 210, 236, 237, 251, 284], "longer": [3, 4, 11, 12, 15, 20, 67, 77, 107, 136, 146, 205, 210, 217, 226, 229, 255, 258, 286, 294], "especi": [3, 4, 12, 23, 36, 66, 103, 122, 132, 147, 149, 176, 201, 213, 229, 233, 235, 248, 283, 284], "hard": [3, 11, 12, 13, 14, 21, 59, 68, 103, 107, 132, 182, 207, 217, 224, 233, 236, 286, 288], "migrat": 3, "lengthen": 3, "impos": [3, 111], "signific": [3, 15, 21, 48, 67, 68, 71, 94, 103, 122, 176, 191, 207, 236, 256, 289], "mainten": [3, 43], "burden": [3, 217], "keep": [3, 4, 11, 12, 15, 18, 23, 63, 67, 68, 71, 72, 75, 92, 103, 127, 135, 143, 147, 166, 182, 191, 203, 206, 207, 208, 213, 224, 225, 227, 229, 233, 235, 238, 243, 271, 284, 289], "firstli": [3, 13, 21, 23, 227], "regular": [3, 11, 12, 13, 15, 21, 22, 49, 55, 67, 68, 71, 75, 83, 89, 90, 94, 107, 132, 176, 207, 214, 233, 243, 248, 293, 294], "schedul": 3, "singl": [3, 5, 8, 11, 13, 14, 19, 21, 23, 28, 34, 39, 40, 47, 48, 51, 58, 67, 68, 72, 73, 75, 80, 81, 83, 84, 85, 92, 94, 97, 98, 103, 106, 109, 118, 119, 124, 126, 127, 136, 143, 162, 166, 168, 176, 179, 182, 189, 192, 196, 203, 204, 206, 207, 208, 210, 212, 213, 217, 218, 219, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 242, 248, 250, 252, 255, 256, 258, 284, 286, 289, 290, 295], "Being": [3, 63, 77, 83, 207], "assur": [3, 107, 213], "suffici": [3, 4, 11, 21, 47, 48, 58, 59, 63, 67, 103, 187, 208, 220, 224, 233, 237, 252, 294], "regardless": [3, 4, 23, 59, 67, 94, 107, 210, 225, 229, 255, 266, 271, 294], "often": [3, 4, 11, 12, 14, 21, 22, 23, 27, 33, 47, 48, 49, 57, 67, 75, 77, 79, 92, 94, 103, 107, 108, 118, 127, 128, 142, 146, 147, 200, 201, 204, 205, 207, 210, 213, 218, 224, 225, 230, 233, 237, 255, 256, 283, 288, 289, 290, 294], "happen": [3, 4, 7, 11, 12, 13, 14, 19, 21, 22, 23, 31, 40, 48, 59, 66, 67, 71, 79, 82, 91, 126, 177, 181, 187, 204, 210, 212, 213, 216, 225, 229, 233, 237, 256, 267, 286, 293, 294], "secondli": [3, 23, 227], "rigor": [3, 75, 201, 250], "scheme": [3, 8, 21, 59, 66, 71, 202, 203, 210, 213, 242], "semant": [3, 14, 21, 100, 235], "surfac": [3, 73, 75, 81, 92, 111, 126, 151, 155, 182, 203, 229, 262], "enough": [3, 4, 11, 29, 31, 58, 67, 71, 94, 103, 106, 107, 118, 132, 149, 208, 210, 217, 233, 284, 286], "virtual": [3, 8, 38, 67, 83, 201, 287], "encod": [3, 13, 51, 59, 65, 68, 97, 217, 248, 252, 255], "backport": 3, "prior": [3, 12, 13, 38, 196, 213, 229, 290], "extrem": [3, 12, 32, 58, 71, 77, 83, 94, 100, 114, 146, 201, 229, 237], "accur": [3, 13, 15, 19, 23, 27, 46, 58, 67, 71, 72, 89, 94, 115, 203, 224, 283, 290], "model": [3, 14, 71, 97, 107, 118, 128, 131, 134, 136, 137, 138, 154, 213, 226, 237], "final": [3, 4, 5, 11, 12, 13, 21, 23, 25, 34, 47, 59, 66, 67, 73, 75, 92, 94, 97, 103, 107, 111, 116, 126, 127, 134, 139, 141, 142, 144, 147, 162, 174, 177, 179, 180, 182, 184, 185, 187, 192, 200, 201, 204, 207, 210, 212, 219, 225, 226, 227, 229, 230, 233, 235, 236, 243, 255, 256, 287, 288, 289], "temptat": [3, 226, 294], "fudg": 3, "down": [3, 4, 8, 11, 12, 21, 72, 100, 120, 136, 200, 201, 203, 208, 219, 225, 227, 229, 233, 252, 290, 294], "earli": [3, 11, 67, 107, 171, 230], "acceler": [3, 108, 129, 131, 134, 139, 141, 146, 147, 149, 185, 192, 196, 198, 252, 271], "each": [3, 8, 9, 11, 12, 13, 14, 15, 17, 21, 23, 27, 29, 30, 31, 32, 34, 37, 40, 43, 44, 46, 47, 48, 49, 50, 51, 58, 59, 63, 67, 68, 69, 70, 71, 72, 73, 75, 77, 82, 83, 84, 89, 90, 92, 94, 96, 97, 98, 100, 103, 107, 110, 114, 116, 118, 124, 126, 127, 132, 134, 136, 139, 141, 143, 144, 147, 166, 179, 182, 191, 192, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 215, 217, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 241, 242, 243, 246, 248, 250, 252, 255, 256, 258, 262, 264, 265, 267, 269, 271, 284, 287, 289, 294, 295], "ensur": [3, 11, 12, 15, 23, 27, 29, 30, 31, 32, 35, 38, 67, 68, 71, 99, 103, 126, 212, 213, 217, 248, 253, 256], "realli": [3, 11, 12, 13, 14, 19, 21, 22, 23, 67, 79, 107, 134, 184, 206, 207, 216, 218, 224, 226, 227, 229, 233, 249, 258, 286, 288], "per": [3, 68, 103, 108, 114, 127, 156, 186, 192, 198, 203, 208, 213, 214, 262, 266, 268, 271], "everywher": [3, 14, 15, 67, 75, 92, 118, 198, 255, 271], "doctest": [3, 4, 5, 11, 15, 23, 60, 75, 103, 107, 134, 171, 182, 207, 213, 233, 248, 251, 253, 293], "sympy_deprecation_warn": [3, 246, 251, 253], "write": [3, 6, 7, 9, 10, 13, 14, 19, 21, 22, 24, 27, 39, 48, 56, 67, 68, 74, 75, 92, 94, 100, 149, 162, 200, 201, 205, 206, 208, 210, 212, 217, 226, 227, 230, 233, 236, 242, 248, 249, 250, 256, 287, 288, 289, 294], "multilin": [3, 217], "deprecated_since_vers": [3, 246, 251, 253], "active_deprecations_target": [3, 246, 251, 253], "target": [3, 4, 14, 46, 47, 48, 50, 67, 107, 124, 162, 166, 167, 186, 226, 229, 232, 235, 236, 246, 249, 250, 253, 294], "md": [3, 5, 12, 246, 253], "stacklevel": [3, 12, 246, 251, 253], "line": [3, 4, 9, 11, 12, 13, 14, 15, 19, 21, 38, 47, 48, 50, 58, 59, 63, 68, 77, 78, 79, 81, 82, 83, 84, 89, 92, 94, 95, 96, 103, 107, 110, 112, 114, 116, 119, 129, 132, 134, 140, 162, 192, 197, 198, 200, 202, 203, 217, 220, 227, 229, 233, 237, 238, 246, 248, 249, 250, 253, 256, 258, 269, 272, 280, 286], "visual": [3, 13, 67, 107, 111, 118, 216, 229], "confirm": [3, 12, 13, 58, 107, 233], "look": [3, 4, 5, 7, 9, 11, 12, 13, 15, 21, 22, 23, 39, 47, 48, 58, 67, 72, 73, 75, 88, 103, 107, 127, 132, 134, 142, 166, 176, 177, 180, 196, 203, 207, 208, 212, 217, 219, 220, 224, 227, 229, 230, 233, 234, 239, 248, 252, 256, 258, 267, 284, 289, 292, 293], "good": [3, 5, 7, 12, 14, 21, 23, 30, 36, 48, 67, 68, 71, 79, 92, 103, 107, 134, 146, 149, 204, 207, 208, 217, 224, 226, 227, 229, 233, 255, 283, 287, 290], "top": [3, 4, 5, 12, 13, 14, 29, 48, 66, 67, 68, 83, 84, 94, 97, 103, 110, 111, 126, 131, 177, 184, 207, 217, 227, 233, 250, 251, 256, 272, 289], "relev": [3, 4, 5, 11, 12, 13, 21, 48, 65, 80, 95, 96, 123, 127, 129, 131, 134, 187, 197, 201, 207, 227, 233, 234, 243, 248, 270], "docstr": [3, 6, 7, 11, 12, 13, 15, 23, 29, 47, 48, 60, 67, 89, 92, 94, 103, 107, 113, 117, 119, 125, 142, 147, 152, 169, 175, 176, 178, 195, 199, 213, 220, 223, 224, 226, 229, 233, 234, 235, 236, 242, 243, 248, 251, 256, 258, 263, 270, 273, 277, 279], "section": [3, 5, 8, 10, 11, 12, 14, 21, 23, 24, 40, 47, 49, 58, 59, 66, 67, 68, 70, 74, 75, 77, 83, 92, 97, 103, 110, 111, 126, 132, 147, 185, 187, 198, 201, 204, 207, 210, 212, 217, 220, 224, 227, 233, 243, 252, 253, 255, 266, 267, 268, 269, 273, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295], "src": [3, 4, 5, 7, 11, 12, 109, 233, 248, 253], "explan": [3, 5, 12, 15, 17, 21, 24, 40, 41, 42, 43, 44, 45, 47, 48, 52, 55, 56, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 73, 75, 79, 89, 90, 92, 94, 98, 103, 107, 118, 121, 123, 124, 126, 127, 129, 131, 140, 151, 153, 156, 159, 161, 163, 165, 177, 182, 202, 203, 204, 206, 208, 212, 213, 215, 219, 220, 222, 223, 224, 225, 227, 229, 230, 233, 235, 237, 238, 239, 242, 243, 248, 251, 253, 255, 256, 291], "cross": [3, 5, 11, 12, 14, 67, 77, 83, 98, 103, 110, 111, 126, 129, 140, 149, 162, 191, 192, 194, 200, 201, 230, 236, 262, 266, 268, 269], "xyz": [3, 40, 79, 109, 110, 114, 192, 201, 262, 264, 267], "header": [3, 12, 48, 249, 250], "why": [3, 12, 13, 15, 21, 48, 67, 201, 208, 214, 224, 227, 256, 287, 289, 290], "test": [3, 4, 5, 6, 9, 10, 14, 15, 20, 22, 23, 29, 30, 43, 44, 46, 47, 48, 54, 58, 59, 66, 67, 68, 74, 77, 82, 92, 98, 100, 103, 107, 131, 162, 171, 175, 176, 177, 185, 201, 207, 208, 210, 212, 214, 225, 227, 230, 233, 234, 235, 236, 246, 249, 250, 251, 252, 253, 255, 256, 258, 273, 274, 281, 286, 288, 289], "warns_deprecated_sympi": [3, 12, 246, 251, 253], "run": [3, 4, 5, 8, 14, 15, 19, 21, 23, 49, 58, 59, 61, 67, 68, 92, 103, 108, 109, 127, 131, 134, 149, 182, 197, 203, 204, 217, 227, 229, 233, 234, 235, 245, 246, 249, 251, 252, 255, 256, 281, 286, 293], "other": [3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 22, 24, 27, 29, 30, 31, 32, 34, 35, 36, 40, 44, 47, 48, 49, 50, 58, 59, 60, 63, 64, 66, 67, 68, 69, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 87, 92, 94, 97, 98, 100, 103, 107, 108, 109, 110, 111, 112, 118, 122, 123, 125, 126, 127, 131, 132, 133, 136, 137, 142, 143, 146, 147, 149, 151, 154, 155, 156, 166, 177, 179, 180, 181, 182, 185, 186, 187, 188, 189, 191, 192, 194, 196, 200, 201, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 217, 218, 219, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 243, 244, 246, 249, 250, 251, 252, 255, 256, 262, 265, 266, 269, 271, 273, 279, 280, 283, 284, 286, 288, 289, 290, 294], "pr": [3, 11, 12, 13, 66, 126, 208, 210, 211, 213, 236], "onc": [3, 8, 9, 11, 12, 14, 15, 21, 22, 23, 48, 50, 51, 58, 63, 67, 68, 72, 75, 83, 92, 94, 108, 111, 124, 126, 142, 146, 187, 192, 194, 201, 203, 205, 207, 213, 217, 218, 226, 227, 229, 233, 236, 243, 255, 266, 283, 284, 294, 295], "merg": [3, 7, 11, 12, 48, 58, 59, 67, 190, 217, 225, 237, 248, 255, 256], "wiki": [3, 4, 5, 11, 15, 21, 23, 37, 40, 42, 43, 44, 46, 47, 48, 50, 55, 56, 58, 59, 66, 67, 68, 69, 70, 72, 73, 75, 77, 79, 83, 84, 85, 94, 95, 96, 97, 98, 100, 103, 107, 116, 118, 121, 151, 153, 154, 155, 157, 158, 159, 163, 164, 165, 168, 170, 171, 180, 182, 186, 192, 194, 199, 203, 206, 213, 220, 224, 225, 226, 230, 233, 236, 237, 250, 255, 262, 264, 268, 270, 272, 290, 291], "decor": [3, 12, 23, 58, 67, 75, 246, 248, 253, 254, 257, 258, 281], "sympydeprecationwarn": [3, 12, 13, 246, 248, 251, 253], "class": [3, 5, 7, 11, 12, 14, 15, 20, 21, 22, 23, 25, 27, 31, 32, 36, 37, 40, 41, 42, 43, 44, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 109, 110, 112, 114, 115, 116, 118, 123, 126, 127, 128, 129, 131, 132, 136, 137, 142, 143, 147, 149, 150, 151, 153, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 195, 196, 197, 199, 204, 206, 207, 208, 210, 213, 214, 215, 216, 218, 219, 220, 223, 224, 225, 227, 229, 233, 234, 235, 236, 237, 239, 242, 243, 244, 248, 249, 250, 251, 252, 253, 255, 256, 260, 263, 266, 267, 269, 270, 272, 273, 277, 279, 284, 286, 289, 294], "context": [3, 4, 5, 11, 12, 13, 17, 21, 23, 33, 41, 42, 43, 67, 69, 75, 97, 132, 187, 207, 210, 212, 225, 246, 248, 253, 262], "manag": [3, 7, 9, 12, 38, 42, 43, 109, 162, 210, 229, 243, 246, 248, 253], "filter": [3, 13, 18, 31, 67, 68, 92, 154, 213, 246, 248, 253, 255], "emit": [3, 12, 217, 246, 253], "assert": [3, 11, 12, 47, 56, 57, 58, 59, 67, 77, 79, 109, 146, 206, 217, 225, 233, 234, 246, 253, 255], "separ": [3, 4, 11, 12, 13, 14, 15, 19, 22, 23, 29, 35, 47, 55, 67, 68, 73, 75, 92, 94, 103, 119, 126, 131, 146, 147, 150, 155, 179, 182, 192, 203, 205, 206, 208, 210, 213, 214, 217, 226, 229, 230, 233, 234, 236, 241, 246, 248, 252, 256, 258, 262, 286], "block": [3, 4, 25, 36, 48, 56, 58, 68, 98, 103, 126, 131, 132, 134, 137, 192, 201, 206, 230, 256, 266], "behavior1": 3, "behavior2": 3, "everyth": [3, 5, 12, 15, 23, 48, 67, 69, 75, 94, 101, 120, 146, 178, 179, 203, 217, 289, 293], "els": [3, 7, 11, 12, 13, 14, 21, 22, 23, 29, 48, 57, 59, 63, 67, 68, 75, 77, 81, 83, 84, 92, 94, 97, 103, 107, 118, 182, 192, 203, 208, 212, 213, 217, 218, 225, 229, 233, 235, 236, 241, 243, 248, 255, 258, 262, 265, 283, 289], "anywher": [3, 4, 13, 21, 48, 67, 75, 81, 182, 258, 288], "ignore_warn": [3, 246, 251, 253, 256], "prevent": [3, 7, 12, 15, 31, 36, 48, 67, 73, 104, 107, 122, 131, 206, 208, 213, 217, 229, 237, 246, 253, 285], "trigger": [3, 12, 23, 59, 109, 182, 246], "twice": [3, 15, 48, 67, 69, 81, 107, 192, 194, 200, 213, 217, 252, 253, 262, 264, 284], "similar": [3, 9, 11, 12, 13, 15, 19, 21, 23, 27, 59, 66, 67, 68, 71, 72, 73, 75, 78, 83, 84, 88, 97, 103, 108, 118, 132, 134, 136, 146, 147, 180, 191, 198, 200, 201, 205, 207, 208, 210, 214, 224, 226, 227, 229, 233, 235, 238, 243, 246, 249, 252, 253, 262, 264, 266, 267, 271, 283, 288, 289, 290, 292, 294], "somewher": [3, 4, 5, 12, 14, 48], "sign": [3, 4, 5, 9, 12, 14, 25, 27, 31, 36, 40, 45, 48, 63, 67, 68, 72, 73, 77, 83, 92, 94, 103, 107, 110, 111, 114, 118, 134, 155, 167, 192, 198, 200, 202, 206, 210, 217, 222, 224, 229, 230, 235, 255, 269, 272, 287], "readi": [3, 11, 21, 131, 207, 217, 233], "paragraph": [3, 4, 5, 23, 47], "metadata": [3, 11, 47, 251, 253], "link": [3, 4, 5, 7, 11, 14, 15, 28, 32, 48, 68, 77, 83, 94, 119, 126, 135, 143, 249, 252, 253, 292], "rememb": [3, 4, 11, 12, 15, 23, 34, 97, 103, 119, 122, 149, 200, 201, 217, 229, 235, 238, 256, 289, 294], "shown": [3, 4, 12, 13, 14, 21, 22, 23, 56, 59, 66, 67, 71, 73, 75, 92, 109, 111, 116, 118, 122, 127, 129, 135, 136, 137, 143, 144, 145, 191, 192, 200, 201, 203, 206, 207, 208, 213, 217, 233, 237, 253, 255, 266, 267, 287], "plain": [3, 4, 11, 12, 21, 67, 75, 95, 197, 206, 213, 217], "rst": [3, 4, 5, 11, 14, 49, 233, 248], "markdown": [3, 11, 14], "markup": [3, 11, 217], "clearli": [3, 4, 23, 107, 201, 207, 227, 290], "delin": 3, "newlin": [3, 12, 103, 258], "80": [3, 4, 8, 12, 15, 23, 46, 58, 67, 70, 94, 103, 107, 110, 111, 116, 206, 213, 216, 233, 237, 253, 255], "charact": [3, 4, 5, 11, 12, 67, 68, 92, 95, 109, 162, 192, 197, 217, 233, 248, 250, 253, 258, 286, 288, 293], "full": [3, 4, 5, 11, 12, 13, 15, 17, 21, 23, 30, 37, 44, 46, 48, 58, 59, 67, 71, 75, 79, 80, 94, 100, 103, 109, 131, 144, 145, 192, 207, 210, 211, 213, 217, 219, 229, 230, 256, 288, 291, 294], "abc": [3, 4, 11, 12, 15, 17, 18, 23, 25, 27, 29, 31, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 48, 56, 58, 60, 66, 67, 68, 69, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 90, 91, 92, 94, 95, 97, 98, 100, 103, 106, 107, 108, 116, 118, 120, 153, 155, 157, 158, 163, 180, 182, 183, 204, 206, 208, 210, 212, 213, 214, 217, 218, 219, 220, 222, 223, 224, 225, 226, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 242, 244, 249, 250, 251, 252, 253, 255, 256, 258, 262, 265, 266, 267, 272, 274, 286, 289, 293], "func": [3, 4, 12, 14, 20, 23, 42, 46, 48, 67, 69, 72, 75, 86, 88, 107, 129, 171, 192, 210, 213, 217, 218, 229, 233, 234, 235, 246, 251, 253, 255, 256, 258, 261], "larger": [3, 5, 14, 23, 32, 48, 58, 59, 66, 67, 68, 75, 92, 100, 103, 107, 136, 140, 206, 208, 214, 218, 224, 229, 235, 250, 252, 286, 294], "easier": [3, 9, 11, 12, 13, 14, 22, 35, 50, 67, 111, 132, 134, 200, 208, 212, 214, 227, 233, 236, 250, 256, 266, 288, 294, 295], "exactli": [3, 4, 5, 11, 12, 13, 14, 15, 23, 27, 34, 36, 44, 51, 58, 67, 70, 71, 103, 109, 147, 202, 213, 227, 229, 233, 236, 238, 252, 255, 256, 284, 286, 288, 293, 294], "sphinx": [3, 5, 8, 11, 73, 233, 248, 253], "direct": [3, 4, 5, 13, 14, 20, 34, 40, 42, 43, 47, 52, 55, 58, 63, 66, 67, 69, 71, 73, 76, 80, 81, 82, 83, 97, 98, 103, 110, 111, 112, 114, 122, 123, 126, 129, 131, 134, 136, 140, 149, 168, 192, 198, 200, 201, 204, 206, 207, 210, 214, 224, 227, 243, 246, 255, 262, 267, 268, 271], "syntax": [3, 4, 5, 11, 13, 14, 15, 23, 34, 41, 43, 59, 67, 94, 109, 132, 149, 179, 203, 207, 216, 217, 229, 235, 239, 258, 284, 286, 288, 293, 295], "paramet": [3, 5, 12, 13, 14, 15, 27, 33, 35, 40, 41, 43, 46, 48, 49, 50, 58, 59, 63, 65, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 90, 92, 94, 95, 97, 98, 100, 103, 104, 106, 107, 109, 110, 112, 114, 116, 118, 119, 120, 122, 123, 124, 126, 127, 128, 129, 131, 132, 134, 149, 151, 153, 154, 155, 157, 158, 159, 161, 162, 163, 165, 166, 167, 170, 171, 172, 174, 176, 177, 179, 180, 181, 182, 183, 184, 186, 192, 193, 194, 196, 197, 198, 201, 202, 203, 205, 206, 208, 210, 212, 213, 214, 215, 217, 218, 219, 220, 222, 223, 224, 225, 229, 230, 232, 233, 234, 235, 237, 238, 239, 242, 243, 246, 248, 249, 250, 252, 253, 255, 256, 262, 264, 265, 266, 267, 272, 284, 289], "short": [3, 5, 11, 12, 15, 39, 49, 57, 59, 63, 67, 68, 69, 70, 73, 101, 107, 122, 168, 187, 191, 201, 204, 211, 238, 248, 258, 289, 293], "format": [3, 8, 11, 12, 14, 17, 19, 31, 34, 35, 47, 59, 68, 89, 90, 94, 97, 103, 106, 107, 110, 127, 128, 131, 150, 155, 166, 176, 203, 206, 207, 212, 213, 215, 217, 227, 233, 236, 248, 258, 262, 266, 287, 290, 293], "renam": [3, 48, 94], "rest": [3, 13, 92, 95, 97, 101, 111, 120, 132, 136, 142, 187, 204, 207, 237, 255, 286, 287, 294], "left": [3, 5, 13, 19, 21, 23, 25, 28, 29, 32, 40, 46, 48, 49, 58, 59, 63, 67, 68, 69, 72, 73, 75, 83, 84, 90, 92, 94, 95, 97, 98, 103, 106, 107, 112, 118, 123, 131, 154, 161, 166, 170, 171, 174, 179, 191, 192, 198, 202, 203, 204, 206, 213, 214, 215, 216, 217, 219, 220, 224, 225, 226, 227, 229, 233, 234, 235, 236, 237, 248, 249, 250, 252, 255, 269, 284, 288, 290, 294], "imaginari": [3, 4, 15, 21, 23, 27, 31, 33, 40, 44, 45, 67, 71, 73, 75, 98, 149, 207, 208, 213, 217, 218, 225, 229, 236], "simplify_thi": [3, 4, 251], "expr": [3, 4, 12, 14, 15, 21, 23, 31, 33, 36, 42, 43, 45, 46, 48, 59, 66, 69, 71, 73, 75, 77, 89, 92, 94, 97, 100, 103, 107, 108, 109, 118, 122, 124, 129, 131, 132, 146, 159, 163, 165, 167, 171, 174, 177, 179, 180, 182, 189, 192, 194, 197, 203, 205, 206, 207, 208, 210, 212, 213, 214, 215, 217, 218, 219, 220, 222, 224, 226, 229, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 244, 249, 250, 251, 253, 256, 262, 264, 265, 266, 267, 269, 283, 284, 286, 288, 289, 293, 294, 295], "simplifi": [3, 4, 11, 12, 14, 15, 19, 21, 22, 23, 25, 32, 33, 34, 41, 43, 45, 46, 66, 67, 69, 71, 72, 73, 75, 79, 84, 89, 92, 94, 97, 98, 99, 100, 103, 110, 118, 119, 124, 126, 127, 128, 131, 135, 136, 139, 140, 141, 146, 154, 161, 166, 181, 182, 186, 189, 192, 198, 204, 206, 212, 214, 216, 218, 223, 225, 226, 227, 230, 233, 234, 235, 236, 237, 239, 251, 253, 256, 266, 268, 274, 283, 285, 286, 288, 289, 290], "def": [3, 4, 5, 11, 12, 13, 14, 15, 19, 21, 22, 23, 42, 43, 47, 67, 72, 79, 97, 103, 107, 109, 140, 177, 207, 213, 217, 226, 229, 236, 251, 253, 255, 256, 259, 283, 286, 289, 290, 294], "ref": [3, 58, 73, 103, 116, 149, 222, 237, 251, 290], "is_this_zero": [3, 253], "y": [3, 4, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 58, 59, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90, 92, 94, 95, 96, 97, 98, 99, 100, 103, 107, 108, 109, 110, 111, 112, 114, 116, 118, 123, 124, 126, 129, 131, 132, 134, 135, 136, 137, 139, 140, 141, 143, 147, 149, 150, 159, 160, 163, 166, 171, 177, 179, 180, 182, 183, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 249, 250, 253, 255, 256, 258, 262, 265, 266, 267, 268, 269, 271, 272, 283, 284, 286, 288, 289, 293, 294, 295], "0": [3, 4, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 118, 119, 120, 121, 123, 124, 126, 127, 129, 131, 132, 134, 135, 136, 137, 139, 141, 144, 145, 146, 147, 149, 150, 151, 154, 155, 156, 158, 161, 166, 167, 168, 171, 176, 177, 178, 179, 180, 181, 182, 183, 187, 189, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 246, 248, 249, 251, 252, 253, 255, 256, 257, 262, 264, 265, 266, 267, 268, 269, 272, 283, 284, 286, 288, 289, 290, 293, 294, 295], "zero": [3, 14, 15, 17, 21, 22, 23, 25, 32, 33, 40, 44, 45, 48, 57, 58, 59, 63, 66, 67, 70, 71, 72, 73, 75, 77, 81, 82, 83, 92, 94, 96, 97, 98, 100, 102, 103, 106, 107, 109, 110, 118, 126, 127, 128, 129, 131, 132, 134, 137, 140, 143, 144, 145, 149, 154, 176, 180, 182, 184, 196, 198, 200, 201, 202, 204, 205, 206, 207, 208, 212, 213, 215, 217, 220, 224, 225, 227, 229, 230, 233, 234, 235, 236, 237, 238, 253, 255, 256, 266, 268, 269, 289, 295], "is_zero": [3, 21, 23, 82, 103, 204, 208, 213, 253, 290], "where": [3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 25, 27, 30, 31, 32, 34, 36, 39, 40, 44, 46, 47, 48, 49, 56, 57, 58, 59, 61, 63, 65, 66, 67, 68, 69, 71, 72, 73, 75, 77, 80, 82, 83, 84, 85, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 103, 107, 110, 112, 114, 115, 118, 122, 126, 127, 128, 129, 131, 132, 134, 145, 146, 147, 149, 150, 156, 166, 171, 177, 179, 181, 182, 183, 184, 185, 191, 192, 196, 198, 200, 201, 202, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 217, 218, 219, 220, 223, 224, 225, 226, 227, 229, 230, 233, 234, 235, 237, 238, 241, 243, 248, 249, 250, 251, 255, 256, 258, 262, 269, 271, 284, 286, 288, 290, 294, 295], "mail": [3, 9, 11, 13, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 217, 287], "summar": [3, 11, 248, 294], "idea": [3, 7, 11, 12, 14, 21, 22, 23, 52, 58, 65, 67, 68, 79, 85, 92, 94, 107, 119, 132, 182, 186, 187, 204, 206, 207, 226, 229, 230, 233, 236, 250, 256, 294], "fit": [3, 14, 47, 92, 103, 106, 107, 201, 217, 233, 258, 289], "put": [3, 4, 11, 13, 14, 15, 19, 23, 29, 48, 63, 64, 67, 68, 69, 73, 97, 98, 103, 154, 159, 163, 178, 179, 213, 217, 218, 226, 227, 229, 233, 238, 244, 249, 290, 294], "word": [3, 5, 9, 12, 14, 23, 44, 63, 66, 67, 68, 73, 75, 97, 118, 127, 132, 147, 204, 207, 212, 229, 230, 233, 235, 250, 262, 267, 286], "global": [3, 4, 9, 12, 13, 41, 42, 43, 46, 48, 49, 67, 79, 92, 109, 131, 166, 172, 192, 194, 203, 204, 207, 208, 210, 217, 230, 233, 234, 237, 248, 250, 251, 256, 265], "uniqu": [3, 13, 14, 46, 47, 49, 58, 61, 63, 67, 68, 69, 72, 75, 82, 85, 90, 94, 96, 97, 103, 107, 126, 127, 171, 180, 192, 201, 204, 205, 206, 207, 210, 212, 213, 218, 222, 229, 230, 233, 235, 236, 237, 241, 250, 255, 258, 266, 271, 286, 289], "across": [3, 5, 11, 58, 65, 67, 78, 94, 111, 181, 182, 189, 203, 217, 252, 254, 255, 256, 292], "level": [3, 4, 5, 7, 12, 13, 14, 15, 21, 22, 29, 31, 48, 58, 65, 67, 73, 75, 94, 97, 103, 107, 122, 136, 149, 177, 182, 187, 191, 194, 201, 203, 206, 207, 215, 217, 226, 230, 236, 237, 241, 249, 250, 255, 289, 290, 292], "correspond": [3, 4, 5, 7, 11, 12, 13, 19, 21, 22, 23, 25, 30, 34, 46, 47, 48, 49, 57, 58, 59, 61, 62, 63, 66, 67, 68, 69, 70, 73, 75, 77, 78, 80, 81, 82, 83, 90, 92, 94, 96, 97, 98, 103, 106, 107, 110, 111, 118, 124, 126, 127, 128, 129, 131, 132, 134, 136, 150, 154, 158, 172, 176, 177, 179, 183, 184, 187, 192, 196, 198, 202, 203, 205, 206, 207, 208, 210, 212, 213, 217, 223, 224, 227, 229, 230, 233, 234, 235, 236, 237, 239, 241, 242, 243, 250, 251, 252, 253, 255, 256, 258, 262, 264, 266, 267, 269, 271, 289, 295], "share": [3, 7, 21, 23, 68, 107, 208, 212, 217, 237, 250], "__init__": [3, 4, 23, 67, 127, 128, 212, 262, 264, 289], "func_nam": [3, 48, 73, 98, 258], "help": [3, 4, 5, 7, 9, 11, 12, 21, 31, 39, 48, 57, 67, 75, 92, 94, 103, 107, 108, 110, 116, 132, 149, 157, 167, 201, 203, 212, 214, 217, 226, 227, 230, 233, 234, 237, 248, 249, 250, 256, 279, 287, 290], "rais": [3, 11, 12, 13, 15, 17, 21, 22, 23, 41, 43, 46, 48, 56, 59, 67, 68, 69, 71, 73, 76, 77, 80, 82, 83, 84, 92, 94, 98, 100, 103, 104, 106, 107, 109, 116, 118, 156, 168, 198, 201, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 217, 219, 225, 229, 232, 233, 234, 235, 236, 237, 241, 243, 246, 248, 250, 253, 255, 256, 258, 259, 269, 290], "been": [3, 11, 15, 21, 23, 27, 46, 48, 49, 58, 59, 60, 63, 66, 67, 68, 73, 79, 92, 94, 103, 107, 108, 109, 126, 127, 131, 132, 134, 142, 146, 147, 155, 167, 177, 179, 187, 198, 199, 200, 201, 204, 207, 208, 212, 214, 215, 217, 219, 224, 227, 229, 234, 235, 236, 238, 239, 247, 248, 250, 251, 253, 255, 258, 266, 269, 286, 287, 289, 290, 294], "simplfiy_thi": 3, "ident": [3, 14, 15, 23, 44, 47, 49, 57, 58, 59, 65, 67, 68, 72, 73, 83, 90, 96, 98, 100, 103, 119, 121, 126, 127, 147, 166, 168, 171, 187, 204, 205, 206, 210, 211, 212, 213, 217, 226, 229, 233, 236, 241, 243, 248, 255, 256, 258, 267, 286, 290, 294], "much": [3, 4, 11, 12, 19, 21, 22, 23, 27, 33, 47, 48, 52, 63, 67, 71, 75, 89, 92, 94, 146, 147, 190, 200, 201, 202, 204, 206, 207, 210, 213, 224, 227, 229, 233, 234, 235, 236, 250, 252, 286, 288, 294], "trivial": [3, 49, 58, 63, 66, 67, 68, 73, 82, 97, 100, 103, 107, 144, 182, 204, 205, 210, 213, 227, 230, 233, 236, 241], "furthermor": [3, 13, 23, 44, 67, 68, 97, 212, 226, 286, 288, 289], "particular": [3, 4, 11, 12, 13, 14, 15, 21, 22, 28, 30, 44, 49, 58, 67, 68, 71, 75, 78, 92, 94, 97, 100, 103, 107, 110, 114, 142, 166, 177, 205, 206, 207, 208, 210, 212, 213, 223, 225, 227, 229, 230, 233, 235, 236, 248, 250, 252, 290, 292, 294], "expr1": [3, 21, 118, 203, 235, 289], "expr2": [3, 21, 118, 203, 289], "dozen": [3, 14, 23, 294], "search": [3, 4, 28, 46, 50, 58, 59, 63, 65, 67, 73, 103, 107, 132, 204, 212, 213, 217, 226, 227, 229, 234, 237, 249], "upcom": 3, "bot": [3, 11], "liter": [4, 12, 15, 23, 48, 57, 67, 95, 97, 109, 182, 189, 229], "occur": [4, 13, 14, 15, 58, 59, 67, 71, 75, 84, 92, 98, 109, 122, 126, 146, 191, 192, 200, 212, 220, 229, 234, 235, 238, 239, 248, 255, 289], "definit": [4, 13, 14, 15, 22, 40, 44, 48, 49, 58, 59, 64, 66, 67, 69, 70, 72, 73, 75, 80, 83, 90, 92, 94, 98, 99, 100, 103, 107, 109, 126, 131, 134, 139, 140, 147, 184, 187, 190, 192, 200, 201, 204, 205, 208, 213, 214, 217, 224, 237, 238, 249, 250, 251, 255, 256, 262, 266, 267, 268, 269, 284, 294], "__doc__": [4, 15], "attribut": [4, 14, 18, 21, 23, 42, 43, 47, 48, 58, 59, 67, 75, 76, 77, 80, 81, 82, 83, 100, 103, 109, 111, 118, 123, 126, 127, 128, 129, 131, 139, 147, 150, 171, 176, 180, 187, 191, 192, 198, 201, 203, 204, 207, 208, 212, 217, 225, 229, 230, 242, 243, 249, 251, 255, 256, 259, 266, 289], "fdiff": [4, 11, 23, 48, 67, 73, 74, 75], "self": [4, 11, 12, 21, 23, 32, 40, 42, 43, 47, 48, 58, 59, 64, 66, 67, 69, 73, 76, 77, 78, 80, 81, 82, 83, 94, 98, 103, 107, 123, 134, 177, 182, 192, 194, 196, 203, 204, 206, 208, 210, 212, 213, 217, 219, 224, 225, 243, 262], "argindex": [4, 11, 23, 48, 67, 73, 74, 75], "heavisid": [4, 11, 75, 92, 94, 217], "diff": [4, 9, 11, 12, 13, 14, 19, 23, 25, 31, 34, 46, 48, 67, 72, 73, 74, 75, 84, 89, 94, 100, 103, 122, 124, 129, 135, 136, 149, 180, 192, 194, 197, 198, 201, 203, 208, 213, 216, 217, 227, 233, 234, 235, 238, 239, 244, 266, 269, 284, 288, 295], "diracdelta": [4, 11, 75, 94, 177, 182, 217], "what": [4, 5, 7, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 27, 28, 37, 46, 48, 59, 61, 66, 67, 68, 69, 73, 74, 77, 78, 82, 92, 94, 96, 103, 107, 109, 123, 126, 127, 131, 132, 136, 143, 149, 181, 182, 185, 187, 192, 200, 201, 208, 210, 213, 216, 217, 218, 224, 226, 227, 229, 230, 233, 235, 242, 246, 248, 250, 251, 256, 266, 267, 272, 284, 286, 287, 289, 293, 294], "specif": [4, 5, 7, 8, 11, 12, 13, 14, 21, 23, 24, 30, 37, 58, 59, 67, 68, 69, 75, 79, 94, 96, 98, 103, 123, 126, 127, 131, 132, 142, 149, 151, 187, 201, 203, 204, 208, 210, 212, 213, 216, 217, 218, 223, 229, 230, 233, 234, 235, 237, 243, 248, 249, 250, 255, 290, 294], "purpos": [4, 5, 9, 12, 13, 14, 20, 21, 23, 34, 47, 48, 58, 64, 67, 68, 94, 103, 107, 132, 147, 149, 187, 201, 207, 210, 214, 216, 217, 224, 233, 236, 242, 252, 254, 256, 266, 267, 284, 294], "scope": [4, 11, 48, 142, 146, 246, 294], "high": [4, 5, 7, 11, 12, 15, 19, 21, 26, 27, 31, 48, 67, 71, 72, 95, 107, 149, 197, 206, 207, 212, 213, 215, 217, 230, 235, 279, 290], "od": [4, 12, 14, 23, 90, 127, 131, 142, 149, 231, 234, 274, 295], "seen": [4, 11, 19, 21, 40, 59, 92, 94, 109, 114, 126, 129, 131, 143, 187, 200, 204, 207, 210, 213, 233, 236, 253, 255, 266, 286, 289, 293], "hand": [4, 12, 13, 19, 21, 23, 29, 34, 47, 48, 50, 59, 60, 67, 73, 75, 94, 97, 98, 103, 107, 110, 114, 127, 131, 132, 146, 147, 150, 154, 171, 174, 186, 192, 198, 201, 202, 204, 207, 208, 210, 212, 215, 227, 236, 248, 250, 252, 256, 259, 269, 271, 288], "code": [4, 8, 10, 14, 19, 21, 22, 23, 30, 33, 34, 35, 36, 38, 39, 49, 54, 58, 61, 62, 67, 68, 69, 75, 79, 92, 94, 95, 103, 107, 108, 109, 123, 126, 132, 134, 140, 142, 143, 149, 150, 176, 182, 191, 197, 200, 202, 203, 204, 205, 206, 207, 210, 216, 227, 229, 233, 235, 236, 237, 239, 242, 245, 246, 248, 249, 250, 253, 254, 255, 256, 266, 274, 281, 286, 288, 291, 293], "less": [4, 5, 11, 14, 19, 27, 30, 32, 40, 44, 48, 49, 50, 58, 59, 66, 67, 68, 71, 72, 73, 75, 81, 82, 83, 98, 103, 107, 116, 118, 131, 132, 134, 182, 206, 207, 210, 212, 213, 226, 227, 229, 230, 233, 235, 236, 237, 248, 250], "understand": [4, 11, 12, 15, 21, 22, 23, 36, 67, 68, 92, 132, 142, 144, 145, 149, 187, 200, 203, 206, 207, 212, 217, 227, 230, 249, 256, 285, 286, 293, 294], "clear": [4, 7, 11, 12, 13, 21, 42, 57, 67, 92, 96, 123, 200, 201, 203, 206, 208, 210, 213, 227, 235, 236, 243, 248, 252, 271, 286], "begin": [4, 7, 11, 12, 13, 15, 21, 23, 25, 28, 32, 34, 40, 67, 68, 72, 73, 75, 92, 98, 100, 103, 107, 136, 144, 145, 146, 147, 178, 187, 191, 192, 201, 202, 206, 217, 227, 230, 233, 234, 236, 237, 248, 258, 286, 288, 290, 294], "convers": [4, 5, 13, 21, 30, 48, 67, 87, 109, 146, 186, 205, 206, 207, 208, 210, 212, 214, 217, 230, 242, 249, 262], "aim": [4, 5, 12, 85, 92, 187, 204, 227, 233, 236, 287, 288], "comment": [4, 5, 11, 12, 48, 58, 132, 134, 214, 217, 250, 255], "distract": 4, "input": [4, 5, 11, 12, 14, 15, 23, 25, 31, 34, 40, 46, 49, 63, 67, 68, 70, 71, 72, 73, 81, 94, 96, 97, 103, 107, 109, 112, 114, 115, 116, 118, 122, 126, 128, 131, 132, 134, 135, 136, 146, 149, 150, 155, 178, 192, 194, 196, 206, 207, 208, 210, 213, 214, 215, 216, 217, 218, 225, 229, 230, 233, 235, 237, 239, 249, 250, 252, 253, 255, 256, 258, 283, 289, 290, 294], "consum": [4, 48, 75, 128, 146], "human": [4, 11, 17, 92, 184, 213, 217], "beings": 4, "english": [4, 11, 68], "likewis": [4, 21, 47, 110, 135, 136], "reader": [4, 5, 11, 12, 23, 47, 49, 147, 204, 217, 252, 287, 292], "machineri": [4, 67, 212, 256], "mind": [4, 11, 12, 15, 18, 21, 31, 67, 103, 147, 203, 224, 225, 271, 289], "platform": [4, 67, 112, 182, 201, 233, 249], "anyon": [4, 5, 13, 37, 213, 217, 282, 292, 293], "restructuredtext": [4, 5], "extend": [4, 5, 12, 21, 23, 30, 44, 48, 58, 59, 67, 68, 72, 79, 92, 94, 103, 107, 149, 190, 197, 203, 205, 208, 210, 212, 213, 214, 217, 224, 226, 230, 232, 233, 236, 237, 238, 250, 252, 286, 288], "concis": [4, 149], "quick": [4, 5, 11, 23, 67, 103, 107, 229, 235, 256], "depth": [4, 5, 15, 16, 37, 58, 67, 134, 203, 204, 217], "tripl": [4, 11, 30, 84, 103, 201, 202, 204, 208, 212, 258], "doubl": [4, 5, 8, 34, 46, 48, 63, 67, 68, 72, 103, 109, 126, 141, 142, 200, 206, 207, 217, 226, 227, 250, 294], "quot": [4, 11, 15, 48, 97, 217, 258], "raw": [4, 5, 48, 67, 68, 73, 108, 109, 176, 181, 206, 207, 208, 213, 225, 229, 293], "backslash": [4, 67, 217], "blank": [4, 11, 12, 109, 203], "close": [4, 11, 14, 25, 33, 48, 66, 67, 71, 72, 75, 83, 85, 92, 94, 96, 118, 135, 203, 204, 205, 211, 212, 225, 235, 236, 250, 284, 294], "rare": [4, 12, 23, 67, 233, 237, 246, 286], "underlin": [4, 5], "numpydoc": [4, 5], "build": [4, 5, 6, 10, 11, 12, 18, 42, 43, 48, 67, 69, 75, 97, 149, 176, 187, 192, 201, 204, 209, 212, 213, 214, 224, 237, 266, 283, 286, 289], "cd": [4, 8, 9, 114, 236, 239, 255], "_build": [4, 8], "consist": [4, 5, 13, 14, 19, 21, 29, 31, 35, 47, 58, 59, 63, 67, 68, 72, 73, 75, 77, 83, 85, 92, 97, 107, 110, 114, 126, 129, 143, 147, 156, 176, 182, 187, 190, 196, 203, 205, 206, 207, 208, 210, 225, 233, 235, 236, 237, 241, 246, 249, 250, 255, 287, 289], "review": [4, 5, 11, 12, 148], "head": [4, 18, 47, 67, 235, 237, 243, 258, 289], "plural": [4, 5], "length": [4, 13, 40, 48, 51, 57, 58, 59, 61, 65, 67, 68, 70, 72, 73, 75, 76, 80, 82, 83, 84, 97, 98, 103, 106, 107, 110, 111, 112, 114, 122, 127, 131, 135, 136, 137, 147, 151, 155, 179, 184, 185, 186, 187, 192, 196, 201, 212, 213, 217, 223, 227, 229, 233, 237, 248, 249, 255, 258, 262, 264, 272], "equal": [4, 12, 13, 14, 17, 21, 22, 23, 27, 34, 36, 40, 44, 47, 48, 49, 56, 57, 58, 59, 63, 65, 66, 67, 68, 69, 71, 72, 73, 75, 80, 81, 82, 83, 84, 86, 92, 97, 98, 100, 103, 107, 110, 114, 118, 119, 123, 127, 129, 131, 134, 144, 145, 166, 167, 182, 186, 187, 192, 196, 201, 204, 205, 206, 207, 208, 210, 212, 213, 215, 217, 223, 225, 227, 230, 233, 234, 235, 236, 237, 243, 248, 249, 250, 255, 258, 262, 267, 272, 284, 287, 295], "clutter": 4, "harder": [4, 12, 13, 21, 67, 92, 207, 248], "minim": [4, 21, 23, 46, 58, 59, 63, 66, 67, 68, 92, 94, 97, 103, 107, 123, 136, 151, 206, 207, 208, 210, 213, 216, 226, 229, 230, 235, 255, 259], "amount": [4, 12, 47, 67, 68, 79, 126, 142, 192, 198, 201, 210, 220, 248, 262, 264], "deprec": [4, 6, 16, 29, 41, 59, 67, 94, 98, 121, 126, 127, 146, 203, 213, 217, 237, 243, 246, 247, 251, 253, 256], "notifi": 4, "awai": [4, 47, 49, 68, 110, 111, 114, 134, 212, 217], "encourag": [4, 13, 47, 144, 145, 212], "choos": [4, 8, 9, 11, 31, 34, 58, 63, 67, 69, 72, 103, 107, 111, 116, 136, 147, 182, 186, 192, 200, 201, 213, 214, 217, 224, 226, 227, 233, 234, 237, 248, 253, 294], "label": [4, 7, 34, 47, 48, 61, 67, 77, 90, 94, 112, 114, 155, 162, 166, 171, 180, 182, 203, 217, 218, 220, 229, 242, 243, 293], "elabor": [4, 24, 198, 269], "suffic": [4, 205, 235], "clarifi": 4, "complic": [4, 12, 15, 17, 21, 23, 27, 33, 40, 48, 58, 66, 68, 69, 71, 72, 73, 75, 92, 94, 100, 142, 144, 182, 201, 206, 207, 210, 214, 216, 227, 229, 236, 237, 241, 242, 250, 252, 256, 258, 284, 286, 289, 290], "demonstr": [4, 5, 15, 21, 23, 25, 27, 31, 32, 33, 58, 59, 67, 94, 107, 123, 126, 132, 136, 137, 146, 204, 207, 268, 294], "api": [4, 5, 11, 13, 21, 24, 30, 32, 48, 67, 79, 87, 108, 109, 117, 142, 147, 149, 178, 199, 203, 210, 230, 232, 256, 259, 266, 267, 270, 277, 279, 280, 287, 288, 291], "simpl": [4, 11, 12, 14, 15, 19, 21, 23, 33, 38, 47, 48, 58, 66, 67, 71, 75, 79, 83, 85, 92, 94, 96, 103, 107, 108, 110, 111, 118, 119, 122, 126, 127, 129, 131, 134, 136, 137, 139, 141, 142, 146, 150, 156, 170, 171, 179, 180, 181, 192, 200, 201, 206, 207, 208, 209, 213, 214, 217, 219, 224, 226, 227, 229, 230, 233, 236, 243, 249, 250, 255, 259, 261, 262, 264, 265, 269, 283, 286, 289, 290, 294], "too": [4, 7, 11, 12, 15, 23, 36, 58, 59, 67, 73, 75, 77, 80, 82, 92, 97, 106, 107, 108, 127, 144, 151, 224, 225, 229, 230, 233, 235, 236, 237, 248, 249, 265, 266], "thought": [4, 12, 14, 67, 224, 233, 286, 289], "perfect": [4, 23, 34, 58, 67, 107, 230, 236, 288, 289], "tell": [4, 5, 11, 21, 22, 27, 31, 34, 48, 59, 68, 71, 75, 98, 109, 131, 187, 207, 212, 216, 224, 227, 233, 249, 286], "think": [4, 11, 12, 13, 14, 21, 22, 23, 31, 38, 46, 58, 134, 187, 252, 256, 286, 294], "test_": [4, 11, 12, 248], "coverage_doctest": 4, "coverag": 4, "ad": [4, 5, 7, 8, 9, 11, 12, 13, 21, 29, 31, 40, 47, 48, 51, 57, 58, 67, 68, 78, 82, 89, 92, 96, 107, 109, 114, 122, 123, 126, 131, 132, 133, 149, 156, 184, 187, 193, 202, 203, 212, 214, 216, 217, 219, 227, 230, 233, 236, 237, 239, 242, 243, 248, 265, 286], "6868680200532414": [4, 12], "prompt": [4, 8, 12, 14], "dsolv": [4, 12, 14, 34, 233, 234, 235, 284, 288, 295], "co": [4, 9, 12, 13, 15, 23, 25, 28, 29, 31, 33, 34, 35, 36, 40, 46, 48, 66, 67, 69, 71, 72, 73, 75, 76, 77, 80, 81, 83, 85, 89, 90, 91, 92, 94, 98, 103, 107, 109, 123, 124, 126, 131, 132, 134, 135, 137, 139, 140, 141, 146, 149, 154, 156, 192, 194, 196, 198, 200, 201, 202, 203, 207, 210, 213, 214, 216, 217, 218, 219, 220, 224, 225, 226, 227, 229, 233, 235, 236, 237, 238, 244, 256, 262, 264, 265, 266, 267, 272, 283, 284, 286, 288, 294, 295], "sin": [4, 5, 12, 13, 14, 15, 21, 23, 25, 28, 31, 33, 34, 36, 38, 40, 46, 48, 66, 67, 69, 71, 72, 73, 75, 76, 77, 81, 85, 86, 89, 90, 91, 92, 94, 95, 98, 103, 108, 109, 120, 123, 124, 126, 131, 132, 134, 135, 137, 139, 140, 141, 146, 149, 154, 156, 180, 192, 194, 196, 198, 200, 201, 202, 203, 205, 207, 213, 214, 216, 217, 218, 219, 220, 224, 225, 226, 227, 229, 232, 233, 235, 236, 238, 244, 250, 256, 262, 264, 265, 266, 267, 272, 283, 284, 286, 288, 289, 294, 295], "hint": [4, 12, 23, 47, 51, 58, 67, 70, 73, 94, 98, 103, 107, 118, 149, 159, 163, 179, 181, 182, 192, 213, 224, 227, 235, 294], "1st_exact": [4, 12, 233], "eq": [4, 12, 14, 15, 17, 21, 23, 29, 30, 34, 36, 44, 46, 48, 67, 72, 73, 75, 77, 80, 84, 92, 97, 185, 203, 204, 208, 213, 215, 217, 219, 223, 225, 226, 229, 230, 232, 233, 234, 235, 236, 237, 249, 250, 256, 262, 286, 288, 295], "c1": [4, 12, 19, 34, 68, 77, 84, 98, 100, 126, 168, 182, 225, 230, 233, 235, 268, 295], "comma": [4, 5, 12, 15, 48, 67, 217, 256, 286], "readabl": [4, 12, 39, 47, 95, 122, 213, 216, 217, 224, 226, 259], "accept": [4, 11, 12, 14, 23, 29, 36, 47, 48, 58, 67, 73, 80, 81, 94, 97, 98, 100, 103, 106, 109, 118, 132, 176, 186, 192, 197, 203, 212, 213, 216, 217, 218, 225, 227, 229, 235, 249, 256, 262, 264, 267, 290], "rang": [4, 13, 14, 19, 23, 27, 30, 31, 46, 48, 56, 57, 58, 59, 61, 63, 67, 68, 72, 73, 75, 81, 98, 103, 107, 111, 114, 116, 120, 151, 182, 203, 206, 207, 208, 209, 210, 212, 213, 214, 219, 220, 223, 225, 226, 229, 233, 236, 237, 238, 242, 248, 255, 283, 294], "30": [4, 40, 46, 48, 53, 67, 68, 70, 71, 72, 75, 81, 83, 94, 98, 103, 104, 107, 110, 111, 112, 132, 155, 206, 208, 212, 213, 217, 223, 226, 229, 237, 238, 294], "7": [4, 11, 12, 15, 21, 23, 25, 27, 30, 34, 40, 42, 43, 46, 48, 51, 53, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 70, 71, 72, 73, 75, 77, 80, 81, 82, 83, 89, 92, 94, 97, 98, 100, 101, 103, 107, 109, 110, 112, 116, 118, 134, 141, 144, 145, 149, 182, 187, 189, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 217, 219, 220, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 242, 243, 248, 249, 252, 255, 256, 262, 272, 284, 289, 290, 293], "8": [4, 11, 12, 19, 25, 27, 33, 38, 40, 41, 46, 48, 51, 58, 59, 60, 63, 65, 67, 68, 70, 71, 72, 73, 75, 77, 80, 81, 83, 89, 92, 94, 96, 97, 98, 100, 101, 103, 104, 106, 107, 109, 110, 114, 116, 118, 120, 134, 149, 154, 155, 166, 202, 203, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 219, 220, 223, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 242, 248, 250, 252, 255, 262, 265, 266, 272, 283, 284, 288, 290, 294], "9": [4, 11, 12, 17, 25, 34, 36, 38, 46, 48, 55, 57, 58, 59, 63, 65, 66, 67, 68, 70, 72, 73, 75, 76, 77, 80, 81, 83, 89, 92, 94, 98, 99, 100, 101, 103, 104, 106, 107, 109, 110, 112, 116, 118, 119, 120, 121, 123, 132, 134, 137, 143, 149, 151, 155, 187, 202, 203, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 223, 225, 226, 227, 229, 230, 233, 235, 236, 237, 238, 248, 252, 255, 262, 265, 288, 290, 295], "11": [4, 21, 42, 43, 48, 58, 61, 63, 65, 67, 68, 70, 72, 75, 79, 80, 81, 83, 84, 92, 94, 97, 98, 99, 103, 107, 109, 118, 132, 134, 166, 176, 191, 202, 203, 205, 206, 208, 210, 211, 212, 213, 214, 216, 217, 224, 226, 230, 233, 235, 236, 237, 238, 248, 249, 255, 266], "12": [4, 12, 15, 23, 25, 27, 40, 46, 47, 48, 53, 55, 56, 58, 59, 60, 63, 65, 66, 67, 68, 70, 72, 73, 75, 77, 80, 81, 83, 92, 94, 98, 103, 104, 107, 110, 111, 112, 116, 118, 120, 126, 134, 135, 179, 191, 192, 202, 205, 206, 207, 210, 212, 213, 214, 216, 217, 223, 225, 226, 230, 232, 233, 237, 238, 249, 252, 255, 265, 290, 294], "13": [4, 12, 40, 48, 56, 58, 63, 67, 68, 70, 72, 75, 79, 80, 81, 82, 92, 97, 103, 107, 111, 116, 118, 132, 191, 203, 206, 210, 212, 213, 214, 216, 217, 223, 230, 232, 234, 235, 237, 238, 249, 255, 272], "14": [4, 25, 27, 48, 56, 58, 62, 63, 65, 67, 68, 72, 73, 75, 92, 103, 104, 107, 108, 110, 116, 132, 202, 203, 206, 208, 210, 211, 212, 213, 214, 216, 217, 226, 229, 230, 233, 235, 237, 238, 284], "15": [4, 15, 23, 46, 53, 56, 58, 63, 65, 67, 68, 70, 71, 72, 75, 77, 80, 81, 83, 84, 92, 94, 97, 98, 99, 103, 104, 107, 110, 123, 155, 202, 203, 205, 206, 207, 208, 212, 213, 214, 216, 217, 219, 223, 224, 226, 229, 230, 234, 235, 236, 237, 238, 255, 283, 284, 289, 290], "16": [4, 12, 25, 27, 36, 40, 46, 48, 50, 58, 59, 62, 66, 67, 68, 72, 75, 76, 77, 81, 92, 94, 97, 103, 104, 106, 107, 111, 198, 205, 206, 207, 210, 211, 212, 213, 216, 217, 223, 225, 226, 227, 230, 237, 238, 255, 262, 271, 290], "17": [4, 33, 34, 36, 56, 58, 59, 67, 68, 71, 72, 73, 77, 80, 83, 92, 103, 107, 118, 207, 208, 212, 213, 216, 217, 224, 226, 230, 233, 238, 252, 256, 288], "18": [4, 33, 50, 58, 59, 67, 70, 72, 75, 77, 80, 83, 99, 103, 107, 110, 111, 116, 118, 120, 193, 202, 210, 211, 216, 217, 225, 226, 230, 233, 235, 236, 237, 238, 265], "19": [4, 25, 33, 58, 67, 70, 75, 77, 80, 83, 103, 107, 109, 110, 202, 208, 212, 213, 216, 226, 230, 232, 235, 249, 283], "20": [4, 15, 25, 33, 36, 44, 48, 56, 58, 59, 66, 67, 68, 71, 72, 75, 83, 84, 94, 103, 107, 110, 111, 112, 114, 118, 129, 187, 189, 202, 203, 206, 207, 211, 212, 213, 214, 216, 217, 223, 224, 225, 226, 229, 230, 233, 236, 237, 262, 284], "21": [4, 13, 53, 58, 67, 70, 72, 80, 81, 89, 103, 107, 109, 110, 191, 203, 206, 208, 210, 211, 212, 214, 216, 217, 223, 233, 237, 238, 294], "22": [4, 12, 15, 58, 67, 70, 71, 72, 75, 103, 107, 110, 111, 191, 211, 216, 229, 230, 235, 237], "23": [4, 46, 58, 59, 67, 70, 73, 75, 81, 83, 103, 107, 110, 191, 208, 210, 213, 216, 223, 230, 255], "24": [4, 11, 12, 30, 32, 33, 40, 46, 55, 59, 60, 67, 70, 72, 75, 81, 89, 94, 103, 107, 110, 111, 116, 118, 179, 189, 202, 208, 210, 212, 213, 214, 216, 219, 224, 230, 233, 237, 252, 255, 272, 284, 290], "25": [4, 15, 25, 30, 33, 58, 59, 68, 70, 72, 75, 77, 80, 82, 99, 103, 106, 107, 110, 111, 118, 123, 129, 196, 202, 206, 210, 212, 213, 216, 217, 223, 224, 226, 230, 232, 233, 234, 237, 249], "26": [4, 56, 67, 68, 70, 75, 79, 103, 107, 110, 111, 213, 230, 237], "27": [4, 11, 31, 48, 49, 58, 62, 72, 77, 103, 107, 110, 111, 118, 120, 210, 213, 235], "28": [4, 48, 58, 66, 70, 71, 75, 103, 107, 110, 134, 226, 230, 233, 289], "29": [4, 21, 40, 42, 43, 50, 56, 58, 59, 67, 68, 70, 72, 73, 80, 81, 103, 107, 118, 171, 207, 225, 237, 255], "assumpt": [4, 12, 14, 15, 20, 22, 24, 30, 31, 32, 41, 42, 44, 45, 47, 48, 58, 59, 61, 66, 69, 71, 73, 74, 94, 97, 98, 103, 104, 110, 118, 122, 149, 186, 189, 194, 206, 216, 217, 225, 226, 229, 233, 235, 236, 242, 250, 255, 273, 274, 294], "parenthes": [4, 12, 15, 67, 109, 122, 170, 171, 201, 217, 241, 258], "respect": [4, 9, 13, 14, 15, 23, 25, 34, 41, 43, 44, 46, 47, 48, 49, 57, 58, 59, 62, 63, 65, 66, 67, 69, 72, 73, 75, 77, 79, 83, 84, 89, 90, 92, 94, 97, 98, 100, 103, 107, 109, 110, 111, 114, 118, 123, 124, 126, 129, 131, 136, 143, 145, 147, 149, 156, 171, 184, 185, 191, 192, 196, 198, 201, 202, 203, 204, 206, 207, 210, 212, 213, 214, 217, 219, 220, 223, 225, 229, 233, 234, 235, 236, 237, 238, 242, 243, 248, 250, 262, 264, 265, 266, 267, 268, 269, 270, 271, 284, 294], "type": [4, 7, 9, 11, 13, 14, 15, 16, 18, 21, 22, 23, 25, 28, 30, 31, 36, 42, 43, 46, 50, 58, 59, 63, 66, 67, 68, 69, 70, 71, 73, 77, 78, 79, 80, 81, 82, 85, 92, 94, 95, 96, 97, 98, 99, 100, 103, 107, 108, 109, 110, 111, 114, 116, 118, 122, 126, 127, 131, 132, 143, 149, 154, 168, 176, 177, 178, 180, 186, 192, 196, 197, 201, 203, 204, 206, 207, 208, 211, 212, 213, 214, 215, 217, 218, 219, 225, 226, 227, 229, 230, 232, 233, 235, 241, 242, 243, 246, 248, 249, 250, 255, 256, 258, 266, 269, 272, 284, 286, 288, 289, 290, 293, 294, 295], "enclos": [4, 77, 78, 83, 106, 119, 217, 227, 256], "backtick": [4, 5, 8], "colon": [4, 67], "preced": [4, 5, 15, 49, 59, 67, 68, 71, 72, 162, 229, 256], "space": [4, 12, 15, 23, 46, 47, 48, 67, 68, 69, 76, 77, 78, 80, 82, 83, 96, 103, 109, 110, 120, 126, 127, 128, 129, 151, 153, 156, 166, 169, 171, 177, 179, 192, 196, 198, 201, 202, 203, 204, 212, 236, 237, 248, 252, 262, 264, 266, 267, 268, 269, 271, 272, 279, 286, 289], "omit": [4, 13, 21, 23, 48, 59, 66, 67, 68, 72, 92, 94, 97, 103, 184, 206, 217, 218, 225, 227, 235, 241, 250, 255, 284], "absent": [4, 51, 235], "possibl": [4, 8, 11, 12, 13, 14, 17, 21, 22, 23, 25, 27, 30, 35, 38, 46, 48, 49, 50, 51, 56, 58, 59, 61, 62, 63, 67, 68, 72, 73, 75, 77, 79, 81, 82, 84, 89, 91, 92, 94, 96, 97, 98, 100, 103, 107, 119, 120, 122, 127, 134, 145, 176, 178, 182, 184, 186, 187, 191, 196, 198, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 218, 219, 223, 224, 225, 226, 229, 230, 233, 234, 235, 236, 237, 238, 243, 248, 250, 251, 252, 253, 255, 256, 266, 267, 269, 285, 286, 289, 294], "specifi": [4, 5, 13, 17, 21, 23, 27, 32, 33, 35, 36, 47, 48, 49, 62, 66, 67, 68, 69, 70, 73, 75, 76, 80, 83, 92, 94, 96, 97, 98, 100, 103, 107, 109, 110, 111, 112, 118, 123, 126, 127, 131, 132, 134, 136, 137, 139, 142, 144, 145, 146, 147, 149, 150, 166, 171, 176, 177, 179, 180, 185, 191, 192, 194, 196, 198, 200, 201, 204, 205, 206, 207, 208, 210, 212, 213, 214, 217, 219, 220, 223, 224, 225, 227, 229, 233, 234, 235, 236, 237, 238, 242, 243, 244, 248, 249, 250, 255, 256, 262, 264, 265, 268, 271, 290], "displai": [4, 5, 7, 11, 15, 21, 22, 34, 67, 68, 71, 92, 96, 110, 111, 116, 153, 186, 192, 196, 197, 203, 207, 208, 217, 225, 241, 248], "signatur": [4, 7, 23, 42, 43, 59, 67, 103, 250, 251, 255, 256], "brace": [4, 72, 132, 217], "appear": [4, 5, 11, 12, 14, 15, 17, 34, 47, 48, 51, 56, 58, 67, 68, 72, 73, 76, 77, 80, 83, 86, 90, 92, 94, 98, 103, 107, 109, 132, 136, 166, 182, 184, 187, 203, 205, 207, 210, 212, 213, 217, 226, 229, 233, 234, 235, 237, 241, 243, 248, 255, 256, 262, 267], "shape": [4, 13, 48, 83, 98, 100, 103, 105, 106, 116, 118, 126, 131, 132, 192, 203, 204, 206, 217, 220, 227, 237, 238, 239, 241, 242, 243, 256, 293], "combin": [4, 11, 13, 15, 23, 27, 35, 47, 67, 71, 72, 75, 94, 96, 97, 98, 107, 111, 118, 126, 131, 135, 142, 150, 161, 168, 176, 177, 179, 180, 181, 185, 186, 187, 188, 204, 205, 207, 208, 210, 212, 213, 217, 218, 226, 227, 229, 230, 233, 235, 237, 238, 252, 255, 283, 286, 289], "incorrectli": [4, 11, 13, 23, 76, 77, 103, 205], "opt_cs": [4, 229], "canon": [4, 14, 21, 29, 48, 51, 56, 58, 59, 63, 67, 68, 69, 73, 83, 92, 97, 103, 107, 109, 127, 159, 163, 182, 184, 187, 189, 210, 218, 225, 226, 229, 233, 235, 237, 243, 255, 294], "find": [4, 9, 11, 12, 14, 15, 17, 19, 20, 23, 25, 28, 29, 30, 31, 32, 34, 35, 36, 40, 43, 46, 48, 49, 50, 58, 61, 62, 63, 66, 67, 71, 73, 75, 77, 79, 80, 81, 84, 89, 92, 94, 96, 103, 107, 109, 112, 124, 129, 133, 140, 147, 149, 151, 167, 174, 176, 177, 178, 182, 185, 187, 200, 203, 204, 205, 206, 207, 208, 210, 214, 216, 217, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 235, 236, 237, 243, 252, 255, 256, 258, 262, 272, 284, 286, 288, 290, 295], "optim": [4, 14, 33, 48, 51, 58, 71, 97, 107, 122, 149, 162, 166, 213, 217, 218, 226, 229, 237, 249], "mul": [4, 13, 14, 15, 18, 23, 40, 92, 94, 98, 107, 162, 166, 176, 177, 206, 207, 208, 212, 213, 217, 218, 219, 226, 229, 233, 234, 235, 236, 241, 289], "pow": [4, 13, 14, 15, 40, 45, 48, 67, 68, 73, 92, 98, 107, 181, 206, 207, 208, 213, 217, 219, 226, 229, 235, 236, 289, 293], "neg": [4, 14, 15, 21, 22, 25, 31, 44, 45, 48, 49, 62, 66, 67, 72, 73, 75, 77, 79, 80, 83, 92, 94, 96, 97, 98, 103, 106, 107, 110, 111, 114, 115, 116, 118, 126, 182, 192, 202, 205, 206, 208, 210, 212, 213, 214, 217, 223, 225, 226, 227, 229, 230, 233, 235, 236, 237, 256], "coeffici": [4, 17, 19, 21, 27, 30, 32, 43, 46, 48, 66, 67, 69, 71, 72, 75, 80, 85, 86, 89, 90, 92, 96, 97, 100, 103, 104, 107, 118, 119, 127, 132, 155, 169, 179, 187, 202, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 219, 220, 223, 224, 227, 229, 230, 232, 233, 234, 235, 236, 237, 243, 249, 266, 269, 279, 289, 294], "none": [4, 5, 12, 13, 14, 21, 22, 23, 40, 41, 42, 43, 44, 46, 47, 48, 50, 56, 57, 58, 59, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 88, 89, 90, 92, 94, 95, 97, 98, 100, 103, 104, 107, 108, 109, 110, 114, 118, 123, 124, 126, 127, 128, 129, 131, 132, 151, 153, 155, 156, 162, 167, 172, 177, 179, 182, 184, 188, 189, 190, 192, 194, 196, 197, 201, 202, 203, 204, 206, 207, 208, 210, 212, 213, 215, 217, 218, 219, 220, 222, 223, 224, 225, 226, 229, 230, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 246, 248, 249, 250, 251, 255, 256, 258, 261, 262, 265, 290, 294, 295], "process": [4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 21, 45, 48, 58, 59, 65, 67, 68, 73, 75, 83, 92, 94, 103, 107, 118, 127, 128, 131, 132, 134, 140, 143, 144, 146, 149, 203, 204, 210, 217, 218, 225, 229, 233, 235, 239, 248, 252, 294], "concern": [4, 12, 14, 21, 46, 49, 66, 71, 107, 198, 203, 205, 206, 207, 216, 217, 218, 229, 230, 235, 249, 250, 252, 258], "item": [4, 5, 14, 15, 17, 27, 34, 48, 56, 57, 59, 67, 72, 78, 84, 98, 103, 107, 127, 129, 147, 203, 206, 207, 210, 213, 217, 225, 233, 234, 237, 248, 249, 252, 255, 256, 294], "fragment": [4, 68], "desir": [4, 13, 15, 19, 23, 29, 34, 36, 39, 58, 59, 67, 68, 70, 71, 72, 73, 77, 81, 83, 97, 98, 103, 106, 107, 108, 127, 128, 129, 131, 142, 146, 167, 192, 200, 201, 206, 208, 210, 212, 213, 214, 217, 218, 220, 225, 229, 233, 235, 236, 249, 251, 252, 255, 269, 283], "span": [4, 13, 96, 103, 110, 111, 126, 212, 217, 253, 290], "subsequ": [4, 11, 12, 15, 34, 67, 73, 192, 208, 210, 213, 252, 255, 266, 269], "indent": [4, 15, 258], "embed": [4, 5, 46, 59, 67, 95, 212], "hyperlink": 4, "classnam": 4, "erf": [4, 75, 92, 94, 217, 227, 237], "gauss": [4, 32, 75, 94, 103, 151, 205, 206, 212, 215, 235, 236], "erfc": [4, 75, 92, 217, 237], "complementari": [4, 75, 118], "erfi": [4, 75, 92, 217], "erf2": [4, 75, 217], "erfinv": [4, 75, 217, 237], "invers": [4, 12, 32, 34, 40, 58, 59, 67, 68, 69, 75, 94, 100, 103, 107, 126, 127, 131, 171, 175, 176, 179, 184, 187, 204, 205, 206, 208, 210, 213, 214, 217, 219, 227, 229, 233, 235, 236, 237, 255, 290, 294], "erfcinv": [4, 75, 217], "erf2inv": [4, 75, 217], "besselj": [4, 75, 89, 217, 229, 233, 288], "besselbas": [4, 75], "bessel": [4, 5, 73, 85, 94, 213, 229, 233, 237, 288], "kind": [4, 5, 13, 14, 20, 21, 22, 23, 47, 48, 69, 72, 75, 87, 94, 98, 110, 114, 127, 132, 145, 186, 198, 205, 207, 208, 213, 218, 219, 225, 233, 234, 237, 255, 269, 271, 284, 294], "bess": [4, 75, 217, 229, 233, 237], "besselk": [4, 75, 217, 237], "cite": [4, 24], "resourc": [4, 5, 8, 23, 103, 211, 233, 249, 259], "citat": 4, "meant": [4, 5, 12, 13, 15, 21, 23, 48, 67, 75, 80, 94, 107, 132, 149, 203, 208, 225, 229, 234, 239, 267, 289], "augment": [4, 48, 103, 127, 131, 144, 145, 149, 215, 235, 236, 253, 256, 295], "freeli": [4, 39, 101, 126, 204], "wikipedia": [4, 14, 21, 23, 40, 42, 43, 44, 46, 47, 48, 50, 55, 56, 58, 59, 66, 67, 68, 69, 70, 72, 73, 75, 77, 79, 83, 84, 85, 94, 96, 97, 98, 100, 103, 107, 116, 118, 121, 151, 153, 154, 155, 157, 158, 159, 163, 164, 165, 168, 170, 171, 180, 182, 185, 192, 194, 199, 206, 213, 220, 224, 225, 226, 233, 236, 237, 250, 255, 262, 264, 268, 270, 272, 288, 290, 292], "wolfram": [4, 44, 60, 61, 67, 68, 70, 72, 73, 75, 77, 83, 94, 103, 107, 109, 211, 217, 219, 220, 222, 225, 230, 237, 255, 290], "mathworld": [4, 14, 44, 60, 61, 67, 68, 70, 72, 73, 75, 77, 83, 94, 103, 107, 211, 220, 225, 230, 237, 255], "nist": [4, 73, 75, 187], "digit": [4, 11, 14, 15, 33, 48, 67, 68, 70, 71, 77, 94, 97, 107, 142, 192, 207, 213, 224, 229, 255, 283], "dlmf": [4, 73, 75], "suffer": [4, 213], "rot": [4, 83, 179], "publish": [4, 92, 227], "identifi": [4, 12, 13, 21, 22, 46, 60, 67, 70, 71, 94, 103, 114, 131, 144, 170, 171, 204, 207, 208, 218, 226, 229, 233, 234, 236, 237, 256, 259], "clickabl": 4, "kozen89": [4, 210, 211], "d": [4, 5, 7, 8, 11, 12, 13, 14, 15, 19, 23, 25, 28, 30, 32, 34, 40, 47, 51, 56, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 72, 75, 77, 81, 85, 90, 92, 94, 96, 97, 98, 99, 100, 103, 104, 106, 107, 109, 110, 114, 118, 126, 127, 128, 149, 151, 154, 155, 161, 171, 179, 181, 182, 187, 191, 192, 194, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 217, 219, 223, 227, 229, 230, 233, 234, 235, 236, 237, 238, 239, 241, 243, 255, 258, 262, 264, 265, 266, 267, 271, 279, 290, 295], "kozen": [4, 211], "landau": [4, 211, 284], "polynomi": [4, 5, 14, 19, 21, 28, 30, 36, 44, 58, 66, 67, 68, 71, 72, 85, 86, 88, 90, 94, 97, 98, 100, 103, 107, 111, 118, 149, 191, 204, 206, 211, 215, 219, 224, 226, 227, 229, 230, 232, 233, 236, 248, 273, 280, 285, 290, 295], "decomposit": [4, 27, 32, 58, 65, 99, 100, 103, 206, 208, 210, 211, 219, 294], "1989": [4, 211, 235], "pp": [4, 58, 59, 65, 66, 67, 68, 72, 73, 94, 98, 103, 128, 136, 146, 202, 205, 206, 210, 211, 233, 234, 237], "445": [4, 211], "456": [4, 67, 211], "abramowitz": [4, 75], "milton": [4, 75], "stegun": [4, 75], "iren": [4, 75], "chapter": [4, 58, 75, 107, 132, 211], "handbook": [4, 49, 57, 58, 65, 75, 107], "formula": [4, 19, 27, 40, 46, 61, 66, 67, 71, 72, 73, 75, 80, 97, 103, 107, 202, 204, 210, 213, 217, 219, 223, 226, 229, 230, 233, 288, 294], "tabl": [4, 21, 49, 58, 67, 72, 75, 88, 94, 103, 107, 126, 149, 202, 212, 239], "ed": [4, 59, 75, 94, 103, 211, 235, 237], "1965": [4, 75, 98], "luke": [4, 75, 92, 227], "l": [4, 13, 15, 46, 47, 48, 49, 56, 58, 59, 66, 68, 75, 78, 79, 80, 81, 82, 84, 85, 90, 92, 94, 96, 99, 100, 103, 107, 110, 111, 118, 120, 126, 127, 128, 129, 131, 132, 135, 136, 137, 139, 140, 141, 145, 146, 147, 148, 149, 150, 151, 154, 180, 183, 184, 185, 187, 200, 201, 202, 204, 206, 208, 210, 211, 217, 219, 220, 226, 227, 230, 233, 235, 237, 241, 242, 243, 244, 248, 250, 255, 272, 294], "Their": [4, 67, 75, 92, 202, 203, 207, 210, 227], "approxim": [4, 15, 20, 36, 46, 58, 66, 67, 68, 71, 75, 77, 83, 92, 94, 103, 107, 111, 115, 151, 185, 203, 207, 208, 213, 220, 224, 227, 237, 284, 288], "1969": [4, 68, 75, 92, 211, 227], "en": [4, 5, 8, 9, 11, 12, 21, 23, 40, 42, 43, 44, 46, 47, 48, 50, 55, 56, 58, 59, 66, 67, 68, 69, 70, 72, 73, 75, 77, 79, 83, 84, 85, 94, 95, 96, 97, 98, 100, 103, 107, 116, 118, 121, 151, 153, 154, 155, 157, 158, 159, 163, 164, 165, 168, 170, 171, 180, 182, 192, 194, 199, 206, 213, 214, 220, 224, 225, 226, 233, 236, 237, 250, 255, 256, 262, 264, 268, 270, 272, 290], "bessel_funct": [4, 75], "typefunct": [4, 75], "gamma": [4, 5, 12, 15, 23, 66, 67, 69, 71, 72, 92, 94, 121, 149, 179, 201, 202, 217, 227, 229, 233, 237, 294], "infti": [4, 14, 21, 44, 66, 67, 68, 72, 73, 75, 92, 94, 204, 213, 220, 224, 227, 233, 236, 237, 284, 288, 294], "mathrm": [4, 38, 57, 66, 67, 68, 75, 92, 94, 103, 208, 210, 217, 225, 227, 233, 236, 237, 284, 288], "factori": [4, 12, 19, 23, 32, 66, 67, 71, 72, 75, 103, 107, 109, 202, 208, 210, 212, 213, 217, 219, 229, 235, 237, 250, 251, 255, 256, 294], "z": [4, 13, 14, 15, 17, 21, 23, 30, 33, 34, 35, 40, 44, 45, 48, 49, 58, 59, 66, 67, 68, 69, 70, 72, 73, 75, 79, 80, 81, 82, 83, 92, 94, 97, 98, 100, 103, 109, 110, 111, 112, 118, 120, 123, 124, 126, 129, 131, 132, 134, 135, 136, 137, 139, 140, 141, 143, 146, 147, 149, 150, 151, 160, 162, 166, 176, 177, 179, 183, 187, 191, 192, 193, 194, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 216, 217, 218, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 241, 242, 243, 249, 250, 256, 262, 265, 266, 267, 268, 269, 271, 272, 283, 284, 286, 288, 289, 293, 294, 295], "whole": [4, 12, 13, 21, 67, 69, 75, 94, 111, 120, 203, 204, 212, 213, 217, 220, 225, 227, 233, 236, 255], "complex": [4, 7, 12, 13, 14, 15, 18, 21, 23, 30, 31, 32, 36, 40, 44, 45, 46, 48, 58, 67, 68, 70, 71, 72, 75, 79, 89, 92, 98, 99, 103, 107, 108, 109, 116, 118, 122, 127, 131, 132, 149, 151, 155, 165, 168, 170, 171, 182, 191, 192, 201, 205, 208, 212, 213, 217, 218, 222, 225, 227, 229, 233, 235, 236, 237, 250, 258, 294, 295], "plane": [4, 25, 40, 67, 75, 77, 79, 80, 82, 83, 94, 103, 116, 126, 134, 154, 155, 200, 201, 225, 236, 272, 280, 294], "pole": [4, 14, 25, 75, 92, 118, 126, 155, 224, 227, 233], "pi": [4, 12, 13, 14, 15, 18, 21, 23, 28, 29, 31, 34, 36, 39, 40, 41, 43, 44, 45, 46, 48, 59, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 86, 92, 94, 103, 107, 120, 126, 134, 149, 151, 153, 154, 155, 156, 158, 166, 177, 179, 180, 183, 185, 192, 202, 203, 205, 207, 208, 213, 217, 220, 224, 225, 226, 227, 229, 232, 233, 235, 236, 237, 255, 262, 265, 272, 283, 288, 294], "oo": [4, 14, 17, 21, 22, 25, 29, 44, 46, 66, 67, 71, 72, 73, 75, 80, 92, 94, 97, 103, 118, 120, 168, 180, 183, 208, 210, 213, 222, 223, 224, 225, 229, 232, 233, 235, 236, 237, 242, 255, 258, 284, 288], "known": [4, 11, 12, 14, 21, 22, 23, 25, 34, 43, 47, 48, 49, 50, 56, 58, 59, 67, 68, 71, 72, 75, 77, 80, 85, 92, 94, 95, 104, 107, 116, 118, 119, 121, 123, 129, 131, 146, 185, 192, 200, 206, 207, 208, 212, 213, 217, 220, 223, 225, 226, 227, 229, 232, 233, 234, 235, 237, 255, 256, 262, 269, 271, 294], "sqrt": [4, 12, 13, 14, 17, 21, 23, 25, 27, 28, 29, 30, 31, 35, 36, 40, 44, 45, 46, 48, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 90, 91, 92, 94, 95, 98, 99, 103, 107, 109, 110, 114, 118, 120, 134, 151, 153, 155, 156, 161, 166, 176, 177, 179, 180, 182, 183, 185, 186, 192, 198, 201, 202, 205, 207, 208, 210, 212, 213, 216, 217, 218, 223, 226, 227, 229, 230, 232, 233, 235, 236, 237, 255, 256, 258, 262, 271, 272, 283, 288, 293, 294, 295], "obei": [4, 75, 202, 217, 227], "mirror": [4, 75, 94, 155], "symmetri": [4, 13, 50, 55, 60, 63, 75, 98, 161, 202, 233, 241, 243, 283, 294], "conjug": [4, 27, 44, 56, 57, 58, 67, 73, 75, 98, 103, 120, 151, 165, 168, 182, 213, 217, 233, 243], "differenti": [4, 5, 12, 13, 14, 25, 28, 46, 67, 72, 73, 75, 84, 85, 87, 90, 94, 118, 126, 127, 131, 132, 134, 136, 139, 142, 143, 144, 145, 146, 149, 150, 171, 177, 191, 192, 194, 196, 198, 201, 204, 210, 214, 216, 217, 222, 227, 229, 233, 234, 262, 269, 270, 273, 280, 284, 285, 288], "polygamma": [4, 72, 75, 217], "seri": [4, 11, 12, 13, 19, 25, 34, 46, 47, 48, 49, 57, 58, 66, 67, 69, 71, 72, 73, 75, 90, 91, 92, 96, 107, 115, 118, 132, 139, 141, 149, 196, 200, 209, 210, 217, 222, 223, 227, 233, 236, 274, 280, 285], "expans": [4, 11, 19, 23, 48, 67, 69, 72, 73, 75, 94, 103, 107, 146, 161, 163, 213, 214, 219, 220, 221, 226, 228, 229, 233, 235, 236, 274, 285, 294], "eulergamma": [4, 67, 71, 72, 75], "zeta": [4, 14, 15, 66, 67, 71, 72, 208, 212, 217, 224, 237], "40": [4, 36, 48, 70, 72, 75, 77, 84, 98, 103, 107, 110, 203, 214, 216, 217, 237, 258, 283], "288037795340032417959588909060233922890": [4, 75], "49801566811835604271": [4, 75], "15494982830181068512": [4, 75], "lowergamma": [4, 75, 237], "lower": [4, 14, 21, 29, 44, 46, 48, 58, 59, 66, 67, 69, 75, 76, 78, 83, 84, 94, 98, 99, 100, 103, 116, 121, 126, 182, 196, 202, 204, 206, 208, 210, 213, 217, 226, 227, 229, 233, 242, 243, 252, 262, 284, 292], "uppergamma": [4, 72, 75, 217, 237], "upper": [4, 44, 66, 68, 71, 75, 76, 83, 84, 98, 99, 100, 103, 106, 107, 116, 126, 175, 182, 202, 206, 208, 210, 212, 213, 217, 227, 235, 242, 262], "loggamma": [4, 5, 75, 217], "log": [4, 5, 9, 11, 12, 15, 23, 38, 40, 46, 48, 58, 66, 67, 71, 72, 73, 75, 85, 89, 91, 92, 94, 98, 103, 107, 203, 208, 217, 219, 224, 227, 229, 233, 236, 237, 244, 284, 294, 295], "digamma": [4, 72, 75, 217], "trigamma": [4, 75, 217], "beta": [4, 15, 48, 58, 67, 94, 179, 192, 202, 212, 214, 217, 233, 237], "euler": [4, 40, 46, 47, 66, 67, 68, 71, 72, 75, 83, 89, 95, 107, 126, 179, 192, 197, 201, 202, 213, 217, 233, 237, 262, 264], "gamma_funct": [4, 75], "gov": [4, 73, 75], "gammafunct": [4, 75], "gammabetaerf": [4, 72, 75], "unusu": [4, 21, 134, 248], "inlin": [4, 12, 95, 197, 217, 250], "pretti": [4, 9, 11, 12, 14, 23, 47, 48, 75, 94, 95, 103, 107, 111, 118, 134, 197, 227, 229, 236, 271, 285, 288, 290, 294], "As": [4, 18, 19, 22, 23, 27, 32, 33, 34, 39, 48, 58, 59, 67, 68, 71, 72, 73, 75, 91, 92, 97, 103, 106, 107, 109, 126, 131, 132, 134, 136, 143, 146, 147, 182, 187, 200, 204, 205, 207, 208, 210, 213, 214, 216, 217, 224, 225, 227, 233, 236, 237, 255, 256, 266, 267, 283, 284, 286, 288, 289, 290, 293, 294], "literatur": [4, 14, 92, 209, 280], "fact": [4, 12, 13, 14, 21, 22, 23, 31, 43, 44, 67, 72, 75, 85, 92, 107, 114, 134, 146, 187, 204, 205, 206, 207, 210, 212, 214, 216, 227, 229, 233, 236, 248, 256, 271, 283, 286, 287, 288, 289, 294], "eval": [4, 13, 21, 42, 43, 48, 67, 73, 75, 168, 182, 208, 213, 217, 250, 283], "illumin": 4, "tone": 4, "narr": [4, 287], "excerpt": 4, "geometri": [4, 76, 77, 78, 80, 81, 82, 83, 84, 94, 142, 155, 209, 265, 272, 273, 280, 288], "autofunct": [4, 11], "intersect": [4, 21, 31, 46, 47, 58, 77, 78, 80, 81, 82, 83, 84, 103, 155, 204, 213, 217, 223, 224, 225, 236], "convex_hul": [4, 79, 83, 84], "are_similar": [4, 78, 79, 84], "autoclass": 4, "linearent": [4, 77, 80, 81, 82, 83], "rai": [4, 77, 79, 80, 81, 83, 84, 151, 155], "segment": [4, 13, 58, 77, 79, 80, 81, 82, 83, 84, 200, 203, 233, 248], "curv": [4, 47, 69, 79, 94, 107, 110, 151, 203, 204, 233, 262, 272, 280, 284], "ellips": [4, 78, 79, 83, 154, 203, 217, 280, 293], "circl": [4, 23, 67, 77, 78, 79, 81, 82, 83, 84, 92, 155, 162, 203, 236, 262, 265, 272], "polygon": [4, 77, 78, 79, 84, 203, 272, 280], "regularpolygon": [4, 78, 79, 83, 203], "triangl": [4, 23, 47, 72, 78, 79, 83, 84, 94, 98, 107, 202, 203, 265, 272], "rel": [4, 5, 30, 47, 48, 57, 58, 59, 60, 64, 65, 66, 67, 68, 71, 78, 92, 103, 107, 123, 126, 127, 129, 137, 146, 147, 154, 181, 192, 196, 200, 201, 204, 206, 207, 210, 212, 225, 227, 232, 235, 237, 248, 255, 266, 267, 271, 288], "cumbersom": [4, 11, 36], "path": [4, 8, 11, 12, 13, 58, 83, 89, 118, 140, 198, 200, 203, 226, 229, 233, 236, 248, 249, 252, 253, 255, 258, 259, 260, 269], "viewcod": 4, "aco": [4, 15, 40, 73, 80, 83, 134, 149, 155, 192, 217, 233, 262, 294], "obj": [4, 21, 67, 208, 213, 217, 251], "qualifi": [4, 259], "elementari": [4, 11, 12, 21, 22, 23, 58, 67, 68, 71, 74, 75, 89, 92, 94, 98, 103, 107, 147, 175, 178, 208, 213, 214, 255, 256, 266, 274], "trigonometr": [4, 23, 29, 36, 67, 94, 214, 220, 228, 229, 232, 233, 236, 256, 274, 285, 295], "trail": [4, 12, 59, 107, 208, 210, 213, 253, 258], "pair": [4, 15, 19, 27, 30, 47, 48, 58, 59, 67, 68, 73, 79, 84, 91, 103, 107, 132, 136, 147, 172, 174, 176, 177, 182, 202, 204, 206, 207, 208, 210, 212, 213, 218, 223, 224, 226, 227, 229, 230, 233, 236, 237, 250, 255, 266, 283, 290], "www": [4, 5, 25, 40, 46, 58, 59, 68, 70, 72, 94, 95, 107, 116, 118, 197, 206, 211, 216, 217, 226, 229, 230, 233, 237, 255, 290, 293], "master": [4, 5, 7, 11, 12, 38, 94, 248], "usag": [4, 5, 12, 14, 15, 21, 22, 23, 39, 42, 69, 73, 94, 107, 179, 198, 203, 204, 206, 210, 217, 225, 227, 230, 233, 234, 238, 252, 256, 257, 269, 270, 277, 289], "expect": [4, 5, 7, 15, 21, 23, 25, 47, 49, 52, 67, 73, 75, 79, 97, 107, 108, 118, 126, 132, 176, 207, 210, 212, 214, 215, 224, 229, 232, 235, 236, 237, 246, 248, 249, 252, 255, 256, 288, 289], "vector": [4, 13, 19, 26, 40, 44, 48, 51, 58, 59, 67, 69, 75, 80, 81, 82, 89, 90, 96, 98, 103, 108, 110, 112, 114, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 134, 136, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 154, 155, 168, 177, 179, 184, 187, 192, 194, 196, 197, 204, 206, 212, 217, 227, 233, 235, 237, 242, 243, 248, 249, 264, 268, 273, 277, 279, 290], "dynamicsymbol": [4, 103, 122, 123, 124, 126, 127, 129, 131, 132, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 192, 194, 196, 197, 198, 200, 201], "custom": [4, 9, 13, 24, 48, 59, 67, 71, 74, 95, 98, 103, 124, 126, 191, 197, 198, 219, 223, 230, 237, 243, 249, 256, 262, 271, 288, 290], "sine": [4, 23, 67, 73, 75, 92, 94, 156, 214, 220, 226, 283], "expand": [4, 12, 13, 14, 15, 19, 21, 25, 27, 48, 67, 69, 71, 72, 73, 75, 92, 94, 98, 118, 132, 134, 149, 163, 171, 174, 181, 182, 205, 207, 210, 212, 213, 214, 217, 220, 224, 226, 227, 229, 233, 236, 237, 241, 249, 256, 268, 283, 288], "troubleshoot": [4, 9, 146], "tip": [4, 7, 8, 12, 67, 146, 233, 234, 294], "spell": [4, 13, 14, 233], "try": [4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 27, 29, 30, 33, 34, 36, 59, 66, 67, 71, 75, 77, 82, 92, 94, 97, 100, 103, 106, 107, 109, 131, 172, 174, 181, 182, 203, 207, 208, 212, 217, 222, 224, 225, 226, 227, 229, 230, 233, 235, 255, 256, 258, 283, 286, 289, 290, 294], "referencefram": [4, 13, 123, 124, 126, 127, 129, 131, 132, 134, 135, 136, 139, 140, 141, 144, 145, 146, 147, 149, 150, 192, 193, 194, 196, 197, 198, 199, 200, 279], "though": [4, 11, 14, 15, 21, 22, 23, 27, 33, 34, 35, 36, 39, 49, 67, 68, 69, 72, 79, 83, 92, 94, 98, 103, 107, 122, 127, 134, 144, 146, 177, 186, 191, 192, 200, 201, 205, 207, 208, 213, 214, 226, 227, 229, 233, 234, 235, 236, 248, 269, 284, 289, 294], "frame": [4, 122, 123, 124, 126, 127, 129, 131, 132, 134, 135, 136, 137, 139, 141, 143, 144, 145, 146, 147, 149, 150, 191, 192, 193, 194, 196, 198, 200, 252, 262, 269], "notimplementederror": [4, 29, 31, 34, 35, 36, 46, 66, 77, 80, 84, 94, 103, 116, 206, 212, 213, 216, 225, 232, 233, 234, 235, 236], "outsid": [4, 31, 44, 58, 67, 75, 78, 83, 98, 107, 122, 187, 201, 213, 229, 284, 289], "plot": [4, 23, 25, 34, 38, 76, 77, 79, 80, 83, 90, 95, 103, 110, 111, 114, 117, 149, 166, 169, 175, 220, 273, 279, 280, 288, 293], "recommend": [4, 8, 9, 11, 13, 14, 15, 16, 21, 23, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 47, 48, 67, 68, 71, 98, 122, 144, 149, 176, 192, 200, 205, 206, 207, 208, 214, 230, 233, 236, 242, 246, 253, 266, 267, 292, 295], "ahead": [4, 107], "submit": [4, 11], "sub": [4, 12, 13, 14, 15, 17, 21, 22, 23, 25, 27, 30, 31, 33, 34, 48, 66, 67, 73, 75, 76, 77, 78, 79, 80, 81, 83, 94, 97, 98, 100, 103, 107, 109, 110, 111, 118, 122, 124, 132, 134, 135, 136, 139, 140, 146, 149, 179, 180, 185, 192, 202, 204, 206, 207, 208, 213, 217, 224, 225, 229, 230, 233, 234, 235, 237, 248, 249, 251, 283, 284, 286], "common": [4, 5, 9, 11, 12, 14, 15, 21, 22, 23, 28, 29, 30, 31, 34, 46, 48, 58, 59, 67, 68, 73, 78, 81, 84, 94, 100, 102, 103, 107, 108, 109, 116, 118, 123, 126, 128, 131, 135, 142, 147, 149, 154, 187, 192, 200, 201, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 219, 225, 226, 227, 229, 230, 233, 235, 236, 237, 249, 250, 253, 255, 256, 269, 271, 277, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295], "matrixcommon": [4, 98, 100, 103], "dyadic": [4, 70, 123, 129, 132, 134, 139, 141, 149, 192, 194, 197, 199, 262, 265, 270], "shorten": 4, "due": [4, 8, 12, 13, 19, 23, 33, 46, 48, 50, 57, 58, 67, 69, 84, 103, 107, 110, 114, 131, 132, 134, 146, 155, 182, 198, 201, 207, 208, 213, 217, 220, 230, 232, 234, 237, 253, 265, 271, 294], "highli": [5, 67, 71, 115, 207, 213, 222, 250], "aspect": [5, 7, 11, 12, 21, 103, 207], "project": [5, 9, 10, 11, 13, 48, 50, 80, 81, 82, 96, 103, 148, 249, 250, 262], "teach": [5, 59, 68, 72, 237], "conduct": 5, "accord": [5, 15, 48, 55, 58, 59, 63, 66, 67, 68, 75, 97, 100, 103, 107, 109, 126, 131, 133, 142, 176, 182, 203, 208, 210, 212, 213, 214, 230, 235, 236, 243, 248, 250, 255, 271], "survei": 5, "commonli": [5, 14, 59, 72, 75, 94, 103, 122, 200, 205, 233, 269], "encount": [5, 15, 19, 27, 67, 94, 103, 127, 174, 205, 210, 213, 235, 236, 250, 262, 290], "problem": [5, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 51, 61, 63, 67, 68, 79, 92, 94, 98, 103, 107, 110, 112, 113, 114, 119, 122, 127, 132, 136, 137, 140, 142, 144, 191, 200, 201, 204, 205, 210, 227, 229, 230, 233, 236, 252, 255, 279, 284, 286, 290], "offer": [5, 47, 48, 58, 67, 108, 122, 149, 191, 201, 207, 212, 252, 270], "bring": [5, 92, 127, 140, 206, 220, 229, 290], "greater": [5, 27, 44, 59, 67, 72, 73, 75, 92, 96, 107, 118, 131, 208, 210, 213, 216, 224, 229, 233, 235, 237, 252, 255, 269, 284], "clariti": [5, 58, 196], "mission": [5, 47, 101], "ca": [5, 38, 68, 72, 75, 94, 107, 216, 217, 255], "dedic": [5, 48, 50, 147, 209, 232, 250, 267, 269], "tool": [5, 8, 9, 11, 12, 14, 23, 58, 95, 102, 103, 108, 118, 131, 149, 201, 204, 209, 210, 217, 249, 255, 261, 270, 277], "essenti": [5, 51, 62, 67, 71, 73, 74, 75, 92, 129, 134, 195, 198, 199, 201, 204, 205, 208, 212, 224, 227, 263, 266, 269, 270, 271, 277, 279], "element": [5, 13, 14, 15, 18, 21, 25, 30, 40, 44, 47, 48, 50, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 83, 90, 92, 94, 96, 97, 98, 99, 100, 103, 106, 107, 108, 110, 111, 118, 119, 129, 149, 151, 154, 168, 179, 187, 196, 199, 201, 203, 204, 205, 206, 208, 210, 213, 215, 216, 217, 223, 224, 225, 227, 229, 230, 233, 235, 236, 237, 238, 242, 249, 251, 252, 255, 256, 257, 265, 284, 289, 290, 293, 294], "deviat": [5, 155, 237], "advanc": [5, 18, 20, 23, 42, 58, 67, 71, 72, 103, 104, 142, 147, 199, 203, 206, 207, 209, 211, 212, 219, 226, 233, 248, 249, 250, 255, 279, 283, 285, 287, 291, 292, 293, 294], "docutil": 5, "sourceforg": [5, 47], "ext": [5, 204, 208], "autodoc": 5, "associ": [5, 9, 11, 14, 21, 30, 47, 49, 65, 67, 68, 74, 75, 89, 90, 92, 96, 129, 131, 147, 149, 172, 180, 191, 192, 200, 201, 205, 206, 207, 208, 210, 212, 217, 225, 227, 230, 243, 257], "graphviz": [5, 8, 289, 293], "graphic": [5, 34, 116], "info": [5, 9, 11, 15, 118, 217, 233, 234], "bear": [5, 21], "linkcod": 5, "readthedoc": [5, 95, 256], "subset": [5, 11, 12, 19, 21, 23, 27, 46, 47, 51, 54, 58, 59, 65, 72, 73, 79, 90, 92, 94, 96, 107, 128, 204, 206, 210, 212, 217, 225, 255, 274], "modifi": [5, 12, 14, 15, 47, 48, 58, 67, 73, 75, 107, 109, 145, 154, 203, 206, 210, 212, 213, 214, 217, 229, 235, 236, 237, 248, 251, 252, 255, 256, 283, 288, 290], "sphinx_math_dollar": 5, "delimit": [5, 67, 217], "dollar": [5, 12, 288], "2": [5, 7, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 35, 36, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 110, 112, 114, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 131, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 246, 248, 249, 250, 251, 252, 255, 256, 258, 262, 264, 265, 266, 267, 268, 269, 271, 272, 283, 284, 286, 288, 289, 290, 293, 294, 295], "sphinxext": 5, "plot_direct": 5, "figur": [5, 11, 13, 67, 68, 77, 78, 80, 82, 83, 94, 111, 132, 177, 200, 201, 202, 203, 206, 214, 217, 272, 294], "devel": [5, 202], "supersed": [5, 132, 149], "pep": [5, 48, 67, 97], "257": [5, 107, 235], "our": [5, 11, 13, 19, 23, 38, 48, 67, 75, 92, 103, 107, 127, 131, 135, 187, 200, 201, 203, 204, 206, 208, 212, 213, 214, 217, 224, 227, 230, 233, 236, 248, 283, 286, 287, 289, 294], "introduct": [5, 6, 13, 20, 58, 59, 72, 75, 206, 208, 210, 211, 213, 217, 230, 233, 236, 270, 277, 287, 293], "four": [5, 32, 48, 50, 59, 67, 71, 75, 97, 100, 107, 114, 119, 133, 142, 147, 155, 192, 203, 204, 210, 213, 217, 225, 230, 233, 235, 237, 238, 262, 264, 267, 279], "locat": [5, 11, 12, 13, 50, 59, 67, 81, 103, 107, 110, 111, 114, 126, 129, 131, 136, 143, 146, 147, 150, 196, 198, 212, 213, 217, 229, 237, 251, 260, 262, 266, 268, 271], "websit": [5, 7, 292], "advertis": 5, "serv": [5, 12, 14, 19, 23, 42, 43, 48, 50, 64, 67, 74, 90, 212, 233, 234, 258, 287], "initi": [5, 14, 21, 25, 33, 42, 58, 62, 67, 68, 69, 72, 75, 83, 85, 86, 89, 90, 91, 92, 94, 95, 107, 109, 111, 112, 114, 116, 118, 123, 127, 129, 131, 132, 134, 136, 141, 144, 145, 146, 149, 150, 154, 162, 171, 193, 194, 197, 201, 202, 210, 212, 213, 217, 223, 227, 229, 233, 235, 236, 242, 250, 257, 258, 262, 264, 265, 266, 267], "web": [5, 7, 8, 11, 51, 59, 68, 72, 75, 79, 84, 94, 107, 149, 199, 206, 211, 229, 230, 237, 255, 290], "obtain": [5, 14, 15, 17, 19, 25, 30, 31, 36, 42, 43, 47, 49, 51, 58, 59, 60, 63, 67, 68, 70, 71, 72, 73, 75, 77, 78, 80, 81, 83, 89, 92, 94, 96, 98, 103, 106, 107, 115, 118, 127, 142, 145, 155, 177, 182, 187, 191, 204, 205, 208, 210, 212, 213, 216, 218, 225, 226, 227, 229, 230, 233, 234, 235, 236, 255, 258, 266, 267], "technic": [5, 13, 16, 23, 37, 47, 67, 149, 168, 204, 233, 250, 255, 269, 286, 289], "download": [5, 7, 9, 38, 47, 89, 211, 226, 233, 262, 288], "place": [5, 7, 9, 11, 12, 13, 14, 15, 21, 23, 31, 37, 47, 59, 60, 67, 68, 73, 83, 99, 103, 106, 107, 109, 118, 149, 150, 206, 211, 212, 217, 218, 224, 226, 229, 233, 252, 255, 282, 283, 290, 294], "tutori": [5, 7, 8, 9, 11, 12, 14, 15, 19, 20, 38, 83, 132, 149, 205, 216, 217, 233, 256, 286, 289, 291, 292, 293, 294, 295], "site": [5, 107, 251], "upload": [5, 107], "belong": [5, 12, 21, 44, 47, 58, 63, 67, 90, 103, 129, 182, 192, 200, 203, 204, 206, 207, 208, 210, 212, 213, 224, 225, 229, 230, 236, 243], "insid": [5, 12, 13, 14, 15, 23, 58, 59, 64, 67, 77, 78, 83, 110, 122, 124, 136, 146, 181, 182, 186, 187, 197, 201, 213, 217, 225, 227, 230, 235, 236, 237, 239, 241, 252, 256, 289, 290], "spars": [5, 14, 100, 102, 103, 176, 206, 212, 213, 214, 237, 238, 277, 289], "substanti": [5, 108], "edit": [5, 9, 11, 12, 94, 103, 107, 210, 211, 213], "arg": [5, 11, 14, 21, 23, 29, 31, 34, 40, 42, 43, 44, 45, 46, 47, 48, 51, 58, 59, 61, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 82, 83, 84, 89, 92, 94, 97, 98, 99, 100, 101, 103, 105, 107, 109, 112, 118, 151, 157, 160, 162, 165, 166, 167, 168, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 192, 197, 201, 203, 206, 208, 210, 212, 213, 214, 217, 219, 220, 223, 224, 225, 226, 229, 233, 235, 236, 237, 238, 239, 242, 243, 248, 249, 250, 251, 255, 256, 258, 262, 264], "invari": [5, 13, 23, 58, 63, 115, 118, 202, 206, 208, 212, 213, 227, 233], "polici": [5, 6, 13, 251, 253], "releas": [5, 8, 11, 13, 67, 94, 98, 109, 146, 203, 242, 253, 256, 289], "5": [5, 11, 12, 15, 17, 21, 23, 27, 29, 31, 33, 36, 40, 42, 43, 44, 46, 48, 49, 50, 51, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 110, 112, 114, 116, 118, 120, 121, 123, 128, 129, 132, 134, 135, 139, 140, 141, 142, 144, 147, 151, 155, 176, 177, 180, 182, 189, 193, 196, 198, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 248, 249, 255, 256, 262, 265, 267, 269, 271, 272, 283, 284, 286, 289, 290, 293, 294], "center": [5, 7, 13, 19, 46, 58, 66, 67, 77, 81, 83, 84, 94, 103, 123, 126, 129, 132, 134, 139, 141, 143, 147, 149, 155, 200, 203, 212, 217, 225, 272], "resid": 5, "standalon": [5, 149], "restructur": 5, "myst": 5, "appli": [5, 9, 11, 12, 13, 14, 22, 23, 25, 32, 36, 40, 41, 42, 43, 44, 48, 58, 59, 60, 65, 66, 67, 68, 69, 70, 73, 74, 77, 82, 83, 85, 94, 97, 98, 99, 103, 107, 109, 110, 111, 112, 114, 118, 119, 123, 124, 129, 131, 134, 137, 144, 146, 148, 159, 163, 166, 167, 171, 174, 175, 179, 182, 192, 201, 203, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 218, 219, 223, 224, 225, 226, 229, 233, 234, 235, 236, 237, 238, 241, 248, 251, 255, 262, 264, 267, 290, 293, 294], "surround": [5, 12, 67, 84, 155, 225, 258], "nu": [5, 15, 75, 94, 107, 183, 205, 217, 229, 237, 243, 288], "equat": [5, 14, 15, 17, 19, 24, 25, 29, 46, 48, 63, 66, 67, 69, 73, 75, 77, 80, 81, 85, 89, 90, 91, 92, 94, 95, 98, 103, 107, 110, 114, 118, 120, 122, 126, 127, 128, 131, 132, 134, 135, 136, 137, 139, 141, 142, 143, 148, 149, 150, 151, 155, 191, 196, 197, 200, 201, 202, 203, 204, 206, 208, 210, 211, 212, 215, 216, 217, 223, 227, 229, 232, 233, 234, 242, 262, 267, 268, 272, 284, 285, 288], "strip": [5, 12, 68, 94, 107, 210, 253, 258], "out": [5, 11, 12, 15, 21, 22, 23, 30, 47, 48, 58, 59, 67, 68, 69, 72, 75, 83, 92, 94, 100, 103, 107, 110, 118, 119, 132, 134, 136, 139, 147, 149, 159, 163, 174, 177, 179, 181, 182, 204, 205, 207, 208, 212, 213, 214, 215, 217, 218, 224, 227, 229, 233, 238, 239, 248, 250, 255, 256, 286, 288, 289, 293, 294], "unimport": 5, "bullet": [5, 11, 12], "avoid": [5, 11, 12, 13, 14, 22, 23, 27, 30, 40, 48, 49, 67, 68, 73, 92, 94, 97, 103, 106, 109, 136, 146, 176, 200, 201, 205, 206, 207, 213, 217, 218, 225, 229, 233, 235, 237, 241, 250, 253, 256, 286, 287], "whitespac": [5, 12, 67, 253], "easiest": [5, 9, 11, 13, 14, 15, 67, 204, 207, 230, 256, 267, 283, 289, 294], "invalid": [5, 11, 12, 15, 36, 67, 68, 109, 134, 207, 210, 225], "dx": [5, 13, 14, 19, 23, 30, 46, 48, 63, 67, 69, 71, 75, 84, 86, 89, 90, 91, 92, 94, 103, 110, 121, 127, 171, 201, 213, 214, 220, 230, 233, 234, 238, 284, 288, 293, 295], "meta": [5, 67, 233, 234], "stackexchang": [5, 58, 77], "5020": 5, "wikibook": [5, 94, 95], "overleaf": 5, "mathematical_express": 5, "verbatim": [5, 217], "_rewrit": 5, "_expand": 5, "difficult": [5, 11, 12, 21, 34, 36, 67, 103, 132, 214, 227, 233, 234, 236, 249, 256, 272, 288, 294], "sentenc": [5, 11, 97], "thumb": [5, 97, 255], "greek": [5, 14, 39, 67, 107, 109, 204, 217], "letter": [5, 14, 15, 39, 60, 67, 68, 107, 182, 206, 217, 255, 284, 286], "\u03b1": [5, 202, 216], "alpha": [5, 15, 58, 67, 75, 94, 96, 118, 154, 158, 161, 179, 196, 200, 201, 202, 208, 210, 212, 213, 216, 217, 229, 233, 237], "logarithm": [5, 15, 40, 46, 48, 67, 68, 73, 92, 94, 103, 107, 208, 210, 214, 217, 227, 229, 236, 237, 285], "italic": 5, "emphasi": [5, 207], "asterisk": 5, "stirl": [5, 59, 72, 255], "fals": [5, 12, 14, 15, 21, 22, 23, 27, 29, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 92, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 116, 118, 120, 121, 124, 127, 128, 129, 131, 132, 134, 135, 139, 140, 141, 143, 144, 145, 146, 147, 150, 154, 166, 167, 171, 174, 179, 180, 181, 182, 185, 189, 192, 193, 194, 196, 197, 200, 201, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 229, 230, 232, 233, 234, 235, 236, 237, 242, 243, 246, 248, 249, 250, 251, 255, 256, 258, 262, 265, 286, 289, 290, 293], "permut": [5, 49, 50, 52, 54, 55, 57, 60, 63, 64, 65, 68, 72, 75, 98, 100, 103, 128, 182, 202, 206, 208, 213, 230, 238, 239, 243, 255, 274, 294], "cycl": [5, 13, 48, 55, 58, 59, 65, 67, 70, 72, 98, 107, 156, 225, 255], "partit": [5, 54, 58, 72, 107, 136, 146, 148, 230, 237, 252, 274], "reduc": [5, 15, 22, 25, 28, 35, 41, 43, 45, 49, 63, 67, 68, 70, 72, 73, 75, 82, 83, 92, 94, 103, 107, 118, 119, 146, 164, 182, 204, 206, 207, 208, 210, 211, 212, 213, 214, 218, 223, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 239, 255, 256, 290], "ge": [5, 21, 67, 72, 73, 75, 92, 98, 103, 107, 202, 205, 210, 213, 217, 227, 255], "consecut": [5, 48, 58, 63, 66, 68, 72, 83, 229, 235], "group": [5, 7, 47, 53, 54, 59, 60, 63, 64, 65, 67, 70, 72, 96, 97, 107, 161, 170, 171, 182, 202, 203, 204, 208, 213, 229, 233, 235, 236, 243, 255, 274], "pairwis": [5, 44, 47, 67, 72, 84, 103, 107, 230, 235], "ital": [5, 217], "last": [5, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 27, 29, 31, 32, 33, 34, 35, 36, 41, 42, 43, 47, 48, 49, 57, 58, 59, 63, 66, 67, 68, 71, 77, 94, 97, 98, 99, 100, 101, 103, 105, 106, 107, 109, 118, 131, 154, 186, 187, 202, 203, 204, 205, 207, 208, 210, 213, 216, 217, 224, 225, 230, 233, 235, 236, 237, 238, 239, 243, 246, 248, 249, 250, 251, 253, 255, 256, 258, 284, 286, 289, 290], "talk": [5, 11, 12, 16, 37, 68, 204, 212, 266], "handl": [5, 7, 11, 12, 19, 21, 22, 23, 46, 48, 55, 59, 67, 73, 94, 95, 97, 102, 107, 108, 109, 110, 119, 122, 132, 146, 162, 165, 171, 172, 177, 186, 206, 207, 213, 214, 223, 229, 233, 235, 238, 241, 249, 255, 256, 258, 289, 294], "referenc": [5, 11, 51, 56, 107, 131, 134, 179, 212], "overlin": [5, 21, 75], "normal": [5, 12, 13, 15, 21, 22, 23, 36, 40, 44, 48, 58, 66, 67, 71, 73, 77, 80, 81, 82, 94, 95, 97, 101, 102, 103, 107, 109, 120, 122, 126, 132, 134, 140, 149, 155, 166, 176, 179, 180, 181, 182, 183, 187, 190, 192, 201, 204, 206, 207, 208, 210, 212, 213, 217, 218, 220, 225, 226, 230, 233, 237, 242, 248, 253, 255, 256, 262, 277], "assign": [5, 9, 21, 34, 47, 48, 49, 63, 67, 72, 83, 94, 96, 97, 103, 109, 127, 132, 139, 149, 187, 198, 201, 203, 205, 210, 217, 235, 236, 243, 250, 266, 269, 286], "structur": [5, 13, 14, 18, 21, 23, 45, 47, 48, 55, 58, 59, 65, 67, 92, 94, 97, 98, 103, 110, 111, 112, 114, 131, 180, 182, 203, 204, 207, 210, 212, 213, 214, 229, 233, 235, 236, 237, 241, 242, 250, 252, 255, 256, 286, 294], "success": [5, 8, 47, 58, 67, 75, 92, 94, 107, 126, 134, 192, 204, 210, 212, 225, 226, 233, 236, 237, 255, 262, 264], "suggest": [5, 7, 11, 13, 32, 49, 58, 94, 103, 107, 132, 215, 290], "american": [5, 53, 68], "color": [5, 9, 95, 116, 197, 217, 248, 255, 293], "colour": 5, "quotat": 5, "line_color": [5, 203, 220], "aesthet": [5, 14, 203], "ariti": [5, 203], "term": [5, 12, 14, 15, 19, 21, 23, 27, 30, 32, 34, 36, 48, 58, 67, 68, 69, 71, 72, 73, 75, 86, 90, 91, 92, 94, 97, 98, 103, 107, 111, 116, 118, 124, 127, 134, 136, 139, 142, 144, 146, 161, 166, 178, 179, 182, 184, 186, 187, 191, 192, 194, 198, 200, 202, 204, 205, 206, 207, 208, 210, 212, 213, 214, 217, 219, 220, 222, 223, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 241, 242, 255, 262, 265, 269, 274, 284, 286, 288, 289, 294], "unrestrict": [5, 56, 255], "necklac": [5, 255], "bracelet": [5, 255], "impli": [5, 14, 15, 21, 40, 44, 48, 58, 97, 114, 182, 203, 208, 210, 217, 225, 227, 233, 235, 238, 241, 242, 255, 269], "turn": [5, 13, 14, 21, 36, 48, 67, 73, 75, 82, 92, 101, 126, 140, 144, 198, 204, 212, 213, 214, 217, 224, 225, 227, 229, 230, 233, 248, 255, 271, 286, 288], "sequenc": [5, 15, 40, 46, 48, 51, 54, 57, 58, 59, 63, 65, 66, 67, 68, 70, 72, 75, 77, 80, 81, 82, 83, 84, 91, 97, 98, 100, 103, 106, 107, 118, 149, 155, 181, 182, 206, 208, 211, 217, 219, 221, 224, 226, 227, 229, 230, 233, 234, 236, 243, 246, 249, 250, 255, 257, 258, 274], "revers": [5, 25, 51, 56, 59, 66, 67, 68, 73, 94, 95, 97, 103, 107, 118, 181, 192, 197, 204, 206, 210, 213, 214, 217, 218, 225, 229, 233, 255, 294], "ambigu": [5, 13, 15, 17, 67, 170, 176, 229, 241, 246], "person": [5, 14], "chebyshev": [5, 46, 67, 94, 210, 213], "pafnuti": 5, "lvovich": 5, "tchebychev": 5, "whose": [5, 13, 14, 21, 23, 27, 47, 49, 51, 56, 59, 66, 67, 68, 73, 77, 81, 83, 84, 90, 94, 97, 103, 107, 129, 144, 154, 177, 187, 193, 194, 198, 201, 205, 206, 208, 212, 213, 224, 225, 229, 233, 234, 235, 237, 243, 248, 252, 255, 256, 262, 265, 267, 269], "transliter": 5, "russian": 5, "chebyshevt": [5, 75, 217], "orthogonalpolynomi": 5, "t_n": [5, 72, 75, 94, 210, 213, 267], "tens": 5, "inclus": [5, 66, 112, 114, 175, 204, 223, 224, 225, 236], "pronoun": 5, "Or": [5, 8, 12, 13, 15, 22, 29, 31, 58, 67, 68, 69, 75, 92, 97, 107, 129, 204, 214, 216, 217, 229, 236, 237, 248, 256, 269, 289, 292], "gender": 5, "neutral": 5, "he": [5, 72, 92, 210], "she": [5, 236], "extran": [5, 233], "belittl": 5, "obvious": [5, 12, 49, 58, 185, 200, 207, 227], "easili": [5, 13, 21, 23, 34, 38, 50, 67, 68, 90, 92, 103, 107, 108, 126, 129, 144, 180, 200, 213, 216, 217, 222, 229, 230, 233, 235, 236, 239, 249, 288], "straightforward": [5, 12, 23, 58, 68, 103, 227], "unwelcom": 5, "judgement": 5, "phrase": [5, 11, 14, 68], "friendli": [5, 48, 92, 230, 232, 233, 235, 236, 250, 295], "mistak": [5, 11, 12, 15, 30, 58, 109, 256], "goe": [6, 7, 10, 11, 12, 23, 37, 103, 114, 224, 227, 236, 286, 289], "content": [6, 16, 48, 67, 68, 102, 205, 208, 210, 213, 216, 217, 245, 250, 253, 254, 274, 275, 276, 277, 278, 279, 280, 281, 285, 287], "setup": [6, 10, 11, 12, 13, 48, 67, 135, 136, 137, 151, 192, 210, 213, 215, 216, 227, 248, 249, 251, 261, 293], "document": [6, 10, 12, 13, 14, 20, 23, 28, 42, 43, 44, 58, 63, 67, 68, 73, 74, 75, 79, 89, 92, 93, 95, 100, 103, 108, 111, 122, 127, 142, 144, 145, 147, 149, 157, 171, 177, 191, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 213, 217, 227, 231, 233, 235, 236, 246, 248, 250, 251, 253, 255, 262, 269, 270, 273, 284, 286, 287, 293, 294], "depend": [6, 9, 11, 13, 14, 15, 17, 21, 23, 27, 32, 33, 34, 38, 46, 48, 49, 58, 59, 66, 67, 68, 69, 72, 73, 75, 79, 84, 91, 92, 94, 95, 96, 103, 107, 108, 109, 116, 120, 123, 127, 128, 131, 132, 134, 136, 142, 144, 154, 155, 156, 171, 180, 182, 184, 186, 187, 197, 198, 203, 205, 206, 208, 210, 212, 213, 214, 216, 217, 218, 223, 227, 229, 230, 233, 234, 235, 236, 237, 248, 249, 250, 251, 255, 256, 269, 271, 272, 286, 288], "debug": [6, 48, 67, 94, 134, 171, 248, 249, 258], "style": [6, 7, 8, 11, 47, 67, 95, 176, 197, 203, 217, 236, 293], "maintain": [7, 14, 15, 67, 68, 107, 111, 217, 225, 226, 233, 236, 252], "love": 7, "oil": 7, "daunt": 7, "acquaint": 7, "video": [7, 292], "2016": 7, "2014": [7, 236, 237], "capabl": [7, 13, 14, 21, 33, 46, 48, 67, 71, 79, 92, 107, 110, 111, 142, 149, 203, 214, 217, 236, 287, 288, 294, 295], "besid": [7, 50, 67, 210, 235], "lot": [7, 11, 13, 58, 67, 85, 92, 94, 103, 132, 149, 203, 206, 213, 216, 220, 230, 236, 248, 294], "probabl": [7, 11, 50, 58, 67, 72, 75, 79, 107, 132, 176, 180, 227, 233, 236, 237, 249, 286, 292], "brows": [7, 9], "topic": [7, 16, 24, 37, 48, 142, 147, 199, 200, 201, 202, 204, 206, 207, 212, 236, 279, 286, 291], "particip": 7, "abid": 7, "email": [7, 217], "googl": [7, 202, 203, 236], "spam": [7, 258], "post": [7, 13, 21, 27, 29, 30, 31, 32, 33, 34, 35, 36, 48, 61, 67, 217, 218, 229, 248, 289], "moder": [7, 94], "shakthimaan": 7, "book": [7, 9, 47, 58, 68, 73, 127, 132, 135, 143, 147, 148, 167, 211, 216, 217, 287], "chapter1": 7, "etiquett": 7, "track": [7, 9, 11, 13, 15, 58, 67, 71, 75, 131, 143, 166, 191, 201, 206, 224, 243, 284], "etc": [7, 11, 12, 13, 19, 21, 22, 43, 46, 48, 63, 67, 68, 72, 73, 85, 94, 96, 97, 102, 107, 132, 153, 162, 166, 179, 182, 194, 198, 200, 201, 203, 204, 205, 206, 207, 210, 212, 217, 218, 225, 226, 227, 229, 233, 236, 237, 241, 249, 250, 255, 267, 271], "interest": [7, 11, 15, 17, 23, 27, 30, 36, 63, 67, 69, 72, 73, 83, 92, 94, 103, 107, 133, 134, 182, 187, 201, 204, 208, 212, 213, 214, 216, 224, 227, 229, 230, 235, 236, 249, 250, 267, 284, 287, 289, 290, 291, 294], "prepar": [7, 21, 127, 215], "chat": [7, 38], "room": [7, 204], "stackoverflow": [7, 11, 107, 255, 258], "tracker": [7, 11, 12, 46, 225, 236, 290], "isn": [7, 11, 13, 23, 34, 94, 122, 132, 236, 288], "organ": [7, 11, 142], "termin": [7, 8, 9, 11, 58, 67, 73, 95, 107, 197, 217, 224, 248, 293], "live": [7, 39, 49, 149, 212, 230], "click": [7, 8, 9, 11], "next": [7, 9, 11, 15, 19, 21, 23, 39, 48, 49, 51, 56, 58, 59, 61, 62, 67, 68, 73, 92, 94, 97, 103, 107, 122, 123, 126, 127, 131, 135, 136, 137, 139, 141, 142, 143, 150, 200, 201, 204, 206, 208, 212, 213, 217, 225, 227, 230, 233, 252, 253, 255, 287, 288, 289], "function_nam": [7, 48, 249], "upon": [7, 12, 14, 21, 48, 67, 107, 129, 131, 134, 144, 145, 146, 149, 176, 182, 198, 200, 201, 225, 233, 242, 249, 269, 294], "undergo": [7, 155], "gain": [7, 15, 25, 68, 118, 144, 145, 149], "submiss": 7, "dockerfil": 8, "htmldoc": 8, "sympy_htmldoc": 8, "apt": [8, 9], "dvipng": 8, "librsvg2": 8, "imagemagick": 8, "docbook2x": 8, "sudo": [8, 9], "venv": [8, 9], "my": [8, 217, 283], "Then": [8, 9, 11, 12, 14, 19, 21, 58, 63, 66, 67, 92, 96, 103, 107, 124, 127, 139, 141, 142, 147, 151, 179, 187, 200, 204, 205, 207, 210, 212, 214, 217, 224, 227, 229, 230, 233, 235, 256], "rerun": [8, 11, 12, 213, 248], "txt": [8, 217], "mayb": [8, 12, 22, 29], "rpm": 8, "prerequisit": 8, "dnf": [8, 97], "medium": [8, 23, 151, 152, 155, 156, 166, 210, 279], "homebrew": 8, "brew": 8, "sh": 8, "docbook": 8, "librsvg": 8, "tricki": [8, 67, 92], "subsystem": [8, 217], "linux": [8, 9, 11, 38], "workaround": [8, 256], "solut": [8, 11, 13, 14, 15, 17, 19, 22, 23, 25, 28, 29, 48, 63, 67, 68, 73, 75, 77, 85, 89, 90, 91, 94, 103, 107, 110, 115, 122, 127, 128, 132, 136, 142, 146, 151, 187, 191, 204, 206, 210, 211, 212, 213, 214, 215, 216, 225, 230, 232, 233, 234, 235, 295], "shell": [8, 11, 15, 95, 149, 216], "microsoft": 8, "wsl": 8, "transfer": [8, 25, 115, 116, 118, 151, 236], "folder": 8, "prepend": [8, 47, 58, 103, 118, 189, 217, 243], "mnt": 8, "navig": [8, 13], "cygwin": 8, "msys2": 8, "partial": [8, 14, 46, 58, 65, 66, 67, 69, 71, 72, 73, 107, 109, 149, 176, 192, 196, 198, 206, 208, 211, 214, 217, 219, 226, 229, 233, 234, 238, 244, 262, 269, 284, 294], "viabl": [8, 68], "64": [8, 12, 52, 58, 107, 148, 202, 216, 226, 235, 237, 248, 255, 258, 293], "bit": [8, 12, 19, 23, 47, 48, 51, 67, 68, 70, 97, 98, 103, 107, 176, 187, 204, 213, 227, 230, 236, 248, 255, 266, 267, 293], "chocolatei": 8, "choco": 8, "rsvg": 8, "chose": [8, 68], "rm": [8, 48], "absolut": [8, 12, 44, 45, 48, 66, 67, 73, 75, 82, 92, 94, 98, 103, 120, 180, 208, 212, 213, 227, 229, 232, 237, 248, 271, 272, 273], "substitut": [8, 14, 15, 19, 22, 27, 30, 34, 36, 48, 67, 68, 73, 75, 92, 94, 103, 108, 109, 118, 127, 128, 132, 134, 136, 146, 171, 180, 182, 185, 192, 194, 196, 214, 215, 218, 219, 224, 227, 229, 230, 233, 234, 235, 236, 256, 265, 285, 286], "filesystem": 8, "makefil": 8, "subdirectori": 8, "offici": [8, 15, 38, 67, 122, 149, 191, 201, 236, 256, 292], "svg": [8, 95, 197], "store": [8, 9, 11, 13, 15, 21, 47, 48, 57, 58, 67, 89, 91, 100, 103, 107, 109, 123, 127, 129, 131, 132, 147, 176, 182, 196, 200, 201, 203, 204, 206, 207, 212, 213, 214, 224, 227, 238, 241, 242, 250, 251, 252, 255, 267, 269, 289], "browser": 8, "drop": [8, 11, 73, 94, 108, 139, 208, 210], "menu": 8, "told": [8, 11], "load": [8, 13, 48, 67, 95, 110, 111, 112, 114, 123, 125, 126, 127, 131, 135, 137, 142, 150, 162, 197, 279], "ll": [8, 47, 65, 103, 136, 200, 201, 246], "repeat": [8, 9, 14, 15, 58, 61, 66, 67, 73, 75, 94, 96, 98, 103, 107, 109, 166, 168, 182, 203, 204, 205, 210, 212, 213, 217, 223, 233, 237, 241, 242, 249, 251, 255, 294], "reload": 8, "approach": [8, 19, 27, 30, 31, 32, 34, 35, 36, 47, 66, 67, 94, 118, 136, 142, 206, 207, 210, 211, 212, 214, 225, 234, 235, 237, 249, 252, 255, 284, 290], "monitor": 8, "procedur": [8, 30, 32, 49, 50, 52, 58, 64, 65, 66, 94, 103, 127, 147, 210, 212, 229, 230, 235, 236, 262, 290], "8000": [8, 110], "localhost": 8, "port": [8, 109, 134, 154], "finish": [8, 12, 48, 49, 176, 251, 291], "ctrl": 8, "detach": 8, "livehtml": 8, "tab": [8, 13, 15, 63, 149], "99": [8, 48, 67, 68, 103, 107, 210, 211], "bad": [8, 11, 12, 13, 66, 107, 184, 217], "extra": [8, 13, 48, 50, 67, 68, 107, 108, 127, 140, 187, 198, 210, 217, 227, 233, 248, 249, 250, 269], "xelatex": 8, "latexmk": 8, "chrome": 8, "chromium": 8, "On": [8, 11, 13, 21, 43, 60, 67, 69, 75, 94, 97, 107, 132, 186, 187, 198, 207, 210, 211, 212, 213, 233, 235, 252, 256, 269, 271], "xetex": 8, "font": [8, 95, 197, 217], "lmodern": 8, "cask": 8, "tap": 8, "dejavu": 8, "strawberryperl": 8, "dejavufont": 8, "appdata": 8, "never": [9, 10, 11, 12, 14, 21, 23, 34, 67, 73, 94, 184, 213, 214, 217, 225, 235, 237, 246, 266, 286, 287], "familiar": [9, 10, 11, 15, 23, 94, 132, 147, 166, 214, 284, 286, 292], "push": [9, 11, 12, 92], "nativ": [9, 14, 67, 118, 208, 213, 248], "yum": 9, "maco": 9, "desktop": 9, "gui": [9, 95, 197], "sync": 9, "rebas": [9, 11], "disabl": [9, 12, 13, 14, 34, 67, 68, 92, 94, 107, 210, 213, 217, 225, 233, 235, 246, 248, 251, 255, 256], "commit": [9, 12], "enter": [9, 17, 59, 67, 68, 72, 80, 107, 109, 110, 114, 127, 131, 134, 144, 217, 227, 235, 248, 289, 293], "config": [9, 95], "firstnam": 9, "lastnam": 9, "your_email": 9, "youremail": 9, "usernam": [9, 11], "gitconfig": 9, "handi": [9, 66, 67, 103, 217, 289], "shortcut": [9, 47, 67, 99, 201, 217, 225, 229, 294], "alias": [9, 101, 208], "alia": [9, 48, 60, 67, 77, 83, 98, 99, 101, 105, 166, 175, 182, 204, 206, 207, 208, 212, 216, 225, 248, 258, 294], "di": [9, 213], "st": [9, 68, 94, 182], "statu": [9, 11, 95], "checkout": [9, 11, 47], "log1": 9, "onelin": 9, "abbrev": [9, 188, 189, 217], "scm": 9, "sv": 9, "v2": [9, 69, 80, 103, 129, 192, 193, 196, 256, 262, 265, 266, 267, 268], "signup": 9, "presenc": [9, 67, 73, 97, 114, 131, 136, 146, 233, 241], "world": [9, 68, 114, 136, 146, 255], "profession": 9, "establish": [9, 19, 63, 92, 126, 131, 137, 227], "secur": [9, 13], "connect": [9, 21, 61, 68, 69, 82, 83, 103, 108, 110, 114, 123, 126, 131, 134, 137, 143, 204, 205, 206, 215, 233, 237, 255, 262], "button": [9, 12, 203, 249], "address": [9, 12, 67, 217, 236], "practic": [9, 19, 21, 27, 30, 33, 36, 56, 58, 67, 68, 77, 143, 146, 149, 203, 204, 205, 207, 212, 214, 241, 286, 287], "clone": [9, 38, 210], "origin": [9, 11, 12, 14, 15, 19, 21, 30, 38, 40, 58, 59, 60, 63, 66, 67, 68, 71, 72, 73, 75, 76, 78, 80, 82, 92, 94, 98, 103, 107, 116, 118, 119, 126, 131, 136, 146, 149, 174, 177, 187, 193, 198, 203, 204, 206, 208, 212, 213, 216, 217, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 243, 248, 255, 256, 262, 265, 266, 267, 268, 269, 271, 272, 294], "77": [9, 56, 75, 103, 107, 216, 217, 250], "mib": 9, "repo": [9, 11, 12, 132], "remot": [9, 67], "tune": [9, 71, 95, 197, 217], "fetch": 9, "advantag": [9, 13, 17, 21, 23, 27, 43, 46, 48, 67, 68, 72, 94, 97, 103, 107, 115, 186, 206, 207, 214, 225, 230, 233, 236, 252, 286, 288, 290, 294], "isol": [9, 27, 46, 73, 208, 212, 213, 214, 235, 250], "wide": [9, 21, 95, 103, 112, 149, 197, 206, 207, 213, 217, 237], "flake8": [9, 11, 12], "split": [10, 23, 48, 67, 68, 71, 92, 94, 109, 210, 212, 215, 216, 217, 235, 237, 243, 248, 255, 260, 289, 294], "experienc": [10, 13, 49], "regress": 11, "green": [11, 12, 58, 143, 203], "123": [11, 67, 72, 77, 97, 126, 179, 192, 255, 262, 264], "visibl": [11, 92, 203], "ok": [11, 12, 13, 48, 59, 217, 233], "field": [11, 21, 34, 40, 44, 48, 67, 68, 69, 75, 85, 94, 154, 155, 194, 195, 199, 204, 205, 206, 208, 209, 211, 213, 214, 215, 230, 235, 248, 262, 265, 267, 268, 270, 272, 277, 279, 280], "respond": [11, 67], "perus": 11, "feel": [11, 21, 38, 149, 150, 229, 233, 235], "fine": [11, 12, 13, 19, 23, 30, 67, 71, 95, 197, 206, 207, 217, 229], "upstream": 11, "highlight": 11, "accid": [11, 12, 68, 256], "reset": [11, 58, 60, 131, 203, 210, 213, 248, 251, 253], "somehow": [11, 12, 14, 23], "typo": [11, 227], "ultim": [11, 23, 73, 187], "spend": 11, "distinguish": [11, 18, 21, 22, 47, 58, 71, 96, 132, 181, 187, 204], "accident": [11, 12, 14], "failur": [11, 63, 71, 84, 92, 107, 237, 248, 294], "accompani": [11, 12, 47], "sqrtdenest": [11, 12, 229], "test_sqrtdenest": [11, 12], "pattern": [11, 12, 13, 14, 15, 21, 23, 67, 92, 94, 97, 98, 109, 176, 207, 227, 229, 233, 235, 284, 289], "appar": [11, 12, 14, 15, 67, 258, 294], "test_trigonometr": [11, 12], "test_cos_seri": [11, 12], "6": [11, 12, 15, 17, 19, 25, 27, 35, 36, 40, 42, 43, 46, 48, 49, 50, 51, 55, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 79, 80, 81, 82, 83, 89, 90, 92, 94, 96, 97, 98, 100, 101, 103, 104, 106, 107, 109, 110, 112, 114, 116, 118, 119, 120, 129, 134, 135, 139, 140, 141, 147, 151, 155, 161, 179, 192, 201, 202, 203, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 219, 222, 223, 224, 225, 226, 229, 230, 233, 234, 235, 236, 237, 238, 248, 249, 252, 255, 256, 262, 265, 267, 272, 284, 290, 294, 295], "720": [11, 12, 219, 233, 255], "40320": [11, 12], "One": [11, 14, 15, 18, 21, 23, 46, 47, 48, 57, 59, 66, 67, 72, 73, 75, 86, 89, 91, 92, 94, 97, 103, 107, 110, 111, 131, 132, 147, 149, 158, 187, 191, 208, 210, 211, 213, 216, 219, 225, 229, 232, 235, 236, 237, 238, 243, 256, 269, 283, 284, 286, 289, 290, 294], "past": [11, 12, 15, 73, 107, 216, 217, 293], "session": [11, 12, 14, 39, 48, 67, 79, 94, 197, 201, 207, 253, 286, 293], "unclear": [11, 13, 21, 122], "kei": [11, 13, 14, 15, 17, 27, 29, 41, 44, 47, 56, 58, 59, 67, 68, 69, 72, 83, 96, 98, 103, 106, 107, 110, 131, 132, 174, 177, 182, 201, 203, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 229, 233, 234, 235, 237, 241, 252, 255, 256, 258, 290, 291, 294], "corner": [11, 12, 58, 60, 98, 213, 233, 236, 256], "delta_funct": [11, 75, 94], "argumentindexerror": [11, 23], "scroll": [11, 36], "bottom": [11, 57, 58, 67, 68, 83, 98, 103, 106, 131, 212, 217, 226, 272], "consult": [11, 49], "kwarg": [11, 15, 42, 43, 44, 48, 58, 59, 66, 67, 68, 69, 73, 75, 77, 78, 80, 81, 82, 83, 84, 89, 92, 94, 98, 99, 100, 101, 103, 105, 106, 107, 116, 118, 124, 127, 129, 131, 136, 151, 160, 162, 166, 167, 171, 173, 175, 176, 178, 179, 180, 192, 196, 197, 203, 206, 208, 213, 217, 219, 223, 224, 225, 229, 233, 234, 235, 237, 238, 239, 243, 248, 249, 251, 255, 258, 267], "test_bas": [11, 248], "similari": 11, "code_qu": 11, "total": [11, 36, 49, 56, 58, 67, 72, 83, 96, 97, 98, 100, 134, 136, 144, 151, 155, 161, 166, 179, 188, 202, 208, 210, 213, 226, 229, 233, 241, 243, 272], "new_fil": 11, "editor": [11, 12], "vim": 11, "pop": [11, 94, 230], "stage": [11, 21, 47, 66, 107, 224, 294], "affect": [11, 13, 21, 23, 66, 67, 103, 191, 213, 235, 236, 267], "binari": [11, 12, 15, 22, 23, 30, 44, 48, 51, 62, 67, 68, 94, 97, 107, 108, 176, 188, 204, 207, 213, 230, 249, 252, 255], "temporari": [11, 67, 249], "individu": [11, 12, 13, 21, 23, 25, 29, 32, 67, 73, 78, 83, 84, 96, 100, 103, 118, 147, 154, 172, 176, 202, 225, 233, 248, 290], "gitignor": 11, "agreement": 11, "exclud": [11, 29, 34, 36, 48, 66, 67, 94, 103, 124, 129, 149, 205, 206, 208, 210, 213, 223, 233, 235, 248, 251, 255], "22906851": 11, "ignor": [11, 12, 13, 15, 17, 23, 48, 58, 67, 68, 72, 73, 77, 82, 92, 97, 103, 107, 118, 124, 134, 179, 182, 192, 203, 213, 217, 218, 229, 235, 236, 249, 294], "bodi": [11, 13, 15, 48, 92, 109, 121, 122, 125, 126, 127, 131, 132, 134, 135, 136, 137, 139, 142, 143, 144, 149, 150, 185, 192, 196, 200, 201, 262, 264, 279], "perman": [11, 103], "histori": [11, 149], "effort": [11, 108, 208, 210], "research": [11, 19, 59, 118, 206, 214, 229], "shortlog": 11, "ui": [11, 94, 107, 234], "convei": [11, 27], "71": [11, 58, 83, 103, 107, 185], "78": [11, 58, 81, 103, 107, 111, 187, 233, 237], "summari": [11, 135, 248, 273], "leav": [11, 14, 21, 23, 33, 35, 48, 67, 94, 103, 107, 128, 142, 166, 182, 206, 224, 252, 283, 289, 294], "heurisch": [11, 13, 94], "12345": [11, 48, 71], "brief": [11, 48, 236, 248, 271], "nearbi": 11, "similarli": [11, 12, 13, 21, 27, 34, 63, 67, 68, 75, 79, 103, 110, 111, 118, 127, 147, 186, 191, 203, 204, 207, 212, 214, 224, 225, 227, 233, 248, 256, 267, 268, 290], "doubt": [11, 97, 132], "switch": [11, 13, 40, 58, 65, 94, 107, 118, 210, 213, 239], "let": [11, 12, 19, 21, 22, 23, 25, 46, 48, 58, 63, 67, 68, 77, 85, 90, 92, 96, 100, 103, 104, 107, 109, 123, 132, 149, 187, 192, 200, 204, 205, 206, 210, 212, 213, 214, 217, 224, 227, 229, 230, 233, 235, 236, 243, 246, 249, 253, 256, 267, 268, 272, 283, 286, 288, 289, 294], "overview": [11, 205, 236, 270, 271], "concret": [11, 21, 47, 59, 67, 72, 73, 94, 96, 103, 107, 132, 187, 208, 212, 217, 274], "suitabl": [11, 94, 100, 109, 202, 205, 206, 207, 210, 212, 217, 227, 230, 233, 236, 238, 287], "unicod": [11, 12, 75, 95, 103, 197, 217, 248, 288], "printer": [11, 12, 13, 14, 23, 59, 67, 75, 95, 103, 108, 197, 239, 242, 249, 250, 256, 285, 289], "bf0e81e12a2f75711c30f0788daf4e58f72b2a41": 11, "revis": [11, 235], "anti": [11, 14, 40, 44, 63, 73, 94, 98, 154, 159, 243], "candid": [11, 31, 58, 67, 103, 107, 210, 229], "phase": [11, 25, 67, 94, 116, 151, 154, 156, 166, 167, 236], "explicit": [11, 13, 14, 21, 23, 27, 30, 31, 59, 66, 67, 71, 83, 84, 94, 106, 107, 127, 128, 131, 132, 136, 146, 150, 201, 204, 213, 216, 217, 219, 225, 227, 233, 234, 235, 236, 252], "solve_lin_si": [11, 13, 215], "upsid": 11, "monomi": [11, 67, 94, 97, 107, 205, 207, 208, 210, 216, 217, 294], "downsid": [11, 290], "involv": [11, 12, 13, 15, 19, 21, 27, 29, 31, 43, 45, 58, 66, 67, 68, 72, 79, 80, 92, 94, 107, 118, 123, 127, 132, 161, 171, 177, 179, 189, 200, 201, 204, 205, 208, 210, 212, 213, 214, 218, 219, 224, 225, 226, 227, 229, 230, 233, 235, 238, 256, 294], "anymor": [11, 12, 203], "coincid": [11, 83, 103, 106, 126, 132, 204, 262, 267, 286], "investig": [11, 59, 92, 202, 204, 227, 255, 286], "exp": [11, 12, 13, 14, 15, 17, 21, 23, 25, 33, 34, 36, 40, 46, 48, 57, 66, 67, 69, 71, 72, 73, 75, 85, 86, 89, 92, 94, 98, 100, 103, 107, 120, 158, 161, 177, 183, 202, 207, 208, 213, 214, 217, 219, 224, 227, 229, 233, 234, 235, 236, 237, 238, 255, 272, 284, 288, 290, 295], "ratsimp": [11, 67, 229], "cpu": [11, 48, 108, 149], "sy": [11, 38, 48, 69, 132, 149, 217, 248, 259, 268, 286], "04": [11, 98, 237], "31": [11, 55, 67, 70, 71, 83, 107, 191, 202, 213, 230], "wall": [11, 126, 131, 137], "32": [11, 58, 70, 73, 75, 77, 94, 103, 107, 110, 116, 191, 211, 213, 214, 226, 227, 230, 237, 248], "\u212f": [11, 48, 154, 202, 217, 284, 288, 290, 294, 295], "took": [11, 214, 226], "450": [11, 103], "gb": [11, 58, 114], "ram": 11, "occasion": [11, 12, 67], "feedback": [11, 25, 68, 115, 118, 287], "draft": 11, "state": [11, 12, 14, 19, 21, 34, 58, 65, 67, 75, 107, 110, 118, 120, 126, 127, 128, 131, 134, 136, 150, 154, 158, 159, 161, 162, 163, 165, 166, 167, 171, 174, 176, 177, 178, 179, 181, 182, 206, 213, 217, 226, 227, 229, 237, 252, 279, 290], "wip": 11, "stand": [11, 14, 66, 67, 127, 149, 205, 206, 207, 208, 214], "progress": [11, 41, 43, 107, 250], "fill": [11, 15, 20, 58, 68, 98, 100, 103, 106, 182, 203, 248, 251, 255, 258, 290], "templat": [11, 13, 255], "undescript": 11, "tend": [11, 23, 39, 48, 67, 72, 210, 212, 222, 224, 227, 287, 294], "henc": [11, 46, 48, 57, 58, 67, 69, 73, 75, 79, 92, 95, 97, 107, 114, 198, 203, 204, 205, 210, 217, 227, 230, 234, 236, 248, 252, 267, 268, 269, 289, 294], "transcendent": [11, 21, 31, 35, 36, 44, 67, 75, 94, 207, 212, 213, 217, 235, 236, 290, 295], "perhap": [11, 13, 17, 48, 67, 97, 107, 167, 206, 207, 235, 250, 283], "compar": [11, 12, 15, 21, 36, 46, 48, 59, 64, 67, 72, 73, 84, 97, 103, 107, 108, 134, 161, 185, 189, 207, 210, 213, 214, 217, 222, 224, 229, 233, 236, 238, 242, 248, 255, 286, 289, 294], "1234": [11, 107, 230], "auto": [11, 13, 15, 30, 46, 67, 68, 95, 203, 210, 213, 217, 229, 233, 237], "record": [11, 50, 61, 67, 212, 217, 248], "joe": 11, "blogg": 11, "mailmap_check": 11, "unrecognis": 11, "3af6dc1": 11, "7fa63b1": 11, "100644": 11, "1307": [11, 36], "zsc347": 11, "gmail": [11, 202], "\u00f8yvind": 11, "jensen": [11, 48], "oyvind": 11, "\u0142ukasz": 11, "pankowski": 11, "lukpank": 11, "o2": [11, 224], "pl": 11, "\u5f6d\u4e8e\u658c": 11, "1931127624": 11, "qq": [11, 85, 86, 88, 89, 90, 94, 204, 205, 206, 207, 210, 212, 213, 214], "reorder": [11, 59, 66, 73, 182, 213, 233, 237, 255], "alphabet": [11, 67, 68, 118, 187, 205, 230, 250], "move": [11, 12, 23, 58, 59, 67, 68, 81, 83, 110, 126, 131, 134, 136, 142, 170, 196, 200, 201, 229, 238, 247, 269], "7598d94": 11, "562": 11, "joannah": 11, "nanjeky": 11, "ibm": [11, 229], "jnanjeky": 11, "nanjekyejoannah": 11, "joaquim": 11, "monserrat": 11, "qmonserrat": 11, "mailoo": 11, "jochen": 11, "voss": 11, "seehuhn": 11, "de": [11, 47, 68, 72, 107, 114, 187, 202, 203, 214, 219, 230, 233, 255], "jogi": 11, "miglani": 11, "jmig5776": 11, "johan": 11, "bl\u00e5b\u00e4ck": 11, "johan_bluecreek": 11, "riseup": 11, "net": [11, 47, 83, 211, 233, 237, 255], "blaback": 11, "cea": 11, "fr": [11, 89, 94, 107, 127, 132, 134, 136, 139, 140, 144, 146, 149, 237], "guzman": 11, "jguzm022": 11, "ucr": 11, "edu": [11, 46, 51, 58, 59, 68, 70, 72, 94, 103, 107, 118, 206, 211, 216, 226, 230, 233, 237, 262], "joeb": 11, "1785690389": 11, "norepli": 11, "map": [11, 14, 21, 23, 46, 47, 48, 50, 57, 58, 59, 67, 68, 79, 83, 90, 92, 94, 97, 98, 107, 116, 127, 136, 160, 171, 172, 177, 192, 201, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 224, 229, 233, 234, 235, 236, 237, 241, 242, 249, 252, 255, 256, 258, 262], "cost": [12, 46, 48, 107, 136, 206, 236, 288], "modular": [12, 68, 107, 178, 211, 236], "consequ": [12, 13, 23, 44, 67, 205, 207, 286, 294], "cover": [12, 19, 73, 107, 109, 122, 132, 191, 200, 243, 250, 284, 286], "maxim": [12, 58, 68, 96, 204, 208, 212, 224, 226], "red": [12, 203], "advis": [12, 13, 21, 36, 47, 126, 132], "wait": [12, 201], "_____________________________________________________________________________________________________": 12, "_________________": [12, 111], "test_pretti": 12, "test_upretty_sub_sup": 12, "traceback": [12, 13, 15, 18, 21, 22, 23, 27, 29, 31, 32, 33, 34, 35, 36, 41, 42, 43, 48, 49, 59, 67, 68, 71, 77, 94, 97, 98, 99, 100, 101, 103, 105, 106, 109, 118, 202, 204, 207, 208, 210, 213, 216, 224, 225, 233, 235, 236, 246, 248, 249, 251, 253, 255, 256, 258, 286, 290], "home": [12, 110, 212, 230], "oscar": [12, 202], "317": 12, "upretti": 12, "beta_1_2": 12, "\u03b2\u2081\u2082": 12, "assertionerror": [12, 246], "branch": [12, 22, 46, 67, 72, 73, 74, 75, 214, 227, 236, 289, 294], "ran": 12, "influenc": [12, 49, 110, 204, 205], "suppos": [12, 13, 22, 23, 59, 66, 67, 68, 92, 204, 206, 210, 212, 213, 217, 224, 227, 233, 235, 246, 255, 267, 272, 286, 288, 294], "sneak": 12, "sporad": 12, "seed": [12, 56, 58, 67, 68, 77, 80, 81, 103, 107, 210, 237, 248, 255], "pythonhashse": [12, 248], "unrel": [12, 13, 32, 67, 74, 205, 286], "ideal": [12, 21, 48, 104, 129, 132, 142, 192, 200, 206, 208, 210, 211, 212, 213, 214, 229, 236, 262], "slip": [12, 134, 138, 140, 200], "wasn": 12, "notic": [12, 13, 15, 23, 58, 59, 65, 67, 103, 147, 170, 207, 227, 239, 243, 244, 255, 256, 286, 288, 289, 294], "broken": [12, 13, 56, 67, 200, 217, 233, 258], "seem": [12, 17, 21, 23, 91, 92, 132, 187, 204, 206, 229, 233, 294], "carefulli": [12, 22, 67, 192, 210, 219], "everyon": [12, 214], "expediti": 12, "21177": 12, "residu": [12, 63, 68, 107, 208, 210, 227], "cot": [12, 67, 73, 75, 109, 214, 217, 226], "tanh": [12, 67, 71, 73, 94, 214, 217, 229, 294], "as_leading_term": [12, 67, 224], "21253": 12, "test_tan": 12, "tan": [12, 46, 67, 72, 73, 94, 109, 124, 139, 140, 141, 146, 214, 216, 217, 224, 226, 233, 236, 294], "test_expr": [12, 67], "test_as_leading_term": 12, "ration": [12, 14, 21, 23, 27, 41, 43, 44, 46, 48, 66, 67, 71, 72, 73, 75, 77, 80, 82, 84, 88, 92, 94, 95, 100, 103, 107, 109, 118, 151, 184, 202, 205, 206, 210, 211, 212, 214, 217, 222, 225, 226, 227, 229, 230, 232, 235, 236, 237, 255, 262, 285, 286, 289, 293], "imaginaryunit": [12, 67, 217], "21245": 12, "fi": [12, 19], "36": [12, 27, 50, 61, 68, 72, 83, 94, 98, 103, 107, 111, 213, 217, 230, 233, 237, 272], "test_residu": 12, "test_issue_21177": 12, "cancel": [12, 19, 23, 25, 48, 67, 71, 75, 83, 92, 94, 103, 107, 118, 119, 206, 207, 208, 210, 213, 216, 229, 235, 288], "underli": [12, 14, 48, 59, 65, 67, 96, 103, 116, 132, 177, 190, 206, 213, 235, 236, 237], "report": [12, 39, 46, 58, 67, 80, 98, 107, 214, 225, 236, 248, 290, 295], "benefici": 12, "prudent": 12, "matter": [12, 23, 46, 56, 59, 66, 67, 72, 92, 94, 191, 224, 255, 288, 289], "reproduct": 12, "constant": [12, 13, 14, 25, 27, 29, 30, 32, 35, 46, 48, 66, 67, 71, 73, 75, 91, 92, 94, 110, 111, 118, 131, 132, 134, 149, 150, 159, 163, 169, 185, 186, 188, 189, 190, 193, 196, 198, 203, 205, 208, 210, 212, 213, 214, 217, 219, 224, 227, 229, 230, 233, 234, 235, 236, 237, 248, 250, 255, 256, 265, 269, 272, 279, 284, 290, 295], "quickli": [12, 19, 23, 58, 59, 67, 68, 71, 72, 107, 206, 210, 213, 226, 236, 252], "newli": [12, 67, 92, 227], "lambda": [12, 14, 15, 23, 25, 29, 33, 42, 43, 46, 48, 58, 59, 67, 68, 69, 73, 94, 98, 99, 100, 103, 106, 107, 109, 127, 132, 145, 146, 149, 150, 167, 203, 206, 210, 212, 213, 217, 218, 225, 226, 229, 233, 235, 236, 237, 238, 246, 255, 256, 262, 264, 267, 283, 290], "typeerror": [12, 13, 15, 22, 23, 31, 34, 41, 42, 43, 59, 67, 77, 82, 97, 99, 101, 105, 118, 156, 224, 225, 249, 256], "execut": [12, 14, 21, 38, 48, 95, 98, 149, 203, 217, 233, 236, 246, 248, 250, 251, 256, 258, 261, 273, 288, 293], "care": [12, 14, 15, 22, 23, 58, 67, 75, 94, 97, 103, 110, 114, 122, 132, 146, 192, 201, 206, 207, 212, 229, 230, 233, 235, 236, 241, 244, 249, 283, 286, 288], "WILL": 12, "userwarn": [12, 192, 246, 253, 290], "function_that_emits_a_warn": 12, "sparingli": 12, "asid": [12, 15, 97, 233, 234, 288], "annoi": 12, "warrant": 12, "test_stacklevel": [12, 246], "expr_free_symbol": [12, 67], "test_deprecated_expr_free_symbol": 12, "nomin": 12, "closer": [12, 33, 134, 236, 289], "inspect": [12, 13, 21, 103, 212, 223, 254, 256, 281], "could": [12, 13, 14, 15, 19, 21, 23, 31, 33, 35, 43, 48, 60, 67, 79, 92, 94, 97, 126, 129, 132, 142, 146, 182, 185, 187, 204, 207, 210, 212, 214, 217, 225, 227, 229, 233, 234, 235, 236, 237, 238, 241, 242, 249, 253, 267, 268, 286, 289, 294], "nonsens": [12, 66, 75], "unevalu": [12, 13, 14, 21, 22, 23, 25, 42, 43, 46, 59, 66, 67, 73, 75, 84, 94, 107, 118, 159, 163, 170, 171, 182, 213, 216, 224, 225, 229, 233, 235, 236, 237, 238, 284, 288, 289, 295], "helper": [12, 13, 30, 46, 48, 58, 62, 65, 67, 92, 94, 95, 96, 167, 169, 178, 214, 224, 227, 230, 233, 234, 236, 249, 279], "test_sin_1_unevalu": 12, "dummy_eq": [12, 67], "combinatori": [12, 23, 51, 59, 66, 67, 74, 75, 213, 219, 229, 255, 257, 274, 294], "test_comb_factori": 12, "test_factorial_rewrit": 12, "nonneg": [12, 21, 23, 44, 67, 68, 69, 72, 75, 100, 149, 205, 207, 213, 230, 237, 294], "rewrit": [12, 66, 67, 69, 72, 73, 75, 92, 94, 97, 110, 118, 179, 208, 213, 224, 225, 226, 229, 233, 234, 235, 236, 237, 274, 288, 290], "_i": [12, 94, 182, 187, 214], "product": [12, 13, 21, 40, 50, 52, 55, 58, 59, 63, 65, 66, 67, 68, 69, 71, 72, 75, 77, 80, 82, 83, 90, 92, 94, 96, 97, 98, 100, 103, 107, 108, 118, 119, 120, 122, 126, 134, 147, 149, 157, 161, 162, 165, 167, 168, 169, 171, 174, 176, 177, 179, 180, 182, 186, 187, 188, 191, 192, 194, 199, 200, 201, 202, 204, 205, 206, 208, 210, 212, 213, 214, 217, 218, 219, 222, 225, 226, 229, 230, 233, 234, 235, 236, 237, 239, 241, 242, 243, 249, 252, 255, 262, 266, 279], "far": [12, 15, 47, 67, 81, 94, 202, 204, 207, 217, 227, 256, 283, 284, 286], "boil": 12, "agre": [12, 67, 68, 75, 82, 92, 227], "indefinit": [12, 14, 40, 73, 91, 92, 94, 103, 208, 210, 211, 213, 222, 284], "integrand": [12, 71, 75, 91, 92, 94, 227], "Of": [12, 19, 21, 27, 66, 92, 103, 233, 236, 255, 294], "cours": [12, 19, 21, 50, 51, 58, 66, 75, 92, 94, 103, 104, 107, 147, 198, 206, 207, 211, 212, 224, 226, 227, 269, 294], "hurt": 12, "checkodesol": [12, 34, 233], "truth": [12, 22, 41, 42, 43, 44, 45, 67, 98, 229], "verifi": [12, 21, 27, 32, 34, 38, 46, 58, 64, 68, 69, 132, 204, 210, 216, 233, 235, 236, 238, 239, 294], "logic": [12, 13, 14, 21, 23, 41, 42, 43, 44, 47, 67, 69, 92, 94, 107, 174, 176, 177, 181, 203, 217, 219, 225, 233, 237, 255, 286, 287, 288, 290], "duplic": [12, 15, 58, 61, 68, 73, 75, 103, 107, 131, 225, 233, 255, 287], "mistaken": 12, "aaronmeur": 12, "anaconda3": 12, "cpython": [12, 149], "cach": [12, 21, 72, 92, 204, 213, 217, 246, 251, 252], "ye": [12, 68, 97, 107, 233], "ground": [12, 86, 126, 134, 138, 139, 140, 141, 204, 206, 207, 208, 210, 212, 213, 235, 293], "gmpy": [12, 67, 71, 207, 208, 293], "7357232": 12, "hash": [12, 67, 208, 210, 218, 229, 233, 248, 250], "3923913114": 12, "situat": [12, 21, 36, 67, 71, 92, 201, 233, 235, 237, 253, 286], "randomli": [12, 58, 67, 68, 107, 176], "xfail": [12, 233, 246, 248], "almost": [12, 32, 92, 101, 109, 184, 203, 204, 208, 213, 214, 233, 237, 251, 252, 255, 288], "useless": [12, 184, 208, 210], "test_func": 12, "sinc": [12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 41, 46, 48, 49, 58, 59, 60, 63, 64, 65, 67, 68, 70, 72, 73, 75, 76, 77, 79, 83, 85, 91, 92, 94, 96, 97, 98, 103, 107, 121, 126, 147, 149, 158, 182, 183, 187, 198, 201, 203, 204, 205, 207, 208, 210, 212, 213, 217, 220, 225, 226, 227, 229, 230, 233, 235, 236, 237, 243, 247, 251, 252, 253, 255, 256, 266, 268, 269, 271, 283, 288, 290, 293, 294, 295], "xpass": [12, 246, 248], "test_failing_integr": 12, "atanh": [12, 73, 214, 217, 227], "mistyp": 12, "slightli": [12, 33, 39, 40, 48, 63, 107, 109, 134, 203, 204, 206, 208, 210, 213, 217, 227, 229], "robust": [12, 34, 64, 67, 71, 209, 229, 233], "against": [12, 13, 21, 23, 36, 68, 103, 110, 132, 249], "minut": [12, 15, 32, 122, 134, 191], "hang": [12, 34, 103, 136, 140, 233, 234], "job": [12, 19, 23, 59, 162, 214, 217], "skipp": 12, "test_optional_depend": 12, "runtest": [12, 13, 248], "yml": 12, "manner": [12, 51, 68, 75, 146, 180, 198, 230, 233, 238, 255, 271], "act": [12, 14, 47, 50, 57, 58, 59, 63, 67, 75, 83, 96, 97, 103, 110, 112, 114, 123, 126, 129, 131, 132, 137, 145, 154, 166, 171, 174, 175, 225, 236, 238, 239, 267, 271, 283], "fresh": 12, "verbos": [12, 48, 67, 98, 107, 217, 248, 249, 293], "clipboard": 12, "contrast": [12, 14, 23, 66, 67, 136, 207, 213, 227, 233, 288], "foremost": 12, "tempt": [12, 21, 23, 67, 107], "indirect": [12, 67, 69, 75, 107, 182, 233], "trigsimp": [12, 15, 40, 67, 103, 126, 132, 140, 192, 226, 229, 266], "along": [12, 19, 23, 27, 48, 58, 67, 68, 69, 73, 75, 76, 77, 81, 82, 85, 87, 90, 92, 98, 100, 103, 110, 111, 112, 114, 121, 122, 126, 127, 129, 131, 134, 136, 139, 140, 141, 144, 145, 146, 147, 149, 151, 179, 191, 192, 198, 201, 203, 206, 207, 212, 213, 233, 236, 265, 269, 271], "clearer": [12, 13, 266], "unwieldi": [12, 17], "sort": [12, 14, 29, 42, 43, 47, 48, 56, 59, 63, 92, 94, 97, 103, 106, 107, 119, 122, 127, 166, 182, 187, 191, 203, 210, 213, 214, 224, 229, 230, 233, 234, 235, 239, 241, 243, 248, 250, 255, 266, 286, 288, 289], "judgment": 12, "convolut": [12, 75, 219], "uncommon": [12, 48], "valueerror": [12, 18, 21, 33, 34, 41, 43, 46, 48, 49, 59, 67, 68, 76, 77, 80, 82, 83, 94, 98, 100, 103, 106, 107, 110, 116, 118, 156, 196, 198, 202, 204, 206, 210, 212, 225, 233, 235, 236, 255, 258, 269], "0x10e997790": 12, "memori": [12, 14, 48, 67, 107, 213, 238, 249, 252], "attempt": [12, 17, 19, 22, 23, 27, 30, 34, 36, 48, 58, 63, 65, 67, 71, 72, 79, 92, 94, 103, 107, 122, 124, 177, 206, 207, 208, 212, 217, 219, 226, 229, 230, 233, 235, 236, 237, 248, 286, 294], "proof": [12, 58, 61, 92, 94, 236], "45": [12, 47, 67, 72, 83, 103, 107, 114, 213, 214, 230], "120": [12, 19, 66, 67, 72, 73, 89, 107, 110, 111, 214, 216, 217, 219, 233, 284], "210": [12, 71, 107, 230], "252": 12, "hidden": [12, 14, 191], "outdat": 12, "doctest_depends_on": [12, 251], "blanklin": 12, "todo": [12, 160, 162, 166, 167, 171, 172, 174, 175, 176, 177, 178, 210, 217, 224, 242], "trick": [12, 13, 14, 15, 63, 227, 243], "tag": [12, 217, 235], "dotprint": [12, 289, 293], "pprint": [12, 14, 15, 23, 25, 31, 46, 47, 69, 75, 94, 103, 107, 118, 154, 202, 217, 218, 225, 229, 233, 234, 236, 237, 255, 293], "use_unicod": [12, 23, 32, 46, 47, 48, 71, 75, 94, 95, 103, 111, 118, 154, 197, 202, 204, 205, 216, 217, 218, 236, 237, 284, 288, 290, 293, 294, 295], "is_real": [12, 14, 21, 23, 27, 31, 67, 69, 73, 74, 103, 194, 213, 217, 242], "real": [12, 13, 14, 15, 18, 19, 21, 22, 23, 27, 30, 31, 40, 42, 44, 45, 46, 48, 59, 67, 68, 69, 71, 72, 73, 74, 75, 79, 83, 84, 89, 92, 94, 97, 98, 100, 103, 109, 114, 120, 129, 132, 149, 151, 154, 155, 162, 180, 194, 202, 205, 208, 212, 213, 214, 217, 218, 220, 224, 225, 227, 229, 232, 233, 235, 236, 237, 242, 246, 250, 259, 288, 294, 295], "is_posit": [12, 14, 21, 22, 23, 67, 194, 208], "noth": [12, 13, 27, 47, 58, 67, 94, 127, 166, 182, 204, 208, 216, 217, 229, 233, 235, 246, 248, 256, 258, 286], "didn": [12, 94, 103, 146], "unexpect": [12, 67, 248], "side": [12, 15, 19, 21, 29, 31, 34, 48, 58, 59, 67, 79, 83, 94, 103, 107, 110, 118, 127, 131, 146, 150, 170, 171, 187, 191, 192, 202, 204, 210, 212, 215, 217, 234, 236, 237, 241, 248, 250, 272, 284], "broke": 12, "revisit": [12, 140, 200], "particularli": [12, 21, 71, 94, 207, 208, 227, 294, 295], "squar": [12, 15, 21, 27, 30, 31, 36, 40, 44, 48, 58, 67, 68, 73, 83, 84, 92, 94, 98, 99, 103, 106, 107, 110, 118, 120, 144, 145, 168, 184, 192, 202, 206, 208, 210, 212, 213, 214, 217, 225, 229, 230, 233, 236, 237, 288], "root": [12, 15, 21, 23, 28, 31, 36, 40, 46, 48, 66, 67, 68, 73, 75, 89, 90, 91, 92, 94, 96, 99, 103, 107, 149, 187, 202, 204, 205, 208, 212, 214, 216, 217, 227, 229, 233, 235, 236, 237, 248, 252, 255, 288, 290, 293, 295], "radic": [12, 15, 27, 67, 68, 103, 204, 212, 213, 229, 235, 236], "adjust": [12, 131, 220, 224], "simpler": [12, 14, 22, 23, 27, 40, 67, 71, 75, 91, 92, 139, 201, 206, 210, 226, 227, 229, 233, 235, 236, 294], "delet": [12, 51, 96, 98, 103, 214, 258, 294], "rational": 12, "pycodestyl": 12, "pyflak": 12, "pollut": 12, "strip_whitepac": 12, "undefin": [12, 14, 23, 31, 34, 42, 43, 46, 67, 73, 74, 75, 94, 100, 109, 123, 201, 212, 223, 224, 227, 256, 284, 295], "restrict": [12, 14, 21, 23, 29, 48, 56, 67, 68, 75, 103, 110, 111, 182, 186, 204, 207, 212, 214, 232], "cfg": [12, 210, 213], "cosmet": [12, 217], "noqa": [12, 67, 95, 208, 251], "pycqa": 12, "multipledispatch": [12, 13, 41], "dispatch": [12, 14, 42, 43, 44, 67, 68, 177, 217, 236, 252], "funcnam": [12, 249], "arg1": [12, 237], "arg2": [12, 237], "f811": [12, 67], "redefin": [12, 23, 59, 67, 131, 144, 146, 205, 256], "stylist": 12, "reus": [12, 15, 23, 48, 182, 288], "str": [12, 13, 14, 23, 42, 47, 48, 49, 59, 67, 68, 69, 71, 76, 77, 80, 83, 84, 95, 97, 100, 103, 107, 109, 116, 126, 127, 128, 129, 131, 149, 166, 176, 182, 192, 194, 196, 203, 206, 208, 212, 217, 229, 233, 237, 253, 255, 256, 258, 262], "divis": [12, 15, 23, 67, 103, 107, 127, 184, 186, 204, 206, 207, 208, 209, 210, 213, 215, 217, 230, 233, 235, 248, 256, 286, 289, 293], "gotcha": [12, 14, 16, 67, 201, 256, 287, 295], "intent": [12, 21, 48, 66, 67, 109, 206, 250], "xp": 12, "test_symbol": 12, "ever": [12, 13, 14, 23, 73, 201, 204, 213, 227, 233, 250, 253, 289], "pars": [12, 13, 59, 67, 100, 132, 143, 214, 216, 273, 281], "cleaner": [12, 122, 149, 233], "sympifi": [12, 14, 15, 21, 22, 48, 71, 77, 97, 147, 155, 180, 182, 192, 193, 207, 208, 283, 289], "count_op": [12, 15, 67, 226, 229], "truthi": 12, "forget": [12, 30, 47, 294], "coverage_report": 12, "analyz": [12, 229, 242], "littl": [12, 21, 23, 47, 59, 77, 103, 107, 108, 134, 187, 206, 211, 213, 217, 227, 229, 237, 252, 266], "slower": [12, 13, 23, 27, 32, 63, 103, 127, 206, 207, 212, 213, 256, 283], "covhtml": 12, "100": [12, 15, 23, 25, 48, 51, 56, 66, 67, 68, 71, 75, 83, 90, 97, 98, 103, 107, 110, 203, 207, 212, 214, 216, 217, 224, 235, 236, 255, 283], "defens": 12, "gone": 12, "nedbatcheld": 12, "blog": [12, 13, 23, 48, 72, 98, 230, 236], "202008": 12, "you_should_include_your_tests_in_coverag": 12, "stori": [12, 187], "guarante": [12, 18, 21, 27, 33, 48, 58, 59, 67, 79, 92, 94, 103, 131, 206, 207, 210, 212, 213, 233, 235, 236, 253, 258, 290, 294], "condit": [12, 14, 21, 22, 25, 27, 29, 48, 58, 67, 69, 73, 75, 85, 86, 89, 90, 91, 94, 97, 103, 107, 109, 110, 111, 114, 118, 124, 128, 134, 142, 146, 149, 151, 196, 202, 214, 217, 220, 227, 230, 232, 233, 235, 236, 237, 242, 294], "200710": 12, "flaws_in_coverage_measur": 12, "regex": 13, "categori": [13, 204, 273, 280], "lead": [13, 14, 21, 22, 23, 27, 36, 66, 67, 73, 77, 94, 97, 103, 107, 120, 128, 166, 192, 201, 205, 206, 208, 210, 212, 213, 214, 217, 224, 226, 229, 233, 236, 250, 253, 258, 287, 294], "w": [13, 15, 25, 36, 40, 48, 51, 57, 59, 66, 67, 68, 69, 70, 73, 75, 92, 94, 97, 103, 104, 126, 129, 131, 140, 148, 151, 156, 167, 171, 180, 191, 196, 198, 199, 202, 203, 205, 206, 210, 211, 212, 213, 214, 218, 224, 225, 227, 229, 230, 233, 234, 236, 237, 248, 256, 258, 269, 295], "pythonwarn": 13, "NOT": [13, 25, 97, 118, 162, 166, 181, 184, 246, 249], "ned": 13, "batcheld": 13, "matplotlibbackend": [13, 203], "homonym": 13, "linestyl": 13, "xy": [13, 23, 46, 47, 81, 103, 129, 192, 201, 203, 204, 210, 217, 229, 236, 272, 289, 294], "y1": [13, 34, 67, 149], "width": [13, 47, 48, 95, 197, 203, 213, 217, 248], "height": [13, 47, 48, 83, 100, 151, 203, 204, 217, 224, 272], "motiv": [13, 16, 23, 37, 213], "horizont": [13, 23, 36, 47, 77, 80, 82, 98, 112, 114, 131, 154, 203, 206, 217], "vertic": [13, 47, 51, 60, 61, 77, 78, 80, 82, 83, 84, 94, 96, 98, 103, 111, 112, 114, 131, 137, 154, 162, 202, 203, 206, 212, 217, 225, 255, 272], "bar": [13, 48, 75, 133, 142, 171, 177, 258, 279], "reinvent": 13, "wheel": [13, 134], "facilit": [13, 108, 142, 153, 199, 248], "retriev": [13, 18, 50, 65, 98, 103, 131, 213, 229, 243], "ax": [13, 27, 28, 30, 32, 40, 68, 71, 77, 80, 92, 99, 103, 110, 116, 126, 127, 154, 179, 192, 201, 202, 203, 206, 214, 230, 233, 236, 238, 239, 242, 262, 264, 266, 269, 271, 294], "fig": 13, "_backend": 13, "axhlin": 13, "inertia": [13, 110, 111, 121, 122, 123, 125, 131, 132, 134, 135, 137, 139, 140, 141, 142, 149, 191, 192, 200, 201, 212, 279], "circular": [13, 15, 21, 116, 154, 210], "pariti": [13, 21, 59, 213], "inertia_of_point_mass": [13, 129], "graviti": [13, 131, 132, 136, 137, 139, 141, 149, 198, 271], "subclass": [13, 14, 21, 23, 42, 43, 48, 67, 74, 78, 80, 94, 97, 131, 151, 157, 166, 170, 171, 172, 177, 179, 180, 186, 203, 204, 206, 207, 208, 212, 213, 217, 237, 248, 249, 250, 253, 256, 262, 266, 289], "__init_subclass__": [13, 21], "kanesmethod": [13, 126, 127, 131, 132, 134, 135, 136, 137, 139, 140, 143, 144, 146, 149], "pinjoint": [13, 126, 131, 135, 137, 143], "prismaticjoint": [13, 126, 131, 137, 143], "q_": [13, 67, 126, 197, 230, 233], "u_": [13, 103, 126], "had": [13, 23, 31, 32, 59, 67, 68, 103, 107, 132, 146, 212, 213, 214, 217, 225, 227, 233, 235, 236, 251, 256, 283, 286, 289, 290], "axi": [13, 34, 40, 60, 72, 73, 77, 78, 80, 81, 83, 89, 92, 94, 100, 103, 110, 114, 116, 121, 126, 131, 132, 134, 136, 139, 140, 141, 143, 146, 149, 150, 151, 154, 155, 179, 192, 194, 196, 198, 200, 201, 203, 208, 236, 262, 264, 267, 269, 272], "parent_axi": [13, 126], "child_axi": [13, 126], "parent": [13, 58, 67, 90, 126, 131, 143, 192, 196, 207, 208, 212, 248, 252, 262, 266, 267], "child": [13, 14, 126, 131, 143, 192, 207, 252], "parent_interfram": [13, 126, 143], "child_interfram": [13, 126, 131, 143], "rotat": [13, 40, 55, 58, 60, 67, 76, 77, 78, 80, 82, 83, 98, 110, 111, 126, 131, 134, 137, 139, 141, 143, 147, 150, 166, 179, 192, 196, 198, 200, 201, 202, 203, 255, 262, 264, 267, 269, 271], "joint_axi": [13, 126, 131, 135, 137, 143], "transform": [13, 14, 36, 40, 45, 48, 63, 66, 67, 68, 69, 71, 72, 75, 82, 100, 103, 116, 118, 126, 134, 143, 154, 175, 177, 179, 184, 202, 205, 206, 208, 210, 212, 213, 219, 224, 225, 226, 229, 230, 232, 233, 234, 235, 236, 237, 239, 242, 250, 256, 262, 269, 288], "pin": [13, 40, 110, 111, 114, 126, 131], "dcm": [13, 123, 126, 132, 134, 149, 192, 200, 201, 262], "q_pin": [13, 131], "theta_pin": 13, "rad": [13, 68, 116, 132, 212], "int_fram": 13, "orient_axi": [13, 123, 126, 192, 194], "align": [13, 48, 77, 103, 126, 201, 202, 217, 235, 248], "orient": [13, 40, 79, 83, 98, 126, 132, 134, 136, 139, 143, 147, 149, 192, 196, 198, 200, 201, 210, 255, 262, 263, 270, 271, 277], "parent_joint_po": [13, 126], "child_joint_po": [13, 126], "parent_point": [13, 126, 135, 137, 143], "child_point": [13, 126, 131, 135, 137, 143], "mass": [13, 25, 84, 120, 121, 122, 123, 126, 127, 129, 131, 132, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 149, 150, 158, 183, 185, 186, 187, 198, 200, 248, 271, 279], "pos_from": [13, 126, 129, 131, 132, 134, 135, 136, 143, 149, 196, 200], "masscent": [13, 123, 126, 129, 131, 135, 143, 147, 149], "parent_fram": [13, 143], "child_fram": [13, 143], "locatenew": [13, 123, 129, 134, 136, 139, 140, 141, 146, 147, 149, 150, 193, 196, 198, 200], "conflict": [13, 73, 107, 118, 132, 250], "comprehens": [13, 21, 25, 31, 32, 34, 211, 225, 237, 283], "additional_transl": 13, "recogn": [13, 15, 27, 32, 34, 67, 68, 72, 82, 107, 110, 119, 205, 208, 216, 225, 226, 235, 242, 286], "node": [13, 14, 46, 61, 67, 94, 109, 114, 124, 158, 183, 192, 202, 207, 217, 224, 236, 241, 252, 256, 289, 293], "maximum": [13, 15, 31, 32, 46, 48, 49, 58, 59, 67, 73, 94, 103, 107, 110, 134, 179, 187, 203, 208, 210, 213, 217, 224, 225, 229, 230, 233, 236, 237, 252, 255], "multipli": [13, 15, 32, 40, 44, 48, 58, 67, 78, 82, 89, 96, 98, 103, 107, 127, 128, 136, 145, 146, 159, 168, 182, 187, 188, 191, 204, 205, 206, 208, 210, 212, 213, 217, 219, 226, 227, 230, 233, 238, 255, 266, 286, 289], "max": [13, 48, 58, 59, 67, 73, 75, 77, 103, 107, 109, 110, 202, 203, 212, 213, 217, 224, 226, 227, 256], "min": [13, 59, 63, 67, 72, 73, 103, 109, 202, 203, 212, 217, 223, 233, 255], "is_perfect_squar": 13, "ntheori": [13, 44, 58, 67, 68, 210, 213, 230, 255], "primetest": [13, 67, 107], "is_squar": [13, 67, 98, 107, 208], "is_prim": [13, 21, 67, 204], "isprim": [13, 44, 68, 107], "divid": [13, 14, 58, 66, 67, 68, 83, 103, 107, 127, 128, 186, 187, 205, 207, 208, 210, 212, 213, 217, 233, 252, 289], "bottom_up": [13, 67], "interactive_travers": 13, "postorder_travers": [13, 67, 289], "preorder_travers": [13, 67, 289], "refactor": [13, 233, 241, 252], "tr": [13, 49, 58, 217, 226], "quantum": [13, 26, 120, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 202, 279], "default_sort_kei": [13, 47, 56, 67, 241], "matrixel": [13, 48], "matrixsymbol": [13, 18, 21, 32, 44, 45, 48, 67, 98, 100, 103, 217, 237, 239], "layer": [13, 118, 210, 256], "imprecis": 13, "free_symbol": [13, 14, 30, 48, 67, 76, 94, 98, 171, 189, 192, 213, 223, 230], "atomicexpr": [13, 67], "concept": [13, 14, 21, 58, 134, 201, 207, 209, 212, 217, 236, 241, 271, 287, 292], "misappli": 13, "introduc": [13, 22, 30, 63, 66, 67, 75, 92, 103, 108, 111, 132, 134, 139, 140, 141, 145, 182, 187, 201, 208, 209, 213, 214, 217, 224, 227, 230, 237, 253, 280, 287, 290, 292, 294], "21494": 13, "size": [13, 19, 32, 48, 49, 51, 56, 58, 59, 60, 61, 62, 63, 67, 68, 70, 72, 95, 98, 100, 103, 106, 107, 116, 134, 144, 145, 146, 155, 177, 178, 197, 203, 206, 210, 217, 229, 230, 233, 237, 255, 284], "die": [13, 212, 237], "histor": [13, 14, 17, 23, 68, 206, 233, 237], "21563": 13, "revert": [13, 208, 213], "sample_it": [13, 237], "domainmatrix": [13, 32, 99, 103, 209, 212, 215, 280], "21402": 13, "earlier": [13, 122, 214, 218, 227, 229, 256, 267, 269, 289], "unsupport": [13, 15, 18, 118, 212, 217], "operand": [13, 15, 59, 67, 193, 212, 265], "dict": [13, 15, 17, 21, 27, 30, 31, 35, 36, 48, 50, 59, 67, 68, 69, 83, 84, 97, 98, 103, 107, 109, 127, 128, 162, 174, 177, 188, 190, 192, 203, 206, 207, 208, 210, 212, 213, 214, 215, 217, 229, 230, 233, 234, 235, 236, 237, 241, 248, 249, 255, 262, 295], "smith_normal_form": [13, 104, 206], "newmatrix": 13, "holonom": [13, 88, 91, 131, 133, 134, 135, 136, 142, 144, 145, 273, 279, 280], "polymatrix": 13, "risch": [13, 94, 284], "20780": 13, "20759": 13, "20621": 13, "19882": 13, "18844": 13, "21441": 13, "21427": 13, "21496": 13, "potenti": [13, 21, 79, 100, 103, 107, 127, 129, 131, 141, 142, 193, 199, 207, 212, 217, 224, 227, 229, 233, 251, 252, 265, 271, 279], "impact": 13, "downstream": [13, 21], "goal": [13, 14, 47, 122, 150, 212, 214, 248, 249, 251, 287, 288], "tableform": [13, 235, 258], "usecas": 13, "line2dbaseseri": [13, 203], "linecollect": [13, 203], "bokeh": 13, "plotli": 13, "mayavi": 13, "k3d": 13, "get_point": [13, 203], "uniformli": [13, 19, 58, 83, 84, 107, 110, 112, 116, 203, 251], "adapt": [13, 116, 203, 223, 235, 255, 261], "get_data": [13, 203, 259], "dft": [13, 70, 121], "fourier": [13, 67, 75, 94, 121, 175, 221, 274], "as_explicit": [13, 32, 100, 103, 121, 238, 239], "discret": [13, 46, 48, 49, 57, 59, 67, 68, 75, 107, 118, 182, 187, 219, 222, 233, 235, 236, 274, 283], "represent": [13, 14, 23, 27, 31, 40, 47, 48, 49, 50, 58, 61, 67, 68, 73, 75, 79, 87, 89, 91, 92, 94, 96, 97, 98, 99, 100, 106, 107, 115, 116, 121, 122, 123, 131, 142, 146, 151, 166, 171, 176, 177, 179, 180, 182, 184, 191, 197, 198, 200, 203, 204, 206, 208, 210, 212, 213, 214, 215, 216, 217, 219, 227, 229, 230, 233, 236, 237, 242, 243, 256, 258, 262, 265, 272, 280, 284, 286, 289], "21626": 13, "expos": [13, 47, 237], "mutat": [13, 118, 206, 208, 237], "flat": [13, 81, 98, 206, 249], "todok": [13, 98], "ey": [13, 32, 98, 99, 100, 101, 102, 103, 105, 206, 212, 238, 258, 290], "converg": [13, 48, 66, 71, 75, 94, 107, 151, 213, 220, 224, 227, 284], "legacy_matrix": [13, 94], "discontinu": [13, 46, 71, 73, 94, 110, 220, 235], "theano_cod": 13, "aesara_cod": [13, 217], "theanoprint": 13, "aesaraprint": [13, 217], "predic": [13, 14, 41, 42, 46, 109, 213, 229, 255, 274], "big": [13, 15, 19, 21, 51, 67, 69, 107, 149, 162, 202, 216, 217, 224, 239, 258, 284, 286], "registr": 13, "add_handl": 13, "remove_handl": [13, 41], "regist": [13, 41, 42, 43, 68, 178], "register_mani": [13, 42, 43], "askprimehandl": 13, "staticmethod": [13, 248], "register_handl": [13, 41], "prime": [13, 21, 34, 41, 42, 43, 44, 58, 65, 66, 67, 68, 70, 72, 75, 107, 153, 204, 205, 207, 208, 210, 213, 227, 229, 230, 237, 252], "Not": [13, 14, 22, 23, 32, 67, 72, 97, 118, 217, 236, 237, 255, 288, 295], "primepred": [13, 44], "q": [13, 14, 15, 18, 21, 28, 30, 39, 40, 41, 42, 43, 44, 45, 48, 59, 63, 66, 67, 68, 75, 84, 89, 90, 92, 94, 96, 98, 103, 109, 110, 112, 118, 119, 126, 127, 128, 131, 132, 134, 136, 141, 143, 144, 145, 146, 149, 150, 151, 162, 176, 182, 185, 192, 193, 194, 196, 197, 198, 200, 203, 204, 205, 207, 208, 210, 212, 213, 214, 216, 217, 219, 227, 230, 233, 235, 237, 242, 243, 258, 262, 265, 266, 268, 271, 290, 294], "20209": 13, "stochast": 13, "timestamp": 13, "wienerprocess": [13, 237], "normaldistribut": [13, 237], "20078": 13, "misspel": 13, "absorbing_prob": [13, 237], "absorb": [13, 14, 92, 233, 237, 284], "probabilit": 13, "shutil": 13, "power": [13, 15, 29, 34, 40, 45, 48, 57, 58, 59, 68, 70, 71, 72, 73, 89, 90, 92, 94, 96, 98, 100, 107, 108, 118, 132, 149, 154, 165, 168, 181, 184, 186, 187, 188, 192, 204, 205, 207, 208, 209, 210, 212, 213, 214, 216, 217, 218, 221, 224, 226, 229, 230, 233, 235, 236, 237, 241, 250, 255, 274, 283, 284, 285, 286, 287, 289, 290, 293], "immut": [13, 14, 67, 99, 102, 105, 201, 208, 233, 238, 277, 283, 290], "coordsystem": [13, 69], "patch": [13, 69, 217], "manifold": [13, 69], "coord_system": 13, "connect_to": 13, "coord_tuple_transform_to": [13, 69], "constructor": [13, 14, 23, 42, 43, 47, 48, 54, 58, 59, 60, 67, 74, 75, 96, 101, 103, 136, 175, 176, 180, 184, 203, 204, 206, 207, 208, 217, 225, 233, 242, 250, 266, 274, 285, 289], "unord": [13, 15, 67, 107, 208, 236, 255, 256], "lambidfi": 13, "guess": [13, 17, 47, 68, 71, 92, 95, 197, 210, 213, 227, 230, 289], "construct": [13, 19, 25, 29, 40, 42, 43, 47, 48, 50, 67, 69, 73, 75, 77, 81, 83, 95, 100, 103, 108, 111, 118, 122, 123, 127, 129, 131, 132, 134, 167, 171, 180, 181, 184, 188, 204, 207, 208, 210, 212, 213, 217, 230, 235, 237, 238, 242, 250, 252, 253, 266, 268, 269, 286, 289, 290, 294], "superclass": [13, 14, 21, 66, 94, 100, 208], "scalar": [13, 33, 40, 67, 69, 82, 96, 98, 100, 103, 108, 118, 129, 132, 181, 192, 193, 194, 199, 201, 204, 206, 210, 217, 233, 238, 250, 256, 262, 264, 265, 266, 267, 268, 270, 272, 277, 279], "quantiti": [13, 15, 59, 67, 72, 75, 79, 84, 111, 122, 127, 140, 147, 161, 184, 186, 190, 191, 198, 200, 201, 212, 229, 237, 266, 271, 279], "boolean": [13, 14, 23, 24, 29, 34, 41, 42, 43, 44, 45, 46, 48, 67, 73, 77, 81, 82, 83, 84, 95, 98, 103, 104, 107, 110, 116, 118, 127, 131, 167, 192, 194, 197, 203, 206, 208, 210, 212, 214, 217, 229, 233, 235, 237, 255, 265, 290], "sens": [13, 14, 19, 21, 23, 40, 44, 46, 47, 67, 69, 72, 75, 92, 97, 127, 134, 187, 192, 201, 204, 210, 212, 226, 227, 229, 236, 237, 249, 250, 255, 271, 294], "exponenti": [13, 15, 21, 34, 40, 48, 58, 63, 67, 68, 72, 94, 97, 98, 103, 107, 109, 168, 184, 214, 229, 233, 236, 237, 285, 286, 290], "treat": [13, 14, 21, 22, 23, 30, 34, 35, 40, 57, 58, 65, 67, 72, 75, 82, 83, 103, 109, 132, 155, 192, 198, 205, 207, 208, 210, 212, 213, 214, 216, 217, 224, 225, 227, 229, 230, 233, 235, 241, 249, 252, 269, 286, 290], "cdot": [13, 21, 25, 49, 66, 72, 75, 85, 89, 90, 92, 98, 100, 103, 107, 119, 121, 147, 187, 191, 198, 200, 201, 202, 204, 205, 213, 220, 224, 227, 233, 235, 238, 239, 255, 268, 269, 288, 289, 294], "attributeerror": [13, 21, 67, 103, 236, 256, 290], "as_coeff_mul": [13, 67, 92, 100], "tri": [13, 14, 15, 21, 29, 31, 34, 47, 67, 75, 83, 92, 94, 134, 146, 177, 204, 205, 212, 217, 219, 229, 233, 234, 236, 248, 286, 294], "benchmark": [13, 134, 148], "tmpfile": 13, "random_complex_numb": [13, 67], "verify_numer": [13, 67], "test_derivative_numer": [13, 67], "_randrang": [13, 67, 68], "_randint": [13, 67, 210], "as_poli": [13, 67, 205, 213], "as_expr": [13, 67, 103, 207, 212, 213, 214, 290], "combintor": 13, "perm_cycl": [13, 59, 217], "init_print": [13, 27, 32, 38, 48, 59, 71, 94, 95, 103, 111, 197, 204, 205, 216, 284, 288, 290, 293, 294, 295], "problemat": [13, 23, 207], "18056": 13, "15416": 13, "100x": 13, "slowdown": [13, 71], "significantli": [13, 32, 48, 71, 122, 144, 208, 219, 249, 252], "_sympifi": [13, 67, 100, 289], "strict": [13, 14, 27, 58, 59, 67, 71, 72, 98, 103, 109, 131, 210, 213, 235, 236, 255, 258, 294], "whatev": [13, 15, 23, 58, 67, 68, 229, 233, 234, 236, 256], "__repr__": [13, 217], "12524": 13, "repr": [13, 48, 94, 176, 207, 212, 217, 248, 293], "plenti": 13, "_sympy_": [13, 67], "lh": [13, 17, 29, 34, 48, 57, 67, 215, 217, 233, 235, 236, 268], "rh": [13, 17, 29, 32, 34, 48, 57, 59, 67, 98, 99, 103, 126, 127, 131, 132, 139, 140, 141, 206, 215, 217, 219, 233, 235, 236, 268], "tensexpr": [13, 119, 243], "substitute_indic": 13, "danger": [13, 205], "tensor_head": [13, 119, 243], "shorter": [13, 36, 67, 77, 122, 144, 191, 204, 208, 217, 250, 258], "creation": [13, 15, 23, 67, 69, 103, 123, 129, 139, 142, 143, 144, 145, 146, 156, 166, 170, 171, 172, 182, 200, 201, 217, 237, 242, 250, 256], "_dummy_fmt": 13, "l_": [13, 94, 103, 202], "obsolet": 13, "dummy_nam": [13, 243], "metric_symmetri": [13, 243], "set_metr": [13, 243], "delta": [13, 15, 48, 51, 61, 72, 90, 92, 96, 116, 146, 154, 182, 202, 206, 217, 224, 230, 233, 237, 238, 243], "epsilon": [13, 15, 66, 68, 75, 92, 94, 153, 217, 243], "latter": [13, 18, 23, 48, 58, 67, 72, 75, 92, 107, 204, 208, 212, 217, 227, 230, 243, 250, 255, 256, 286], "obscur": [13, 21], "young": [13, 110, 243], "tableau": 13, "favor": 13, "tensorindex": [13, 243], "tensor_indic": [13, 119, 243], "denot": [13, 14, 15, 19, 58, 59, 67, 69, 75, 89, 90, 92, 94, 96, 97, 98, 103, 107, 109, 114, 118, 187, 192, 198, 203, 204, 205, 210, 212, 220, 224, 225, 227, 233, 237, 242, 243, 262, 264, 266, 267, 269, 271], "emptyset": [13, 21, 31, 46, 47, 97, 217, 225, 236, 262, 295], "is_empti": [13, 21, 59], "unknown": [13, 14, 18, 21, 22, 23, 25, 32, 34, 35, 40, 67, 68, 111, 167, 206, 215, 232, 233, 234, 235, 236, 255, 295], "empti": [13, 14, 21, 27, 30, 31, 35, 42, 46, 47, 48, 49, 58, 62, 66, 67, 79, 82, 83, 84, 97, 98, 103, 107, 127, 128, 146, 177, 190, 208, 212, 213, 217, 223, 224, 225, 227, 233, 235, 236, 248, 250, 255, 258, 289], "denest": [13, 67, 213, 229, 235, 255], "particl": [13, 123, 126, 127, 129, 131, 132, 136, 137, 142, 144, 146, 149, 150, 158, 161, 168, 169, 180, 182, 185, 187, 200, 243, 279], "rigidbodi": [13, 123, 126, 127, 129, 131, 134, 139, 140, 141, 147, 149], "potential_energi": [13, 126, 127, 129, 131, 141, 147], "energi": [13, 26, 120, 123, 127, 129, 132, 141, 158, 183, 187, 198, 243, 269, 279], "setter": [13, 132, 149], "getter": [13, 67, 132, 149], "set_": 13, "set_condit": 13, "17749": 13, "unpack": [13, 67, 98, 103, 255, 256], "emul": [13, 229, 236, 238, 256], "is_deriv": [13, 67], "as_finite_differ": [13, 46, 67, 284], "17881": 13, "get_matrix": [13, 243], "__getitem__": [13, 67, 98, 206, 242], "__iter__": [13, 59, 67, 229], "_components_data_full_destroi": 13, "__pow__": [13, 98, 208, 214], "flaw": 13, "replace_with_arrai": [13, 243, 244], "throughout": [14, 92, 97, 210, 220, 236, 271, 286], "elsewher": [14, 21, 72, 96, 206, 248], "termnam": 14, "antideriv": [14, 73, 75, 94, 233, 284], "frac": [14, 19, 21, 23, 25, 27, 28, 32, 34, 46, 66, 67, 68, 69, 72, 73, 75, 92, 94, 103, 107, 109, 118, 136, 147, 185, 197, 198, 200, 201, 202, 206, 208, 210, 213, 217, 219, 220, 224, 227, 230, 233, 234, 236, 237, 238, 255, 269, 271, 284, 288, 289, 293, 294], "primit": [14, 58, 67, 68, 75, 107, 176, 180, 204, 205, 207, 208, 210, 212, 213, 216, 217, 230, 284], "terminologi": [14, 28, 243], "tupl": [14, 23, 30, 33, 34, 35, 40, 42, 43, 46, 47, 48, 49, 58, 59, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 89, 92, 94, 98, 103, 106, 107, 109, 110, 111, 112, 116, 123, 126, 127, 129, 131, 144, 145, 147, 149, 151, 166, 167, 168, 171, 176, 179, 180, 181, 182, 192, 196, 201, 203, 204, 206, 207, 208, 210, 214, 215, 217, 218, 219, 223, 225, 229, 230, 233, 234, 235, 236, 237, 238, 242, 243, 248, 249, 250, 251, 255, 256, 258, 262, 266, 284, 289, 290, 293], "subexpress": [14, 23, 48, 67, 73, 98, 122, 124, 212, 213, 217, 224, 229, 236, 250, 256, 283], "togeth": [14, 19, 48, 58, 67, 71, 96, 103, 107, 142, 168, 179, 187, 201, 204, 208, 210, 212, 213, 216, 217, 229, 233, 235, 237, 248, 249, 255, 288, 294], "walk": [14, 48, 51, 67, 174, 177, 227], "extract": [14, 27, 31, 35, 36, 46, 67, 94, 98, 100, 103, 107, 119, 134, 142, 147, 201, 210, 212, 213, 235, 236, 237, 248, 250, 255], "rebuilt": [14, 289], "atom": [14, 29, 48, 59, 67, 94, 97, 98, 120, 183, 207, 214, 217, 235, 236, 242], "queri": [14, 21, 22, 23, 41, 44, 45, 46, 48, 67, 79, 213, 229, 237], "is_": [14, 23, 67], "recurs": [14, 15, 18, 21, 23, 46, 67, 72, 92, 94, 97, 98, 107, 134, 203, 210, 213, 214, 217, 218, 222, 224, 229, 235, 236, 241, 246, 248, 252, 253, 255, 285, 294], "canonic": [14, 54, 67, 226, 243, 274], "excess": 14, "discourag": [14, 21, 67, 229], "expens": [14, 23, 34, 67, 146, 226, 233, 234, 235, 251, 290], "matrix": [14, 18, 19, 21, 25, 28, 33, 35, 40, 48, 56, 59, 67, 68, 69, 75, 82, 92, 94, 96, 98, 99, 101, 102, 105, 106, 108, 109, 118, 119, 121, 123, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 147, 149, 150, 151, 154, 155, 157, 165, 166, 171, 176, 177, 179, 181, 182, 184, 187, 192, 201, 202, 204, 206, 210, 212, 215, 217, 218, 225, 227, 229, 230, 233, 235, 236, 238, 239, 241, 242, 243, 244, 249, 250, 255, 256, 258, 262, 264, 265, 267, 271, 277, 285, 288, 289, 294, 295], "bound": [14, 29, 44, 48, 49, 66, 67, 76, 77, 78, 80, 82, 83, 94, 107, 129, 180, 206, 208, 210, 212, 213, 217, 223, 233, 235, 236, 237, 242, 252, 258, 262], "dummi": [14, 48, 63, 66, 67, 73, 92, 94, 103, 132, 149, 177, 182, 207, 208, 212, 213, 214, 223, 224, 225, 227, 229, 233, 236, 241, 243, 246, 250, 255, 256], "unequ": [14, 15, 17, 67, 110, 217], "clash": [14, 39, 67, 103], "_eval_": 14, "_eval_deriv": [14, 23, 67, 75], "overrid": [14, 15, 48, 67, 76, 77, 83, 109, 180, 206, 217, 242, 249, 250, 255, 256], "pre": [14, 40, 47, 48, 67, 202, 203, 218, 226, 229, 235, 236, 248, 267, 271, 289], "shorthand": [14, 15, 21, 23, 67, 97, 176, 212, 225, 246], "reserv": [14, 21, 132, 243, 250, 290], "smaller": [14, 48, 58, 59, 67, 68, 72, 75, 83, 94, 100, 107, 144, 205, 207, 210, 213, 220, 226, 227, 235, 255, 283, 294], "children": [14, 67, 68, 207, 252], "leaf": [14, 207, 217, 226, 289], "strictli": [14, 15, 18, 20, 21, 44, 46, 67, 75, 103, 107, 118, 210, 229, 235, 256], "dag": 14, "rebuild": [14, 23, 67, 213, 289], "colloqui": [14, 28], "hyper": [14, 67, 72, 75, 86, 89, 217, 219, 227, 229, 235, 237, 294], "primepi": [14, 23, 107], "divisor_sigma": [14, 107], "interchang": [14, 63, 66, 92, 233], "mental": 14, "hashabl": [14, 64, 92, 255], "repl": [14, 243], "intermedi": [14, 48, 49, 90, 98, 126, 132, 134, 139, 143, 166, 176, 184, 185, 192, 196, 200, 236, 250, 291], "idiom": [14, 259, 286, 287], "frown": 14, "lowercas": [14, 15, 40, 233, 248, 284], "is_integ": [14, 21, 23, 67, 194, 217, 242], "capit": [14, 66, 68, 118, 233], "wherea": [14, 19, 21, 27, 32, 44, 48, 68, 77, 83, 92, 97, 118, 187, 204, 207, 213, 217, 235, 236, 255, 294], "is_capit": 14, "unneed": 14, "achiev": [14, 15, 23, 67, 71, 75, 100, 107, 132, 149, 216, 224, 227, 229, 236, 239, 251, 267], "isinst": [14, 18, 21, 23, 48, 67, 98, 100, 118, 207, 208, 217, 218, 229, 238, 241, 250, 289], "ship": [14, 108], "numberkind": [14, 18, 67, 98, 225], "matrixkind": [14, 18, 67, 98, 225], "booleankind": [14, 67], "ring": [14, 27, 70, 90, 103, 104, 200, 205, 206, 210, 212, 213, 214, 215, 216, 217, 255], "classif": [14, 20, 67, 233, 234], "lamda": [14, 100, 217, 225, 237, 290], "\u03bb": [14, 290], "lambdifi": [14, 23, 33, 34, 48, 75, 134, 217, 235, 249, 254, 281, 285], "matrixexpr": [14, 23, 98, 100, 101], "mutabl": [14, 15, 49, 67, 99, 100, 101, 110, 208, 217, 218, 229, 238, 290], "dens": [14, 98, 100, 102, 103, 206, 212, 213, 238, 256, 277, 289], "quit": [14, 19, 23, 75, 103, 107, 134, 200, 203, 214, 216, 227, 235, 255, 271, 286, 289], "rung": [14, 46, 89], "kutta": [14, 89], "loss": [14, 48, 92, 182, 249, 268], "stabil": [14, 58, 63, 65, 71, 118, 146, 241], "focus": [14, 33, 210, 230, 232, 233, 235, 236, 295], "is_numb": [14, 21, 67, 75, 94], "infin": [14, 21, 29, 44, 66, 67, 72, 73, 75, 80, 92, 94, 103, 155, 208, 210, 213, 217, 222, 223, 224, 225, 229, 232, 233, 237], "resembl": [14, 69, 75, 94, 242], "zoo": [14, 17, 21, 44, 67, 72, 73, 75, 94, 224, 226, 229], "data": [14, 19, 48, 58, 67, 68, 75, 94, 103, 108, 116, 127, 161, 203, 204, 206, 207, 208, 210, 213, 214, 217, 229, 242, 243, 248, 250, 252, 255, 259], "effici": [14, 19, 21, 27, 32, 40, 46, 48, 51, 58, 63, 67, 70, 71, 72, 83, 84, 100, 103, 107, 108, 118, 126, 127, 149, 202, 205, 206, 207, 208, 210, 213, 214, 215, 216, 229, 230, 235, 249, 256, 283, 289, 290, 294], "inequ": [14, 21, 22, 23, 28, 67, 203, 210, 225, 227, 231, 274], "neq": [14, 23, 67, 73, 75, 92, 94, 98, 107, 187, 201, 202, 210, 213, 230, 233, 235, 294], "ne": [14, 17, 21, 67, 68, 72, 73, 80, 92, 103, 107, 205, 207, 210, 227, 233, 237], "hold": [14, 15, 23, 43, 47, 58, 63, 67, 68, 69, 73, 75, 89, 92, 103, 106, 109, 118, 120, 126, 128, 129, 147, 178, 213, 227, 229, 233, 237, 250, 294], "singleton": [14, 59, 97, 236, 289], "adject": [14, 237], "heurist": [14, 21, 34, 59, 92, 94, 98, 210, 211, 224, 226, 229, 235, 236, 248, 284, 294], "commut": [14, 21, 40, 44, 47, 58, 59, 63, 67, 69, 90, 94, 103, 159, 166, 169, 170, 171, 181, 182, 187, 194, 201, 205, 206, 208, 209, 210, 211, 213, 217, 224, 225, 227, 233, 243, 279, 280, 289], "law": [14, 47, 142, 185, 201, 205, 237], "xreplac": [14, 67, 98, 103, 192], "knowledg": [14, 66, 67, 68, 212, 233, 289, 292], "round": [14, 23, 33, 46, 48, 67, 71, 72, 73, 103, 155, 206, 208, 212, 213, 224, 226, 237], "analyt": [14, 38, 72, 75, 92, 103, 142, 233, 284], "implicitli": [14, 21, 22, 23, 59, 67, 94, 204, 207, 235], "independ": [14, 15, 23, 32, 44, 46, 48, 58, 66, 67, 69, 75, 84, 92, 94, 96, 103, 118, 127, 128, 131, 132, 134, 136, 144, 146, 180, 187, 198, 203, 205, 207, 212, 213, 219, 220, 227, 229, 230, 233, 234, 235, 236, 237, 243, 248, 249, 269, 288, 289], "parsabl": 14, "iter": [14, 27, 30, 31, 32, 36, 46, 48, 56, 58, 59, 62, 63, 67, 68, 69, 70, 72, 75, 83, 97, 107, 123, 124, 126, 127, 128, 129, 131, 146, 150, 167, 182, 196, 203, 204, 205, 206, 208, 210, 213, 217, 218, 219, 220, 223, 229, 230, 233, 235, 236, 237, 238, 241, 249, 250, 251, 252, 254, 256, 262, 267, 281], "fuzzi": [14, 21, 23, 24], "noncomput": 14, "philosoph": 14, "OR": [14, 46, 70, 97, 210], "unevaluatedexpr": [14, 67, 217, 289], "surpris": [14, 21, 236], "north": 14, "riemann": [14, 69, 72, 73, 92, 204, 229, 243], "sphere": [14, 154, 262, 272], "behav": [15, 44, 46, 67, 68, 73, 75, 107, 213, 225, 229, 235, 238, 244, 290], "mapl": [15, 94, 206, 233, 288], "mathematica": [15, 48, 59, 109, 288, 290], "faq": 15, "introductori": [15, 19, 37, 38, 149, 207, 208, 213], "remaind": [15, 66, 67, 68, 107, 205, 207, 208, 211, 213, 233], "java": 15, "subtract": [15, 31, 40, 48, 59, 67, 71, 82, 107, 118, 126, 184, 205, 206, 207, 208, 210, 212, 213, 289, 294], "proper": [15, 58, 67, 94, 107, 122, 132, 191, 207, 208, 212, 217, 225, 233, 238, 249, 250, 269, 290], "alter": [15, 49, 58, 67, 192, 207, 217, 219, 236], "afterward": [15, 48, 67, 129, 136], "simultan": [15, 67, 73, 80, 98, 107, 203, 226], "var": [15, 25, 30, 46, 48, 66, 67, 71, 72, 90, 94, 97, 103, 118, 192, 203, 212, 216, 217, 229, 230, 256, 295], "rate": [15, 134, 200, 237, 269, 284], "short_lif": 15, "haven": 15, "160": [15, 110, 211], "ctimesd": 15, "relationship": [15, 17, 21, 48, 67, 72, 74, 94, 107, 131, 143, 166, 192, 198, 201, 207, 235], "runtimeerror": [15, 46, 48, 225, 236, 255], "compileflag": [15, 248], "glob": [15, 248], "exceed": [15, 134, 212], "stdin": [15, 251, 253], "nameerror": [15, 95, 251, 286], "__future__": [15, 19, 286, 293], "cl": [15, 21, 23, 34, 48, 58, 67, 94, 98, 182, 196, 208, 212, 233, 242, 251, 255, 268, 284, 293, 295], "dir": [15, 67, 110, 219, 224, 255], "__builtins__": 15, "__file__": [15, 259], "__name__": [15, 217, 259], "__package__": 15, "_greek": 15, "_latin": 15, "chi": [15, 75, 92, 154, 217, 227, 233, 237, 243], "eta": [15, 75, 92, 212, 217, 233, 234, 237], "iota": [15, 217], "kappa": [15, 202, 217, 237], "mu": [15, 75, 92, 107, 119, 121, 153, 217, 237, 243], "omega": [15, 48, 49, 58, 92, 103, 107, 123, 129, 131, 147, 150, 156, 158, 183, 192, 196, 197, 200, 202, 217, 224, 237], "omicron": [15, 217], "phi": [15, 58, 67, 68, 72, 75, 92, 96, 103, 107, 120, 149, 156, 165, 167, 202, 204, 212, 217, 233, 262, 272], "psi": [15, 72, 75, 92, 154, 165, 166, 172, 180, 212, 217, 243], "rho": [15, 69, 92, 103, 107, 135, 176, 217, 237, 243, 272], "sigma": [15, 59, 90, 92, 98, 103, 217, 220, 237], "tau": [15, 48, 92, 94, 103, 212, 217, 233], "theta": [15, 40, 67, 69, 73, 75, 92, 95, 103, 109, 120, 131, 150, 154, 192, 201, 202, 208, 212, 217, 220, 225, 236, 237, 262, 264, 267, 269, 272], "upsilon": [15, 217], "xi": [15, 23, 69, 92, 217, 233, 234, 235], "lastli": [15, 94, 111, 150, 233], "unit": [15, 23, 25, 26, 40, 44, 47, 67, 68, 72, 80, 81, 82, 94, 103, 107, 110, 112, 116, 118, 120, 121, 126, 131, 132, 147, 149, 158, 183, 184, 185, 189, 191, 192, 198, 201, 203, 205, 208, 210, 212, 213, 215, 217, 225, 227, 230, 236, 238, 262, 264, 266, 271, 272, 279], "mnemon": [15, 226, 255], "osineq": 15, "reimport": 15, "restor": [15, 207, 229], "__": [15, 75, 94, 217, 237, 242], "press": [15, 47, 49, 51, 59, 68, 94, 98, 202, 211, 230, 235], "autocomplet": 15, "lose": [15, 204, 206], "abil": [15, 21, 46, 103, 142, 212, 216, 233, 236, 288, 294], "f1": [15, 33, 58, 92, 94, 103, 118, 123, 132, 140, 149, 203, 208, 210, 213, 217, 219, 235], "f2": [15, 33, 67, 92, 103, 118, 123, 132, 140, 149, 185, 203, 210, 213, 217, 219, 235], "accuraci": [15, 19, 46, 67, 206, 213, 290], "2000000000000002": 15, "py3k": 15, "20000000000000": 15, "sympyifi": 15, "worri": [15, 67, 289], "142857142857143": 15, "receiv": [15, 36, 50, 67, 68, 107, 123, 177, 212, 242], "fraction": [15, 67, 68, 71, 73, 83, 94, 103, 107, 124, 188, 206, 207, 208, 210, 211, 214, 217, 219, 229, 230, 233, 235, 285], "interpret": [15, 22, 34, 36, 48, 58, 66, 67, 72, 73, 75, 80, 83, 94, 98, 100, 103, 107, 109, 122, 187, 203, 205, 212, 213, 217, 224, 230, 235, 236, 237, 242, 248, 249, 252, 258, 290], "000000000000": 15, "00": [15, 67, 107, 166, 176, 230, 255], "null": [15, 67, 103], "34": [15, 48, 59, 72, 80, 103, 107, 123, 164, 211, 216, 223, 229, 230], "3400000000000": 15, "250": [15, 107, 230], "143": [15, 128, 161, 202], "decim": [15, 23, 48, 67, 70, 71, 107, 109, 116, 207, 213, 288], "142857": 15, "25000000000000000000": 15, "14285278320312500000": 15, "realiz": [15, 50, 52, 58, 69, 97, 107, 136, 204, 205, 210, 237], "pad": [15, 48, 68, 69, 70, 82, 107], "inexact": [15, 36, 67, 206, 208], "low": [15, 21, 22, 48, 67, 68, 75, 107, 127, 207, 210, 215, 217, 229, 249, 250, 255], "higher": [15, 19, 27, 46, 48, 67, 69, 71, 75, 78, 103, 196, 202, 204, 206, 207, 210, 213, 219, 220, 224, 226, 229, 233, 235, 238, 256, 284], "engin": [15, 112, 114, 148, 149, 199, 233, 293], "increas": [15, 32, 46, 47, 59, 65, 66, 67, 70, 71, 75, 98, 107, 108, 122, 131, 133, 166, 191, 192, 194, 200, 201, 207, 210, 212, 213, 219, 222, 226, 233, 237, 253, 255], "2000061035": 15, "highest": [15, 48, 61, 96, 122, 204, 213, 220, 230, 233], "hopefulli": [15, 20, 92], "unsimplifi": [15, 226], "12345678901234567890": 15, "big_trig_ident": 15, "ab": [15, 45, 48, 49, 66, 67, 68, 71, 72, 73, 75, 79, 80, 90, 92, 97, 98, 103, 114, 120, 149, 182, 205, 208, 212, 213, 217, 230, 232, 235, 236, 237, 239, 243, 252, 255, 258, 268, 294], "1000": [15, 48, 51, 67, 68, 71, 100, 107, 149, 186, 187, 188, 189, 202, 216, 217, 226, 256], "gave": [15, 67, 255], "impress": 15, "91": [15, 49, 211, 216, 223, 237], "4e": [15, 48, 235], "nearli": [15, 107, 226], "snippet": [15, 48], "expr_modifi": 15, "__main__": [15, 48, 290], "declar": [15, 21, 31, 48, 80, 92, 103, 109, 119, 132, 134, 149, 161, 206, 217, 224, 227, 232, 233, 234, 237, 250], "2x": [15, 30, 67, 75, 92, 109, 229, 230, 236, 237, 283, 286, 294], "syntaxerror": [15, 109], "asin": [15, 73, 75, 81, 214, 217, 227, 229, 233, 237, 294], "arcsin": [15, 73, 214, 217, 237], "arcco": [15, 73, 217], "expon": [15, 27, 36, 45, 48, 67, 68, 73, 74, 75, 92, 94, 100, 107, 116, 118, 188, 205, 206, 207, 213, 214, 217, 226, 229, 233, 236, 241, 252, 294], "half": [15, 23, 25, 48, 67, 68, 72, 73, 75, 77, 83, 94, 96, 103, 107, 109, 110, 131, 151, 154, 179, 202, 208, 210, 212, 213, 225, 226, 227, 229, 237, 248, 255], "denomin": [15, 67, 71, 75, 94, 107, 118, 124, 205, 206, 207, 208, 210, 212, 213, 216, 217, 226, 227, 229, 230, 233, 235, 294], "wild": [15, 67, 229, 255], "sq": [15, 230], "is_pow": [15, 48, 67, 73], "is_rat": [15, 21, 212, 255], "bracket": [15, 23, 33, 35, 59, 67, 75, 180, 182, 192, 217], "notat": [15, 19, 27, 31, 34, 36, 55, 59, 60, 66, 67, 68, 72, 75, 92, 100, 103, 109, 118, 128, 180, 191, 192, 197, 201, 204, 217, 224, 229, 236, 242, 243, 255, 269, 284], "curli": [15, 132, 217], "suppli": [15, 33, 34, 46, 47, 48, 58, 59, 67, 69, 77, 81, 103, 107, 123, 126, 127, 128, 129, 134, 136, 139, 144, 145, 147, 155, 182, 196, 201, 203, 212, 214, 219, 226, 233, 249, 255, 256, 262, 264, 267], "powsimp": [15, 67, 73, 226, 229], "deep": [15, 23, 67, 73, 97, 98, 213, 224, 229, 237, 289], "measur": [15, 40, 73, 75, 83, 99, 122, 147, 162, 171, 176, 184, 187, 189, 191, 192, 196, 198, 201, 213, 225, 226, 229, 237, 261, 262, 265, 266, 268, 269, 271], "join": [15, 29, 59, 67, 68, 80, 98, 110, 111, 217, 229, 233, 235, 238, 255, 259], "autoexpand": [15, 229], "violat": [15, 132, 202, 214, 229], "behind": [16, 37, 119, 132, 146, 186, 206, 226, 229, 233, 236, 279, 286], "decis": [16, 37, 67, 73, 94, 226, 235, 250], "opinion": [16, 37], "pitfal": [16, 23, 201, 207, 286, 291, 294], "glossari": 16, "arbitrarili": [17, 27, 46, 67, 80, 107, 210, 212, 224, 227, 233, 234, 237], "six": [17, 111, 217, 230, 236, 237], "bias": 17, "toward": [17, 48, 67, 75, 204, 224, 236], "unambigu": [17, 217, 233, 258], "univari": [17, 27, 36, 46, 66, 67, 73, 90, 94, 204, 205, 207, 208, 211, 212, 213, 214, 219, 230, 232, 235, 237], "linear": [17, 23, 28, 30, 32, 33, 36, 47, 48, 59, 66, 67, 68, 70, 71, 75, 80, 90, 92, 94, 96, 98, 100, 102, 110, 115, 118, 125, 126, 127, 129, 134, 136, 137, 142, 144, 148, 149, 154, 176, 179, 180, 191, 196, 203, 204, 206, 208, 210, 212, 213, 215, 223, 225, 227, 230, 233, 234, 235, 236, 255, 277, 279, 295], "undetermin": [17, 67, 103, 213, 219, 233, 235], "nonlinear": [17, 28, 34, 36, 66, 149, 213, 233, 235, 236], "sol": [17, 33, 103, 230, 233, 234, 235], "insuffici": [17, 98], "elimin": [17, 19, 32, 48, 63, 67, 97, 99, 103, 122, 206, 208, 215, 216, 218, 220, 229, 233, 235, 236, 243, 250, 290], "nsolv": [17, 27, 33, 35, 36, 149, 235], "z_eq": 17, "zsol": 17, "906425478894557": 17, "sol0": 17, "90642547889456": 17, "reduce_inequ": [17, 29, 232, 235], "classifi": [18, 103, 207, 233, 234, 236, 237], "former": [18, 48, 67, 72, 132, 210, 212, 213, 230, 255], "catch": [18, 67, 233, 248, 290], "naiv": [18, 58, 64, 67, 92, 98, 103, 107, 187, 206, 227, 235, 236, 243], "theori": [18, 23, 49, 50, 56, 57, 58, 59, 65, 67, 68, 72, 75, 96, 104, 127, 132, 146, 148, 161, 179, 182, 192, 196, 206, 210, 211, 212, 216, 230, 252, 262, 280, 288], "is_subset": [18, 225], "odd": [18, 21, 30, 41, 43, 44, 45, 55, 59, 67, 68, 72, 73, 75, 97, 106, 107, 119, 202, 212, 213, 217, 235], "appliedpred": [18, 41, 42, 43], "analysi": [19, 48, 49, 58, 67, 68, 73, 115, 134, 146, 147, 150, 204, 213, 227, 230, 237], "vari": [19, 46, 48, 67, 81, 83, 110, 116, 122, 127, 147, 180, 201, 224, 235, 255, 269], "hope": [19, 58, 122, 204], "envis": 19, "small": [19, 30, 48, 49, 50, 58, 59, 67, 71, 72, 94, 97, 103, 107, 118, 136, 140, 149, 179, 202, 203, 208, 210, 211, 212, 229, 230, 235, 255, 283, 286, 288], "x_": [19, 30, 34, 48, 57, 67, 68, 72, 109, 208, 210, 213, 219, 230, 233, 238], "taylor": [19, 67, 73, 132, 146, 149, 208, 210, 213, 214, 224, 233], "df": [19, 69, 233], "c_": [19, 28, 34, 68, 90, 92, 201, 205, 233], "grid": [19, 46, 47, 116, 203], "f_": [19, 67, 72, 75, 94, 144, 145, 146, 210, 216, 217, 227, 233], "constraint": [19, 29, 103, 111, 118, 126, 127, 128, 131, 132, 134, 135, 136, 138, 142, 144, 145, 146, 149, 214, 279], "formul": [19, 32, 126, 135, 136, 142, 144, 145, 182, 201], "assess": 19, "brute": [19, 226, 230], "frequent": [19, 58, 212, 224, 236], "treatment": [19, 92, 213], "shall": [19, 58, 92, 132, 149, 224, 227, 289], "truncat": [19, 59, 67, 103, 107, 111, 187, 203, 214, 216, 219, 220], "approx": [19, 28, 33, 67, 94], "lowest": [19, 48, 58, 63, 107, 204, 206, 219, 236], "2h": 19, "print_funct": 19, "x0": [19, 34, 46, 48, 57, 67, 75, 86, 88, 90, 91, 107, 154, 207, 218, 219, 224, 229, 233, 235, 237, 255, 284], "x_0": [19, 57, 58, 68, 89, 90, 91, 210, 219, 230, 233, 237, 284], "fip1": 19, "fip2": 19, "c_0": [19, 68, 90], "c_1": [19, 34, 68, 90, 92, 224, 227, 233], "c_2": [19, 34, 50, 92, 224, 233], "2f": [19, 295], "sum": [19, 21, 30, 48, 56, 59, 66, 67, 70, 72, 75, 80, 82, 90, 92, 94, 96, 97, 98, 100, 103, 107, 114, 129, 144, 161, 165, 168, 176, 179, 181, 182, 202, 204, 205, 207, 208, 212, 213, 214, 217, 219, 220, 222, 224, 226, 227, 229, 230, 233, 235, 236, 237, 238, 239, 241, 243, 252, 255, 294], "c_i": [19, 92, 224, 227, 233], "nth": [19, 67, 72, 75, 96, 107, 208, 213, 214, 223, 229, 233, 237], "degre": [19, 27, 49, 50, 58, 65, 66, 72, 75, 83, 94, 98, 103, 110, 112, 114, 116, 118, 126, 127, 131, 132, 133, 136, 142, 150, 154, 201, 204, 205, 208, 210, 212, 213, 216, 220, 223, 226, 227, 229, 230, 233, 235, 237, 262, 279], "x_i": [19, 23, 57, 75, 94, 103, 205, 208, 210, 213, 214, 217, 236], "m11": [19, 237], "m12": [19, 237], "m13": 19, "m21": [19, 237], "m22": [19, 237], "m23": 19, "m31": 19, "m32": 19, "m33": [19, 107], "3x3": [19, 32, 82, 103, 267], "invert": [19, 32, 36, 44, 67, 68, 98, 100, 103, 118, 136, 184, 205, 206, 207, 208, 212, 213, 233, 235, 236, 243, 290], "inv": [19, 32, 59, 99, 103, 126, 127, 131, 134, 139, 140, 149, 171, 206, 233], "fim1": 19, "eight": [19, 36, 217], "dfdxcheck": 19, "c3": [19, 34, 50, 70, 96, 98, 100, 107, 233, 237, 268, 295], "c5": [19, 233], "c7": [19, 58], "5040": [19, 72, 89, 213, 214], "tediou": [19, 94], "certainli": [19, 79, 109, 252], "devis": 19, "xn": [19, 23, 208], "x_n": [19, 23, 49, 57, 68, 89, 103, 205, 208, 210, 213, 230, 236], "fn": [19, 34, 94, 103, 204, 213], "fnm1": 19, "fnm2": 19, "dth": 19, "discrit": 19, "bengt": [19, 46], "fornberg": [19, 46], "weight": [19, 67, 75, 82, 84, 94, 96, 103, 166, 229, 284], "gap": [20, 58, 107, 132, 214], "matur": [20, 21, 235, 236], "finit": [20, 21, 31, 44, 48, 53, 54, 55, 58, 66, 67, 68, 70, 71, 94, 96, 97, 168, 192, 202, 205, 208, 211, 213, 214, 217, 219, 220, 223, 225, 230, 232, 233, 236, 255, 262, 264, 274, 285, 288, 294], "obviou": [21, 22, 23, 32, 50, 58, 66, 204, 207, 216, 230, 288], "refus": [21, 294], "roughli": [21, 67, 68, 108, 133, 233, 256], "possibli": [21, 48, 59, 65, 67, 92, 94, 107, 185, 206, 208, 210, 224, 225, 235, 250, 255, 284, 290], "infinit": [21, 23, 29, 30, 44, 66, 67, 68, 71, 72, 73, 80, 81, 94, 103, 107, 118, 138, 168, 187, 204, 212, 217, 218, 219, 222, 223, 224, 225, 229, 230, 232, 235, 242, 255, 294, 295], "is_neg": [21, 23, 208], "unknow": 21, "resolv": [21, 22, 27, 29, 30, 31, 32, 33, 34, 35, 67, 94, 226, 229, 235], "undecid": [21, 23, 31, 103, 207, 236, 290], "conclud": [21, 75, 90, 134, 198, 224, 235, 271], "mix": [21, 39, 66, 73, 98, 103, 109, 191, 207, 208, 213, 217, 236, 239, 241, 243, 256], "slow": [21, 23, 27, 32, 63, 67, 71, 94, 108, 122, 154, 191, 201, 207, 208, 217, 218, 219, 220, 229, 233, 235, 236, 248, 249, 294], "indetermin": [21, 22, 67, 103, 210, 222, 235], "contradict": 21, "infer": [21, 42, 43, 59, 67, 94, 207, 216, 217, 222, 227, 233, 249], "presum": [21, 92, 207, 227, 250], "singletonregistri": [21, 67], "x1": [21, 23, 33, 34, 57, 67, 72, 149, 154, 207, 208, 218, 219, 229, 233, 235, 237, 255], "x2": [21, 33, 57, 67, 72, 149, 154, 207, 219, 233, 235, 237], "posifi": [21, 229], "_x": [21, 23, 103, 143, 191, 197, 200, 201, 208, 214, 229, 233, 249], "rep": [21, 58, 63, 67, 166, 204, 206, 207, 208, 211, 212, 213, 226, 229, 258], "among": [21, 47, 48, 49, 51, 58, 59, 68, 95, 108, 213, 233, 238, 241, 243, 266], "behaviour": [21, 92, 97, 123, 210, 214, 220, 223], "symbolc": 21, "aris": [21, 22, 67, 72, 92, 94, 179, 201, 207, 212], "implicit": [21, 34, 48, 65, 67, 109, 127, 128, 131, 150, 203, 233, 235, 239, 242, 249, 250, 262, 265, 272, 286], "tailor": 21, "assumptions0": [21, 67], "extended_neg": [21, 67], "extended_nonneg": [21, 67], "extended_nonposit": [21, 67], "extended_nonzero": [21, 67, 217], "extended_posit": [21, 67], "extended_r": [21, 44, 67, 217, 232, 236], "hermitian": [21, 32, 44, 67, 98, 99, 103, 165, 171, 182, 217], "irrat": [21, 27, 44, 46, 67, 107, 207, 213, 217, 225, 288], "noninteg": [21, 44, 67, 207, 217], "nonposit": [21, 44, 67, 72, 75, 149], "nonzero": [21, 23, 44, 45, 66, 67, 82, 103, 120, 205, 206, 207, 208, 217, 220, 236], "antihermitian": [21, 44, 67], "mathbb": [21, 23, 30, 44, 49, 50, 58, 66, 67, 68, 73, 75, 92, 98, 103, 146, 202, 204, 205, 207, 208, 210, 212, 213, 216, 224, 225, 227, 230, 236, 237, 294], "ii": [21, 73, 92, 94, 107, 213, 217, 225, 233, 236, 239], "cup": [21, 213, 225, 236], "pm": [21, 27, 28, 30, 40, 66, 92, 94, 205, 216, 224, 230, 233], "yi": 21, "composit": [21, 44, 47, 56, 58, 59, 67, 68, 85, 87, 94, 107, 110, 208, 210, 213, 216, 229, 236, 251], "2k": [21, 67, 72, 92, 107, 230], "le": [21, 49, 63, 67, 75, 92, 98, 107, 141, 210, 217, 227, 237], "commutative_properti": [21, 67], "skew": [21, 90, 103, 107, 237], "hermitian_matrix": 21, "complex_numb": [21, 44, 67], "algebraic_numb": [21, 44, 67], "transcendental_numb": [21, 67], "extended_real_number_lin": 21, "real_numb": [21, 44], "imaginary_numb": [21, 44, 67], "rational_numb": [21, 44], "irrational_numb": [21, 44, 67], "parity_": [21, 67], "28mathemat": [21, 59, 67, 103, 225], "prime_numb": [21, 67, 107], "composite_numb": [21, 67], "positive_real_numb": 21, "negative_numb": [21, 67], "inconsist": [21, 23, 41, 43, 66, 187, 192, 196, 200, 229, 233, 236], "inconsistentassumpt": 21, "deal": [21, 48, 66, 67, 71, 79, 87, 92, 94, 115, 122, 127, 128, 132, 198, 200, 201, 205, 210, 213, 230, 235, 246, 256, 258, 266, 271, 286, 288, 294], "is_zero_matrix": [21, 98, 206], "generalis": [21, 72, 75, 92, 118, 204], "gaussian": [21, 75, 94, 103, 107, 152, 186, 210, 213, 230, 235, 237, 279, 290], "notion": [21, 47, 187, 190, 204, 236, 266, 271], "chain": [21, 23, 48, 58, 63, 67, 75, 84, 108, 200, 212, 237], "superset": [21, 46, 56, 62, 70, 149, 207, 225, 235], "vanilla": 21, "attach": [21, 59, 61, 92, 108, 110, 126, 127, 143, 201, 249, 251, 256], "is_commut": [21, 94, 171, 180, 255], "is_complex": [21, 67], "is_finit": [21, 67], "permit": [21, 59, 69, 73, 97, 107, 203], "formal": [21, 30, 47, 66, 67, 75, 92, 97, 151, 187, 207, 210, 221, 224, 274], "n1": [21, 48, 58, 67, 68, 132, 149, 151, 155, 191, 203, 230, 237, 262], "n2": [21, 48, 58, 67, 68, 149, 151, 155, 203, 230, 237], "misunderstand": 21, "is_nonneg": [21, 23, 208], "meaning": [21, 41, 43, 47, 68], "neither": [21, 22, 44, 67, 156, 177, 203, 213, 224, 225, 226, 233, 243, 256, 262, 271, 294], "alon": [21, 68, 95, 210, 233, 235, 242, 255, 288, 289], "meet": [21, 68, 224], "criteria": [21, 67, 289], "noncommut": [21, 67, 90, 289], "finiteset": [21, 31, 46, 47, 225, 236, 237, 295], "s1": [21, 50, 58, 66, 80, 83, 90, 118, 193, 204, 213, 220, 230, 255, 265], "s2": [21, 50, 58, 59, 66, 80, 83, 118, 193, 204, 213, 220, 224, 230, 255, 265], "bool": [21, 40, 46, 48, 50, 63, 65, 67, 68, 70, 73, 94, 95, 97, 98, 100, 103, 107, 109, 127, 128, 131, 165, 166, 194, 197, 203, 206, 212, 213, 215, 217, 218, 219, 224, 225, 229, 232, 237, 249, 250, 255, 256, 262, 265, 286], "plai": [21, 66, 134, 144, 230, 286, 288, 289], "role": [21, 73, 215], "is_finite_set": 21, "zero_matrix": 21, "setsymbol": 21, "is_compar": [21, 67], "capitalis": 21, "4142135623731": [21, 33, 217, 235], "predict": [21, 182, 229, 255], "expreal": 21, "fuzzy_and": [21, 22, 23], "fuzzy_or": [21, 22], "is_extended_nonneg": 21, "classmethod": [21, 23, 40, 42, 43, 48, 51, 56, 58, 59, 61, 62, 67, 73, 74, 75, 82, 98, 103, 118, 129, 131, 168, 179, 180, 182, 206, 208, 212, 213, 217, 225, 243, 248], "is_extended_r": 21, "elif": [21, 22, 23, 73], "is_infinit": 21, "is_extended_neg": 21, "is_extended_posit": [21, 22], "_eval_is_finit": 21, "is_extended_nonposit": 21, "_eval_is_algebra": 21, "is_nonzero": [21, 82], "_eval_is_integ": 21, "_eval_is_zero": [21, 23], "pick": [21, 68, 72, 146, 176, 178, 294], "__new__": [21, 23, 48, 58, 67, 289], "importantli": [21, 23, 214, 252], "reject": [21, 22, 107, 230, 258], "_eval_is_": 21, "is_algebra": [21, 67, 208], "interfer": [21, 217], "determinist": [21, 58, 94, 107, 210, 211], "reach": [21, 107, 118, 212, 213, 233], "claus": [21, 97], "flow": [21, 212], "inner": [21, 34, 66, 92, 103, 165, 168, 169, 174, 176, 177, 180, 182, 192, 196, 206, 212, 219, 262, 279], "optimis": [21, 233], "briefli": [21, 205, 210], "default_assumpt": 21, "_ask": 21, "_eval_i": 21, "enumer": [21, 37, 51, 56, 59, 62, 70, 74, 92, 97, 107, 212, 213, 227, 252, 255, 274], "randomis": [21, 245, 281], "unresolv": 21, "factrul": 21, "_assume_rul": 21, "preprocess": [21, 94, 215], "defined_fact": 21, "full_impl": 21, "defaultdict": [21, 67, 255], "precomput": [21, 72, 107, 256], "static": [21, 40, 48, 58, 59, 61, 67, 73, 80, 81, 82, 83, 100, 111, 134, 142, 203, 217, 223, 225, 237, 249], "knowabl": 21, "stdfactkb": 21, "_eval_is_r": [21, 23, 213], "_assumpt": [21, 67], "amongst": [21, 235], "indirectli": 21, "manifest": [21, 205], "jointli": 21, "fundament": [21, 23, 46, 49, 57, 85, 92, 94, 103, 186, 187, 207, 212, 230, 233, 237, 290], "theoret": [21, 47, 49, 58, 68, 72, 211, 212, 227, 237, 286], "isposit": 22, "xpo": 22, "xneg": 22, "strictgreaterthan": [22, 67, 217], "analogu": [22, 44, 66, 81, 207, 208], "piecewis": [22, 23, 48, 66, 72, 75, 94, 97, 110, 180, 217, 219, 220, 235, 236, 237, 256, 284], "p2": [22, 58, 59, 66, 77, 79, 80, 81, 82, 83, 110, 118, 123, 126, 129, 149, 196, 203, 207, 208, 210, 214, 226, 237], "nonetyp": [22, 48, 131], "quirk": 22, "both_posit": 22, "falsei": 22, "both_positive_bett": 22, "negat": [22, 23, 44, 67, 73, 97, 118, 192, 206, 208, 210, 213], "fuzzy_not": [22, 23], "both_positive_best": 22, "silent": [22, 71, 107, 249], "bitwis": [22, 70, 97], "footnot": [22, 187, 289, 290, 293], "si": [23, 75, 91, 92, 155, 184, 185, 186, 187, 188, 189, 217], "dig": [23, 48, 289], "handler": [23, 41, 42, 43, 44, 45, 67, 74, 103], "spectrum": 23, "np": [23, 34, 72, 90, 107, 132, 249, 256], "arang": [23, 249, 283], "arrai": [23, 28, 32, 33, 34, 48, 58, 59, 63, 64, 68, 75, 94, 98, 100, 103, 107, 108, 116, 128, 149, 179, 203, 206, 208, 213, 217, 236, 237, 240, 242, 243, 244, 249, 250, 252, 256, 277, 290], "cosin": [23, 67, 73, 75, 82, 94, 123, 126, 192, 201, 213, 214, 220, 226, 237, 262, 294], "todai": [23, 204], "operatornam": [23, 40, 72, 73, 75, 92, 94, 202, 205, 213, 217, 220, 225, 227, 235], "modern": [23, 48, 204, 211, 217], "recal": [23, 67, 103, 210, 212, 227, 286, 288, 289, 295], "antipattern": [23, 287], "stai": [23, 212], "trig": [23, 67, 94, 213, 217, 226, 229, 294], "wouldn": 23, "cheap": [23, 67, 107], "as_two_term": [23, 67], "hadn": 23, "wors": [23, 97, 229], "expand_trig": [23, 67, 283], "mid": [23, 49, 68, 71, 111, 225, 230], "troubl": [23, 75], "bigger": [23, 48, 67, 72, 103, 227, 233, 294], "deduc": [23, 48, 92, 97, 227, 288], "disallow": [23, 67, 213, 218, 229, 251], "great": [23, 151, 214, 217, 230, 256], "simplest": [23, 34, 47, 97, 103, 107, 108, 202, 203, 214, 218, 226, 229, 233, 284, 294], "\u03c0": [23, 71, 154, 217, 236, 284, 288, 294, 295], "as_independ": [23, 67, 236], "coeff": [23, 67, 69, 97, 149, 208, 212, 213, 223, 229, 233, 235, 243, 294], "apart": [23, 40, 58, 63, 67, 71, 73, 94, 198, 205, 206, 208, 210, 213, 216, 219, 230, 236, 243, 267, 269, 289], "is_even": [23, 55, 58, 59], "nonreal": [23, 33, 235], "cosh": [23, 67, 73, 75, 86, 92, 214, 217, 218, 227, 229, 235, 290, 294], "5919532755215": 23, "_eval_is_nonneg": 23, "exercis": [23, 58, 252, 287, 294], "_eval_is_posit": 23, "as_add": [23, 67], "pi_": 23, "fuzzy_": 23, "deduct": [23, 48], "subtl": [23, 226], "nontrivi": [23, 58, 67, 107], "_eval_evalf": [23, 213], "prec": [23, 33, 67, 77, 83, 107, 116, 202, 208, 213, 214, 229, 235], "dp": [23, 48, 67, 70, 75, 107, 207, 208, 235, 251], "53": [23, 68, 70, 103, 151, 205, 207, 208], "459697694131860": 23, "hook": [23, 108, 217], "_eval_rewrit": [23, 67], "rewritten": [23, 67, 72, 73, 75, 94, 132, 179, 186, 224, 229, 233, 235, 294], "caller": 23, "ve": [23, 134], "nonintegr": 23, "iff": [23, 44, 59, 68, 97, 103, 201, 204, 212, 227, 230, 248], "isint": 23, "happi": 23, "demand": [23, 39], "_eval_expand_": 23, "expand_": 23, "predefin": [23, 69, 149, 207, 217, 218, 229, 236, 243, 262, 267], "expand_log": [23, 48, 67, 229], "_eval_expand_trig": 23, "sophist": [23, 108, 235], "th": [23, 40, 49, 58, 59, 65, 68, 69, 71, 72, 73, 75, 96, 97, 103, 107, 127, 208, 210, 212, 213, 219, 222, 227, 230, 233, 235, 237, 238, 243], "x_1": [23, 49, 57, 58, 68, 72, 89, 103, 177, 205, 208, 210, 213, 219, 230, 236], "ldot": [23, 30, 49, 57, 58, 66, 67, 68, 72, 75, 92, 107, 111, 187, 202, 204, 205, 208, 210, 212, 217, 220, 224, 227, 230, 235, 238, 294], "x_k": [23, 68, 210], "dy": [23, 25, 48, 69, 84, 103, 110, 121, 149, 213, 217, 230, 233, 234, 284], "dz": [23, 110, 121, 227], "varion": 23, "middl": [23, 75, 83, 92, 103, 111, 162, 203, 227, 294], "iverson": 23, "printmethod": [23, 217], "latexprint": 23, "_latex": [23, 217], "_print": [23, 217], "_m": [23, 75], "_n": [23, 68, 72, 75, 94, 213, 227, 236], "arcversin": 23, "aversin": 23, "im": [23, 45, 67, 73, 92, 101, 204, 217, 218, 225, 233, 290], "sinh": [23, 46, 67, 71, 73, 75, 86, 92, 214, 217, 218, 227, 294], "expand_complex": [23, 67], "analog": [23, 27, 32, 60, 66, 68, 72, 147, 200, 201, 204, 205, 206, 210, 222, 238, 255], "vers": 23, "geometr": [23, 69, 76, 77, 78, 79, 80, 81, 82, 83, 84, 103, 151, 201, 204, 211, 237, 290], "angl": [23, 40, 73, 75, 76, 77, 78, 80, 81, 82, 83, 112, 114, 120, 126, 131, 132, 134, 135, 136, 137, 143, 146, 151, 154, 155, 156, 179, 187, 192, 200, 201, 202, 217, 226, 236, 262, 264, 267, 294], "distanc": [23, 47, 51, 59, 77, 80, 81, 82, 83, 110, 111, 121, 122, 126, 136, 137, 151, 155, 185, 196, 198, 271], "rightmost": [23, 182], "scientificamerican": 23, "uniti": [23, 73, 75, 92, 177, 212], "secret": [23, 68], "teacher": 23, "taught": [23, 94], "nr": 23, "sake": [23, 72, 230], "simplic": [23, 227, 233], "divisor": [23, 44, 58, 67, 68, 103, 107, 204, 205, 206, 207, 208, 210, 211, 212, 213, 216], "hardwar": [23, 48], "regard": [23, 49, 68, 75, 95, 150, 182, 204, 205, 219, 235, 236], "c99codeprint": [23, 48, 217], "cxx11codeprint": [23, 217], "cfunction": 23, "e2": [23, 46, 67, 70, 77, 84, 94, 103, 107, 116, 132, 206, 207, 212, 213, 224, 233, 236, 237, 255], "93accumulate_oper": 23, "fused_multipli": 23, "93add": 23, "ccode": [23, 48, 217, 242, 250], "cxxcode": [23, 48, 217], "_ccode": [23, 217], "_y": [23, 29, 143, 191, 197, 200, 201], "_z": [23, 94, 143, 191, 200, 201, 237], "_cxxcode": [23, 217], "std": [23, 48, 217, 237], "28318530717959": 23, "trigonometricfunct": 23, "inversetrigonometricfunct": 23, "reciprocaltrigonometricfunct": 23, "bypass": [23, 213, 233], "fragil": 23, "prone": [23, 30, 48, 67], "task": [24, 28, 37, 73, 142, 143, 149, 207, 212, 284, 291], "deeper": [24, 241, 289], "explor": [24, 144, 145, 203, 212, 252, 294], "textbook": 25, "dc": [25, 118, 145], "transferfunct": [25, 115, 116, 118], "unstabl": [25, 114], "impuls": [25, 118], "respons": [25, 66, 67, 118, 132, 203, 250], "subpart": 25, "unknwon": 25, "tf": [25, 118, 256], "from_zpk": [25, 118], "dc_gain": [25, 118], "reconstruct": [25, 68, 103, 206, 210, 230, 289], "is_stabl": [25, 118], "lie": [25, 27, 59, 69, 81, 82, 83, 213, 237, 273, 280], "inverse_laplace_transform": [25, 94], "to_expr": [25, 89, 90, 91, 118], "impulse_respons": 25, "theorem": [25, 27, 36, 55, 68, 72, 75, 77, 83, 94, 98, 103, 107, 121, 122, 134, 182, 191, 200, 204, 207, 210, 224, 227, 230, 236], "spring": [25, 107, 123, 126, 127, 131, 132, 137], "damper": [25, 126, 127, 131, 132, 137], "laplace_transform": [25, 94, 118], "laplace_initial_cond": [25, 94], "laplace_correspond": [25, 94], "2y": [25, 210, 230, 233, 236, 288], "dt": [25, 34, 69, 75, 136, 149, 191, 192, 194, 200, 201, 213, 233, 294], "ky": 25, "2u": 25, "quad": [25, 66, 67, 69, 71, 75, 94, 98], "bigg": 25, "nocond": [25, 94], "from_rational_express": [25, 118], "signal": [25, 75, 97, 107, 116, 118, 149, 210, 289], "bmatrix": [25, 34, 40, 98, 100, 103, 136, 144, 145, 146, 191, 192, 201, 230], "2t": [25, 72], "5e": 25, "laplac": [25, 94, 103, 115, 116, 118, 237], "mimo": [25, 115, 118], "visualis": 25, "1st": [25, 46, 59, 107, 118, 233, 234, 258, 284], "analys": [25, 47, 116, 118, 149, 237], "bode": 25, "magnitud": [25, 40, 48, 66, 67, 71, 75, 108, 110, 111, 112, 114, 116, 129, 136, 149, 180, 189, 192, 198, 201, 203, 262, 269, 271], "2nd": [25, 46, 59, 68, 107, 118, 149, 233, 238, 255], "applyfunc": [25, 98, 99, 103, 140, 192, 238], "transferfunctionmatrix": [25, 115, 118], "from_matrix": [25, 40, 118, 206], "lti": [25, 115, 116], "num_input": [25, 118], "num_output": [25, 118], "elem_pol": [25, 118], "elem_zero": [25, 118], "pole_zero_plot": [25, 116], "png": [25, 34, 47, 95, 103, 110, 111, 114, 116, 197, 203, 217, 220], "hire": [25, 34, 103, 110, 111, 114, 116, 203, 220], "tf1": [25, 116, 118], "step_response_plot": [25, 116], "tf2": [25, 118], "bode_magnitude_plot": [25, 116], "bode_phase_plot": [25, 116], "arrang": [25, 59, 118, 127, 147, 149, 213, 226, 230, 243], "loop": [25, 27, 30, 34, 47, 48, 107, 118, 135, 192, 203, 206, 214, 217, 233, 252, 255, 289], "ratio": [25, 44, 57, 58, 66, 67, 71, 72, 75, 77, 80, 81, 82, 83, 99, 107, 118, 155, 187, 206, 217, 226, 229, 235], "diagram": [25, 48, 56, 96, 110, 135, 136, 137, 142, 162, 242, 267, 289], "plant": [25, 118], "p_mat": 25, "c_mat": 25, "opposit": [25, 27, 63, 83, 97, 98, 123, 205, 208, 225, 229, 236, 244, 255, 262, 264, 294], "doit": [25, 66, 67, 69, 72, 73, 75, 94, 100, 118, 159, 161, 163, 174, 176, 179, 180, 182, 192, 202, 213, 219, 224, 229, 233, 234, 237, 239, 262, 265, 266, 268, 269, 284, 289], "tfm_feedback": 25, "mimofeedback": [25, 115, 118], "g1": [25, 48, 52, 57, 58, 92, 103, 118], "g2": [25, 48, 52, 57, 58, 92, 96, 103, 118], "g3": [25, 58, 118], "g4": [25, 118], "h1": [25, 47, 129], "h2": [25, 129], "h3": 25, "sys1": [25, 118], "sys2": [25, 118], "sys3": 25, "sys4": 25, "sys5": 25, "sys6": 25, "193": [25, 103, 116], "873": 25, "1644": 25, "1484": 25, "712": [25, 94], "testbook": 25, "vssut": 25, "ac": [25, 40, 48, 59, 79, 114, 129, 147, 159, 237, 255, 258], "classic": [26, 34, 46, 73, 75, 103, 168, 184, 192, 201, 204, 279], "continuum": [26, 38, 279], "optic": [26, 153, 154, 155, 156, 279], "bx": [27, 28, 92, 237, 243], "yield": [27, 29, 30, 31, 32, 34, 35, 46, 48, 58, 67, 68, 72, 75, 91, 92, 107, 110, 118, 124, 176, 202, 205, 210, 212, 213, 218, 219, 224, 225, 226, 229, 230, 235, 252, 255, 290], "4ac": [27, 28, 230], "2a": [27, 28, 237], "quadrat": [27, 30, 67, 68, 94, 107, 204, 208, 212, 213, 230, 235, 237], "five": [27, 30, 47, 56, 92, 114, 217, 230], "rootof": [27, 73, 213], "ill": [27, 185], "spuriou": [27, 210, 235], "interv": [27, 29, 31, 34, 44, 46, 58, 67, 71, 73, 75, 76, 77, 80, 83, 92, 94, 97, 107, 168, 177, 206, 208, 210, 212, 213, 220, 223, 225, 232, 236, 237, 295], "irreduc": [27, 205, 208, 210, 212, 213, 216, 237, 243, 294], "reveal": [27, 30, 32, 48, 107, 236, 289], "cubic": [27, 75, 204, 213, 230, 235], "quartic": [27, 77, 213, 235], "fourth": [27, 67, 68, 205, 233, 284], "687": 27, "144": [27, 36, 72, 94, 202, 206], "emphas": [27, 66], "quintic": [27, 213, 235], "fifth": 27, "techniqu": [27, 31, 32, 34, 49, 62, 92, 94, 213, 217, 219, 229, 233, 236, 290], "abel": [27, 36, 103, 213], "ruffini": [27, 36, 103], "expression_expand": 27, "symbolic_expand": 27, "cube": [27, 46, 48, 51, 58, 60, 73, 94, 210, 211, 230, 236, 272], "nois": 27, "neglig": 27, "compon": [27, 47, 48, 63, 67, 69, 82, 94, 100, 103, 119, 126, 129, 131, 142, 143, 147, 154, 179, 184, 191, 192, 198, 199, 200, 201, 202, 203, 204, 205, 206, 213, 215, 237, 239, 242, 243, 252, 255, 262, 265, 268, 269], "18482169793536e": 27, "55872552179222e": 27, "contrarili": 27, "rq0": 27, "rq1": 27, "rq2": 27, "rq3": 27, "237": [27, 211], "349745826211722": 27, "438990337475312": 27, "wilkinson": [27, 98], "expression_complex": 27, "symbolic_complex": 27, "expression_complex_poli": 27, "travers": [27, 83, 107, 124, 213, 226, 242, 252, 289], "my_real_root": 27, "my_root": 27, "324": [27, 107, 211], "fifth_ord": 27, "16730397826142": 27, "181232444469875": 27, "08395410131771": 27, "764884433600585": 27, "352471546031726": 27, "polyerror": [27, 210, 213], "unsolvablefactorerror": [27, 213, 235], "complexrootof": [27, 67, 103, 208, 213, 233], "fifth_order_solv": 27, "167303978": 27, "1812324445": 27, "083954101": 27, "7648844336": 27, "352471546": 27, "sole": 27, "croot": 27, "r0": [27, 213], "r1": [27, 40, 77, 80, 96, 110, 111, 155, 192, 198, 213, 262], "r2": [27, 40, 69, 80, 96, 98, 110, 111, 155, 192, 213, 217, 229, 262], "r3": [27, 40, 96, 110, 111, 229], "r4": [27, 96, 110], "robustli": 27, "diophantin": [28, 29, 107, 210, 231, 274], "guidanc": 28, "2z": [28, 35, 75, 236, 237], "4z": [28, 35, 236], "6z": [28, 35], "739085133215161": [28, 33, 35, 36, 235], "9y": [28, 34], "3x": [28, 34, 67, 109, 210, 236, 286], "cc": [28, 32, 68, 83, 202, 205, 206, 207, 213, 290], "2e": [28, 32, 67], "ce": [28, 32, 114], "2pq": [28, 30], "linprog": 29, "as_set": [29, 97], "accomplish": [29, 94, 146, 149, 269], "rel_op": [29, 67], "relations_sort": 29, "append": [29, 34, 58, 67, 68, 103, 111, 149, 177, 203, 208, 217, 235, 238, 250, 251, 255, 294], "x_y_reduc": 29, "insight": [29, 287], "x_reduc": 29, "y_reduc": 29, "solve_univariate_inequ": [29, 232, 236], "calculu": [29, 31, 67, 72, 94, 103, 149, 198, 226, 237, 268, 269, 270, 273, 274, 285, 287, 292], "incompat": 29, "reflect": [29, 36, 51, 55, 59, 67, 77, 78, 83, 96, 114, 151, 154, 155, 192], "parameter": [30, 69, 76, 77, 80, 83, 230], "pythagorean": [30, 230], "sage": [30, 67, 107, 202, 288], "ellipticcurv": 30, "nest": [30, 34, 67, 69, 73, 75, 94, 98, 118, 205, 207, 210, 217, 227, 229, 232, 236, 237, 238, 239, 241, 244, 255, 256, 289], "ineffici": [30, 67, 103, 207], "my_sym": 30, "pythag_eq": 30, "sym": [30, 46, 57, 58, 63, 67, 72, 192, 217, 220, 225, 229, 230, 235, 237, 243, 255, 294], "pythag": 30, "a_1x_1": [30, 230], "a_2x_2": [30, 230], "a_nx_n": [30, 230], "bxy": [30, 230], "cy": [30, 230], "ei": [30, 34, 75, 92, 212, 217, 227, 230, 233, 243], "homogen": [30, 40, 90, 94, 103, 118, 208, 210, 213, 230, 233, 234, 237], "ternari": [30, 48, 67, 217, 230], "cz": [30, 70, 118, 230], "dxy": [30, 230], "eyz": [30, 230], "fzx": [30, 230], "a_": [30, 63, 67, 68, 75, 92, 96, 98, 100, 118, 119, 191, 219, 227, 230, 233, 235, 237, 238, 239], "pythogorean": 30, "subscript": [30, 32, 59, 208, 217, 227, 230, 255], "solution_dict": [30, 34], "zip": [30, 46, 57, 68, 97, 107, 213, 223, 230, 233, 252, 255], "elegantli": 30, "solution_list": [30, 31], "solution_first": 30, "solution_p4q3": 30, "p_val": 30, "q_val": 30, "pythag_v": 30, "union": [30, 39, 44, 46, 48, 56, 58, 65, 97, 204, 212, 217, 223, 224, 225, 232, 236, 255], "4y": [30, 210, 236, 283], "rearrang": [31, 119, 127, 144, 145, 166, 233], "eqn": [31, 34, 46, 236], "solutions_set": 31, "solution_set": 31, "256": [31, 48, 58, 107, 213, 217], "solution_outside_2_3": 31, "critic": [31, 46, 155, 200, 212, 236], "minima": [31, 236], "critical_point": 31, "point1": [31, 193, 265], "point2": [31, 193, 265], "curvatur": [31, 151, 155], "membership": [31, 65, 212, 225], "solution_set_arg": 31, "linalg": [32, 33, 48], "lu_solv": [32, 103, 206], "linear_eq_to_matrix": [32, 233, 236], "matrixbas": [32, 98, 99, 100, 103, 127, 128, 206], "column": [32, 40, 44, 47, 48, 49, 95, 97, 98, 100, 103, 104, 106, 118, 127, 131, 134, 177, 184, 191, 192, 197, 202, 206, 212, 217, 233, 236, 242, 262], "row": [32, 44, 47, 48, 49, 56, 59, 67, 72, 98, 99, 100, 103, 104, 106, 107, 118, 131, 132, 134, 149, 150, 177, 191, 192, 201, 206, 212, 217, 227, 236, 237, 242, 256, 262, 264], "shapeerror": [32, 98, 100, 103], "penros": [32, 100, 103], "pseudoinvers": [32, 103], "jordan": [32, 92, 98, 103, 206, 215, 233, 235, 236], "lu": [32, 100, 103, 127, 128, 206, 211], "lusolv": [32, 99, 103, 126, 127, 128, 146, 150, 235, 290], "repeatedli": [32, 107, 119, 249], "b2": [32, 75, 107, 110, 111, 123, 132, 149, 192, 206, 208, 217, 227, 230, 233, 268], "solution2": 32, "prioriti": [32, 48, 90, 122, 132, 201, 256], "computation": [32, 63, 73, 126, 127, 128], "tractabl": [32, 236], "rapidli": [32, 67, 71, 92, 224], "dimens": [32, 48, 51, 68, 69, 75, 76, 78, 80, 81, 82, 84, 96, 98, 100, 103, 106, 110, 119, 136, 156, 166, 168, 171, 176, 185, 186, 189, 190, 192, 203, 206, 217, 230, 233, 235, 237, 238, 239, 242, 243, 250, 262, 265, 267, 279], "dimension": [32, 46, 48, 51, 69, 79, 80, 81, 82, 83, 100, 103, 111, 119, 149, 156, 158, 168, 184, 198, 199, 203, 204, 210, 212, 213, 216, 217, 235, 236, 238, 239, 243, 249, 271, 295], "4x4": [32, 40, 82, 106, 154, 237], "a\u2080\u2080": 32, "a\u2080\u2081": 32, "a\u2080\u2082": 32, "a\u2080\u2083": 32, "a\u2081\u2080": 32, "a\u2081\u2081": 32, "a\u2081\u2082": 32, "a\u2081\u2083": 32, "a\u2082\u2080": 32, "a\u2082\u2081": 32, "a\u2082\u2082": 32, "a\u2082\u2083": 32, "a\u2083\u2080": 32, "a\u2083\u2081": 32, "a\u2083\u2082": 32, "a\u2083\u2083": 32, "det": [32, 40, 103, 104, 149, 201, 206, 290], "a\u2081": [32, 111, 294], "\u2083": [32, 217], "slowest": [32, 94, 108], "symmetr": [32, 44, 45, 49, 50, 55, 58, 59, 63, 83, 98, 99, 100, 103, 107, 147, 202, 208, 210, 213, 216, 225, 227, 243, 255], "triangular": [32, 44, 50, 98, 99, 103, 206, 212, 235, 237, 272], "prove": [32, 67, 92, 94, 103, 204, 224, 233, 268], "noninvertiblematrixerror": [32, 100, 290], "overli": 33, "float64": [33, 48, 108, 237], "fsolv": 33, "findroot": [33, 75, 235], "overdetermin": [33, 206, 235, 236], "toler": [33, 48, 67, 71, 208, 229, 235], "18466446988997098217": 33, "16840434497100886801e": 33, "tweak": [33, 217, 235], "closest": [33, 67, 80], "00000000000000": [33, 67, 71, 183, 217, 237], "bisect": [33, 107, 213, 235], "multidimension": [33, 211, 248], "19287309935246": [33, 235], "27844411169911": [33, 235], "192873099352460791205211": 33, "278444111699106966687122": 33, "root_scalar": 33, "lam_f": [33, 256], "3416277185114782": 33, "x_valu": 33, "12757857962640e": 33, "73908513321516": 33, "4877893607115270300540019e": 33, "6543612251060553497428174e": 33, "solve_ivp": 34, "c2": [34, 50, 68, 77, 84, 98, 100, 126, 168, 182, 225, 233, 237, 265, 268, 295], "ypp": 34, "yp": 34, "classify_od": [34, 233], "choic": [34, 48, 59, 72, 75, 92, 94, 108, 146, 178, 187, 191, 192, 200, 208, 210, 213, 217, 229, 233, 255, 288], "ic": [34, 107, 233], "y0": [34, 67, 86, 88, 90, 233], "y_": [34, 48, 75, 92, 120, 202], "initialor": 34, "eqs_one_soln_set": 34, "solutions_one_soln_set": 34, "solution_one_soln_set_dict": 34, "outer": [34, 94, 129, 147, 149, 165, 170, 171, 191, 192, 194, 196, 201, 219, 225, 241, 262, 265, 266], "fashion": [34, 48, 67, 73, 100, 134, 144, 145, 147, 201, 204, 255], "solutions_list": 34, "leverag": [34, 48, 108, 217], "chemic": 34, "kinet": [34, 123, 127, 129], "r_f": [34, 213], "k_f": 34, "y_0": [34, 230, 233], "y_1": [34, 49, 230, 237], "r_b": 34, "k_b": 34, "y_2": [34, 49, 230, 237], "vec": [34, 98, 103, 126, 149, 192, 202, 210, 268, 269, 271], "pyplot": [34, 90, 149], "plt": [34, 90, 149], "y2": [34, 67, 149, 207], "kf": 34, "kb": 34, "rf": [34, 66, 72, 213], "rb": [34, 129, 147, 259], "speci": [34, 66, 67], "ydot": 34, "k_val": 34, "42": [34, 48, 56, 67, 70, 72, 80, 81, 83, 98, 99, 101, 103, 105, 107, 208, 210, 213, 230, 248], "t_eval": 34, "linspac": [34, 48, 90, 108, 132, 149], "50": [34, 49, 58, 70, 71, 72, 75, 83, 103, 107, 110, 111, 155, 186, 213, 217, 226, 235], "concentr": [34, 111, 237], "legend": [34, 149, 203, 220], "NO": [34, 182], "br": 34, "_2": [34, 103, 126, 191, 192, 202, 233], "nobr": 34, "shadow": [34, 60], "xlabel": [34, 203], "ylabel": [34, 203], "annot": [34, 107, 203, 217], "_integr": [34, 233, 234], "separable_integr": [34, 233], "routin": [34, 48, 56, 66, 67, 68, 69, 92, 97, 98, 103, 107, 127, 154, 182, 206, 210, 213, 216, 217, 218, 229, 230, 233, 234, 235, 236, 249, 255, 269], "unintegr": 34, "all_integr": [34, 233, 234], "coupl": [34, 67, 103, 131, 146, 161, 176, 179, 202], "educ": [34, 68, 103], "chaotic": 34, "lorenz": 34, "pendulum": [34, 126, 131, 133, 137, 142, 146, 150, 200, 279], "scienceworld": 34, "theta_1": 34, "theta_2": 34, "2g": 34, "theta1": [34, 136], "theta2": 34, "eq1": [34, 77, 233, 235, 236], "eq2": [34, 77, 97, 233, 236], "interrog": 35, "overconstrain": 35, "solvabl": [36, 58, 114, 126, 230, 233, 236, 295], "groebnerbasi": [36, 205, 213, 216], "lambert": [36, 73, 94, 214], "decompos": [36, 58, 59, 65, 67, 69, 73, 78, 103, 107, 166, 175, 176, 178, 208, 213, 216, 237], "lack": [36, 48, 69, 71, 129, 217, 284], "crootof": [36, 67, 213, 233, 235], "765": [36, 213], "352": [36, 213], "181": [36, 213], "08": [36, 103, 134, 213], "56": [36, 70, 94, 107, 213], "432": [36, 80, 212], "434607": 36, "0509758447494279": 36, "313552108895239": 36, "14751999969868": 36, "estim": [36, 46, 66, 67, 71, 92, 284], "preserv": [36, 47, 48, 58, 67, 103, 180, 208, 213, 218, 219, 229], "77245385090552": 36, "4142135623730951": 36, "varieti": [36, 48, 49, 59, 67, 108, 111, 147, 204, 211, 213, 237, 255], "risk": 36, "parse_latex": [36, 109], "central": [37, 58, 64, 75, 77, 83, 123, 129, 147, 212, 213, 230, 237], "pypi": 38, "qtconsol": [38, 293], "nicer": [38, 67, 140], "enthought": 38, "deploy": 38, "activepython": 38, "spack": 38, "freshli": 38, "starter": 38, "wherev": [38, 132, 229, 236, 266], "visit": [38, 51, 58, 67, 72, 291], "gitter": [38, 290], "excel": [38, 71, 212, 292], "ticket": 38, "export": [39, 217], "latin": 39, "clunki": 39, "collid": [39, 243], "win": 39, "throwawai": 39, "surviv": 39, "foo": [39, 46, 48, 67, 177, 197, 255, 258], "stick": 39, "_clash1": [39, 67], "_clash2": [39, 67], "multi": [39, 67, 68, 133, 142, 149, 162, 166, 176, 203, 217, 236, 279], "_clash": [39, 67], "sympif": [39, 67], "real_field": 40, "norm": [40, 103, 180, 192, 208, 210, 212, 213], "instanti": [40, 47, 48, 59, 67, 75, 80, 82, 83, 100, 103, 127, 172, 180, 192, 204, 208, 212, 237, 262, 266], "bi": [40, 67, 73, 75, 94, 201, 224, 233], "cj": 40, "dk": [40, 110, 212], "q1": [40, 103, 110, 122, 132, 134, 135, 136, 137, 139, 140, 141, 144, 145, 146, 150, 191, 192, 194, 196, 197, 200, 201, 207, 262, 264], "q2": [40, 110, 122, 132, 134, 135, 136, 137, 139, 140, 141, 144, 145, 150, 191, 192, 194, 196, 197, 200, 201, 207, 262, 264], "euclideanspac": 40, "realnormedalgebra": 40, "q3": [40, 122, 134, 135, 137, 139, 140, 141, 144, 192, 194, 196, 201, 262, 264], "atan_2": 40, "atan": [40, 45, 69, 71, 73, 78, 83, 91, 94, 136, 150, 151, 214, 217, 219], "arc_coplanar": 40, "arc": [40, 73, 294], "coplanar": [40, 81, 201], "parallel": [40, 77, 80, 81, 83, 94, 115, 118, 121, 200, 201, 210, 268, 272], "vector_coplanar": 40, "is_pur": 40, "mathbf": [40, 100, 127, 142, 144, 145, 147, 187, 191, 192, 197, 198, 200, 201, 217, 227, 238, 266, 267, 269, 271, 272], "versor": 40, "0i": 40, "0j": [40, 207], "0k": 40, "vector_part": 40, "vector_onli": 40, "from_axis_angl": 40, "radian": [40, 73, 76, 77, 78, 80, 81, 82, 103, 116, 132, 155, 156, 192], "from_eul": 40, "seq": [40, 58, 67, 70, 103, 208, 210, 213, 223, 235, 255], "intrins": [40, 48], "extrins": 40, "uppercas": [40, 68, 227], "zyz": [40, 192], "from_rotation_matrix": 40, "orthogon": [40, 44, 82, 96, 103, 180, 192, 201, 262, 264], "index_vector": 40, "scalar_part": 40, "is_zero_quaternion": 40, "mensor": 40, "60": [40, 53, 58, 60, 66, 67, 72, 75, 94, 103, 107, 110, 111, 206, 216, 217, 230, 233, 255], "pth": 40, "668": 40, "224": [40, 185, 211], "336": 40, "448": 40, "pow_cos_sin": 40, "900": 40, "1800": [40, 68], "2700": [40, 110], "3600": [40, 72], "product_matrix_left": 40, "hamilton": [40, 51, 98], "to_matrix": [40, 123, 126, 129, 147, 192, 201, 206, 212, 262, 265, 267], "product_matrix_right": 40, "rotate_point": 40, "coordin": [40, 48, 68, 69, 73, 75, 76, 78, 82, 84, 100, 103, 110, 112, 114, 116, 120, 126, 127, 128, 131, 132, 133, 134, 135, 137, 139, 142, 143, 144, 145, 148, 150, 158, 160, 179, 180, 183, 191, 192, 193, 194, 196, 198, 201, 204, 212, 213, 225, 233, 262, 264, 265, 268, 270, 272, 277, 279], "to_axis_angl": 40, "set_norm": 40, "to_eul": 40, "angle_addit": 40, "avoid_square_root": 40, "degener": [40, 235, 236], "gymbal": 40, "lock": 40, "atan2": [40, 45, 69, 73, 156, 217, 262], "bc": [40, 79, 114, 255, 258, 268], "mp": [40, 179, 235, 251], "bd": [40, 182], "1371": 40, "pone": 40, "0276302": 40, "to_rotation_matrix": 40, "assumptionkei": 41, "proposit": [41, 43, 97], "is_tru": [41, 43, 44], "assumptionscontext": [41, 42, 43], "global_assumpt": [41, 42, 43], "discern": [41, 43], "refin": [41, 43, 67, 98, 204, 208, 212, 213, 229, 250, 274], "inherit": [41, 67, 74, 97, 100, 101, 126, 171, 180, 202, 217, 237, 242, 250, 251], "askhandl": 41, "mere": [42, 43, 48, 50, 71, 177], "thin": [42, 103, 138, 151], "undefinedpred": [42, 43], "sexi": [42, 43], "sexyprimepred": [42, 43], "sexyprim": [42, 43], "int1": [42, 43], "int2": [42, 43], "assump": [42, 43], "r5": [42, 229], "predicate_": [42, 43], "28mathematical_log": [42, 43], "r6": 42, "sexy_prim": [42, 43], "resolut": [42, 43, 230], "askpredicatehandl": [42, 43], "r7": 43, "r8": 43, "notabl": [43, 48, 70, 75, 92, 108, 207], "truth_maintenance_system": 43, "istruepred": 44, "gt": [44, 48, 67, 217, 237, 255], "istruehandl": 44, "commutativepred": 44, "commutativehandl": 44, "finitepred": 44, "nor": [44, 46, 67, 97, 156, 203, 213, 224, 226, 233, 243, 262], "nan": [44, 45, 48, 67, 73, 75, 124, 127, 128, 229, 237, 284], "finitehandl": 44, "r9": 44, "infinitepred": 44, "infinitehandl": 44, "symmetricpred": 44, "transpos": [44, 47, 98, 100, 103, 118, 149, 165, 192, 201, 206, 212, 230, 238, 243, 244, 290], "diagon": [44, 72, 98, 99, 100, 103, 106, 131, 154, 206, 239], "symmetrichandl": 44, "r10": 44, "symmetric_matrix": 44, "invertiblepred": 44, "fullrank": [44, 48], "invertiblehandl": 44, "r11": 44, "invertible_matrix": 44, "orthogonalpred": 44, "tm": [44, 155], "mm": [44, 47, 107, 127, 134, 139, 140, 180, 206], "orthogonalhandl": 44, "r12": 44, "orthogonal_matrix": 44, "unitarypred": 44, "unitari": [44, 94, 107, 166, 171, 202], "unitaryhandl": 44, "r13": 44, "unitary_matrix": 44, "positivedefinitepred": 44, "tmz": 44, "positive_definit": 44, "positivedefinitehandl": 44, "r14": 44, "definite_matrix": 44, "uppertriangularpred": 44, "m_": [44, 145, 202, 210, 239], "ij": [44, 103, 182, 187, 202, 237, 239], "zeromatrix": [44, 100], "upper_triangular": [44, 98], "uppertriangularhandl": 44, "r15": 44, "uppertriangularmatrix": 44, "lowertriangularpred": 44, "lower_triangular": [44, 98], "lowertriangularhandl": 44, "r16": 44, "lowertriangularmatrix": 44, "diagonalpred": 44, "diagonalhandl": 44, "r17": 44, "diagonal_matrix": 44, "fullrankpred": 44, "rank": [44, 48, 49, 51, 56, 58, 59, 61, 62, 63, 82, 96, 103, 104, 192, 194, 204, 206, 208, 210, 212, 238, 242, 243, 290], "linearli": [44, 48, 75, 91, 103, 206, 210, 233, 235, 243], "fullrankhandl": 44, "squarepred": 44, "squarehandl": 44, "r18": 44, "square_matrix": 44, "integerelementspred": 44, "integer_el": 44, "integerelementshandl": 44, "realelementspred": 44, "real_el": 44, "realelementshandl": 44, "complexelementspred": 44, "complex_el": 44, "complexelementshandl": 44, "singularpred": 44, "singular": [44, 48, 59, 67, 71, 73, 74, 75, 89, 90, 92, 94, 103, 110, 113, 146, 192, 204, 211, 224, 233, 236, 262, 279, 284], "singularhandl": 44, "fore": 44, "r19": 44, "singularmatrix": 44, "normalpred": 44, "normalhandl": 44, "r20": 44, "normal_matrix": 44, "triangularpred": 44, "triangularhandl": 44, "r21": 44, "triangular_matrix": 44, "unittriangularpred": 44, "unit_triangular": 44, "unittriangularhandl": 44, "evenpred": 44, "evenhandl": 44, "oddpred": 44, "oddhandl": 44, "primehandl": 44, "subject": [44, 67, 77, 83, 111, 122, 150, 212], "compositepred": 44, "compositehandl": 44, "positivepred": 44, "positivehandl": 44, "negativepred": 44, "negativehandl": 44, "zeropred": 44, "zerohandl": 44, "nonzeropred": 44, "nonzerohandl": 44, "nonpositivepred": 44, "nonpositivehandl": 44, "nonnegativepred": 44, "nonnegativehandl": 44, "integerpred": 44, "integerhandl": 44, "r22": 44, "rationalpred": 44, "rationalhandl": 44, "r23": 44, "irrationalpred": 44, "irrationalhandl": 44, "r24": 44, "realpred": 44, "disjoint": [44, 47, 56, 59, 213, 225, 255], "realhandl": 44, "r25": 44, "extendedrealpred": 44, "extendedrealhandl": 44, "hermitianpred": 44, "hermitianhandl": 44, "r26": 44, "hermitianoper": [44, 171], "complexpred": 44, "complexhandl": 44, "r27": 44, "imaginarypred": 44, "imaginaryhandl": 44, "r28": 44, "antihermitianpred": 44, "antihermitianhandl": 44, "r29": 44, "algebraicpred": 44, "askalgebraicpredicatehandl": 44, "r30": 44, "algebraichandl": 44, "transcendentalpred": 44, "transcedent": 44, "refine_pow": 45, "refine_ab": 45, "refine_arg": 45, "refine_atan2": 45, "refine_im": 45, "refine_matrixel": 45, "refine_r": 45, "refine_sign": 45, "lagrang": [46, 67, 125, 126, 128, 131, 138, 142, 213, 230, 279], "lagrangian": [46, 127, 129, 136, 141, 145, 146], "euler_equ": 46, "r31": 46, "93lagrange_equ": 46, "decreas": [46, 48, 59, 210], "monoton": [46, 48, 84], "is_decreas": 46, "lopen": [46, 67, 225, 232, 237], "ropen": [46, 73, 225, 237], "is_increas": 46, "72": [46, 50, 67, 80, 103, 107, 110, 202, 216], "is_monoton": 46, "is_strictly_decreas": 46, "is_strictly_increas": 46, "monotonicity_help": 46, "held": [46, 68, 146, 241, 294], "r32": 46, "mathematical_singular": 46, "interpol": [46, 72, 76, 149, 210, 213], "finite_diff_weight": [46, 67, 284], "apply_finite_diff": [46, 67, 284], "differentiate_finit": [46, 67, 284], "finite_diff": [46, 67], "x_list": [46, 284], "y_list": [46, 284], "xlist": 46, "55271367880050e": 46, "indexedbas": [46, 48, 66, 67, 217, 235, 241, 242, 249], "idx": [46, 48, 217, 241, 242, 249], "region": [46, 75, 84, 94, 203, 225, 233, 236, 237, 262, 265, 272], "bewar": [46, 75], "phenomenon": [46, 187, 210, 220, 289], "90": [46, 58, 65, 75, 98, 103, 109, 110, 114, 122, 132, 150, 217, 219, 229, 237, 250], "finitediff": 46, "wrt": [46, 48, 67, 69, 75, 84, 103, 132, 149, 192, 193, 210, 213, 262, 264, 265, 269], "len": [46, 55, 56, 57, 58, 59, 63, 65, 67, 68, 72, 75, 82, 92, 97, 136, 151, 155, 166, 176, 206, 213, 229, 233, 242, 255], "nearest": [46, 212], "furthest": [46, 68], "sublist": [46, 63, 68, 94, 179, 284], "fd": [46, 48, 182], "0th": [46, 59, 68, 75], "forward": [46, 48, 98, 118, 134, 142, 175, 200, 229, 248], "pai": 46, "attent": [46, 58, 73], "gridpoint": 46, "plan": [46, 122, 208, 293], "mycoeff": 46, "3rd": [46, 59, 73, 107, 149, 213, 235, 238, 255], "poorer": 46, "grand": 46, "r33": 46, "51": [46, 103, 107], "184": [46, 233], "1988": [46, 161, 179, 210, 211], "699": 46, "706": [46, 103], "1090": [46, 213], "s0025": [46, 107], "5718": [46, 107], "0935077": 46, "continuous_domain": [46, 232], "function_rang": 46, "is_convex": [46, 83], "convex": [46, 83, 84, 94], "unspecifi": [46, 67, 82, 284], "multivari": [46, 67, 75, 204, 205, 207, 208, 209, 211, 213, 214, 224, 229, 235, 236, 237, 294], "concav": [46, 151], "r34": 46, "convex_funct": 46, "r35": 46, "ifp": 46, "illinoi": 46, "angelia": 46, "l3_convfunc": 46, "r36": 46, "logarithmically_convex_funct": 46, "r37": 46, "logarithmically_concave_funct": 46, "r38": 46, "concave_funct": 46, "lcim": 46, "mixtur": [46, 48, 84, 204, 250], "incommensur": 46, "not_empty_in": [46, 236], "finset_intersect": 46, "finite_set": [46, 225], "aperiod": 46, "smallest": [46, 61, 73, 80, 82, 89, 97, 103, 107, 179, 192, 208, 253, 255], "verif": [46, 206, 235], "reliabl": [46, 67, 233, 253, 284], "stationary_point": 46, "stationari": [46, 237], "tikz": 47, "joyofcat": 47, "adamek": 47, "herrlich": 47, "strecker": 47, "joi": 47, "cat": [47, 191], "katmat": 47, "uni": [47, 94, 255], "bremen": 47, "acc": [47, 149, 196, 200], "embryon": 47, "morphism": [47, 204], "codomain": [47, 204, 212], "arrow": [47, 96, 110, 203, 217], "namedmorph": 47, "prohibit": [47, 59, 60, 192], "identitymorph": 47, "compositemorph": 47, "compos": [47, 67, 68, 136, 146, 184, 187, 200, 204, 208, 212, 213, 214, 217, 219, 229], "circ": [47, 67, 78, 84, 92, 100], "flatten": [47, 67, 207, 239, 244, 255, 256], "new_nam": 47, "id_a": 47, "id_b": 47, "commutative_diagram": 47, "quadrupl": [47, 213], "mbox": 47, "hom": 47, "id": [47, 63, 73, 239], "rightarrow": [47, 59, 63, 68, 72, 73, 75, 89, 90, 92, 94, 97, 98, 107, 203, 212, 224, 236, 239, 255, 284], "monoid": 47, "pare1970": 47, "premis": 47, "conclus": [47, 67], "carri": [47, 48, 67, 174, 180, 187, 204, 207, 210, 212, 214, 215, 256], "premises_kei": 47, "et": [47, 94, 161, 210, 213, 214, 226, 229], "pareigi": 47, "functor": 47, "1970": [47, 103], "is_subdiagram": 47, "subdiagram": 47, "d1": [47, 63, 192, 204, 224, 237, 262], "subdiagram_from_object": 47, "veryuniqu": 47, "diagram_draw": 47, "diagramgrid": 47, "drawn": [47, 58, 96, 203, 207, 215], "moprhism": 47, "strive": 47, "nevertheless": 47, "laid": [47, 132, 179], "emploi": [47, 66, 71, 94, 107, 213, 216, 233, 237], "lai": 47, "layout": 47, "sequenti": [47, 51, 68, 73, 262, 264], "test_draw": 47, "lemma": [47, 58, 92, 205], "fivelemma": 47, "five_lemma": 47, "arrowstringdescript": 47, "curving_amount": 47, "looping_start": 47, "looping_end": 47, "horizontal_direct": 47, "vertical_direct": 47, "label_posit": 47, "pic": 47, "princip": [47, 68, 73, 75, 92, 94, 104, 120, 134, 155, 204, 205, 206, 207, 208, 210, 212, 213, 214], "offset": [47, 48, 67, 72, 75, 242], "cell": 47, "disregard": 47, "unexplain": 47, "astr": 47, "dr": [47, 69, 217, 233], "12mm": 47, "correspondingli": 47, "label_displac": 47, "arrow_styl": 47, "dash": 47, "xypicdiagramdraw": 47, "formatt": 47, "utilis": 47, "xypic": 47, "drawer": 47, "xymatrix": 47, "ld": 47, "arrow_formatt": 47, "therebi": 47, "default_arrow_formatt": 47, "farther": 47, "centr": [47, 64, 203], "default_formatt": 47, "_3mm": 47, "default_curving_amount": 47, "cm": [47, 149, 237], "_1cm": 47, "default_curving_step": 47, "1cm": 47, "rr": [47, 67, 85, 206, 207, 213, 214], "h_": [47, 58, 63, 72, 75, 94], "_2cm": 47, "mask": [47, 217], "diagram_format": 47, "proceed": [47, 49, 92, 94, 148, 211, 227], "xypic_draw_diagram": 47, "insert": [47, 49, 98, 109, 110, 177, 182, 217, 237, 258], "preview_diagram": 47, "fab": [48, 217], "cse_main": [48, 218, 229], "cse": [48, 108, 122, 171, 218, 229, 250, 256], "meat": 48, "lightweight": [48, 212, 288], "pycod": [48, 217], "lambdarepr": [48, 217, 256], "aesara_funct": [48, 108, 217], "float80": [48, 217], "assign_to": [48, 217], "type_alias": [48, 217], "0l": [48, 217], "powl": [48, 217], "c99": [48, 217, 250], "expm1": [48, 217], "thrown": [48, 217], "fcode": [48, 217], "contract": [48, 69, 119, 182, 217, 226, 239, 241, 242, 243, 244], "len_i": [48, 217], "mat_1": 48, "mat_2": 48, "jscode": [48, 217], "user_funct": [48, 217], "argument_test": [48, 217], "cfunction_str": [48, 217], "octav": [48, 149, 250], "custom_funct": [48, 217], "existing_octave_fcn": [48, 217], "is_matrix": [48, 217], "my_mat_fcn": [48, 217], "my_fcn": [48, 217], "mat": [48, 100, 151, 176, 217], "octave_cod": [48, 217], "summat": [48, 66, 67, 71, 72, 75, 182, 211, 213, 217, 220, 229, 237, 238, 241, 242, 243, 249], "mathematica_cod": [48, 217], "gamma_1": [48, 121], "gamma_2": [48, 121], "\u03b3\u2081": 48, "\u03b3\u2082": 48, "\u03b2": [48, 202], "h_i": [48, 63], "c89": [48, 217, 250], "julia_cod": [48, 217], "rust_cod": [48, 217], "powi": [48, 217], "make_routin": [48, 250], "f95": [48, 249, 250], "matlab": [48, 122, 149, 250, 290], "breadth": [48, 67, 237], "c_name": [48, 250], "c_code": [48, 250], "h_name": [48, 250], "c_header": [48, 250], "volume_result": 48, "ifndef": [48, 250], "project__test__h": [48, 250], "endif": [48, 250], "preprocessor": [48, 218, 229, 250], "global_var": [48, 250], "insensit": [48, 103, 149, 217, 248, 250], "argument_sequ": [48, 250], "name_expr": [48, 250], "to_fil": [48, 250], "f_name": [48, 250], "f_code": [48, 250], "hydrogen": [48, 279], "r_nl": [48, 120, 183], "my_routin": 48, "result_var": [48, 250], "result\u2085\u2081\u2084\u2082\u2083\u2084\u2081\u2086\u2088\u2081\u2083\u2089\u2087\u2087\u2081\u2089\u2084\u2082\u2088": 48, "__________": [48, 205], "assoc_laguerr": [48, 75, 217], "fcn": [48, 250], "result_5397460570204848505": [48, 250], "out_8598435338387848786": [48, 250], "examin": [48, 68, 171, 248, 250, 294], "inputargu": [48, 250], "outputargu": [48, 250], "inoutargu": [48, 250], "disk": [48, 68, 225, 236, 256], "binary_funct": [48, 108, 249], "tensor": [48, 54, 69, 103, 119, 129, 147, 161, 167, 168, 169, 179, 182, 191, 192, 217, 238, 239, 241, 242, 249, 256, 266, 267, 273, 274, 277, 279], "binary_func": [48, 249], "servic": 48, "tempdir": [48, 249], "qho_1d": [48, 158], "psi_n": [48, 158], "qho": 48, "tmp": 48, "subroutin": [48, 58, 178, 210], "autofunc": 48, "hbar": [48, 158, 164, 177, 183, 187, 189, 202], "05457162d": 48, "14159265358979d0": 48, "0d0": [48, 217], "74126166983329d": 48, "33": [48, 67, 70, 103, 128, 155, 191, 206, 210, 214, 217, 237], "mute": [48, 249], "backend": [48, 95, 108, 109, 116, 131, 135, 137, 143, 197, 214, 249, 256], "auxiliari": [48, 94, 127, 132, 144, 233, 249], "sympy_express": [48, 249], "mandatori": [48, 217, 249], "illustr": [48, 103, 133, 136, 187, 207, 220, 224], "psi_nl": 48, "766": 48, "incur": [48, 108], "get_numpy_arrai": 48, "tight": 48, "temp": [48, 134], "alloc": [48, 73], "fuse": 48, "wise": [48, 49, 73, 98, 206, 210, 217, 223, 249], "unabl": [48, 80, 84, 109, 235, 262, 283, 284], "fortun": [48, 108, 136, 213, 214], "reconnect": 48, "autom": [48, 73, 108, 226, 249, 288], "ideologi": [48, 236], "broadcast": [48, 108, 217, 242, 249], "outperform": 48, "quantit": [48, 184], "ufunc": [48, 108, 249, 256], "fn_numpi": 48, "fn_fortran": 48, "xx": [48, 103, 129, 192, 201, 255], "21306132": 48, "98101184": 48, "44626032": 48, "timeit": [48, 214], "10000": [48, 71, 107, 108, 110, 235], "18891601900395472": 48, "004707066000264604": 48, "facil": 48, "comparison": [48, 66, 67, 97, 103, 132, 204, 212, 216, 235, 248, 255], "thereof": [48, 67, 204, 210, 212], "optims_c99": 48, "log1p": [48, 217], "expm1_opt": 48, "log1p_opt": 48, "exp2_opt": 48, "log2_opt": 48, "log2const_opt": 48, "funcminusoneoptim": 48, "func_m_1": 48, "opportunist": 48, "replaceoptim": 48, "catastroph": 48, "replace_in_add": 48, "cost_funct": 48, "__call__": [48, 59, 67, 212], "exp2": [48, 217], "create_expand_pow_optim": 48, "base_req": 48, "is_symbol": [48, 98], "expand_opt": 48, "opt2": 48, "is_funct": 48, "log2": [48, 75, 217], "matin_opt": 48, "matinv_opt": 48, "matrixsolv": [48, 217], "matrix_nod": 48, "numpyprint": 48, "doprint": [48, 217], "seriesapprox": 48, "reltol": 48, "max_ord": 48, "n_point_check": 48, "threshold": [48, 107], "largest": [48, 59, 61, 67, 73, 75, 103, 106, 107, 162, 204, 208, 235, 255], "series_approx2": 48, "1e": [48, 67, 71, 103, 116, 151, 213, 235], "series_approx3": 48, "series_approx8": 48, "sumapprox": 48, "neglect": 48, "2000": [48, 53, 94, 107, 211], "sum_approx3": 48, "sum_approx2": 48, "sum_approx1": 48, "token": [48, 92, 95, 109], "codegenast": 48, "assignmentbas": 48, "augmentedassign": 48, "addaugmentedassign": 48, "subaugmentedassign": 48, "mulaugmentedassign": 48, "divaugmentedassign": 48, "modaugmentedassign": 48, "codeblock": [48, 109], "quotedstr": 48, "intbasetyp": 48, "_sizedinttyp": 48, "signedinttyp": 48, "unsignedinttyp": 48, "floatbasetyp": 48, "floattyp": 48, "complexbasetyp": 48, "complextyp": 48, "pointer": [48, 250, 251], "functionprototyp": 48, "functiondefinit": [48, 109], "stream": [48, 68, 218, 229, 255], "functioncal": 48, "breaktoken": 48, "continuetoken": 48, "nonetoken": 48, "float32": [48, 108, 109, 256], "codeprint": 48, "complex_": 48, "bool_": 48, "intc": [48, 109], "intp": 48, "unsign": [48, 72, 229], "int8": 48, "int16": 48, "int32": 48, "int64": [48, 237], "uint8": 48, "uint16": 48, "uint32": 48, "uint64": 48, "x86": 48, "amd64": 48, "complex64": 48, "complex128": 48, "newton": [48, 75, 142, 185, 189, 210, 214], "aug_assign": 48, "tol": [48, 67, 208], "val": [48, 67, 79, 208, 212, 256], "whl": 48, "py_str": 48, "inf": [48, 59, 67, 103, 208, 213, 225, 233, 237], "exec": [48, 67, 95, 256], "1121416371": 48, "909672693737": 48, "867263818209": 48, "865477135298": 48, "865474033111": 48, "1g": 48, "3e": 48, "2003": [48, 202, 211, 217, 230], "source_format": [48, 217], "op": [48, 67, 103, 171, 182, 196, 200, 226, 255, 256], "parametr": [48, 75, 76, 80, 103, 203, 230, 236, 262, 265, 272], "volatil": 48, "binop": 48, "exit": [48, 107, 248], "premad": 48, "break_": 48, "lift": [48, 63, 73, 75, 92, 208, 210, 213], "left_hand_sid": 48, "topological_sort": [48, 255], "postprocess": [48, 213, 218, 229], "topolog": [48, 67, 69, 206, 255], "continue_": 48, "untyp": 48, "compliant": 48, "elem": [48, 58, 204], "ijk": [48, 242], "stride": [48, 242], "lmn": 48, "cast_nocheck": 48, "nbit": 48, "storag": [48, 67, 103, 176, 202, 210], "nmant": 48, "mantissa": 48, "nexp": 48, "half_precis": 48, "f16": 48, "65504": 48, "tini": [48, 67, 208], "ep": [48, 58, 66, 208, 212, 213], "decimal_dig": 48, "cast_check": 48, "1e5": 48, "cast": [48, 100, 286], "subnorm": [48, 58], "idempot": 48, "loos": [48, 67], "overflow": [48, 252], "max_expon": 48, "min_expon": 48, "for_i": 48, "for_ji": 48, "for_kji": 48, "function_arg": [48, 248], "fcall": 48, "baz": 48, "return_typ": 48, "fp": [48, 49, 67, 213, 219], "from_functionprototyp": 48, "prototyp": [48, 108, 250], "value_const": 48, "pointer_const": 48, "attr_param": 48, "looking_for": 48, "as_declar": 48, "formatstr": 48, "5g": 48, "throw": [48, 103, 109, 132, 206, 212, 230, 236], "runtimeerror_": 48, "runtime_error": 48, "stdout": [48, 50, 248], "stderr": 48, "oppos": [48, 256, 284], "_field": 48, "_construct_": 48, "not_in_arg": 48, "float16": 48, "inttyp": 48, "super": [48, 75, 208, 217, 262, 264], "from_expr": [48, 213], "v6": 48, "123456": [48, 67, 107], "v10": 48, "67894": 48, "boost_mp50": 48, "boost": 48, "multiprecis": [48, 207], "cpp_dec_float_50": 48, "r39": 48, "rtol": 48, "atol": 48, "precision_target": 48, "v18": 48, "123456789012345646": 48, "123456789012345649": 48, "Will": [48, 103, 109, 212, 217, 248], "decl1": 48, "decl2": 48, "alt": [48, 212], "secondarili": [48, 213], "mathcin": 48, "cbrt": [48, 73, 217], "minu": [48, 66, 67, 198, 206, 210, 217, 269], "0e": [48, 67], "fma": [48, 217], "hypot": [48, 217], "hypotenus": [48, 83], "log10": [48, 217], "ten": [48, 108], "plu": [48, 66, 103, 109, 149, 162, 213, 217, 227, 255, 256], "famili": [48, 51, 85, 94, 205], "commaoper": 48, "goto": 48, "preincrement": 48, "postdecr": 48, "decrement": [48, 252], "postincr": 48, "increment": [48, 58, 59, 60, 66, 83, 107, 237], "predecr": 48, "alignof": 48, "sizeof": 48, "struct": [48, 202], "dsign": 48, "arrayconstructor": 48, "95": [48, 65, 107, 210, 217, 233, 235, 250], "do1": 48, "1d0": 48, "do2": 48, "extent": 48, "intent_out": 48, "dim": [48, 69, 82, 103, 108, 184, 190, 217, 240, 243, 277], "arr": 48, "fortranreturn": 48, "aid": [48, 134], "implieddoloop": 48, "idl": 48, "signallib": 48, "prog": [48, 161], "myprogram": 48, "mysub": 48, "subroutinecal": 48, "inout": 48, "bind_c": 48, "sum_": [48, 66, 67, 68, 72, 75, 92, 94, 98, 100, 107, 202, 213, 214, 219, 220, 227, 233, 237], "cmplx": [48, 217], "intent_in": 48, "isign": 48, "lbound": 48, "lb": [48, 89, 252], "literal_dp": 48, "num": [48, 58, 67, 107, 118, 208, 229, 233, 252, 258], "literal_sp": 48, "reshap": [48, 98, 132, 149, 238, 244, 255], "arrayexpr": 48, "shp": 48, "metric": [48, 59, 63, 69, 119, 229, 233, 236, 243], "snr": 48, "convolution2d": 48, "use_renam": 48, "ren": 48, "thingi": 48, "newtons_method": 48, "itermax": 48, "counter": [48, 67, 73, 79, 98, 111, 112, 114], "delta_fn": 48, "handle_nan": 48, "raphson": 48, "criterion": [48, 58, 148, 205, 210], "hallei": 48, "occurr": [48, 49, 67, 107, 132, 192, 229, 237], "netwon": 48, "algo": [48, 59], "r40": 48, "27s_method": 48, "newtons_method_funct": 48, "param": [48, 69, 103, 230], "render_as_modul": 48, "py_mod": 48, "865474033102": 48, "render_as_source_fil": 48, "printer_set": 48, "fcodeprint": [48, 217], "fpgroup": [49, 58], "studi": [49, 57, 66, 69, 103, 201, 204, 210, 213, 230, 237], "combinator": [49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 72, 100, 107, 212, 219, 238, 243, 252, 255, 274, 288, 294], "free_group": [49, 57, 58], "vfree_group": 49, "xfree_group": 49, "fp_group": [49, 58], "coset_enumeration_r": 49, "fall": [49, 66, 67, 72, 95, 118, 197, 212, 217, 230, 234, 237], "famou": [49, 75, 94, 107, 230], "langl": [49, 58, 161, 202], "rangl": [49, 58, 161, 179, 202], "gen0": 49, "gen1": 49, "gen_": 49, "freegroup": 49, "x_2": [49, 57, 72, 89, 177, 205, 210, 213, 219, 230, 236], "x_3": [49, 57, 89, 177], "s_1": [49, 255], "r_1": [49, 204, 214], "s_2": 49, "r_2": 49, "s_k": 49, "r_k": [49, 175], "s_i": [49, 63, 94, 96], "r_i": [49, 214], "reduct": [49, 103, 128, 206, 210, 212, 230], "ho05": [49, 57], "cdhw73": 49, "hav91": 49, "strategi": [49, 67, 94, 210, 211, 224, 227, 229, 234], "coset_enumeration_c": 49, "coset_enumer": 49, "relator_bas": 49, "coset_table_bas": 49, "coset_table_max_limit": 49, "4096000": 49, "safeti": [49, 59, 101], "max_coset": 49, "cox": [49, 211, 213], "c_r": [49, 227], "max_stack_s": 49, "500": [49, 71, 129], "deduction_stack": 49, "stack": [49, 84, 98, 131, 149, 206, 212, 217, 246, 252, 290], "exce": [49, 107, 243, 256], "modest": 49, "low_index_subgroup": 49, "conjugaci": [49, 50, 58], "coset_t": [49, 58], "reidemeister_present": 49, "p1": [49, 58, 59, 63, 66, 77, 79, 80, 81, 82, 83, 110, 118, 123, 126, 129, 136, 149, 151, 196, 203, 207, 208, 210, 214, 226, 237, 238], "john": [49, 58, 75, 213, 230, 233], "cannon": 49, "lucien": 49, "dimino": [49, 58], "georg": [49, 204, 206, 233, 255], "hava": 49, "jane": 49, "watson": [49, 229], "comp": [49, 233], "463": [49, 148], "490": [49, 59], "1973": [49, 68, 199], "derek": [49, 57], "holt": [49, 57, 58, 65], "chapman": [49, 57], "hall": [49, 57, 237], "crc": [49, 57, 59], "2005": [49, 57, 94, 107, 213], "xvi": [49, 57], "514": [49, 57, 211], "symposium": [49, 92, 210, 211, 227], "issac": [49, 94, 211, 235], "bonn": 49, "1991": [49, 211], "191": [49, 236], "199": 49, "acm": [49, 66, 92, 94, 206, 208, 211, 227, 229, 233, 235], "transit": [50, 58, 149, 210, 237], "subgroup": [50, 58, 59, 63, 65, 96, 107], "permutationgroup": [50, 52, 55, 57, 58, 59, 64, 65, 212], "s_n": [50, 66, 213, 255], "enum": [50, 212, 254, 281], "get_perm_group": [50, 212], "r41": 50, "cohen": [50, 104, 206, 211, 212], "s6transitivesubgroup": [50, 208], "qualnam": 50, "boundari": [50, 78, 80, 110, 111, 196, 214, 225, 233, 237], "s6": 50, "s5transitivesubgroup": 50, "s5": [50, 58], "s4transitivesubgroup": [50, 212, 213], "s4": [50, 59, 118], "s3transitivesubgroup": 50, "s3": [50, 58, 66, 118, 220, 230], "s2transitivesubgroup": [50, 212], "s1transitivesubgroup": [50, 212], "four_group": 50, "klein": [50, 59], "m20": 50, "metacycl": 50, "323": [50, 75, 107], "s3_in_s6": 50, "prism": 50, "a4_in_s6": 50, "a4": [50, 63, 67, 96, 149, 294], "find_transitive_subgroups_of_s6": 50, "s4m": 50, "s4p": 50, "a4xc2": 50, "s4xc2": 50, "g18": 50, "isomorph": [50, 58, 61, 204, 207, 210, 212], "semidirect": 50, "g36m": 50, "g36": 50, "g36p": 50, "c4": [50, 96, 98, 100, 233], "g72": 50, "d4": [50, 96, 213, 237], "325": 50, "psl2f5": 50, "psl_2": 50, "_5": [50, 204], "a_5": 50, "pgl2f5": 50, "pgl_2": 50, "s_5": 50, "print_report": 50, "s_6": 50, "dihedr": [50, 55, 58, 59], "d_6": 50, "s_4": 50, "absenc": [50, 63, 97], "a_4": 50, "engag": 50, "eleg": [50, 214, 216], "a_6": 50, "g_": [50, 58, 65, 66, 75, 92, 103, 230], "c_3": [50, 92, 233], "rtime": 50, "c_4": [50, 92], "d_4": 50, "r43": 50, "projective_linear_group": 50, "exceptional_isomorph": 50, "r44": [50, 51], "automorphisms_of_the_symmetric_and_alternating_group": 50, "pgl": 50, "282": 50, "graycod": 51, "kw_arg": [51, 61, 182, 242, 243], "hamiltonian": [51, 173], "edg": [51, 60, 61, 96, 206, 217, 236, 255, 293], "vertex": [51, 61, 78, 83, 94, 206], "000": [51, 71, 94, 97, 176, 255], "110": [51, 97, 233, 235, 249, 255], "010": [51, 97, 255], "011": [51, 97, 176, 255], "111": [51, 70, 77, 97, 103, 107, 255], "101": [51, 75, 97, 107, 176, 255], "001": [51, 71, 97, 151, 255], "statist": [51, 68, 75, 237, 248, 288], "generate_grai": 51, "0000": 51, "0001": [51, 71], "0011": [51, 62], "0010": 51, "0110": 51, "0111": [51, 176], "0101": [51, 176], "0100": 51, "1100": 51, "1101": 51, "1111": 51, "1110": 51, "1010": 51, "1011": 51, "1001": 51, "nijenhui": 51, "wilf": [51, 66, 235], "1978": [51, 58, 187, 211], "r45": 51, "knuth": [51, 59, 252], "2011": [51, 59, 92, 103, 107, 199, 226], "art": [51, 59, 204, 217, 219, 252], "vol": [51, 59, 68, 72, 75, 92, 103, 119, 128, 212, 213, 227, 252, 255], "addison": [51, 59, 107, 211], "weslei": [51, 59, 107, 211], "r46": 51, "brgc": 51, "6th": [51, 107], "unrank": [51, 56, 58, 59, 61], "r47": 51, "archiv": [51, 59, 68, 72, 75, 84, 94, 107, 148, 206, 229, 230, 237, 255, 290], "20200224064753": 51, "statweb": 51, "stanford": 51, "susan": 51, "s208": 51, "node12": 51, "tail": [51, 66, 67, 208, 237], "00010": 51, "random_bitstr": 51, "bitlist": [51, 62], "gray_to_bin": 51, "endian": 51, "bin_to_grai": 51, "get_subset_from_bitstr": 51, "bitstr": 51, "graycode_subset": 51, "group_construct": 52, "directproduct": [52, 55], "__mul__": [52, 58, 98, 103, 208, 212], "shift": [52, 58, 59, 61, 68, 75, 78, 82, 84, 97, 203, 208, 210, 213, 220, 227, 235, 237], "gn": 52, "named_group": [52, 55, 57, 58, 64, 65], "cyclicgroup": [52, 55, 58], "perm_group": [52, 57, 58, 59, 64, 65], "group_numb": 53, "is_nilpotent_numb": 53, "r48": 53, "randprim": [53, 107], "pakianathan": 53, "shankar": 53, "monthli": [53, 68, 103], "107": [53, 211], "631": 53, "634": 53, "is_abelian_numb": 53, "r49": 53, "is_cyclic_numb": 53, "r50": 53, "polyhedron": [54, 58, 94, 255, 274], "prufer": [54, 274], "grai": [54, 62, 95, 151, 197, 203, 274], "galoi": [54, 207, 208, 210, 213, 274], "nilpot": [54, 58, 103, 274], "abelian": [54, 55, 58, 96, 187, 204, 274], "cyclic": [54, 55, 58, 59, 60, 70, 98, 107, 243, 255, 274], "polycycl": [54, 58, 274], "symmetricgroup": [55, 57, 58, 64, 65], "transposit": [55, 58, 59, 68, 98, 100, 239], "is_group": [55, 58], "generate_schreier_sim": [55, 58], "af": [55, 58, 64, 149], "dihedralgroup": [55, 58, 65], "alternatinggroup": [55, 58, 64], "r51": 55, "symmetric_group": 55, "generators_and_rel": 55, "d_n": [55, 96, 213], "gon": 55, "bab": 55, "generate_dimino": [55, 58], "perm": [55, 57, 58, 59, 60, 65, 72, 98, 100, 103, 238], "cyclic_form": [55, 59, 60], "r52": 55, "dihedral_group": [55, 58], "ex": [55, 94, 119, 131, 207, 212, 213, 243, 251], "r53": 55, "armstrong": 55, "abeliangroup": [55, 58], "cyclic_ord": 55, "r54": 55, "groupprop": [55, 58], "subwiki": [55, 58], "structure_theorem_for_finitely_generated_abelian_group": 55, "multiset_partit": [56, 72, 92, 252, 255], "rg": 56, "growth": [56, 107, 210, 284], "from_rg": 56, "abcd": [56, 60, 182, 239, 255, 258], "cbead": 56, "sort_kei": [56, 67, 233], "ti": [56, 59, 67, 107], "integerpartit": [56, 255], "summand": [56, 212], "r55": 56, "partition_": [56, 72], "28number_theori": 56, "as_dict": [56, 207, 213], "as_ferr": 56, "char": 56, "ferrer": 56, "next_lex": [56, 59], "lexic": [56, 162, 255], "prev_lex": 56, "random_integer_partit": 56, "85": [56, 71, 72, 103, 107, 134, 180, 202, 237], "rgs_gener": 56, "37": [56, 68, 73, 77, 103, 107, 111, 202, 217, 230], "52": [56, 72, 107, 110, 111, 202, 216, 230, 233, 255, 284], "151": 56, "203": [56, 72], "rgs_enum": 56, "rgs_unrank": 56, "rgs_rank": 56, "pcgroup": 57, "pcg": 57, "pc_seri": [57, 58], "polycyl": 57, "pc_present": 57, "pc_sequenc": [57, 58], "miss": [57, 58, 84, 206, 217, 235, 250, 294], "adjac": [57, 58, 59, 67, 72, 118, 154, 206, 255], "der": [57, 58], "relative_ord": [57, 58], "polycyclic_group": [57, 58], "gen": [57, 58, 63, 64, 65, 67, 103, 204, 207, 208, 210, 212, 213, 214, 215, 223, 229, 232, 235], "is_ident": [57, 59, 67], "poss": [57, 134, 201], "pc_group": 57, "a_j": [57, 75, 92, 187, 210, 219, 227], "notin": [57, 92, 225], "_order": 57, "minimal_uncollected_subword": 57, "subword_index": 57, "i_1": [57, 182, 213, 238], "a_1": [57, 58, 68, 75, 89, 92, 98, 103, 119, 182, 187, 205, 210, 227, 230, 233, 237, 294], "i_r": 57, "a_r": [57, 227], "i_2": [57, 182, 213], "s_": [57, 63, 132, 210], "s_j": [57, 96, 210], "x3": [57, 67, 72, 207, 233, 237], "collected_word": 57, "free_to_perm": 57, "pictur": [57, 217], "x_3x_2": 57, "x_3x_1": 57, "x_2x_1": 57, "x_3x_0": 57, "x_2x_0": 57, "x_1x_0": 57, "varii": 57, "derived_seri": [57, 58], "pc_resent": 57, "k_arrai": 57, "array_form": [57, 59, 60, 239], "v_arrai": 57, "e_1": [57, 103, 204, 210, 213], "e_n": [57, 72, 96, 103, 158, 204, 213], "exponent_vector": 57, "leading_expon": 57, "dup": [58, 208], "pn": [58, 136, 146], "motion": [58, 122, 126, 127, 128, 131, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 146, 149, 150, 196, 197, 200, 201, 237], "front": [58, 67, 134, 135, 151, 181, 208, 210, 213, 217, 229, 294], "face": [58, 60, 80, 94, 132, 210, 214, 217, 230, 272, 290], "rubik": 58, "3674160": 58, "pgroup": [58, 60], "p10": 58, "make_perm": 58, "r56": 58, "eick": [58, 65], "brien": [58, 65], "r57": 58, "seress": 58, "r58": 58, "schreier_vector": 58, "r59": 58, "nielsen_transform": 58, "product_replacement_algorithm": 58, "r60": 58, "frank": [58, 59, 103, 255], "celler": 58, "charl": 58, "leedham": 58, "scott": 58, "murrai": [58, 206], "alic": [58, 68], "niemey": 58, "r61": 58, "block_": 58, "28permutation_group_theori": 58, "r62": 58, "algorithmist": 58, "union_find": 58, "r63": 58, "multiply_transitive_group": 58, "r64": 58, "center_": 58, "28group_theori": 58, "centralizer_and_norm": 58, "derived_subgroup": 58, "nilpotent_group": 58, "colost": 58, "hulpk": 58, "cgt": 58, "cgtnote": 58, "__contains__": 58, "__weakref__": [58, 98], "weak": [58, 67, 98, 127, 207, 210], "_coset_repres": 58, "hg": 58, "transvers": [58, 63, 65, 112, 155, 156], "coset_transvers": 58, "_distinct_primes_lemma": 58, "_element": 58, "_eval_is_alt_sym_monte_carlo": 58, "05": [58, 89, 116, 199, 202], "mont": 58, "carlo": 58, "n_ep": 58, "_check_cycles_alt_sym": [58, 65], "_eval_is_alt_sym_na": 58, "only_sym": 58, "only_alt": 58, "_p_elements_group": 58, "_random_pr_init": 58, "_random_prec_n": 58, "modif": [58, 73, 103, 236, 237, 252], "69": [58, 103, 206, 235, 252], "_random_gen": 58, "accumul": [58, 248, 252], "random_pr": 58, "chosen": [58, 59, 68, 69, 80, 81, 103, 107, 110, 150, 184, 186, 187, 203, 204, 206, 208, 210, 212, 217, 224, 227, 233, 237, 248, 262], "gh": [58, 205, 236, 243], "eventu": [58, 75, 94, 203, 204, 224, 250, 255], "_sylow_alt_sym": 58, "sylow": 58, "p_1": [58, 63, 68, 85, 107, 200, 227, 230], "p_2": [58, 68, 85, 107, 200, 227], "p_p": 58, "sylow_subgroup": 58, "is_alt_sym": [58, 65], "_union_find_merg": 58, "not_rep": 58, "atkinson": 58, "83": [58, 216], "87": [58, 73, 103, 107], "minimal_block": 58, "_union_find_rep": 58, "r65": 58, "r71": 58, "compress": [58, 103, 106, 114], "r67": 58, "r73": [58, 59], "_verifi": 58, "_h": [58, 236], "gens_k": 58, "rels_k": 58, "gens_h": 58, "inject": [58, 67, 204, 208, 213, 290], "homomorph": 58, "rels_h": 58, "strong_present": 58, "abelian_invari": 58, "t_1": [58, 72, 230], "t_2": [58, 72, 230], "t_r": [58, 147, 243], "542": 58, "adopt": [58, 243], "schreier": [58, 63, 65], "sim": [58, 63, 65, 92], "b_1": [58, 65, 75, 89, 92, 204, 227, 230, 233, 294], "b_2": [58, 65, 75, 89, 227, 233], "dot": [58, 59, 63, 65, 68, 80, 82, 89, 98, 103, 118, 127, 129, 131, 134, 135, 136, 139, 140, 141, 144, 145, 146, 149, 166, 191, 192, 194, 197, 200, 201, 202, 204, 205, 210, 213, 217, 236, 237, 255, 262, 266, 268, 269], "b_k": [58, 65, 68, 72, 75, 219, 220], "strong": [58, 63, 64, 65, 107, 108], "89": [58, 65, 94], "55": [58, 70, 72, 103, 202, 203, 213, 230], "57": [58, 103, 107, 237], "coset": [58, 63, 212], "strong_gen": [58, 64, 65], "basic_transvers": [58, 65], "basic_orbit": [58, 65], "basic_stabil": 58, "baseswap": 58, "po": [58, 92, 97, 98, 129, 147, 149, 208, 235], "strong_gens_distr": [58, 65], "swap": [58, 59, 60, 98, 103, 162, 166, 175, 206, 237, 255], "orbit": [58, 65, 182, 183, 185], "b_": [58, 63, 65, 67, 72, 75, 92, 100, 118, 219, 227, 230, 238, 239], "b_i": [58, 63, 65, 92, 204, 227], "la": [58, 149, 187], "vega": 58, "testutil": [58, 64, 65], "_verify_bsg": [58, 64, 65], "schreier_sim": [58, 64, 65], "bsg": [58, 63, 65, 243], "102": [58, 103], "98": [58, 68, 148, 213, 233], "pseudocod": 58, "beta_": 58, "foral": [58, 66, 69, 187], "zg": 58, "gz": 58, "c_g": 58, "sg": [58, 237, 243], "is_subgroup": 58, "subgroup_search": 58, "hgh": 58, "closur": [58, 64, 90, 162, 208, 212, 225], "composition_seri": 58, "h_0": [58, 63], "h_1": [58, 63, 236], "h_2": [58, 236], "1024": [58, 217, 237], "512": [58, 75], "128": [58, 72, 75, 77, 107, 211, 217], "243": [58, 75, 235], "81": [58, 72, 77, 98, 103, 107, 132, 134, 202, 216], "conjugacy_class": 58, "xax": 58, "s_3": 58, "feasibl": [58, 118], "resiz": [58, 59, 98, 100], "coset_factor": 58, "factor_index": 58, "_basic_orbit": 58, "u1": [58, 107, 132, 134, 135, 136, 137, 139, 140, 144, 146, 149, 192, 194, 196, 197, 200, 233], "u2": [58, 106, 107, 132, 134, 135, 136, 137, 139, 140, 144, 149, 192, 196, 200, 233], "_strip": [58, 65], "coset_rank": 58, "lexicograph": [58, 59, 62, 63, 67, 210, 213, 255], "coset_unrank": 58, "standardis": [58, 207], "subsect": [58, 269], "compris": [58, 68, 100, 118, 129, 147, 150, 213, 255], "g_0": [58, 230], "g_1": [58, 213, 224, 230, 233], "g_2": [58, 96, 224, 233], "g_i": [58, 224], "g_k": 58, "tetrahedron": [58, 60], "r69": 58, "axiom": [58, 204], "doy": 58, "sc": [58, 94], "thesi": [58, 67, 224, 262], "generator_product": 58, "sn": [58, 59, 66, 89], "is_abelian": 58, "_random_prec": 58, "82": [58, 94, 103, 237], "proport": [58, 68, 224, 256], "226": 58, "227": 58, "is_altern": 58, "quicker": [58, 107], "taxonomi": 58, "is_cycl": 58, "p_": [58, 63, 67, 94, 187, 230, 233, 238], "p_i": [58, 63, 107], "equiv": [58, 68, 72, 107, 212, 227, 230], "pmod": [58, 67, 68, 72, 103, 107, 227], "p_j": [58, 63], "r70": 58, "35": [58, 61, 70, 72, 80, 81, 94, 103, 107, 134, 212, 217, 230, 233, 237], "rose": 58, "is_dihedr": 58, "di1": 58, "827273": 58, "di2": 58, "kconrad": [58, 237], "uconn": [58, 237], "blurb": [58, 237], "grouptheori": 58, "di3": 58, "dihedral2": 58, "di4": 58, "is_elementari": 58, "is_nilpot": [58, 103], "lower_central_seri": 58, "is_solv": 58, "is_norm": [58, 180], "gr": 58, "is_perfect": [58, 107], "is_polycycl": 58, "is_primit": [58, 208, 213], "cardin": [58, 59, 62, 204, 225], "badli": 58, "random_stab": 58, "is_symmetr": [58, 98], "is_transit": 58, "is_trivi": 58, "cba": [58, 238, 255], "mainli": [58, 75, 103, 108, 187, 197, 210, 227, 230, 233], "max_div": 58, "siev": [58, 107], "nonempti": [58, 255], "moreov": [58, 68, 92, 198, 204, 205, 210, 218, 267], "congruenc": [58, 67, 107, 227, 230], "p_0": [58, 63, 85, 227, 230], "intransit": 58, "normal_closur": 58, "adjoin": [58, 205], "yx": [58, 192, 201], "73": [58, 66, 67, 80, 107, 233], "74": [58, 72, 107], "orb": 58, "orbit_transvers": 58, "orbit_rep": 58, "send": [58, 67, 68, 73, 107, 204, 233, 235], "79": [58, 59, 111], "pointwise_stabil": 58, "pointwis": [58, 65], "p_k": [58, 107], "p20": 58, "stab": 58, "schreier_sims_increment": [58, 65], "polycyclicgroup": 58, "eliminate_gen": 58, "gen_count": 58, "b1": [58, 63, 75, 107, 110, 111, 123, 132, 149, 192, 208, 217, 227, 230, 233, 268], "b_r": 58, "slp_dict": 58, "93": [58, 211], "schreier_sims_random": [58, 65], "consec_succ": 58, "consec": 58, "_succ": 58, "97": [58, 67, 68, 107, 210], "sift": [58, 65, 255], "amend": 58, "unsuccess": [58, 65], "accordingli": [58, 205, 212], "halt": 58, "signifi": [58, 67, 110, 213, 237], "g_t": 58, "leq": [58, 66, 68, 75, 92, 103, 107, 202, 210, 212, 223, 224, 230, 237], "prop": [58, 212], "init_subgroup": 58, "supergroup": 58, "sought": [58, 107, 167, 177, 206, 229, 235, 236], "prune": 58, "prop_even": 58, "lengthi": 58, "114": [58, 107], "117": [58, 75], "terribl": 58, "crucial": [58, 66, 207], "len1": 58, "len2": 58, "len3": 58, "transitivity_degre": 58, "fold": [58, 67, 73, 217, 224, 229], "a_2": [58, 68, 89, 103, 210, 227, 230, 233, 237, 294], "a_k": [58, 68, 214, 220], "r74": 59, "pretty_print": [59, 95, 129, 131, 134, 135, 139, 140, 141, 143, 144, 145, 147, 150, 192, 194, 196, 197, 200, 201, 217], "understood": [59, 107, 187, 204, 208, 213], "economi": 59, "caution": [59, 67, 73, 217, 229], "indexerror": [59, 103, 213], "autos": [59, 106], "watch": 59, "print_cycl": 59, "econom": [59, 94, 255], "retain": [59, 67, 73, 75, 94, 107, 109, 213, 218, 226, 229], "biject": [59, 61, 68, 98, 204], "full_cyclic_form": 59, "rmul": 59, "unrank_lex": 59, "r78": 59, "zo42": 59, "from_sequ": 59, "a1": [59, 63, 67, 95, 98, 107, 111, 132, 149, 156, 233, 237, 238, 268, 294], "a2": [59, 63, 67, 96, 98, 107, 111, 132, 149, 156, 206, 237, 238, 268, 294], "a3": [59, 63, 67, 96, 98, 149, 268, 294], "perfectli": [59, 66, 67, 68, 210, 213, 216], "skiena": 59, "ma": [59, 66, 137], "1990": [59, 92, 227, 262], "r75": 59, "wendi": 59, "myrvold": 59, "ruskei": [59, 255], "2001": [59, 107, 211], "lett": [59, 103], "septemb": [59, 252], "281": 59, "284": [59, 107], "1016": [59, 103, 255], "s0020": 59, "0190": 59, "01": [59, 67, 71, 132, 176, 211, 229, 255], "00141": 59, "r76": 59, "kreher": 59, "stinson": 59, "1999": [59, 103, 211, 216, 233], "r77": 59, "graham": [59, 72, 73, 107], "patashnik": 59, "foundat": [59, 211, 212], "1994": [59, 210, 211, 213], "php": [59, 107, 230, 237], "oldid": 59, "499948155": 59, "product_and_invers": 59, "r79": 59, "lehmer_cod": 59, "appliedpermut": 59, "magic": [59, 229, 248, 286], "_array_form": 59, "ascent": 59, "ie": [59, 230], "descent": [59, 230], "fg": [59, 69, 233, 236], "gf": [59, 68, 114, 204, 206, 207, 210, 212], "r80": 59, "commutes_with": [59, 243], "cycle_structur": 59, "from_inversion_vector": 59, "get_adjacency_dist": 59, "n_adj": 59, "reev": 59, "colin": 59, "landscap": 59, "annal": 59, "86": [59, 103, 148, 216, 226], "473": 59, "josephu": 59, "get_precedence_matrix": 59, "get_precedence_dist": 59, "get_adjacency_matrix": 59, "get_positional_dist": 59, "inversion_vector": 59, "lesser": [59, 114, 213], "lehmer": 59, "ith": [59, 96, 107, 206, 208, 214, 236, 237], "variat": [59, 67, 210, 224, 233], "r81": 59, "eng": 59, "chula": 59, "prabha": 59, "algo2008": 59, "htm": [59, 75, 94, 230], "is_singleton": 59, "is_odd": 59, "shuffl": [59, 103, 294], "012345": 59, "345": 59, "253": 59, "2531": 59, "25314": 59, "253140": 59, "r82": 59, "flavius_josephu": 59, "r83": 59, "josephus_problem": 59, "r84": 59, "20171008094331": 59, "wou": 59, "burtonl": 59, "trim": [59, 146], "unmov": 59, "mul_inv": 59, "next_nonlex": 59, "nonlex": 59, "rank_nonlex": 59, "unrank_nonlex": 59, "next_trotterjohnson": [59, 255], "trotter": 59, "johnson": [59, 103], "generate_bel": [59, 255], "rank_trotterjohnson": 59, "unrank_trotterjohnson": 59, "_af_par": 59, "pseudo": [59, 103, 107, 208, 210, 213], "inv_perm": 59, "enforc": [59, 134], "rmul_with_af": 59, "ascend": [59, 94, 255], "r85": 59, "transposition_": 59, "flexibl": [59, 67, 131, 132, 149, 200, 203, 207, 236, 284], "cn": [59, 217, 293], "2n": [59, 66, 72, 75, 94, 98, 114, 119, 145, 202, 220, 227], "dn": [59, 237], "polyhedr": 60, "psg": 60, "platon": 60, "solid": [60, 81, 126, 203, 272], "tetrahedr": 60, "octahedr": 60, "icosahedr": 60, "r86": 60, "polyhedralgroup": 60, "polyhedra": 60, "h5": 60, "heinz": 61, "caylei": [61, 98], "r87": 61, "labeledtre": 61, "tree_repr": 61, "prufer_rank": 61, "prev": [61, 67], "prufer_repr": 61, "to_pruf": 61, "778": 61, "779": 61, "777": [61, 70], "1296": 61, "to_tre": 61, "r88": 61, "hamberg": 61, "erlend": 61, "2010": [61, 234, 255], "06": [61, 67, 134, 202, 237], "compact": [61, 67, 115, 127, 149, 180, 197, 213, 217, 235, 252], "next_binari": 62, "prev_binari": 62, "bitlist_from_subset": 62, "subset_from_bitlist": 62, "superset_s": 62, "iterate_binari": 62, "iterate_graycod": 62, "prev_grai": 62, "next_grai": 62, "next_lexicograph": 62, "prev_lexicograph": 62, "rank_binari": 62, "unrank_binari": 62, "rank_grai": 62, "unrank_grai": 62, "rank_lexicograph": 62, "43": [62, 103, 107, 110, 111, 237, 294], "super_set": 62, "subset_indic": 62, "ksubset": 62, "itertool": [62, 255], "tensor_can": [63, 243], "msym": 63, "contravari": [63, 103, 243, 244], "covari": [63, 69, 103, 237, 243, 244], "d0": 63, "base_i": 63, "gens_i": 63, "n_i": [63, 210, 235], "sym_i": 63, "canonicalize_na": 63, "exchang": [63, 68, 103, 202, 206, 255], "anticommut": [63, 169, 171, 181, 182, 243, 279], "canonical_fre": 63, "slot": [63, 166, 238, 242, 243, 289], "tensor_gen": 63, "list_free_indic": 63, "double_coset_can_rep": 63, "reintroduc": 63, "antisymmetr": [63, 69, 98, 182, 243], "d2": [63, 192, 204, 224, 237, 255, 262], "ord": [63, 68, 103], "t_c": 63, "get_symmetric_group_sg": [63, 243], "bsgs_direct_product": 63, "base2a": 63, "gens2a": 63, "t0": 63, "t1": [63, 83, 84, 107, 123, 129, 230, 237], "a_m": [63, 233], "a_n": [63, 68, 75, 92, 96, 187, 205, 210, 212, 220, 230, 233, 294], "_a": [63, 75, 182, 213], "_b": [63, 75, 182], "base_f": 63, "gens_f": 63, "base1": 63, "gens1": 63, "base_a": 63, "gens_a": 63, "sgen": 63, "s_transvers": 63, "butler": [63, 243], "portug": [63, 243], "grow": [63, 67, 92, 103, 107, 207, 210], "observ": [63, 89, 92, 171, 201, 204, 227, 230, 233, 237, 271, 294], "ind": [63, 219, 243], "d3": [63, 224], "a0": [63, 233, 294], "a5": [63, 67], "leftrightarrow": 63, "_af_rmul": 63, "t_": [63, 72], "b0": [63, 75, 208, 227, 233], "d_": [63, 227], "p0": [63, 77, 212, 233], "dbase": 63, "recomput": [63, 213], "d_i": [63, 92, 187], "s_0": 63, "d_0": [63, 68], "b_0": [63, 68, 72, 227, 230, 233], "b_j": [63, 65, 75, 92, 227], "sx": 63, "trace": [63, 98, 100, 119, 149, 210, 217, 237, 238, 239, 241, 255, 290], "h_n": [63, 75, 94, 213, 236], "tab1": 63, "get_transvers": 63, "antisym": 63, "base2": 63, "gens2": 63, "_cmp_perm_list": 64, "ls1": 64, "ls2": 64, "_naive_list_centr": 64, "_verify_centr": 64, "_verify_normal_closur": 64, "_base_ord": 65, "base_ord": 65, "backtrack": 65, "108": [65, 111], "132": [65, 72, 192], "r89": 65, "_distribute_gens_by_bas": 65, "_strong_gens_from_distr": 65, "_orbits_transversals_from_bsg": 65, "_handle_precomputed_bsg": 65, "transversals_onli": 65, "slp": 65, "_remove_gen": 65, "new_gen": 65, "r90": 65, "r91": 65, "recurr": [66, 72, 89, 103, 212, 223, 229, 233, 237, 257], "annihil": [66, 85, 86, 90, 158, 182, 235], "is_hypergeometr": 66, "binomi": [66, 67, 71, 72, 75, 107, 213, 217, 222, 229, 233, 237, 255, 294], "ff": [66, 68, 72, 202, 205, 206, 207, 212, 213], "rise": [66, 72, 75, 202, 229, 233, 237, 266], "hypersimp": [66, 229], "quotient": [66, 67, 70, 73, 107, 204, 205, 207, 210, 213, 227, 229, 233], "dummy_vari": 66, "karr": 66, "exclus": [66, 67, 73, 97, 103, 210, 286], "typeset": [66, 217], "seemingli": [66, 236], "r92": 66, "michael": [66, 211, 216], "april": 66, "1981": [66, 211], "305": 66, "350": [66, 129], "dl": [66, 201, 206, 208, 211, 229], "1145": [66, 206, 208, 211, 229], "322248": 66, "322255": 66, "r93": 66, "sigma_not": 66, "r94": 66, "empty_sum": 66, "euler_maclaurin": [66, 71], "eval_integr": 66, "maclaurin": [66, 71], "endpoint": [66, 67, 71, 80, 198, 225, 269], "28333333333333": 66, "sstr": [66, 197, 217], "full_prec": [66, 217], "26629073187415": 66, "0175000000000000": 66, "soon": [66, 67, 132, 187, 214], "eval_zeta_funct": 66, "is_absolutely_converg": 66, "sequence_term": 66, "is_converg": 66, "r95": 66, "absolute_converg": 66, "analogi": [66, 210], "prod_": [66, 72, 75, 92, 107, 187, 227], "diverg": [66, 75, 151, 193, 262, 265], "dirichlet": [66, 75, 237], "r96": 66, "convergence_test": 66, "reverse_ord": 66, "selector": [66, 98, 229, 255], "s0": [66, 90, 92, 154], "expr_with_intlimit": [66, 94], "exprwithintlimit": [66, 94], "reorder_limit": 66, "r97": 66, "walli": 66, "w2": [66, 156], "w2e": 66, "risingfactori": [66, 72, 75, 217, 219], "combsimp": [66, 67, 72, 229], "pe": 66, "gammasimp": [66, 67, 229], "r98": 66, "r99": 66, "capital_pi_not": 66, "r100": 66, "empty_product": 66, "r101": 66, "infinite_product": 66, "r102": 66, "expr_with_limit": [66, 94], "exprwithlimit": [66, 94], "change_index": 66, "trafo": 66, "newvar": 66, "mapsto": [66, 92, 98, 212], "p3": [66, 77, 79, 80, 82, 83, 118, 129, 203, 207, 226, 237], "has_empty_sequ": [66, 94], "has_reversed_limit": [66, 94], "has_finite_limit": [66, 94], "____": [66, 71, 94, 154, 205, 218, 237, 255, 295], "___": [66, 71, 94, 95, 103, 205, 229, 237, 242, 255, 293], "rubric": [66, 67], "_____": [66, 237], "gosper": 66, "gosper_norm": 66, "monic": [66, 75, 204, 205, 208, 210, 212, 213, 216], "gcd": [66, 67, 68, 103, 107, 178, 206, 207, 208, 211, 212, 213, 217, 229, 230], "gosper_term": 66, "f_k": [66, 127, 144, 210], "g_n": [66, 72, 213], "f_n": [66, 72, 75, 204, 210, 213, 233], "gosper_sum": 66, "r103": 66, "marko": 66, "petkovsek": [66, 235], "herbert": 66, "doron": 66, "zeilberg": [66, 235], "ak": [66, 219], "peter": [66, 72, 75, 107, 148, 199, 206, 213, 255], "ltd": 66, "welleslei": 66, "usa": [66, 211], "1997": [66, 92, 107, 211, 227], "convert_xor": [67, 109], "09": [67, 116, 202], "xor": [67, 70, 97, 109, 217, 286], "sympifyerror": 67, "coerc": [67, 146, 210], "cooper": 67, "shouldn": [67, 214], "unsanit": [67, 256, 283], "bitcount": 67, "improperli": 67, "unbound": [67, 242], "23903": 67, "fallback": [67, 95, 182, 197, 207, 217, 235], "ast": [67, 217], "mylist1": 67, "mylist": 67, "mylist2": 67, "xxx": [67, 94, 103, 255, 257], "autosimplif": [67, 226, 229], "kern": 67, "r106": 67, "7649": 67, "r105": 67, "r109": 67, "r107": 67, "r108": 67, "r110": 67, "r111": 67, "r112": 67, "r104": 67, "negativeinfin": [67, 217], "complexinfin": [67, 118], "_assumptions_orig": 67, "recreat": [67, 126], "isfinit": 67, "__cacheit": 67, "maxsiz": 67, "cacheit": 67, "sympy_use_cach": 67, "_arg": [67, 73], "as_mut": [67, 99, 100], "as_content_primit": [67, 103, 205, 213], "stub": 67, "as_dummi": [67, 94], "_0": [67, 72, 92, 98, 103, 213, 256], "_r": [67, 182, 227, 236], "bound_symbol": [67, 94], "typeinfo": 67, "truli": [67, 75, 187], "piec": [67, 71, 227, 250], "numbersymbol": [67, 217], "scan": [67, 206], "appliedundef": 67, "canonical_vari": 67, "class_kei": 67, "sorted_class": 67, "eg": [67, 132, 189, 236], "fromit": 67, "has_fre": 67, "has_xfre": 67, "exp_polar": [67, 73, 75, 227], "dif": 67, "_prec": 67, "r_": [67, 120, 183, 214], "repl_dict": 67, "rcall": [67, 69], "simul": [67, 132, 149, 216], "abus": [67, 243], "succe": [67, 92, 97, 107, 172, 212, 235], "newtyp": 67, "intuit": [67, 147, 187, 233], "is_mul": 67, "is_add": [67, 236], "mysin": [67, 256, 283], "_eval_rewrite_as_": 67, "_eval_rewrite_as_co": 67, "tie": [67, 255], "delai": [67, 116, 146, 226, 248, 284], "unsort": [67, 122, 191], "333333333333333333333": 67, "333333333333333314830": 67, "wildcard": [67, 229], "evalfmixin": 67, "registri": 67, "metaprogram": 67, "mostli": [67, 73, 94, 103, 149, 177, 200, 204, 206, 216, 217, 227, 235, 293], "__truediv__": [67, 208], "metaclass": 67, "class_nam": 67, "mysingleton": 67, "_eval_is_g": 67, "_eval_is_eq": 67, "args_cnc": 67, "cset": 67, "split_1": 67, "suppress": [67, 109, 246, 253], "as_coeff_add": 67, "dep": [67, 233], "as_coeff_expon": 67, "as_coeffici": 67, "zz": [67, 72, 89, 90, 94, 100, 103, 104, 107, 129, 192, 201, 204, 205, 206, 207, 210, 212, 213, 214, 215, 232], "coeff_monomi": [67, 213], "polytool": [67, 206, 213, 236], "as_coefficients_dict": 67, "inquiri": 67, "expand_mul": [67, 92], "121": [67, 72, 107, 118, 192, 235], "84": [67, 71, 107], "separatevar": [67, 229, 233], "n3": [67, 132], "logx": [67, 224], "cdir": 67, "_eval_as_leading_term": 67, "as_numer_denom": [67, 235], "as_ordered_factor": 67, "as_ordered_term": 67, "as_powers_dict": 67, "lost": 67, "as_real_imag": [67, 73, 98, 218], "as_term": 67, "aseri": 67, "hir": 67, "asymptot": [67, 92, 118, 284], "hierarch": 67, "normalis": [67, 219], "induc": [67, 98, 212, 226, 255], "gruntz": [67, 219], "majorli": 67, "mrv": [67, 224], "overal": [67, 189, 203, 235], "till": [67, 110, 111, 132, 233], "r113": 67, "dominik": [67, 219], "proc": [67, 208, 235], "1993": [67, 211], "symp": [67, 208], "239": 67, "244": [67, 210], "r114": 67, "p90": 67, "r115": 67, "asymptotic_expans": 67, "_first": [67, 73], "factor_term": [67, 140, 213, 226, 229], "distribute_order_term": [67, 229], "compute_leading_term": 67, "could_extract_minus_sign": 67, "signsimp": [67, 140, 229], "failing_express": 67, "modulu": [67, 68, 70, 75, 77, 83, 98, 107, 110, 111, 204, 208, 210, 212, 213, 216, 236], "power_bas": [67, 98], "power_exp": [67, 98], "multinomi": [67, 98, 107, 237], "extract_addit": 67, "extract_multipl": 67, "extract_branch_factor": 67, "allow_half": 67, "fourier_seri": [67, 220], "geto": 67, "getn": 67, "mod_invers": [67, 213], "is_algebraic_expr": 67, "is_rational_funct": 67, "r116": 67, "algebraic_express": 67, "is_const": 67, "constanc": 67, "failing_numb": 67, "is_meromorph": 67, "meromorph": [67, 75], "multivalu": [67, 73], "cut": [67, 72, 73, 75, 83, 92, 204, 227, 252, 258, 294], "hit": [67, 289], "is_polynomi": 67, "rational_funct": 67, "leadterm": 67, "xlim": [67, 203], "lseri": 67, "exaxmpl": 67, "nseri": 67, "_eval_nseri": 67, "innermost": 67, "disadvantag": 67, "met": [67, 114, 230, 236, 251, 294], "poleerror": 67, "nsimplifi": [67, 71, 229], "radsimp": [67, 229], "removeo": [67, 149, 217, 284], "chop": [67, 71, 75, 98, 103, 235, 283], "lazi": [67, 100, 213], "smooth": [67, 71, 107, 219], "taylor_term": [67, 73], "previous_term": [67, 73], "wildfunct": 67, "dummy_index": 67, "_dummy_10": 67, "contigu": [67, 227, 250], "x4": [67, 72, 207], "x5": [67, 72, 207], "x6": [67, 207], "x7": [67, 207], "x8": [67, 207], "x9": [67, 207], "x50": 67, "x51": 67, "y3": [67, 207], "y4": 67, "xa": [67, 205, 210], "xb": [67, 258], "xc": [67, 181, 258], "disambigu": 67, "x01": 67, "x02": 67, "x11": 67, "x12": 67, "escap": [67, 109, 203, 217, 258], "undefinedfunct": [67, 194, 217, 249, 256], "f821": [67, 251], "cofactor": [67, 103, 206, 208, 210, 213], "lcm": [67, 107, 208, 210, 213, 217], "50000000000000": [67, 71], "100000000000000000000": 67, "1e20": 67, "00000000000000e": 67, "23456789123456789": 67, "23456789123457": 67, "00100": 67, "sent": [67, 94, 229, 235], "789": [67, 107], "123_456": 67, "123456789": 67, "12e": 67, "012": 67, "60e2": 67, "6000": 67, "600e": 67, "125": [67, 71, 94, 107, 208, 223, 230], "099609": 67, "12500": 67, "12500000000000000000": 67, "5404319552844595": 67, "54": [67, 103, 111, 210, 216, 255], "29999999999999998890": 67, "30000000000000000000": 67, "_mpf_": [67, 207], "4915": 67, "70": [67, 68, 84, 94, 103, 107, 216, 217, 230, 237, 258], "307": 67, "mpf": [67, 207, 208], "is_float": 67, "unprejud": 67, "3602879701896397": 67, "18014398509481984": [67, 229], "limit_denomin": 67, "320": 67, "75": [67, 70, 206, 237, 262], "use_tri": [67, 107], "use_rho": [67, 107], "use_pm1": [67, 107], "factorint": [67, 107, 212, 213, 252], "trial": [67, 107, 210, 222, 226, 233, 237], "max_denomin": 67, "1000000": [67, 107], "141592653589793": 67, "311": [67, 107], "discard": [67, 212, 217, 236], "99999999999999999999": 67, "algebraicnumb": [67, 208, 212, 216], "hookrightarrow": 67, "minpoli": [67, 207, 208, 212], "dmp": [67, 204, 208, 213], "anp": [67, 207, 208, 212, 213], "to_list": [67, 206, 208], "minpoly_of_el": 67, "414213562": 67, "scratch": [67, 187], "6x": [67, 210], "to_number_field": [67, 212], "to_root": 67, "primitive_el": [67, 207, 208, 212], "knew": [67, 294], "golden": [67, 71, 107], "5th": [67, 149, 210, 212], "cyclotom": [67, 208, 210, 211, 212, 213], "cyclotomic_poli": [67, 212, 213], "61803398874989": 67, "2i": 67, "a6": 67, "a6_wrong": 67, "309016994374947": 67, "951056516295154": 67, "field_el": 67, "is_alias": 67, "is_primitive_el": 67, "native_coeff": 67, "to_algebraic_integ": 67, "to_primitive_el": 67, "Its": [67, 73, 83, 149, 180, 206, 210, 217, 225], "a_prim": 67, "number_cl": 67, "realnumb": 67, "igcd": [67, 107, 205], "greatest": [67, 72, 77, 107, 205, 207, 208, 210, 211, 213, 216], "euclid": [67, 210, 211], "r117": 67, "euclidean_algorithm": 67, "ilcm": [67, 107], "seterr": 67, "r118": 67, "r119": 67, "1_": 67, "28number": 67, "negativeon": [67, 73, 289], "r120": 67, "88": [67, 103, 107], "921_": 67, "r121": 67, "one_half": 67, "holder": 67, "ieee": [67, 68], "754": 67, "r122": 67, "affin": [67, 68, 82, 204], "compactif": 67, "r123": 67, "tild": [67, 73, 238], "exp1": [67, 217], "718281828": 67, "napier": 67, "r124": 67, "e_": [67, 72, 103], "28mathematical_const": 67, "r125": 67, "imaginary_unit": [67, 217], "141592654": 67, "circumfer": [67, 77], "diamet": [67, 77], "area": [67, 77, 79, 83, 84, 110, 111, 131], "is_irr": 67, "r126": 67, "mascheroni": [67, 75], "5772157": 67, "recur": 67, "harmon": [67, 72, 107, 120, 161, 202, 217, 279], "lim": [67, 224, 284], "limits_": [67, 202, 219, 288], "ln": [67, 73, 94, 217, 219, 233, 237, 294], "r127": 67, "93mascheroni_const": 67, "catalan": [67, 72, 217], "91596559": 67, "r128": 67, "27s_constant": 67, "goldenratio": [67, 71, 218, 229], "r129": 67, "golden_ratio": 67, "tribonacciconst": 67, "tribonacci": [67, 72], "fibonacci": [67, 71, 72, 107], "predetermin": [67, 248], "8392867552141611326": 67, "r130": 67, "generalizations_of_fibonacci_numb": [67, 72], "tribonacci_numb": [67, 72], "modulo": [67, 68, 72, 104, 107, 178, 204, 206, 207, 208, 210, 212, 213, 214, 216, 217, 220, 229], "r131": 67, "modular_multiplicative_invers": 67, "r132": 67, "extended_euclidean_algorithm": 67, "equal_valu": 67, "verion": 67, "compound": [67, 137, 180], "r133": 67, "20033": 67, "oscil": [67, 279], "conform": [67, 236, 241, 242, 255], "r134": 67, "r135": 67, "zero_to_the_power_of_zero": 67, "r136": 67, "indeterminate_form": 67, "as_base_exp": [67, 73, 74, 255], "expand_power_bas": [67, 229], "isqrt": [67, 107], "lfloor": [67, 73, 208, 236, 237], "rfloor": [67, 73, 208, 236, 237], "integer_nthroot": [67, 73, 107], "floor": [67, 73, 107, 126, 207, 208, 217, 237], "integer_log": 67, "geq": [67, 68, 75, 103, 213, 230, 237, 294], "factor_": [67, 68, 107, 213, 230], "perfect_pow": [67, 107], "infix": 67, "matmul": [67, 100, 206], "as_coef_mul": 67, "undesir": [67, 122, 132, 146, 205, 208, 227], "4596": 67, "5728": 67, "suspect": [67, 107], "5706": 67, "moot": 67, "off": [67, 77, 92, 98, 106, 108, 134, 143, 166, 204, 213, 217, 233, 248, 259, 262, 288], "nb": 67, "sensit": [67, 118, 149, 203, 210, 229, 248], "assocop": 67, "prod": [67, 207, 214, 226], "matadd": [67, 100, 217], "as_coef_add": 67, "extract_leading_ord": 67, "commutative_part": 67, "noncommutative_part": 67, "order_symbol": 67, "subprocess": [67, 217, 248, 249], "dividend": [67, 208], "eager": [67, 256], "61": [67, 68, 72, 83, 103, 107, 213, 219], "712524808": 67, "3744312326": [67, 72], "rop": 67, "validrelationoper": 67, "greaterthan": [67, 217], "lessthan": [67, 217], "strictlessthan": [67, 217, 258], "lt": [67, 213, 217, 258], "my_equ": 67, "my_inequ": 67, "reversedsign": 67, "_eval_eq": 67, "boolalg": [67, 97], "client": [67, 252], "counterpart": [67, 68, 233, 284], "litter": 67, "oddbal": 67, "minor": [67, 77, 103, 206, 217, 248], "caveat": [67, 213, 286], "succinctli": 67, "annoy": 67, "succinct": 67, "r137": 67, "operar": 67, "circuit": [67, 166, 169, 279], "greaterthanobject": 67, "__bool__": 67, "335": 67, "march": 67, "2012": 67, "r138": 67, "r139": 67, "r140": 67, "mdarg": 67, "fgh": 67, "vsin": 67, "vdiff": 67, "narg": [67, 210], "naturals0": [67, 217, 225, 236, 237], "evalul": 67, "fairli": [67, 75, 92, 134, 142, 191, 204], "conserv": [67, 127, 145, 193, 265, 271], "136": [67, 103], "temporarili": 67, "implic": [67, 97, 210], "fx": [67, 69, 203, 233, 234], "fxx": 67, "insconsist": 67, "nonvanish": 67, "_diff_wrt": 67, "_sort_variable_count": 67, "vc": 67, "vsort": 67, "collaps": [67, 176, 229], "vsort0": 67, "vi": 67, "dfx": 67, "equidist": 67, "sq2": 67, "xl": 67, "d2fdxdy": 67, "doit_numer": 67, "z0": [67, 224], "unifi": [67, 150, 206, 208, 210, 212, 213, 225], "zeroth": [67, 212], "idiff": [67, 84], "r141": 67, "legaci": [67, 94, 103, 237], "v5_2": 67, "infunct": 67, "algebraiccomput": 67, "functionclass": [67, 217, 256], "f_real": [67, 74], "f_real_inherit": [67, 74], "is_singular": [67, 74, 90], "holomorph": [67, 74, 92], "superfici": 67, "ss": [67, 208], "denom": [67, 206, 207, 208, 212, 229], "_eval_expand_bas": 67, "_eval_expand_complex": 67, "shut": [67, 213], "unwant": [67, 235, 255], "expand_hint": 67, "_eval_expand_hint": 67, "liabl": [67, 97], "metahint": 67, "myclass": 67, "_eval_expand_doubl": 67, "expand_multinomi": 67, "expand_power_exp": 67, "expand_func": [67, 72, 75], "hyperexpand": [67, 75, 89, 92, 227, 229], "div": [67, 205, 207, 208, 213, 217, 229, 289], "horner": [67, 149, 206, 210, 213], "untouch": 67, "unexpand": [67, 207, 216, 226, 249], "safe": [67, 107, 207, 213, 235, 241, 284], "nfloat": [67, 229], "dkei": 67, "mixin": [67, 255], "maxn": [67, 71, 98], "subresult": [67, 208, 211, 213], "000100000000000000": 67, "precisionexhaust": [67, 71], "maxprec": 67, "quadratur": [67, 71, 94, 233], "oscillatori": [67, 71, 222], "osc": [67, 71], "advers": 67, "1e16": 67, "291": 67, "builtin": [67, 208, 217, 225, 258, 293], "speedup": [67, 103, 108, 210, 214, 256], "framework": [67, 125, 132, 142, 242, 248, 250, 256, 279], "slice": [67, 97, 98, 103, 109, 208, 213, 223, 225, 229, 238, 255], "tuplekind": [67, 98, 225], "parametris": [67, 225], "element_kind": [67, 98, 225], "tuple_count": 67, "setkind": [67, 98], "gcd_term": [67, 213], "isprimit": 67, "_gcd_term": 67, "terms_gcd": [67, 208, 213], "entiti": [67, 77, 80, 81, 83, 84, 92, 132, 147, 198, 236, 271, 280, 290], "broad": [67, 289], "undefinedkind": [67, 98, 225], "lex": [67, 95, 197, 205, 207, 208, 210, 213, 214, 216, 217, 229], "grlex": [67, 95, 197, 208, 213, 216, 217], "grevlex": [67, 95, 197, 205, 210, 213, 216, 217], "rev": 67, "unaffect": [67, 236], "_node": 67, "fastest": [67, 72, 94, 107, 108, 214], "undecor": 67, "breaker": 67, "collis": [67, 106, 217], "wast": [67, 104, 206], "rng": 67, "getstat": 67, "intention": 67, "tn": 67, "td": [67, 217, 293], "randrang": 67, "999": [67, 71], "238": [67, 107], "randint": [67, 103, 210], "ri": [67, 217], "rv": [67, 226, 237, 255], "nonbas": 67, "postord": 67, "descend": [67, 204, 212, 250], "subtre": [67, 217, 252], "cryptograph": 68, "encrypt": 68, "hide": [68, 217], "cipher": 68, "vigener": 68, "hill": [68, 75, 94, 127, 148, 192, 199, 262], "bifid": 68, "rsa": 68, "kid": 68, "elgam": 68, "plaintext": [68, 217], "ciphertext": 68, "monoalphabet": 68, "polyalphabet": 68, "crypto": 68, "az": [68, 118, 230], "hello": [68, 255], "helloworld": 68, "check_and_join": 68, "padded_kei": 68, "puppi": 68, "opqrstuvwxi": 68, "puyoqrstvwx": 68, "artist": 68, "aphras": 68, "ara": 68, "hp": 68, "cycle_list": 68, "mod": [68, 72, 73, 97, 103, 104, 107, 178, 204, 206, 207, 208, 210, 212, 213, 217, 219, 227, 230], "encipher_shift": 68, "msg": [68, 94], "decipher_shift": 68, "gonavybeatarmi": 68, "ct": [68, 96, 210], "hpobwzcfbubsnz": 68, "deciph": 68, "l1": [68, 77, 79, 80, 126, 129, 135, 147, 208, 210, 213, 230, 237], "l2": [68, 79, 80, 126, 129, 135, 168, 184, 208, 210, 237], "caesar": 68, "juliu": 68, "suetoniu": 68, "protect": [68, 217], "militari": 68, "nephew": 68, "augustu": 68, "reportedli": 68, "r142": 68, "caesar_ciph": 68, "r143": 68, "caesarsmethod": 68, "encipher_rot13": 68, "rot13": 68, "caeser": 68, "midwai": 68, "decipher_rot13": 68, "r144": 68, "decrypt": 68, "tbanilorngnezl": 68, "encipher_affin": 68, "_invers": 68, "cx": [68, 111], "recov": [68, 94, 109, 187, 210, 212, 213, 230, 233], "decipher_affin": 68, "r145": 68, "affine_ciph": 68, "reciph": 68, "navi": 68, "beat": 68, "armi": 68, "trobmvenbgbalv": 68, "encipher_atbash": 68, "enciph": 68, "atbash": 68, "hebrew": 68, "decipher_atbash": 68, "tlmzebyvzgzinb": 68, "r146": 68, "encipher_substitut": 68, "oeyag": 68, "034": 68, "60n": 68, "v4b3": 68, "rm4": 68, "immateri": 68, "anyv": 68, "wherebi": 68, "r147": 68, "substitution_ciph": 68, "encipher_vigener": 68, "me": [68, 132, 149, 192, 217, 239], "mondai": 68, "qrgkkthrzqebpr": 68, "krypto": 68, "sculptur": 68, "cia": 68, "headquart": 68, "r149": 68, "decipher_vigener": 68, "alp": 68, "palimpsest": 68, "emufphzlrfaxyusdjkzldkrnshgnfivj": 68, "betweensubtleshadingandtheabsenc": 68, "blais": 68, "sixteenth": 68, "centuri": [68, 204], "diplomat": 68, "invent": [68, 212, 235, 288], "giovan": 68, "batista": 68, "belaso": 68, "1553": 68, "civil": [68, 110], "war": 68, "confederaci": 68, "brass": 68, "nsa": 68, "museum": 68, "fort": 68, "mead": 68, "r148": 68, "sender": 68, "assembl": [68, 92, 224], "concaten": [68, 98, 255], "frequenc": [68, 94, 116, 118, 156, 158, 166, 183], "kasiski": 68, "discov": [68, 92, 122, 241, 290], "babbag": 68, "unbreak": 68, "gonavybeatarmyyesyoucan": 68, "gold": 68, "auto_kei": 68, "goldbuggonavybeatarmyy": 68, "mcydwshkogamkzcelyfgayr": 68, "pt": [68, 76, 77, 78, 80, 81, 82, 83, 223], "vigenere_ciph": 68, "20071116100808": 68, "filebox": 68, "vt": 68, "batman": 68, "goo": 68, "gl": 68, "ijr22d": 68, "decod": 68, "qrgk": 68, "kt": [68, 137], "hrzqe": 68, "bpr": 68, "meetmeonmondai": 68, "encipher_hil": 68, "z_": [68, 229], "r150": 68, "lester": 68, "1920": 68, "r151": 68, "polygraph": 68, "bare": [68, 127], "ceil": [68, 73, 107, 126, 217], "l_1": [68, 72, 119, 202, 227, 243, 255], "l_t": 68, "c_t": 68, "l_i": [68, 202, 227], "decipher_hil": 68, "hill_ciph": 68, "june": [68, 103], "juli": [68, 230], "1929": 68, "306": 68, "312": [68, 192, 235, 262, 264], "ueqdueodoctcwq": 68, "hjeb": 68, "stqq": 68, "ispk": 68, "stzz": 68, "hd": 68, "ormv": 68, "uiki": 68, "encipher_bifid": 68, "polybiu": 68, "printabl": 68, "bifid5": 68, "decipher_bifid": 68, "encipher_bifid5": 68, "encipher_bifid6": 68, "r152": 68, "bifid_ciph": 68, "ieilhhfstsfqy": 68, "ieilh": 68, "hfst": 68, "fqyej": 68, "bmtwmg": 68, "bio": 68, "gold_bug": 68, "hg2sfuei7t": 68, "pug": 68, "heldo": 68, "wor6d": 68, "bifid5_squar": 68, "5x5": 68, "cap": [68, 71, 182, 225, 236], "tradition": [68, 75], "decipher_bifid5": 68, "round_trip": 68, "josi": 68, "osi": 68, "iosi": 68, "qiq": 68, "1901": 68, "felix": 68, "delastel": 68, "onto": [68, 80, 81, 82, 92, 96, 103, 106, 108, 212], "helen": 68, "cryptanalysi": 68, "german": 68, "fridai": 68, "ieilehfstsfxe": 68, "okai": 68, "decipher_bifid6": 68, "8am": 68, "kfkljjhf5mmmktfrgpl": 68, "meetmeonmondayat8am": 68, "bifid6_squar": 68, "6x6": 68, "rsa_public_kei": 68, "totient": [68, 107], "carmichael": [68, 107], "p_n": [68, 72, 75, 94, 213], "multiprim": 68, "land": 68, "reduced_toti": [68, 107], "uniquenss": 68, "rsa_private_kei": 68, "e_0": 68, "canonicalz": 68, "3233": 68, "797": 68, "1577": 68, "multipow": 68, "cryptosystem": 68, "coprim": [68, 94, 107, 178, 210, 230], "30030": 68, "becam": [68, 142], "hardest": 68, "claim": [68, 201, 227, 236], "encipher_rsa": 68, "decipher_rsa": 68, "r153": 68, "rsa_": 68, "28cryptosystem": 68, "r154": 68, "cacr": 68, "uwaterloo": 68, "techreport": 68, "2006": [68, 226], "cacr2006": 68, "r155": 68, "springer": [68, 94, 107, 210, 211, 233], "1007": [68, 128], "bfb0055738": 68, "r156": 68, "itii": 68, "manuscript": [68, 94], "1381": 68, "2753": 68, "413": 68, "1193": 68, "823": 68, "r157": 68, "r158": 68, "r159": 68, "r160": 68, "bmod": [68, 213, 217], "vice": [68, 94, 107, 110, 172, 192, 204, 208, 266, 267, 286], "versa": [68, 94, 107, 110, 172, 192, 204, 208, 266, 267, 286], "asymmetr": [68, 83], "puk": 68, "prk": 68, "chines": [68, 107, 210], "k_1": [68, 107, 210, 227], "k_2": 68, "k_n": [68, 75, 210], "p_3": [68, 200], "k_3": 68, "moduli": [68, 107, 210], "2048": [68, 107, 217], "overhead": [68, 108, 214], "crt": [68, 107, 210], "overcompens": 68, "new_msg": 68, "kid_rsa_public_kei": 68, "grade": [68, 95, 197, 213], "school": [68, 226], "bob": [68, 126, 131], "369": 68, "58": [68, 103, 243], "kid_rsa_private_kei": 68, "encipher_kid_rsa": 68, "200": [68, 98, 103, 107, 110, 116, 262], "161": [68, 128], "decipher_kid_rsa": 68, "pub": [68, 262], "pri": 68, "encode_mors": 68, "sep": [68, 217, 234, 248], "mors": 68, "attack": 68, "flank": 68, "r161": 68, "morse_cod": 68, "decode_mors": 68, "word_sep": 68, "mc": [68, 137], "east": 68, "r162": 68, "lfsr_sequenc": 68, "lfsr": 68, "c_k": 68, "golomb": [68, 107], "g162": 68, "autocorrel": 68, "lim_": [68, 73, 75, 92, 94, 224, 284, 288], "balanc": [68, 148, 204, 237, 248], "solomon": 68, "aegean": 68, "park": 68, "laguna": 68, "1967": [68, 211], "lfsr_autocorrel": 68, "lfsr_connection_polynomi": 68, "massei": 68, "m163": 68, "jame": [68, 210], "synthesi": 68, "bch": 68, "tran": 68, "122": [68, 70, 75], "127": [68, 107], "elgamal_public_kei": 68, "elgamal_private_kei": 68, "1031": 68, "636": 68, "212": [68, 94, 211], "dlp": 68, "is_primitive_root": [68, 107], "encipher_elgam": 68, "encryp": 68, "decipher_elgam": 68, "eucliden": 68, "dh_public_kei": 68, "dh_private_kei": 68, "_p": [68, 182, 208, 210, 212, 224, 227, 235], "_g": 68, "diffi": 68, "hellman": [68, 107], "publicli": 68, "secretli": 68, "dh_shared_kei": 68, "sk": 68, "gm_public_kei": 68, "goldwass": 68, "micali": 68, "gm_private_kei": 68, "b_n": [68, 72, 96, 204, 220], "jacobi_symbol": [68, 107], "residuos": 68, "entropi": [68, 237], "encipher_gm": 68, "public_kei": 68, "gm": [68, 185], "decipher_gm": 68, "encipher_railf": 68, "rail": [68, 131], "railfenc": 68, "horel": 68, "ollwd": 68, "r165": 68, "rail_fence_ciph": 68, "decipher_railf": 68, "diffgeom": 69, "euclidean": [69, 80, 82, 192, 208, 210, 213], "r166": 69, "chart": [69, 203], "r167": 69, "sussman": 69, "wisdom": 69, "farr": 69, "2013": [69, 79, 98, 292], "cartesian": [69, 110, 114, 150, 155, 169, 172, 177, 198, 203, 204, 225, 236, 255, 266, 267, 269, 270, 279], "polar": [69, 73, 75, 77, 83, 110, 120, 152, 203, 225, 229, 236, 279], "relation_dict": 69, "car2d": 69, "pol": 69, "coordinatesymbol": 69, "jacobian": [69, 103, 146, 235], "jacobian_determin": 69, "r168": 69, "coordinate_system": 69, "base_oneform": 69, "coord_index": 69, "oneform": 69, "base_scalar": 69, "basescalarfield": 69, "base_vector": [69, 262], "coord_funct": 69, "to_si": 69, "coord": [69, 82, 84, 122, 180, 196], "immutabledensematrix": [69, 98, 99, 100, 101, 237], "rn": 69, "r2_r": 69, "r2_p": 69, "jacobian_matrix": 69, "point_to_coord": 69, "coord_si": [69, 265], "imbu": 69, "difficulti": [69, 107, 133], "arriv": [69, 210, 227, 229, 233, 237, 294], "inappropri": 69, "poin": 69, "unappropri": 69, "fy": [69, 203, 234], "ftheta": 69, "basevectorfield": 69, "point_p": 69, "point_r": 69, "s_field": 69, "dxi": 69, "v1": [69, 80, 103, 129, 149, 192, 193, 196, 237, 256, 262, 265, 266, 267, 268], "v_1": [69, 212, 235], "v_2": [69, 212], "e_x": [69, 243], "e_i": [69, 204, 227, 243], "e_r": 69, "c_xy": 69, "c_xr": 69, "unfortun": [69, 71, 108, 216, 230], "e_rho": 69, "form_field": 69, "exterior": [69, 83], "dg": 69, "tensorproduct": [69, 179, 181, 238, 239], "multilinear": 69, "wedg": [69, 92], "tp1": 69, "tp": [69, 154, 181, 208, 239], "wedgeproduct": 69, "wp1": 69, "liederiv": 69, "v_field": 69, "transport": 69, "pushforward": 69, "e_theta": 69, "basecovarderivativeop": 69, "christoffel": 69, "metric_to_christoffel_2nd": 69, "ch": [69, 103, 230], "cvd": 69, "covarderivativeop": 69, "intcurve_seri": 69, "vector_field": [69, 269], "start_point": 69, "f_i": [69, 92, 103, 210, 214], "movement": 69, "intcurve_diffequ": 69, "init_cond": 69, "f_1": [69, 72, 75, 92, 118, 128, 131, 150, 204, 210, 213, 233], "f_0": [69, 72, 128, 210], "vectors_in_basi": 69, "kept": [69, 184, 201, 255, 289], "twoform_to_matrix": 69, "twoform": 69, "e_j": 69, "metric_to_christoffel_1st": 69, "levi": [69, 75, 237, 243], "civita": [69, 75, 243], "metric_to_riemann_compon": 69, "non_trivial_metr": 69, "dtheta": 69, "drho": 69, "metric_to_ricci_compon": 69, "ricci": 69, "fft": [70, 149], "ifft": 70, "ntt": 70, "intt": 70, "fwht": 70, "ifwht": 70, "mobius_transform": 70, "inverse_mobius_transform": 70, "convolution_fft": 70, "convolution_ntt": 70, "convolution_fwht": 70, "convolution_subset": 70, "covering_product": 70, "intersecting_product": 70, "radix": 70, "r169": 70, "coolei": 70, "93tukey_fft_algorithm": 70, "r170": 70, "fastfouriertransform": 70, "r171": 70, "r172": 70, "pz": [70, 116, 243], "643": [70, 107], "767": 70, "387": 70, "415": 70, "384": 70, "353": [70, 103], "r173": 70, "apfloat": 70, "r174": 70, "numbertheoretictransform": 70, "r175": 70, "discrete_fourier_transform_": 70, "r176": 70, "r177": 70, "r178": 70, "wht": 70, "r179": 70, "hadamard_transform": 70, "r180": 70, "fast_walsh": 70, "93hadamard_transform": 70, "r181": 70, "r182": 70, "mobiu": [70, 107], "lattic": [70, 206, 230], "bitmask": 70, "r183": 70, "b6bius_inversion_formula": 70, "r184": 70, "csail": 70, "mit": 70, "rrw": 70, "conv": 70, "r185": 70, "arxiv": [70, 72, 75, 103, 120, 213, 255], "1211": 70, "0189": 70, "r186": 70, "r187": 70, "r188": 70, "888": 70, "444": 70, "1283": 70, "19351": 70, "14219": 70, "15502": 70, "44": [70, 72, 103, 107, 226, 237], "41": [70, 77, 103, 107, 208, 230], "63": [70, 103, 107], "r189": 70, "convolution_theorem": 70, "r190": 70, "333": [70, 107], "555": 70, "222": 70, "666": 70, "15555": 70, "19404": 70, "r191": 70, "r192": 70, "68": [70, 95, 103, 107, 206, 230], "48": [70, 77, 111, 230, 235, 237, 284], "2057": 70, "1870": 70, "r193": 70, "radioeng": 70, "fulltext": 70, "2002": [70, 204, 211, 214], "02_03_40_42": 70, "r194": 70, "r195": 70, "r196": 70, "AND": [70, 97], "327": [70, 233], "r197": 70, "44288293815837": 71, "4429": 71, "4428829381583662470158809900606936986146216893757": 71, "28902548222223624241": 71, "091999668350375232456": 71, "14159265358979": [71, 75, 235], "333333333333333": [71, 207, 229], "1415926535": 71, "7182818284": 71, "100000": [71, 107, 116], "951": 71, "95678796130331164628399634646042209010610577945815": 71, "aleaxit": 71, "100000000000000": 71, "1000000000": 71, "125000000000000000000000000000": 71, "100000000000000005551115123126": 71, "100000000000000000000000000000": 71, "1415": 71, "uncertainti": [71, 187], "003": 71, "31417": 71, "propag": [71, 80, 153, 156], "5000": [71, 110], "50000000000000000000000000000": 71, "varphi": [71, 75, 212, 217, 233], "erron": 71, "34665576869e": 71, "208": [71, 213], "64613129282185e": 71, "60123853010113e": 71, "thousand": [71, 107, 283], "43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875": 71, "binet": 71, "104": 71, "1336": 71, "portion": [71, 83, 98, 103], "meaningless": 71, "012297": 71, "9562288417661": 71, "956": 71, "29128599706266": 71, "2912859970626635404072825905956005414986193682745": 71, "14159265358979323846264338328": 71, "struggl": [71, 216], "346": 71, "34635637913639": 71, "dealt": [71, 92], "504067061906928": 71, "50406706190692837199": 71, "wrap_lin": [71, 94, 95, 103, 111, 197, 204, 205, 216, 217, 233], "intgrl": 71, "extrapol": [71, 224], "richardson": [71, 224, 236], "slowli": [71, 224], "64493406684823": 71, "577215664901533": 71, "57721566490153286060651209008240243104215933593992": 71, "10000000": [71, 213], "20000000": [71, 213], "693147255559946": 71, "worthwhil": 71, "hypergeometr": [71, 72, 85, 91, 92, 211, 228, 229, 233, 235, 237, 274, 294], "ramanujan": [71, 72, 107], "9801": 71, "1103": 71, "26390": 71, "396": [71, 132], "141592653589793238462643383279502884197169399375105820974944592307816406286208": 71, "99862803482534211706798214808651328230664709384460955058223172535940812848111745": 71, "02841027019385211055596446229489549303819644288109756659334461284756482337867831": 71, "355": [71, 107, 211], "113": [71, 107, 230], "33333": [71, 94], "635": 71, "504": [71, 211], "130198866629986772369127970337": 71, "49": [71, 72, 107, 111, 210, 230], "___________": [71, 111, 233], "bell": [72, 166, 219, 255], "k_sym": 72, "binom": [72, 107, 237, 294], "dotsc": [72, 219], "j_1": [72, 161, 162, 179, 202, 219, 238], "j_2": [72, 161, 162, 179, 202, 219], "dotsb": [72, 219], "atop": [72, 75, 219, 227], "2j_2": [72, 219], "3j_2": [72, 219], "j_": [72, 75, 92, 94, 179, 219, 227, 288], "bernoulli": [72, 75, 213, 217, 233, 235, 237], "877": 72, "4140": 72, "21147": 72, "115975": 72, "846749014511809332450147": 72, "luca": [72, 107, 217, 223], "genocchi": [72, 75, 213], "r198": 72, "bell_numb": 72, "r199": 72, "bellnumb": 72, "r200": 72, "bellpolynomi": 72, "hurwitz": [72, 75], "6k": 72, "appel": [72, 75], "confer": [72, 108, 292], "r205": 72, "66": [72, 98, 103, 213, 217], "1000001": 72, "andr": [72, 213], "appellseq": [72, 213], "bernoulli_poli": [72, 213], "r201": 72, "bernoulli_numb": 72, "r202": 72, "bernoulli_polynomi": [72, 213], "r203": 72, "bernoullinumb": 72, "r204": 72, "bernoullipolynomi": 72, "luschni": [72, 75, 213], "manifesto": 72, "r206": 72, "2009": [72, 75, 107, 202, 213], "06743": [72, 75, 213], "_k": [72, 75, 94, 202, 212, 237], "6435": 72, "pascal": [72, 107], "4th": [72, 73, 89, 103, 107, 149], "195": 72, "r208": 72, "postpon": 72, "156675": 72, "4433": 72, "28625": 72, "granvil": [72, 107], "r209": 72, "r207": 72, "johndcook": 72, "binomial_coeffici": [72, 107], "27s_theorem": [72, 236], "andrew": [72, 84, 107], "20170202003812": [72, 107], "dm": [72, 107, 206, 212], "umontr": [72, 107], "bincoeff": [72, 107, 217], "c_n": [72, 75, 96, 213, 233], "429": [72, 217], "1430": 72, "4862": 72, "39764993382373624267": 72, "020884341620842555705": 72, "r210": 72, "catalan_numb": 72, "r211": 72, "catalannumb": [72, 217], "r212": 72, "r213": 72, "geomet": [72, 204], "mathcircl": 72, "2j": [72, 210, 237], "1385": [72, 213], "272": [72, 213], "7936": [72, 213], "2702765": 72, "4096": 72, "euler_poli": [72, 213], "r214": 72, "euler_numb": 72, "r215": 72, "eulernumb": 72, "r216": 72, "alternating_permut": 72, "r217": 72, "alternatingpermut": 72, "swing": 72, "factorial2": [72, 183, 217], "fallingfactori": [72, 217], "subfactori": [72, 217, 255], "derang": [72, 255], "r219": 72, "generate_derang": [72, 255], "r218": 72, "r220": 72, "double_factori": 72, "texttt": [72, 225], "r221": 72, "r222": 72, "paul": [72, 252], "235": 72, "268": 72, "1995": [72, 211, 229, 235], "f_z": [72, 198, 269], "f_2": [72, 92, 118, 128, 131, 150, 210, 227, 233], "r224": 72, "fibonacci_numb": 72, "r225": 72, "fibonaccinumb": 72, "t_0": [72, 230], "149": [72, 107], "r226": 72, "r227": 72, "tribonaccinumb": 72, "r228": 72, "oei": [72, 75, 107, 213], "a000073": 72, "137": [72, 103, 120], "205": [72, 92, 227], "5269": 72, "761": 72, "280": 72, "83711": 72, "27720": 72, "30247": 72, "9900": 72, "983697455232980674869851942390639915940": 72, "r229": 72, "harmonic_numb": 72, "r230": 72, "harmonicnumb": [72, 217], "r231": 72, "harmonicnumber2": 72, "l_0": [72, 119, 243, 244], "47": [72, 75, 103, 107, 120, 155, 187, 216], "76": [72, 75, 103, 107, 210, 213], "r232": 72, "lucas_numb": 72, "r233": 72, "lucasnumb": 72, "genocchi_poli": [72, 213], "r234": 72, "genocchi_numb": 72, "r235": 72, "genocchinumb": 72, "r236": 72, "mathcal": [72, 73, 92, 118, 147, 179, 202, 213, 225], "a000111": [72, 213], "zigzag": 72, "li": [72, 75, 83, 94, 107, 129, 182, 217, 272], "50521": [72, 213], "691": 72, "2730": 72, "andre_poli": [72, 213], "r237": 72, "r238": 72, "eulerzigzagnumb": 72, "r239": 72, "irrelev": 72, "r240": 72, "number_theori": 72, "r241": 72, "pentagonal_number_theorem": 72, "multifactori": 72, "pochhamm": [72, 217, 229], "r242": 72, "r243": 72, "pochhammer_symbol": 72, "274": 72, "225": [72, 107, 211], "511": 72, "9330": 72, "34105": 72, "42525": 72, "22827": 72, "5880": 72, "750": 72, "r244": 72, "stirling_numbers_of_the_first_kind": 72, "r245": 72, "stirling_numbers_of_the_second_kind": 72, "multiset": [72, 92, 252, 255], "nc": 72, "nt": [72, 255], "babi": [72, 107, 255], "aa": [72, 202], "bb": [72, 202, 229, 255], "multiset_combin": [72, 255], "aab": [72, 255], "aabc": 72, "aaaabbbbcccc": 72, "m_1": [72, 118, 161, 179, 202, 230], "m_2": [72, 131, 150, 161, 179, 202], "m_k": 72, "r246": 72, "r247": 72, "tinyurl": 72, "cep849r": 72, "ba": [72, 255], "multiset_permut": [72, 255], "r248": 72, "aabbc": 72, "mississippi": [72, 255], "609": 72, "1521": 72, "1768": 72, "1224": [72, 107], "579": 72, "197": 72, "r249": 72, "20210507012732": 72, "csse": 72, "uwa": 72, "au": 72, "cits7209": 72, "707106781186548": 73, "tangent": [73, 77, 79, 83, 94, 214, 233], "643501108793284": 73, "r250": 73, "ib": [73, 137], "complex_conjug": 73, "polar_lift": [73, 75, 229], "periodic_argu": 73, "principal_branch": [73, 92], "r254": 73, "csc": [73, 109, 217, 226], "sec": [73, 94, 116, 212, 217, 226, 294], "acsc": [73, 217], "asec": [73, 217], "acot": [73, 217], "r251": 73, "trigonometric_funct": 73, "r252": 73, "r253": 73, "elementaryfunct": 73, "trigonometryangl": 73, "r255": 73, "r256": 73, "r257": 73, "r258": 73, "r259": 73, "r260": 73, "cotang": [73, 214], "r261": 73, "r262": 73, "r263": 73, "secant": [73, 213], "r264": 73, "r265": 73, "r266": 73, "cosec": 73, "r267": 73, "r268": 73, "r269": 73, "unnorm": [73, 75], "qquad": [73, 187, 210], "jn": [73, 75, 179, 213, 217, 288], "spheric": [73, 120, 126, 161, 202, 203, 213, 262, 266, 267, 288], "r270": 73, "sinc_funct": 73, "asinh": [73, 217], "r271": 73, "inverse_trigonometric_funct": 73, "r272": 73, "r273": 73, "r274": 73, "r275": 73, "r276": 73, "r277": 73, "r278": 73, "r279": 73, "arctan": [73, 214, 217], "acoth": [73, 217], "r280": 73, "r281": 73, "arccot": [73, 217], "r285": 73, "r282": 73, "r283": 73, "r284": 73, "arcsec": [73, 217], "r286": 73, "r287": 73, "r288": 73, "arccsc": [73, 217], "quadrant": [73, 208, 236], "clock": [73, 226], "reurn": 73, "r289": 73, "r290": 73, "r291": 73, "arctan2": [73, 217], "hyperbolicfunct": 73, "coth": [73, 217, 229], "acosh": [73, 217], "sech": [73, 217], "csch": [73, 217], "asech": [73, 217], "r292": 73, "hyperbolic_funct": 73, "r293": 73, "r294": 73, "arcsech": [73, 217], "acsch": [73, 217], "r295": 73, "r296": 73, "r297": 73, "arccsch": [73, 217], "567": 73, "r298": 73, "r299": 73, "ceilingfunct": 73, "r300": 73, "r301": 73, "floorfunct": 73, "roundfunct": 73, "r302": 73, "fractional_part": 73, "r303": 73, "fractionalpart": 73, "lambertw": [73, 214, 217, 235, 236, 295], "r304": 73, "w_k": 73, "635564016364870": 73, "34747534407696": 73, "41624341514535": 73, "lambert_w_funct": 73, "exprcondpair": 73, "cond": [73, 92, 94, 225], "piecewise_fold": 73, "folded_cond": 73, "ITE": [73, 97, 217], "piecewise_exclus": 73, "_eval_integr": [73, 94], "piecewise_integr": 73, "as_expr_set_pair": 73, "skip_nan": 73, "mutual": [73, 92, 201], "conjunct": [73, 97, 107, 203, 227, 248, 294], "identityfunct": 73, "supremum": [73, 225], "r305": 73, "directed_complete_partial_ord": 73, "r306": 73, "lattice_": 73, "28order": 73, "global_paramet": 73, "real_root": [73, 213, 235], "rootoftool": [73, 103, 213], "r307": 73, "square_root": 73, "r308": 73, "r309": 73, "root_of_un": 73, "r310": 73, "principal_valu": [73, 94], "r311": 73, "cuberoot": 73, "powdenest": [73, 229], "misc": [73, 98, 258], "r312": 73, "r313": 73, "r314": 73, "cube_root": 73, "r315": 73, "int_": [75, 91, 92, 94, 213, 220, 284, 288], "sum_i": [75, 224], "is_simpl": 75, "tensor_funct": 75, "kroneckerdelta": [75, 100, 182, 217, 229], "r316": 75, "deltafunct": [75, 94], "h0": 75, "electron": [75, 120, 226], "improp": [75, 94], "r317": 75, "heavisidestepfunct": 75, "r318": 75, "iv": [75, 214], "105": [75, 107, 213, 230], "parg": 75, "singularity_funct": 75, "singularityfunct": [75, 94, 110], "macaulai": 75, "heavisidediracdelta": 75, "r319": 75, "r320": 75, "r321": 75, "r322": 75, "r323": 75, "setminu": [75, 92], "17805383034794561964694160130": 75, "65092319930185633889": 75, "8724366472624298171": 75, "r324": 75, "r325": 75, "r326": 75, "loggammafunct": 75, "r327": 75, "espinosa": 75, "moll": 75, "r332": 75, "19093197": 75, "5173168": 75, "ni": [75, 107], "r328": 75, "polygamma_funct": 75, "r329": 75, "polygammafunct": 75, "r330": 75, "r331": 75, "polygamma2": 75, "2004": [75, 211, 230], "115": 75, "r333": 75, "digamma_funct": 75, "r334": 75, "digammafunct": 75, "r335": 75, "r336": 75, "trigamma_funct": 75, "r337": 75, "trigammafunct": 75, "r338": 75, "int_x": 75, "_1f_1": 75, "confluent": [75, 227], "xt": 75, "expint": [75, 217], "r339": 75, "incomplete_gamma_funct": 75, "upper_incomplete_gamma_funct": 75, "r340": 75, "r341": 75, "r342": 75, "gamma2": 75, "r343": 75, "gamma3": 75, "r344": 75, "exponential_integr": 75, "relation_with_other_funct": 75, "int_0": [75, 92, 94, 284, 294], "r345": 75, "lower_incomplete_gamma_funct": 75, "r346": 75, "r347": 75, "r348": 75, "r349": 75, "multigamma": 75, "gamma_p": 75, "r350": 75, "multivariate_gamma_funct": 75, "beta_funct": 75, "eulerian": 75, "02671848900111377452242355235388489324562": 75, "2112723729365330143": 75, "7655283165378005676": 75, "r351": 75, "r352": 75, "betafunct": 75, "r353": 75, "error_funct": 75, "999999984582742099719981147840": 75, "1296959": 75, "73071763923152794095062": 75, "r354": 75, "r355": 75, "r356": 75, "r357": 75, "0000000154172579002800188521596734869": 75, "r358": 75, "r359": 75, "r360": 75, "r361": 75, "5648024145755525987042919132": 75, "995322265018952734162069256367": 75, "r362": 75, "r363": 75, "r364": 75, "r365": 75, "179143454621291692285822705344": 75, "r366": 75, "inverse_funct": 75, "r367": 75, "inverseerf": [75, 217], "r368": 75, "r369": 75, "inverseerfc": [75, 217], "r370": 75, "inverseerf2": 75, "fresnelintegr": 75, "343415678363698242195300815958": 75, "fresnelc": [75, 217, 227], "r371": 75, "fresnel_integr": 75, "r372": 75, "r373": 75, "r374": 75, "r375": 75, "wrench": 75, "jr": 75, "vicki": 75, "allei": 75, "488253406075340754500223503357": 75, "r376": 75, "r377": 75, "r378": 75, "r379": 75, "r380": 75, "background": [75, 95, 197, 200, 292], "cauchi": [75, 92, 94, 208, 233, 237], "219383934395520": 75, "21938393439552": 75, "shi": [75, 92, 217, 227], "e1": [75, 77, 84, 132, 207, 212, 224, 233, 236], "hyperbol": [75, 214, 236, 290, 294], "r381": 75, "r382": 75, "r383": 75, "20201128173312": 75, "sfu": [75, 94], "cbm": [75, 94], "aand": [75, 94], "page_228": 75, "int_1": [75, 92], "zt": [75, 92], "unbranch": [75, 92], "meijerg": [75, 86, 92, 94, 217, 237, 294], "postiv": 75, "r384": 75, "r385": 75, "expintegral": [75, 217], "r386": 75, "04516378011749278484458888919": 75, "0652795784357498247001125598": 75, "08346052231061726610939702133": 75, "soldner": 75, "45136923488338": 75, "r387": 75, "logarithmic_integr": 75, "r388": 75, "logarithmicintegr": 75, "r389": 75, "r390": 75, "soldnersconst": 75, "92242131492155809316615998938": 75, "r391": 75, "r392": 75, "r393": 75, "r394": 75, "trigonometric_integr": 75, "_1": [75, 103, 126, 192, 202, 227, 256], "somewhat": [75, 94, 132, 208], "r395": 75, "r396": 75, "r397": 75, "laurent": [75, 208, 214, 233], "j_n": [75, 179], "r398": 75, "r399": 75, "r400": 75, "r401": 75, "yn": [75, 217, 223], "r402": 75, "i_": [75, 92, 227, 237, 238], "iz": 75, "r403": 75, "k_": [75, 92, 127, 144, 145], "r404": 75, "hankel1": [75, 217], "hankel": [75, 94], "iy_": 75, "hankel2": [75, 217], "r405": 75, "hankelh1": [75, 217], "r406": 75, "hankelh2": [75, 217], "orthopoli": [75, 213], "spherical_bessel_fn": [75, 213], "3j": [75, 161, 202], "099419756723640344491": 75, "054525080242173562897": 75, "r407": 75, "y_n": [75, 230], "18525034196069722536": 75, "014895573969924817587": 75, "r408": 75, "jn_zero": 75, "besseljzero": 75, "sph_jn": 75, "7635": 75, "095": 75, "515": 75, "marcumq": 75, "marcum": 75, "q_m": 75, "r409": 75, "marcum_q": 75, "r410": 75, "airybas": 75, "airyai": [75, 217, 233], "ai": [75, 107, 213, 230, 239, 258, 294], "airyaiprim": [75, 217], "22740742820168557599192443603787379946077222541710": 75, "airybi": [75, 217, 233], "airybiprim": [75, 217], "r411": 75, "airy_funct": 75, "r412": 75, "r413": 75, "encyclopediaofmath": 75, "r414": 75, "airyfunct": 75, "41230258795639848808323405461146104203453483447240": 75, "r415": 75, "r416": 75, "r417": 75, "r418": 75, "61825902074169104140626429133247528291577794512415": 75, "r419": 75, "r420": 75, "r421": 75, "r422": 75, "27879516692116952268509756941098324140300059345163": 75, "r423": 75, "r424": 75, "r425": 75, "r426": 75, "bspline": 75, "bspline_basi": 75, "knot": 75, "bspline_basis_set": 75, "r427": 75, "interpolating_splin": 75, "131": [75, 192], "39": [75, 107, 216], "interpolating_poli": [75, 213], "zeta_funct": 75, "admit": [75, 233], "lerch": 75, "transcend": 75, "lerchphi": [75, 217], "dirichlet_eta": [75, 217], "20205690315959": 75, "polylog": [75, 217], "r428": 75, "r429": 75, "hurwitz_zeta_funct": 75, "r430": 75, "dirichlet_eta_funct": 75, "r431": 75, "polylogarithm": 75, "sheet": [75, 226], "phi_0": 75, "ze": 75, "r432": 75, "bateman": [75, 94], "erdelyi": [75, 94], "1953": [75, 212], "york": [75, 92, 148, 227, 235], "mcgraw": [75, 94, 127, 148, 192, 199, 262], "r433": 75, "r434": 75, "lerch_transcend": 75, "stieltj": [75, 217], "gamma_": [75, 119, 121], "r435": 75, "stieltjes_const": 75, "ap": [75, 79, 227], "bq": [75, 205, 206, 227], "a_p": [75, 92, 227, 294], "b_q": [75, 92, 227, 294], "_pf_q": [75, 227, 233, 294], "r436": 75, "r437": 75, "generalized_hypergeometric_funct": 75, "convergence_stat": 75, "radius_of_converg": 75, "radiu": [75, 77, 81, 83, 139, 141, 151, 155, 203, 236, 237, 272], "meijer": [75, 85, 93, 94, 274, 284, 294], "mellin": [75, 94], "barn": 75, "b_m": [75, 92, 235], "confusingli": 75, "int_l": [75, 92, 227], "contour": [75, 77, 92, 203, 227], "__1": 75, "subvector": 75, "aother": 75, "bm": 75, "bother": [75, 289], "slater": [75, 227], "allow_hyp": [75, 229], "subsum": 75, "r438": 75, "r439": 75, "meijer_g": 75, "get_period": [75, 92], "appellf1": [75, 217], "0063339426292673": 75, "172870711": 75, "659936": 75, "15605338197184": 75, "r440": 75, "appell_seri": 75, "r441": 75, "hypergeometricfunct": 75, "elliptic_integr": 75, "elliptic_k": [75, 217], "tfrac": [75, 233, 237], "eccentr": [75, 77], "50923695405127": 75, "625146415202697": 75, "elliptic_f": [75, 217], "r442": 75, "r443": 75, "ellipticintegr": 75, "elliptick": [75, 217], "909449841483": 75, "74720545502474": 75, "r444": 75, "r445": 75, "ellipticf": 75, "elliptic_": [75, 77, 217], "55203744279187": 75, "290764986058437": 75, "991052601328069": 75, "81879421395609": 75, "r446": 75, "r447": 75, "elliptice2": 75, "r448": 75, "elliptic": [75, 217], "elliptic_pi": [75, 217], "50232379629182": 75, "760939574180767": 75, "29136443417283": 75, "32555634906645": 75, "r449": 75, "r450": 75, "ellipticpi3": 75, "r451": 75, "ellipticpi": [75, 217], "mathieu_funct": 75, "mathieubas": 75, "mathieusprim": [75, 217], "mathieuc": [75, 217], "mathieucprim": [75, 217], "r452": 75, "r453": 75, "r454": 75, "mathieufunct": 75, "r455": 75, "mathieuandspheroidalfunct": 75, "r456": 75, "r457": 75, "r458": 75, "r459": 75, "r460": 75, "r461": 75, "r462": 75, "r463": 75, "r464": 75, "r465": 75, "r466": 75, "r467": 75, "chebyshevu": [75, 217], "chebyshevt_root": 75, "chebyshevu_root": 75, "assoc_legendr": [75, 217], "hermite_prob": 75, "jacobi_poli": [75, 213], "gegenbauer_poli": [75, 213], "chebyshevt_poli": [75, 213], "chebyshevu_poli": [75, 213], "hermite_poli": [75, 213], "legendre_poli": [75, 213], "laguerre_poli": [75, 213], "r468": 75, "jacobi_polynomi": 75, "r469": 75, "jacobipolynomi": 75, "r470": 75, "jacobip": [75, 217], "jacobi_norm": 75, "normilz": 75, "p_m": 75, "delta_": [75, 179, 187, 202], "r471": 75, "r472": 75, "r473": 75, "hermite_prob_poli": [75, 213], "r474": 75, "gegenbauer_polynomi": 75, "r475": 75, "gegenbauerpolynomi": 75, "r476": 75, "gegenbauerc3": 75, "r477": 75, "chebyshev_polynomi": 75, "r478": 75, "chebyshevpolynomialofthefirstkind": 75, "r479": 75, "chebyshevpolynomialofthesecondkind": 75, "r480": 75, "r481": 75, "u_n": [75, 94, 210, 212, 213], "r482": 75, "r483": 75, "r484": 75, "r485": 75, "r486": 75, "chebyshev_root": 75, "r487": 75, "legendre_polynomi": 75, "r488": 75, "legendrepolynomi": 75, "r489": 75, "legendrep": [75, 217], "r490": 75, "legendrep2": 75, "r491": 75, "associated_legendre_polynomi": 75, "r492": 75, "r493": 75, "r494": 75, "r495": 75, "hermite_polynomi": 75, "r496": 75, "hermitepolynomi": 75, "r497": 75, "hermiteh": [75, 217], "probabilist": [75, 213, 237], "he_n": [75, 213], "telephon": 75, "a000085": 75, "232": 75, "764": 75, "2620": 75, "9496": 75, "r498": 75, "r499": 75, "l_n": [75, 94, 213], "r500": 75, "laguerre_polynomi": 75, "r501": 75, "laguerrepolynomi": 75, "r502": 75, "laguerrel": [75, 217], "r503": 75, "laguerrel3": 75, "r504": 75, "generalized_laguerre_polynomi": 75, "r505": 75, "associatedlaguerrepolynomi": 75, "r506": 75, "r507": 75, "spherical_harmon": 75, "ynm": [75, 202], "ynm_c": 75, "znm": 75, "r508": 75, "r509": 75, "sphericalharmon": 75, "r510": 75, "sphericalharmonici": 75, "r511": 75, "r512": 75, "r513": 75, "r514": 75, "z_n": [75, 211], "r515": 75, "r516": 75, "r517": 75, "eijk": 75, "levicivita": [75, 103], "eval_levicivita": 75, "pseudotensor": 75, "delta_rang": [75, 182], "kroneck": [75, 107, 181, 182, 202, 238, 243], "r518": 75, "kronecker_delta": [75, 182], "indices_contain_equal_inform": [75, 182], "fermi": [75, 182], "above_fermi": [75, 182], "below_fermi": [75, 182], "is_above_fermi": [75, 182], "is_below_fermi": [75, 182], "is_only_below_fermi": [75, 182], "is_only_above_fermi": [75, 182], "killable_index": [75, 182], "preferred_index": [75, 182], "point2d": [76, 77, 78, 79, 80, 82, 83, 84], "arbitrary_point": [76, 77, 78, 79, 80, 81, 83], "polyfunc": [76, 208, 213], "ambient_dimens": [76, 78, 80, 82], "plot_interv": [76, 77, 80, 83], "lower_bound": [76, 77, 80, 83], "upper_bound": [76, 77, 80, 83], "counterclockwis": [76, 77, 78, 82, 103, 110, 111], "scale": [76, 77, 78, 82, 83, 84, 95, 110, 162, 183, 185, 186, 187, 189, 190, 197, 201, 203, 213, 220, 237, 269, 271], "geometryent": [76, 77, 78, 80, 82, 83, 84], "hradiu": 77, "vradiu": 77, "ellipt": [77, 107, 204], "geometryerror": [77, 80, 83, 84], "radii": 77, "foci": 77, "periapsi": 77, "apoapsi": 77, "focus_dist": 77, "shortest": [77, 80, 83, 200, 223, 229, 233, 255], "auxiliary_circl": 77, "xmin": [77, 78, 80, 82, 83, 203], "ymin": [77, 78, 80, 82, 83, 203], "xmax": [77, 78, 80, 82, 83, 203], "ymax": [77, 78, 80, 82, 83, 203], "rectangl": [77, 78, 80, 82, 83, 203, 213], "director_circl": 77, "perpendicular": [77, 80, 81, 83, 96, 126, 140, 155, 201], "director": 77, "130": 77, "r519": 77, "encloses_point": [77, 78, 83], "border": [77, 83], "_slope": 77, "slope": [77, 78, 80, 83, 94, 110, 111, 116, 126], "r520": 77, "108270": 77, "r521": 77, "shifted_ellips": 77, "evolut": 77, "focal": [77, 151, 155], "100500": 77, "363": [77, 107, 211], "175": [77, 103, 210, 211], "is_tang": [77, 79], "tangent_lin": 77, "normal_lin": 77, "line2d": [77, 80, 83], "2020": [77, 161], "polar_second_moment_of_area": [77, 83], "moment": [77, 83, 110, 111, 134, 142, 145, 147, 203, 213, 230, 237], "constitu": [77, 83, 129, 192, 223, 262], "planar": [77, 83, 111, 126, 155], "resist": [77, 83, 110, 111, 112, 226], "deflect": [77, 83, 110, 111], "bend": [77, 83, 110, 113, 279], "r522": 77, "polar_moment_of_inertia": [77, 83], "random_point": [77, 80, 81], "arb": 77, "364": 77, "notimpl": [77, 212], "second_moment_of_area": [77, 83], "centroid": [77, 83, 84, 110], "i_xx": [77, 83], "i_yi": [77, 83], "i_xi": [77, 83], "ellis": 77, "r523": 77, "list_of_second_moments_of_area": 77, "section_modulu": [77, 83], "sympify": [77, 83, 110, 112, 114, 123, 129, 153, 156, 194], "farthest": [77, 83], "s_x": [77, 83], "s_y": [77, 83], "r524": 77, "semilatus_rectum": 77, "semi": [77, 80, 107], "latu": 77, "rectum": 77, "chord": 77, "conic": [77, 230, 262], "directrix": 77, "r525": 77, "semilatusrectum": 77, "r526": 77, "latus_rectum": 77, "collinear": [77, 79, 81, 82, 83, 203], "gx": 77, "hy": 77, "synonym": [77, 212], "p4": [77, 80, 82, 83, 129, 203], "t2": [78, 83, 84, 107, 123, 129, 230, 237, 243], "ordering_of_class": 78, "is_similar": [78, 80, 83, 84], "uniform": [78, 203, 235, 237], "enlarg": 78, "shrink": [78, 92], "parameter_valu": [78, 81], "pent": 78, "rpent": 78, "rcirc": 78, "entity1": 79, "entity2": 79, "zp": 79, "is_collinear": [79, 82], "segment2d": [79, 80, 83, 84], "wikipappu": 79, "subs_point": 79, "p11": 79, "p12": 79, "p13": 79, "p21": 79, "p22": 79, "p23": 79, "ll1": 79, "ll2": 79, "ll3": 79, "ll4": 79, "ll5": 79, "ll6": 79, "pp1": 79, "pp2": 79, "pp3": 79, "encyclopedia": [79, 199], "apr": 79, "s_hexagon_theorem": 79, "clockwis": [79, 94, 98, 103, 110, 111, 112, 114], "overlap": [79, 84, 106, 204, 225, 258], "infanc": 79, "geometryresult": 79, "fair": [79, 237], "angle_between": [80, 81, 83, 192], "reflex": 80, "eman": 80, "readili": [80, 103], "sw": 80, "obtus": 80, "smallest_angle_between": 80, "point3d": [80, 81, 82, 155], "line3d": [80, 81, 82], "is_perpendicular": [80, 81, 82, 83], "ray2d": [80, 83], "closing_angl": 80, "are_concurr": [80, 81], "concurr": [80, 81, 214], "l3": [80, 135, 210], "l4": [80, 135], "bisector": [80, 83], "p5": [80, 82, 83, 203], "p6": [80, 83, 203], "p7": [80, 83, 203], "segment3d": [80, 81], "direction_ratio": [80, 82], "is_parallel": [80, 81], "parallel_lin": 80, "perpendicular_lin": [80, 81], "perpendicular_seg": 80, "reform": 80, "92": [80, 211, 233, 237, 255], "ccw": [80, 83], "ray3d": [80, 81, 155], "xdirect": 80, "ydirect": 80, "midpoint": [80, 82, 83, 94, 203, 268], "170": [80, 237], "341": 80, "perpendicular_bisector": 80, "linearentity2d": 80, "linearentity3d": [80, 81], "direction_cosin": [80, 82], "zdirect": 80, "normal_vector": [81, 155], "proce": [81, 146, 210, 212, 227, 235], "147": 81, "321": 81, "is_coplanar": 81, "perpendicualar": 81, "parallel_plan": 81, "on_circl": 81, "off_circl": 81, "perpendicular_plan": 81, "pt1": 81, "projection_lin": 81, "on_morph": 82, "affine_rank": 82, "are_coplanar": 82, "canberra_dist": 82, "canberra": 82, "geometricent": 82, "taxicab_dist": 82, "is_concycl": 82, "concycl": 82, "fewer": [82, 83, 146, 237, 284], "is_scalar_multipl": 82, "ambient": 82, "orthogonal_direct": 82, "taxicab": 82, "_nocheck": 82, "are_collinear": 82, "unrot": 83, "circumscrib": 83, "spin": [83, 120, 134, 168, 169, 177, 279], "perimet": 83, "contact": [83, 134, 138, 139, 140, 141, 200, 241], "38": [83, 103, 107, 217, 230, 232, 237], "cut_sect": 83, "upper_polygon": 83, "lower_polygon": 83, "upper_seg": 83, "lower_seg": 83, "r527": 83, "r528": 83, "paulbourk": 83, "polygonmesh": 83, "insidepoli": 83, "first_moment_of_area": 83, "q_x": [83, 200], "q_y": [83, 200], "625": [83, 272], "3125": [83, 237], "525": 83, "3000": [83, 110], "r529": 83, "skyciv": 83, "beam": [83, 114, 151, 154, 279], "bmd": 83, "r530": 83, "mechanicalc": 83, "poly1": 83, "poly2": 83, "interior": [83, 213, 225], "180": [83, 201, 211], "r531": 83, "r532": 83, "r533": 83, "apothem": 83, "interior_angl": 83, "exterior_angl": 83, "circumcircl": 83, "incircl": 83, "inradiu": 83, "inscrib": 83, "circumcent": 83, "circumradiu": 83, "leg": [83, 112], "square_in_unit_circl": 83, "kite": 83, "asa": 83, "sa": [83, 213], "sss": 83, "altitud": 83, "orthocent": 83, "exradii": 83, "median": [83, 237], "medial": 83, "nine_point_circl": 83, "straight": [83, 89, 116, 136, 200, 233], "eulerlin": 83, "equilater": 83, "excent": 83, "excircl": 83, "touch": [83, 134, 226], "r534": 83, "ly": [83, 103, 208], "exradiu": 83, "r535": 83, "r536": 83, "incent": 83, "is_equilater": 83, "is_isoscel": 83, "is_right": 83, "is_scalen": 83, "nine": [83, 217], "feet": 83, "real_num": 84, "hull": 84, "r537": 84, "graham_scan": 84, "r538": 84, "1979": [84, 187], "20210511015444": 84, "geomalgorithm": 84, "a10": 84, "_hull": 84, "t3": [84, 230], "averag": [84, 94, 107, 210, 237], "p_r": 85, "holonomic_funct": 85, "from_hyp": [86, 89], "holonomicfunct": [86, 89, 90], "from_meijerg": [86, 89], "initcond": [86, 88, 89], "expr_to_holonom": [86, 89, 90, 91], "lenic": [86, 88], "meijerint": [86, 88, 92, 94], "_rewrite1": [86, 92], "_convert_poly_rat_alg": [86, 88], "_create_t": [86, 88], "_create_lookup_t": [88, 92], "differentialoper": [89, 90, 171], "old_poly_r": [89, 90, 204, 207, 208], "to_sequ": 89, "n_0": [89, 210, 235, 236], "indici": [89, 90, 91, 233], "c_j": [89, 92, 227], "holonomicsequ": 89, "r539": 89, "hal": 89, "inria": [89, 94], "00070025": 89, "r540": 89, "www3": [89, 233, 262], "risc": [89, 233, 262], "jku": [89, 233, 262], "risc_2244": 89, "diplform": 89, "_recur": 89, "rk4": 89, "71828182845905": 89, "10517083333333": 89, "22140257085069": 89, "34985849706254": 89, "49182424008069": 89, "64872063859684": 89, "82211796209193": 89, "01375162659678": 89, "22553956329232": 89, "45960141378007": 89, "71827974413517": 89, "331": 89, "4641": 89, "61051": 89, "771561": 89, "9487171": 89, "14358881": 89, "357947691": 89, "5937424601": 89, "to_hyp": 89, "as_list": [89, 213], "to_meijerg": 89, "1_0": 90, "1_1": 90, "0_0": 90, "0_1": 90, "list_of_poli": 90, "weyl": [90, 96], "differentialoperatoralgebra": 90, "Ore": 90, "dxa": 90, "endomorph": [90, 212], "frobeniu": [91, 103, 107, 210, 211], "subtleti": 92, "recast": [92, 229, 235, 236], "branchpoint": 92, "crude": [92, 134, 203], "decre": 92, "biholomorph": 92, "topologi": [92, 225], "neighbourhood": 92, "evid": [92, 127, 140, 227, 239], "peculiar": [92, 201], "_split_mul": 92, "_mytyp": 92, "inequival": 92, "_mul_as_two_part": 92, "twist": 92, "recognis": [92, 207, 227, 229], "anywai": [92, 229, 233], "analyitc": 92, "_rewrite_singl": 92, "_rewrite2": 92, "_rewrite_saxena_1": 92, "_rewrite_saxena": 92, "blogpost": 92, "remedi": 92, "exploit": [92, 249], "transpar": [92, 95, 197], "nessgrh": 92, "wordpress": [92, 230], "07": 92, "stade": 92, "c_u": 92, "d_1": [92, 187, 213, 237], "d_v": 92, "amalgam": 92, "prudnikov1990": [92, 227], "luke1969": [92, 227], "fulfil": [92, 202], "vee": [92, 97, 103], "lceil": 92, "rceil": 92, "d_j": [92, 187, 227], "lambda_c": [92, 145], "lambda_": 92, "z_0": [92, 229], "z_1": 92, "a_i": [92, 187, 192, 201, 205, 210, 227], "c_5": 92, "c_6": 92, "c_7": 92, "c_8": 92, "lvert": 92, "rvert": 92, "c_9": 92, "versatil": 92, "bz": [92, 230, 243], "deform": [92, 111], "encircl": 92, "appeal": 92, "fox": 92, "obstacl": 92, "identif": [92, 236], "domin": [92, 98, 222, 224], "iT": 92, "omega_": 92, "disguis": 92, "meijerint_indefinit": 92, "meijerint_definit": 92, "meijerint_invers": 92, "kelli": [92, 227], "roach": [92, 227], "211": [92, 107, 213, 227, 233], "prudnikov": [92, 227], "yu": [92, 202, 227], "brychkov": [92, 227], "marichev": [92, 227], "gordon": [92, 161, 227], "breach": [92, 227], "_coeffexpvalueerror": 92, "_get_coeff_exp": 92, "_check_anteced": 92, "_check_antecedents_1": 92, "mt": 92, "_check_antecedents_invers": 92, "anteced": [92, 224], "_condsimp": 92, "hoc": 92, "simp": [92, 192], "_dummi": 92, "_dummy_": 92, "_eval_cond": 92, "_expon": 92, "_find_splitting_point": 92, "fsp": 92, "_flip_g": 92, "_function": 92, "_guess_expans": 92, "sensibl": [92, 94], "_inflate_fox_h": 92, "_inflate_g": 92, "_int0oo": 92, "_int0oo_1": 92, "_int_invers": 92, "_is_analyt": 92, "_meijerint_definite_2": 92, "trigexpand": 92, "_meijerint_definite_3": 92, "_meijerint_definite_4": 92, "only_doubl": 92, "_meijerint_indefinite_1": 92, "_mul_arg": 92, "_my_principal_branch": 92, "full_pb": 92, "nearer": 92, "superflu": 92, "opaqu": [92, 217], "fac": 92, "_rewrite_invers": 92, "costli": [92, 136, 206, 213, 290], "tx": [92, 292], "happili": [94, 241], "nonelementari": 94, "mellin_transform": 94, "bilater": 94, "mellintransform": 94, "integraltransform": 94, "inverse_mellin_transform": 94, "fourier_transform": 94, "hankel_transform": 94, "inverse_hankel_transform": 94, "inversemellintransform": 94, "laplacetransform": 94, "r541": 94, "prooject": 94, "1954": 94, "caltech": 94, "caltechauthor": 94, "20140123": 94, "101456353": 94, "fdict": 94, "inverselaplacetransform": 94, "singularit": [94, 146], "fouriertransform": 94, "_fourier_transform": 94, "inverse_fourier_transform": 94, "sine_transform": 94, "inverse_sine_transform": 94, "cosine_transform": 94, "inverse_cosine_transform": 94, "bixk": 94, "inversefouriertransform": 94, "sinetransform": 94, "inversesinetransform": 94, "cosinetransform": 94, "inversecosinetransform": 94, "hankeltransform": 94, "ht": 94, "inversehankeltransform": 94, "_compute_transform": 94, "_as_integr": 94, "integraltransformerror": 94, "_name": 94, "_collapse_extra": 94, "needev": 94, "function_vari": 94, "transform_vari": 94, "lazard": [94, 210, 213], "rioboo": 94, "trager": 94, "horowitz": 94, "ostrogradski": 94, "ratint": 94, "rationaltool": [94, 213], "ratint_logpart": 94, "ratint_ratpart": 94, "r542": 94, "bronstein": [94, 211, 213, 219, 235], "verlag": [94, 211], "deg": [94, 116, 132, 205, 210, 212, 213], "q_i": [94, 128, 146], "_t": [94, 132, 135, 149, 182, 191, 192, 196, 227, 237], "trigintegr": 94, "trigonometri": 94, "r543": 94, "integration_techniqu": 94, "deltaintegr": 94, "couldn": 94, "singularityintegr": 94, "risch_integr": 94, "nonelementaryintegr": 94, "proven": [94, 107, 268, 286], "handle_first": 94, "separate_integr": 94, "rewrite_complex": 94, "forthcom": 94, "5109": 94, "manualintegr": 94, "integral_step": 94, "student": [94, 226, 230, 237], "rootsum": [94, 213, 219], "substep": 94, "sympy_gamma": 94, "blob": 94, "app": 94, "intstep": 94, "urul": 94, "u_var": 94, "_u": [94, 182], "u_func": 94, "arctanrul": 94, "sinrul": 94, "rewriterul": 94, "addrul": 94, "powerrul": 94, "constanttimesrul": 94, "constantrul": 94, "norman": 94, "retri": [94, 107], "degree_offset": 94, "unnecessary_permut": 94, "_try_heurisch": 94, "manuel": [94, 222], "poor": [94, 108], "man": [94, 211], "airi": [94, 233], "whittak": 94, "r544": 94, "sop": [94, 97], "cafe": 94, "pmint": 94, "r545": 94, "gedd": [94, 211], "stefanu": 94, "217": [94, 211], "r546": 94, "davenport": [94, 210, 211], "eurocam": 94, "lnc": [94, 211, 235], "157": [94, 107, 111, 211], "r547": 94, "iii": [94, 217, 233], "sigsam": 94, "bulletin": 94, "1982": [94, 202], "r548": 94, "transact": [94, 211], "1985": [94, 127, 148, 192, 262], "356": [94, 212, 235], "362": 94, "lookup": [94, 103, 107, 227], "huge": [94, 107, 213, 253], "entail": 94, "delic": [94, 204], "albeit": [94, 266], "mimic": [94, 95, 197, 256], "irrespect": [94, 230, 233, 258], "line_integr": 94, "as_sum": 94, "subinterv": 94, "trapezoid": [94, 103, 237], "730": 94, "809": 94, "decai": 94, "r549": 94, "riemann_sum": 94, "riemann_summation_method": 94, "r550": 94, "cauchy_principal_valu": 94, "r551": 94, "cauchyprincipalvalu": 94, "int_a": 94, "uvar": 94, "3aissu": 94, "3aopen": 94, "3aintegr": 94, "gauss_legendr": 94, "n_digit": 94, "legendr": [94, 107, 213, 217, 230], "r552": 94, "w_i": [94, 151, 213, 233], "7746": 94, "55556": 94, "88889": 94, "86114": 94, "33998": 94, "34785": 94, "65215": 94, "gauss_laguerr": 94, "gauss_gen_laguerr": 94, "gauss_hermit": 94, "gauss_chebyshev_t": 94, "gauss_chebyshev_u": 94, "gauss_jacobi": 94, "gauss_lobatto": 94, "gaussian_quadratur": 94, "r553": 94, "fsu": 94, "jburkardt": 94, "cpp_src": 94, "legendre_rul": 94, "laguerr": [94, 213, 217], "r554": 94, "41577": 94, "2943": 94, "2899": 94, "71109": 94, "27852": 94, "010389": 94, "22285": 94, "1889": 94, "9927": 94, "7751": 94, "8375": 94, "983": 94, "45896": 94, "417": [94, 229], "11337": 94, "010399": 94, "00026102": 94, "9855e": 94, "93laguerre_quadratur": 94, "r555": 94, "laguerre_rul": 94, "hermit": [94, 98, 103, 104, 206, 212, 213, 217, 237], "r556": 94, "2247": 94, "29541": 94, "1816": 94, "3506": 94, "3358": 94, "43608": 94, "00453": 94, "15707": 94, "72463": 94, "hermite_quadratur": 94, "r557": 94, "hermite_rul": 94, "r558": 94, "gen_hermite_rul": 94, "r559": 94, "19016": 94, "7845": 94, "5253": 94, "4493": 94, "31413": 94, "00906": 94, "97851": 94, "9904": 94, "3193": 94, "53087": 94, "67721": 94, "11895": 94, "0023152": 94, "r560": 94, "gen_laguerre_rul": 94, "r561": 94, "86602": 94, "0472": 94, "96593": 94, "70711": 94, "25882": 94, "5236": 94, "93gauss_quadratur": 94, "r562": 94, "chebyshev1_rul": 94, "r563": 94, "3927": 94, "7854": 94, "90097": 94, "62349": 94, "22252": 94, "084489": 94, "27433": 94, "42658": 94, "r564": 94, "chebyshev2_rul": 94, "jacobi": [94, 107, 120, 213, 217], "r565": 94, "7063": 94, "0973": 94, "33795": 94, "87174": 94, "5917": 94, "2093": 94, "050584": 94, "22169": 94, "39439": 94, "93jacobi_quadratur": 94, "r566": 94, "jacobi_rul": 94, "r567": 94, "gegenbauer_rul": 94, "lobatto": 94, "r568": 94, "3333": 94, "44721": 94, "16667": 94, "83333": 94, "93lobatto_rul": 94, "r569": 94, "20200118141346": 94, "page_888": 94, "intpoli": 94, "chin": 94, "al": [94, 132, 161, 210, 226, 229], "2015": [94, 128, 236], "unit_cub": 94, "polytope_integr": 94, "eric": [94, 211], "jean": 94, "lasserr": 94, "sukumar": 94, "nonconvex": 94, "967": 94, "981": 94, "dilbert": 94, "engr": 94, "ucdavi": 94, "suku": 94, "max_degre": [94, 213], "689": [94, 111], "21875": 94, "octahedron": 94, "trivari": 94, "enable_automatic_int_sympif": 95, "enable_automatic_symbol": 95, "init_ipython_sess": 95, "argv": [95, 248], "init_python_sess": 95, "use_latex": [95, 197, 293], "quiet": 95, "str_printer": [95, 197], "latex_print": [95, 197], "pylab": 95, "stringifi": [95, 197], "sstrrepr": [95, 197, 217], "lexograph": [95, 197], "\u03b8": [95, 126, 154, 236], "int_to_integ": 95, "decistmt": 95, "f401": 95, "0x12": 95, "num_column": [95, 197, 217, 233], "no_glob": [95, 197], "ip": [95, 170, 176, 197], "forecolor": [95, 197], "backcolor": [95, 197], "fontsiz": [95, 197, 217], "10pt": [95, 197, 217], "latex_mod": [95, 197], "print_builtin": [95, 197], "interactiveconsol": [95, 197], "preambl": [95, 197, 217], "handwritten": [95, 197], "ctan": [95, 197], "pkg": [95, 197], "dvi": [95, 197, 217], "foreground": [95, 197], "black": [95, 167, 178, 197, 217, 293], "white": [95, 197, 237], "documentclass": [95, 197, 217], "dpi": [95, 197], "u03b8": 95, "dvip": 95, "r570": 95, "r571": 95, "the_68_standard_colors_known_to_dvip": 95, "root_system": 96, "rootsystem": 96, "cartantyp": 96, "cartan": 96, "subalgebra": 96, "adjoint": [96, 98, 103, 159, 163], "hyperplan": 96, "k_y": 96, "r572": 96, "r573": 96, "humphrei": 96, "add_as_root": 96, "root1": 96, "root2": 96, "add_simple_root": 96, "newroot": 96, "all_root": [96, 107, 213], "cartan_matrix": 96, "dynkin_diagram": 96, "dynkin": 96, "root_spac": 96, "simple_root": 96, "type_a": 96, "typea": 96, "basic_root": 96, "iin": 96, "jth": [96, 206, 236], "ijth": 96, "cartan_typ": 96, "highest_root": 96, "lie_algebra": 96, "positive_root": 96, "type_b": 96, "typeb": 96, "b4": 96, "b3": [96, 132, 149, 192, 268], "type_c": 96, "typec": 96, "type_d": 96, "dmension": 96, "type_": 96, "e6": 96, "type_f": 96, "typef": 96, "f_4": [96, 128], "f4": [96, 203], "type_g": 96, "typeg": 96, "weyl_group": 96, "weylgroup": 96, "semisimpl": 96, "isometri": 96, "coxet": 96, "coxeter_diagram": 96, "undirect": [96, 255], "s_is_j": 96, "delete_doubl": 96, "element_ord": 96, "weylelt": 96, "group_nam": 96, "group_ord": 96, "192": 96, "matrix_form": 96, "cartantype_gener": 96, "standard_cartan": 96, "dynkindiagram": 96, "cartanmatrix": 96, "sopform": 97, "minterm": 97, "dontcar": 97, "simplified_pair": 97, "combo": 97, "outcom": [97, 185, 237], "posform": 97, "r574": 97, "quin": 97, "mccluskey_algorithm": 97, "r575": 97, "27t": 97, "care_term": 97, "r576": 97, "r577": 97, "anfform": 97, "truthvalu": 97, "anf": 97, "zhegalkin": 97, "r578": 97, "zhegalkin_polynomi": 97, "booleantru": 97, "greet": 97, "booleanfals": 97, "universalset": [97, 225], "nand": 97, "xnor": 97, "gate": [97, 162, 167, 169, 175, 176, 178, 279], "perspect": [97, 107, 118, 187, 203, 250, 267, 271], "multiplex": 97, "disjunct": 97, "to_anf": 97, "oplu": [97, 166], "to_cnf": 97, "cnf": 97, "mccluskei": 97, "to_dnf": 97, "to_nnf": 97, "nnf": 97, "is_anf": 97, "is_cnf": 97, "is_dnf": 97, "is_nnf": 97, "gateinputcount": 97, "simplify_log": 97, "fewest": [97, 176], "r579": 97, "bool_map": 97, "bool1": 97, "bool2": 97, "function1": 97, "function2": 97, "distribute_and_over_or": 97, "distribute_or_over_and": 97, "distribute_xor_over_and": 97, "eliminate_impl": 97, "truth_tabl": 97, "ibin": [97, 255], "integer_to_term": 97, "0001111011": [97, 255], "1101111000": [97, 255], "term_to_integ": 97, "bool_maxterm": 97, "maxterm": 97, "complement": [97, 100, 213, 225, 236], "r580": 97, "canonical_normal_form": 97, "indexing_maxterm": 97, "bool_minterm": 97, "r581": 97, "indexing_minterm": 97, "bool_monomi": 97, "anf_coeff": 97, "to_int_repr": 97, "all_model": 97, "unsatisfi": 97, "use_model": 97, "unsat": 97, "dirac": [98, 103, 116, 120, 121, 180, 217], "__abs__": [98, 208], "__add__": [98, 208, 212], "__len__": 98, "96": [98, 103, 237], "mismatch": 98, "matrix_multiply_elementwis": [98, 103], "col": [98, 100, 103, 106, 118, 149, 206, 212, 290], "col_del": [98, 103, 290], "col_join": [98, 103, 134], "col_insert": [98, 290], "row_insert": [98, 290], "row_join": [98, 103, 134], "companion": [98, 100], "c0": [98, 100, 224, 233, 235], "sparsematrix": [98, 103, 106, 218, 229], "diag": [98, 100, 103, 106, 149, 206, 243, 290], "immutablematrix": [98, 99, 100, 118, 192, 237, 262, 265, 290], "blockmatrix": [98, 100, 103], "sparsetool": [98, 106], "band": [98, 106], "kth": [98, 107], "rowslist": [98, 206], "colslist": 98, "submatrix": [98, 103, 210, 237], "get_diag_block": [98, 100, 103], "decoupl": 98, "hstack": [98, 206], "is_anti_symmetr": 98, "is_diagon": [98, 103], "is_low": [98, 206], "is_upp": [98, 206], "matrixeigen": [98, 103], "is_diagonaliz": [98, 103], "is_hermitian": [98, 103], "is_lower_hessenberg": 98, "hessenberg": [98, 103], "superdiagon": 98, "is_upper_hessenberg": 98, "is_strongly_diagonally_domin": 98, "strongli": [98, 103, 206, 255], "m1": [98, 103, 107, 110, 111, 153, 161, 179, 181, 185, 230, 233, 238, 243], "subdiagon": [98, 103], "is_weakly_diagonally_domin": 98, "weakli": [98, 255], "vacuou": 98, "jordan_block": [98, 103], "eigenvalu": [98, 103, 132, 134, 176, 179, 288], "eigenv": [98, 103, 132, 134, 149, 176, 288, 290], "r582": 98, "jordan_matrix": [98, 233], "dotprodsimp": 98, "blowup": [98, 206], "multiply_elementwis": [98, 103], "hadamard": [98, 100, 103, 166, 167, 178, 217], "elementwis": [98, 100, 103, 238], "300": [98, 103, 107, 110, 198, 203, 214, 271], "a_0": [98, 103, 220, 230, 233, 238, 294], "vdot": [98, 100, 103, 187], "alpha_0": 98, "alpha_1": [98, 107, 212], "alpha_": [98, 202], "permute_col": 98, "permute_row": 98, "mulsimp": 98, "rmultipli": 98, "__rmul__": 98, "rot90": 98, "anticlockwis": [98, 114], "row_del": [98, 103, 290], "todod": 98, "tolist": [98, 238], "vech": 98, "check_symmetri": 98, "vstack": [98, 206], "w_": [98, 212], "wminu": 98, "wplu": 98, "r583": 98, "mathwork": [98, 116, 237, 290], "cleve": 98, "r584": 98, "claredon": 98, "oxford": 98, "662": 98, "intm": 98, "mutabledensematrix": [99, 206, 258], "densematrix": [99, 103], "ldldecomposit": [99, 103], "ldl": [99, 103], "choleski": [99, 103], "ludecomposit": [99, 100, 103, 206, 290], "qrdecomposit": [99, 103], "as_immut": 99, "lower_triangular_solv": [99, 103], "upper_triangular_solv": [99, 103], "gauss_jordan_solv": [99, 103], "cholesky_solv": [99, 103], "diagonal_solv": [99, 103], "ldlsolv": [99, 103], "qrsolv": [99, 103], "pinv_solv": [99, 103], "cramer_solv": [99, 103], "permutedim": [100, 238, 239], "arraytensorproduct": [100, 238, 239], "from_index_summ": 100, "first_index": 100, "last_index": 100, "longrightarrow": 100, "matpow": [100, 217], "hadamard_product": 100, "aka": 100, "hadamardproduct": [100, 217], "hadamardpow": [100, 217], "ddot": [100, 103, 136, 145, 197, 200, 217, 294], "functionmatrix": 100, "lazili": [100, 223, 255], "342923500": 100, "permutationmatrix": [100, 103], "matrixpermut": 100, "companionmatrix": 100, "matrixset": [100, 225], "submatric": [100, 103, 206, 237], "block_collaps": 100, "dat": [100, 255], "irregular": [100, 103], "ldudecomposit": 100, "ldu": 100, "2x2": [100, 106, 151, 206, 233], "udldecomposit": 100, "udl": 100, "schur": 100, "pinv": [100, 103], "r585": 100, "schur_compl": 100, "blockdiagmatrix": [100, 103], "diag_block": 100, "bridg": [101, 112, 114, 132, 256], "tension": [101, 112], "gramschmidt": 103, "m2": [103, 107, 110, 111, 129, 153, 161, 179, 181, 185, 212, 230, 233, 238, 243], "126": [103, 107, 216], "150": [103, 118, 230], "v3": [103, 192, 196, 268], "glue": 103, "m3": [103, 161, 230, 238], "adj": [103, 206], "qr": 103, "cheat": 103, "soln": 103, "gram": [103, 186, 187, 189], "schmidt": 103, "out1": 103, "out2": 103, "1692": 103, "1551": 103, "423": 103, "6707": 103, "spot": [103, 150], "eigenvector": [103, 132, 176, 177, 202], "nullspac": [103, 206], "matrixdetermin": 103, "adjug": [103, 206], "berkowitz": [103, 206], "bareiss": [103, 206], "bird": 103, "cofactor_matrix": 103, "charpoli": [103, 206, 290], "_simplifi": 103, "purepoli": [103, 206, 213], "samuelson": [103, 206], "minor_submatrix": 103, "iszerofunc": [103, 290], "r586": 103, "barei": 103, "det_lu": 103, "functiontyp": 103, "_iszero": [103, 290], "_is_zero_after_expand_mul": 103, "unrecogn": 103, "nonsquarematrixerror": [103, 233], "i3": [103, 119, 132, 149, 243], "1072": 103, "1074": 103, "ipl": 103, "006": 103, "ryser": 103, "r587": 103, "prof": 103, "ben": 103, "berkelei": 103, "bernd": 103, "ban275": 103, "r588": 103, "permanent_": 103, "r589": 103, "r590": 103, "rectangular": [103, 225, 236, 266], "0904": 103, "3251": 103, "matrixreduct": 103, "echelon_form": [103, 290], "with_pivot": 103, "echelon": [103, 206, 236, 290], "elementary_col_op": 103, "kn": [103, 110, 111, 112], "col1": 103, "col2": 103, "km": [103, 107, 122, 127, 134, 136, 139, 140, 144, 146, 149, 188], "elementary_row_op": 103, "row1": 103, "row2": 103, "is_echelon": [103, 290], "rref": [103, 206], "pivot": [103, 206, 290], "normalize_last": 103, "rref_matrix": [103, 206], "rref_pivot": [103, 206], "301369863013699": 103, "712328767123288": 103, "noramlize_last": 103, "matrixsubspac": 103, "subspac": [103, 212], "columnspac": [103, 206], "rowspac": [103, 206], "orthonorm": [103, 149, 177, 201, 266], "rankcheck": 103, "r591": 103, "93schmidt_process": 103, "eigen": [103, 158], "bidiagonal_decomposit": 103, "ubv": 103, "bidiagon": 103, "bidiagn": 103, "r592": 103, "golub": 103, "van": [103, 107, 211], "loan": 103, "r593": 103, "vslobodi": 103, "household": 103, "r594": 103, "r595": 103, "reals_onli": 103, "error_when_incomplet": 103, "eig": [103, 132, 149], "matrixerror": 103, "got": [103, 204, 207, 210, 213, 216, 248, 249, 255, 256, 286, 288, 289], "eigenvect": [103, 132, 149, 176, 290], "tidi": 103, "artifact": 103, "ret": 103, "eigenspac": 103, "rag": 103, "a_3": 103, "diagonaliz": [103, 290], "is_indefinit": 103, "semidefinit": [103, 237], "plot3d": [103, 203], "is_positive_definit": 103, "is_positive_semidefinit": 103, "is_negative_definit": 103, "is_negative_semidefinit": 103, "defer": [103, 259], "r596": 103, "definiteness_of_a_matrix": 103, "r597": 103, "positivedefinitematrix": 103, "r598": 103, "amer": 103, "259": 103, "264": [103, 235], "r599": 103, "r600": 103, "r601": 103, "r602": 103, "r603": 103, "r604": 103, "r605": 103, "r606": 103, "r607": 103, "r608": 103, "r609": 103, "r610": 103, "jordan_form": 103, "calc_transform": 103, "left_eigenvect": 103, "singular_valu": 103, "condition_numb": 103, "matrixcalculu": 103, "hessian": 103, "wronskian": [103, 233], "simpfunc": 103, "permutebkwd": 103, "permutefwd": 103, "lucombin": 103, "defici": [103, 107, 236], "matrixi": 103, "ludecomposition_simpl": [103, 290], "ludecompositionff": 103, "pa": [103, 127, 129, 144, 147, 150], "r611": 103, "zhou": 103, "jeffrei": [103, 229], "frontier": [103, 225], "china": 103, "67": [103, 210, 211], "2008": [103, 202, 211, 213, 217], "row_swap": 103, "permute_backward": 103, "permute_forward": 103, "intiuit": 103, "lu_": 103, "_find_reasonable_pivot": 103, "qr_solv": 103, "167": 103, "158": [103, 111], "27261": 103, "30625": 103, "348": 103, "1914": 103, "6125": [103, 107], "30589": 103, "198": 103, "1225": 103, "q_aug": 103, "r_aug": 103, "analytic_func": 103, "connected_compon": [103, 255], "connected_components_decomposit": 103, "det_method": 103, "cramer": [103, 127, 233], "46": [103, 107, 110, 187, 216, 235, 237], "r612": 103, "27s_rule": 103, "explicit_formulas_for_small_system": 103, "relax": [103, 109], "3x1": 103, "1x3": 103, "hat": [103, 126, 143, 191, 192, 197, 198, 200, 201, 266, 267, 269, 271, 272], "conjugate_convent": 103, "dual": [103, 174, 180], "anti_symmetr": 103, "speak": [103, 212, 269], "freevar": 103, "underdetermin": [103, 206, 235, 236], "free_var_index": 103, "tau0": [103, 236, 237], "tau1": 103, "taus_zero": 103, "sol_uniqu": 103, "r613": 103, "gaussian_elimin": 103, "try_block_diag": 103, "inverse_g": [103, 290], "inverse_lu": [103, 290], "inverse_adj": [103, 290], "inverse_ch": 103, "inverse_ldl": 103, "inverse_qr": 103, "inv_mod": 103, "cof": 103, "inverse_block": 103, "blockwis": 103, "ntop": 103, "key2bound": 103, "key2ij": 103, "reciproc": [103, 237, 294], "fro": 103, "sing": 103, "spectral": 103, "rd": [103, 132, 217], "r614": 103, "penrose_pseudoinvers": 103, "arbitrary_matrix": 103, "wn_m": 103, "_w0_0": 103, "_w1_0": 103, "_w2_0": 103, "59": [103, 233], "r615": 103, "obtaining_all_solutions_of_a_linear_system": 103, "print_nonzero": [103, 255], "symb": [103, 217], "rank_decomposit": 103, "r616": 103, "rank_factor": 103, "r617": 103, "piziak": 103, "odel": 103, "magazin": 103, "2307": 103, "2690882": 103, "singular_value_decomposit": 103, "condens": [103, 236], "v_aug": 103, "u_aug": 103, "s_aug": 103, "gj": 103, "solve_least_squar": 103, "strongly_connected_compon": [103, 206, 255], "62": [103, 210], "strongly_connected_components_decomposit": 103, "rowstart": 103, "rowend": 103, "rowsep": 103, "colsep": 103, "strprinter": [103, 197], "upper_hessenberg_decomposit": 103, "213": 103, "134": 103, "216": [103, 210], "hessenbergdecomposit": 103, "angular": [103, 110, 120, 123, 126, 129, 134, 135, 136, 137, 139, 141, 143, 146, 149, 151, 155, 156, 158, 161, 179, 183, 192, 196, 202], "rot_ccw_axis3": 103, "retriv": 103, "jordan_cel": 103, "varlist": 103, "r618": 103, "hessian_matrix": 103, "vlist": 103, "r619": 103, "casoratian": 103, "kernel": [103, 204, 210, 212, 235], "vanish": [103, 182, 210, 213, 216, 233, 262], "rsolve_hyp": [103, 235], "randmatrix": 103, "percent": [103, 236], "prng": 103, "percentag": [103, 107], "rot_given": 103, "diment": 103, "kk": 103, "ji": [103, 239], "rot_axis1": 103, "rot_axis2": 103, "rot_axis3": 103, "rot_ccw_axis1": 103, "rot_ccw_axis2": 103, "r620": 103, "givens_rot": 103, "list2numpi": 103, "dtype": [103, 108, 204, 206, 207, 208, 217, 256], "matrix2numpi": 103, "symarrai": 103, "ndarrai": [103, 237, 243, 249], "prefix_i1_i2_": 103, "a_0_0": 103, "a_0_1": 103, "a_0_2": 103, "a_1_0": 103, "a_1_1": 103, "a_1_2": 103, "a_0_0_0": 103, "a_0_0_1": 103, "a_0_1_0": 103, "a_0_1_1": 103, "a_0_2_0": 103, "a_0_2_1": 103, "a_1_0_0": 103, "a_1_0_1": 103, "a_1_1_0": 103, "a_1_1_1": 103, "a_1_2_0": 103, "a_1_2_1": 103, "a2idx": 103, "normalform": [104, 206], "hermite_normal_form": [104, 206, 212], "check_rank": [104, 206], "hnf": [104, 206, 212], "explos": [104, 206], "believ": [104, 107, 206], "dmdomainerror": [104, 206], "dmshapeerror": [104, 206], "r621": 104, "mutablesparsematrix": 105, "_doktocsr": 106, "csr": 106, "ja": 106, "ia": 106, "_csrtodok": 106, "dok": [106, 206], "1x1": [106, 237], "vert": [106, 198, 201, 271], "saw": [106, 207, 294], "sieve_interv": 107, "dynam": [107, 115, 116, 118, 122, 124, 127, 128, 129, 131, 134, 142, 144, 145, 146, 147, 148, 149, 150, 191, 192, 194, 196, 200, 201, 252, 253, 262], "eratosthen": 107, "_reset": [107, 213], "_list": 107, "extend_to_no": 107, "mobiusrang": 107, "primerang": 107, "10th": 107, "totientrang": 107, "1e11": 107, "50000": 107, "primal": [107, 204], "1299709": 107, "r622": 107, "prime_number_theorem": 107, "table_of_": 107, "cf": [107, 210], "28x": 107, "2c_x_": 107, "2f_log_x": 107, "2c_and_li": 107, "r623": 107, "approximations_for_the_nth_prime_numb": 107, "r624": 107, "27_number": 107, "arr1": 107, "arr2": 107, "prevprim": 107, "9th": 107, "nextprim": 107, "occupi": [107, 182, 243], "conjectur": [107, 210], "twin": 107, "bertrand": 107, "brocard": 107, "primori": 107, "r625": 107, "r626": 107, "utm": 107, "postul": 107, "112": [107, 210, 214], "r627": 107, "s_postul": 107, "primefactor": 107, "argu": 107, "cycle_length": 107, "nmax": 107, "brent": [107, 252], "floyd": 107, "cycle_detect": 107, "17737": 107, "20000": 107, "compositepi": 107, "831": 107, "smoothness_p": 107, "sm": [107, 132, 149, 204], "psm": 107, "govern": 107, "10431": 107, "21477639576571": 107, "4410317": 107, "1787": 107, "4869863": 107, "2434931": 107, "multiplicity_in_factori": 107, "nfac": 107, "52818775009509558395695966887": 107, "is2pow": 107, "pollard_rho": 107, "max_step": 107, "pollard": [107, 233], "leader": 107, "16843009": 107, "32767": 107, "4i": 107, "3i": 107, "2489": 107, "1482": 107, "285": [107, 235], "leadup": 107, "r628": 107, "crandal": 107, "carl": [107, 252], "pomer": [107, 252], "229": 107, "231": [107, 192], "pollard_pm1": 107, "likelihood": 107, "1009": 107, "am": [107, 187, 217], "255": 107, "crack": 107, "617": 107, "1786": 107, "worst": [107, 213, 233], "scenario": [107, 237], "divisisor": 107, "realist": 107, "r629": 107, "236": 107, "r630": 107, "20150716201437": 107, "washington": 107, "2007": [107, 148, 252], "ent": 107, "node81": 107, "r631": 107, "toronto": 107, "yuvalf": 107, "use_ecm": 107, "65537": [107, 216], "1407633717262338957430697921446883": 107, "991": 107, "202916782076162456022877024859": 107, "4200": 107, "1764": 107, "toggl": [107, 203], "12345678910111213141516": 107, "2507191691": 107, "1231026625769": 107, "factorrat": 107, "rat": 107, "987": 107, "10000000001": 107, "99009901": 107, "divisor_count": 107, "tim": [107, 255], "1010381": 107, "proper_divisor": 107, "proper_divisor_count": 107, "udivisor": 107, "udivisor_count": 107, "r632": 107, "unitary_divisor": 107, "r633": 107, "unitarydivisor": 107, "r634": 107, "unitarydivisorfunct": 107, "antidivisor": 107, "r635": 107, "margin": [107, 118, 203, 237], "antidivisor_count": 107, "a066272": 107, "a066272a": 107, "r636": 107, "r637": 107, "27s_totient_funct": 107, "r638": 107, "totientfunct": 107, "r639": 107, "carmichael_funct": 107, "r640": 107, "carmichaelfunct": 107, "sigma_k": 107, "m_i": [107, 202, 210], "m_ik": 107, "r641": 107, "divisor_funct": 107, "udivisor_sigma": 107, "47450": 107, "152": 107, "r642": 107, "core_t": 107, "core_2": 107, "squarefre": [107, 212], "cubefre": 107, "9424": 107, "1178": 107, "379238": 107, "square_factor": [107, 230], "r643": 107, "free_integ": 107, "squarefree_cor": 107, "primenu": 107, "r644": 107, "primeomega": 107, "r645": 107, "mersenne_prime_expon": 107, "mersenn": 107, "4423": 107, "r646": 107, "perfectnumb": 107, "r647": 107, "perfect_numb": 107, "is_mersenne_prim": 107, "r648": 107, "mersenneprim": 107, "abund": 107, "is_abund": 107, "r649": 107, "abundantnumb": 107, "is_defici": 107, "r650": 107, "deficientnumb": 107, "is_amic": 107, "amic": 107, "220": [107, 213], "r651": 107, "amicable_numb": 107, "symmetric_residu": 107, "v_i": [107, 212, 235], "65": [107, 118, 210, 237], "639985": [107, 210], "912285": [107, 210], "954": 107, "gf_crt": [107, 210], "solve_congru": [107, 210], "programm": [107, 217], "galoistool": [107, 210], "crt1": [107, 210], "crt2": [107, 210], "397042": 107, "803206": 107, "gf_crt1": [107, 210], "4536": 107, "gf_crt2": [107, 210], "remainder_modulus_pair": 107, "mi": [107, 217], "k1": [107, 149, 180, 207, 208, 210], "k2": [107, 149, 207], "c_kn": 107, "binomial_coefficients_list": 107, "multinomial_coeffici": 107, "k_m": 107, "k_i": [107, 210, 227], "yann": 107, "laigl": 107, "chapui": 107, "permiss": [107, 202], "multinomial_coefficients_iter": 107, "_tupl": 107, "m53": 107, "partitions_": 107, "npartit": 107, "hardi": 107, "rademach": [107, 237], "r652": 107, "1958": [107, 202], "partitionfunctionp": 107, "is_euler_pseudoprim": 107, "pseudoprim": 107, "r653": 107, "euler_pseudoprim": 107, "prep": [107, 233, 234], "r654": 107, "mersenneforum": 107, "showpost": 107, "110896": 107, "mr": 107, "miller": 107, "rabin": 107, "wit": 107, "1373651": 107, "479001599": 107, "r655": 107, "135": 107, "138": 107, "93rabin_primality_test": 107, "deterministic_vari": 107, "is_lucas_prp": 107, "selfridg": 107, "377": 107, "1159": 107, "1829": 107, "3827": 107, "5459": 107, "5777": 107, "9071": 107, "9179": 107, "bailli": 107, "wagstaff": 107, "1980": [107, 255], "mpq": [107, 206, 207], "lucaspseudoprim": 107, "a217120": 107, "lucas_pseudoprim": 107, "is_strong_lucas_prp": 107, "bpsw": 107, "10877": 107, "16109": 107, "18971": 107, "a217255": 107, "psw_primality_test": 107, "is_extra_strong_lucas_prp": 107, "grantham": 107, "mo": [107, 149, 217], "jone": [107, 154], "preprint": 107, "a217719": 107, "perl": 107, "989": 107, "3239": 107, "jon": 107, "mcom": 107, "234": 107, "01197": 107, "counterexampl": [107, 294], "1e3": 107, "1e23": [107, 258], "near_int": 107, "strong_pseudoprim": 107, "is_gaussian_prim": 107, "r656": 107, "gaussian_prim": 107, "residue_ntheori": [107, 210], "n_order": 107, "2q": 107, "primitive_root": [107, 212], "r657": 107, "stein": [107, 233], "r658": 107, "hackman": 107, "sqrt_mod": 107, "sqrt_mod_it": 107, "quadratic_residu": 107, "nthroot_mod": 107, "109": [107, 211, 230], "r659": 107, "is_nthpow_residu": 107, "r660": 107, "is_quad_residu": 107, "legendre_symbol": 107, "genfrac": 107, "nonresidu": 107, "alpha_2": [107, 212], "alpha_k": 107, "kronecker_symbol": 107, "r661": 107, "discrete_log": 107, "prime_ord": 107, "giant": [107, 236], "pohlig": 107, "r662": 107, "discretelogarithm": 107, "r663": 107, "cryptographi": [107, 273, 280], "menez": 107, "vanston": 107, "quadratic_congru": 107, "polynomial_congru": [107, 210], "3257": 107, "gf_csolv": [107, 210], "binomial_mod": 107, "r664": 107, "24310": 107, "continued_fract": 107, "continued_fraction_period": 107, "continued_fraction_reduc": 107, "continued_fraction_converg": 107, "continued_fraction_iter": 107, "106": 107, "103993": 107, "33102": 107, "104348": 107, "33215": 107, "208341": 107, "66317": 107, "292": 107, "r665": 107, "discrimin": [107, 208, 210, 212, 213], "r666": 107, "periodic_continued_fract": 107, "r667": 107, "rosen": 107, "379": [107, 213], "381": 107, "januari": 107, "1992": [107, 211, 235, 255], "233": [107, 211, 233], "718281835": 107, "287": 107, "count_digit": 107, "1111339": 107, "0xfa": 107, "c77": 107, "is_palindrom": [107, 255], "palindrom": 107, "0o121": 107, "oct": 107, "0o171": 107, "fermion": [107, 182], "r668": 107, "b6bius_funct": 107, "r669": 107, "thoma": [107, 148], "koshi": 107, "egyptian_fract": 107, "greedi": [107, 210, 226, 229], "egyptian": 107, "r670": 107, "jewett": 107, "takenouchi": 107, "3192": 107, "1118": 107, "2580": 107, "sylvest": [107, 210], "r671": 107, "seldom": 107, "blow": 107, "doubli": 107, "exhibit": [107, 202, 212, 226], "singli": 107, "tendenc": 107, "r672": 107, "1921": 107, "golumb": 107, "1962": 107, "propos": 107, "bleicher": 107, "1972": 107, "r673": 107, "420": [107, 230], "140": 107, "574": 107, "2788": 107, "6460": 107, "11590": 107, "33062": 107, "113820": 107, "greedy_algorithm_for_egyptian_fract": 107, "uci": 107, "eppstein": 107, "numth": 107, "egypt": 107, "20180413004012": 107, "ami": 107, "ektf": 107, "hu": [107, 206], "finalpdf": 107, "ami_42_from129to134": 107, "bbp_pi": 107, "pi_hex_digit": 107, "hex": 107, "3243f6a8885a30": 107, "0x3243f6a8885a30": 107, "0x324": 107, "r674": 107, "numberworld": 107, "subexponenti": 107, "comfort": [107, 108], "15154262241479": 107, "15423094826093": 107, "799333555511111": 107, "809709509409109": 107, "888888877777777": 107, "914148152112161": 107, "factoris": [107, 207, 208, 213, 233], "max_curv": 107, "lenstra": [107, 206], "ecm_one_factor": 107, "pseudorandom": [107, 255], "25645121643901801": 107, "5394769": 107, "4753701529": 107, "9804659461513846513": 107, "4641991": 107, "2112166839943": 107, "7060005655815754299976961394452809": 107, "6988699669998001": 107, "1010203040506070809": 107, "122921448543883967430908091422761898618349713604256384403202282756086473494959648313841": 107, "2709077133180915240135586837960864768806330782747": 107, "248": 107, "prime_bound": 107, "error_term": 107, "siq": 107, "modn": 107, "r675": 107, "semanticscholar": 107, "5c52": 107, "8a975c1405bd35c65993abf5a4edb667c1db": 107, "r676": 107, "rieselprim": 107, "ziki": 107, "initializing_quadratic_siev": 107, "5915587277": 107, "3267000013": 107, "000507214304613640": 108, "microsecond": 108, "000507214304614": 108, "hundr": [108, 256, 288], "nanosecond": 108, "84147098": [108, 256, 283], "84119981": 108, "84092844": 108, "05426074": 108, "05433146": 108, "05440211": 108, "nano": 108, "manufactur": 108, "asnumpi": 108, "jnp": 108, "asarrai": 108, "84147096": 108, "8411998": 108, "05426079": 108, "05433151": 108, "autowrap": [108, 242, 250, 254, 281], "implemented_funct": [108, 249, 256], "qualiti": [108, 217], "50u": 108, "1u": 108, "10n": 108, "sympy_pars": 109, "local_dict": 109, "lambda_not": 109, "repeated_decim": 109, "auto_numb": 109, "factorial_not": 109, "global_dict": 109, "standard_transform": 109, "implicit_multiplication_appl": 109, "implicit_appl": 109, "implicit_multipl": 109, "convert_equals_sign": 109, "function_exponenti": 109, "stringify_expr": 109, "eval_expr": 109, "name_dict": 109, "fullform": 109, "setdelai": 109, "datatyp": [109, 208, 217, 250], "split_symbol": 109, "split_symbols_custom": 109, "_token_splitt": 109, "can_split": 109, "unsplitt": 109, "10sin": 109, "3xyz": 109, "2111": 109, "latex2sympi": 109, "typograph": 109, "stricter": 109, "liber": [109, 122, 288], "gracefulli": [109, 217, 241], "618": 109, "latexparsingerror": 109, "sym_expr": 109, "sympyexpress": 109, "source_cod": 109, "return_expr": 109, "src2": 109, "convert_to_expr": 109, "convert_to_c": 109, "src3": 109, "convert_to_python": 109, "src_code": 109, "filenam": [109, 217, 248, 249, 250, 258], "convert_to_fortran": 109, "continuum_mechan": [110, 111, 112, 114], "elastic_modulu": 110, "second_mo": 110, "base_char": 110, "withstand": [110, 111], "character": [110, 111, 198, 201, 224, 237, 243, 271], "profil": [110, 118], "shear": [110, 111], "meter": [110, 111, 112, 153, 156, 185, 186, 187, 188, 189], "downward": [110, 111, 112, 114, 212], "apply_load": [110, 111, 112, 114], "bc_deflect": [110, 111], "boundary_condit": 110, "solve_for_reaction_load": [110, 111], "shear_forc": [110, 111], "bending_mo": [110, 111], "reaction": [110, 111, 112, 114], "upward": [110, 212], "reaction_load": [110, 111, 112, 114], "applied_load": 110, "nm": [110, 111, 180, 238], "pointload": [110, 111], "ramp": [110, 111], "parabol": 110, "apply_support": [110, 114], "loc": 110, "freedom": [110, 126, 127, 131, 133, 136, 142, 237, 279], "roller": [110, 111, 114], "r_10": 110, "r_30": 110, "4000": [110, 111], "bc_slope": [110, 111], "cross_sect": 110, "elast": [110, 111], "12000": 110, "draw": [110, 114, 162, 217, 237], "pictori": 110, "ild_moment": 110, "ild_react": 110, "ild_shear": 110, "axial": [110, 151], "hing": [110, 111, 143], "cantilev": [110, 111], "666666666666667": [110, 111], "max_bmoment": 110, "max_deflect": 110, "max_shear_forc": 110, "plot_bending_mo": [110, 111], "gpa": 110, "400": [110, 203, 213], "13750": 110, "31250": 110, "plot_deflect": [110, 111], "00138541666666667": 110, "86458333333333e": 110, "04166666666667e": 110, "20833333333333e": 110, "51041666666667e": 110, "plot_ild_mo": 110, "solve_for_ild_mo": 110, "1kn": 110, "r_0": 110, "r_8": 110, "solve_for_ild_react": 110, "plot_ild_react": 110, "5kn": 110, "r_7": 110, "plotgrid": 110, "plot_ild_shear": 110, "solve_for_ild_shear": 110, "plot_loading_result": [110, 111], "subplot": [110, 203], "plot_shear_forc": [110, 111], "plot_shear_stress": 110, "stress": 110, "6875": 110, "2500": 110, "15625": [110, 189], "plot_slop": [110, 111], "59375e": 110, "125e": 110, "08333333333333e": 110, "0001953125": 110, "point_cflexur": 110, "overhang": [110, 111], "10kn": 110, "20kn": [110, 111], "3kn": 110, "remove_load": [110, 112, 114, 123], "shear_stress": 110, "beam3d": 110, "shear_modulu": 110, "apply_moment_load": 110, "solve_slope_deflect": 110, "r677": 110, "aau": 110, "jc": 110, "femtesemest": 110, "beams3d": 110, "angular_deflect": 110, "depict": [110, 198, 236, 271], "axial_forc": 110, "axial_stress": 110, "load_vector": 110, "max_bending_mo": 110, "16000": 110, "495": 110, "10793": 110, "6400": 110, "301": [110, 227, 230], "560": 110, "2400": 110, "moment_load_vector": 110, "40000": 110, "4013": 110, "90300": 110, "1520": 110, "903": 110, "1600": [110, 111], "172": 110, "polar_mo": 110, "i1": [110, 119, 132, 149, 243], "1350": 110, "solve_for_tors": 110, "torsion": 110, "torqu": [110, 123, 127, 129, 131, 137, 144, 145, 147, 149], "torsional_mo": 110, "________________": [111, 233], "_______________v": 111, "_______________": 111, "equilibrium": [111, 114, 134, 146], "20e9": 111, "25e": 111, "______________________________________________": 111, "_______________________________________________": 111, "r\u2081": 111, "r\u2082": 111, "______________________": 111, "________________________": 111, "8kn": 111, "_____________": 111, "1m": 111, "3m": 111, "2m": 111, "5m": [111, 252], "679": 111, "12kn": 111, "________________________________": 111, "____________________________________________________": 111, "o____________________________________________________": 111, "4m": 111, "_____________________________________": 111, "m\u2081": 111, "m\u2082": 111, "connector": 111, "_____________________": 111, "_______________________": 111, "_____________________o_______________________": 111, "oooo": [111, 255], "r\u2083": 111, "_______i_______": 111, "flexur": 111, "rigid": [111, 114, 123, 127, 129, 132, 134, 137, 142, 149, 192, 200, 279], "____________": 111, "____________o________________________": 111, "a\u2082": [111, 294], "support_1": 112, "support_2": 112, "tensil": [112, 114], "suspens": 112, "offshor": 112, "transmiss": [112, 154, 155], "270": [112, 114], "point_load": 112, "loads_posit": 112, "apply_length": 112, "360": [112, 114], "inclin": [112, 204], "change_support": 112, "new_support": 112, "new_label": [112, 114], "left_support": 112, "right_support": 112, "assembli": [114, 134], "joint": [114, 125, 131, 135, 137, 142, 279], "add_nod": 114, "node_1": 114, "node_2": 114, "node_3": 114, "node_4": 114, "add_memb": 114, "member_1": 114, "member_2": 114, "member_3": 114, "member_4": 114, "member_5": 114, "change_member_label": 114, "change_node_label": 114, "bc_new": 114, "subs_dict": 114, "ag": [114, 233], "bf": [114, 149], "fc": 114, "fe": 114, "internal_forc": 114, "member_length": 114, "node_label": 114, "node_posit": 114, "remove_memb": 114, "remove_nod": 114, "remove_support": 114, "revolv": 114, "r_node_1_x": 114, "r_node_1_i": 114, "r_node_2_i": 114, "interconnect": [115, 118, 126], "mimoseri": [115, 118], "mimoparallel": [115, 118], "control_plot": 116, "pole_color": 116, "blue": [116, 143, 203, 217], "pole_markers": 116, "zero_color": 116, "orang": 116, "zero_markers": 116, "show_ax": 116, "marker": [116, 203], "sisolineartimeinvari": [116, 118], "markers": 116, "pole_zero_numerical_data": 116, "r678": 116, "93zero_plot": 116, "siso": [116, 118], "8660254j": 116, "bode_plot": 116, "initial_exp": 116, "final_exp": 116, "freq_unit": 116, "phase_unit": 116, "semilog": 116, "hz": 116, "hertz": 116, "bode_magnitude_numerical_data": 116, "5148378120533502e": 116, "68437": 116, "36188804005": 116, "020599914256786": 116, "0205999155219505": 116, "4117304087953": 116, "00000000260573": 116, "bode_phase_numerical_data": 116, "4472354033813751e": 116, "035581932165858e": 116, "47577": 116, "3248186011": 116, "67884": 116, "09326036123": 116, "5000000000291665e": 116, "6180885085e": 116, "08895483066e": 116, "1415085799262523": 116, "14155265358979": 116, "impulse_response_plot": 116, "lower_limit": [116, 284], "upper_limit": [116, 284], "ramp_response_plot": 116, "r679": 116, "impulse_response_numerical_data": 116, "lineover1drangeseri": [116, 203], "amplitud": [116, 156], "06616480200395854": 116, "854500743565858": 116, "9999999799999999": 116, "7042848373025861": 116, "170748906965121e": 116, "1901263495547205e": 116, "r680": 116, "step_response_numerical_data": 116, "025413462339411542": 116, "0484508722725343": 116, "670250533855183": 116, "844291913708725": 116, "023844582399907256": 116, "042894276802320226": 116, "828770759094287e": 116, "456457160755703e": 116, "mx": [116, 162, 224], "r681": 116, "ramp_funct": 116, "ramp_response_numerical_data": 116, "12166980856813935": 116, "861246379582118": 116, "4504508011325967e": 116, "006046440489058766": 116, "12499999999568202": 116, "12499999999661349": 116, "den": [118, 206, 208, 229, 233], "superscript": [118, 217], "tf3": 118, "tf4": 118, "tf5": 118, "tf6": 118, "500000000000000": 118, "tf7": 118, "tf8": 118, "tf9": 118, "tf10": 118, "tf11": 118, "tf12": 118, "r682": 118, "transfer_funct": 118, "r683": 118, "from_coeff_list": 118, "num_list": 118, "den_list": 118, "zerodivisionerror": [118, 208, 246, 256], "1j": [118, 207], "is_biprop": 118, "is_prop": 118, "is_strictly_prop": 118, "feedforward": 118, "fed": 118, "sit": [118, 201], "compulsori": 118, "tf_1": 118, "tf_2": 118, "tf_3": 118, "tf_4": 118, "tfm_1": 118, "tfm_2": 118, "tf_5": 118, "tf_6": 118, "tf_7": 118, "tf_8": 118, "tfm_3": 118, "tfm_4": 118, "tfm_5": 118, "tfm_6": 118, "tf_9": 118, "tf_10": 118, "tfm_7": 118, "tfm_8": 118, "tfm_9": 118, "tfm_10": 118, "tfm_11": 118, "tfm_12": 118, "m_tf": 118, "tfm": 118, "tfm1": 118, "tfm2": 118, "tfm3": 118, "mimolineartimeinvari": 118, "mat_a": 118, "mat_b": 118, "mat_c": 118, "tfm_a": 118, "tfm_b": 118, "tfm_c": 118, "expr_1": 118, "expr_2": 118, "expr_3": 118, "expr_4": 118, "plant_mat": 118, "controller_mat": 118, "neg_feedback": 118, "gbt": 118, "sample_p": 118, "bilinear": 118, "numz": 118, "denz": 118, "r684": 118, "polyu": 118, "hk": [118, 230], "ama": 118, "gfzhang": 118, "zcc09_ijc": 118, "forward_diff": 118, "backward_diff": 118, "tz": 118, "hep": 119, "gamma_matric": [119, 121], "gammamatrix": 119, "lorentzindex": 119, "gammamatrixhead": 119, "extract_type_ten": 119, "gamma_trac": 119, "i0": [119, 154, 243], "i2": [119, 132, 149, 243], "i4": [119, 243], "i5": 119, "kahane_simplifi": 119, "spinor": 119, "ta": [119, 226], "tb": [119, 226, 248], "tc": [119, 208, 213, 226], "joseph": [119, 211], "kahan": 119, "octob": 119, "1968": 119, "simplify_gpgp": 119, "e_nl": [120, 183], "hartre": 120, "helium": 120, "2209": 120, "e_nl_dirac": 120, "spin_up": 120, "035999037000": 120, "relativist": 120, "momentum": [120, 129, 132, 149, 160, 161, 179, 183, 202, 243], "light": [120, 154, 186, 187, 197, 204], "035999037": 120, "1012": 120, "3627": 120, "500006656595360": 120, "125002080189006": 120, "125000416028342": 120, "0555562951740285": 120, "0555558020932949": 120, "0555556377366884": 120, "psi_nlm": 120, "wave": [120, 152, 153, 154, 220, 279], "psi_": [120, 158], "nlm": 120, "radial": [120, 136, 183], "nl": [120, 183], "magnet": [120, 153, 198, 271], "azimuth": 120, "wf": [120, 134], "abs_sqrd": 120, "silver": 120, "94": [120, 211], "141": 120, "4418": 120, "mdft": 121, "mgamma": 121, "gamma_5": 121, "gamma_0": 121, "gamma_3": 121, "r685": 121, "msigma": 121, "pauli": [121, 279], "sigma_i": [121, 237], "r686": 121, "pauli_matric": [121, 157], "pat_matrix": 121, "unansw": [122, 191], "kane": [122, 125, 126, 131, 132, 138, 142, 143, 148, 149, 191, 192, 262, 279], "q1d": [122, 132, 134, 136, 139, 140, 141, 144, 145, 146, 147, 191, 197, 201], "q2d": [122, 132, 134, 136, 139, 140, 141, 144, 145, 196, 197], "q3d": [122, 139, 140, 141, 144], "kinemat": [122, 126, 127, 131, 132, 134, 135, 136, 137, 139, 141, 143, 144, 146, 147, 149, 150, 192, 195, 199, 201, 279], "dyad": [122, 149, 192, 266], "mprint": [122, 139, 140, 141, 144], "mpprint": [122, 144], "mlatex": 122, "sub_dict": [122, 124, 134], "msub": [122, 124, 146], "gsl": [122, 250], "lsoda": 122, "penalti": 122, "central_inertia": [123, 129, 135, 137], "possess": [123, 147, 243], "name_of_bodi": 123, "ixx": [123, 129, 192], "body_inertia": 123, "ang_vel_in": [123, 126, 132, 139, 140, 149, 192, 200], "set_ang_vel": [123, 129, 132, 134, 139, 140, 146, 147, 149, 150, 192, 194, 196, 200], "apply_forc": [123, 126, 137], "reaction_bodi": [123, 126, 137], "reaction_point": 123, "oppposit": 123, "desri": 123, "force1": 123, "b_masscent": 123, "b_frame": [123, 126], "newtonion": [123, 126], "spring_forc": 123, "n_frame": 123, "apply_torqu": [123, 137], "torquess": 123, "torque1": 123, "b1_frame": 123, "b2_frame": 123, "clear_load": 123, "kinetic_energi": [123, 129, 147, 149], "inerti": [123, 126, 127, 129, 131, 134, 136, 139, 144, 145, 147, 149], "set_vel": [123, 127, 129, 132, 134, 136, 139, 140, 141, 144, 145, 146, 147, 149, 150, 196, 200], "b_ixx": 123, "b_mass": [123, 126], "masscenter_vel": 123, "parallel_axi": [123, 129], "a_ixx": 123, "a_mass": 123, "a_ixi": 123, "a_izx": 123, "a_iyi": 123, "a_iyz": 123, "a_izz": 123, "smart": [124, 146, 224, 230, 233], "sub1": [124, 217], "sub2": [124, 217], "find_dynamicsymbol": [124, 129], "reference_fram": [124, 129, 192], "symbolicsystem": [125, 142, 279], "interfram": [126, 196], "_generate_coordin": 126, "_generate_spe": 126, "_orient_fram": 126, "_set_angular_veloc": 126, "_set_linear_veloc": 126, "kde": [126, 131, 135, 136, 143, 146], "revolut": 126, "\u03c9": 126, "pc": [126, 214], "p_masscent": 126, "c_masscent": 126, "p_frame": 126, "c_frame": 126, "q_pc": 126, "u_pc": 126, "upper_bob": 126, "lower_bob": 126, "ceiling_joint": 126, "pendulum_joint": 126, "q_p1": 126, "q_p2": 126, "u_fram": 126, "l_frame": 126, "u_p1": 126, "u_p2": 126, "vel": [126, 132, 134, 136, 140, 143, 149, 196, 200, 269], "prismat": 126, "slide": 126, "part1": 126, "part2": 126, "j1": [126, 135, 137, 161, 179], "j2": [126, 135, 137, 161, 179], "q_j1": 126, "w_frame": 126, "q_j2": 126, "p1_frame": 126, "u_j1": 126, "cylindricaljoint": 126, "rotation_coordin": 126, "translation_coordin": 126, "rotation_spe": 126, "translation_spe": 126, "cylindr": [126, 203, 269], "q0_": 126, "q1_": 126, "u0_": 126, "u1_": 126, "q0_pc": 126, "q1_pc": 126, "u0_pc": 126, "u1_pc": 126, "tube": 126, "floor_joint": 126, "flag_joint": 126, "q0_c1": 126, "q0_c2": 126, "q1_c1": 126, "floor_fram": 126, "q1_c2": 126, "tube_fram": 126, "flag_fram": 126, "u0_c1": 126, "u0_c2": 126, "u1_c1": 126, "planarjoint": 126, "planar_coordin": 126, "planar_spe": 126, "q2_": 126, "u2_": 126, "nonparallel": 126, "q_1": [126, 135, 136, 137, 146, 162, 200, 213, 230], "q_2": [126, 135, 136, 137, 146, 200], "q_0": [126, 162, 230], "rotation_axi": 126, "planar_vector": 126, "q2_pc": 126, "u2_pc": 126, "parent_vector": 126, "plane_vector": 126, "g_frame": 126, "sphericaljoint": 126, "rot_typ": [126, 192, 196, 198], "rot_ord": [126, 192, 196, 264], "ball": 126, "socket": 126, "tait": [126, 192, 262, 264], "bryan": [126, 192, 262, 264], "joint_point": 126, "zxz": [126, 192, 201, 262, 264], "weldjoint": 126, "weld": 126, "quarter": [126, 154], "rotated_fram": 126, "jointsmethod": [126, 135, 137], "form_eom": [126, 131, 137, 143], "mass_matrix_ful": [126, 127, 131, 132, 137, 144, 145], "forcing_ful": [126, 127, 131, 132, 137, 144, 145], "mass_matrix": [126, 127, 131, 134, 139, 140, 144, 145, 150], "lagrangesmethod": [126, 127, 131, 136, 141, 145, 146], "qd": [126, 127, 131, 134, 144, 196], "inv_method": [126, 127, 131], "q_ind": [127, 128, 131, 132, 134, 135, 136, 139, 140, 144, 146, 149], "u_ind": [127, 128, 131, 132, 134, 135, 136, 139, 140, 144, 146, 149], "kd_eq": [127, 132, 134, 135, 136, 139, 140, 146, 149], "q_depend": [127, 134, 135, 136, 144, 149], "configuration_constraint": [127, 134, 135, 136, 144], "u_depend": [127, 134, 135, 136, 144, 149], "velocity_constraint": [127, 134, 135, 136, 144, 149], "acceleration_constraint": 127, "u_auxiliari": [127, 140, 144, 149], "forcelist": [127, 132, 135, 136, 139, 140, 145, 146, 149], "explicit_kinemat": 127, "kd_eqs_solv": 127, "constraint_solv": 127, "levinson": [127, 148, 192, 262], "udot": [127, 134], "linsolv": [127, 149, 215, 235, 236, 295], "ud": [127, 144], "kd": [127, 134, 139, 140, 144], "fl": [127, 134, 144, 145, 149, 211], "bl": [127, 134, 144, 149], "frstar": [127, 132, 134, 136, 139, 140, 144, 146, 149], "kanes_equ": [127, 132, 134, 136, 139, 140, 144, 146, 149], "a_and_b": [127, 128, 136], "auxiliary_eq": [127, 140], "k_d": [127, 144], "k_dnh": 127, "f_d": [127, 131, 144, 145, 210], "f_dnh": 127, "mass_matrix_kin": 127, "k_kqdot": 127, "forcing_kin": 127, "k_ku": 127, "constrain": [127, 128, 136, 145, 149], "kindiffdict": [127, 134, 139, 140, 144, 149], "new_method": [127, 136], "linear_solv": [127, 128], "intens": [127, 128, 151, 154], "perm_mat": [127, 128, 146], "op_point": [127, 128, 136, 146], "beforehand": [127, 131, 250], "to_linear": [127, 146], "recalcul": [127, 213], "hol_coneq": [127, 136, 145], "nonhol_coneq": [127, 136, 145], "nonconserv": 127, "form_lagranges_equ": [127, 136, 141, 145, 146], "qdot": [127, 134, 135, 196], "qdoubledot": 127, "lam": [127, 128, 150], "lagranges_equ": 127, "qd_ind": [127, 146], "q_dep": [127, 131, 144, 146], "qd_dep": [127, 146], "solve_multipli": [127, 136], "sol_typ": 127, "array_lik": [127, 128], "f_3": [128, 131, 150, 233], "f_c": [128, 136], "f_v": [128, 136], "f_a": 128, "q_d": 128, "u_i": [128, 146, 200, 210], "u_d": [128, 149], "r687": 128, "peterson": 128, "gede": 128, "hubbard": 128, "multibodi": [128, 129, 132, 142, 148, 149, 150, 200], "syst": 128, "dyn": 128, "feb": 128, "s11044": 128, "014": 128, "9436": 128, "q_op": [128, 136], "u_op": [128, 136], "qd_op": 128, "ud_op": [128, 136], "spatial": [129, 156, 192, 217], "angular_momentum": [129, 147, 149], "init_vprint": [129, 130, 147, 150, 192, 194, 196, 197, 200, 201], "linear_momentum": [129, 147, 149], "inertia_tupl": 129, "from_tensor": 129, "from_inertia_scalar": 129, "iyi": [129, 192], "izz": [129, 192], "ixi": [129, 192], "iyz": [129, 192], "izx": 129, "yy": [129, 192, 201, 233], "yz": [129, 192, 201, 203], "zx": [129, 192, 201], "pos_vec": 129, "px": [129, 172, 177, 243], "center_of_mass": [129, 149], "p1_pt": 129, "p2_pt": 129, "p3_pt": 129, "p4_pt": 129, "b_f": [129, 132], "b_cm": [129, 132], "mb": [129, 137, 149], "set_po": [129, 132, 196, 200], "point_o": [129, 132], "body1": 129, "body2": 129, "body3": 129, "vprint": [130, 191, 196, 197, 201], "vpprint": [130, 191, 197, 201], "vlatex": [130, 191, 192, 197, 201], "_system": 131, "parti": [131, 253], "cart": 131, "mechanics_print": [131, 134, 135, 139, 140, 141, 143, 144, 145], "bob_fram": 131, "newtonian": [131, 132, 149], "from_newtonian": 131, "add_joint": 131, "slider": [131, 137], "q_slider": 131, "u_slid": 131, "u_pin": 131, "apply_grav": 131, "add_load": 131, "rail_masscent": 131, "rail_mass": 131, "rail_fram": 131, "cart_masscent": 131, "cart_mass": 131, "bob_masscent": 131, "bob_mass": 131, "validate_system": 131, "eom_method": 131, "add_holonomic_constraint": 131, "get_joint": 131, "u_dep": [131, 144], "bodybas": 131, "loadbas": 131, "actuat": 131, "actuatorbas": 131, "holonomic_constraint": 131, "nonholonomic_constraint": 131, "nonholonom": [131, 134], "add_actu": 131, "add_bodi": 131, "add_coordin": 131, "add_kd": 131, "add_nonholonomic_constraint": 131, "add_spe": 131, "get_bodi": 131, "m_d": [131, 145], "m_m": 131, "f_m": 131, "check_dupl": 131, "coord_stat": 131, "right_hand_sid": 131, "coordinate_deriv": [131, 150], "alg_con": [131, 150], "output_eqn": 131, "coord_idx": [131, 150], "speed_idx": [131, 150], "m_3": [131, 150, 161, 202], "exogen": [131, 150], "ref_fram": 131, "theta_dot": 131, "kin_explicit_rh": [131, 150], "dyn_implicit_mat": [131, 150], "dyn_implicit_rh": [131, 150], "symsystem": 131, "dae": [131, 150], "comb_implicit_mat": [131, 150], "comb_implicit_rh": [131, 150], "kinema": 131, "comb_explicit_rh": [131, 150], "compute_explicit_form": 131, "awhil": 131, "constant_symbol": 131, "dynamic_symbol": 131, "motiongenesi": [132, 149], "double_pendulum": 132, "motionvari": [132, 149], "simprot": [132, 149], "n_a": 132, "n_b": 132, "w_a_n": 132, "w_b_n": [132, 149], "p_o_p": 132, "p_p_r": 132, "v_o_n": [132, 149], "v2pt": [132, 149], "v_p_n": 132, "v_r_n": 132, "force_p": 132, "force_r": 132, "tfinal": 132, "integstp": 132, "some_filenam": 132, "parse_autolev": 132, "sympy_cod": 132, "include_numer": 132, "include_pydi": 132, "pydi": [132, 149, 192], "u1d": [132, 134, 136, 139, 140, 144], "u2d": [132, 134, 136, 139, 140, 144], "frame_n": 132, "frame_a": 132, "frame_b": 132, "particle_p": 132, "p_pt": 132, "particle_r": 132, "r_pt": 132, "v2pt_theori": [132, 134, 139, 140, 141, 146, 147, 149, 150, 196, 200], "initial_condit": [132, 149], "overwritten": 132, "e2row": 132, "eigvec": [132, 149], "eigenvec": 132, "deg2rad": 132, "0174533": 132, "wo": 132, "coef": [132, 149], "u3": [132, 134, 135, 137, 139, 140, 144, 149, 192, 196, 200], "strai": 132, "reassign": 132, "inher": [132, 256, 286], "rhs_x": 132, "i_b_bo": 132, "body_b": 132, "body_b_f": 132, "scene": [132, 229, 286], "i_c_d": 132, "i_p_q": 132, "i_b_o": 132, "e3": [132, 224, 233], "i_p_o": 132, "e4": [132, 224], "p_so_o": 132, "nicheck": 132, "plug": [132, 187], "hurdl": 132, "gitlab": 132, "ch4": 132, "ch5": 132, "ch6": 132, "cst": 132, "grammar": [132, 229], "roll": [133, 134, 142, 200, 237, 279], "disc": [133, 142, 200, 279], "bicycl": [133, 142, 148, 279], "nonminim": [133, 142, 146, 279], "linkag": [133, 142, 279], "meijaard2007": [134, 148], "steer": [134, 148], "purposefulli": 134, "yaw": 134, "ang": 134, "rear": 134, "pitch": 134, "q4": [134, 144, 194], "q5": [134, 194], "q4d": [134, 144], "q5d": 134, "u4": [134, 140, 144, 149], "u5": [134, 140], "u6": [134, 140], "u3d": [134, 139, 140], "u4d": 134, "u5d": 134, "u6d": 134, "explanatori": 134, "wfrad": 134, "wrrad": 134, "htangl": 134, "forkoffset": 134, "forklength": 134, "framelength": 134, "forkcg1": 134, "forkcg3": 134, "framecg1": 134, "framecg3": 134, "iwr11": 134, "iwr22": 134, "iwf11": 134, "iwf22": 134, "iframe11": 134, "iframe22": 134, "iframe33": 134, "iframe31": 134, "ifork11": 134, "ifork22": 134, "ifork33": 134, "ifork31": 134, "mframe": 134, "mfork": 134, "mwf": 134, "mwr": 134, "wr": 134, "tempfram": 134, "tempfork": 134, "orientnew": [134, 136, 139, 140, 141, 146, 150, 192, 194, 196, 198, 200, 201], "wr_cont": 134, "wr_mc": 134, "frame_mc": 134, "fork_mc": 134, "wf_mc": 134, "wf_cont": 134, "flip": [134, 167, 176, 237], "frame_i": 134, "fork_i": 134, "wr_i": 134, "wf_i": 134, "bodyfram": 134, "bodyfork": 134, "bodywr": 134, "bodywf": 134, "replic": 134, "conlist_spe": 134, "conlist_coord": 134, "gravit": [134, 139, 185, 198, 271], "aforement": [134, 198, 230, 269], "paperradrear": 134, "paperradfront": 134, "hta": 134, "trailpap": 134, "rake": 134, "paperwb": 134, "02": 134, "paperframecgx": 134, "paperframecgz": 134, "paperforkcgx": 134, "paperforkcgz": 134, "framecgnorm": 134, "framecgpar": 134, "tempa": 134, "tempb": 134, "tempc": 134, "paperforkl": 134, "forkcgnorm": 134, "forkcgpar": 134, "upright": 134, "val_dict": 134, "0603": 134, "1405": 134, "05892": 134, "00708": 134, "00756": 134, "kdd": [134, 139, 140], "centripet": 134, "corioli": 134, "forcing_lin": 134, "mm_full": 134, "_k_kqdot": 134, "xdot": 134, "lean": [134, 139, 141], "amat": 134, "q_3": [135, 137, 200], "u_1": [135, 136, 137, 200, 212, 233], "u_2": [135, 136, 137, 200, 212, 233], "u_3": [135, 137, 200], "densiti": [135, 237, 248, 272], "link1": 135, "link2": 135, "link3": 135, "link4": 135, "joint1": 135, "joint2": 135, "joint3": 135, "j3": [135, 137, 161, 179], "fh": 135, "fhd": 135, "_method": 135, "_form_eom": 135, "eom": [136, 137, 146], "dq_dict": 136, "presimplifi": 136, "inp_vec": [136, 146], "lag": [136, 141, 146], "lm": [136, 145, 146, 210, 213], "lag_eq": [136, 146], "lam_op": 136, "ibzz": 137, "compound_pend": 137, "simple_pend": 137, "rev1": 137, "rev2": 137, "w_r_n_qd": [139, 140], "dmc": [139, 140, 141], "uv": [139, 140, 182], "bodyd": [139, 140, 141], "bodylist": [139, 140], "kane1985": [140, 144, 148, 191], "thorough": [140, 146, 230], "simplifc": 140, "f3": [140, 203, 217], "necessit": 140, "simplify_auxiliary_eq": 140, "lrh": 141, "planet": 142, "robot": 142, "fascin": 142, "trajectori": 142, "challeng": 142, "came": [142, 289], "tackl": [142, 250], "amen": 142, "arduou": 142, "child_izz": 143, "child_mass": 143, "f_h": 144, "nh": 144, "ku": [144, 217], "dnh": 144, "f_r": [144, 146, 210], "speed_con": 144, "coord_con": 144, "lam1": 145, "0_": 146, "blajer1994": [146, 148], "brought": [146, 237], "vel_p": 146, "a_op": 146, "b_op": 146, "m_op": 146, "a_lin": 146, "hasn": 146, "juxtaposit": [147, 191, 266], "rb_masscent": 147, "rb_frame": 147, "l_p": 147, "likins1973": [147, 199], "l_b": 147, "requisit": 147, "t_p": 147, "t_b": 147, "t_t": 147, "virtu": [147, 149], "blajer": 148, "wojciech": 148, "werner": 148, "schiehlen": 148, "walter": 148, "schirm": 148, "kane1983": [148, 201], "likin": [148, 199], "david": [148, 213], "spacecraft": 148, "1983": [148, 252], "meijaard": 148, "jim": 148, "papadopoulo": 148, "ruina": 148, "schwab": 148, "royal": 148, "societi": [148, 230], "2084": 148, "1955": 148, "982": 148, "lectur": [149, 211, 237], "rigibodi": 149, "proprietari": 149, "k3": [149, 207], "k4": 149, "b11": 149, "b12": 149, "b21": 149, "b22": 149, "xd": 149, "xd2": 149, "y1d": 149, "y2d": 149, "tina": 149, "overwrit": [149, 191], "dt2": 149, "dy2": 149, "ty": 149, "nonlinsolv": [149, 235, 236, 295], "rowmatrix": 149, "colmatrix": 149, "diagmat": 149, "eigval": 149, "row_matrix": 149, "col_matrix": 149, "ao": 149, "i12": 149, "i23": 149, "i31": 149, "p_o_q": 149, "mag": 149, "unitvec": 149, "qo": 149, "p_p_q": 149, "partial_veloc": [149, 192, 196], "a_o_n": 149, "set_acc": [149, 196, 200], "qb": [149, 205], "qbd": 149, "alf_b_n": 149, "set_ang_acc": [149, 192], "ang_acc_in": [149, 192], "force_o": 149, "torque_a": 149, "qa": 149, "qad": 149, "a_b": 149, "v1pt": 149, "v1pt_theori": [149, 196, 200], "a1pt": 149, "a1pt_theori": [149, 196], "a2pt": 149, "a2pt_theori": [149, 196, 200], "angvel": 149, "force_vector": 149, "kindiff": 149, "ke": 149, "configura": 149, "tion_constraint": 149, "pendent": 149, "velocity_con": 149, "traint": 149, "acceleration_": 149, "u_auxilia": 149, "ry": 149, "matlplotlib": 149, "stiff": 149, "damp": 149, "introspect": 149, "rich": [149, 229], "media": [149, 155], "esqu": 149, "pertin": [150, 204, 212], "alg_con_ful": 150, "symsystem1": 150, "symsystem2": 150, "symsystem3": 150, "raytransfermatrix": 151, "geometricrai": 151, "beamparamet": 151, "geometric_conj": 151, "gauss_conj": 151, "conjugate_gauss_beam": 151, "lens": 151, "gaussopt": 151, "wavelen": 151, "z_r": 151, "wavelength": [151, 156], "waist": 151, "rayleigh": [151, 237], "refract": [151, 153, 155, 156], "530e": 151, "88679245283019": 151, "92753330865999": 151, "w_0": [151, 230], "00100000000000000": 151, "freespac": 151, "00101413072159615": 151, "00210803120913829": 151, "r688": 151, "complex_beam_paramet": 151, "r689": 151, "gaussian_beam": 151, "spread": [151, 217, 237, 252], "00053": 151, "goui": 151, "55998576005696": 151, "2809": 151, "peak": 151, "waist_approximation_limit": 151, "paraxi": [151, 155], "06e": 151, "curvedmirror": 151, "curvedrefract": 151, "flatmirror": 151, "flatrefract": 151, "2x1": 151, "thinlen": 151, "r690": 151, "ray_transfer_matrix_analysi": 151, "waist_in": 151, "waist_out": 151, "s_in": 151, "s_out": 151, "w_o": 151, "gaussian_conj": 151, "z_r_in": 151, "incid": [151, 155], "z_r_out": 151, "emerg": [151, 205], "geometric_conj_ab": 151, "geometric_conj_af": 151, "geometric_conj_bf": 151, "rayleigh2waist": 151, "waist2rayleigh": 151, "permitt": 153, "permeabl": 153, "fermat": 153, "electr": [153, 155, 198, 269, 271], "electromagnet": [153, 186, 198, 243, 271], "intrinsic_imped": 153, "149896229": [153, 156, 186], "kilogram": [153, 185, 187, 189], "1250000": 153, "amper": [153, 186], "refractive_index": 153, "299792458": [153, 156, 186, 189], "r691": 153, "optical_medium": 153, "travel": [153, 156, 198, 269, 271], "stoke": 154, "mueller": 154, "jones_vector": 154, "stokes_vector": 154, "half_wave_retard": 154, "polarizing_beam_splitt": 154, "jones_2_stok": 154, "\u2148": [154, 202, 216, 217, 236, 295], "\u03c7": 154, "\u03c8": 154, "i\u2080": 154, "plate": 154, "hwp": 154, "splitter": 154, "transmit": [154, 155], "pb": 154, "transmitted_port": 154, "reflected_port": 154, "transmitted_pow": 154, "reflected_pow": 154, "r692": 154, "jones_calculu": 154, "r693": 154, "mueller_calculu": 154, "r694": 154, "stokes_paramet": 154, "retard": 154, "poincar\u00e9": 154, "tilt": 154, "mayor": 154, "linear_polar": 154, "mueller_matrix": 154, "quarter_wave_retard": 154, "phase_retard": 154, "\u03b4": 154, "phia": 154, "phib": 154, "4x1": [154, 237], "phi_a": 154, "phi_b": 154, "qwp": 154, "reflective_filt": 154, "unpolar": 154, "transmissive_filt": 154, "attenu": 154, "transmitt": 154, "ndf": 154, "refraction_angl": 155, "fresnel_coeffici": 155, "brewster_angl": 155, "critical_angl": 155, "lens_makers_formula": 155, "mirror_formula": 155, "lens_formula": 155, "hyperfocal_dist": 155, "transverse_magnif": 155, "medium1": 155, "medium2": 155, "brewster": 155, "926093295503462": 155, "onset": 155, "850908514477849": 155, "02005": 155, "angle_of_incid": 155, "fresnel": [155, 217, 227], "polaris": 155, "te": 155, "317843553417859": 155, "348645229818821": 155, "658921776708929": 155, "651354770181179": 155, "235625382192159": 155, "971843958291041": 155, "816477005968898": 155, "577377951366403": 155, "r695": 155, "fresnel_equ": 155, "coc": 155, "0033": 155, "focal_length": 155, "n_len": 155, "n_surr": 155, "thick": 155, "1515151515151": 155, "0000000000000": 155, "3418463277618": 155, "41152": 155, "magnif": 155, "twave": 156, "time_period": 156, "wavenumb": 156, "phi1": 156, "phi2": 156, "w1": [156, 229], "w3": [156, 217], "superposit": [156, 167, 178, 204], "angular_veloc": 156, "tempor": 156, "r696": 157, "paulialgebra": 157, "evaluate_pauli_product": 157, "paulimatric": 157, "sigma3": 157, "nodal": [158, 183, 204], "hw": [158, 183], "coherent_st": 158, "coher": [158, 184, 190], "1d": [158, 160, 173, 192, 242], "wavefunct": [158, 171, 180, 183, 279], "r697": 159, "__cmp__": [159, 163, 182], "dagger": [159, 163, 169, 171, 174, 176, 181, 182, 279], "operatorset": [160, 172], "positionbra3d": 160, "eigenbra": [160, 173, 179], "positionket3d": 160, "eigenket": [160, 173, 179], "positionstate3d": 160, "eigenst": [160, 172, 177, 179, 180], "position_x": 160, "position_i": 160, "position_z": 160, "pxbra": [160, 172], "pxket": [160, 172, 177], "pxop": [160, 172, 177], "xbra": [160, 172, 177], "xket": [160, 172, 177], "xop": [160, 172, 177], "yop": 160, "zop": 160, "cg": [161, 179, 186, 239], "momenta": 161, "uncoupl": [161, 179], "r698": 161, "j_3": [161, 179, 202], "r699": 161, "wigner3j": [161, 202], "wigner": [161, 179, 237, 279], "varshalovich": [161, 179], "zyla": 161, "theor": 161, "phy": [161, 187, 202], "083c01": 161, "r700": 161, "w3j": 161, "715": [161, 202, 217], "wigner6j": [161, 202], "j12": [161, 179], "j23": 161, "6j": [161, 202], "wigner9j": [161, 202], "j4": 161, "j34": 161, "j13": 161, "j24": 161, "9j": [161, 202], "cg_simp": 161, "r701": 161, "clebsh": 161, "rethink": 162, "figsiz": 162, "circuitplot": 162, "nqubit": [162, 166, 167, 176], "control_lin": 162, "gate_idx": [162, 166], "min_wir": 162, "max_wir": 162, "control_point": 162, "wire_idx": 162, "not_point": 162, "one_qubit_box": 162, "box": [162, 167, 169, 178, 180, 272, 279], "qubit": [162, 166, 167, 168, 169, 175, 279], "swap_point": 162, "two_qubit_box": 162, "createcg": 162, "latexnam": 162, "mock": 162, "mz": 162, "circuit_plot": 162, "min_qubit": [162, 166], "autogener": 162, "wire": 162, "j_0": 162, "r702": 163, "comm": [163, 182, 243], "plank": 164, "r703": 164, "05457162000000e": 164, "planck_const": 164, "hermetian": 165, "r704": 165, "r705": 165, "ket": [165, 170, 171, 172, 174, 176, 177, 180, 182], "bra": [165, 170, 171, 172, 174, 176, 177, 180, 182], "innerproduct": [165, 170, 171, 177, 179, 182], "outerproduct": [165, 171], "seamlessli": 165, "hermitian_adjoint": 165, "hermitian_transpos": 165, "_apply_operators_qubit": 166, "gate_sort": 166, "gate_simp": 166, "ugat": 166, "cgate": 166, "control_valu": 166, "cnot": 166, "eval_control": 166, "plot_gat": 166, "circ_plot": 166, "simplify_cg": 166, "cphase": 166, "cnotgat": 166, "qappli": [166, 167, 169, 171, 176, 279], "get_target_matrix": 166, "hadamardg": 166, "identityg": 166, "onequbitg": 166, "phaseg": 166, "swapgat": 166, "target1": 166, "target2": 166, "tgate": 166, "twoqubitg": 166, "xgate": 166, "ygate": 166, "zgate": 166, "bubbl": 166, "random_circuit": 166, "ngate": 166, "gate_spac": 166, "mermin": 167, "_represent_zg": 167, "oracleg": 167, "oracl": 167, "intqubit": [167, 176], "search_funct": 167, "wgate": 167, "apply_grov": 167, "grover_iter": 167, "qstate": 167, "wv": 167, "superposition_basi": 167, "numqubit": 167, "basis_st": 167, "matt": 168, "complexspac": 168, "directsumhilbertspac": 168, "r706": 168, "hilbertspac": 168, "fockspac": 168, "hilbert_spac": [168, 171, 180], "direct_sum": 168, "quantiz": [168, 279], "r707": 168, "mess": [168, 233, 236, 294], "fock_spac": 168, "r708": 168, "tensorpowerhilbertspac": 168, "r709": 168, "tensor_product": 168, "tensorproducthilbertspac": 168, "r710": 168, "clebsch": [169, 179, 202, 279], "gordan": [169, 179, 202, 279], "hilbert": [169, 171, 177, 279], "grover": [169, 279], "qft": [169, 178, 279], "shor": [169, 279], "brabas": [170, 171, 177, 180], "ketbas": [170, 171, 177, 180], "r711": 170, "inner_product": 170, "apply_oper": [171, 182], "identityoper": 171, "r712": 171, "r713": 171, "polymoni": 171, "operator_": 171, "28physic": 171, "old_assumpt": 171, "r714": 171, "outer_product": 171, "unitaryoper": 171, "operators_to_st": 172, "state_to_oper": 172, "_operators_to_st": 172, "state_map": 172, "_state_to_oper": 172, "statebas": [172, 177, 180], "piab": 173, "piabbra": 173, "piabhamiltonian": 173, "piabket": 173, "ip_doit": 174, "smarter": [175, 226], "rk": 175, "iqft": 175, "rkgate": 175, "qtf": 175, "povm": 176, "as_int": [176, 258], "qubit_valu": 176, "intqubitbra": 176, "00001": 176, "qubitbra": 176, "matrix_to_dens": 176, "matrix_to_qubit": 176, "measure_al": 176, "ensembl": 176, "measure_all_oneshot": 176, "oneshot": 176, "measure_parti": 176, "measure_partial_oneshot": 176, "qubit_to_matrix": 176, "enumerate_st": 177, "_enumerate_st": 177, "foo_1": 177, "foo_2": 177, "foo_3": 177, "test2": 177, "bar_4": 177, "bar_5": 177, "bar_10": 177, "get_basi": 177, "replace_non": 177, "operator_to_st": 177, "qexpr": 177, "integrate_result": 177, "orig_expr": 177, "x_ket": 177, "x_op": 177, "rep_expect": 177, "px_2": 177, "px_1": 177, "rep_innerproduct": 177, "_repres": 177, "_represent_foobasi": 177, "foobasi": 177, "_represent_szop": 177, "szupket": 177, "szop": 177, "sz": 177, "cmod": 178, "reformat": 178, "period_find": 178, "momemtum": 179, "j2op": 179, "jxbra": 179, "jx": 179, "jzket": 179, "jxbracoupl": 179, "jcoupl": 179, "jzketcoupl": 179, "jxket": 179, "jxketcoupl": 179, "jybra": 179, "jy": 179, "jybracoupl": 179, "jyket": 179, "jyketcoupl": 179, "jzbra": 179, "jz": 179, "jzbracoupl": 179, "j_4": [179, 202], "argular": 179, "jzop": 179, "passiv": 179, "r715": 179, "wignerd": 179, "jm": 179, "jj": 179, "r716": 179, "jcoupling_list": 179, "coupledspinst": 179, "spinstat": 179, "r717": 180, "dual_class": 180, "mn": [180, 217, 237], "ket_not": 180, "r718": 180, "k0": [180, 208, 210, 237], "orthogonalbra": 180, "orthogonalket": 180, "orthogonalst": 180, "_eval_adjoint": 180, "timedepbra": 180, "timedepst": 180, "timedepket": 180, "prob": [180, 237], "412214747707527": 180, "matrix_tensor_product": 181, "axb": 181, "xdagger": 181, "axc": 181, "bxc": 181, "tensor_product_simp": 181, "cxd": 181, "boson": 182, "fetter": 182, "welecka": 182, "secondqu": 182, "annihilateboson": 182, "fockstateket": 182, "bket": 182, "fockstatebosonket": 182, "annihilatefermion": 182, "createboson": 182, "is_only_q_annihil": 182, "destroi": [182, 226], "quasi": 182, "hole": 182, "is_only_q_cr": 182, "is_q_annihil": 182, "is_q_creat": 182, "antisymmetrictensor": 182, "bbra": 182, "fockstatebosonbra": 182, "bosonicbasi": 182, "fock": 182, "createfermion": 182, "wick": 182, "fbra": 182, "fockstatefermionbra": 182, "fket": 182, "fockstatefermionket": 182, "fixedbosonicbasi": 182, "n_particl": 182, "n_level": 182, "fockstat": 182, "occup": 182, "bosonbra": 182, "fockstatebra": 182, "fermi_level": 182, "r719": 182, "textwrap": [182, 258], "_q": 182, "get_subno": 182, "fermionicoper": 182, "has_q_annihil": 182, "q_annihil": 182, "has_q_creat": 182, "leftmost": 182, "q_creator": 182, "iter_q_annihil": 182, "iter_q_cr": 182, "0x": 182, "permutationoper": 182, "get_permut": 182, "varbosonicbasi": 182, "n_max": 182, "creator": 182, "evaluate_delta": 182, "einstein": [182, 243], "d_ij": 182, "_j": [182, 187, 202, 219], "d_ip": 182, "d_qp": 182, "matrix_rep": 182, "simplify_index_permut": 182, "permutation_oper": 182, "schemat": [182, 187], "abij": 182, "abji": 182, "baij": 182, "baji": 182, "permutlist": 182, "substitute_dummi": 182, "new_indic": 182, "pretty_indic": 182, "_get_ordered_dummi": 182, "_c": 182, "_d": 182, "index_group": 182, "string_of_lett": 182, "my_dummi": 182, "_v": [182, 201], "_p_0": 182, "_p_1": 182, "keep_only_fully_contract": 182, "sho": 183, "isotrop": 183, "mk": [184, 187], "legal": 184, "temperatur": [184, 198, 271], "dimensions": 184, "dimsys_si": [184, 185], "get_dimensional_depend": [184, 185], "has_integer_pow": 184, "dim_si": 184, "dimensionsystem": 184, "base_dim": 184, "derived_dim": 184, "dimensional_depend": 184, "can_transf_matrix": 184, "inv_can_transf_matrix": 184, "dim_can_vector": 184, "dim_vector": 184, "is_consist": [184, 190], "is_dimensionless": 184, "list_can_dim": 184, "print_dim_bas": 184, "gravitational_const": [185, 189], "equivalent_dim": 185, "grav_eq": 185, "kepler": [185, 262], "venu": 185, "701": 185, "dai": [185, 189, 233], "venus_a": 185, "set_quantity_dimens": 185, "set_quantity_scale_factor": 185, "108208000e3": 185, "solar": 185, "solar_mass": 185, "9891e30": 185, "convert_to": [185, 186, 189, 206, 212], "5112118495813": 185, "659097795948": 185, "astrophys": 185, "pound": 186, "boltzmann": 186, "physicalconst": 186, "unitsystem": [186, 190], "kilomet": [186, 188, 189], "unitless": 186, "dimensionless": [186, 187], "discrep": 186, "speed_of_light": [186, 189], "cgs_gauss": 186, "quantity_simplifi": 186, "philosophi": [186, 233, 236, 279], "rough": 187, "mole": 187, "unavoid": 187, "d_3": 187, "d_2": [187, 213, 237], "underbrac": [187, 200], "countabl": [187, 236], "pmatrix": 187, "kg": [187, 272], "glu": 187, "men": 187, "heat": 187, "joul": 187, "calori": 187, "chemistri": 187, "page52": 187, "1952": 187, "page78": 187, "deboer79": 187, "boer": 187, "818": 187, "levyleblond77": 187, "l\u00e9vy": 187, "leblond": 187, "conceptu": [187, 204, 271], "rivista": 187, "del": [187, 252, 262, 270, 294], "nuovo": [187, 202], "cimento": [187, 202], "1977": 187, "187": [187, 211], "214": 187, "anticip": 187, "bin_prefix": 188, "latex_repr": [188, 189], "encapsul": [188, 210, 236, 250], "kilo": 188, "pretty_unicode_repr": 189, "pretty_ascii_repr": 189, "mathml_presentation_repr": 189, "is_prefix": 189, "abbrevi": [189, 205, 217, 236, 238], "unit_system": 189, "scale_factor": 189, "set_global_relative_scale_factor": 189, "reference_quant": 189, "target_unit": 189, "mile": 189, "atomic_mass_const": 189, "centimet": 189, "25146": 189, "609344": 189, "86400": 189, "660539060e": 189, "300000": 189, "planck": [189, 237], "62963087839509e": 189, "base_unit": 190, "descr": 190, "dimension_system": 190, "derived_unit": 190, "overridden": [190, 204, 219, 294], "get_units_non_prefix": 190, "wikidyad": [191, 199], "wikidyadicproduct": [191, 199], "otim": [191, 238, 239], "rigidli": 191, "entireti": 191, "_str": 191, "coordinatesym": [192, 194], "otherfram": [192, 262], "n_alpha_b": 192, "ny": [192, 208], "_3": [192, 202], "orient_body_fix": 192, "orient_space_fix": 192, "orient_quaternion": 192, "quaternion": [192, 196, 201, 262, 264], "rotation_ord": [192, 262, 264], "xzx": 192, "xyx": [192, 262, 264], "yzy": 192, "yxy": [192, 201], "yzx": [192, 201], "zxy": 192, "xzy": 192, "zyx": 192, "yxz": 192, "orient_explicit": 192, "lambda_x": [192, 262, 264], "lambda_i": [192, 262, 264], "lambda_z": [192, 262, 264], "q0": [192, 233, 262, 264], "newnam": 192, "gen_spe": [192, 196], "variable_map": 192, "a_x": [192, 201, 217], "b_x": [192, 194, 201, 243], "b_y": [192, 194, 201, 243], "a_z": [192, 201], "b_z": [192, 201, 243], "xz": [192, 201, 203], "zy": [192, 201], "inlist": 192, "var_in_dcm": 192, "reexpress": [192, 267], "time_deriv": [192, 194, 198], "free_dynamicsymbol": 192, "codirect": 192, "dyadic_tensor": [192, 262], "frame1": 192, "frame2": [192, 194], "second_reference_fram": 192, "ixz": 192, "inertia_dyad": 192, "pertain": [193, 199], "fieldfunct": [193, 198], "curl": [193, 262, 265, 272], "vect": [193, 262, 265], "r_x": [193, 198], "r_y": [193, 198], "r_z": [193, 198], "gradient": [193, 202, 203, 262, 265, 271], "scalar_potenti": [193, 198, 265, 269], "scalar_field": [193, 198, 262, 265, 269], "grad_field": [193, 265], "scalar_potential_differ": [193, 198, 265, 269], "sympyfi": [193, 194, 196, 265], "position2": [193, 265], "vectfield": [193, 198, 265, 269], "is_conserv": [193, 198, 265, 269], "is_solenoid": [193, 198, 265, 269], "solenoid": [193, 265], "q6": 194, "vec1": 194, "vec2": 194, "n_x": 194, "rotating_reference_fram": 194, "time_derivatives_in_the_two_fram": 194, "otherpoint": 196, "outfram": 196, "fixedfram": 196, "get_motion_param": 196, "vectori": [196, 198, 266, 271], "timevalue1": 196, "timevalue2": 196, "313": 196, "vel_vec": 196, "q1dd": 197, "q2dd": 197, "charg": [198, 271], "displac": [198, 200, 271], "temper": 198, "earth": [198, 271], "4xy": [198, 271], "electric_potenti": [198, 269], "r1_x": 198, "r1_y": 198, "infinitesim": [198, 233, 269], "nabla": [198, 262, 268, 269], "f_y": [198, 269], "f_x": [198, 236, 269], "sink": [198, 269], "irrot": [198, 269], "conservative_field": [198, 269], "aug": [199, 236], "dyadic_product": [199, 270], "inc": [199, 211], "w_x": 200, "w_y": 200, "w_z": 200, "w_1": [200, 212], "w_2": [200, 212], "w_3": 200, "textrm": [200, 201, 225], "u_x": 200, "sp": 200, "oq": 200, "qp": 200, "rod": 200, "went": 200, "parallelogram": 201, "c_x": 201, "c_y": 201, "c_z": 201, "train": 201, "friend": 201, "undergon": [201, 236], "vastli": 201, "mold": 201, "bp": [201, 233], "bpp": 201, "zzx": 201, "multifram": 201, "direction": 201, "racah": 202, "gaunt": 202, "rasch03": 202, "regge58": 202, "regg": 202, "544": 202, "regge59": 202, "116": [202, 211], "1959": 202, "edmonds74": 202, "edmond": 202, "princeton": [202, 237], "1957": 202, "rasch": 202, "siam": [202, 255], "sci": 202, "1416": 202, "1428": 202, "liberatodebrito82": 202, "liberato": 202, "brito": 202, "homeier96": 202, "homeier": 202, "steinborn": 202, "mol": 202, "368": 202, "1996": [202, 211, 227, 235, 262], "forum": [202, 236], "m4nzdu": 202, "7o38": 202, "jen": 202, "03": [202, 237], "gerardo": 202, "lazo": 202, "arjona": 202, "phil": 202, "adam": [202, 213], "lemaitr": 202, "2022": 202, "jyr2000": 202, "clebsch_gordan": 202, "2j_3": 202, "dot_rot_grad_ynm": 202, "_l": 202, "l_2": 202, "l_3": 202, "drastic": 202, "2l_1": 202, "2l_2": 202, "2l_3": 202, "1200": 202, "00689500421922113448": 202, "inflect": 202, "unsuit": 202, "dd": [202, 222], "ee": [202, 212], "j_5": 202, "j_6": 202, "richer": 202, "real_gaunt": 202, "realgaunt": 202, "m0": [202, 243], "00002480019791932209313156167": 202, "wigner_3j": 202, "wigner_6j": 202, "wigner_9j": 202, "j_7": 202, "j_8": 202, "j_9": 202, "05555555": 202, "1666666": 202, "wigner_d": 202, "j_z": 202, "j_y": 202, "\u03b3": [202, 284, 294], "wigner_d_smal": 202, "textbackend": 203, "plot_parametr": 203, "plot_implicit": 203, "plot3d_parametric_lin": 203, "plot3d_parametric_surfac": 203, "zlabel": 203, "aspect_ratio": 203, "ylim": 203, "axis_cent": 203, "xscale": 203, "yscale": 203, "autoscal": 203, "textplot": 203, "_seri": [203, 214], "baseseri": 203, "nonparametr": 203, "basebackend": 203, "parametric2dlineseri": 203, "parametric3dlineseri": 203, "cyan": 203, "grayscal": 203, "integers_onli": 203, "surfaceover2drangeseri": 203, "parametricsurfaceseri": 203, "surface_color": 203, "instantia": 203, "centric": 203, "get_mesh": 203, "range1": 203, "range2": 203, "fill_between": 203, "nb_of_point": 203, "inch": 203, "expr_x": 203, "expr_i": 203, "canva": 203, "range_x": 203, "range_i": 203, "nb_of_points_x": 203, "nb_of_points_i": 203, "expr_z": 203, "range_u": 203, "range_v": 203, "nb_of_points_u": 203, "nb_of_points_v": 203, "x_var": 203, "y_var": 203, "mesh": 203, "p8": 203, "p9": 203, "nrow": [203, 206], "ncolumn": 203, "stuff": [203, 248, 250, 258], "is_2dlin": 203, "oblig": 203, "only_integ": 203, "get_seg": 203, "get_color_arrai": 203, "var_start_end": 203, "r720": 203, "luiz": 203, "henriqu": 203, "figueiredo": 203, "r721": 203, "line3dbaseseri": 203, "surfacebaseseri": 203, "var_start_end_x": 203, "var_start_end_i": 203, "var_start_end_u": 203, "var_start_end_v": 203, "implicitseri": 203, "has_equ": 203, "use_interval_math": 203, "process_seri": 203, "_process_seri": 203, "keyboard": 203, "mous": 203, "pyglet_plot": 203, "screenshot": 203, "camera": 203, "zoom": 203, "numpad": 203, "ordin": [203, 233, 258], "f5": 203, "f6": 203, "f8": 203, "drag": 203, "curvilinear": [203, 266, 267], "__setitem__": 203, "zfade4": 203, "key1": 203, "value1": 203, "key2": 203, "value2": 203, "unbound_theta": 203, "wirefram": 203, "saddl": 203, "fz": 203, "_______________________________________________________": 203, "mediterranean": 204, "cultur": 204, "arab": 204, "lighten": 204, "tapestri": 204, "woven": 204, "european": 204, "soil": 204, "plausibl": 204, "teeter": 204, "totter": 204, "outweigh": 204, "excit": 204, "amus": 204, "kempf": 204, "1944": 204, "20th": 204, "dedekind": 204, "intim": 204, "disciplin": 204, "toolset": 204, "atiyah69": [204, 211], "gear": 204, "greuel2008": [204, 211], "interspers": 204, "lr": 204, "ilex": 204, "\u211a": [204, 217], "localis": 204, "abridg": 204, "free_modul": [204, 208], "quotient_r": [204, 208], "overload": [204, 207, 208, 266, 289], "polynomialr": [204, 208, 215], "domain_or_r": [204, 208], "quotientr": [204, 208], "base_id": [204, 208], "elbow": 204, "componentwis": [204, 217], "biproduct": 204, "quotient_modul": 204, "is_submodul": 204, "multiply_id": 204, "identity_hom": 204, "freemodul": 204, "freemoduleel": 204, "conicis": 204, "_contain": 204, "_syzygi": 204, "_in_terms_of_gener": 204, "_intersect": 204, "_module_quoti": 204, "reduce_el": [204, 212], "represantit": 204, "in_terms_of_gener": 204, "inclusion_hom": 204, "rela": 204, "relb": 204, "is_full_modul": 204, "module_quoti": 204, "opt": [204, 206, 210, 229, 248, 290], "coincis": 204, "syzygy_modul": 204, "r_n": 204, "_contains_elem": 204, "_contains_id": 204, "_quotient": 204, "_union": 204, "_product": 204, "is_whole_r": 204, "is_maxim": 204, "is_primari": 204, "is_rad": 204, "is_princip": 204, "xj": 204, "satur": 204, "subquoti": 204, "quotientmodul": 204, "subquotientmodul": 204, "killed_modul": 204, "quotientmoduleel": 204, "kill": [204, 208, 248], "quotient_hom": 204, "ker": 204, "surject": 204, "cokernel": 204, "coker": 204, "meaningfulli": 204, "restrict_domain": 204, "homomoprh": 204, "modulehomomorph": [204, 212], "_ker": 204, "_img": 204, "_kernel": 204, "_imag": 204, "_restrict_domain": 204, "_restrict_codomain": 204, "_quotient_domain": 204, "_quotient_codomain": 204, "_appli": 204, "_mul_scalar": 204, "_compos": 204, "_add": [204, 223], "is_inject": 204, "quotient_domain": 204, "is_isomorph": 204, "preimag": 204, "restrict_codomain": 204, "is_surject": 204, "quotient_codomain": 204, "induct": 204, "monogen": 204, "monogenicfiniteextens": [204, 208], "finiteextens": 204, "sqrt2": [204, 207], "extensionel": [204, 208], "notinvert": [204, 210, 213], "nu_1": 205, "nu_2": 205, "nu_n": 205, "nu_i": 205, "customarili": 205, "ua": 205, "endow": [205, 213], "resp": [205, 208, 233], "divmod": [205, 207, 208], "cb": [205, 255], "sqf_list": [205, 208, 213], "sqf": [205, 208, 213, 230], "buchberg": [205, 210, 211, 213], "solve_poly_system": [205, 213, 235, 236], "ddm": 206, "from_list": [206, 208, 213, 214], "fmt": [206, 208, 212], "matrix1": 206, "sdm": [206, 210], "adj_det": 206, "domainscalar": 206, "adja": 206, "deta": 206, "inv_den": 206, "adj_poly_det": 206, "p_a": 206, "eval_poli": 206, "to_dens": 206, "dmnonsquarematrixerror": 206, "choose_domain": 206, "construct_domain": [206, 207, 208, 213], "clear_denom": [206, 208, 213], "anum": 206, "to_sympi": [206, 207, 208], "get_r": [206, 208], "zz_i": [206, 207], "domainel": [206, 207, 208, 215], "eval_poly_mul": 206, "p_a_b": 206, "303": 206, "solve_den_charpoli": 206, "from_dict_sympi": 206, "ncol": 206, "elemsdict": 206, "from_list_sympi": 206, "from_dok": 206, "to_dok": 206, "from_flat_nz": 206, "to_flat_nz": 206, "from_list_flat": 206, "element_list": 206, "to_list_flat": 206, "from_rep": 206, "drep": 206, "ownership": 206, "solve_den": 206, "ainv": 206, "lll": 206, "lov\u00e1sz": 206, "r722": 206, "r723": 206, "dmvalueerror": 206, "dmrankerror": [206, 212], "20160": 206, "33768": 206, "39578": 206, "47757": 206, "r724": 206, "lll_transform": 206, "lov\u00e1sz_lattice_basis_reduction_algorithm": 206, "20221029115428": 206, "elt": [206, 212], "lovasz": 206, "bremner": 206, "rref_den": 206, "a_rref": 206, "to_field": [206, 208, 213], "scc": 206, "exquo": [206, 207, 208, 213], "xnum": 206, "xden": 206, "dmnoninvertiblematrixerror": 206, "xsol": 206, "xsol_uncancel": 206, "solve_den_rref": 206, "frontend": 206, "to_ddm": 206, "to_sdm": 206, "to_spars": 206, "elements_doubl": 206, "aq": 206, "ddm_": 206, "ddm_idet": 206, "friendlier": 206, "ddm_irref": 206, "ddm_irref_den": 206, "mrref": 206, "typevar": 206, "ringel": 206, "ddm_berk": 206, "r725": 206, "93berkowitz_algorithm": 206, "ddm_iadd": 206, "r726": 206, "bareiss_algorithm": 206, "r727": 206, "usm": 206, "perri": 206, "thesis_drl": 206, "ddm_iinv": 206, "ddm_imatmul": 206, "ddm_ilu": 206, "qq_i": [206, 207], "ddm_ilu_solv": 206, "ddm_ilu_split": 206, "ddm_imul": 206, "ddm_ineg": 206, "ddm_irmul": 206, "_partial_pivot": 206, "sdm_irref": 206, "r728": 206, "row_echelon_form": 206, "reduced_row_echelon_form": 206, "ffgj": 206, "r729": 206, "nako": 206, "turner": 206, "william": 206, "271130": 206, "271133": 206, "ddm_isub": 206, "ddm_transpos": 206, "_type": 206, "ccc": [206, 236], "from_ddm": 206, "domainerror": [206, 210, 213], "unmodifi": [206, 229], "arref": 206, "ddm_rref": 206, "sdm_nullspace_from_rref": 206, "nonzero_col": 206, "sdm_particular_from_rref": 206, "r730": 206, "pythonmpq": [207, 208], "srepr": [207, 289], "strength": 207, "richardon": 207, "dup_factor_list": 207, "factortool": [207, 210], "dup_": [207, 210], "dmp_": [207, 210], "z1": [207, 208, 235], "is_field": [207, 208], "quo": [207, 208, 210, 213], "rem": [207, 208, 210, 213], "exactquotientfail": [207, 208, 210, 213], "mpz": [207, 208], "of_typ": [207, 208], "z1_sympi": 207, "from_sympi": [207, 208], "forth": [207, 212], "z_sympi": 207, "z_zz": 207, "coercionfail": [207, 210], "sum_domain": 207, "expressions_sympi": 207, "expressions_dom": 207, "result_dom": 207, "e_dom": 207, "result_sympi": 207, "gaussianinteg": [207, 208], "gaussianrationalfield": [207, 208], "gaussianr": [207, 208], "finitefield": [207, 208], "pythonfinitefield": [207, 208], "gmpyfinitefield": [207, 208], "welcom": [207, 233, 287], "realel": [207, 208], "complexel": [207, 208], "mpc": 207, "xr": [207, 215], "zc": 207, "_mpc_": 207, "realfield": [207, 208], "rr100": 207, "33333333333333333333333333333": 207, "hack": [207, 233, 246], "algebraic_field": [207, 208, 210, 212], "algebraicfield": [207, 208, 210, 212], "sqrt3": 207, "x_dom": 207, "p_expr": [207, 208], "polyel": [207, 208, 210, 214, 215, 217], "p_dom": 207, "xk": [207, 208, 219], "yk": [207, 208], "poly_r": [207, 208], "old_polynomialr": 207, "globalpolynomialr": 207, "polyclass": [207, 208, 213], "yr": [207, 215], "broader": 207, "get_field": [207, 208], "frac_field": [207, 208], "rationalfield": [207, 208], "old_frac_field": [207, 208], "fractionfield": [207, 208], "old_fractionfield": 207, "xf": 207, "yf": 207, "fracfield": [207, 208], "expressiondomain": [207, 208], "elements_sympi": 207, "elements_k": 207, "convert_from": [207, 208], "num_zz": 207, "num_qq": 207, "encompass": 207, "all_coeff": [207, 208, 213], "dom": [207, 208, 210, 225], "strang": 207, "hybrid": 207, "unreli": 207, "usefulli": 208, "pythonr": [208, 215], "p_domain": 208, "ez": [208, 243], "has_assoc_field": 208, "has_assoc_r": 208, "alg_field_from_poli": [208, 212], "root_index": 208, "almosteq": 208, "cyclotomic_field": [208, 212], "zeta7": 208, "zeta_": 208, "exsqrt": 208, "lexord": [208, 213], "from_algebraicfield": 208, "from_complexfield": 208, "from_expressiondomain": 208, "from_expressionrawdomain": 208, "from_ff": 208, "modularinteg": 208, "from_ff_gmpi": 208, "from_ff_python": 208, "from_fractionfield": 208, "from_globalpolynomialr": 208, "from_monogenicfiniteextens": 208, "from_polynomialr": 208, "from_qq_gmpi": 208, "from_qq_python": 208, "from_realfield": 208, "from_zz_gmpi": 208, "from_zz_python": 208, "gcdex": [208, 213], "get_exact": 208, "half_gcdex": [208, 213], "is_pid": 208, "is_r": 208, "is_nonposit": 208, "is_on": [208, 213], "rersiv": 208, "__neg__": 208, "__pos__": 208, "__sub__": 208, "q_domain": 208, "q_expr": 208, "x_domain": 208, "alg": [208, 212, 216], "trait": 208, "is_unit": 208, "__divmod__": 208, "__floordiv__": 208, "__mod__": [208, 212], "simpledomain": 208, "compositedomain": 208, "from_qq": 208, "from_zz": 208, "gmpyinteg": 208, "pythoninteg": 208, "gmpyrationalfield": 208, "pythonrationalfield": 208, "from_gaussianrationalfield": 208, "gaussianel": 208, "gaussiandomain": 208, "qq_python": 208, "zz_python": 208, "z2": 208, "z3": 208, "z4": 208, "from_gaussianinteg": 208, "as_algebraicfield": 208, "orig_ext": 208, "integral_basi": [208, 212], "maximal_ord": [208, 212], "zeta5": 208, "primes_abov": [208, 212], "primeid": [208, 212], "galois_group": [208, 212, 213], "by_nam": [208, 212, 213], "c6": 208, "max_tri": [208, 212, 213], "numberfield": [208, 212, 213], "galoisgroup": [208, 212, 213], "to_alg_num": [208, 212], "legibl": 208, "inaccur": 208, "to_rat": 208, "mpelement": 208, "complexfield": 208, "lc": [208, 210, 213], "domain_or_field": 208, "dmf": 208, "coercibl": 208, "monomialord": [208, 213], "xring": 208, "vring": 208, "sring": [208, 214, 215], "polyr": [208, 210, 215], "factor_list": [208, 213, 294], "add_gen": 208, "drop_to_ground": 208, "monomial_basi": 208, "206": [208, 213], "744": 208, "945": [208, 214], "symmetric_poli": [208, 213], "is_monomi": [208, 213], "const": [208, 217], "inplac": 208, "shallow": [208, 224], "zero_monom": 208, "fv": 208, "clo": 208, "p64": 208, "qv": 208, "f0": 208, "imul_num": 208, "itercoeff": 208, "itermonom": 208, "iterterm": 208, "leading_expv": 208, "leading_monom": 208, "leading_term": 208, "listcoeff": 208, "listmonom": 208, "listterm": 208, "monom": [208, 213], "strip_zero": 208, "r731": 208, "lauer": 208, "1976": 208, "242": 208, "247": [208, 211, 235], "800205": 208, "806342": 208, "tail_degre": 208, "xfield": 208, "vfield": [208, 268], "sfield": [208, 268], "fracel": [208, 217], "lev": 208, "add_ground": [208, 213], "all_monom": [208, 213], "all_term": [208, 213], "cauchy_lower_bound": 208, "cauchy_upper_bound": 208, "count_complex_root": 208, "sup": [208, 213, 217, 225], "count_real_root": 208, "deflat": [208, 213], "y_i": [208, 210, 212, 213, 233], "x_j": [208, 210, 213], "degree_list": [208, 213], "eject": [208, 213], "exquo_ground": [208, 213], "factor_list_includ": [208, 213], "from_dict": [208, 213], "from_sympy_list": 208, "gff_list": [208, 213], "homogeneous_ord": [208, 213, 230, 233], "is_cyclotom": [208, 213], "is_ground": [208, 213], "is_homogen": [208, 213], "is_irreduc": [208, 213], "is_linear": [208, 213], "is_mon": [208, 213], "is_quadrat": [208, 213], "is_sqf": [208, 213], "l1_norm": [208, 213], "l2_norm_squar": 208, "max_norm": [208, 213], "mignotte_sep_bound_squar": 208, "mignott": [208, 210], "mul_ground": [208, 213], "pdiv": [208, 213], "pexquo": [208, 213], "pquo": [208, 213], "prem": [208, 213], "quo_ground": [208, 213], "refine_root": [208, 212, 213], "includepr": [208, 210, 213], "sqf_list_includ": [208, 213], "sqf_norm": [208, 213], "sqf_part": [208, 213], "sqr": [208, 213], "sturm": [208, 213], "sub_ground": [208, 213], "to_dict": 208, "to_exact": [208, 213], "to_r": [208, 213], "to_sympy_dict": 208, "to_sympy_list": 208, "to_tupl": 208, "total_degre": [208, 213, 230], "trunc": [208, 213, 216], "frac_unifi": 208, "half_per": 208, "poly_unifi": 208, "gr\u00f6bner": 209, "wester": [209, 280], "agca": [209, 280], "l0": 210, "legitim": 210, "uninterest": 210, "bulk": [210, 227], "x_u": 210, "dup__": 210, "densebas": 210, "dmp_lc": 210, "poly_lc": 210, "dmp_tc": 210, "poly_tc": 210, "dmp_ground_lc": 210, "dmp_ground_tc": 210, "dmp_true_lt": 210, "n_1": [210, 235, 237], "n_k": 210, "dmp_degre": 210, "dmp_degree_in": 210, "dmp_degree_list": 210, "dmp_strip": 210, "dmp_valid": 210, "dup_revers": 210, "dmp_copi": 210, "dmp_to_tupl": 210, "dmp_normal": 210, "dmp_convert": 210, "to_domain": 210, "dmp_from_sympi": 210, "dmp_nth": 210, "dmp_ground_nth": 210, "dmp_zero_p": 210, "dmp_zero": 210, "dmp_one_p": 210, "dmp_one": 210, "dmp_ground_p": 210, "dmp_ground": 210, "dmp_negative_p": 210, "dmp_positive_p": 210, "dmp_from_dict": 210, "dmp_to_dict": 210, "dmp_swap": 210, "dmp_permut": 210, "dmp_nest": 210, "dmp_rais": 210, "dmp_deflat": 210, "dmp_multi_defl": 210, "dmp_inflat": 210, "dmp_exclud": 210, "dmp_includ": 210, "dmp_inject": 210, "dmp_eject": 210, "dmp_terms_gcd": 210, "dmp_list_term": 210, "dmp_apply_pair": 210, "dmp_slice": 210, "dup_random": 210, "densearith": 210, "dmp_add_term": 210, "dmp_sub_term": 210, "dmp_mul_term": 210, "dmp_add_ground": 210, "dmp_sub_ground": 210, "dmp_mul_ground": 210, "dmp_quo_ground": 210, "dmp_exquo_ground": 210, "dup_lshift": 210, "dup_rshift": 210, "dmp_ab": 210, "dmp_neg": 210, "dmp_add": 210, "dmp_sub": 210, "dmp_add_mul": 210, "dmp_sub_mul": 210, "dmp_mul": 210, "dmp_sqr": 210, "dmp_pow": 210, "dmp_pdiv": 210, "dmp_prem": 210, "dmp_pquo": 210, "dmp_pexquo": 210, "dmp_rr_div": 210, "dmp_ff_div": 210, "dmp_div": 210, "dmp_rem": 210, "dmp_quo": 210, "dmp_exquo": 210, "dmp_max_norm": 210, "dmp_l1_norm": 210, "dmp_expand": 210, "densetool": 210, "dmp_integr": 210, "dmp_integrate_in": 210, "dmp_diff": 210, "dmp_diff_in": 210, "dmp_eval": 210, "dmp_eval_in": 210, "dmp_eval_tail": 210, "dmp_diff_eval_in": 210, "dmp_trunc": 210, "dmp_ground_trunc": 210, "dup_mon": 210, "dmp_ground_mon": 210, "dup_cont": 210, "dmp_ground_cont": 210, "dup_primit": 210, "dmp_ground_primit": 210, "dup_extract": 210, "dmp_ground_extract": 210, "dup_real_imag": 210, "bivari": [210, 216, 233, 237], "dup_mirror": 210, "dup_scal": 210, "dup_shift": 210, "dup_transform": 210, "dmp_compos": 210, "dup_decompos": 210, "t_m": 210, "r732": 210, "dmp_lift": 210, "dup_sign_vari": 210, "dmp_clear_denom": 210, "k_0": 210, "dmp_revert": 210, "gf_": 210, "justifi": 210, "necess": 210, "u_0": 210, "m_0": [210, 230], "m_n": 210, "236237": 210, "9215": 210, "9405": 210, "9603": 210, "gf_int": 210, "gf_degre": 210, "gf_lc": 210, "gf_tc": 210, "gf_strip": 210, "gf_trunc": 210, "gf_normal": 210, "gf_from_dict": 210, "gf_to_dict": 210, "gf_from_int_poli": 210, "gf_to_int_poli": 210, "gf_neg": 210, "gf_add_ground": 210, "gf_sub_ground": 210, "gf_mul_ground": 210, "gf_quo_ground": 210, "gf_add": 210, "gf_sub": 210, "gf_mul": 210, "gf_sqr": 210, "gf_add_mul": 210, "gf_sub_mul": 210, "gf_expand": 210, "gf_div": 210, "r733": 210, "monagan93": [210, 211], "r734": 210, "gathen99": [210, 211], "gf_rem": 210, "gf_quo": 210, "gf_exquo": 210, "gf_lshift": 210, "gf_rshift": 210, "gf_pow": 210, "gf_pow_mod": 210, "r735": 210, "gf_gcd": 210, "gf_lcm": 210, "gf_cofactor": 210, "gf_gcdex": 210, "eea": 210, "r736": 210, "gf_monic": 210, "gf_diff": 210, "gf_eval": 210, "gf_multi_ev": 210, "gf_compos": 210, "gf_compose_mod": 210, "gf_trace_map": 210, "r737": 210, "gathen92": [210, 211], "gf_random": 210, "gf_irreduc": 210, "gf_irreducible_p": 210, "gf_sqf_p": 210, "gf_sqf_part": 210, "gf_sqf_list": 210, "e_2": [210, 213], "e_k": 210, "f_j": [210, 227], "gf_sqf": 210, "r738": 210, "geddes92": [210, 211], "gf_qmatrix": 210, "berlekamp": 210, "gf_qbasi": 210, "gf_berlekamp": 210, "gf_zassenhau": 210, "gf_shoup": 210, "gf_factor_sqf": 210, "gf_factor": 210, "e_d": 210, "cantor": 210, "zassenhau": [210, 212], "shoup": [210, 211], "kaltofen": [210, 211], "gathen": [210, 211], "gf_factor_method": 210, "r739": 210, "gf_valu": 210, "2204": 210, "congruent": [210, 227, 230], "cong": 210, "189": 210, "139": 210, "r740": 210, "ivan": 210, "niven": 210, "zuckerman": 210, "montgomeri": 210, "infeas": [210, 213], "sdm_": 210, "distributedmodul": 210, "sdm_monomial_mul": 210, "sdm_monomial_deg": 210, "f_5": 210, "sdm_monomial_divid": 210, "sdm_lc": 210, "sdm_to_dict": 210, "sdm_from_dict": 210, "dic": 210, "sdm_add": 210, "2f_1": 210, "3f_1": 210, "yf_1": 210, "xf_1": 210, "sdm_lm": 210, "sdm_lt": 210, "sdm_mul_term": 210, "2xy": [210, 288], "8xy": 210, "sdm_zero": 210, "sdm_deg": 210, "sdm_from_vector": 210, "sdm_to_vector": 210, "variant": [210, 233, 236], "qg": 210, "remark": [210, 216, 227, 233], "uf": 210, "vg": 210, "zout": 210, "euclidtool": 210, "dmp_half_gcdex": 210, "dmp_gcdex": 210, "dmp_invert": 210, "dmp_euclidean_pr": 210, "dmp_primitive_pr": 210, "exceedingli": 210, "collin": [210, 211], "collins67": [210, 211], "subdomain": 210, "2l": 210, "remainin": 210, "subdetermin": 210, "n_2": [210, 237], "n_": [210, 230], "abnorm": 210, "gamma_i": 210, "brown": [210, 211, 237], "traub": [210, 211], "browntraub71": [210, 211], "brown78": [210, 211], "discoveri": [210, 290], "dmp_inner_subresult": 210, "729": 210, "sre": 210, "dmp_subresult": 210, "dmp_prs_result": 210, "dmp_zz_modular_result": 210, "dmp_zz_collins_result": 210, "dmp_qq_collins_result": 210, "dmp_result": 210, "dmp_discrimin": 210, "dmp_rr_prs_gcd": 210, "cff": [210, 213], "dmp_ff_prs_gcd": 210, "dmp_zz_heu_gcd": 210, "r741": 210, "liao95": [210, 211], "dmp_qq_heu_gcd": 210, "dmp_inner_gcd": 210, "dmp_gcd": 210, "dmp_lcm": 210, "dmp_content": 210, "dmp_primit": 210, "dmp_cancel": 210, "dmp_trial_divis": 210, "dmp_zz_mignotte_bound": 210, "dup_zz_hensel_step": 210, "hensel": 210, "r742": 210, "dup_zz_hensel_lift": 210, "f_list": 210, "multifactor": 210, "r743": 210, "dup_zz_zassenhau": 210, "dup_zz_irreducible_p": 210, "eisenstein": 210, "dup_cyclotomic_p": 210, "bradford": 210, "russel": 210, "251": 210, "berlin": 210, "heidelberg": 210, "dup_zz_cyclotomic_poli": 210, "dup_zz_cyclotomic_factor": 210, "r744": 210, "weisstein09": [210, 211], "dup_zz_factor_sqf": 210, "dup_zz_factor": 210, "r745": 210, "dmp_zz_wang_non_divisor": 210, "wang": [210, 211, 255], "eez": 210, "dmp_zz_wang_test_point": 210, "dmp_zz_wang_lead_coeff": 210, "dmp_zz_diophantin": 210, "dmp_zz_wang_hensel_lift": 210, "dmp_zz_wang": 210, "enhanc": [210, 237], "r746": 210, "wang78": [210, 211], "r747": 210, "dmp_zz_factor": 210, "r748": 210, "dmp_ext_factor": 210, "dup_gf_factor": 210, "dmp_factor_list": 210, "dmp_factor_list_includ": 210, "dmp_irreducible_p": 210, "groebnertool": 210, "polyconfig": [210, 213], "f5b": [210, 213], "spoli": 210, "red_groebn": 210, "beckerweispfenning93": 210, "is_groebn": 210, "is_minim": 210, "is_reduc": 210, "fglmtool": 210, "matrix_fglm": 210, "o_to": 210, "o_from": 210, "r749": 210, "fauger": [210, 213], "gianni": [210, 213, 235], "mora": [210, 211, 213, 235], "sdm_spoli": 210, "phantom": 210, "sca": 210, "defn": 210, "sdm_ecart": 210, "ecart": 210, "sdm_nf_mora": 210, "nf": 210, "sdm_groebner": 210, "sugar": [210, 211, 242], "giovini": [210, 211], "polyopt": [210, 214], "build_opt": 210, "basepolynomialerror": 210, "operationnotsupport": 210, "heuristicgcdfail": 210, "homomorphismfail": 210, "isomorphismfail": [210, 212], "extraneousfactor": 210, "evaluationfail": 210, "refinementfail": 210, "notrevers": [210, 213], "notalgebra": 210, "polynomialerror": [210, 213], "unificationfail": [210, 212], "generatorsneed": 210, "computationfail": 210, "exc": 210, "generatorserror": 210, "univariatepolynomialerror": 210, "multivariatepolynomialerror": [210, 213], "polificationfail": 210, "orig": 210, "optionerror": 210, "flagerror": 210, "modulargcd": 210, "modgcd_univari": 210, "monagan00": [210, 211], "modgcd_bivari": 210, "modgcd_multivari": 210, "_modgcd_multivariate_p": 210, "brown71": [210, 211], "degbound": 210, "contbound": 210, "func_field_modgcd": 210, "reconstuct": 210, "z_p": 210, "hoeij04": [210, 211], "scarc": 210, "hsin": 211, "chao": 211, "liao": 211, "fateman": 211, "montreal": 211, "quebec": 211, "canada": 211, "240": [211, 219, 265], "von": [211, 237], "zur": 211, "gerhard": 211, "cambridg": [211, 230], "weisstein": 211, "cyclotomicpolynomi": 211, "1215": 211, "1231": 211, "czapor": 211, "labahn": 211, "monagan": [211, 229], "disco": 211, "721": 211, "kaltofen98": 211, "subquadrat": 211, "223": 211, "1998": [211, 230], "1179": 211, "1197": 211, "shoup95": 211, "397": 211, "shoup91": 211, "cox97": [211, 213], "shea": [211, 213], "ajwa95": 211, "ajwa": 211, "liu": 211, "groebner": [211, 212, 213, 216, 229, 235, 236], "cites": 211, "ist": [211, 226], "psu": [211, 226], "mycites": 211, "login": 211, "bose03": 211, "bose": 211, "guiver": 211, "giovini91": 211, "bronstein93": [211, 213], "salvi": [211, 214], "kiev": 211, "ukrain": 211, "buchberger01": [211, 213], "theorist": 211, "moreno": 211, "diaz": 211, "freir": 211, "eurocast": 211, "februari": 211, "davenport88": 211, "siret": 211, "tournier": 211, "london": [211, 230], "124": [211, 283], "greuel": 211, "pfister": 211, "atiyah": 211, "macdonald": 211, "142": 211, "1971": [211, 233], "505": 211, "249": 211, "wittkopf": 211, "478": 211, "hoeij": 211, "297": [211, 213], "304": [211, 213], "wang81": 211, "adic": 211, "symsac": 211, "hoeij02": 211, "manwright94": [211, 213], "yiu": 211, "kwong": 211, "franci": 211, "wright": 211, "dispers": [211, 237], "190347": 211, "190413": 211, "koepf98": [211, 213], "koepf": [211, 219, 229], "vieweg": 211, "abramov71": [211, 213], "abramov": [211, 235], "ussr": 211, "330": 211, "man93": [211, 213], "376": 211, "sciencedirect": [211, 226], "pii": [211, 226], "s0747717183710539": 211, "kapur1994": 211, "deepak": 211, "kapur": 211, "tushar": 211, "saxena": 211, "yang": 211, "dixon": 211, "researchg": [211, 237], "2514261_algebraic_and_geometric_reasoning_using_dixon_result": 211, "palancz08": 211, "pal\u00e1ncz": 211, "zaletnyik": 211, "jl": [211, 250], "awang": 211, "ew": 211, "grafarend": 211, "geodet": 211, "geodesi": 211, "225607735_dixon_result": 211, "s_solution_of_systems_of_geodetic_polynomial_equ": 211, "bruce97": 211, "bruce": 211, "randal": 211, "donald": [211, 252], "mundi": 211, "artifici": [211, 220], "intellig": [211, 229, 233, 294], "orlando": 211, "www2": 211, "duke": 211, "donaldlab": 211, "symbolicnumericalcomput": 211, "045": 211, "087": 211, "stiller96": 211, "stiller": 211, "citeseerx": [211, 226], "viewdoc": [211, 226], "590": 211, "2021": 211, "rep1": [211, 226], "cohen93": [211, 212], "henri": 211, "olga": 212, "tausski": 212, "zimmer": 212, "pohst": 212, "articul": 212, "mathfrak": 212, "regul": 212, "alpha_m": 212, "round_two": 212, "prime_decomp": 212, "prime_valu": 212, "minimal_polynomi": 212, "field_isomorph": 212, "nilrad": 212, "z_k": 212, "zk": 212, "ordinarili": 212, "503": 212, "r750": 212, "r751": 212, "powerbasisel": 212, "ramif": 212, "as_submodul": 212, "bundl": 212, "test_factor": 212, "deliber": 212, "is_inert": 212, "inert": [212, 233], "reduce_anp": 212, "reduce_alg_num": 212, "field_gen": 212, "just_gen": 212, "reagent": 212, "kummer": 212, "1847": 212, "ueber": 212, "zerlegung": 212, "crell": 212, "r752": 212, "poly_from_expr": [212, 213], "tschirnhausen": 212, "maxtriesexcept": 212, "g_name": 212, "_minpoly_compos": 212, "stall": 212, "alli": 212, "monomorph": 212, "alpha_i": 212, "alpha_n": 212, "lincomb": 212, "primtiiv": 212, "meanwhil": 212, "moduleel": 212, "powerbasi": 212, "submodule_from_matrix": 212, "ancestor": 212, "to_col": 212, "nca": 212, "circumst": [212, 288], "_mult_tab": 212, "successfulli": 212, "moduleendomorph": 212, "innerendomorph": 212, "endomorphismr": 212, "spec": [212, 213], "i_n": [212, 213, 238], "include_self": 212, "basis_el": 212, "element_from_r": 212, "endomorphism_r": 212, "is_compat_col": 212, "mult_tab": 212, "mult": 212, "closurefailur": 212, "nearest_common_ancestor": 212, "number_field": 212, "power_basis_ancestor": 212, "incom": [212, 237], "halv": 212, "submodule_from_gen": 212, "over_power_basi": 212, "starts_with_un": 212, "hnf_modulu": 212, "whole_submodul": 212, "element_from_anp": 212, "element_from_alg_num": 212, "element_from_poli": 212, "qq_matrix": 212, "basis_element_pullback": 212, "discard_befor": 212, "structureerror": 212, "cohen00": 212, "make_mod_elt": 212, "qq_col": 212, "from_int_list": 212, "is_compat": 212, "reduced_mod_p": 212, "to_ancestor": 212, "anc": 212, "to_par": 212, "to_anp": 212, "inner_endomorph": 212, "event": [212, 237], "find_min_poli": 212, "missingunityerror": 212, "is_int": 212, "get_num_denom": 212, "extract_fundamental_discrimin": 212, "r753": 212, "algintpow": 212, "zeta_pow": 212, "r754": 212, "coeff_search": 212, "supplement_a_subspac": 212, "v_n": 212, "w_r": 212, "w_j": 212, "u_j": 212, "r755": 212, "parallel_poly_from_expr": 213, "exprtool": 213, "gcd_list": 213, "lcm_list": 213, "destruct": 213, "2079": 213, "1401": 213, "2715": 213, "6720": 213, "1092": 213, "gff": 213, "check_sqf": 213, "count_root": 213, "ground_root": 213, "nroot": [213, 235], "4142": 213, "732": 213, "polyroot": 213, "r756": 213, "93ruffini_theorem": 213, "865": 213, "casu": 213, "irreducibili": 213, "r757": 213, "0365": 213, "33984": 213, "87636": 213, "casus_irreducibili": 213, "maxstep": 213, "cleanup": 213, "73205080756888": 213, "73205080756887729352744634151": 213, "nth_power_roots_poli": 213, "r_g": 213, "_signsimp": 213, "q_n": 213, "is_zero_dimension": [213, 236], "donal": 213, "230": [213, 235], "ec": 213, "em": 213, "dispersionset": 213, "gp": [213, 233], "free_symbols_in_domain": 213, "from_poli": 213, "get_domain": 213, "get_modulu": 213, "has_only_gen": 213, "vincent": [213, 255], "akrita": 213, "strzebonski": 213, "va": 213, "alkiviadi": 213, "panagioti": 213, "vigkla": 213, "265": 213, "279": 213, "polnomi": 213, "is_multivari": 213, "is_univari": 213, "ltrim": 213, "make_monic_over_integers_by_scaling_root": 213, "_only_": 213, "sturmian": 213, "subresultants_qq_zz": 213, "suffix": [213, 250], "_pg": 213, "_amv": 213, "rem_z": 213, "premultipli": 213, "rat_clear_denom": 213, "_ignor": 213, "retract": 213, "same_root": 213, "set_domain": 213, "set_modulu": 213, "termwis": 213, "fglm": 213, "r758": 213, "horner_schem": 213, "equispac": 213, "viet": 213, "itermonomi": 213, "min_degre": 213, "gib": 213, "monomial_kei": 213, "monomial_count": 213, "gradedlexord": 213, "reversedgradedlexord": 213, "clear_cach": 213, "_get_interv": 213, "165": [213, 237, 255], "169": 213, "eval_approx": 213, "evalf_r": 213, "eval_r": 213, "69629": 213, "71318": 213, "805": 213, "3275": 213, "65536": [213, 216, 217], "414645": 213, "131072": 213, "6545": 213, "104755": 213, "2097152": 213, "6634255": 213, "_all_root": 213, "use_cach": 213, "_complexes_index": 213, "_complexes_sort": 213, "_count_root": 213, "_ensure_complexes_init": 213, "_ensure_reals_init": 213, "_eval_is_imaginari": 213, "_get_complex": 213, "_get_complexes_sqf": 213, "currentfactor": 213, "_get_real": 213, "_get_reals_sqf": 213, "_get_root": 213, "_indexed_root": 213, "_new": 213, "_postprocess_root": 213, "_preprocess_root": 213, "heroic": [213, 235], "_real_root": 213, "_reals_index": 213, "_reals_sort": 213, "_refine_complex": 213, "_roots_trivi": 213, "_set_interv": 213, "return_mpmath": 213, "861136": 213, "86113631159405258": 213, "unread": [213, 253], "inexpress": 213, "unsolv": [213, 236], "r759": 213, "cubic_equ": 213, "trigonometric_and_hyperbolic_solut": 213, "specialpoli": 213, "swinnerton_dyer_poli": 213, "swinnerton": 213, "dyer": 213, "random_poli": 213, "gegenbau": [213, 217], "jakob": 213, "psum": 213, "3144337": 213, "r760": 213, "bernoulli_c_poli": 213, "reindex": 213, "swiss": 213, "knife": 213, "630": 213, "5124": 213, "12465": 213, "155": 213, "r761": 213, "partfrac": [213, 219], "undertermin": 213, "_w": [213, 224], "apart_list": 213, "assemble_partfrac_list": 213, "bunch": 213, "pfd": 213, "r762": 213, "partial_list": 213, "reassembl": 213, "pfda": 213, "r763": 213, "r764": 213, "r765": 213, "r766": 213, "r767": 213, "r768": 213, "r769": 213, "r770": 213, "widen": 214, "ring_seri": 214, "rs_sin": 214, "166666666666667": 214, "puiseux": 214, "rs_co": 214, "rs_tan": 214, "rs_exp": 214, "blazingli": 214, "promin": 214, "gradual": 214, "rs_": 214, "rs_log": 214, "rs_lambertw": 214, "rs_atan": 214, "arctang": 214, "rs_asin": 214, "_tan1": 214, "rs_cot": 214, "rs_cos_sin": 214, "rs_atanh": 214, "rs_sinh": 214, "rs_cosh": 214, "rs_tanh": 214, "rs_hadamard_exp": 214, "inver": 214, "rs_mul": 214, "rs_squar": 214, "rs_pow": 214, "rs_series_invers": 214, "rs_series_revers": 214, "a_kx_k": 214, "ar_i": 214, "ar_": 214, "ae": 214, "rs_trunc": 214, "rs_nth_root": 214, "160249952256379": 214, "44224957030741": 214, "rs_sub": 214, "rs_diff": 214, "rs_integr": 214, "rs_newton": 214, "rs_compose_add": 214, "r771": 214, "bostan": 214, "flajolet": 214, "schost": 214, "4579": 214, "institut": 214, "nation": 214, "recherch": 214, "informatiqu": 214, "automatiqu": 214, "rs_is_puiseux": 214, "rs_puiseux": 214, "rs_puiseux2": 214, "rs_series_from_list": 214, "concur": 214, "rs_fun": 214, "_tan": 214, "_nth": 214, "_root": 214, "_fun": 214, "mul_xin": 214, "pow_xin": 214, "_raw": 215, "sympy_eqs_to_r": 215, "eqs_r": 215, "eqs_to_matrix": 215, "eqs_coeff": 215, "eqs_rh": 215, "_solve_lin_si": 215, "_solve_lin_sys_compon": 215, "critiqu": 216, "wester1999": 216, "systemat": 216, "153": 216, "\u2124": [216, 217, 236, 295], "unm": 216, "driver": [217, 249], "adequ": 217, "emptyprint": 217, "_sympystr": 217, "mathml": 217, "inconveni": 217, "_print_": 217, "expr_class": 217, "hierarchi": [217, 237], "_print_rat": 217, "_print_numb": 217, "_print_atom": 217, "_print_bas": 217, "print_latex": 217, "mylatexprint": 217, "_print_deriv": 217, "print_my_latex": 217, "modop": 217, "subcompon": 217, "outermost": [217, 225, 229, 241], "modopmodewrong": 217, "modopnestedwrong": 217, "modopsettingswrong": 217, "subobject": 217, "infrastructur": [217, 234], "printer_exampl": 217, "set_global_set": 217, "stringpict": 217, "pretty_symbologi": 217, "prettyform": 217, "hline": 217, "vline": 217, "ascii": 217, "_pretti": 217, "use_unicode_sqrt_char": 217, "root_not": 217, "mat_symbol_styl": 217, "prettifi": 217, "bold": 217, "c89codeprint": 217, "print_ccod": 217, "tgamma": 217, "known_functions_c89": 217, "known_functions_c99": 217, "fmax": 217, "fmin": 217, "lgamma": 217, "indent_cod": 217, "cfunction_format": 217, "derefer": 217, "dereferenc": 217, "symbols_to_declar": 217, "not_supported_funct": 217, "code_text": 217, "m_sqrt2": 217, "math_macro": 217, "m_sqrt2l": 217, "cxx": 217, "cxx98codeprint": 217, "print_rcod": 217, "rcode": 217, "known_funct": 217, "_rcode": 217, "rfunction_str": 217, "rfunction_format": 217, "ifels": 217, "type_map": 217, "name_mangl": 217, "mangl": 217, "floor1": 217, "floor2": 217, "print_fcod": 217, "_fcode": 217, "conjg": 217, "32768": 217, "7182818284590452d0": 217, "1415926535897932d0": 217, "718281828459045235360287d0": 217, "141592653589793238462643d0": 217, "869604401089358618834491d0": 217, "mygamma": 217, "allow_unknown_funct": 217, "smtlib": 217, "smtlibprint": 217, "symbol_t": 217, "_smtlib": 217, "_default_set": 217, "known_const": 217, "ite": 217, "known_typ": 217, "smtlib_cod": 217, "auto_assert": 217, "auto_declar": 217, "prefix_express": 217, "suffix_express": 217, "log_warn": 217, "booleanfunct": 217, "dreal": 217, "14159": 217, "my_smt_variable_for_pi": 217, "postfix": [217, 255], "riski": 217, "sound": [217, 294], "pw": 217, "pythontyp": 217, "smt_builtin_func": 217, "existing_smtlib_fcn": 217, "user_def_func": 217, "fun": [217, 234, 287], "coshintegr": 217, "cosintegr": 217, "expintegralei": 217, "factorialpow": 217, "heavisidetheta": 217, "sinhintegr": 217, "sinintegr": 217, "arccosh": 217, "arccoth": 217, "arcsinh": 217, "arctanh": 217, "dirichleteta": 217, "gegenbauerc": 217, "hypergeometricpfq": 217, "sphericalbesselj": 217, "logintegr": 217, "lucasl": 217, "mathieu": 217, "riemann_xi": 217, "riemannxi": 217, "stieltjesgamma": 217, "sphericalbess": 217, "mcodeprint": 217, "_mcode": 217, "mcode": 217, "maplecodeprint": 217, "_mapl": 217, "maple_cod": 217, "print_maple_cod": 217, "javascriptcodeprint": 217, "_javascript": 217, "js_function_str": 217, "known_fcns_src1": 217, "known_fcns_src2": 217, "conj": 217, "juliacodeprint": 217, "_julia": 217, "harmless": [217, 290], "existing_julia_fcn": 217, "coshint": 217, "cosint": 217, "sinhint": 217, "sinint": 217, "logint": 217, "gammaln": 217, "octavecodeprint": 217, "_octav": 217, "recip": [217, 255], "powf": 217, "signum": 217, "rustcodeprint": 217, "_rust_cod": 217, "7_f64": 217, "_aesara": 217, "tensorvari": 217, "floatx": 217, "squeez": 217, "dim_handl": 217, "gtkmathview": 217, "widget": 217, "print_gtk": 217, "libgtkmathview": 217, "start_view": 217, "_lambdacod": 217, "accepted_latex_funct": 217, "parenthesize_sup": 217, "fold_frac_pow": 217, "fold_func_bracket": 217, "fold_short_frac": 217, "inv_trig_styl": 217, "itex": 217, "ln_notat": 217, "long_frac_ratio": 217, "mat_delim": 217, "mat_str": 217, "mul_symbol": 217, "symbol_nam": 217, "gothic_re_im": 217, "decimal_separ": 217, "diff_oper": 217, "smallmatrix": [217, 288], "amsmath": 217, "fracton": 217, "semicolon": 217, "monospac": 217, "mathtt": 217, "mathml2": 217, "mathmlprinterbas": 217, "mathmlcontentprint": 217, "mathmlpresentationprint": 217, "chapter4": 217, "_mathml_cont": 217, "mathml_tag": 217, "chapter3": 217, "_mathml_present": 217, "utf": 217, "mul_symbol_mathml_numb": 217, "xb7": 217, "print_mathml": [217, 293], "mrow": 217, "mpmathprint": 217, "fully_qualified_modul": 217, "print_python": 217, "textual": 217, "reprprint": 217, "_sympyrepr": 217, "reprifi": 217, "sympy_integ": 217, "displayhook": [217, 248], "pprint_nod": 217, "nb2": 217, "print_nod": 217, "asssumpt": 217, "determinisit": 217, "backtrac": 217, "print_tre": 217, "outputbuff": 217, "dvioption": 217, "outputtexfil": 217, "extra_preambl": 217, "latex_set": 217, "postscript": 217, "tex": 217, "eulervm": 217, "sty": 217, "debian": 217, "ubuntu": 217, "unset": [217, 229], "gimp": 217, "evinc": 217, "kdvi": 217, "xdvi": 217, "xdg": 217, "system_default_view": 217, "bytesio": 217, "usepackag": 217, "amsfont": 217, "renewcommand": 217, "popen": 217, "phidd": 217, "bitmap": 217, "split_super_sub": 217, "var_sub1__sup_sub2": 217, "assignmenterror": 217, "bitwiseand": 217, "bitwiseor": 217, "bitwisexor": 217, "precedence_valu": 217, "kroneckerproduct": 217, "tensadd": [217, 243], "tensmul": [217, 243], "precedence_funct": 217, "precedence_float": 217, "precedence_fracel": 217, "precedence_integ": 217, "precedence_mul": 217, "precedence_polyel": 217, "precedence_r": 217, "precedence_unevaluatedexpr": 217, "databas": [217, 227], "pretty_use_unicod": 217, "pretty_try_use_unicod": 217, "xstr": 217, "greek_lett": 217, "digit_2txt": 217, "ONE": 217, "seven": 217, "symb_2txt": 217, "parenthesi": [217, 241], "\u2080": 217, "\u2081": 217, "\u2082": 217, "\u2084": 217, "\u2085": 217, "\u2086": 217, "\u2087": 217, "\u2088": 217, "\u2089": 217, "\u2090": 217, "\u1d66": 217, "\u1d6a": 217, "\u2091": 217, "\u1d67": 217, "\u2095": 217, "\u1d62": 217, "\u2096": 217, "\u2097": 217, "\u2098": 217, "\u2099": 217, "\u2092": 217, "\u209a": 217, "\u1d69": 217, "\u1d63": 217, "\u1d68": 217, "\u209b": 217, "\u209c": 217, "\u1d64": 217, "\u1d65": 217, "\u2093": 217, "\u2070": 217, "\u00b9": 217, "\u00b2": 217, "\u00b3": 217, "\u2074": 217, "\u2075": 217, "\u2076": 217, "\u2077": 217, "\u2078": 217, "\u2079": 217, "\u2071": 217, "\u207f": 217, "xobj": 217, "vobj": 217, "hobj": 217, "vf": 217, "\u00bd": 217, "\u2153": 217, "\u00bc": 217, "\u2155": 217, "\u2159": 217, "\u215b": 217, "\u2154": 217, "\u2156": 217, "\u00be": 217, "\u2157": 217, "\u215c": 217, "\u2158": 217, "\u215a": 217, "\u215d": 217, "\u215e": 217, "xsym": 217, "symbologi": 217, "atoms_t": 217, "\u2102": [217, 295], "emptysequ": [217, 223], "\u2115": 217, "\u2115\u2080": 217, "\u211d": [217, 295], "symmetricdiffer": [217, 225, 236], "pretty_atom": 217, "atom_nam": 217, "pretty_symbol": 217, "symb_nam": 217, "bold_nam": 217, "stylis": 217, "_print_meijerg": 217, "_print_hyp": 217, "jurjen": 217, "bo": 217, "hate": 217, "spammer": 217, "pietjepuk314": 217, "oc": [217, 268], "oohai": 217, "gedg": 217, "mun": 217, "terminal_str": 217, "baselin": 217, "leftslash": 217, "slash": [217, 248], "paren": 217, "ifascii_nougli": 217, "line_break": 217, "ugli": 217, "terminal_width": 217, "wider": 217, "maxdepth": 217, "labelfunc": 217, "digraph": [217, 255, 293], "rankdir": [217, 293], "_sparse_": 218, "flavor": 218, "________": [218, 237, 255], "x\u2080": 218, "greatli": 218, "numbered_symbol": [218, 229, 233, 255], "postprocessor": [218, 229], "reduced_expr": [218, 229], "formalpowerseri": 219, "coeff_bel": 219, "formalpowerseriescompos": 219, "r772": 219, "comtet": 219, "loui": 219, "reidel": 219, "1974": 219, "formalpowerseriesinvers": 219, "r773": 219, "upto": [219, 224, 233], "formalpowerseriesproduct": 219, "rational_algorithm": 219, "compute_fp": 219, "hyper_algorithm": 219, "omposit": 219, "bell_seq": 219, "finiteformalpowerseri": 219, "rational_independ": 219, "ra": 219, "admiss": [219, 222], "r774": 219, "r775": 219, "simpled": 219, "exp_r": 219, "explik": 219, "hyper_r": 219, "rsolve_hypergeometr": 219, "r776": 219, "r777": 219, "solve_d": 219, "fourierseri": 220, "scalex": 220, "shiftx": 220, "sigma_approxim": 220, "gibb": 220, "bigl": 220, "bigr": 220, "lanczo": 220, "r778": 220, "gibbs_phenomenon": 220, "r779": 220, "sawtooth": 220, "bn": 220, "r780": 220, "limitseq": 222, "difference_delta": 222, "r781": 222, "differencedelta": 222, "limit_seq": [222, 224], "safeguard": 222, "r782": 222, "kauer": 222, "seqper": 223, "seqformula": 223, "seqbas": 223, "coeff_mul": 223, "find_linear_recurr": 223, "gfvar": 223, "seqadd": 223, "seqmul": 223, "_mul": 223, "recursiveseq": 223, "fib": 223, "invok": [224, 248, 249], "workhors": 224, "succ": [224, 237], "asymp": 224, "exposit": 224, "gloss": 224, "wsym": 224, "test_rewrite1": 224, "build_expression_tre": 224, "mrv_leadterm": 224, "e0": 224, "calculate_seri": 224, "limitinf": 224, "constantli": 224, "subsset": 224, "mrv_max1": 224, "mrv_max3": 224, "expsf": 224, "expsg": 224, "expsboth": 224, "do_sub": 224, "r783": 224, "limsup_": 224, "7048138294": 224, "7182818285": 224, "6349839002": 224, "6449340668": 224, "shank": 224, "6881721793": 224, "6931396564": 224, "6931471806": 224, "6931471805599453094172321215": 224, "r784": 224, "residue_theorem": 224, "neighborhood": 225, "rim": 225, "conditionset": [225, 236, 237, 295], "affirm": 225, "infimum": 225, "imageset": [225, 236, 295], "is_clos": 225, "closed": 225, "is_disjoint": 225, "r785": 225, "disjoint_set": 225, "is_open": 225, "is_proper_subset": 225, "is_proper_superset": 225, "left_open": 225, "is_superset": 225, "isdisjoint": 225, "issubset": 225, "issuperset": 225, "productset": [225, 236], "powerset": 225, "fancyset": 225, "complexregion": [225, 236], "disjointunion": 225, "lebesgu": 225, "r786": 225, "power_set": 225, "symmetric_differ": 225, "r787": 225, "right_open": 225, "mpi": 225, "r788": 225, "interval_": 225, "as_rel": 225, "is_left_unbound": 225, "is_right_unbound": 225, "r789": 225, "r790": 225, "union_": 225, "28set_theori": 225, "r791": 225, "intersection_": 225, "coin": [225, 237], "r792": 225, "cartesian_product": 225, "is_iter": 225, "r793": 225, "complementset": 225, "r794": 225, "disjoint_union": 225, "r795": 225, "empty_set": 225, "r796": 225, "universal_set": 225, "flambda": 225, "square_iter": 225, "base_set": 225, "cartesiancomplexregion": 225, "polarcomplexregion": 225, "unit_disk": 225, "upper_half_unit_disk": 225, "a_interv": 225, "b_interv": 225, "from_real": 225, "pset": 225, "rset": 225, "thetaset": 225, "upper_half_plan": 225, "normalize_theta_set": 225, "r797": 225, "r798": 225, "axiom_of_power_set": 225, "sin_sol": 225, "r799": 225, "element_": 225, "varnoth": 225, "tr0": 226, "tr1": 226, "tr2": 226, "tr2i": 226, "tr3": 226, "tr4": 226, "tr5": 226, "tr6": 226, "tr7": 226, "tr8": 226, "tr9": 226, "tr10": 226, "tr10i": 226, "tr11": 226, "tr12": 226, "tr12i": 226, "tr13": 226, "trmorri": 226, "tr14": 226, "tr15": 226, "tr16": 226, "tr22": 226, "tr111": 226, "ctr1": 226, "ctr4": 226, "rl1": 226, "rl2": 226, "deem": 226, "932": 226, "016": 226, "serendipit": 226, "dead": 226, "newa": 226, "lucki": 226, "sqt": 226, "_tr56": 226, "un": [226, 227], "r800": 226, "morri": 226, "27s_law": 226, "trpower": 226, "r801": 226, "list_of_trigonometric_ident": 226, "reduction_formula": 226, "ctr2": 226, "ctr3": 226, "r802": 226, "s0895717706001609": 226, "dimitar": 226, "vlahovski": 226, "technolog": 226, "xiuqin": 226, "zhong": 226, "zhenb": 226, "zeng": 226, "1169": 226, "1177": 226, "657": 226, "2478": 226, "sosmath": 226, "trig5": 226, "symplifi": [227, 229], "roach1996": 227, "roach1997": 227, "p_q": 227, "reachabl": [227, 237], "f_q": 227, "undo": [227, 294], "whenc": 227, "game": 227, "twofold": 227, "incongru": 227, "wlog": 227, "alpha_r": 227, "beta_r": 227, "blindli": 227, "messi": 227, "k_u": 227, "l_v": 227, "k_j": 227, "c_w": 227, "r_j": 227, "l_u": 227, "res_": 227, "delta_i": 227, "add_formula": 227, "addb": 227, "sum_0": 227, "test_hyperexpand": 227, "test_formula": 227, "suboptim": 227, "imath": 227, "b1prime": 227, "vital": 227, "308": 227, "hongguang": [228, 274], "fu": [228, 229, 274], "logcombin": [229, 233, 236], "my_measur": 229, "nthroot": 229, "max_len": 229, "surd": 229, "kroneckersimp": 229, "besselsimp": 229, "strigonometr": 229, "399": 229, "hypersimilar": 229, "rational_convers": 229, "base10": 229, "6004799503160655": 229, "eq_x": 229, "max_term": 229, "collect_sqrt": 229, "polish": 229, "rad_ration": 229, "collect_const": 229, "rcollect": 229, "ratsimpmodprim": 229, "r803": 229, "pearc": 229, "1145768": 229, "1145809": 229, "trigsimp_groebn": 229, "bb1": 229, "be1": 229, "bb2": 229, "be2": 229, "bei": 229, "max_it": 229, "unrad": [229, 235], "r804": 229, "20210806201615": 229, "fagin": 229, "symb85": 229, "r805": 229, "cybertest": 229, "opt_sub": 229, "as_unevaluated_bas": 229, "tree_cs": 229, "hyperegeometr": 229, "epathtool": 229, "epath": 229, "ebnf": 229, "za": [229, 237], "xml": 229, "xpath": 229, "hasattr": [229, 251], "beginn": [230, 232, 233, 235, 236, 295], "diophantu": 230, "mathematician": [230, 236], "citi": 230, "alexandria": 230, "father": 230, "hi": 230, "arithmetica": 230, "diop_solv": 230, "classify_diop": 230, "diop_linear": 230, "diop_quadrat": 230, "diop_ternary_quadrat": 230, "diop_ternary_quadratic_norm": 230, "diop_general_pythagorean": 230, "diop_general_sum_of_squar": 230, "diop_general_sum_of_even_pow": 230, "merge_solut": 230, "3y": 230, "9369318": 230, "find_dn": 230, "diop_dn": 230, "transformation_to_dn": 230, "920": 230, "5y": 230, "BY": 230, "transformation_to_norm": 230, "t4": 230, "t5": 230, "sum_of_squar": 230, "providean": 230, "eqyptian": 230, "thilinaatsympi": 230, "andreescu": 230, "titu": 230, "andrica": 230, "dorin": 230, "cucurezeanu": 230, "ion": 230, "diophantineequ": 230, "alpertron": 230, "20160323033111": 230, "jpr2718": 230, "ax2p": 230, "permute_sign": [230, 255], "signed_permut": [230, 255], "_dict": 230, "base_solution_linear": 230, "r806": 230, "r807": 230, "pell": 230, "lmm": 230, "r808": 230, "393": 230, "13y": 230, "986": 230, "49299": 230, "1570": 230, "diop_bf_dn": 230, "robertson": 230, "20160323033128": 230, "cornacchia": 230, "r809": 230, "nitaj": 230, "r810": 230, "numbertheori": 230, "r811": 230, "r812": 230, "676": 230, "884": 230, "fxz": 230, "3xy": 230, "r813": 230, "fxy": 230, "gyz": 230, "hxz": 230, "r814": 230, "cremona": 230, "rusin": 230, "2x_": 230, "m4": 230, "general_sum_of_squar": 230, "8m": 230, "r815": 230, "2345": 230, "proofwiki": 230, "integer_as_sum_of_three_squar": 230, "general_sum_of_even_pow": 230, "power_represent": 230, "1729": 230, "stopiter": 230, "sum_of_three_squar": 230, "r816": 230, "44542": 230, "207": 230, "schorn": 230, "sum_of_four_squar": 230, "3456": 230, "1294585930293": 230, "2161": 230, "1137796": 230, "r817": 230, "sum_of_pow": 230, "evenli": 230, "var_t": 230, "pqa": 230, "r818": 230, "ur": 230, "dv": 230, "vr": 230, "r819": 230, "parametrize_ternary_quadrat": 230, "r820": 230, "nigel": 230, "ldescent": 230, "4x": [230, 236, 283], "7y": 230, "5x": 230, "r821": 230, "r822": 230, "nottingham": 230, "worktrib": 230, "1023265": 230, "gaussian_reduc": 230, "r823": 230, "20201021115213": 230, "cuhk": 230, "wkshum": 230, "404": 230, "r824": 230, "holzer": 230, "mordel": 230, "r825": 230, "r826": 230, "prime_as_sum_of_two_squar": 230, "r827": 230, "sqf_normal": 230, "r828": 230, "legrang": 230, "csusm": 230, "aitken_html": 230, "diophantinesolutionset": 230, "symbols_seq": 230, "dict_iter": 230, "diophantineequationtyp": 230, "binaryquadrat": 230, "r829": 230, "r830": 230, "inhomogeneousternaryquadrat": 230, "inhomogen": [230, 233, 235], "homogeneousternaryquadraticnorm": 230, "homogeneousternaryquadrat": 230, "inhomogeneousgeneralquadrat": 230, "homogeneousgeneralquadrat": 230, "generalsumofsquar": 230, "r831": 230, "generalpythagorean": 230, "cubicthu": 230, "thue": 230, "generalsumofevenpow": 230, "pde": [231, 233, 274], "subcategori": [232, 273], "solve_rational_inequ": 232, "solve_poly_inequ": 232, "reduce_rational_inequ": 232, "reduce_abs_inequ": 232, "solvifi": [232, 236], "autodetect": [233, 234], "odesimp": 233, "ode_ord": [233, 234, 235], "deutil": [233, 234], "best_hint": 233, "unevaluat": 233, "test_od": 233, "ode_": 233, "hintnam": [233, 234], "classify_sysod": 233, "almost_linear": 233, "dsolve_system": 233, "ode_hintnam": 233, "allhint": [233, 234], "tough": 233, "nth_linear_homogeneous_constant_coeff_integr": 233, "1st_linear": 233, "nth_linear": 233, "indep": 233, "indep_div_dep": 233, "undetermined_coeffici": 233, "_best": 233, "nth_algebra": 233, "1st_homogeneous_coeff_best": 233, "1st_homogeneous_coeff_subs_indep_div_dep": 233, "1st_homogeneous_coeff_subs_dep_div_indep": 233, "1st_power_seri": 233, "lie_group": 233, "nth_linear_constant_coeff_homogen": 233, "nth_linear_euler_eq_homogen": 233, "nth_algebraic_integr": 233, "1st_exact_integr": 233, "1st_linear_integr": 233, "bernoulli_integr": 233, "1st_homogeneous_coeff_subs_indep_div_dep_integr": 233, "1st_homogeneous_coeff_subs_dep_div_indep_integr": 233, "nth_linear_constant_coeff_undetermined_coeffici": 233, "nth_linear_constant_coeff_variation_of_paramet": 233, "nth_linear_constant_coeff_variation_of_parameters_integr": 233, "solve_for_func": [233, 234], "homogeneouscoeffsubsdepdivindep": 233, "homogeneouscoeffsubsindepdivdep": 233, "varepsilon": 233, "genform": [233, 234], "starrett": 233, "checkinfsol": 233, "constantsimp": 233, "symbolnam": 233, "startnumb": 233, "endnumb": 233, "renumb": 233, "absorpt": 233, "assist": 233, "constant_renumb": 233, "1st_rational_riccati": 233, "riccati_special_minus2": 233, "linear_coeffici": 233, "separable_reduc": 233, "nth_linear_euler_eq_nonhomogeneous_undetermined_coeffici": 233, "nth_linear_euler_eq_nonhomogeneous_variation_of_paramet": 233, "liouvil": 233, "2nd_linear_airi": 233, "2nd_linear_bessel": 233, "2nd_hypergeometr": 233, "2nd_hypergeometric_integr": 233, "nth_order_reduc": 233, "2nd_power_series_ordinari": 233, "2nd_power_series_regular": 233, "almost_linear_integr": 233, "linear_coefficients_integr": 233, "separable_reduced_integr": 233, "nth_linear_euler_eq_nonhomogeneous_variation_of_parameters_integr": 233, "liouville_integr": 233, "2nd_nonlinear_autonomous_conserv": 233, "2nd_nonlinear_autonomous_conserved_integr": 233, "newconst": 233, "ode_sol_simpl": 233, "trysolv": 233, "sola": 233, "solb": 233, "listofsolut": 233, "ode_problem": 233, "firstexact": 233, "exact_differential_equ": 233, "tenenbaum": 233, "dover": 233, "1963": 233, "homogeneouscoeffbest": 233, "ode_1st_homogeneous_coeff_best_integr": 233, "homogeneous_differential_equ": 233, "firstlinear": 233, "linear_differential_equ": 233, "order_equation_with_variable_coeffici": 233, "rationalriccati": 233, "atleast": 233, "riccati_equ": 233, "thieu": 233, "vo": 233, "risc_5387": 233, "phdthesisthieu": 233, "secondlinearairi": 233, "secondlinearbessel": 233, "math24": 233, "bernoulli_differential_equ": 233, "goldstein": 233, "braun": 233, "maplesoft": 233, "aspx": 233, "odeadvisor": 233, "riccatispeci": 233, "__________________": 233, "eqworld": 233, "ipmnet": 233, "ru": 233, "ode0106": 233, "ode0123": 233, "nthlinearconstantcoeffhomogen": 233, "nth_linear_constant_coeff_homogeneous_integr": 233, "nonhomogeneous_equation_with_constant_coeffici": 233, "nthlinearconstantcoeffundeterminedcoeffici": 233, "method_of_undetermined_coeffici": 233, "221": 233, "nthlinearconstantcoeffvariationofparamet": 233, "variation_of_paramet": 233, "planetmath": 233, "variationofparamet": 233, "nthlineareulereqhomogen": 233, "equidimension": 233, "nth_linear_euler_eq_homogeneous_integr": 233, "sollist": 233, "93euler_equ": 233, "bender": 233, "orszag": 233, "scientist": 233, "nthlineareulereqnonhomogeneousvariationofparamet": 233, "nthlineareulereqnonhomogeneousundeterminedcoeffici": 233, "nthalgebra": 233, "nthorderreduc": 233, "caught": 233, "fault": 233, "almostlinear": 233, "first_linear": 233, "joel": 233, "mose": 233, "stormi": 233, "decad": 233, "august": [233, 252], "558": 233, "linearcoeffici": 233, "separablereduc": 233, "liegroup": 233, "secondhypergeometr": 233, "2f1": 233, "1f1": 233, "0f1": 233, "liouvillian": 233, "pfq": 233, "chan": 233, "cheb": 233, "terrab": 233, "ode_1st_power_seri": 233, "travi": 233, "walker": 233, "ode_2nd_power_series_ordinari": 233, "lamar": 233, "seriessolut": 233, "simmon": 233, "176": 233, "ode_2nd_power_series_regular": 233, "lie_heuristic_abaco1_simpl": 233, "duart": 233, "da": 233, "mota": 233, "lie_heuristic_abaco1_product": 233, "roch": 233, "lie_heuristic_bivari": 233, "329": 233, "lie_heuristic_chi": 233, "lie_heuristic_abaco2_similar": 233, "lie_heuristic_function_sum": 233, "lie_heuristic_abaco2_unique_unknown": 233, "lie_heuristic_abaco2_unique_gener": 233, "lie_heuristic_linear": 233, "gy": 233, "bh": 233, "impract": 233, "riccati_norm": 233, "riccati_inverse_norm": 233, "riccati_reduc": 233, "construct_c": 233, "construct_d": 233, "val_inf": 233, "valuat": 233, "rational_laurent_seri": 233, "compute_m_ybar": 233, "ybar": 233, "solve_aux_eq": 233, "numa": 233, "dena": 233, "numi": 233, "deni": 233, "remove_redundant_sol": 233, "sol1": 233, "sol2": 233, "get_gen_sol_from_part_sol": 233, "part_sol": 233, "haaheim": 233, "solve_riccati": 233, "gensol": 233, "_linear_2eq_order1_type6": 233, "_linear_2eq_order1_type7": 233, "fgp": 233, "bg": 233, "linear_ode_to_matrix": 233, "odeordererror": 233, "odenonlinearerror": 233, "eqs_mat": 233, "r832": 233, "matrix_differential_equ": 233, "canonical_od": 233, "canonical_eq": 233, "canonical_system": 233, "linodesolve_typ": 233, "linodesolv": 233, "type1": 233, "type2": 233, "type3": 233, "type4": 233, "type5": 233, "type6": 233, "type_of_equ": 233, "a_t": 233, "a_non_commut": 233, "matrix_exp_jordan_form": 233, "expj": 233, "matrix_exp": 233, "defect": 233, "p_invers": 233, "r833": 233, "defective_matrix": 233, "r834": 233, "r835": 233, "jordan_normal_form": 233, "comupt": 233, "r836": 233, "r837": 233, "matrix_exponenti": 233, "antiderv": 233, "subscheck": 233, "system_info": 233, "sol_vector": 233, "sol_vector_evalu": 233, "_nonlinear_2eq_order1_type1": 233, "_nonlinear_2eq_order1_type2": 233, "_nonlinear_2eq_order1_type3": 233, "autonom": 233, "_nonlinear_2eq_order1_type4": 233, "_nonlinear_2eq_order1_type5": 233, "clairaut": 233, "envelop": 233, "_nonlinear_3eq_order1_type1": 233, "enspac": [233, 236], "sysod": 233, "sode0401": 233, "_nonlinear_3eq_order1_type2": 233, "sode0402": 233, "_nonlinear_3eq_order1_type3": 233, "sode0404": 233, "_nonlinear_3eq_order1_type4": 233, "sode0405": 233, "_nonlinear_3eq_order1_type5": 233, "sode0406": 233, "_handle_integr": 233, "gather": 233, "unhind": 233, "wolphramalpha": 233, "detool": 233, "hint_integr": 233, "alphanumer": 233, "hinder": 233, "matching_hint": 233, "matchdict": 233, "1st_homogeneous_coeff": 233, "your_hint": 233, "pde_separ": 234, "uxt": 234, "pde_separate_add": 234, "pde_separate_mul": 234, "uxi": 234, "pdsolv": 234, "solvefun": 234, "classify_pd": 234, "test_pd": 234, "pde_hintnam": 234, "ux": 234, "1st_linear_constant_coeff_homogen": 234, "checkpdesol": 234, "_preprocess": 234, "inabl": 234, "_xi_1": 234, "pde_1st_linear_constant_coeff_homogen": 234, "viktor": 234, "grigoryan": 234, "124a": 234, "pde_1st_linear_constant_coeff": 234, "substack": 234, "1st_linear_constant_coeff_integr": 234, "pde_1st_linear_variable_coeff": 234, "du": 234, "inspir": [234, 290], "pde_hint": 234, "checksol": 235, "ect": 235, "attain": [235, 267], "star": [235, 255], "052": 235, "cov": 235, "pval": 235, "xval": 235, "rsolv": 235, "solve_linear": 235, "solve_linear_system": 235, "msymbol": 235, "solve_linear_system_lu": 235, "solve_undetermined_coeff": 235, "equ": 235, "73908513321516064165531208767387340401341175890076": 235, "steep": 235, "39267e": 235, "1684e": 235, "588469032184": 235, "315": 235, "730061685774": 235, "46792545969349058": 235, "inconclus": 235, "init": 235, "dissimilar": 235, "v_0": 235, "n_m": 235, "v_m": 235, "rsolve_poli": 235, "rsolve_ratio": 235, "r838": 235, "levelt": 235, "290": [235, 265], "296": 235, "r839": 235, "r840": 235, "r841": 235, "289": 235, "alembertian": 235, "r842": 235, "r843": 235, "polysi": 235, "solve_triangul": 235, "kalkbrenn": 235, "patrizia": 235, "teo": 235, "aaecc": 235, "argand": 236, "uncount": 236, "bizarr": 236, "her": 236, "sol_f": 236, "solveset_r": 236, "solveset_complex": 236, "methodologi": [236, 287], "_solve_real_trig": 236, "invert_r": 236, "invert_complex": 236, "_solve_rad": 236, "_solve_ab": 236, "_solve_as_r": 236, "_solve_as_poly_r": 236, "_solve_as_poly_complex": 236, "_solve_as_poli": 236, "gsoc": 236, "7abb76ffed50425299b9065129ae87261668a0f7": 236, "iamit": 236, "2948": 236, "6659": 236, "7523": 236, "sibx0afl3q": 236, "9696": 236, "inftyright": 236, "nright": 236, "0right": 236, "domain_check": 236, "3z": 236, "9z": 236, "nonlinearerror": 236, "cccc": 236, "eq3": 236, "eq4": 236, "391": 236, "_solve_system": 236, "_solve_using_known_valu": 236, "_transolv": 236, "_tsolv": 236, "tsolv": 236, "outright": 236, "interf": 236, "add_typ": 236, "_is_exponenti": 236, "new_eq": 236, "_solve_exponenti": 236, "_is_class": 236, "_solve_class": 236, "_solve_expo": 236, "9x": 236, "solve_expo": 236, "log_b": 236, "_solve_logarithm": 236, "solve_log": 236, "_is_logarithm": 236, "prebuilt": 237, "finiterv": 237, "varianc": 237, "dice": 237, "continuousrv": 237, "continuousdistributionhandmad": 237, "dist": 237, "discreterv": 237, "discretedistributionhandmad": 237, "pmf": 237, "finitedistributionhandmad": 237, "discreteuniform": 237, "randomsymbol": 237, "r844": 237, "discrete_uniform_distribut": 237, "r845": 237, "discreteuniformdistribut": 237, "d6": 237, "diedistribut": 237, "toss": 237, "r846": 237, "bernoulli_distribut": 237, "r847": 237, "bernoullidistribut": 237, "unfair": 237, "r848": 237, "coin_flip": 237, "binomialdistribut": 237, "r849": 237, "binomial_distribut": 237, "r850": 237, "betabinomi": 237, "r851": 237, "r852": 237, "betabinomialdistribut": 237, "popul": 237, "marbl": 237, "r853": 237, "hypergeometric_distribut": 237, "r854": 237, "hypergeometricdistribut": 237, "700000000000000": 237, "r855": 237, "rademacher_distribut": 237, "r856": 237, "geometric_distribut": 237, "r857": 237, "geometricdistribut": 237, "r858": 237, "hermite_distribut": 237, "poisson": 237, "r859": 237, "poisson_distribut": 237, "r860": 237, "poissondistribut": 237, "r861": 237, "logarithmic_distribut": 237, "r862": 237, "logarithmicdistribut": 237, "negativebinomi": 237, "r863": 237, "negative_binomial_distribut": 237, "r864": 237, "negativebinomialdistribut": 237, "skellam": 237, "mu1": 237, "mu2": 237, "mu_1": 237, "mu_2": 237, "i_k": 237, "r865": 237, "skellam_distribut": 237, "yulesimon": 237, "yule": 237, "simon": 237, "r866": 237, "93simon_distribut": 237, "8100": 237, "r867": 237, "zeta_distribut": 237, "cdf": 237, "r868": 237, "arcsine_distribut": 237, "benini": 237, "r869": 237, "benini_distribut": 237, "r870": 237, "v8": 237, "beninidistribut": 237, "r871": 237, "beta_distribut": 237, "r872": 237, "betadistribut": 237, "betanoncentr": 237, "noncentr": 237, "r873": 237, "noncentral_beta_distribut": 237, "r874": 237, "noncentralbetadistribut": 237, "betaprim": 237, "r875": 237, "beta_prime_distribut": 237, "r876": 237, "betaprimedistribut": 237, "boundedpareto": 237, "pareto": 237, "r877": 237, "pareto_distribut": 237, "bounded_pareto_distribut": 237, "r878": 237, "cauchy_distribut": 237, "r879": 237, "cauchydistribut": 237, "r880": 237, "chi_distribut": 237, "r881": 237, "chidistribut": 237, "chinoncentr": 237, "r882": 237, "noncentral_chi_distribut": 237, "chisquar": 237, "r883": 237, "chi_squared_distribut": 237, "r884": 237, "squareddistribut": 237, "dagum": 237, "r885": 237, "dagum_distribut": 237, "davi": 237, "radiat": 237, "r886": 237, "davis_distribut": 237, "r887": 237, "davisdistribut": 237, "erlang": 237, "r888": 237, "erlang_distribut": 237, "r889": 237, "erlangdistribut": 237, "exgaussian": 237, "emg": 237, "r890": 237, "exponentially_modified_gaussian_distribut": 237, "quantil": 237, "r891": 237, "exponential_distribut": 237, "r892": 237, "exponentialdistribut": 237, "fdistribut": 237, "______________________________": 237, "r893": 237, "r894": 237, "fisherz": 237, "fisher": 237, "2d_1": 237, "d_1z": 237, "d_1e": 237, "r895": 237, "27s_z": 237, "r896": 237, "fishersz": 237, "frechet": 237, "r897": 237, "a9chet_distribut": 237, "r898": 237, "gamma_distribut": 237, "r899": 237, "gammadistribut": 237, "gammainvers": 237, "r900": 237, "gompertz": 237, "r901": 237, "gompertz_distribut": 237, "gumbel": 237, "dfrac": 237, "r902": 237, "gumbeldistribut": 237, "r903": 237, "gumbel_distribut": 237, "r904": 237, "20200628222206": 237, "mathwav": 237, "easyfit": 237, "gumbel_max": 237, "r905": 237, "20200628222212": 237, "gumbel_min": 237, "kumaraswami": 237, "r906": 237, "kumaraswamy_distribut": 237, "r907": 237, "laplace_distribut": 237, "r908": 237, "laplacedistribut": 237, "r909": 237, "a9vy_distribut": 237, "r910": 237, "levydistribut": 237, "logist": 237, "r911": 237, "logistic_distribut": 237, "r912": 237, "logisticdistribut": 237, "loglogist": 237, "unimod": 237, "r913": 237, "lognorm": 237, "r914": 237, "r915": 237, "lognormaldistribut": 237, "lomax": 237, "r916": 237, "lomax_distribut": 237, "maxwel": 237, "r917": 237, "maxwell_distribut": 237, "r918": 237, "maxwelldistribut": 237, "moyal": 237, "r919": 237, "moyaldistribut": 237, "r920": 237, "rice": 237, "dobelman": 237, "textfil": 237, "distributionshandbook": 237, "nakagami": 237, "r921": 237, "nakagami_distribut": 237, "marginal_distribut": 237, "r922": 237, "normal_distribut": 237, "r923": 237, "normaldistributionfunct": 237, "xm": 237, "x_m": 237, "r924": 237, "r925": 237, "paretodistribut": 237, "powerfunct": 237, "r926": 237, "20200204081320": 237, "power_func": 237, "quadraticu": 237, "r927": 237, "quadratic_distribut": 237, "raisedcosin": 237, "r928": 237, "raised_cosine_distribut": 237, "r929": 237, "rayleigh_distribut": 237, "r930": 237, "rayleighdistribut": 237, "r931": 237, "reciprocal_distribut": 237, "studentt": 237, "r932": 237, "student_t": 237, "r933": 237, "studentst": 237, "shiftedgompertz": 237, "r934": 237, "shifted_gompertz_distribut": 237, "r935": 237, "trapezoidal_distribut": 237, "r936": 237, "triangular_distribut": 237, "r937": 237, "triangulardistribut": 237, "r938": 237, "uniform_distribution_": 237, "28continu": 237, "r939": 237, "uniformdistribut": 237, "uniformsum": 237, "irwin": 237, "r940": 237, "uniform_sum_distribut": 237, "r941": 237, "uniformsumdistribut": 237, "vonmis": 237, "mise": 237, "i_0": 237, "r942": 237, "von_mises_distribut": 237, "r943": 237, "vonmisesdistribut": 237, "wald": 237, "gaussianinvers": 237, "r944": 237, "inverse_gaussian_distribut": 237, "r945": 237, "inversegaussiandistribut": 237, "weibul": 237, "geq0": 237, "r946": 237, "weibull_distribut": 237, "r947": 237, "weibulldistribut": 237, "wignersemicircl": 237, "semicircl": 237, "frac2": 237, "r948": 237, "wigner_semicircle_distribut": 237, "r949": 237, "wignerssemicirclelaw": 237, "jointrv": 237, "_set": 237, "multivariatenorm": 237, "noninvert": 237, "ob": 237, "r950": 237, "multivariate_normal_distribut": 237, "multivariatelaplac": 237, "r951": 237, "multivariate_laplace_distribut": 237, "generalizedmultivariateloggamma": 237, "joint_rv_typ": 237, "gd": 237, "y_3": 237, "gmvlg": 237, "generalizedmultivariateloggammaomega": 237, "r952": 237, "generalized_multivariate_log": 237, "r953": 237, "234137346_on_a_multivariate_log": 237, "gamma_distribution_and_the_use_of_the_distribution_in_the_bayesian_analysi": 237, "correl": 237, "gmvlgo": 237, "r954": 237, "r955": 237, "r956": 237, "multinomial_distribut": 237, "r957": 237, "multinomialdistribut": 237, "multivariatebeta": 237, "r958": 237, "dirichlet_distribut": 237, "r959": 237, "dirichletdistribut": 237, "multivariateewen": 237, "ewen": 237, "r960": 237, "27s_sampling_formula": 237, "r961": 237, "280311472_the_ubiquitous_ewens_sampling_formula": 237, "multivariatet": 237, "negativemultinomi": 237, "n_c": 237, "r962": 237, "negative_multinomial_distribut": 237, "r963": 237, "normalgamma": 237, "r964": 237, "discretemarkovchain": 237, "state_spac": 237, "trans_prob": 237, "markov": 237, "characteris": 237, "transitionmatrixof": 237, "transition_prob": 237, "sunni": 237, "cloudi": 237, "raini": 237, "randomindexedsymbol": 237, "409": 237, "6963328": 237, "3096": 237, "query_gt": 237, "64705": 237, "r965": 237, "markov_chain": 237, "time_markov_chain": 237, "r966": 237, "20201230182007": 237, "dartmouth": 237, "teaching_aid": 237, "books_articl": 237, "probability_book": 237, "chapter11": 237, "canonical_form": 237, "transient": 237, "p_new": 237, "new_matrix": 237, "communication_class": 237, "r967": 237, "onlinelibrari": 237, "wilei": 237, "1002": 237, "9780470316887": 237, "app1": 237, "r968": 237, "columbia": 237, "ww2040": 237, "6711f12": 237, "lect1023big": 237, "is_recurr": 237, "tarjan": [237, 255], "r969": 237, "20220207032113": 237, "4701sum07": 237, "4701": 237, "mcii": 237, "r970": 237, "ceca": 237, "clemson": 237, "shierd": 237, "shier": 237, "r971": 237, "ujcont": 237, "uj": 237, "esploro": 237, "graduat": 237, "999849107691": 237, "r972": 237, "econ": 237, "dtmc": 237, "reccur": 237, "r973": 237, "absorbing_markov_chain": 237, "r974": 237, "brandei": 237, "igusa": 237, "math56as08": 237, "math56a_s08_notes015": 237, "fixed_row_vector": 237, "stationary_distribut": 237, "fundamental_matrix": 237, "r975": 237, "lip": 237, "limiting_distribut": 237, "condition_set": 237, "wm": 237, "r976": 237, "probabilitycours": 237, "11_2_6_stationary_and_limiting_distribut": 237, "r977": 237, "20210508104430": 237, "galton": 237, "uchicago": 237, "yibi": 237, "stat317": 237, "lecture4_6up": 237, "continuousmarkovchain": 237, "gen_mat": 237, "generator_matrix": 237, "45279": 237, "58602": 237, "37933": 237, "34211": 237, "7143": 237, "4002723175": 237, "6832579186": 237, "r978": 237, "r979": 237, "biu": 237, "il": 237, "amirgi": 237, "ctmcnote": 237, "bernoulliprocess": 237, "joint_distribut": 237, "jointdistributionhandmad": 237, "r980": 237, "bernoulli_process": 237, "r981": 237, "mathc": 237, "clarku": 237, "djoyc": 237, "ma217": 237, "given_condit": 237, "poissonprocess": 237, "648": 237, "r982": 237, "11_0_0_intro": 237, "r983": 237, "poisson_point_process": 237, "wiener": 237, "brownian": 237, "scottish": 237, "botanist": 237, "r984": 237, "11_4_0_brownian_motion_wiener_process": 237, "r985": 237, "wiener_process": 237, "gammaprocess": 237, "jump": [237, 294], "472": 237, "r986": 237, "gamma_process": 237, "matrixgamma": 237, "scale_matrix": 237, "r987": 237, "matrix_gamma_distribut": 237, "wishart": 237, "r988": 237, "wishart_distribut": 237, "matrixnorm": 237, "location_matrix": 237, "scale_matrix_1": 237, "scale_matrix_2": 237, "r989": 237, "matrix_normal_distribut": 237, "compound_rv": 237, "compounddistribut": 237, "crv_type": 237, "r990": 237, "compound_probability_distribut": 237, "numsampl": 237, "evaluate_integr": 237, "r991": 237, "entropy_": 237, "28information_theori": 237, "r992": 237, "crmarsh": 237, "charles_marsh_continuous_entropi": 237, "r993": 237, "entropypost": 237, "cexpr": 237, "coskew": 237, "sigma_": 237, "r994": 237, "r995": 237, "probability_distribut": 237, "randomst": 237, "die_rol": 237, "samp": 237, "pspace": 237, "samp_list": 237, "sam": 237, "42519758": 237, "40207856": 237, "94991743": 237, "85819627": 237, "83403519": 237, "9412172": 237, "85768055": 237, "38954165": 237, "11163337": 237, "3176591": 237, "79115232": 237, "63232916": 237, "01747268": 237, "96716083": 237, "sampling_p": 237, "sampling_": 237, "factorial_mo": 237, "r996": 237, "r997": 237, "factorialmo": 237, "kurtosi": 237, "outlier": 237, "sigma_x": 237, "r998": 237, "r999": 237, "asymmetri": 237, "pearson": 237, "sampling_dens": 237, "centralmo": 237, "cmoment": 237, "expectationmatrix": 237, "randommatrixsymbol": 237, "n11": 237, "n12": 237, "n21": 237, "n22": 237, "variancematrix": 237, "crosscovariancematrix": 237, "randomdomain": 237, "singledomain": 237, "singlepspac": 237, "productdomain": 237, "productpspac": 237, "conditionaldomain": 237, "frv": 237, "finitedomain": 237, "finitepspac": 237, "crv": 237, "continuousdomain": 237, "continuouspspac": 237, "diepspac": 237, "singlefinitepspac": 237, "normalpspac": 237, "singlecontinuouspspac": 237, "frv_type": 237, "randomvari": 237, "tactic": 237, "random_symbol": 237, "rs_swap": 237, "pspace1": 237, "pspace2": 237, "immutabledensendimarrai": 238, "tomatrix": 238, "j_m": 238, "i_a": 238, "i_b": 238, "sum_k": 238, "tensorcontract": [238, 239], "arraycontract": [238, 239], "tensordiagon": [238, 239], "derive_by_arrai": 238, "sum_m": 238, "immutablesparsendimarrai": 238, "mutabledensendimarrai": 238, "mutablesparsendimarrai": 238, "array_der": [238, 239], "index_order_old": [238, 239], "index_order_new": [238, 239], "cab": 238, "array_express": 238, "contraction_ax": 238, "diagonal_ax": 238, "arraydiagon": [238, 239], "arraysymbol": 239, "convert_indexed_to_arrai": 239, "arrayadd": 239, "convert_matrix_to_arrai": 239, "convert_array_to_matrix": 239, "expr_tr": 239, "contraction_indic": 239, "diagonal_indic": 239, "adi": 239, "from_array_to_matrix": 239, "ijklm": 239, "kijml": 239, "perm1": 239, "perm2": 239, "index_method": 241, "get_contraction_structur": [241, 242], "deepest": 241, "nested_contract": 241, "get_indic": [241, 242, 243, 244], "indexconformanceexcept": 241, "______": 242, "stem": 242, "dim1": 242, "dim2": 242, "qwerti": 242, "a_ij": 242, "b_ij": 242, "syntact": 242, "a_real": 242, "c_inherit": 242, "c_explicit": 242, "unrol": 242, "tensorindextyp": [243, 244], "eps_dim": 243, "metric_nam": 243, "su": 243, "lorentz": 243, "tensor_index_typ": 243, "is_up": 243, "tensor_inde_typ": 243, "typ": 243, "tensorhead": [243, 244], "index_typ": 243, "tensorsymmetri": 243, "monoterm": 243, "_tensormanag": 243, "set_comm": 243, "asym2": 243, "fully_symmetr": 243, "tensori": [243, 244], "e_z": 243, "no_symmetri": 243, "p_x": 243, "p_y": 243, "p_z": 243, "ipos1": 243, "ipos2": 243, "icomp1": 243, "icomp2": 243, "nameless": 243, "replacement_dict": 243, "free_arg": 243, "addend": 243, "canon_bp": 243, "contract_metr": 243, "contract_al": 243, "ipo": 243, "icomp": 243, "nonrep": 243, "dum": 243, "ext_rank": 243, "is_canon_bp": 243, "get_free_indic": [243, 244], "perm2tensor": 243, "tid": 243, "sorted_compon": 243, "riemann_cyclic_replac": 243, "riemann_cycl": 243, "cadabra": 243, "multiterm": 243, "bianchi": 243, "sym2": 243, "direct_product": 243, "monotorem": 243, "tableaux": 243, "tensortyp": 243, "repetit": [243, 255], "tensormanag": 243, "comm_i2symbol": 243, "comm_symbols2i": 243, "get_comm": 243, "gcomm": 243, "ghcomm": 243, "toper": 244, "partialderiv": 244, "valenc": 244, "uncontract": 244, "compa": 244, "compb": 244, "derivand": 244, "nocache_fail": 246, "expectedexcept": 246, "exceptioninfo": 246, "abort": 246, "9999": 246, "skip_under_pyodid": 246, "pyodid": 246, "warningcl": [246, 253], "randtest": 247, "portabl": [248, 249], "pytestreport": 248, "force_color": 248, "readlin": 248, "sympydoctestfind": 248, "doctestpars": 248, "exclude_empti": 248, "sympydoctestrunn": 248, "checker": 248, "optionflag": 248, "5140": 248, "doctestrunn": 248, "clear_glob": 248, "writer": 248, "garbag": 248, "check_output": 248, "report_": 248, "sympyoutputcheck": 248, "outputcheck": 248, "stdlib": 248, "testrunn": 248, "sympytestresult": 248, "convert_to_native_path": 248, "lst": 248, "blacklist": 248, "get_sympy_dir": 248, "raise_on_deprec": 248, "deprecationwarn": [248, 253], "run_all_test": 248, "test_arg": 248, "test_kwarg": 248, "doctest_arg": 248, "doctest_kwarg": 248, "examples_arg": 248, "examples_kwarg": 248, "run_in_subprocess_with_hash_random": 248, "function_kwarg": 248, "hostedtoolcach": 248, "x64": 248, "_test": 248, "split_list": 248, "sympytestfil": 248, "module_rel": 248, "extraglob": 248, "raise_on_error": 248, "basenam": [248, 249, 250], "slate": 248, "dont_accept_true_for_1": 248, "dont_accept_blanklin": 248, "normalize_whitespac": 248, "ellipsi": [248, 256], "ignore_exception_detail": 248, "report_udiff": 248, "report_cdiff": 248, "report_ndiff": 248, "report_only_first_failur": 248, "mortem": 248, "tomfooleri": 248, "testmod": 248, "tester": 248, "fiddl": [248, 294], "timeout": 248, "keyboardinterrupt": 248, "interrupt": 248, "_basic": 248, "kw": 248, "test_equ": 248, "pdb": 248, "pipe": 248, "time_bal": 248, "tandem": 249, "matvec": 249, "codewrapp": 249, "distutil": 249, "fwrap": 249, "swig": 249, "binary_cal": 249, "22925376": 249, "25165824": 249, "_imp_": [249, 256], "filepath": 249, "cythoncodewrapp": 249, "dump_pyx": 249, "dummywrapp": 249, "f2pycodewrapp": 249, "ufuncifycodewrapp": 249, "dump_c": [249, 250], "code_gen": [249, 250], "argument_tupl": 249, "include_dir": 249, "library_dir": 249, "extra_compile_arg": 249, "extra_link_arg": 249, "symfunc": [249, 256], "funtion_nam": 249, "ndimension": 249, "f_fortran": 249, "f_cython": 249, "r1000": 249, "fortran77": 250, "fortran90": 250, "julia": 250, "rust": 250, "mileston": 250, "unsurmount": 250, "pyf": 250, "inputoutput": 250, "tcc": 250, "libtcc": 250, "date": 250, "hostnam": 250, "sha1": 250, "ccodegen": 250, "preprocessor_stat": 250, "dump_h": 250, "guard": 250, "get_prototyp": 250, "codegenerror": 250, "function_prototyp": 250, "dump_cod": 250, "cname": 250, "fname": 250, "pynam": 250, "jlname": 250, "octnam": 250, "rsname": 250, "fcodegen": 250, "f90": 250, "dump_f95": 250, "get_interfac": 250, "juliacodegen": 250, "dump_jl": 250, "octavecodegen": 250, "dump_m": 250, "returnvalu": 250, "destin": 250, "local_var": 250, "result_vari": 250, "unnam": 250, "rustcodegen": 250, "dump_r": 250, "f_result": 250, "myfcn": 250, "fcn2": 250, "myfcn_result": 250, "void": 250, "get_default_datatyp": 250, "complex_allow": 250, "agnost": 250, "conserve_mpmath_dp": 251, "disable_view": 251, "python_vers": 251, "memoize_properti": 251, "propfunc": 251, "no_attrs_in_subclass": 251, "__all__": 251, "some_funct": 251, "thread": 251, "xthread": 251, "threaded_factori": 251, "use_add": 251, "multiset_partitions_taocp": 252, "visitor": 252, "pstack": 252, "lpart": 252, "topmost": 252, "partcompon": 252, "peek": [252, 294], "unpredict": 252, "list_visitor": 252, "abb": [252, 255], "factoring_visitor": 252, "multisetpartitiontravers": 252, "aocp": 252, "count_partit": 252, "127750": 252, "686": 252, "4a": 252, "factorisatio": 252, "oppenheim": 252, "numerorum": 252, "canfield": 252, "erdo": 252, "OF": 252, "yorgei": 252, "monad": 252, "persist": 252, "288716": 252, "memoiz": [252, 254, 281], "dramat": 252, "hypothet": 252, "borrow": 252, "coalesc": 252, "_rang": 252, "stretch": 252, "brain": 252, "histogram": 252, "enum_al": 252, "enum_larg": 252, "enum_rang": 252, "enum_smal": 252, "ub": 252, "catch_warn": 253, "simplefilt": 253, "dedent": [253, 258], "miscellan": [254, 281], "pkgdata": [254, 281], "notiter": 255, "binary_partit": 255, "r1001": 255, "taocp": 255, "nx": 255, "common_prefix": 255, "common_suffix": 255, "unhash": 255, "r1002": 255, "component_": 255, "28graph_theori": 255, "r1003": 255, "27s_strongly_connected_components_algorithm": 255, "dict_merg": 255, "filter_symbol": 255, "myop": 255, "kog": 255, "informatik": 255, "hamburg": 255, "mein": 255, "python_trick": 255, "neighbor": 255, "xxxxxx": 255, "xxxx": 255, "r1004": 255, "method_ring": 255, "r1005": 255, "4856615": 255, "4857018": 255, "r1006": 255, "20160313023044": 255, "programminggeek": 255, "r1007": 255, "steinhau": 255, "93johnson": 255, "93trotter_algorithm": 255, "r1008": 255, "involut": 255, "eco": 255, "vajnovszki": 255, "dmtc": 255, "generate_involut": 255, "r1009": 255, "permutationinvolut": 255, "generate_oriented_forest": 255, "forest": 255, "acycl": 255, "r1010": 255, "beyer": 255, "hedetniemi": 255, "novemb": 255, "r1011": 255, "1633833": 255, "has_dup": 255, "has_varieti": 255, "iproduct": 255, "abcbb": 255, "is_sequ": 255, "generatortyp": 255, "_iter": 255, "kbin": 255, "ordered_flag": 255, "least_rot": 255, "rotate_left": 255, "r1012": 255, "lexicographically_minimal_string_rot": 255, "minlex": 255, "acb": 255, "11010011000": 255, "00011010011": 255, "00011001011": 255, "aaa": 255, "abi": 255, "bby": 255, "abracadabra": 255, "banana": 255, "multiset_derang": 255, "uniq": 255, "1233": 255, "3312": 255, "3321": 255, "aba": 255, "baa": 255, "bead": 255, "ooo": 255, "r1013": 255, "r1014": 255, "carla": 255, "savag": 255, "terri": 255, "yih": 255, "414": 255, "430": 255, "0196": 255, "6774": 255, "90047": 255, "ordered_partit": 255, "r1015": 255, "jeromekelleh": 255, "r1016": 255, "jerom": 255, "kelleh": 255, "barri": 255, "sullivan": 255, "0909": 255, "2331v2": 255, "r1017": 255, "activest": 255, "218332": 255, "random_derang": 255, "reseed": 255, "rotate_right": 255, "roundrobin": 255, "ef": 255, "credit": 255, "sakki": 255, "sequence_partit": 255, "l_m": 255, "kleen": 255, "enricogiampieri": 255, "13131491": 255, "sequence_partitions_empti": 255, "keyfunc": 255, "subgraph": 255, "r1018": 255, "r1019": 255, "longest": 255, "r1020": 255, "unflatten": 255, "bcd": 255, "afunc": 256, "lambdastr": 256, "dummifi": 256, "use_imp": 256, "docstring_limit": 256, "custom_sin": 256, "spent": 256, "38177329": 256, "49315059": 256, "8414709848078965": 256, "enable_eager_execut": 256, "eagertensor": 256, "__class__": 256, "placehold": 256, "user_guid": 256, "runtimewarn": 256, "sin_cos_sympi": 256, "sin_co": 256, "sin_cos_numpi": 256, "38177329068": 256, "module_dictionari": 256, "getsourc": 256, "_lambdifygener": 256, "__globals__": 256, "lambdaprint": 256, "90929743": [256, 283], "assoc_recurrence_memo": 257, "base_seq": 257, "memo": 257, "pn0": 257, "recurrence_memo": 257, "specfun": 257, "__index__": 258, "sanit": 258, "99999999999999991611392": 258, "debug_decor": 258, "debugf": 258, "fillded": 258, "strline": 258, "rawlin": 258, "find_execut": 258, "pathsep": 258, "pastabl": 258, "bee": 258, "spamham": 258, "sha": 258, "egg": 258, "md5": 258, "eggsham": 258, "r1021": 258, "6116978": 258, "substr": 258, "roken": 258, "deletechar": 258, "multicharact": 258, "oldchar": 258, "newchar": 258, "acquir": 259, "getresourc": 259, "pkgname": 259, "pkgpath": 259, "dirnam": 259, "normpath": 259, "__loader__": 259, "stringio": 259, "get_resourc": 259, "ioerror": 259, "mydata": 259, "mypkgdata": 259, "jpg": 259, "get_class": 260, "lookup_view": 260, "get_mod_func": 260, "callback": 260, "timeutil": 261, "coordsysrect": 262, "coordsys3d": [262, 264, 265, 266, 268, 269, 272], "rotation_matrix": [262, 264, 267], "vector_nam": 262, "variable_nam": [262, 269], "latex_vect": 262, "pretty_vect": 262, "latex_scalar": 262, "pretty_scalar": 262, "new_system": 262, "create_new": [262, 267], "transformation_to_par": 262, "transformation_from_par": 262, "locate_new": [262, 265, 266, 267, 268, 269], "position_wrt": [262, 266, 267, 268], "orient_new": [262, 264], "axisorient": [262, 264, 267], "axis_orient": [262, 267], "bodyorient": [262, 264, 267], "body_orient": [262, 264, 267], "spaceorient": [262, 264, 267], "space_orient": [262, 264], "quaternionorient": [262, 264, 267], "q_orient": [262, 264], "orient_new_axi": [262, 265, 267], "orient_new_bodi": [262, 267], "angle1": [262, 264], "angle2": [262, 264], "angle3": [262, 264], "euler_angl": [262, 264], "orient_new_quaternion": [262, 267], "orient_new_spac": [262, 267], "coordsyrect": 262, "v_a": 262, "v_b": 262, "scalar_map": 262, "basevector": [262, 266, 267], "delop": [262, 268, 269], "r1022": 262, "r1023": 262, "basedyad": [262, 266], "second_system": 262, "deloper": [262, 270], "parametricregion": [262, 265, 272], "implicitregion": [262, 265, 272], "parabola": 262, "rational_parametr": 262, "singular_point": 262, "regular_point": 262, "reg_point": 262, "cubic_curv": 262, "calulc": 262, "hoffmann": 262, "purdu": 262, "lib": 262, "cgi": 262, "viewcont": 262, "1827": 262, "cstech": 262, "erik": 262, "hillgart": 262, "diploma": 262, "linz": 262, "universitat": 262, "risc_1355": 262, "20point": 262, "20on": 262, "20conic": 262, "parametricintegr": 262, "semispher": [262, 272], "axis_orienter1": 264, "axis_orienter2": 264, "axis_orienter3": 264, "body_orienter1": 264, "body_orienter2": 264, "body_orienter3": 264, "matrix_to_vector": 265, "system2": 265, "vector_integr": [265, 272], "essenc": 266, "vectormul": 266, "vectoradd": 266, "ofcours": 266, "vectorzero": 266, "expressli": 266, "express_coordin": [266, 267], "dyadicmul": 266, "dyadicadd": 266, "cleanest": 267, "orient_new_": 267, "basescalar": [267, 269], "oabc": 268, "oa": 268, "pq": 268, "sr": 268, "wikidel": 268, "ffield": 268, "gradient_field": 269, "instantan": 269, "directional_deriv": 269, "lame": 269, "dyadicproduct": 270, "quantifi": 271, "necesssari": 272, "param_circl": 272, "implicit_circl": 272, "obextj": 272, "solidspher": 272, "lamina": 272, "\ud835\udc45": 272, "cylind": 272, "vectorfield": 272, "hemispher": 272, "top_fac": 272, "bottom_fac": 272, "27_theorem": 272, "cone": 272, "divergence_theorem": 272, "12288": 272, "truss": 279, "cabl": 279, "str_expr": 283, "82842712474619": 283, "141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068": 283, "0874989834394464": 283, "roundoff": 283, "14112001": 283, "7568025": 283, "95892427": 283, "2794155": 283, "6569866": 283, "98935825": 283, "41211849": 283, "0998334166468": 283, "sympy_nam": 283, "numerical_funct": 283, "rephras": 284, "oh": 284, "integration_vari": 284, "dfdx": 284, "equidistantli": 284, "d2fdx2": 284, "django": 286, "oop": 286, "crazi": 286, "abcdef": 286, "reevalu": 286, "infal": 286, "entertain": 287, "preliminari": 287, "82842712475": 288, "cass": 288, "wrote": [288, 289], "theme": 288, "expanded_expr": 288, "whet": 288, "appetit": 288, "c\u2082": [288, 295], "c\u2081": [288, 295], "\u03bd": 288, "sell": 288, "battl": 288, "confid": 288, "gigabyt": 288, "tear": 289, "stopper": 289, "uexpr": 289, "algebraic_multipl": 290, "pdp": 290, "undertest": 290, "underevalu": 290, "my_iszero": 290, "stronger": 290, "tradeoff": 290, "wonder": 290, "5b7c3e8ee5b40332abdb206c": 290, "15141": 290, "19548": 290, "10120": 290, "10279": 290, "constant_problem": 290, "possiblezeroq": 290, "20200307091449": 290, "mupad_ref": 290, "iszero": 290, "congratul": 291, "decent": 292, "austin": 292, "javascript": 293, "bvar": 293, "unnecessarili": 294, "whittl": 294, "catchal": 294, "collected_expr": 294, "cdot1": 294, "undertak": 294, "undon": 294, "cdot2": 294, "nck": 294, "pronounc": 294, "_2f_1": 294, "cfrac": 294, "list_to_frac": 294, "a\u2080": 294, "a\u2083": 294, "a\u2084": 294, "pointless": 294, "orig_frac": 294, "diffeq": 295}, "objects": {"": [[37, 0, 0, "-", "sympy"]], "sympy": [[39, 0, 0, "-", "abc"], [40, 0, 0, "-", "algebras"], [43, 0, 0, "-", "assumptions"], [46, 0, 0, "-", "calculus"], [47, 0, 0, "-", "categories"], [69, 0, 0, "-", "diffgeom"], [70, 0, 0, "-", "discrete"], [74, 0, 0, "-", "functions"], [87, 0, 0, "-", "holonomic"], [94, 0, 0, "-", "integrals"], [95, 0, 0, "-", "interactive"], [96, 0, 0, "-", "liealgebras"], [97, 0, 0, "-", "logic"], [102, 0, 0, "-", "matrices"], [109, 0, 0, "-", "parsing"], [279, 0, 0, "-", "physics"], [213, 0, 0, "-", "polys"], [235, 0, 0, "-", "solvers"], [237, 0, 0, "-", "stats"], [240, 0, 0, "-", "tensor"], [245, 0, 0, "-", "testing"], [254, 0, 0, "-", "utilities"], [270, 0, 0, "-", "vector"]], "sympy.algebras": [[40, 1, 1, "", "Quaternion"]], "sympy.algebras.Quaternion": [[40, 2, 1, "", "add"], [40, 2, 1, "", "angle"], [40, 2, 1, "", "arc_coplanar"], [40, 2, 1, "", "axis"], [40, 2, 1, "", "exp"], [40, 2, 1, "", "from_Matrix"], [40, 2, 1, "", "from_axis_angle"], [40, 2, 1, "", "from_euler"], [40, 2, 1, "", "from_rotation_matrix"], [40, 2, 1, "", "index_vector"], [40, 2, 1, "", "integrate"], [40, 2, 1, "", "inverse"], [40, 2, 1, "", "is_pure"], [40, 2, 1, "", "is_zero_quaternion"], [40, 2, 1, "", "mensor"], [40, 2, 1, "", "mul"], [40, 2, 1, "", "norm"], [40, 2, 1, "", "normalize"], [40, 2, 1, "", "orthogonal"], [40, 2, 1, "", "parallel"], [40, 2, 1, "", "pow"], [40, 2, 1, "", "pow_cos_sin"], [40, 3, 1, "", "product_matrix_left"], [40, 3, 1, "", "product_matrix_right"], [40, 2, 1, "", "rotate_point"], [40, 2, 1, "", "scalar_part"], [40, 2, 1, "", "set_norm"], [40, 2, 1, "", "to_Matrix"], [40, 2, 1, "", "to_axis_angle"], [40, 2, 1, "", "to_euler"], [40, 2, 1, "", "to_rotation_matrix"], [40, 2, 1, "", "vector_coplanar"], [40, 2, 1, "", "vector_part"]], "sympy.assumptions": [[41, 0, 0, "-", "ask"], [42, 0, 0, "-", "assume"], [44, 0, 0, "-", "predicates"], [45, 0, 0, "-", "refine"]], "sympy.assumptions.ask": [[41, 1, 1, "", "AssumptionKeys"], [41, 4, 1, "", "ask"], [41, 4, 1, "", "register_handler"], [41, 4, 1, "", "remove_handler"]], "sympy.assumptions.assume": [[42, 1, 1, "", "AppliedPredicate"], [42, 1, 1, "", "AssumptionsContext"], [42, 1, 1, "", "Predicate"], [42, 1, 1, "", "UndefinedPredicate"], [42, 4, 1, "", "assuming"]], "sympy.assumptions.assume.AppliedPredicate": [[42, 3, 1, "", "arg"], [42, 3, 1, "", "arguments"], [42, 3, 1, "", "function"]], "sympy.assumptions.assume.AssumptionsContext": [[42, 2, 1, "", "add"]], "sympy.assumptions.assume.Predicate": [[42, 2, 1, "", "eval"], [42, 5, 1, "", "handler"], [42, 2, 1, "", "register"], [42, 2, 1, "", "register_many"]], "sympy.assumptions.predicates.calculus": [[44, 1, 1, "", "FinitePredicate"], [44, 1, 1, "", "InfinitePredicate"]], "sympy.assumptions.predicates.calculus.FinitePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.calculus.InfinitePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common": [[44, 1, 1, "", "CommutativePredicate"], [44, 1, 1, "", "IsTruePredicate"]], "sympy.assumptions.predicates.common.CommutativePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common.IsTruePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices": [[44, 1, 1, "", "ComplexElementsPredicate"], [44, 1, 1, "", "DiagonalPredicate"], [44, 1, 1, "", "FullRankPredicate"], [44, 1, 1, "", "IntegerElementsPredicate"], [44, 1, 1, "", "InvertiblePredicate"], [44, 1, 1, "", "LowerTriangularPredicate"], [44, 1, 1, "", "NormalPredicate"], [44, 1, 1, "", "OrthogonalPredicate"], [44, 1, 1, "", "PositiveDefinitePredicate"], [44, 1, 1, "", "RealElementsPredicate"], [44, 1, 1, "", "SingularPredicate"], [44, 1, 1, "", "SquarePredicate"], [44, 1, 1, "", "SymmetricPredicate"], [44, 1, 1, "", "TriangularPredicate"], [44, 1, 1, "", "UnitTriangularPredicate"], [44, 1, 1, "", "UnitaryPredicate"], [44, 1, 1, "", "UpperTriangularPredicate"]], "sympy.assumptions.predicates.matrices.ComplexElementsPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.DiagonalPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.FullRankPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.IntegerElementsPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.InvertiblePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.LowerTriangularPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.NormalPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.OrthogonalPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.RealElementsPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SingularPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SquarePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SymmetricPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.TriangularPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitTriangularPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitaryPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UpperTriangularPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory": [[44, 1, 1, "", "CompositePredicate"], [44, 1, 1, "", "EvenPredicate"], [44, 1, 1, "", "OddPredicate"], [44, 1, 1, "", "PrimePredicate"]], "sympy.assumptions.predicates.ntheory.CompositePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.EvenPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.OddPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.PrimePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order": [[44, 1, 1, "", "NegativePredicate"], [44, 1, 1, "", "NonNegativePredicate"], [44, 1, 1, "", "NonPositivePredicate"], [44, 1, 1, "", "NonZeroPredicate"], [44, 1, 1, "", "PositivePredicate"], [44, 1, 1, "", "ZeroPredicate"]], "sympy.assumptions.predicates.order.NegativePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonNegativePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonPositivePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonZeroPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.PositivePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.ZeroPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets": [[44, 1, 1, "", "AlgebraicPredicate"], [44, 1, 1, "", "AntihermitianPredicate"], [44, 1, 1, "", "ComplexPredicate"], [44, 1, 1, "", "ExtendedRealPredicate"], [44, 1, 1, "", "HermitianPredicate"], [44, 1, 1, "", "ImaginaryPredicate"], [44, 1, 1, "", "IntegerPredicate"], [44, 1, 1, "", "IrrationalPredicate"], [44, 1, 1, "", "RationalPredicate"], [44, 1, 1, "", "RealPredicate"], [44, 1, 1, "", "TranscendentalPredicate"]], "sympy.assumptions.predicates.sets.AlgebraicPredicate": [[44, 5, 1, "", "AlgebraicHandler"], [44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.AntihermitianPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ComplexPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ExtendedRealPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.HermitianPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ImaginaryPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IntegerPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IrrationalPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RationalPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RealPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.TranscendentalPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.refine": [[45, 4, 1, "", "refine"], [45, 4, 1, "", "refine_Pow"], [45, 4, 1, "", "refine_abs"], [45, 4, 1, "", "refine_arg"], [45, 4, 1, "", "refine_atan2"], [45, 4, 1, "", "refine_im"], [45, 4, 1, "", "refine_matrixelement"], [45, 4, 1, "", "refine_re"], [45, 4, 1, "", "refine_sign"]], "sympy.calculus": [[46, 0, 0, "-", "euler"], [46, 0, 0, "-", "finite_diff"], [46, 0, 0, "-", "singularities"], [46, 0, 0, "-", "util"]], "sympy.calculus.euler": [[46, 4, 1, "", "euler_equations"]], "sympy.calculus.finite_diff": [[46, 4, 1, "", "apply_finite_diff"], [46, 4, 1, "", "differentiate_finite"], [46, 4, 1, "", "finite_diff_weights"]], "sympy.calculus.singularities": [[46, 4, 1, "", "is_decreasing"], [46, 4, 1, "", "is_increasing"], [46, 4, 1, "", "is_monotonic"], [46, 4, 1, "", "is_strictly_decreasing"], [46, 4, 1, "", "is_strictly_increasing"], [46, 4, 1, "", "monotonicity_helper"], [46, 4, 1, "", "singularities"]], "sympy.calculus.util": [[46, 4, 1, "", "continuous_domain"], [46, 4, 1, "", "function_range"], [46, 4, 1, "", "is_convex"], [46, 4, 1, "", "lcim"], [46, 4, 1, "", "maximum"], [46, 4, 1, "", "minimum"], [46, 4, 1, "", "not_empty_in"], [46, 4, 1, "", "periodicity"], [46, 4, 1, "", "stationary_points"]], "sympy.categories": [[47, 1, 1, "", "Category"], [47, 1, 1, "", "CompositeMorphism"], [47, 1, 1, "", "Diagram"], [47, 1, 1, "", "IdentityMorphism"], [47, 1, 1, "", "Morphism"], [47, 1, 1, "", "NamedMorphism"], [47, 1, 1, "", "Object"], [47, 0, 0, "-", "diagram_drawing"]], "sympy.categories.Category": [[47, 3, 1, "", "commutative_diagrams"], [47, 3, 1, "", "name"], [47, 3, 1, "", "objects"]], "sympy.categories.CompositeMorphism": [[47, 3, 1, "", "codomain"], [47, 3, 1, "", "components"], [47, 3, 1, "", "domain"], [47, 2, 1, "", "flatten"]], "sympy.categories.Diagram": [[47, 3, 1, "", "conclusions"], [47, 2, 1, "", "hom"], [47, 2, 1, "", "is_subdiagram"], [47, 3, 1, "", "objects"], [47, 3, 1, "", "premises"], [47, 2, 1, "", "subdiagram_from_objects"]], "sympy.categories.Morphism": [[47, 3, 1, "", "codomain"], [47, 2, 1, "", "compose"], [47, 3, 1, "", "domain"]], "sympy.categories.NamedMorphism": [[47, 3, 1, "", "name"]], "sympy.categories.diagram_drawing": [[47, 1, 1, "", "ArrowStringDescription"], [47, 1, 1, "", "DiagramGrid"], [47, 1, 1, "", "XypicDiagramDrawer"], [47, 4, 1, "", "preview_diagram"], [47, 4, 1, "", "xypic_draw_diagram"]], "sympy.categories.diagram_drawing.DiagramGrid": [[47, 3, 1, "", "height"], [47, 3, 1, "", "morphisms"], [47, 3, 1, "", "width"]], "sympy.categories.diagram_drawing.XypicDiagramDrawer": [[47, 2, 1, "", "draw"]], "sympy.codegen": [[48, 0, 0, "-", "algorithms"], [48, 0, 0, "-", "approximations"], [48, 0, 0, "-", "ast"], [48, 0, 0, "-", "cfunctions"], [48, 0, 0, "-", "cnodes"], [48, 0, 0, "-", "cutils"], [48, 0, 0, "-", "cxxnodes"], [48, 0, 0, "-", "fnodes"], [48, 0, 0, "-", "futils"], [48, 0, 0, "-", "matrix_nodes"], [48, 0, 0, "-", "pyutils"], [48, 0, 0, "-", "rewriting"]], "sympy.codegen.algorithms": [[48, 4, 1, "", "newtons_method"], [48, 4, 1, "", "newtons_method_function"]], "sympy.codegen.approximations": [[48, 1, 1, "", "SeriesApprox"], [48, 1, 1, "", "SumApprox"]], "sympy.codegen.ast": [[48, 1, 1, "", "Assignment"], [48, 1, 1, "", "AssignmentBase"], [48, 1, 1, "", "Attribute"], [48, 1, 1, "", "AugmentedAssignment"], [48, 1, 1, "", "BreakToken"], [48, 1, 1, "", "CodeBlock"], [48, 1, 1, "", "Comment"], [48, 1, 1, "", "ComplexType"], [48, 1, 1, "", "ContinueToken"], [48, 1, 1, "", "Declaration"], [48, 1, 1, "", "Element"], [48, 1, 1, "", "FloatBaseType"], [48, 1, 1, "", "FloatType"], [48, 1, 1, "", "For"], [48, 1, 1, "", "FunctionCall"], [48, 1, 1, "", "FunctionDefinition"], [48, 1, 1, "", "FunctionPrototype"], [48, 1, 1, "", "IntBaseType"], [48, 1, 1, "", "Node"], [48, 1, 1, "", "NoneToken"], [48, 1, 1, "", "Pointer"], [48, 1, 1, "", "Print"], [48, 1, 1, "", "QuotedString"], [48, 1, 1, "", "Raise"], [48, 1, 1, "", "Return"], [48, 1, 1, "", "RuntimeError_"], [48, 1, 1, "", "Scope"], [48, 1, 1, "", "SignedIntType"], [48, 1, 1, "", "Stream"], [48, 1, 1, "", "String"], [48, 1, 1, "", "Token"], [48, 1, 1, "", "Type"], [48, 1, 1, "", "UnsignedIntType"], [48, 1, 1, "", "Variable"], [48, 1, 1, "", "While"], [48, 4, 1, "", "aug_assign"]], "sympy.codegen.ast.CodeBlock": [[48, 2, 1, "", "cse"], [48, 2, 1, "", "topological_sort"]], "sympy.codegen.ast.FloatBaseType": [[48, 5, 1, "", "cast_nocheck"]], "sympy.codegen.ast.FloatType": [[48, 2, 1, "", "cast_nocheck"], [48, 3, 1, "", "decimal_dig"], [48, 3, 1, "", "dig"], [48, 3, 1, "", "eps"], [48, 3, 1, "", "max"], [48, 3, 1, "", "max_exponent"], [48, 3, 1, "", "min_exponent"], [48, 3, 1, "", "tiny"]], "sympy.codegen.ast.Node": [[48, 2, 1, "", "attr_params"]], "sympy.codegen.ast.Token": [[48, 2, 1, "", "kwargs"]], "sympy.codegen.ast.Type": [[48, 2, 1, "", "cast_check"], [48, 2, 1, "", "from_expr"]], "sympy.codegen.ast.Variable": [[48, 2, 1, "", "as_Declaration"], [48, 2, 1, "", "deduced"]], "sympy.codegen.cfunctions": [[48, 1, 1, "", "Cbrt"], [48, 1, 1, "", "Sqrt"], [48, 1, 1, "", "exp2"], [48, 1, 1, "", "expm1"], [48, 1, 1, "", "fma"], [48, 1, 1, "", "hypot"], [48, 1, 1, "", "log10"], [48, 1, 1, "", "log1p"], [48, 1, 1, "", "log2"]], "sympy.codegen.cfunctions.Cbrt": [[48, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.Sqrt": [[48, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.exp2": [[48, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.expm1": [[48, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.fma": [[48, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.hypot": [[48, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log10": [[48, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log1p": [[48, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log2": [[48, 2, 1, "", "fdiff"]], "sympy.codegen.cnodes": [[48, 1, 1, "", "CommaOperator"], [48, 1, 1, "", "Label"], [48, 1, 1, "", "PostDecrement"], [48, 1, 1, "", "PostIncrement"], [48, 1, 1, "", "PreDecrement"], [48, 1, 1, "", "PreIncrement"], [48, 4, 1, "", "alignof"], [48, 1, 1, "", "goto"], [48, 4, 1, "", "sizeof"], [48, 1, 1, "", "struct"], [48, 1, 1, "", "union"]], "sympy.codegen.cutils": [[48, 4, 1, "", "render_as_source_file"]], "sympy.codegen.cxxnodes": [[48, 1, 1, "", "using"]], "sympy.codegen.fnodes": [[48, 1, 1, "", "ArrayConstructor"], [48, 1, 1, "", "Do"], [48, 1, 1, "", "Extent"], [48, 1, 1, "", "FortranReturn"], [48, 1, 1, "", "GoTo"], [48, 1, 1, "", "ImpliedDoLoop"], [48, 1, 1, "", "Module"], [48, 1, 1, "", "Program"], [48, 1, 1, "", "Subroutine"], [48, 1, 1, "", "SubroutineCall"], [48, 4, 1, "", "allocated"], [48, 4, 1, "", "array"], [48, 4, 1, "", "bind_C"], [48, 1, 1, "", "cmplx"], [48, 4, 1, "", "dimension"], [48, 1, 1, "", "dsign"], [48, 1, 1, "", "isign"], [48, 1, 1, "", "kind"], [48, 4, 1, "", "lbound"], [48, 1, 1, "", "literal_dp"], [48, 1, 1, "", "literal_sp"], [48, 1, 1, "", "merge"], [48, 4, 1, "", "reshape"], [48, 4, 1, "", "shape"], [48, 4, 1, "", "size"], [48, 1, 1, "", "use"], [48, 1, 1, "", "use_rename"]], "sympy.codegen.futils": [[48, 4, 1, "", "render_as_module"]], "sympy.codegen.matrix_nodes": [[48, 1, 1, "", "MatrixSolve"]], "sympy.codegen.pyutils": [[48, 4, 1, "", "render_as_module"]], "sympy.codegen.rewriting": [[48, 1, 1, "", "FuncMinusOneOptim"], [48, 1, 1, "", "Optimization"], [48, 1, 1, "", "ReplaceOptim"], [48, 4, 1, "", "create_expand_pow_optimization"], [48, 4, 1, "", "optimize"]], "sympy.codegen.rewriting.FuncMinusOneOptim": [[48, 2, 1, "", "replace_in_Add"]], "sympy.combinatorics": [[50, 0, 0, "-", "galois"], [59, 0, 0, "-", "generators"], [51, 0, 0, "-", "graycode"], [52, 0, 0, "-", "group_constructs"], [53, 0, 0, "-", "group_numbers"], [55, 0, 0, "-", "named_groups"], [56, 0, 0, "-", "partitions"], [58, 0, 0, "-", "perm_groups"], [59, 0, 0, "-", "permutations"], [60, 0, 0, "-", "polyhedron"], [61, 0, 0, "-", "prufer"], [62, 0, 0, "-", "subsets"], [63, 0, 0, "-", "tensor_can"], [64, 0, 0, "-", "testutil"], [65, 0, 0, "-", "util"]], "sympy.combinatorics.galois": [[50, 4, 1, "", "A4_in_S6"], [50, 4, 1, "", "A4xC2"], [50, 4, 1, "", "G18"], [50, 4, 1, "", "G36m"], [50, 4, 1, "", "G36p"], [50, 4, 1, "", "G72"], [50, 4, 1, "", "M20"], [50, 4, 1, "", "PGL2F5"], [50, 4, 1, "", "PSL2F5"], [50, 1, 1, "", "S1TransitiveSubgroups"], [50, 1, 1, "", "S2TransitiveSubgroups"], [50, 1, 1, "", "S3TransitiveSubgroups"], [50, 4, 1, "", "S3_in_S6"], [50, 1, 1, "", "S4TransitiveSubgroups"], [50, 4, 1, "", "S4m"], [50, 4, 1, "", "S4p"], [50, 4, 1, "", "S4xC2"], [50, 1, 1, "", "S5TransitiveSubgroups"], [50, 1, 1, "", "S6TransitiveSubgroups"], [50, 4, 1, "", "find_transitive_subgroups_of_S6"], [50, 4, 1, "", "four_group"]], "sympy.combinatorics.generators": [[59, 2, 1, "", "alternating"], [59, 2, 1, "", "cyclic"], [59, 2, 1, "", "dihedral"], [59, 2, 1, "", "symmetric"]], "sympy.combinatorics.graycode": [[51, 1, 1, "", "GrayCode"], [51, 2, 1, "", "bin_to_gray"], [51, 2, 1, "", "get_subset_from_bitstring"], [51, 2, 1, "", "gray_to_bin"], [51, 2, 1, "", "graycode_subsets"], [51, 2, 1, "", "random_bitstring"]], "sympy.combinatorics.graycode.GrayCode": [[51, 3, 1, "", "current"], [51, 2, 1, "", "generate_gray"], [51, 3, 1, "", "n"], [51, 2, 1, "", "next"], [51, 3, 1, "", "rank"], [51, 3, 1, "", "selections"], [51, 2, 1, "", "skip"], [51, 2, 1, "", "unrank"]], "sympy.combinatorics.group_constructs": [[52, 4, 1, "", "DirectProduct"]], "sympy.combinatorics.group_numbers": [[53, 4, 1, "", "is_abelian_number"], [53, 4, 1, "", "is_cyclic_number"], [53, 4, 1, "", "is_nilpotent_number"]], "sympy.combinatorics.named_groups": [[55, 4, 1, "", "AbelianGroup"], [55, 4, 1, "", "AlternatingGroup"], [55, 4, 1, "", "CyclicGroup"], [55, 4, 1, "", "DihedralGroup"], [55, 4, 1, "", "SymmetricGroup"]], "sympy.combinatorics.partitions": [[56, 1, 1, "", "IntegerPartition"], [56, 1, 1, "", "Partition"], [56, 4, 1, "", "RGS_enum"], [56, 4, 1, "", "RGS_generalized"], [56, 4, 1, "", "RGS_rank"], [56, 4, 1, "", "RGS_unrank"], [56, 4, 1, "", "random_integer_partition"]], "sympy.combinatorics.partitions.IntegerPartition": [[56, 2, 1, "", "as_dict"], [56, 2, 1, "", "as_ferrers"], [56, 3, 1, "", "conjugate"], [56, 2, 1, "", "next_lex"], [56, 2, 1, "", "prev_lex"]], "sympy.combinatorics.partitions.Partition": [[56, 3, 1, "", "RGS"], [56, 2, 1, "", "from_rgs"], [56, 3, 1, "", "partition"], [56, 3, 1, "", "rank"], [56, 2, 1, "", "sort_key"]], "sympy.combinatorics.perm_groups": [[58, 1, 1, "", "PermutationGroup"]], "sympy.combinatorics.perm_groups.PermutationGroup": [[58, 2, 1, "", "__contains__"], [58, 2, 1, "", "__mul__"], [58, 2, 1, "", "__new__"], [58, 5, 1, "", "__weakref__"], [58, 2, 1, "", "_coset_representative"], [58, 2, 1, "", "_distinct_primes_lemma"], [58, 3, 1, "", "_elements"], [58, 2, 1, "", "_eval_is_alt_sym_monte_carlo"], [58, 2, 1, "", "_eval_is_alt_sym_naive"], [58, 2, 1, "", "_p_elements_group"], [58, 2, 1, "", "_random_pr_init"], [58, 2, 1, "", "_sylow_alt_sym"], [58, 2, 1, "", "_union_find_merge"], [58, 2, 1, "", "_union_find_rep"], [58, 2, 1, "", "_verify"], [58, 2, 1, "", "abelian_invariants"], [58, 3, 1, "", "base"], [58, 2, 1, "", "baseswap"], [58, 3, 1, "", "basic_orbits"], [58, 3, 1, "", "basic_stabilizers"], [58, 3, 1, "", "basic_transversals"], [58, 2, 1, "", "center"], [58, 2, 1, "", "centralizer"], [58, 2, 1, "", "commutator"], [58, 2, 1, "", "composition_series"], [58, 2, 1, "", "conjugacy_class"], [58, 2, 1, "", "conjugacy_classes"], [58, 2, 1, "", "contains"], [58, 2, 1, "", "coset_factor"], [58, 2, 1, "", "coset_rank"], [58, 2, 1, "", "coset_table"], [58, 2, 1, "", "coset_transversal"], [58, 2, 1, "", "coset_unrank"], [58, 3, 1, "", "degree"], [58, 2, 1, "", "derived_series"], [58, 2, 1, "", "derived_subgroup"], [58, 3, 1, "", "elements"], [58, 2, 1, "", "equals"], [58, 2, 1, "", "generate"], [58, 2, 1, "", "generate_dimino"], [58, 2, 1, "", "generate_schreier_sims"], [58, 2, 1, "", "generator_product"], [58, 3, 1, "", "generators"], [58, 3, 1, "", "identity"], [58, 2, 1, "", "index"], [58, 3, 1, "", "is_abelian"], [58, 2, 1, "", "is_alt_sym"], [58, 3, 1, "", "is_alternating"], [58, 3, 1, "", "is_cyclic"], [58, 3, 1, "", "is_dihedral"], [58, 2, 1, "", "is_elementary"], [58, 3, 1, "", "is_nilpotent"], [58, 2, 1, "", "is_normal"], [58, 3, 1, "", "is_perfect"], [58, 3, 1, "", "is_polycyclic"], [58, 2, 1, "", "is_primitive"], [58, 3, 1, "", "is_solvable"], [58, 2, 1, "", "is_subgroup"], [58, 3, 1, "", "is_symmetric"], [58, 2, 1, "", "is_transitive"], [58, 3, 1, "", "is_trivial"], [58, 2, 1, "", "lower_central_series"], [58, 2, 1, "", "make_perm"], [58, 3, 1, "", "max_div"], [58, 2, 1, "", "minimal_block"], [58, 2, 1, "", "minimal_blocks"], [58, 2, 1, "", "normal_closure"], [58, 2, 1, "", "orbit"], [58, 2, 1, "", "orbit_rep"], [58, 2, 1, "", "orbit_transversal"], [58, 2, 1, "", "orbits"], [58, 2, 1, "", "order"], [58, 2, 1, "", "pointwise_stabilizer"], [58, 2, 1, "", "polycyclic_group"], [58, 2, 1, "", "presentation"], [58, 2, 1, "", "random"], [58, 2, 1, "", "random_pr"], [58, 2, 1, "", "random_stab"], [58, 2, 1, "", "schreier_sims"], [58, 2, 1, "", "schreier_sims_incremental"], [58, 2, 1, "", "schreier_sims_random"], [58, 2, 1, "", "schreier_vector"], [58, 2, 1, "", "stabilizer"], [58, 3, 1, "", "strong_gens"], [58, 2, 1, "", "strong_presentation"], [58, 2, 1, "", "subgroup"], [58, 2, 1, "", "subgroup_search"], [58, 2, 1, "", "sylow_subgroup"], [58, 3, 1, "", "transitivity_degree"]], "sympy.combinatorics.permutations": [[59, 1, 1, "", "Cycle"], [59, 1, 1, "", "Permutation"], [59, 4, 1, "", "_af_parity"]], "sympy.combinatorics.permutations.Cycle": [[59, 2, 1, "", "list"]], "sympy.combinatorics.permutations.Permutation": [[59, 2, 1, "", "apply"], [59, 3, 1, "", "array_form"], [59, 2, 1, "", "ascents"], [59, 2, 1, "", "atoms"], [59, 3, 1, "", "cardinality"], [59, 2, 1, "", "commutator"], [59, 2, 1, "", "commutes_with"], [59, 3, 1, "", "cycle_structure"], [59, 3, 1, "", "cycles"], [59, 3, 1, "", "cyclic_form"], [59, 2, 1, "", "descents"], [59, 2, 1, "", "from_inversion_vector"], [59, 2, 1, "", "from_sequence"], [59, 3, 1, "", "full_cyclic_form"], [59, 2, 1, "", "get_adjacency_distance"], [59, 2, 1, "", "get_adjacency_matrix"], [59, 2, 1, "", "get_positional_distance"], [59, 2, 1, "", "get_precedence_distance"], [59, 2, 1, "", "get_precedence_matrix"], [59, 2, 1, "", "index"], [59, 2, 1, "", "inversion_vector"], [59, 2, 1, "", "inversions"], [59, 3, 1, "", "is_Empty"], [59, 3, 1, "", "is_Identity"], [59, 3, 1, "", "is_Singleton"], [59, 3, 1, "", "is_even"], [59, 3, 1, "", "is_odd"], [59, 2, 1, "", "josephus"], [59, 2, 1, "", "length"], [59, 2, 1, "", "list"], [59, 2, 1, "", "max"], [59, 2, 1, "", "min"], [59, 2, 1, "", "mul_inv"], [59, 2, 1, "", "next_lex"], [59, 2, 1, "", "next_nonlex"], [59, 2, 1, "", "next_trotterjohnson"], [59, 2, 1, "", "order"], [59, 2, 1, "", "parity"], [59, 2, 1, "", "random"], [59, 2, 1, "", "rank"], [59, 2, 1, "", "rank_nonlex"], [59, 2, 1, "", "rank_trotterjohnson"], [59, 2, 1, "", "resize"], [59, 2, 1, "", "rmul"], [59, 2, 1, "", "rmul_with_af"], [59, 2, 1, "", "runs"], [59, 2, 1, "", "signature"], [59, 3, 1, "", "size"], [59, 2, 1, "", "support"], [59, 2, 1, "", "transpositions"], [59, 2, 1, "", "unrank_lex"], [59, 2, 1, "", "unrank_nonlex"], [59, 2, 1, "", "unrank_trotterjohnson"]], "sympy.combinatorics.polyhedron": [[60, 1, 1, "", "Polyhedron"]], "sympy.combinatorics.polyhedron.Polyhedron": [[60, 3, 1, "", "array_form"], [60, 3, 1, "", "corners"], [60, 3, 1, "", "cyclic_form"], [60, 3, 1, "", "edges"], [60, 3, 1, "", "faces"], [60, 3, 1, "", "pgroup"], [60, 2, 1, "", "reset"], [60, 2, 1, "", "rotate"], [60, 3, 1, "", "size"], [60, 3, 1, "", "vertices"]], "sympy.combinatorics.prufer": [[61, 1, 1, "", "Prufer"]], "sympy.combinatorics.prufer.Prufer": [[61, 2, 1, "", "edges"], [61, 2, 1, "", "next"], [61, 3, 1, "", "nodes"], [61, 2, 1, "", "prev"], [61, 2, 1, "", "prufer_rank"], [61, 3, 1, "", "prufer_repr"], [61, 3, 1, "", "rank"], [61, 3, 1, "", "size"], [61, 2, 1, "", "to_prufer"], [61, 2, 1, "", "to_tree"], [61, 3, 1, "", "tree_repr"], [61, 2, 1, "", "unrank"]], "sympy.combinatorics.subsets": [[62, 1, 1, "", "Subset"], [62, 2, 1, "", "ksubsets"]], "sympy.combinatorics.subsets.Subset": [[62, 2, 1, "", "bitlist_from_subset"], [62, 3, 1, "", "cardinality"], [62, 2, 1, "", "iterate_binary"], [62, 2, 1, "", "iterate_graycode"], [62, 2, 1, "", "next_binary"], [62, 2, 1, "", "next_gray"], [62, 2, 1, "", "next_lexicographic"], [62, 2, 1, "", "prev_binary"], [62, 2, 1, "", "prev_gray"], [62, 2, 1, "", "prev_lexicographic"], [62, 3, 1, "", "rank_binary"], [62, 3, 1, "", "rank_gray"], [62, 3, 1, "", "rank_lexicographic"], [62, 3, 1, "", "size"], [62, 3, 1, "", "subset"], [62, 2, 1, "", "subset_from_bitlist"], [62, 2, 1, "", "subset_indices"], [62, 3, 1, "", "superset"], [62, 3, 1, "", "superset_size"], [62, 2, 1, "", "unrank_binary"], [62, 2, 1, "", "unrank_gray"]], "sympy.combinatorics.tensor_can": [[63, 4, 1, "", "bsgs_direct_product"], [63, 4, 1, "", "canonicalize"], [63, 4, 1, "", "double_coset_can_rep"], [63, 4, 1, "", "get_symmetric_group_sgs"]], "sympy.combinatorics.testutil": [[64, 4, 1, "", "_cmp_perm_lists"], [64, 4, 1, "", "_naive_list_centralizer"], [64, 4, 1, "", "_verify_bsgs"], [64, 4, 1, "", "_verify_centralizer"], [64, 4, 1, "", "_verify_normal_closure"]], "sympy.combinatorics.util": [[65, 4, 1, "", "_base_ordering"], [65, 4, 1, "", "_check_cycles_alt_sym"], [65, 4, 1, "", "_distribute_gens_by_base"], [65, 4, 1, "", "_handle_precomputed_bsgs"], [65, 4, 1, "", "_orbits_transversals_from_bsgs"], [65, 4, 1, "", "_remove_gens"], [65, 4, 1, "", "_strip"], [65, 4, 1, "", "_strong_gens_from_distr"]], "sympy.concrete.expr_with_intlimits": [[66, 1, 1, "", "ExprWithIntLimits"]], "sympy.concrete.expr_with_intlimits.ExprWithIntLimits": [[66, 2, 1, "", "change_index"], [66, 3, 1, "", "has_empty_sequence"], [66, 2, 1, "", "index"], [66, 2, 1, "", "reorder"], [66, 2, 1, "", "reorder_limit"]], "sympy.concrete.expr_with_limits": [[94, 1, 1, "", "ExprWithLimits"]], "sympy.concrete.expr_with_limits.ExprWithLimits": [[94, 3, 1, "", "bound_symbols"], [94, 3, 1, "", "free_symbols"], [94, 3, 1, "", "function"], [94, 3, 1, "", "has_finite_limits"], [94, 3, 1, "", "has_reversed_limits"], [94, 3, 1, "", "is_number"], [94, 3, 1, "", "limits"], [94, 3, 1, "", "variables"]], "sympy.concrete.gosper": [[66, 4, 1, "", "gosper_normal"], [66, 4, 1, "", "gosper_sum"], [66, 4, 1, "", "gosper_term"]], "sympy.concrete.products": [[66, 1, 1, "", "Product"], [66, 4, 1, "", "product"]], "sympy.concrete.products.Product": [[66, 2, 1, "", "is_convergent"], [66, 2, 1, "", "reverse_order"]], "sympy.concrete.summations": [[66, 1, 1, "", "Sum"], [66, 4, 1, "", "summation"]], "sympy.concrete.summations.Sum": [[66, 2, 1, "", "euler_maclaurin"], [66, 2, 1, "", "eval_zeta_function"], [66, 2, 1, "", "is_absolutely_convergent"], [66, 2, 1, "", "is_convergent"], [66, 2, 1, "", "reverse_order"]], "sympy.core": [[67, 0, 0, "-", "add"], [67, 0, 0, "-", "assumptions"], [67, 0, 0, "-", "basic"], [67, 0, 0, "-", "cache"], [67, 0, 0, "-", "containers"], [67, 0, 0, "-", "evalf"], [67, 0, 0, "-", "expr"], [67, 0, 0, "-", "exprtools"], [67, 0, 0, "-", "function"], [67, 0, 0, "-", "kind"], [67, 0, 0, "-", "mod"], [67, 0, 0, "-", "mul"], [67, 0, 0, "-", "multidimensional"], [67, 0, 0, "-", "numbers"], [67, 0, 0, "-", "power"], [67, 0, 0, "-", "random"], [67, 0, 0, "-", "relational"], [67, 0, 0, "-", "singleton"], [67, 0, 0, "-", "symbol"], [67, 0, 0, "-", "sympify"], [67, 0, 0, "-", "traversal"]], "sympy.core.add": [[67, 1, 1, "", "Add"]], "sympy.core.add.Add": [[67, 2, 1, "", "as_coeff_Add"], [67, 2, 1, "", "as_coeff_add"], [67, 2, 1, "", "as_content_primitive"], [67, 2, 1, "", "as_numer_denom"], [67, 2, 1, "", "as_real_imag"], [67, 2, 1, "", "as_two_terms"], [67, 2, 1, "", "extract_leading_order"], [67, 2, 1, "", "flatten"], [67, 2, 1, "", "primitive"]], "sympy.core.basic": [[67, 1, 1, "", "Atom"], [67, 1, 1, "", "Basic"]], "sympy.core.basic.Basic": [[67, 3, 1, "", "args"], [67, 2, 1, "", "as_content_primitive"], [67, 2, 1, "", "as_dummy"], [67, 3, 1, "", "assumptions0"], [67, 2, 1, "", "atoms"], [67, 3, 1, "", "canonical_variables"], [67, 2, 1, "", "class_key"], [67, 2, 1, "", "compare"], [67, 2, 1, "", "count"], [67, 2, 1, "", "count_ops"], [67, 2, 1, "", "doit"], [67, 2, 1, "", "dummy_eq"], [67, 2, 1, "", "find"], [67, 3, 1, "", "free_symbols"], [67, 2, 1, "", "fromiter"], [67, 3, 1, "", "func"], [67, 2, 1, "", "has"], [67, 2, 1, "", "has_free"], [67, 2, 1, "", "has_xfree"], [67, 3, 1, "", "is_comparable"], [67, 2, 1, "", "match"], [67, 2, 1, "", "matches"], [67, 2, 1, "", "rcall"], [67, 2, 1, "", "refine"], [67, 2, 1, "", "replace"], [67, 2, 1, "", "rewrite"], [67, 2, 1, "", "simplify"], [67, 2, 1, "", "sort_key"], [67, 2, 1, "", "subs"], [67, 2, 1, "", "xreplace"]], "sympy.core.cache": [[67, 4, 1, "", "__cacheit"]], "sympy.core.containers": [[67, 1, 1, "", "Dict"], [67, 1, 1, "", "Tuple"], [67, 1, 1, "", "TupleKind"]], "sympy.core.containers.Dict": [[67, 2, 1, "", "get"], [67, 2, 1, "", "items"], [67, 2, 1, "", "keys"], [67, 2, 1, "", "values"]], "sympy.core.containers.Tuple": [[67, 2, 1, "", "index"], [67, 3, 1, "", "kind"], [67, 2, 1, "", "tuple_count"]], "sympy.core.evalf": [[67, 1, 1, "", "EvalfMixin"], [67, 4, 1, "", "N"], [67, 1, 1, "", "PrecisionExhausted"]], "sympy.core.evalf.EvalfMixin": [[67, 2, 1, "", "evalf"], [67, 2, 1, "", "n"]], "sympy.core.expr": [[67, 1, 1, "", "AtomicExpr"], [67, 1, 1, "", "Expr"], [67, 1, 1, "", "UnevaluatedExpr"]], "sympy.core.expr.Expr": [[67, 2, 1, "", "apart"], [67, 2, 1, "", "args_cnc"], [67, 2, 1, "", "as_coeff_Add"], [67, 2, 1, "", "as_coeff_Mul"], [67, 2, 1, "", "as_coeff_add"], [67, 2, 1, "", "as_coeff_exponent"], [67, 2, 1, "", "as_coeff_mul"], [67, 2, 1, "", "as_coefficient"], [67, 2, 1, "", "as_coefficients_dict"], [67, 2, 1, "", "as_content_primitive"], [67, 2, 1, "", "as_expr"], [67, 2, 1, "", "as_independent"], [67, 2, 1, "", "as_leading_term"], [67, 2, 1, "", "as_numer_denom"], [67, 2, 1, "", "as_ordered_factors"], [67, 2, 1, "", "as_ordered_terms"], [67, 2, 1, "", "as_poly"], [67, 2, 1, "", "as_powers_dict"], [67, 2, 1, "", "as_real_imag"], [67, 2, 1, "", "as_terms"], [67, 2, 1, "", "aseries"], [67, 2, 1, "", "cancel"], [67, 2, 1, "", "coeff"], [67, 2, 1, "", "collect"], [67, 2, 1, "", "combsimp"], [67, 2, 1, "", "compute_leading_term"], [67, 2, 1, "", "conjugate"], [67, 2, 1, "", "could_extract_minus_sign"], [67, 2, 1, "", "equals"], [67, 2, 1, "", "expand"], [67, 3, 1, "", "expr_free_symbols"], [67, 2, 1, "", "extract_additively"], [67, 2, 1, "", "extract_branch_factor"], [67, 2, 1, "", "extract_multiplicatively"], [67, 2, 1, "", "factor"], [67, 2, 1, "", "fourier_series"], [67, 2, 1, "", "fps"], [67, 2, 1, "", "gammasimp"], [67, 2, 1, "", "getO"], [67, 2, 1, "", "getn"], [67, 2, 1, "", "integrate"], [67, 2, 1, "", "invert"], [67, 2, 1, "", "is_algebraic_expr"], [67, 2, 1, "", "is_constant"], [67, 2, 1, "", "is_meromorphic"], [67, 3, 1, "", "is_number"], [67, 2, 1, "", "is_polynomial"], [67, 2, 1, "", "is_rational_function"], [67, 2, 1, "", "leadterm"], [67, 2, 1, "", "limit"], [67, 2, 1, "", "lseries"], [67, 2, 1, "", "normal"], [67, 2, 1, "", "nseries"], [67, 2, 1, "", "nsimplify"], [67, 2, 1, "", "powsimp"], [67, 2, 1, "", "primitive"], [67, 2, 1, "", "radsimp"], [67, 2, 1, "", "ratsimp"], [67, 2, 1, "", "removeO"], [67, 2, 1, "", "round"], [67, 2, 1, "", "separate"], [67, 2, 1, "", "series"], [67, 2, 1, "", "taylor_term"], [67, 2, 1, "", "together"], [67, 2, 1, "", "trigsimp"]], "sympy.core.exprtools": [[67, 4, 1, "", "factor_terms"], [67, 4, 1, "", "gcd_terms"]], "sympy.core.function": [[67, 1, 1, "", "Derivative"], [67, 1, 1, "", "Function"], [67, 1, 1, "", "FunctionClass"], [67, 1, 1, "", "Lambda"], [67, 1, 1, "", "PoleError"], [67, 1, 1, "", "Subs"], [67, 1, 1, "", "WildFunction"], [67, 4, 1, "", "count_ops"], [67, 4, 1, "", "diff"], [67, 4, 1, "", "expand"], [67, 4, 1, "", "expand_complex"], [67, 4, 1, "", "expand_func"], [67, 4, 1, "", "expand_log"], [67, 4, 1, "", "expand_mul"], [67, 4, 1, "", "expand_multinomial"], [67, 4, 1, "", "expand_power_base"], [67, 4, 1, "", "expand_power_exp"], [67, 4, 1, "", "expand_trig"], [67, 4, 1, "", "nfloat"]], "sympy.core.function.Derivative": [[67, 3, 1, "", "_diff_wrt"], [67, 2, 1, "", "_sort_variable_count"], [67, 2, 1, "", "as_finite_difference"], [67, 2, 1, "", "doit_numerically"]], "sympy.core.function.Function": [[67, 2, 1, "", "as_base_exp"], [67, 2, 1, "", "fdiff"], [67, 2, 1, "", "is_singular"]], "sympy.core.function.FunctionClass": [[67, 3, 1, "", "nargs"]], "sympy.core.function.Lambda": [[67, 3, 1, "", "bound_symbols"], [67, 3, 1, "", "expr"], [67, 3, 1, "", "is_identity"], [67, 3, 1, "", "signature"], [67, 3, 1, "", "variables"]], "sympy.core.function.Subs": [[67, 3, 1, "", "bound_symbols"], [67, 3, 1, "", "expr"], [67, 3, 1, "", "point"], [67, 3, 1, "", "variables"]], "sympy.core.kind": [[67, 5, 1, "", "BooleanKind"], [67, 1, 1, "", "Kind"], [67, 5, 1, "", "NumberKind"], [67, 5, 1, "", "UndefinedKind"]], "sympy.core.mod": [[67, 1, 1, "", "Mod"]], "sympy.core.mul": [[67, 1, 1, "", "Mul"], [67, 4, 1, "", "prod"]], "sympy.core.mul.Mul": [[67, 2, 1, "", "as_coeff_Mul"], [67, 2, 1, "", "as_content_primitive"], [67, 2, 1, "", "as_ordered_factors"], [67, 2, 1, "", "as_two_terms"], [67, 2, 1, "", "flatten"]], "sympy.core.multidimensional": [[67, 1, 1, "", "vectorize"]], "sympy.core.numbers": [[67, 1, 1, "", "AlgebraicNumber"], [67, 1, 1, "", "Catalan"], [67, 1, 1, "", "ComplexInfinity"], [67, 1, 1, "", "EulerGamma"], [67, 1, 1, "", "Exp1"], [67, 1, 1, "", "Float"], [67, 1, 1, "", "GoldenRatio"], [67, 1, 1, "", "Half"], [67, 1, 1, "", "ImaginaryUnit"], [67, 1, 1, "", "Infinity"], [67, 1, 1, "", "Integer"], [67, 1, 1, "", "NaN"], [67, 1, 1, "", "NegativeInfinity"], [67, 1, 1, "", "NegativeOne"], [67, 1, 1, "", "Number"], [67, 1, 1, "", "NumberSymbol"], [67, 1, 1, "", "One"], [67, 1, 1, "", "Pi"], [67, 1, 1, "", "Rational"], [67, 5, 1, "", "RealNumber"], [67, 1, 1, "", "TribonacciConstant"], [67, 1, 1, "", "Zero"], [67, 4, 1, "", "equal_valued"], [67, 4, 1, "", "igcd"], [67, 4, 1, "", "ilcm"], [67, 4, 1, "", "mod_inverse"], [67, 4, 1, "", "seterr"]], "sympy.core.numbers.AlgebraicNumber": [[67, 2, 1, "", "__new__"], [67, 2, 1, "", "as_expr"], [67, 2, 1, "", "as_poly"], [67, 2, 1, "", "coeffs"], [67, 2, 1, "", "field_element"], [67, 3, 1, "", "is_aliased"], [67, 3, 1, "", "is_primitive_element"], [67, 2, 1, "", "minpoly_of_element"], [67, 2, 1, "", "native_coeffs"], [67, 2, 1, "", "primitive_element"], [67, 2, 1, "", "to_algebraic_integer"], [67, 2, 1, "", "to_primitive_element"], [67, 2, 1, "", "to_root"]], "sympy.core.numbers.Number": [[67, 2, 1, "", "as_coeff_Add"], [67, 2, 1, "", "as_coeff_Mul"], [67, 2, 1, "", "cofactors"], [67, 2, 1, "", "gcd"], [67, 2, 1, "", "lcm"]], "sympy.core.numbers.NumberSymbol": [[67, 2, 1, "", "approximation"]], "sympy.core.numbers.Rational": [[67, 2, 1, "", "as_coeff_Add"], [67, 2, 1, "", "as_coeff_Mul"], [67, 2, 1, "", "as_content_primitive"], [67, 2, 1, "", "factors"], [67, 2, 1, "", "limit_denominator"]], "sympy.core.power": [[67, 1, 1, "", "Pow"], [67, 4, 1, "", "integer_log"], [67, 4, 1, "", "integer_nthroot"], [67, 4, 1, "", "isqrt"]], "sympy.core.power.Pow": [[67, 2, 1, "", "as_base_exp"], [67, 2, 1, "", "as_content_primitive"]], "sympy.core.random": [[67, 4, 1, "", "_randint"], [67, 4, 1, "", "_randrange"], [67, 4, 1, "", "random_complex_number"], [67, 4, 1, "", "test_derivative_numerically"], [67, 4, 1, "", "verify_numerically"]], "sympy.core.relational": [[67, 5, 1, "", "Eq"], [67, 1, 1, "", "Equality"], [67, 5, 1, "", "Ge"], [67, 1, 1, "", "GreaterThan"], [67, 5, 1, "", "Gt"], [67, 5, 1, "", "Le"], [67, 1, 1, "", "LessThan"], [67, 5, 1, "", "Lt"], [67, 5, 1, "", "Ne"], [67, 5, 1, "", "Rel"], [67, 1, 1, "", "Relational"], [67, 1, 1, "", "StrictGreaterThan"], [67, 1, 1, "", "StrictLessThan"], [67, 1, 1, "", "Unequality"]], "sympy.core.relational.Equality": [[67, 2, 1, "", "as_poly"], [67, 2, 1, "", "integrate"]], "sympy.core.relational.Relational": [[67, 3, 1, "", "canonical"], [67, 2, 1, "", "equals"], [67, 3, 1, "", "lhs"], [67, 3, 1, "", "negated"], [67, 3, 1, "", "reversed"], [67, 3, 1, "", "reversedsign"], [67, 3, 1, "", "rhs"], [67, 3, 1, "", "strict"], [67, 3, 1, "", "weak"]], "sympy.core.singleton": [[67, 1, 1, "", "Singleton"], [67, 1, 1, "", "SingletonRegistry"]], "sympy.core.sorting": [[67, 4, 1, "", "default_sort_key"], [67, 4, 1, "", "ordered"]], "sympy.core.symbol": [[67, 1, 1, "", "Dummy"], [67, 1, 1, "", "Symbol"], [67, 1, 1, "", "Wild"], [67, 4, 1, "", "symbols"], [67, 4, 1, "", "var"]], "sympy.core.sympify": [[67, 4, 1, "", "sympify"]], "sympy.core.traversal": [[67, 4, 1, "", "bottom_up"], [67, 4, 1, "", "postorder_traversal"], [67, 4, 1, "", "preorder_traversal"], [67, 4, 1, "", "use"], [67, 4, 1, "", "walk"]], "sympy.crypto": [[68, 0, 0, "-", "crypto"]], "sympy.crypto.crypto": [[68, 4, 1, "", "AZ"], [68, 4, 1, "", "bifid5_square"], [68, 4, 1, "", "bifid6_square"], [68, 4, 1, "", "check_and_join"], [68, 4, 1, "", "cycle_list"], [68, 4, 1, "", "decipher_affine"], [68, 4, 1, "", "decipher_atbash"], [68, 4, 1, "", "decipher_bifid"], [68, 4, 1, "", "decipher_bifid5"], [68, 4, 1, "", "decipher_bifid6"], [68, 4, 1, "", "decipher_elgamal"], [68, 4, 1, "", "decipher_gm"], [68, 4, 1, "", "decipher_hill"], [68, 4, 1, "", "decipher_kid_rsa"], [68, 4, 1, "", "decipher_railfence"], [68, 4, 1, "", "decipher_rot13"], [68, 4, 1, "", "decipher_rsa"], [68, 4, 1, "", "decipher_shift"], [68, 4, 1, "", "decipher_vigenere"], [68, 4, 1, "", "decode_morse"], [68, 4, 1, "", "dh_private_key"], [68, 4, 1, "", "dh_public_key"], [68, 4, 1, "", "dh_shared_key"], [68, 4, 1, "", "elgamal_private_key"], [68, 4, 1, "", "elgamal_public_key"], [68, 4, 1, "", "encipher_affine"], [68, 4, 1, "", "encipher_atbash"], [68, 4, 1, "", "encipher_bifid"], [68, 4, 1, "", "encipher_bifid5"], [68, 4, 1, "", "encipher_bifid6"], [68, 4, 1, "", "encipher_elgamal"], [68, 4, 1, "", "encipher_gm"], [68, 4, 1, "", "encipher_hill"], [68, 4, 1, "", "encipher_kid_rsa"], [68, 4, 1, "", "encipher_railfence"], [68, 4, 1, "", "encipher_rot13"], [68, 4, 1, "", "encipher_rsa"], [68, 4, 1, "", "encipher_shift"], [68, 4, 1, "", "encipher_substitution"], [68, 4, 1, "", "encipher_vigenere"], [68, 4, 1, "", "encode_morse"], [68, 4, 1, "", "gm_private_key"], [68, 4, 1, "", "gm_public_key"], [68, 4, 1, "", "kid_rsa_private_key"], [68, 4, 1, "", "kid_rsa_public_key"], [68, 4, 1, "", "lfsr_autocorrelation"], [68, 4, 1, "", "lfsr_connection_polynomial"], [68, 4, 1, "", "lfsr_sequence"], [68, 4, 1, "", "padded_key"], [68, 4, 1, "", "rsa_private_key"], [68, 4, 1, "", "rsa_public_key"]], "sympy.diffgeom": [[69, 1, 1, "", "BaseCovarDerivativeOp"], [69, 1, 1, "", "BaseScalarField"], [69, 1, 1, "", "BaseVectorField"], [69, 1, 1, "", "Commutator"], [69, 1, 1, "", "CoordSystem"], [69, 1, 1, "", "CoordinateSymbol"], [69, 1, 1, "", "CovarDerivativeOp"], [69, 1, 1, "", "Differential"], [69, 1, 1, "", "LieDerivative"], [69, 1, 1, "", "Manifold"], [69, 1, 1, "", "Patch"], [69, 1, 1, "", "Point"], [69, 1, 1, "", "TensorProduct"], [69, 1, 1, "", "WedgeProduct"], [69, 4, 1, "", "intcurve_diffequ"], [69, 4, 1, "", "intcurve_series"], [69, 4, 1, "", "metric_to_Christoffel_1st"], [69, 4, 1, "", "metric_to_Christoffel_2nd"], [69, 4, 1, "", "metric_to_Ricci_components"], [69, 4, 1, "", "metric_to_Riemann_components"], [69, 4, 1, "", "twoform_to_matrix"], [69, 4, 1, "", "vectors_in_basis"]], "sympy.diffgeom.CoordSystem": [[69, 2, 1, "", "base_oneform"], [69, 2, 1, "", "base_oneforms"], [69, 2, 1, "", "base_scalar"], [69, 2, 1, "", "base_scalars"], [69, 2, 1, "", "base_vector"], [69, 2, 1, "", "base_vectors"], [69, 2, 1, "", "coord_function"], [69, 2, 1, "", "coord_functions"], [69, 2, 1, "", "coord_tuple_transform_to"], [69, 2, 1, "", "jacobian"], [69, 2, 1, "", "jacobian_determinant"], [69, 2, 1, "", "jacobian_matrix"], [69, 2, 1, "", "point"], [69, 2, 1, "", "point_to_coords"], [69, 2, 1, "", "transform"], [69, 2, 1, "", "transformation"]], "sympy.diffgeom.Point": [[69, 2, 1, "", "coords"]], "sympy.discrete": [[70, 0, 0, "-", "convolutions"], [70, 0, 0, "-", "transforms"]], "sympy.discrete.convolutions": [[70, 4, 1, "", "convolution"], [70, 4, 1, "", "convolution_fft"], [70, 4, 1, "", "convolution_fwht"], [70, 4, 1, "", "convolution_ntt"], [70, 4, 1, "", "convolution_subset"], [70, 4, 1, "", "covering_product"], [70, 4, 1, "", "intersecting_product"]], "sympy.discrete.transforms": [[70, 4, 1, "", "fft"], [70, 4, 1, "", "fwht"], [70, 4, 1, "", "ifft"], [70, 4, 1, "", "ifwht"], [70, 4, 1, "", "intt"], [70, 4, 1, "", "inverse_mobius_transform"], [70, 4, 1, "", "mobius_transform"], [70, 4, 1, "", "ntt"]], "sympy.external.pythonmpq": [[208, 1, 1, "", "PythonMPQ"]], "sympy.functions.combinatorial.factorials": [[72, 1, 1, "", "FallingFactorial"], [72, 1, 1, "", "MultiFactorial"], [72, 1, 1, "", "RisingFactorial"], [72, 1, 1, "", "binomial"], [72, 1, 1, "", "factorial"], [72, 1, 1, "", "factorial2"], [72, 1, 1, "", "subfactorial"]], "sympy.functions.combinatorial.numbers": [[72, 1, 1, "", "andre"], [72, 1, 1, "", "bell"], [72, 1, 1, "", "bernoulli"], [72, 1, 1, "", "catalan"], [72, 1, 1, "", "euler"], [72, 1, 1, "", "fibonacci"], [72, 1, 1, "", "genocchi"], [72, 1, 1, "", "harmonic"], [72, 1, 1, "", "lucas"], [72, 4, 1, "", "nC"], [72, 4, 1, "", "nP"], [72, 4, 1, "", "nT"], [72, 1, 1, "", "partition"], [72, 4, 1, "", "stirling"], [72, 1, 1, "", "tribonacci"]], "sympy.functions.elementary.complexes": [[73, 1, 1, "", "Abs"], [73, 1, 1, "", "arg"], [73, 1, 1, "", "conjugate"], [73, 1, 1, "", "im"], [73, 1, 1, "", "periodic_argument"], [73, 1, 1, "", "polar_lift"], [73, 1, 1, "", "principal_branch"], [73, 1, 1, "", "re"], [73, 1, 1, "", "sign"]], "sympy.functions.elementary.complexes.Abs": [[73, 2, 1, "", "fdiff"]], "sympy.functions.elementary.complexes.im": [[73, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.complexes.re": [[73, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.exponential": [[73, 1, 1, "", "LambertW"], [73, 1, 1, "", "exp"], [73, 1, 1, "", "exp_polar"], [73, 1, 1, "", "log"]], "sympy.functions.elementary.exponential.LambertW": [[73, 2, 1, "", "fdiff"]], "sympy.functions.elementary.exponential.exp": [[73, 2, 1, "", "as_real_imag"], [73, 3, 1, "", "base"], [73, 2, 1, "", "fdiff"], [73, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.exponential.log": [[73, 2, 1, "", "as_base_exp"], [73, 2, 1, "", "as_real_imag"], [73, 2, 1, "", "fdiff"], [73, 2, 1, "", "inverse"], [73, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic": [[73, 1, 1, "", "HyperbolicFunction"], [73, 1, 1, "", "acosh"], [73, 1, 1, "", "acoth"], [73, 1, 1, "", "acsch"], [73, 1, 1, "", "asech"], [73, 1, 1, "", "asinh"], [73, 1, 1, "", "atanh"], [73, 1, 1, "", "cosh"], [73, 1, 1, "", "coth"], [73, 1, 1, "", "csch"], [73, 1, 1, "", "sech"], [73, 1, 1, "", "sinh"], [73, 1, 1, "", "tanh"]], "sympy.functions.elementary.hyperbolic.acosh": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acoth": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acsch": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asech": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asinh": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.atanh": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.coth": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.csch": [[73, 2, 1, "", "fdiff"], [73, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.sinh": [[73, 2, 1, "", "as_real_imag"], [73, 2, 1, "", "fdiff"], [73, 2, 1, "", "inverse"], [73, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.tanh": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.integers": [[73, 1, 1, "", "RoundFunction"], [73, 1, 1, "", "ceiling"], [73, 1, 1, "", "floor"], [73, 1, 1, "", "frac"]], "sympy.functions.elementary.miscellaneous": [[73, 1, 1, "", "IdentityFunction"], [73, 1, 1, "", "Max"], [73, 1, 1, "", "Min"], [73, 4, 1, "", "cbrt"], [73, 4, 1, "", "real_root"], [73, 4, 1, "", "root"], [73, 4, 1, "", "sqrt"]], "sympy.functions.elementary.piecewise": [[73, 1, 1, "", "ExprCondPair"], [73, 1, 1, "", "Piecewise"], [73, 4, 1, "", "piecewise_exclusive"], [73, 4, 1, "", "piecewise_fold"]], "sympy.functions.elementary.piecewise.ExprCondPair": [[73, 3, 1, "", "cond"], [73, 3, 1, "", "expr"]], "sympy.functions.elementary.piecewise.Piecewise": [[73, 2, 1, "", "_eval_integral"], [73, 2, 1, "", "as_expr_set_pairs"], [73, 2, 1, "", "doit"], [73, 2, 1, "", "eval"], [73, 2, 1, "", "piecewise_integrate"]], "sympy.functions.elementary.trigonometric": [[73, 1, 1, "", "acos"], [73, 1, 1, "", "acot"], [73, 1, 1, "", "acsc"], [73, 1, 1, "", "asec"], [73, 1, 1, "", "asin"], [73, 1, 1, "", "atan"], [73, 1, 1, "", "atan2"], [73, 1, 1, "", "cos"], [73, 1, 1, "", "cot"], [73, 1, 1, "", "csc"], [73, 1, 1, "", "sec"], [73, 1, 1, "", "sin"], [73, 1, 1, "", "sinc"], [73, 1, 1, "", "tan"]], "sympy.functions.elementary.trigonometric.acos": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acot": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acsc": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asec": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asin": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.atan": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.cot": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.tan": [[73, 2, 1, "", "inverse"]], "sympy.functions.special": [[75, 0, 0, "-", "bessel"], [75, 0, 0, "-", "beta_functions"], [75, 0, 0, "-", "elliptic_integrals"], [75, 0, 0, "-", "error_functions"], [75, 0, 0, "-", "gamma_functions"], [75, 0, 0, "-", "mathieu_functions"], [75, 0, 0, "-", "polynomials"], [75, 0, 0, "-", "singularity_functions"], [75, 0, 0, "-", "zeta_functions"]], "sympy.functions.special.bessel": [[75, 1, 1, "", "AiryBase"], [75, 1, 1, "", "BesselBase"], [75, 1, 1, "", "airyai"], [75, 1, 1, "", "airyaiprime"], [75, 1, 1, "", "airybi"], [75, 1, 1, "", "airybiprime"], [75, 1, 1, "", "besseli"], [75, 1, 1, "", "besselj"], [75, 1, 1, "", "besselk"], [75, 1, 1, "", "bessely"], [75, 1, 1, "", "hankel1"], [75, 1, 1, "", "hankel2"], [75, 1, 1, "", "jn"], [75, 4, 1, "", "jn_zeros"], [75, 1, 1, "", "marcumq"], [75, 1, 1, "", "yn"]], "sympy.functions.special.bessel.BesselBase": [[75, 3, 1, "", "argument"], [75, 3, 1, "", "order"]], "sympy.functions.special.beta_functions": [[75, 1, 1, "", "beta"]], "sympy.functions.special.bsplines": [[75, 4, 1, "", "bspline_basis"], [75, 4, 1, "", "bspline_basis_set"], [75, 4, 1, "", "interpolating_spline"]], "sympy.functions.special.delta_functions": [[75, 1, 1, "", "DiracDelta"], [75, 1, 1, "", "Heaviside"]], "sympy.functions.special.delta_functions.DiracDelta": [[75, 2, 1, "", "eval"], [75, 2, 1, "", "fdiff"], [75, 2, 1, "", "is_simple"]], "sympy.functions.special.delta_functions.Heaviside": [[75, 2, 1, "", "eval"], [75, 2, 1, "", "fdiff"], [75, 3, 1, "", "pargs"]], "sympy.functions.special.elliptic_integrals": [[75, 1, 1, "", "elliptic_e"], [75, 1, 1, "", "elliptic_f"], [75, 1, 1, "", "elliptic_k"], [75, 1, 1, "", "elliptic_pi"]], "sympy.functions.special.error_functions": [[75, 1, 1, "", "Chi"], [75, 1, 1, "", "Ci"], [75, 4, 1, "", "E1"], [75, 1, 1, "", "Ei"], [75, 1, 1, "", "FresnelIntegral"], [75, 1, 1, "", "Li"], [75, 1, 1, "", "Shi"], [75, 1, 1, "", "Si"], [75, 1, 1, "", "erf"], [75, 1, 1, "", "erf2"], [75, 1, 1, "", "erf2inv"], [75, 1, 1, "", "erfc"], [75, 1, 1, "", "erfcinv"], [75, 1, 1, "", "erfi"], [75, 1, 1, "", "erfinv"], [75, 1, 1, "", "expint"], [75, 1, 1, "", "fresnelc"], [75, 1, 1, "", "fresnels"], [75, 1, 1, "", "li"]], "sympy.functions.special.error_functions.erf": [[75, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfc": [[75, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfcinv": [[75, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfinv": [[75, 2, 1, "", "inverse"]], "sympy.functions.special.gamma_functions": [[75, 1, 1, "", "digamma"], [75, 1, 1, "", "gamma"], [75, 1, 1, "", "loggamma"], [75, 1, 1, "", "lowergamma"], [75, 1, 1, "", "multigamma"], [75, 1, 1, "", "polygamma"], [75, 1, 1, "", "trigamma"], [75, 1, 1, "", "uppergamma"]], "sympy.functions.special.hyper": [[75, 1, 1, "", "appellf1"], [75, 1, 1, "", "hyper"], [75, 1, 1, "", "meijerg"]], "sympy.functions.special.hyper.hyper": [[75, 3, 1, "", "ap"], [75, 3, 1, "", "argument"], [75, 3, 1, "", "bq"], [75, 3, 1, "", "convergence_statement"], [75, 3, 1, "", "eta"], [75, 3, 1, "", "radius_of_convergence"]], "sympy.functions.special.hyper.meijerg": [[75, 3, 1, "", "an"], [75, 3, 1, "", "aother"], [75, 3, 1, "", "ap"], [75, 3, 1, "", "argument"], [75, 3, 1, "", "bm"], [75, 3, 1, "", "bother"], [75, 3, 1, "", "bq"], [75, 3, 1, "", "delta"], [75, 2, 1, "", "get_period"], [75, 2, 1, "", "integrand"], [75, 3, 1, "", "is_number"], [75, 3, 1, "", "nu"]], "sympy.functions.special.mathieu_functions": [[75, 1, 1, "", "MathieuBase"], [75, 1, 1, "", "mathieuc"], [75, 1, 1, "", "mathieucprime"], [75, 1, 1, "", "mathieus"], [75, 1, 1, "", "mathieusprime"]], "sympy.functions.special.polynomials": [[75, 1, 1, "", "assoc_laguerre"], [75, 1, 1, "", "assoc_legendre"], [75, 1, 1, "", "chebyshevt"], [75, 1, 1, "", "chebyshevt_root"], [75, 1, 1, "", "chebyshevu"], [75, 1, 1, "", "chebyshevu_root"], [75, 1, 1, "", "gegenbauer"], [75, 1, 1, "", "hermite"], [75, 1, 1, "", "hermite_prob"], [75, 1, 1, "", "jacobi"], [75, 4, 1, "", "jacobi_normalized"], [75, 1, 1, "", "laguerre"], [75, 1, 1, "", "legendre"]], "sympy.functions.special.singularity_functions": [[75, 1, 1, "", "SingularityFunction"]], "sympy.functions.special.singularity_functions.SingularityFunction": [[75, 2, 1, "", "eval"], [75, 2, 1, "", "fdiff"]], "sympy.functions.special.spherical_harmonics": [[75, 1, 1, "", "Ynm"], [75, 4, 1, "", "Ynm_c"], [75, 1, 1, "", "Znm"]], "sympy.functions.special.tensor_functions": [[75, 4, 1, "", "Eijk"], [75, 1, 1, "", "KroneckerDelta"], [75, 1, 1, "", "LeviCivita"], [75, 4, 1, "", "eval_levicivita"]], "sympy.functions.special.tensor_functions.KroneckerDelta": [[75, 2, 1, "", "eval"], [75, 3, 1, "", "indices_contain_equal_information"], [75, 3, 1, "", "is_above_fermi"], [75, 3, 1, "", "is_below_fermi"], [75, 3, 1, "", "is_only_above_fermi"], [75, 3, 1, "", "is_only_below_fermi"], [75, 3, 1, "", "killable_index"], [75, 3, 1, "", "preferred_index"]], "sympy.functions.special.zeta_functions": [[75, 1, 1, "", "dirichlet_eta"], [75, 1, 1, "", "lerchphi"], [75, 1, 1, "", "polylog"], [75, 1, 1, "", "stieltjes"], [75, 1, 1, "", "zeta"]], "sympy.geometry": [[76, 0, 0, "-", "curve"], [77, 0, 0, "-", "ellipse"], [78, 0, 0, "-", "entity"], [80, 0, 0, "-", "line"], [81, 0, 0, "-", "plane"], [82, 0, 0, "-", "point"], [83, 0, 0, "-", "polygon"], [84, 0, 0, "-", "util"]], "sympy.geometry.curve": [[76, 1, 1, "", "Curve"]], "sympy.geometry.curve.Curve": [[76, 3, 1, "", "ambient_dimension"], [76, 2, 1, "", "arbitrary_point"], [76, 3, 1, "", "free_symbols"], [76, 3, 1, "", "functions"], [76, 3, 1, "", "length"], [76, 3, 1, "", "limits"], [76, 3, 1, "", "parameter"], [76, 2, 1, "", "plot_interval"], [76, 2, 1, "", "rotate"], [76, 2, 1, "", "scale"], [76, 2, 1, "", "translate"]], "sympy.geometry.ellipse": [[77, 1, 1, "", "Circle"], [77, 1, 1, "", "Ellipse"]], "sympy.geometry.ellipse.Circle": [[77, 3, 1, "", "circumference"], [77, 2, 1, "", "equation"], [77, 2, 1, "", "intersection"], [77, 3, 1, "", "radius"], [77, 2, 1, "", "reflect"], [77, 2, 1, "", "scale"], [77, 3, 1, "", "vradius"]], "sympy.geometry.ellipse.Ellipse": [[77, 3, 1, "", "apoapsis"], [77, 2, 1, "", "arbitrary_point"], [77, 3, 1, "", "area"], [77, 2, 1, "", "auxiliary_circle"], [77, 3, 1, "", "bounds"], [77, 3, 1, "", "center"], [77, 3, 1, "", "circumference"], [77, 2, 1, "", "director_circle"], [77, 3, 1, "", "eccentricity"], [77, 2, 1, "", "encloses_point"], [77, 2, 1, "", "equation"], [77, 2, 1, "", "evolute"], [77, 3, 1, "", "foci"], [77, 3, 1, "", "focus_distance"], [77, 3, 1, "", "hradius"], [77, 2, 1, "", "intersection"], [77, 2, 1, "", "is_tangent"], [77, 3, 1, "", "major"], [77, 3, 1, "", "minor"], [77, 2, 1, "", "normal_lines"], [77, 3, 1, "", "periapsis"], [77, 2, 1, "", "plot_interval"], [77, 2, 1, "", "polar_second_moment_of_area"], [77, 2, 1, "", "random_point"], [77, 2, 1, "", "reflect"], [77, 2, 1, "", "rotate"], [77, 2, 1, "", "scale"], [77, 2, 1, "", "second_moment_of_area"], [77, 2, 1, "", "section_modulus"], [77, 3, 1, "", "semilatus_rectum"], [77, 2, 1, "", "tangent_lines"], [77, 3, 1, "", "vradius"]], "sympy.geometry.entity": [[78, 1, 1, "", "GeometryEntity"]], "sympy.geometry.entity.GeometryEntity": [[78, 3, 1, "", "ambient_dimension"], [78, 3, 1, "", "bounds"], [78, 2, 1, "", "encloses"], [78, 2, 1, "", "intersection"], [78, 2, 1, "", "is_similar"], [78, 2, 1, "", "parameter_value"], [78, 2, 1, "", "reflect"], [78, 2, 1, "", "rotate"], [78, 2, 1, "", "scale"], [78, 2, 1, "", "translate"]], "sympy.geometry.line": [[80, 1, 1, "", "Line"], [80, 1, 1, "", "Line2D"], [80, 1, 1, "", "Line3D"], [80, 1, 1, "", "LinearEntity"], [80, 1, 1, "", "LinearEntity2D"], [80, 1, 1, "", "LinearEntity3D"], [80, 1, 1, "", "Ray"], [80, 1, 1, "", "Ray2D"], [80, 1, 1, "", "Ray3D"], [80, 1, 1, "", "Segment"], [80, 1, 1, "", "Segment2D"], [80, 1, 1, "", "Segment3D"]], "sympy.geometry.line.Line": [[80, 2, 1, "", "contains"], [80, 2, 1, "", "distance"], [80, 2, 1, "", "equals"], [80, 2, 1, "", "plot_interval"]], "sympy.geometry.line.Line2D": [[80, 3, 1, "", "coefficients"], [80, 2, 1, "", "equation"]], "sympy.geometry.line.Line3D": [[80, 2, 1, "", "distance"], [80, 2, 1, "", "equation"]], "sympy.geometry.line.LinearEntity": [[80, 3, 1, "", "ambient_dimension"], [80, 2, 1, "", "angle_between"], [80, 2, 1, "", "arbitrary_point"], [80, 2, 1, "", "are_concurrent"], [80, 2, 1, "", "bisectors"], [80, 2, 1, "", "contains"], [80, 3, 1, "", "direction"], [80, 2, 1, "", "intersection"], [80, 2, 1, "", "is_parallel"], [80, 2, 1, "", "is_perpendicular"], [80, 2, 1, "", "is_similar"], [80, 3, 1, "", "length"], [80, 3, 1, "", "p1"], [80, 3, 1, "", "p2"], [80, 2, 1, "", "parallel_line"], [80, 2, 1, "", "perpendicular_line"], [80, 2, 1, "", "perpendicular_segment"], [80, 3, 1, "", "points"], [80, 2, 1, "", "projection"], [80, 2, 1, "", "random_point"], [80, 2, 1, "", "smallest_angle_between"]], "sympy.geometry.line.LinearEntity2D": [[80, 3, 1, "", "bounds"], [80, 2, 1, "", "perpendicular_line"], [80, 3, 1, "", "slope"]], "sympy.geometry.line.LinearEntity3D": [[80, 3, 1, "", "direction_cosine"], [80, 3, 1, "", "direction_ratio"]], "sympy.geometry.line.Ray": [[80, 2, 1, "", "contains"], [80, 2, 1, "", "distance"], [80, 2, 1, "", "equals"], [80, 2, 1, "", "plot_interval"], [80, 3, 1, "", "source"]], "sympy.geometry.line.Ray2D": [[80, 2, 1, "", "closing_angle"], [80, 3, 1, "", "xdirection"], [80, 3, 1, "", "ydirection"]], "sympy.geometry.line.Ray3D": [[80, 3, 1, "", "xdirection"], [80, 3, 1, "", "ydirection"], [80, 3, 1, "", "zdirection"]], "sympy.geometry.line.Segment": [[80, 2, 1, "", "contains"], [80, 2, 1, "", "distance"], [80, 2, 1, "", "equals"], [80, 3, 1, "", "length"], [80, 3, 1, "", "midpoint"], [80, 2, 1, "", "perpendicular_bisector"], [80, 2, 1, "", "plot_interval"]], "sympy.geometry.plane": [[81, 1, 1, "", "Plane"]], "sympy.geometry.plane.Plane": [[81, 2, 1, "", "angle_between"], [81, 2, 1, "", "arbitrary_point"], [81, 2, 1, "", "are_concurrent"], [81, 2, 1, "", "distance"], [81, 2, 1, "", "equals"], [81, 2, 1, "", "equation"], [81, 2, 1, "", "intersection"], [81, 2, 1, "", "is_coplanar"], [81, 2, 1, "", "is_parallel"], [81, 2, 1, "", "is_perpendicular"], [81, 3, 1, "", "normal_vector"], [81, 3, 1, "", "p1"], [81, 2, 1, "", "parallel_plane"], [81, 2, 1, "", "parameter_value"], [81, 2, 1, "", "perpendicular_line"], [81, 2, 1, "", "perpendicular_plane"], [81, 2, 1, "", "projection"], [81, 2, 1, "", "projection_line"], [81, 2, 1, "", "random_point"]], "sympy.geometry.point": [[82, 1, 1, "", "Point"], [82, 1, 1, "", "Point2D"], [82, 1, 1, "", "Point3D"]], "sympy.geometry.point.Point": [[82, 2, 1, "", "affine_rank"], [82, 3, 1, "", "ambient_dimension"], [82, 2, 1, "", "are_coplanar"], [82, 2, 1, "", "canberra_distance"], [82, 2, 1, "", "distance"], [82, 2, 1, "", "dot"], [82, 2, 1, "", "equals"], [82, 2, 1, "", "intersection"], [82, 2, 1, "", "is_collinear"], [82, 2, 1, "", "is_concyclic"], [82, 3, 1, "", "is_nonzero"], [82, 2, 1, "", "is_scalar_multiple"], [82, 3, 1, "", "is_zero"], [82, 3, 1, "", "length"], [82, 2, 1, "", "midpoint"], [82, 3, 1, "", "origin"], [82, 3, 1, "", "orthogonal_direction"], [82, 2, 1, "", "project"], [82, 2, 1, "", "taxicab_distance"], [82, 3, 1, "", "unit"]], "sympy.geometry.point.Point2D": [[82, 3, 1, "", "bounds"], [82, 3, 1, "", "coordinates"], [82, 2, 1, "", "rotate"], [82, 2, 1, "", "scale"], [82, 2, 1, "", "transform"], [82, 2, 1, "", "translate"], [82, 3, 1, "", "x"], [82, 3, 1, "", "y"]], "sympy.geometry.point.Point3D": [[82, 2, 1, "", "are_collinear"], [82, 3, 1, "", "coordinates"], [82, 2, 1, "", "direction_cosine"], [82, 2, 1, "", "direction_ratio"], [82, 2, 1, "", "intersection"], [82, 2, 1, "", "scale"], [82, 2, 1, "", "transform"], [82, 2, 1, "", "translate"], [82, 3, 1, "", "x"], [82, 3, 1, "", "y"], [82, 3, 1, "", "z"]], "sympy.geometry.polygon": [[83, 1, 1, "", "Polygon"], [83, 1, 1, "", "RegularPolygon"], [83, 1, 1, "", "Triangle"]], "sympy.geometry.polygon.Polygon": [[83, 3, 1, "", "angles"], [83, 2, 1, "", "arbitrary_point"], [83, 3, 1, "", "area"], [83, 2, 1, "", "bisectors"], [83, 3, 1, "", "bounds"], [83, 3, 1, "", "centroid"], [83, 2, 1, "", "cut_section"], [83, 2, 1, "", "distance"], [83, 2, 1, "", "encloses_point"], [83, 2, 1, "", "first_moment_of_area"], [83, 2, 1, "", "intersection"], [83, 2, 1, "", "is_convex"], [83, 3, 1, "", "perimeter"], [83, 2, 1, "", "plot_interval"], [83, 2, 1, "", "polar_second_moment_of_area"], [83, 2, 1, "", "second_moment_of_area"], [83, 2, 1, "", "section_modulus"], [83, 3, 1, "", "sides"], [83, 3, 1, "", "vertices"]], "sympy.geometry.polygon.RegularPolygon": [[83, 3, 1, "", "angles"], [83, 3, 1, "", "apothem"], [83, 3, 1, "", "area"], [83, 3, 1, "", "args"], [83, 3, 1, "", "center"], [83, 3, 1, "", "centroid"], [83, 3, 1, "", "circumcenter"], [83, 3, 1, "", "circumcircle"], [83, 3, 1, "", "circumradius"], [83, 2, 1, "", "encloses_point"], [83, 3, 1, "", "exterior_angle"], [83, 3, 1, "", "incircle"], [83, 3, 1, "", "inradius"], [83, 3, 1, "", "interior_angle"], [83, 3, 1, "", "length"], [83, 3, 1, "", "radius"], [83, 2, 1, "", "reflect"], [83, 2, 1, "", "rotate"], [83, 3, 1, "", "rotation"], [83, 2, 1, "", "scale"], [83, 2, 1, "", "spin"], [83, 3, 1, "", "vertices"]], "sympy.geometry.polygon.Triangle": [[83, 3, 1, "", "altitudes"], [83, 2, 1, "", "bisectors"], [83, 3, 1, "", "circumcenter"], [83, 3, 1, "", "circumcircle"], [83, 3, 1, "", "circumradius"], [83, 3, 1, "", "eulerline"], [83, 3, 1, "", "excenters"], [83, 3, 1, "", "exradii"], [83, 3, 1, "", "incenter"], [83, 3, 1, "", "incircle"], [83, 3, 1, "", "inradius"], [83, 2, 1, "", "is_equilateral"], [83, 2, 1, "", "is_isosceles"], [83, 2, 1, "", "is_right"], [83, 2, 1, "", "is_scalene"], [83, 2, 1, "", "is_similar"], [83, 3, 1, "", "medial"], [83, 3, 1, "", "medians"], [83, 3, 1, "", "nine_point_circle"], [83, 3, 1, "", "orthocenter"], [83, 3, 1, "", "vertices"]], "sympy.geometry.util": [[84, 4, 1, "", "are_similar"], [84, 4, 1, "", "centroid"], [84, 4, 1, "", "convex_hull"], [84, 4, 1, "", "idiff"], [84, 4, 1, "", "intersection"]], "sympy.holonomic.holonomic": [[90, 1, 1, "", "DifferentialOperator"], [90, 1, 1, "", "DifferentialOperatorAlgebra"], [90, 4, 1, "", "DifferentialOperators"], [90, 1, 1, "", "HolonomicFunction"], [88, 4, 1, "", "_convert_poly_rat_alg"], [88, 4, 1, "", "_create_table"], [86, 4, 1, "", "expr_to_holonomic"], [86, 4, 1, "", "from_hyper"], [86, 4, 1, "", "from_meijerg"]], "sympy.holonomic.holonomic.DifferentialOperator": [[90, 2, 1, "", "is_singular"]], "sympy.holonomic.holonomic.HolonomicFunction": [[89, 2, 1, "", "composition"], [89, 2, 1, "", "diff"], [89, 2, 1, "", "evalf"], [89, 2, 1, "", "integrate"], [89, 2, 1, "", "series"], [89, 2, 1, "", "to_expr"], [89, 2, 1, "", "to_hyper"], [89, 2, 1, "", "to_meijerg"], [89, 2, 1, "", "to_sequence"]], "sympy.integrals.deltafunctions": [[94, 4, 1, "", "deltaintegrate"]], "sympy.integrals.heurisch": [[94, 4, 1, "", "components"], [94, 4, 1, "", "heurisch"]], "sympy.integrals.integrals": [[94, 1, 1, "", "Integral"], [94, 4, 1, "", "integrate"], [94, 4, 1, "", "line_integrate"]], "sympy.integrals.integrals.Integral": [[94, 2, 1, "", "as_sum"], [94, 2, 1, "", "doit"], [94, 3, 1, "", "free_symbols"], [94, 6, 1, "", "is_commutative"], [94, 2, 1, "", "principal_value"], [94, 2, 1, "", "transform"]], "sympy.integrals": [[94, 0, 0, "-", "intpoly"], [92, 0, 0, "-", "meijerint"], [92, 0, 0, "-", "meijerint_doc"], [94, 0, 0, "-", "transforms"]], "sympy.integrals.intpoly": [[94, 4, 1, "", "polytope_integrate"]], "sympy.integrals.manualintegrate": [[94, 4, 1, "", "integral_steps"], [94, 4, 1, "", "manualintegrate"]], "sympy.integrals.meijerint": [[92, 7, 1, "", "_CoeffExpValueError"], [92, 4, 1, "", "_check_antecedents"], [92, 4, 1, "", "_check_antecedents_1"], [92, 4, 1, "", "_check_antecedents_inversion"], [92, 4, 1, "", "_condsimp"], [92, 4, 1, "", "_create_lookup_table"], [92, 4, 1, "", "_dummy"], [92, 4, 1, "", "_dummy_"], [92, 4, 1, "", "_eval_cond"], [92, 4, 1, "", "_exponents"], [92, 4, 1, "", "_find_splitting_points"], [92, 4, 1, "", "_flip_g"], [92, 4, 1, "", "_functions"], [92, 4, 1, "", "_get_coeff_exp"], [92, 4, 1, "", "_guess_expansion"], [92, 4, 1, "", "_inflate_fox_h"], [92, 4, 1, "", "_inflate_g"], [92, 4, 1, "", "_int0oo"], [92, 4, 1, "", "_int0oo_1"], [92, 4, 1, "", "_int_inversion"], [92, 4, 1, "", "_is_analytic"], [92, 4, 1, "", "_meijerint_definite_2"], [92, 4, 1, "", "_meijerint_definite_3"], [92, 4, 1, "", "_meijerint_definite_4"], [92, 4, 1, "", "_meijerint_indefinite_1"], [92, 4, 1, "", "_mul_args"], [92, 4, 1, "", "_mul_as_two_parts"], [92, 4, 1, "", "_my_principal_branch"], [92, 4, 1, "", "_mytype"], [92, 4, 1, "", "_rewrite1"], [92, 4, 1, "", "_rewrite2"], [92, 4, 1, "", "_rewrite_inversion"], [92, 4, 1, "", "_rewrite_saxena"], [92, 4, 1, "", "_rewrite_saxena_1"], [92, 4, 1, "", "_rewrite_single"], [92, 4, 1, "", "_split_mul"], [92, 4, 1, "", "meijerint_definite"], [92, 4, 1, "", "meijerint_indefinite"], [92, 4, 1, "", "meijerint_inversion"]], "sympy.integrals.quadrature": [[94, 4, 1, "", "gauss_chebyshev_t"], [94, 4, 1, "", "gauss_chebyshev_u"], [94, 4, 1, "", "gauss_gen_laguerre"], [94, 4, 1, "", "gauss_hermite"], [94, 4, 1, "", "gauss_jacobi"], [94, 4, 1, "", "gauss_laguerre"], [94, 4, 1, "", "gauss_legendre"], [94, 4, 1, "", "gauss_lobatto"]], "sympy.integrals.rationaltools": [[94, 4, 1, "", "ratint"], [94, 4, 1, "", "ratint_logpart"], [94, 4, 1, "", "ratint_ratpart"]], "sympy.integrals.risch": [[94, 1, 1, "", "NonElementaryIntegral"], [94, 4, 1, "", "risch_integrate"]], "sympy.integrals.singularityfunctions": [[94, 4, 1, "", "singularityintegrate"]], "sympy.integrals.transforms": [[94, 1, 1, "", "CosineTransform"], [94, 1, 1, "", "FourierTransform"], [94, 1, 1, "", "HankelTransform"], [94, 1, 1, "", "IntegralTransform"], [94, 7, 1, "", "IntegralTransformError"], [94, 1, 1, "", "InverseCosineTransform"], [94, 1, 1, "", "InverseFourierTransform"], [94, 1, 1, "", "InverseHankelTransform"], [94, 1, 1, "", "InverseLaplaceTransform"], [94, 1, 1, "", "InverseMellinTransform"], [94, 1, 1, "", "InverseSineTransform"], [94, 1, 1, "", "LaplaceTransform"], [94, 1, 1, "", "MellinTransform"], [94, 1, 1, "", "SineTransform"], [94, 4, 1, "", "_fourier_transform"], [94, 4, 1, "", "cosine_transform"], [94, 4, 1, "", "fourier_transform"], [94, 4, 1, "", "hankel_transform"], [94, 4, 1, "", "inverse_cosine_transform"], [94, 4, 1, "", "inverse_fourier_transform"], [94, 4, 1, "", "inverse_hankel_transform"], [94, 4, 1, "", "inverse_laplace_transform"], [94, 4, 1, "", "inverse_mellin_transform"], [94, 4, 1, "", "inverse_sine_transform"], [94, 4, 1, "", "laplace_correspondence"], [94, 4, 1, "", "laplace_initial_conds"], [94, 4, 1, "", "laplace_transform"], [94, 4, 1, "", "mellin_transform"], [94, 4, 1, "", "sine_transform"]], "sympy.integrals.transforms.IntegralTransform": [[94, 2, 1, "", "doit"], [94, 3, 1, "", "function"], [94, 3, 1, "", "function_variable"], [94, 3, 1, "", "transform_variable"]], "sympy.integrals.transforms.InverseLaplaceTransform": [[94, 2, 1, "", "doit"]], "sympy.integrals.transforms.LaplaceTransform": [[94, 2, 1, "", "doit"]], "sympy.integrals.trigonometry": [[94, 4, 1, "", "trigintegrate"]], "sympy.interactive": [[95, 0, 0, "-", "printing"], [95, 0, 0, "-", "session"]], "sympy.interactive.printing": [[95, 4, 1, "", "init_printing"]], "sympy.interactive.session": [[95, 4, 1, "", "enable_automatic_int_sympification"], [95, 4, 1, "", "enable_automatic_symbols"], [95, 4, 1, "", "init_ipython_session"], [95, 4, 1, "", "init_python_session"], [95, 4, 1, "", "init_session"], [95, 4, 1, "", "int_to_Integer"]], "sympy.liealgebras.cartan_matrix": [[96, 4, 1, "", "CartanMatrix"]], "sympy.liealgebras.cartan_type": [[96, 1, 1, "", "CartanType_generator"], [96, 1, 1, "", "Standard_Cartan"]], "sympy.liealgebras.cartan_type.Standard_Cartan": [[96, 2, 1, "", "rank"], [96, 2, 1, "", "series"]], "sympy.liealgebras.dynkin_diagram": [[96, 4, 1, "", "DynkinDiagram"]], "sympy.liealgebras.root_system": [[96, 1, 1, "", "RootSystem"]], "sympy.liealgebras.root_system.RootSystem": [[96, 2, 1, "", "add_as_roots"], [96, 2, 1, "", "add_simple_roots"], [96, 2, 1, "", "all_roots"], [96, 2, 1, "", "cartan_matrix"], [96, 2, 1, "", "dynkin_diagram"], [96, 2, 1, "", "root_space"], [96, 2, 1, "", "simple_roots"]], "sympy.liealgebras.type_a": [[96, 1, 1, "", "TypeA"]], "sympy.liealgebras.type_a.TypeA": [[96, 2, 1, "", "basic_root"], [96, 2, 1, "", "basis"], [96, 2, 1, "", "cartan_matrix"], [96, 2, 1, "", "dimension"], [96, 2, 1, "", "highest_root"], [96, 2, 1, "", "lie_algebra"], [96, 2, 1, "", "positive_roots"], [96, 2, 1, "", "roots"], [96, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_b": [[96, 1, 1, "", "TypeB"]], "sympy.liealgebras.type_b.TypeB": [[96, 2, 1, "", "basic_root"], [96, 2, 1, "", "basis"], [96, 2, 1, "", "cartan_matrix"], [96, 2, 1, "", "dimension"], [96, 2, 1, "", "lie_algebra"], [96, 2, 1, "", "positive_roots"], [96, 2, 1, "", "roots"], [96, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_c": [[96, 1, 1, "", "TypeC"]], "sympy.liealgebras.type_c.TypeC": [[96, 2, 1, "", "basic_root"], [96, 2, 1, "", "basis"], [96, 2, 1, "", "cartan_matrix"], [96, 2, 1, "", "dimension"], [96, 2, 1, "", "lie_algebra"], [96, 2, 1, "", "positive_roots"], [96, 2, 1, "", "roots"], [96, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_d": [[96, 1, 1, "", "TypeD"]], "sympy.liealgebras.type_d.TypeD": [[96, 2, 1, "", "basic_root"], [96, 2, 1, "", "basis"], [96, 2, 1, "", "cartan_matrix"], [96, 2, 1, "", "dimension"], [96, 2, 1, "", "lie_algebra"], [96, 2, 1, "", "positive_roots"], [96, 2, 1, "", "roots"], [96, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_e": [[96, 1, 1, "", "TypeE"]], "sympy.liealgebras.type_e.TypeE": [[96, 2, 1, "", "basic_root"], [96, 2, 1, "", "basis"], [96, 2, 1, "", "cartan_matrix"], [96, 2, 1, "", "dimension"], [96, 2, 1, "", "positive_roots"], [96, 2, 1, "", "roots"], [96, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_f": [[96, 1, 1, "", "TypeF"]], "sympy.liealgebras.type_f.TypeF": [[96, 2, 1, "", "basic_root"], [96, 2, 1, "", "basis"], [96, 2, 1, "", "cartan_matrix"], [96, 2, 1, "", "dimension"], [96, 2, 1, "", "positive_roots"], [96, 2, 1, "", "roots"], [96, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_g": [[96, 1, 1, "", "TypeG"]], "sympy.liealgebras.type_g.TypeG": [[96, 2, 1, "", "basis"], [96, 2, 1, "", "cartan_matrix"], [96, 2, 1, "", "dimension"], [96, 2, 1, "", "positive_roots"], [96, 2, 1, "", "roots"], [96, 2, 1, "", "simple_root"]], "sympy.liealgebras.weyl_group": [[96, 1, 1, "", "WeylGroup"]], "sympy.liealgebras.weyl_group.WeylGroup": [[96, 2, 1, "", "coxeter_diagram"], [96, 2, 1, "", "delete_doubles"], [96, 2, 1, "", "element_order"], [96, 2, 1, "", "generators"], [96, 2, 1, "", "group_name"], [96, 2, 1, "", "group_order"], [96, 2, 1, "", "matrix_form"]], "sympy.logic.boolalg": [[97, 4, 1, "", "ANFform"], [97, 1, 1, "", "And"], [97, 1, 1, "", "Boolean"], [97, 1, 1, "", "BooleanFalse"], [97, 1, 1, "", "BooleanTrue"], [97, 1, 1, "", "Equivalent"], [97, 1, 1, "", "Exclusive"], [97, 1, 1, "", "ITE"], [97, 1, 1, "", "Implies"], [97, 1, 1, "", "Nand"], [97, 1, 1, "", "Nor"], [97, 1, 1, "", "Not"], [97, 1, 1, "", "Or"], [97, 4, 1, "", "POSform"], [97, 4, 1, "", "SOPform"], [97, 1, 1, "", "Xnor"], [97, 1, 1, "", "Xor"], [97, 4, 1, "", "anf_coeffs"], [97, 4, 1, "", "bool_map"], [97, 4, 1, "", "bool_maxterm"], [97, 4, 1, "", "bool_minterm"], [97, 4, 1, "", "bool_monomial"], [97, 4, 1, "", "distribute_and_over_or"], [97, 4, 1, "", "distribute_or_over_and"], [97, 4, 1, "", "distribute_xor_over_and"], [97, 4, 1, "", "eliminate_implications"], [97, 4, 1, "", "gateinputcount"], [97, 4, 1, "", "integer_to_term"], [97, 4, 1, "", "is_anf"], [97, 4, 1, "", "is_cnf"], [97, 4, 1, "", "is_dnf"], [97, 4, 1, "", "is_nnf"], [97, 4, 1, "", "simplify_logic"], [97, 4, 1, "", "term_to_integer"], [97, 4, 1, "", "to_anf"], [97, 4, 1, "", "to_cnf"], [97, 4, 1, "", "to_dnf"], [97, 4, 1, "", "to_int_repr"], [97, 4, 1, "", "to_nnf"], [97, 4, 1, "", "truth_table"]], "sympy.logic.boolalg.Boolean": [[97, 2, 1, "", "as_set"], [97, 2, 1, "", "equals"]], "sympy.logic.boolalg.BooleanFalse": [[97, 2, 1, "", "as_set"]], "sympy.logic.boolalg.BooleanTrue": [[97, 2, 1, "", "as_set"]], "sympy.logic": [[97, 0, 0, "-", "inference"]], "sympy.logic.inference": [[97, 4, 1, "", "satisfiable"]], "sympy.matrices": [[98, 0, 0, "-", "common"], [100, 0, 0, "-", "expressions"], [101, 0, 0, "-", "immutable"], [103, 0, 0, "-", "matrices"], [105, 0, 0, "-", "sparse"], [106, 0, 0, "-", "sparsetools"]], "sympy.matrices.common": [[98, 1, 1, "", "MatrixCommon"], [98, 1, 1, "", "MatrixKind"]], "sympy.matrices.common.MatrixCommon": [[98, 3, 1, "", "C"], [98, 3, 1, "", "H"], [98, 3, 1, "", "T"], [98, 2, 1, "", "__abs__"], [98, 2, 1, "", "__add__"], [98, 2, 1, "", "__getitem__"], [98, 2, 1, "", "__len__"], [98, 2, 1, "", "__mul__"], [98, 2, 1, "", "__pow__"], [98, 5, 1, "", "__weakref__"], [98, 2, 1, "", "adjoint"], [98, 2, 1, "", "applyfunc"], [98, 2, 1, "", "as_real_imag"], [98, 2, 1, "", "atoms"], [98, 2, 1, "", "col"], [98, 2, 1, "", "col_del"], [98, 2, 1, "", "col_insert"], [98, 2, 1, "", "col_join"], [98, 2, 1, "", "companion"], [98, 2, 1, "", "conjugate"], [98, 2, 1, "", "diag"], [98, 2, 1, "", "diagonal"], [98, 2, 1, "", "evalf"], [98, 2, 1, "", "expand"], [98, 2, 1, "", "extract"], [98, 2, 1, "", "eye"], [98, 3, 1, "", "free_symbols"], [98, 2, 1, "", "get_diag_blocks"], [98, 2, 1, "", "has"], [98, 2, 1, "", "hstack"], [98, 2, 1, "", "is_anti_symmetric"], [98, 2, 1, "", "is_diagonal"], [98, 3, 1, "", "is_hermitian"], [98, 3, 1, "", "is_lower"], [98, 3, 1, "", "is_lower_hessenberg"], [98, 3, 1, "", "is_square"], [98, 3, 1, "", "is_strongly_diagonally_dominant"], [98, 2, 1, "", "is_symbolic"], [98, 2, 1, "", "is_symmetric"], [98, 3, 1, "", "is_upper"], [98, 3, 1, "", "is_upper_hessenberg"], [98, 3, 1, "", "is_weakly_diagonally_dominant"], [98, 3, 1, "", "is_zero_matrix"], [98, 2, 1, "", "jordan_block"], [98, 2, 1, "", "lower_triangular"], [98, 2, 1, "", "multiply"], [98, 2, 1, "", "multiply_elementwise"], [98, 2, 1, "", "n"], [98, 2, 1, "", "ones"], [98, 2, 1, "", "permute"], [98, 2, 1, "", "permute_cols"], [98, 2, 1, "", "permute_rows"], [98, 2, 1, "", "pow"], [98, 2, 1, "", "refine"], [98, 2, 1, "", "replace"], [98, 2, 1, "", "reshape"], [98, 2, 1, "", "rmultiply"], [98, 2, 1, "", "rot90"], [98, 2, 1, "", "row"], [98, 2, 1, "", "row_del"], [98, 2, 1, "", "row_insert"], [98, 2, 1, "", "row_join"], [98, 3, 1, "", "shape"], [98, 2, 1, "", "simplify"], [98, 2, 1, "", "subs"], [98, 2, 1, "", "todod"], [98, 2, 1, "", "todok"], [98, 2, 1, "", "tolist"], [98, 2, 1, "", "trace"], [98, 2, 1, "", "transpose"], [98, 2, 1, "", "upper_triangular"], [98, 2, 1, "", "values"], [98, 2, 1, "", "vec"], [98, 2, 1, "", "vech"], [98, 2, 1, "", "vstack"], [98, 2, 1, "", "wilkinson"], [98, 2, 1, "", "xreplace"], [98, 2, 1, "", "zeros"]], "sympy.matrices.dense": [[99, 1, 1, "", "DenseMatrix"], [103, 4, 1, "", "GramSchmidt"], [99, 5, 1, "", "Matrix"], [99, 1, 1, "", "MutableDenseMatrix"], [103, 4, 1, "", "casoratian"], [103, 4, 1, "", "diag"], [103, 4, 1, "", "eye"], [103, 4, 1, "", "hessian"], [103, 4, 1, "", "jordan_cell"], [103, 4, 1, "", "list2numpy"], [103, 4, 1, "", "matrix2numpy"], [103, 4, 1, "", "matrix_multiply_elementwise"], [103, 4, 1, "", "ones"], [103, 4, 1, "", "randMatrix"], [103, 4, 1, "", "rot_axis1"], [103, 4, 1, "", "rot_axis2"], [103, 4, 1, "", "rot_axis3"], [103, 4, 1, "", "rot_ccw_axis1"], [103, 4, 1, "", "rot_ccw_axis2"], [103, 4, 1, "", "rot_ccw_axis3"], [103, 4, 1, "", "rot_givens"], [103, 4, 1, "", "symarray"], [103, 4, 1, "", "wronskian"], [103, 4, 1, "", "zeros"]], "sympy.matrices.dense.DenseMatrix": [[99, 2, 1, "", "LDLdecomposition"], [99, 2, 1, "", "as_immutable"], [99, 2, 1, "", "as_mutable"], [99, 2, 1, "", "cholesky"], [99, 2, 1, "", "lower_triangular_solve"], [99, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.dense.MutableDenseMatrix": [[99, 2, 1, "", "simplify"]], "sympy.matrices.expressions": [[100, 1, 1, "", "CompanionMatrix"], [100, 1, 1, "", "FunctionMatrix"], [100, 1, 1, "", "HadamardPower"], [100, 1, 1, "", "HadamardProduct"], [100, 1, 1, "", "Identity"], [100, 1, 1, "", "Inverse"], [100, 1, 1, "", "MatAdd"], [100, 1, 1, "", "MatMul"], [100, 1, 1, "", "MatPow"], [100, 1, 1, "", "MatrixExpr"], [100, 1, 1, "", "MatrixPermute"], [100, 1, 1, "", "MatrixSet"], [100, 1, 1, "", "MatrixSymbol"], [100, 1, 1, "", "PermutationMatrix"], [100, 1, 1, "", "Trace"], [100, 1, 1, "", "Transpose"], [100, 1, 1, "", "ZeroMatrix"], [100, 0, 0, "-", "blockmatrix"], [100, 4, 1, "", "hadamard_product"]], "sympy.matrices.expressions.MatrixExpr": [[100, 3, 1, "", "T"], [100, 2, 1, "", "as_coeff_Mul"], [100, 2, 1, "", "as_explicit"], [100, 2, 1, "", "as_mutable"], [100, 2, 1, "", "equals"], [100, 2, 1, "", "from_index_summation"]], "sympy.matrices.expressions.blockmatrix": [[100, 1, 1, "", "BlockDiagMatrix"], [100, 1, 1, "", "BlockMatrix"], [100, 4, 1, "", "block_collapse"]], "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix": [[100, 2, 1, "", "get_diag_blocks"]], "sympy.matrices.expressions.blockmatrix.BlockMatrix": [[100, 2, 1, "", "LDUdecomposition"], [100, 2, 1, "", "LUdecomposition"], [100, 2, 1, "", "UDLdecomposition"], [100, 2, 1, "", "schur"], [100, 2, 1, "", "transpose"]], "sympy.matrices.immutable": [[101, 1, 1, "", "ImmutableDenseMatrix"], [101, 5, 1, "", "ImmutableMatrix"], [105, 1, 1, "", "ImmutableSparseMatrix"]], "sympy.matrices.matrices": [[103, 1, 1, "", "MatrixBase"], [103, 1, 1, "", "MatrixCalculus"], [103, 1, 1, "", "MatrixDeterminant"], [103, 1, 1, "", "MatrixEigen"], [103, 1, 1, "", "MatrixError"], [103, 1, 1, "", "MatrixReductions"], [103, 1, 1, "", "MatrixSubspaces"], [103, 1, 1, "", "NonSquareMatrixError"], [103, 1, 1, "", "ShapeError"], [103, 4, 1, "", "a2idx"]], "sympy.matrices.matrices.MatrixBase": [[103, 3, 1, "", "D"], [103, 2, 1, "", "LDLdecomposition"], [103, 2, 1, "", "LDLsolve"], [103, 2, 1, "", "LUdecomposition"], [103, 2, 1, "", "LUdecompositionFF"], [103, 2, 1, "", "LUdecomposition_Simple"], [103, 2, 1, "", "LUsolve"], [103, 2, 1, "", "QRdecomposition"], [103, 2, 1, "", "QRsolve"], [103, 2, 1, "", "add"], [103, 2, 1, "", "analytic_func"], [103, 2, 1, "", "cholesky"], [103, 2, 1, "", "cholesky_solve"], [103, 2, 1, "", "condition_number"], [103, 2, 1, "", "connected_components"], [103, 2, 1, "", "connected_components_decomposition"], [103, 2, 1, "", "copy"], [103, 2, 1, "", "cramer_solve"], [103, 2, 1, "", "cross"], [103, 2, 1, "", "diagonal_solve"], [103, 2, 1, "", "dot"], [103, 2, 1, "", "dual"], [103, 2, 1, "", "exp"], [103, 2, 1, "", "gauss_jordan_solve"], [103, 2, 1, "", "hat"], [103, 2, 1, "", "inv"], [103, 2, 1, "", "inv_mod"], [103, 2, 1, "", "inverse_ADJ"], [103, 2, 1, "", "inverse_BLOCK"], [103, 2, 1, "", "inverse_CH"], [103, 2, 1, "", "inverse_GE"], [103, 2, 1, "", "inverse_LDL"], [103, 2, 1, "", "inverse_LU"], [103, 2, 1, "", "inverse_QR"], [103, 2, 1, "", "irregular"], [103, 2, 1, "", "is_nilpotent"], [103, 2, 1, "", "key2bounds"], [103, 2, 1, "", "key2ij"], [103, 2, 1, "", "log"], [103, 2, 1, "", "lower_triangular_solve"], [103, 2, 1, "", "norm"], [103, 2, 1, "", "normalized"], [103, 2, 1, "", "pinv"], [103, 2, 1, "", "pinv_solve"], [103, 2, 1, "", "print_nonzero"], [103, 2, 1, "", "project"], [103, 2, 1, "", "rank_decomposition"], [103, 2, 1, "", "singular_value_decomposition"], [103, 2, 1, "", "solve"], [103, 2, 1, "", "solve_least_squares"], [103, 2, 1, "", "strongly_connected_components"], [103, 2, 1, "", "strongly_connected_components_decomposition"], [103, 2, 1, "", "table"], [103, 2, 1, "", "upper_hessenberg_decomposition"], [103, 2, 1, "", "upper_triangular_solve"], [103, 2, 1, "", "vee"]], "sympy.matrices.matrices.MatrixCalculus": [[103, 2, 1, "", "diff"], [103, 2, 1, "", "integrate"], [103, 2, 1, "", "jacobian"], [103, 2, 1, "", "limit"]], "sympy.matrices.matrices.MatrixDeterminant": [[103, 2, 1, "", "adjugate"], [103, 2, 1, "", "charpoly"], [103, 2, 1, "", "cofactor"], [103, 2, 1, "", "cofactor_matrix"], [103, 2, 1, "", "det"], [103, 2, 1, "", "minor"], [103, 2, 1, "", "minor_submatrix"], [103, 2, 1, "", "per"]], "sympy.matrices.matrices.MatrixEigen": [[103, 2, 1, "", "bidiagonal_decomposition"], [103, 2, 1, "", "bidiagonalize"], [103, 2, 1, "", "diagonalize"], [103, 2, 1, "", "eigenvals"], [103, 2, 1, "", "eigenvects"], [103, 2, 1, "", "is_diagonalizable"], [103, 3, 1, "", "is_indefinite"], [103, 3, 1, "", "is_negative_definite"], [103, 3, 1, "", "is_negative_semidefinite"], [103, 3, 1, "", "is_positive_definite"], [103, 3, 1, "", "is_positive_semidefinite"], [103, 2, 1, "", "jordan_form"], [103, 2, 1, "", "left_eigenvects"], [103, 2, 1, "", "singular_values"]], "sympy.matrices.matrices.MatrixReductions": [[103, 2, 1, "", "echelon_form"], [103, 2, 1, "", "elementary_col_op"], [103, 2, 1, "", "elementary_row_op"], [103, 3, 1, "", "is_echelon"], [103, 2, 1, "", "rank"], [103, 2, 1, "", "rref"]], "sympy.matrices.matrices.MatrixSubspaces": [[103, 2, 1, "", "columnspace"], [103, 2, 1, "", "nullspace"], [103, 2, 1, "", "orthogonalize"], [103, 2, 1, "", "rowspace"]], "sympy.matrices.normalforms": [[104, 4, 1, "", "hermite_normal_form"], [104, 4, 1, "", "smith_normal_form"]], "sympy.matrices.sparse": [[105, 1, 1, "", "MutableSparseMatrix"], [105, 5, 1, "", "SparseMatrix"]], "sympy.matrices.sparsetools": [[106, 2, 1, "", "_csrtodok"], [106, 2, 1, "", "_doktocsr"], [106, 2, 1, "", "banded"]], "sympy.ntheory": [[107, 0, 0, "-", "bbp_pi"], [107, 0, 0, "-", "continued_fraction"], [107, 0, 0, "-", "digits"], [107, 0, 0, "-", "ecm"], [107, 0, 0, "-", "egyptian_fraction"], [107, 0, 0, "-", "factor_"], [107, 0, 0, "-", "generate"], [107, 1, 1, "", "mobius"], [107, 0, 0, "-", "modular"], [107, 0, 0, "-", "multinomial"], [107, 0, 0, "-", "partitions_"], [107, 0, 0, "-", "primetest"], [107, 0, 0, "-", "qs"], [107, 0, 0, "-", "residue_ntheory"]], "sympy.ntheory.bbp_pi": [[107, 4, 1, "", "pi_hex_digits"]], "sympy.ntheory.continued_fraction": [[107, 4, 1, "", "continued_fraction"], [107, 4, 1, "", "continued_fraction_convergents"], [107, 4, 1, "", "continued_fraction_iterator"], [107, 4, 1, "", "continued_fraction_periodic"], [107, 4, 1, "", "continued_fraction_reduce"]], "sympy.ntheory.digits": [[107, 4, 1, "", "count_digits"], [107, 4, 1, "", "digits"], [107, 4, 1, "", "is_palindromic"]], "sympy.ntheory.ecm": [[107, 4, 1, "", "ecm"]], "sympy.ntheory.egyptian_fraction": [[107, 4, 1, "", "egyptian_fraction"]], "sympy.ntheory.factor_": [[107, 4, 1, "", "abundance"], [107, 4, 1, "", "antidivisor_count"], [107, 4, 1, "", "antidivisors"], [107, 4, 1, "", "core"], [107, 4, 1, "", "digits"], [107, 4, 1, "", "divisor_count"], [107, 1, 1, "", "divisor_sigma"], [107, 4, 1, "", "divisors"], [107, 4, 1, "", "factorint"], [107, 4, 1, "", "factorrat"], [107, 4, 1, "", "is_abundant"], [107, 4, 1, "", "is_amicable"], [107, 4, 1, "", "is_deficient"], [107, 4, 1, "", "is_mersenne_prime"], [107, 4, 1, "", "is_perfect"], [107, 4, 1, "", "mersenne_prime_exponent"], [107, 4, 1, "", "multiplicity"], [107, 4, 1, "", "perfect_power"], [107, 4, 1, "", "pollard_pm1"], [107, 4, 1, "", "pollard_rho"], [107, 4, 1, "", "primefactors"], [107, 1, 1, "", "primenu"], [107, 1, 1, "", "primeomega"], [107, 4, 1, "", "proper_divisor_count"], [107, 4, 1, "", "proper_divisors"], [107, 1, 1, "", "reduced_totient"], [107, 4, 1, "", "smoothness"], [107, 4, 1, "", "smoothness_p"], [107, 1, 1, "", "totient"], [107, 4, 1, "", "trailing"], [107, 4, 1, "", "udivisor_count"], [107, 1, 1, "", "udivisor_sigma"], [107, 4, 1, "", "udivisors"]], "sympy.ntheory.generate": [[107, 1, 1, "", "Sieve"], [107, 4, 1, "", "composite"], [107, 4, 1, "", "compositepi"], [107, 4, 1, "", "cycle_length"], [107, 4, 1, "", "nextprime"], [107, 4, 1, "", "prevprime"], [107, 4, 1, "", "prime"], [107, 4, 1, "", "primepi"], [107, 4, 1, "", "primerange"], [107, 4, 1, "", "primorial"], [107, 4, 1, "", "randprime"]], "sympy.ntheory.generate.Sieve": [[107, 2, 1, "", "extend"], [107, 2, 1, "", "extend_to_no"], [107, 2, 1, "", "mobiusrange"], [107, 2, 1, "", "primerange"], [107, 2, 1, "", "search"], [107, 2, 1, "", "totientrange"]], "sympy.ntheory.modular": [[107, 4, 1, "", "crt"], [107, 4, 1, "", "crt1"], [107, 4, 1, "", "crt2"], [107, 4, 1, "", "solve_congruence"], [107, 4, 1, "", "symmetric_residue"]], "sympy.ntheory.multinomial": [[107, 4, 1, "", "binomial_coefficients"], [107, 4, 1, "", "binomial_coefficients_list"], [107, 4, 1, "", "multinomial_coefficients"], [107, 4, 1, "", "multinomial_coefficients_iterator"]], "sympy.ntheory.partitions_": [[107, 4, 1, "", "npartitions"]], "sympy.ntheory.primetest": [[107, 4, 1, "", "is_euler_pseudoprime"], [107, 4, 1, "", "is_extra_strong_lucas_prp"], [107, 4, 1, "", "is_gaussian_prime"], [107, 4, 1, "", "is_lucas_prp"], [107, 4, 1, "", "is_square"], [107, 4, 1, "", "is_strong_lucas_prp"], [107, 4, 1, "", "isprime"], [107, 4, 1, "", "mr"]], "sympy.ntheory.qs": [[107, 4, 1, "", "qs"]], "sympy.ntheory.residue_ntheory": [[107, 4, 1, "", "binomial_mod"], [107, 4, 1, "", "discrete_log"], [107, 4, 1, "", "is_nthpow_residue"], [107, 4, 1, "", "is_primitive_root"], [107, 4, 1, "", "is_quad_residue"], [107, 4, 1, "", "jacobi_symbol"], [107, 4, 1, "", "kronecker_symbol"], [107, 4, 1, "", "legendre_symbol"], [107, 4, 1, "", "n_order"], [107, 4, 1, "", "nthroot_mod"], [107, 4, 1, "", "polynomial_congruence"], [107, 4, 1, "", "primitive_root"], [107, 4, 1, "", "quadratic_congruence"], [107, 4, 1, "", "quadratic_residues"], [107, 4, 1, "", "sqrt_mod"], [107, 4, 1, "", "sqrt_mod_iter"]], "sympy.parsing.latex": [[109, 1, 1, "", "LaTeXParsingError"], [109, 4, 1, "", "parse_latex"]], "sympy.parsing.mathematica": [[109, 4, 1, "", "parse_mathematica"]], "sympy.parsing.maxima": [[109, 4, 1, "", "parse_maxima"]], "sympy.parsing": [[109, 0, 0, "-", "sym_expr"]], "sympy.parsing.sym_expr": [[109, 1, 1, "", "SymPyExpression"]], "sympy.parsing.sym_expr.SymPyExpression": [[109, 2, 1, "", "convert_to_c"], [109, 2, 1, "", "convert_to_expr"], [109, 2, 1, "", "convert_to_fortran"], [109, 2, 1, "", "convert_to_python"], [109, 2, 1, "", "return_expr"]], "sympy.parsing.sympy_parser": [[109, 4, 1, "", "auto_number"], [109, 4, 1, "", "auto_symbol"], [109, 4, 1, "", "convert_xor"], [109, 4, 1, "", "eval_expr"], [109, 4, 1, "", "factorial_notation"], [109, 4, 1, "", "function_exponentiation"], [109, 4, 1, "", "implicit_application"], [109, 4, 1, "", "implicit_multiplication"], [109, 4, 1, "", "implicit_multiplication_application"], [109, 4, 1, "", "lambda_notation"], [109, 4, 1, "", "parse_expr"], [109, 4, 1, "", "rationalize"], [109, 4, 1, "", "repeated_decimals"], [109, 4, 1, "", "split_symbols"], [109, 4, 1, "", "split_symbols_custom"], [109, 6, 1, "", "standard_transformations"], [109, 4, 1, "", "stringify_expr"]], "sympy.physics.continuum_mechanics": [[110, 0, 0, "-", "beam"], [112, 0, 0, "-", "cable"], [114, 0, 0, "-", "truss"]], "sympy.physics.continuum_mechanics.beam": [[110, 1, 1, "", "Beam"], [110, 1, 1, "", "Beam3D"]], "sympy.physics.continuum_mechanics.beam.Beam": [[110, 3, 1, "", "applied_loads"], [110, 2, 1, "", "apply_load"], [110, 2, 1, "", "apply_support"], [110, 3, 1, "", "area"], [110, 2, 1, "", "bending_moment"], [110, 3, 1, "", "boundary_conditions"], [110, 3, 1, "", "cross_section"], [110, 2, 1, "", "deflection"], [110, 2, 1, "", "draw"], [110, 3, 1, "", "elastic_modulus"], [110, 3, 1, "", "ild_moment"], [110, 3, 1, "", "ild_reactions"], [110, 3, 1, "", "ild_shear"], [110, 2, 1, "", "join"], [110, 3, 1, "", "length"], [110, 3, 1, "", "load"], [110, 2, 1, "", "max_bmoment"], [110, 2, 1, "", "max_deflection"], [110, 2, 1, "", "max_shear_force"], [110, 2, 1, "", "plot_bending_moment"], [110, 2, 1, "", "plot_deflection"], [110, 2, 1, "", "plot_ild_moment"], [110, 2, 1, "", "plot_ild_reactions"], [110, 2, 1, "", "plot_ild_shear"], [110, 2, 1, "", "plot_loading_results"], [110, 2, 1, "", "plot_shear_force"], [110, 2, 1, "", "plot_shear_stress"], [110, 2, 1, "", "plot_slope"], [110, 2, 1, "", "point_cflexure"], [110, 3, 1, "", "reaction_loads"], [110, 2, 1, "", "remove_load"], [110, 3, 1, "", "second_moment"], [110, 2, 1, "", "shear_force"], [110, 2, 1, "", "shear_stress"], [110, 2, 1, "", "slope"], [110, 2, 1, "", "solve_for_ild_moment"], [110, 2, 1, "", "solve_for_ild_reactions"], [110, 2, 1, "", "solve_for_ild_shear"], [110, 2, 1, "", "solve_for_reaction_loads"], [110, 3, 1, "", "variable"]], "sympy.physics.continuum_mechanics.beam.Beam3D": [[110, 2, 1, "", "angular_deflection"], [110, 2, 1, "", "apply_load"], [110, 2, 1, "", "apply_moment_load"], [110, 3, 1, "", "area"], [110, 2, 1, "", "axial_force"], [110, 2, 1, "", "axial_stress"], [110, 2, 1, "", "bending_moment"], [110, 3, 1, "", "boundary_conditions"], [110, 2, 1, "", "deflection"], [110, 3, 1, "", "load_vector"], [110, 2, 1, "", "max_bending_moment"], [110, 2, 1, "", "max_bmoment"], [110, 2, 1, "", "max_deflection"], [110, 2, 1, "", "max_shear_force"], [110, 3, 1, "", "moment_load_vector"], [110, 2, 1, "", "plot_bending_moment"], [110, 2, 1, "", "plot_deflection"], [110, 2, 1, "", "plot_loading_results"], [110, 2, 1, "", "plot_shear_force"], [110, 2, 1, "", "plot_shear_stress"], [110, 2, 1, "", "plot_slope"], [110, 2, 1, "", "polar_moment"], [110, 3, 1, "", "second_moment"], [110, 2, 1, "", "shear_force"], [110, 3, 1, "", "shear_modulus"], [110, 2, 1, "", "shear_stress"], [110, 2, 1, "", "slope"], [110, 2, 1, "", "solve_for_reaction_loads"], [110, 2, 1, "", "solve_for_torsion"], [110, 2, 1, "", "torsional_moment"]], "sympy.physics.continuum_mechanics.cable": [[112, 1, 1, "", "Cable"]], "sympy.physics.continuum_mechanics.cable.Cable": [[112, 2, 1, "", "apply_length"], [112, 2, 1, "", "apply_load"], [112, 2, 1, "", "change_support"], [112, 3, 1, "", "left_support"], [112, 3, 1, "", "length"], [112, 3, 1, "", "loads"], [112, 3, 1, "", "loads_position"], [112, 3, 1, "", "reaction_loads"], [112, 2, 1, "", "remove_loads"], [112, 3, 1, "", "right_support"], [112, 3, 1, "", "supports"]], "sympy.physics.continuum_mechanics.truss": [[114, 1, 1, "", "Truss"]], "sympy.physics.continuum_mechanics.truss.Truss": [[114, 2, 1, "", "add_member"], [114, 2, 1, "", "add_node"], [114, 2, 1, "", "apply_load"], [114, 2, 1, "", "apply_support"], [114, 2, 1, "", "change_member_label"], [114, 2, 1, "", "change_node_label"], [114, 2, 1, "", "draw"], [114, 3, 1, "", "internal_forces"], [114, 3, 1, "", "loads"], [114, 3, 1, "", "member_lengths"], [114, 3, 1, "", "members"], [114, 3, 1, "", "node_labels"], [114, 3, 1, "", "node_positions"], [114, 3, 1, "", "nodes"], [114, 3, 1, "", "reaction_loads"], [114, 2, 1, "", "remove_load"], [114, 2, 1, "", "remove_member"], [114, 2, 1, "", "remove_node"], [114, 2, 1, "", "remove_support"], [114, 2, 1, "", "solve"], [114, 3, 1, "", "supports"]], "sympy.physics": [[117, 0, 0, "-", "control"], [120, 0, 0, "-", "hydrogen"], [121, 0, 0, "-", "matrices"], [142, 0, 0, "-", "mechanics"], [157, 0, 0, "-", "paulialgebra"], [158, 0, 0, "-", "qho_1d"], [182, 0, 0, "-", "secondquant"], [183, 0, 0, "-", "sho"], [199, 0, 0, "-", "vector"], [202, 0, 0, "-", "wigner"]], "sympy.physics.control.control_plots": [[116, 2, 1, "", "bode_magnitude_numerical_data"], [116, 2, 1, "", "bode_magnitude_plot"], [116, 2, 1, "", "bode_phase_numerical_data"], [116, 2, 1, "", "bode_phase_plot"], [116, 2, 1, "", "bode_plot"], [116, 2, 1, "", "impulse_response_numerical_data"], [116, 2, 1, "", "impulse_response_plot"], [116, 2, 1, "", "pole_zero_numerical_data"], [116, 2, 1, "", "pole_zero_plot"], [116, 2, 1, "", "ramp_response_numerical_data"], [116, 2, 1, "", "ramp_response_plot"], [116, 2, 1, "", "step_response_numerical_data"], [116, 2, 1, "", "step_response_plot"]], "sympy.physics.control": [[118, 0, 0, "-", "lti"]], "sympy.physics.control.lti": [[118, 1, 1, "", "Feedback"], [118, 1, 1, "", "MIMOFeedback"], [118, 1, 1, "", "MIMOParallel"], [118, 1, 1, "", "MIMOSeries"], [118, 1, 1, "", "Parallel"], [118, 1, 1, "", "Series"], [118, 1, 1, "", "TransferFunction"], [118, 1, 1, "", "TransferFunctionMatrix"], [118, 4, 1, "", "backward_diff"], [118, 4, 1, "", "bilinear"], [118, 4, 1, "", "forward_diff"], [118, 4, 1, "", "gbt"]], "sympy.physics.control.lti.Feedback": [[118, 2, 1, "", "doit"], [118, 3, 1, "", "sensitivity"], [118, 3, 1, "", "sign"], [118, 3, 1, "", "sys1"], [118, 3, 1, "", "sys2"], [118, 3, 1, "", "var"]], "sympy.physics.control.lti.MIMOFeedback": [[118, 2, 1, "", "doit"], [118, 3, 1, "", "sensitivity"], [118, 3, 1, "", "sign"], [118, 3, 1, "", "sys1"], [118, 3, 1, "", "sys2"], [118, 3, 1, "", "var"]], "sympy.physics.control.lti.MIMOParallel": [[118, 2, 1, "", "doit"], [118, 3, 1, "", "num_inputs"], [118, 3, 1, "", "num_outputs"], [118, 3, 1, "", "shape"], [118, 3, 1, "", "var"]], "sympy.physics.control.lti.MIMOSeries": [[118, 2, 1, "", "doit"], [118, 3, 1, "", "num_inputs"], [118, 3, 1, "", "num_outputs"], [118, 3, 1, "", "shape"], [118, 3, 1, "", "var"]], "sympy.physics.control.lti.Parallel": [[118, 2, 1, "", "doit"], [118, 3, 1, "", "is_biproper"], [118, 3, 1, "", "is_proper"], [118, 3, 1, "", "is_strictly_proper"], [118, 2, 1, "", "to_expr"], [118, 3, 1, "", "var"]], "sympy.physics.control.lti.Series": [[118, 2, 1, "", "doit"], [118, 3, 1, "", "is_biproper"], [118, 3, 1, "", "is_proper"], [118, 3, 1, "", "is_strictly_proper"], [118, 2, 1, "", "to_expr"], [118, 3, 1, "", "var"]], "sympy.physics.control.lti.TransferFunction": [[118, 2, 1, "", "dc_gain"], [118, 3, 1, "", "den"], [118, 2, 1, "", "expand"], [118, 2, 1, "", "from_coeff_lists"], [118, 2, 1, "", "from_rational_expression"], [118, 2, 1, "", "from_zpk"], [118, 3, 1, "", "is_biproper"], [118, 3, 1, "", "is_proper"], [118, 2, 1, "", "is_stable"], [118, 3, 1, "", "is_strictly_proper"], [118, 3, 1, "", "num"], [118, 2, 1, "", "poles"], [118, 2, 1, "", "to_expr"], [118, 3, 1, "", "var"], [118, 2, 1, "", "zeros"]], "sympy.physics.control.lti.TransferFunctionMatrix": [[118, 2, 1, "", "elem_poles"], [118, 2, 1, "", "elem_zeros"], [118, 2, 1, "", "expand"], [118, 2, 1, "", "from_Matrix"], [118, 3, 1, "", "num_inputs"], [118, 3, 1, "", "num_outputs"], [118, 3, 1, "", "shape"], [118, 2, 1, "", "transpose"], [118, 3, 1, "", "var"]], "sympy.physics.hep": [[119, 0, 0, "-", "gamma_matrices"]], "sympy.physics.hep.gamma_matrices": [[119, 4, 1, "", "extract_type_tens"], [119, 4, 1, "", "gamma_trace"], [119, 4, 1, "", "kahane_simplify"], [119, 4, 1, "", "simplify_gpgp"]], "sympy.physics.hydrogen": [[120, 4, 1, "", "E_nl"], [120, 4, 1, "", "E_nl_dirac"], [120, 4, 1, "", "Psi_nlm"], [120, 4, 1, "", "R_nl"]], "sympy.physics.matrices": [[121, 4, 1, "", "mdft"], [121, 4, 1, "", "mgamma"], [121, 4, 1, "", "msigma"], [121, 4, 1, "", "pat_matrix"]], "sympy.physics.mechanics._system": [[131, 1, 1, "", "System"]], "sympy.physics.mechanics._system.System": [[131, 3, 1, "", "actuators"], [131, 2, 1, "", "add_actuators"], [131, 2, 1, "", "add_bodies"], [131, 2, 1, "", "add_coordinates"], [131, 2, 1, "", "add_holonomic_constraints"], [131, 2, 1, "", "add_joints"], [131, 2, 1, "", "add_kdes"], [131, 2, 1, "", "add_loads"], [131, 2, 1, "", "add_nonholonomic_constraints"], [131, 2, 1, "", "add_speeds"], [131, 2, 1, "", "apply_gravity"], [131, 3, 1, "", "bodies"], [131, 3, 1, "", "eom_method"], [131, 3, 1, "", "forcing"], [131, 3, 1, "", "forcing_full"], [131, 2, 1, "", "form_eoms"], [131, 3, 1, "", "frame"], [131, 2, 1, "", "from_newtonian"], [131, 2, 1, "", "get_body"], [131, 2, 1, "", "get_joint"], [131, 3, 1, "", "holonomic_constraints"], [131, 3, 1, "", "joints"], [131, 3, 1, "", "kdes"], [131, 3, 1, "", "loads"], [131, 3, 1, "", "mass_matrix"], [131, 3, 1, "", "mass_matrix_full"], [131, 3, 1, "", "nonholonomic_constraints"], [131, 3, 1, "", "origin"], [131, 3, 1, "", "q"], [131, 3, 1, "", "q_dep"], [131, 3, 1, "", "q_ind"], [131, 2, 1, "", "rhs"], [131, 3, 1, "", "u"], [131, 3, 1, "", "u_dep"], [131, 3, 1, "", "u_ind"], [131, 2, 1, "", "validate_system"], [131, 3, 1, "", "x"], [131, 3, 1, "", "y"], [131, 3, 1, "", "z"]], "sympy.physics.mechanics": [[123, 0, 0, "-", "body"], [124, 4, 1, "", "find_dynamicsymbols"], [126, 0, 0, "-", "joint"], [126, 0, 0, "-", "jointsmethod"], [127, 0, 0, "-", "kane"], [127, 0, 0, "-", "lagrange"], [128, 0, 0, "-", "linearize"], [124, 4, 1, "", "msubs"], [131, 0, 0, "-", "system"]], "sympy.physics.mechanics.body": [[123, 1, 1, "", "Body"]], "sympy.physics.mechanics.body.Body": [[123, 2, 1, "", "ang_vel_in"], [123, 2, 1, "", "apply_force"], [123, 2, 1, "", "apply_torque"], [123, 2, 1, "", "clear_loads"], [123, 2, 1, "", "dcm"], [123, 3, 1, "", "inertia"], [123, 2, 1, "", "kinetic_energy"], [123, 2, 1, "", "masscenter_vel"], [123, 2, 1, "", "parallel_axis"], [123, 2, 1, "", "remove_load"], [123, 3, 1, "", "x"], [123, 3, 1, "", "y"], [123, 3, 1, "", "z"]], "sympy.physics.mechanics.functions": [[129, 4, 1, "", "Lagrangian"], [129, 4, 1, "", "angular_momentum"], [129, 4, 1, "", "center_of_mass"], [129, 4, 1, "", "find_dynamicsymbols"], [129, 4, 1, "", "kinetic_energy"], [129, 4, 1, "", "linear_momentum"], [129, 4, 1, "", "potential_energy"]], "sympy.physics.mechanics.inertia": [[129, 1, 1, "", "Inertia"], [129, 4, 1, "", "inertia"], [129, 4, 1, "", "inertia_of_point_mass"]], "sympy.physics.mechanics.inertia.Inertia": [[129, 2, 1, "", "from_inertia_scalars"]], "sympy.physics.mechanics.joint": [[126, 1, 1, "", "CylindricalJoint"], [126, 1, 1, "", "Joint"], [126, 1, 1, "", "PinJoint"], [126, 1, 1, "", "PlanarJoint"], [126, 1, 1, "", "PrismaticJoint"], [126, 1, 1, "", "SphericalJoint"], [126, 1, 1, "", "WeldJoint"]], "sympy.physics.mechanics.joint.CylindricalJoint": [[126, 3, 1, "", "joint_axis"], [126, 3, 1, "", "rotation_coordinate"], [126, 3, 1, "", "rotation_speed"], [126, 3, 1, "", "translation_coordinate"], [126, 3, 1, "", "translation_speed"]], "sympy.physics.mechanics.joint.Joint": [[126, 3, 1, "", "child"], [126, 3, 1, "", "child_axis"], [126, 3, 1, "", "child_point"], [126, 3, 1, "", "coordinates"], [126, 3, 1, "", "kdes"], [126, 3, 1, "", "name"], [126, 3, 1, "", "parent"], [126, 3, 1, "", "parent_axis"], [126, 3, 1, "", "parent_point"], [126, 3, 1, "", "speeds"]], "sympy.physics.mechanics.joint.PinJoint": [[126, 3, 1, "", "joint_axis"]], "sympy.physics.mechanics.joint.PlanarJoint": [[126, 3, 1, "", "planar_coordinates"], [126, 3, 1, "", "planar_speeds"], [126, 3, 1, "", "planar_vectors"], [126, 3, 1, "", "rotation_axis"], [126, 3, 1, "", "rotation_coordinate"], [126, 3, 1, "", "rotation_speed"]], "sympy.physics.mechanics.joint.PrismaticJoint": [[126, 3, 1, "", "joint_axis"]], "sympy.physics.mechanics.jointsmethod": [[126, 1, 1, "", "JointsMethod"]], "sympy.physics.mechanics.jointsmethod.JointsMethod": [[126, 3, 1, "", "bodies"], [126, 3, 1, "", "forcing"], [126, 3, 1, "", "forcing_full"], [126, 2, 1, "", "form_eoms"], [126, 3, 1, "", "kdes"], [126, 3, 1, "", "loads"], [126, 3, 1, "", "mass_matrix"], [126, 3, 1, "", "mass_matrix_full"], [126, 3, 1, "", "method"], [126, 3, 1, "", "q"], [126, 2, 1, "", "rhs"], [126, 3, 1, "", "u"]], "sympy.physics.mechanics.kane": [[127, 1, 1, "", "KanesMethod"]], "sympy.physics.mechanics.kane.KanesMethod": [[127, 3, 1, "", "auxiliary_eqs"], [127, 3, 1, "", "forcing"], [127, 3, 1, "", "forcing_full"], [127, 3, 1, "", "forcing_kin"], [127, 2, 1, "", "kanes_equations"], [127, 2, 1, "", "kindiffdict"], [127, 2, 1, "", "linearize"], [127, 3, 1, "", "mass_matrix"], [127, 3, 1, "", "mass_matrix_full"], [127, 3, 1, "", "mass_matrix_kin"], [127, 2, 1, "", "rhs"], [127, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.lagrange": [[127, 1, 1, "", "LagrangesMethod"]], "sympy.physics.mechanics.lagrange.LagrangesMethod": [[127, 3, 1, "", "forcing"], [127, 3, 1, "", "forcing_full"], [127, 2, 1, "", "form_lagranges_equations"], [127, 2, 1, "", "linearize"], [127, 3, 1, "", "mass_matrix"], [127, 3, 1, "", "mass_matrix_full"], [127, 2, 1, "", "rhs"], [127, 2, 1, "", "solve_multipliers"], [127, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.linearize": [[128, 1, 1, "", "Linearizer"]], "sympy.physics.mechanics.linearize.Linearizer": [[128, 2, 1, "", "__init__"], [128, 2, 1, "", "linearize"]], "sympy.physics.mechanics.loads": [[129, 1, 1, "", "Force"], [129, 1, 1, "", "Torque"]], "sympy.physics.mechanics.particle": [[129, 1, 1, "", "Particle"]], "sympy.physics.mechanics.particle.Particle": [[129, 2, 1, "", "angular_momentum"], [129, 2, 1, "", "kinetic_energy"], [129, 2, 1, "", "linear_momentum"], [129, 3, 1, "", "mass"], [129, 3, 1, "", "masscenter"], [129, 3, 1, "", "name"], [129, 2, 1, "", "parallel_axis"], [129, 3, 1, "", "point"], [129, 3, 1, "", "potential_energy"]], "sympy.physics.mechanics.rigidbody": [[129, 1, 1, "", "RigidBody"]], "sympy.physics.mechanics.rigidbody.RigidBody": [[129, 2, 1, "", "angular_momentum"], [129, 3, 1, "", "central_inertia"], [129, 3, 1, "", "frame"], [129, 3, 1, "", "inertia"], [129, 2, 1, "", "kinetic_energy"], [129, 2, 1, "", "linear_momentum"], [129, 3, 1, "", "mass"], [129, 3, 1, "", "masscenter"], [129, 3, 1, "", "name"], [129, 2, 1, "", "parallel_axis"], [129, 3, 1, "", "potential_energy"], [129, 3, 1, "", "x"], [129, 3, 1, "", "y"], [129, 3, 1, "", "z"]], "sympy.physics.mechanics.system": [[131, 1, 1, "", "SymbolicSystem"]], "sympy.physics.mechanics.system.SymbolicSystem": [[131, 3, 1, "", "alg_con"], [131, 3, 1, "", "bodies"], [131, 3, 1, "", "comb_explicit_rhs"], [131, 3, 1, "", "comb_implicit_mat"], [131, 3, 1, "", "comb_implicit_rhs"], [131, 2, 1, "", "compute_explicit_form"], [131, 2, 1, "", "constant_symbols"], [131, 3, 1, "", "coordinates"], [131, 3, 1, "", "dyn_implicit_mat"], [131, 3, 1, "", "dyn_implicit_rhs"], [131, 2, 1, "", "dynamic_symbols"], [131, 3, 1, "", "kin_explicit_rhs"], [131, 3, 1, "", "loads"], [131, 3, 1, "", "speeds"], [131, 3, 1, "", "states"]], "sympy.physics.optics": [[151, 0, 0, "-", "gaussopt"], [153, 0, 0, "-", "medium"], [154, 0, 0, "-", "polarization"], [155, 0, 0, "-", "utils"], [156, 0, 0, "-", "waves"]], "sympy.physics.optics.gaussopt": [[151, 1, 1, "", "BeamParameter"], [151, 1, 1, "", "CurvedMirror"], [151, 1, 1, "", "CurvedRefraction"], [151, 1, 1, "", "FlatMirror"], [151, 1, 1, "", "FlatRefraction"], [151, 1, 1, "", "FreeSpace"], [151, 1, 1, "", "GeometricRay"], [151, 1, 1, "", "RayTransferMatrix"], [151, 1, 1, "", "ThinLens"], [151, 4, 1, "", "conjugate_gauss_beams"], [151, 4, 1, "", "gaussian_conj"], [151, 4, 1, "", "geometric_conj_ab"], [151, 4, 1, "", "geometric_conj_af"], [151, 4, 1, "", "geometric_conj_bf"], [151, 4, 1, "", "rayleigh2waist"], [151, 4, 1, "", "waist2rayleigh"]], "sympy.physics.optics.gaussopt.BeamParameter": [[151, 3, 1, "", "divergence"], [151, 3, 1, "", "gouy"], [151, 3, 1, "", "q"], [151, 3, 1, "", "radius"], [151, 3, 1, "", "w"], [151, 3, 1, "", "w_0"], [151, 3, 1, "", "waist_approximation_limit"]], "sympy.physics.optics.gaussopt.GeometricRay": [[151, 3, 1, "", "angle"], [151, 3, 1, "", "height"]], "sympy.physics.optics.gaussopt.RayTransferMatrix": [[151, 3, 1, "", "A"], [151, 3, 1, "", "B"], [151, 3, 1, "", "C"], [151, 3, 1, "", "D"]], "sympy.physics.optics.medium": [[153, 1, 1, "", "Medium"]], "sympy.physics.optics.medium.Medium": [[153, 3, 1, "", "refractive_index"], [153, 3, 1, "", "speed"]], "sympy.physics.optics.polarization": [[154, 4, 1, "", "half_wave_retarder"], [154, 4, 1, "", "jones_2_stokes"], [154, 4, 1, "", "jones_vector"], [154, 4, 1, "", "linear_polarizer"], [154, 4, 1, "", "mueller_matrix"], [154, 4, 1, "", "phase_retarder"], [154, 4, 1, "", "polarizing_beam_splitter"], [154, 4, 1, "", "quarter_wave_retarder"], [154, 4, 1, "", "reflective_filter"], [154, 4, 1, "", "stokes_vector"], [154, 4, 1, "", "transmissive_filter"]], "sympy.physics.optics.utils": [[155, 4, 1, "", "brewster_angle"], [155, 4, 1, "", "critical_angle"], [155, 4, 1, "", "deviation"], [155, 4, 1, "", "fresnel_coefficients"], [155, 4, 1, "", "hyperfocal_distance"], [155, 4, 1, "", "lens_formula"], [155, 4, 1, "", "lens_makers_formula"], [155, 4, 1, "", "mirror_formula"], [155, 4, 1, "", "refraction_angle"], [155, 4, 1, "", "transverse_magnification"]], "sympy.physics.optics.waves": [[156, 1, 1, "", "TWave"]], "sympy.physics.optics.waves.TWave": [[156, 3, 1, "", "amplitude"], [156, 3, 1, "", "angular_velocity"], [156, 3, 1, "", "frequency"], [156, 3, 1, "", "n"], [156, 3, 1, "", "phase"], [156, 3, 1, "", "speed"], [156, 3, 1, "", "time_period"], [156, 3, 1, "", "wavelength"], [156, 3, 1, "", "wavenumber"]], "sympy.physics.paulialgebra": [[157, 4, 1, "", "evaluate_pauli_product"]], "sympy.physics.qho_1d": [[158, 4, 1, "", "E_n"], [158, 4, 1, "", "coherent_state"], [158, 4, 1, "", "psi_n"]], "sympy.physics.quantum": [[159, 0, 0, "-", "anticommutator"], [160, 0, 0, "-", "cartesian"], [161, 0, 0, "-", "cg"], [162, 0, 0, "-", "circuitplot"], [163, 0, 0, "-", "commutator"], [164, 0, 0, "-", "constants"], [165, 0, 0, "-", "dagger"], [166, 0, 0, "-", "gate"], [167, 0, 0, "-", "grover"], [168, 0, 0, "-", "hilbert"], [170, 0, 0, "-", "innerproduct"], [171, 0, 0, "-", "operator"], [172, 0, 0, "-", "operatorset"], [173, 0, 0, "-", "piab"], [174, 0, 0, "-", "qapply"], [175, 0, 0, "-", "qft"], [176, 0, 0, "-", "qubit"], [177, 0, 0, "-", "represent"], [178, 0, 0, "-", "shor"], [179, 0, 0, "-", "spin"], [180, 0, 0, "-", "state"], [181, 0, 0, "-", "tensorproduct"]], "sympy.physics.quantum.anticommutator": [[159, 1, 1, "", "AntiCommutator"]], "sympy.physics.quantum.anticommutator.AntiCommutator": [[159, 2, 1, "", "doit"]], "sympy.physics.quantum.cartesian": [[160, 1, 1, "", "PositionBra3D"], [160, 1, 1, "", "PositionKet3D"], [160, 1, 1, "", "PositionState3D"], [160, 1, 1, "", "PxBra"], [160, 1, 1, "", "PxKet"], [160, 1, 1, "", "PxOp"], [160, 1, 1, "", "XBra"], [160, 1, 1, "", "XKet"], [160, 1, 1, "", "XOp"], [160, 1, 1, "", "YOp"], [160, 1, 1, "", "ZOp"]], "sympy.physics.quantum.cartesian.PositionState3D": [[160, 3, 1, "", "position_x"], [160, 3, 1, "", "position_y"], [160, 3, 1, "", "position_z"]], "sympy.physics.quantum.cartesian.PxBra": [[160, 3, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.PxKet": [[160, 3, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.XBra": [[160, 3, 1, "", "position"]], "sympy.physics.quantum.cartesian.XKet": [[160, 3, 1, "", "position"]], "sympy.physics.quantum.cg": [[161, 1, 1, "", "CG"], [161, 1, 1, "", "Wigner3j"], [161, 1, 1, "", "Wigner6j"], [161, 1, 1, "", "Wigner9j"], [161, 4, 1, "", "cg_simp"]], "sympy.physics.quantum.circuitplot": [[162, 1, 1, "", "CircuitPlot"], [162, 4, 1, "", "CreateCGate"], [162, 1, 1, "", "Mx"], [162, 1, 1, "", "Mz"], [162, 4, 1, "", "circuit_plot"], [162, 4, 1, "", "labeller"]], "sympy.physics.quantum.circuitplot.CircuitPlot": [[162, 2, 1, "", "control_line"], [162, 2, 1, "", "control_point"], [162, 2, 1, "", "not_point"], [162, 2, 1, "", "one_qubit_box"], [162, 2, 1, "", "swap_point"], [162, 2, 1, "", "two_qubit_box"], [162, 2, 1, "", "update"]], "sympy.physics.quantum.commutator": [[163, 1, 1, "", "Commutator"]], "sympy.physics.quantum.commutator.Commutator": [[163, 2, 1, "", "doit"]], "sympy.physics.quantum.constants": [[164, 1, 1, "", "HBar"]], "sympy.physics.quantum.dagger": [[165, 1, 1, "", "Dagger"]], "sympy.physics.quantum.gate": [[166, 1, 1, "", "CGate"], [166, 1, 1, "", "CGateS"], [166, 5, 1, "", "CNOT"], [166, 1, 1, "", "CNotGate"], [166, 1, 1, "", "Gate"], [166, 5, 1, "", "H"], [166, 1, 1, "", "HadamardGate"], [166, 1, 1, "", "IdentityGate"], [166, 1, 1, "", "OneQubitGate"], [166, 5, 1, "", "Phase"], [166, 1, 1, "", "PhaseGate"], [166, 5, 1, "", "S"], [166, 5, 1, "", "SWAP"], [166, 1, 1, "", "SwapGate"], [166, 5, 1, "", "T"], [166, 1, 1, "", "TGate"], [166, 1, 1, "", "TwoQubitGate"], [166, 1, 1, "", "UGate"], [166, 5, 1, "", "X"], [166, 1, 1, "", "XGate"], [166, 5, 1, "", "Y"], [166, 1, 1, "", "YGate"], [166, 5, 1, "", "Z"], [166, 1, 1, "", "ZGate"], [166, 4, 1, "", "gate_simp"], [166, 4, 1, "", "gate_sort"], [166, 4, 1, "", "normalized"], [166, 4, 1, "", "random_circuit"]], "sympy.physics.quantum.gate.CGate": [[166, 3, 1, "", "controls"], [166, 2, 1, "", "decompose"], [166, 2, 1, "", "eval_controls"], [166, 3, 1, "", "gate"], [166, 3, 1, "", "min_qubits"], [166, 3, 1, "", "nqubits"], [166, 2, 1, "", "plot_gate"], [166, 3, 1, "", "targets"]], "sympy.physics.quantum.gate.CNotGate": [[166, 3, 1, "", "controls"], [166, 3, 1, "", "gate"], [166, 3, 1, "", "min_qubits"], [166, 3, 1, "", "targets"]], "sympy.physics.quantum.gate.Gate": [[166, 2, 1, "", "get_target_matrix"], [166, 3, 1, "", "min_qubits"], [166, 3, 1, "", "nqubits"], [166, 3, 1, "", "targets"]], "sympy.physics.quantum.gate.SwapGate": [[166, 2, 1, "", "decompose"]], "sympy.physics.quantum.gate.UGate": [[166, 2, 1, "", "get_target_matrix"], [166, 3, 1, "", "targets"]], "sympy.physics.quantum.grover": [[167, 1, 1, "", "OracleGate"], [167, 1, 1, "", "WGate"], [167, 4, 1, "", "apply_grover"], [167, 4, 1, "", "grover_iteration"], [167, 4, 1, "", "superposition_basis"]], "sympy.physics.quantum.grover.OracleGate": [[167, 3, 1, "", "search_function"], [167, 3, 1, "", "targets"]], "sympy.physics.quantum.hilbert": [[168, 1, 1, "", "ComplexSpace"], [168, 1, 1, "", "DirectSumHilbertSpace"], [168, 1, 1, "", "FockSpace"], [168, 1, 1, "", "HilbertSpace"], [168, 1, 1, "", "L2"], [168, 1, 1, "", "TensorPowerHilbertSpace"], [168, 1, 1, "", "TensorProductHilbertSpace"]], "sympy.physics.quantum.hilbert.DirectSumHilbertSpace": [[168, 2, 1, "", "eval"], [168, 3, 1, "", "spaces"]], "sympy.physics.quantum.hilbert.HilbertSpace": [[168, 3, 1, "", "dimension"]], "sympy.physics.quantum.hilbert.TensorProductHilbertSpace": [[168, 2, 1, "", "eval"], [168, 3, 1, "", "spaces"]], "sympy.physics.quantum.innerproduct": [[170, 1, 1, "", "InnerProduct"]], "sympy.physics.quantum.operator": [[171, 1, 1, "", "DifferentialOperator"], [171, 1, 1, "", "HermitianOperator"], [171, 1, 1, "", "IdentityOperator"], [171, 1, 1, "", "Operator"], [171, 1, 1, "", "OuterProduct"], [171, 1, 1, "", "UnitaryOperator"]], "sympy.physics.quantum.operator.DifferentialOperator": [[171, 3, 1, "", "expr"], [171, 3, 1, "", "free_symbols"], [171, 3, 1, "", "function"], [171, 3, 1, "", "variables"]], "sympy.physics.quantum.operator.OuterProduct": [[171, 3, 1, "", "bra"], [171, 3, 1, "", "ket"]], "sympy.physics.quantum.operatorset": [[172, 4, 1, "", "operators_to_state"], [172, 4, 1, "", "state_to_operators"]], "sympy.physics.quantum.piab": [[173, 1, 1, "", "PIABBra"], [173, 1, 1, "", "PIABHamiltonian"], [173, 1, 1, "", "PIABKet"]], "sympy.physics.quantum.qapply": [[174, 4, 1, "", "qapply"]], "sympy.physics.quantum.qft": [[175, 1, 1, "", "IQFT"], [175, 1, 1, "", "QFT"], [175, 5, 1, "", "Rk"], [175, 1, 1, "", "RkGate"]], "sympy.physics.quantum.qft.IQFT": [[175, 2, 1, "", "decompose"]], "sympy.physics.quantum.qft.QFT": [[175, 2, 1, "", "decompose"]], "sympy.physics.quantum.qubit": [[176, 1, 1, "", "IntQubit"], [176, 1, 1, "", "IntQubitBra"], [176, 1, 1, "", "Qubit"], [176, 1, 1, "", "QubitBra"], [176, 4, 1, "", "matrix_to_density"], [176, 4, 1, "", "matrix_to_qubit"], [176, 4, 1, "", "measure_all"], [176, 4, 1, "", "measure_all_oneshot"], [176, 4, 1, "", "measure_partial"], [176, 4, 1, "", "measure_partial_oneshot"], [176, 4, 1, "", "qubit_to_matrix"]], "sympy.physics.quantum.represent": [[177, 4, 1, "", "enumerate_states"], [177, 4, 1, "", "get_basis"], [177, 4, 1, "", "integrate_result"], [177, 4, 1, "", "rep_expectation"], [177, 4, 1, "", "rep_innerproduct"], [177, 4, 1, "", "represent"]], "sympy.physics.quantum.shor": [[178, 1, 1, "", "CMod"], [178, 4, 1, "", "period_find"], [178, 4, 1, "", "shor"]], "sympy.physics.quantum.shor.CMod": [[178, 3, 1, "", "N"], [178, 3, 1, "", "a"], [178, 3, 1, "", "t"]], "sympy.physics.quantum.spin": [[179, 1, 1, "", "J2Op"], [179, 1, 1, "", "JxBra"], [179, 1, 1, "", "JxBraCoupled"], [179, 1, 1, "", "JxKet"], [179, 1, 1, "", "JxKetCoupled"], [179, 1, 1, "", "JyBra"], [179, 1, 1, "", "JyBraCoupled"], [179, 1, 1, "", "JyKet"], [179, 1, 1, "", "JyKetCoupled"], [179, 1, 1, "", "JzBra"], [179, 1, 1, "", "JzBraCoupled"], [179, 1, 1, "", "JzKet"], [179, 1, 1, "", "JzKetCoupled"], [179, 1, 1, "", "JzOp"], [179, 1, 1, "", "Rotation"], [179, 1, 1, "", "WignerD"], [179, 4, 1, "", "couple"], [179, 4, 1, "", "uncouple"]], "sympy.physics.quantum.spin.Rotation": [[179, 2, 1, "", "D"], [179, 2, 1, "", "d"]], "sympy.physics.quantum.state": [[180, 1, 1, "", "Bra"], [180, 1, 1, "", "BraBase"], [180, 1, 1, "", "Ket"], [180, 1, 1, "", "KetBase"], [180, 1, 1, "", "OrthogonalBra"], [180, 1, 1, "", "OrthogonalKet"], [180, 1, 1, "", "OrthogonalState"], [180, 1, 1, "", "State"], [180, 1, 1, "", "StateBase"], [180, 1, 1, "", "TimeDepBra"], [180, 1, 1, "", "TimeDepKet"], [180, 1, 1, "", "TimeDepState"], [180, 1, 1, "", "Wavefunction"]], "sympy.physics.quantum.state.StateBase": [[180, 3, 1, "", "dual"], [180, 2, 1, "", "dual_class"], [180, 3, 1, "", "operators"]], "sympy.physics.quantum.state.TimeDepState": [[180, 3, 1, "", "label"], [180, 3, 1, "", "time"]], "sympy.physics.quantum.state.Wavefunction": [[180, 3, 1, "", "expr"], [180, 3, 1, "", "is_commutative"], [180, 3, 1, "", "is_normalized"], [180, 3, 1, "", "limits"], [180, 3, 1, "", "norm"], [180, 2, 1, "", "normalize"], [180, 2, 1, "", "prob"], [180, 3, 1, "", "variables"]], "sympy.physics.quantum.tensorproduct": [[181, 1, 1, "", "TensorProduct"], [181, 4, 1, "", "tensor_product_simp"]], "sympy.physics.secondquant": [[182, 1, 1, "", "AnnihilateBoson"], [182, 1, 1, "", "AnnihilateFermion"], [182, 1, 1, "", "AntiSymmetricTensor"], [182, 5, 1, "", "B"], [182, 5, 1, "", "BBra"], [182, 5, 1, "", "BKet"], [182, 5, 1, "", "Bd"], [182, 1, 1, "", "BosonicBasis"], [182, 1, 1, "", "Commutator"], [182, 1, 1, "", "CreateBoson"], [182, 1, 1, "", "CreateFermion"], [182, 1, 1, "", "Dagger"], [182, 5, 1, "", "F"], [182, 5, 1, "", "FBra"], [182, 5, 1, "", "FKet"], [182, 5, 1, "", "Fd"], [182, 1, 1, "", "FixedBosonicBasis"], [182, 1, 1, "", "FockState"], [182, 1, 1, "", "FockStateBosonBra"], [182, 1, 1, "", "FockStateBosonKet"], [182, 1, 1, "", "FockStateBra"], [182, 1, 1, "", "FockStateFermionBra"], [182, 1, 1, "", "FockStateFermionKet"], [182, 1, 1, "", "FockStateKet"], [182, 1, 1, "", "InnerProduct"], [182, 1, 1, "", "KroneckerDelta"], [182, 1, 1, "", "NO"], [182, 1, 1, "", "PermutationOperator"], [182, 1, 1, "", "VarBosonicBasis"], [182, 4, 1, "", "apply_operators"], [182, 4, 1, "", "contraction"], [182, 4, 1, "", "evaluate_deltas"], [182, 4, 1, "", "matrix_rep"], [182, 4, 1, "", "simplify_index_permutations"], [182, 4, 1, "", "substitute_dummies"], [182, 4, 1, "", "wicks"]], "sympy.physics.secondquant.AnnihilateBoson": [[182, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.AnnihilateFermion": [[182, 2, 1, "", "apply_operator"], [182, 3, 1, "", "is_only_q_annihilator"], [182, 3, 1, "", "is_only_q_creator"], [182, 3, 1, "", "is_q_annihilator"], [182, 3, 1, "", "is_q_creator"]], "sympy.physics.secondquant.AntiSymmetricTensor": [[182, 3, 1, "", "lower"], [182, 3, 1, "", "symbol"], [182, 3, 1, "", "upper"]], "sympy.physics.secondquant.Commutator": [[182, 2, 1, "", "doit"], [182, 2, 1, "", "eval"]], "sympy.physics.secondquant.CreateBoson": [[182, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.CreateFermion": [[182, 2, 1, "", "apply_operator"], [182, 3, 1, "", "is_only_q_annihilator"], [182, 3, 1, "", "is_only_q_creator"], [182, 3, 1, "", "is_q_annihilator"], [182, 3, 1, "", "is_q_creator"]], "sympy.physics.secondquant.Dagger": [[182, 2, 1, "", "eval"]], "sympy.physics.secondquant.FixedBosonicBasis": [[182, 2, 1, "", "index"], [182, 2, 1, "", "state"]], "sympy.physics.secondquant.InnerProduct": [[182, 3, 1, "", "bra"], [182, 3, 1, "", "ket"]], "sympy.physics.secondquant.KroneckerDelta": [[182, 2, 1, "", "eval"], [182, 3, 1, "", "indices_contain_equal_information"], [182, 3, 1, "", "is_above_fermi"], [182, 3, 1, "", "is_below_fermi"], [182, 3, 1, "", "is_only_above_fermi"], [182, 3, 1, "", "is_only_below_fermi"], [182, 3, 1, "", "killable_index"], [182, 3, 1, "", "preferred_index"]], "sympy.physics.secondquant.NO": [[182, 2, 1, "", "doit"], [182, 2, 1, "", "get_subNO"], [182, 3, 1, "", "has_q_annihilators"], [182, 3, 1, "", "has_q_creators"], [182, 2, 1, "", "iter_q_annihilators"], [182, 2, 1, "", "iter_q_creators"]], "sympy.physics.secondquant.PermutationOperator": [[182, 2, 1, "", "get_permuted"]], "sympy.physics.secondquant.VarBosonicBasis": [[182, 2, 1, "", "index"], [182, 2, 1, "", "state"]], "sympy.physics.sho": [[183, 4, 1, "", "E_nl"], [183, 4, 1, "", "R_nl"]], "sympy.physics.units": [[184, 0, 0, "-", "dimensions"], [188, 0, 0, "-", "prefixes"], [189, 0, 0, "-", "quantities"], [190, 0, 0, "-", "unitsystem"], [189, 0, 0, "-", "util"]], "sympy.physics.units.dimensions": [[184, 1, 1, "", "Dimension"], [184, 1, 1, "", "DimensionSystem"]], "sympy.physics.units.dimensions.Dimension": [[184, 2, 1, "", "has_integer_powers"]], "sympy.physics.units.dimensions.DimensionSystem": [[184, 3, 1, "", "can_transf_matrix"], [184, 3, 1, "", "dim"], [184, 2, 1, "", "dim_can_vector"], [184, 2, 1, "", "dim_vector"], [184, 3, 1, "", "inv_can_transf_matrix"], [184, 3, 1, "", "is_consistent"], [184, 2, 1, "", "is_dimensionless"], [184, 3, 1, "", "list_can_dims"], [184, 2, 1, "", "print_dim_base"]], "sympy.physics.units.prefixes": [[188, 1, 1, "", "Prefix"]], "sympy.physics.units.quantities": [[189, 1, 1, "", "Quantity"]], "sympy.physics.units.quantities.Quantity": [[189, 3, 1, "", "abbrev"], [189, 2, 1, "", "convert_to"], [189, 3, 1, "", "free_symbols"], [189, 3, 1, "", "is_prefixed"], [189, 3, 1, "", "scale_factor"], [189, 2, 1, "", "set_global_relative_scale_factor"]], "sympy.physics.units.unitsystem": [[190, 1, 1, "", "UnitSystem"]], "sympy.physics.units.unitsystem.UnitSystem": [[190, 3, 1, "", "dim"], [190, 2, 1, "", "extend"], [190, 2, 1, "", "get_units_non_prefixed"], [190, 3, 1, "", "is_consistent"]], "sympy.physics.units.util": [[189, 4, 1, "", "convert_to"]], "sympy.physics.vector.dyadic": [[192, 1, 1, "", "Dyadic"]], "sympy.physics.vector.dyadic.Dyadic": [[192, 2, 1, "", "applyfunc"], [192, 2, 1, "", "cross"], [192, 2, 1, "", "doit"], [192, 2, 1, "", "dot"], [192, 2, 1, "", "dt"], [192, 2, 1, "", "express"], [192, 3, 1, "", "func"], [192, 2, 1, "", "simplify"], [192, 2, 1, "", "subs"], [192, 2, 1, "", "to_matrix"], [192, 2, 1, "", "xreplace"]], "sympy.physics.vector": [[194, 4, 1, "", "dynamicsymbols"], [196, 0, 0, "-", "functions"], [196, 0, 0, "-", "point"]], "sympy.physics.vector.fieldfunctions": [[193, 4, 1, "", "curl"], [193, 4, 1, "", "divergence"], [193, 4, 1, "", "gradient"], [193, 4, 1, "", "is_conservative"], [193, 4, 1, "", "is_solenoidal"], [193, 4, 1, "", "scalar_potential"], [193, 4, 1, "", "scalar_potential_difference"]], "sympy.physics.vector.frame": [[192, 1, 1, "", "CoordinateSym"], [192, 1, 1, "", "ReferenceFrame"]], "sympy.physics.vector.frame.ReferenceFrame": [[192, 2, 1, "", "ang_acc_in"], [192, 2, 1, "", "ang_vel_in"], [192, 2, 1, "", "dcm"], [192, 2, 1, "", "orient"], [192, 2, 1, "", "orient_axis"], [192, 2, 1, "", "orient_body_fixed"], [192, 2, 1, "", "orient_explicit"], [192, 2, 1, "", "orient_quaternion"], [192, 2, 1, "", "orient_space_fixed"], [192, 2, 1, "", "orientnew"], [192, 2, 1, "", "partial_velocity"], [192, 2, 1, "", "set_ang_acc"], [192, 2, 1, "", "set_ang_vel"], [192, 3, 1, "", "u"], [192, 2, 1, "", "variable_map"], [192, 3, 1, "", "x"], [192, 3, 1, "", "xx"], [192, 3, 1, "", "xy"], [192, 3, 1, "", "xz"], [192, 3, 1, "", "y"], [192, 3, 1, "", "yx"], [192, 3, 1, "", "yy"], [192, 3, 1, "", "yz"], [192, 3, 1, "", "z"], [192, 3, 1, "", "zx"], [192, 3, 1, "", "zy"], [192, 3, 1, "", "zz"]], "sympy.physics.vector.functions": [[194, 4, 1, "", "cross"], [194, 4, 1, "", "dot"], [194, 4, 1, "", "express"], [196, 4, 1, "", "get_motion_params"], [196, 4, 1, "", "kinematic_equations"], [194, 4, 1, "", "outer"], [196, 4, 1, "", "partial_velocity"], [194, 4, 1, "", "time_derivative"]], "sympy.physics.vector.point": [[196, 1, 1, "", "Point"]], "sympy.physics.vector.point.Point": [[196, 2, 1, "", "a1pt_theory"], [196, 2, 1, "", "a2pt_theory"], [196, 2, 1, "", "acc"], [196, 2, 1, "", "locatenew"], [196, 2, 1, "", "partial_velocity"], [196, 2, 1, "", "pos_from"], [196, 2, 1, "", "set_acc"], [196, 2, 1, "", "set_pos"], [196, 2, 1, "", "set_vel"], [196, 2, 1, "", "v1pt_theory"], [196, 2, 1, "", "v2pt_theory"], [196, 2, 1, "", "vel"]], "sympy.physics.vector.printing": [[197, 4, 1, "", "init_vprinting"], [197, 4, 1, "", "vlatex"], [197, 4, 1, "", "vpprint"], [197, 4, 1, "", "vprint"]], "sympy.physics.vector.vector": [[192, 1, 1, "", "Vector"]], "sympy.physics.vector.vector.Vector": [[192, 2, 1, "", "angle_between"], [192, 2, 1, "", "applyfunc"], [192, 2, 1, "", "cross"], [192, 2, 1, "", "diff"], [192, 2, 1, "", "doit"], [192, 2, 1, "", "dot"], [192, 2, 1, "", "dt"], [192, 2, 1, "", "express"], [192, 2, 1, "", "free_dynamicsymbols"], [192, 2, 1, "", "free_symbols"], [192, 3, 1, "", "func"], [192, 2, 1, "", "magnitude"], [192, 2, 1, "", "normalize"], [192, 2, 1, "", "outer"], [192, 2, 1, "", "separate"], [192, 2, 1, "", "simplify"], [192, 2, 1, "", "subs"], [192, 2, 1, "", "to_matrix"], [192, 2, 1, "", "xreplace"]], "sympy.physics.wigner": [[202, 4, 1, "", "clebsch_gordan"], [202, 4, 1, "", "dot_rot_grad_Ynm"], [202, 4, 1, "", "gaunt"], [202, 4, 1, "", "racah"], [202, 4, 1, "", "real_gaunt"], [202, 4, 1, "", "wigner_3j"], [202, 4, 1, "", "wigner_6j"], [202, 4, 1, "", "wigner_9j"], [202, 4, 1, "", "wigner_d"], [202, 4, 1, "", "wigner_d_small"]], "sympy.plotting": [[203, 0, 0, "-", "plot"], [203, 0, 0, "-", "pygletplot"]], "sympy.plotting.plot": [[203, 1, 1, "", "BaseSeries"], [203, 1, 1, "", "Line2DBaseSeries"], [203, 1, 1, "", "Line3DBaseSeries"], [203, 1, 1, "", "LineOver1DRangeSeries"], [203, 1, 1, "", "MatplotlibBackend"], [203, 1, 1, "", "Parametric2DLineSeries"], [203, 1, 1, "", "Parametric3DLineSeries"], [203, 1, 1, "", "ParametricSurfaceSeries"], [203, 1, 1, "", "Plot"], [203, 1, 1, "", "PlotGrid"], [203, 1, 1, "", "SurfaceBaseSeries"], [203, 1, 1, "", "SurfaceOver2DRangeSeries"], [203, 1, 1, "", "TextBackend"], [203, 4, 1, "", "plot"], [203, 4, 1, "", "plot3d"], [203, 4, 1, "", "plot3d_parametric_line"], [203, 4, 1, "", "plot3d_parametric_surface"], [203, 4, 1, "", "plot_parametric"]], "sympy.plotting.plot.Line2DBaseSeries": [[203, 2, 1, "", "get_data"]], "sympy.plotting.plot.LineOver1DRangeSeries": [[203, 2, 1, "", "get_points"]], "sympy.plotting.plot.MatplotlibBackend": [[203, 2, 1, "", "get_segments"], [203, 2, 1, "", "process_series"]], "sympy.plotting.plot.Parametric2DLineSeries": [[203, 2, 1, "", "get_points"]], "sympy.plotting.plot.Plot": [[203, 3, 1, "", "annotations"], [203, 2, 1, "", "append"], [203, 2, 1, "", "extend"], [203, 3, 1, "", "fill"], [203, 3, 1, "", "markers"], [203, 3, 1, "", "rectangles"]], "sympy.plotting.plot_implicit": [[203, 1, 1, "", "ImplicitSeries"], [203, 4, 1, "", "plot_implicit"]], "sympy.plotting.textplot": [[203, 4, 1, "", "textplot"]], "sympy.polys.agca.extensions": [[204, 1, 1, "", "ExtensionElement"], [204, 1, 1, "", "MonogenicFiniteExtension"]], "sympy.polys.agca.extensions.ExtensionElement": [[204, 2, 1, "", "inverse"]], "sympy.polys.agca.extensions.MonogenicFiniteExtension": [[204, 5, 1, "", "dtype"]], "sympy.polys.agca.homomorphisms": [[204, 1, 1, "", "ModuleHomomorphism"], [204, 4, 1, "", "homomorphism"]], "sympy.polys.agca.homomorphisms.ModuleHomomorphism": [[204, 2, 1, "", "image"], [204, 2, 1, "", "is_injective"], [204, 2, 1, "", "is_isomorphism"], [204, 2, 1, "", "is_surjective"], [204, 2, 1, "", "is_zero"], [204, 2, 1, "", "kernel"], [204, 2, 1, "", "quotient_codomain"], [204, 2, 1, "", "quotient_domain"], [204, 2, 1, "", "restrict_codomain"], [204, 2, 1, "", "restrict_domain"]], "sympy.polys.agca.ideals": [[204, 1, 1, "", "Ideal"]], "sympy.polys.agca.ideals.Ideal": [[204, 2, 1, "", "contains"], [204, 2, 1, "", "depth"], [204, 2, 1, "", "height"], [204, 2, 1, "", "intersect"], [204, 2, 1, "", "is_maximal"], [204, 2, 1, "", "is_primary"], [204, 2, 1, "", "is_prime"], [204, 2, 1, "", "is_principal"], [204, 2, 1, "", "is_radical"], [204, 2, 1, "", "is_whole_ring"], [204, 2, 1, "", "is_zero"], [204, 2, 1, "", "product"], [204, 2, 1, "", "quotient"], [204, 2, 1, "", "radical"], [204, 2, 1, "", "reduce_element"], [204, 2, 1, "", "saturate"], [204, 2, 1, "", "subset"], [204, 2, 1, "", "union"]], "sympy.polys.agca.modules": [[204, 1, 1, "", "FreeModule"], [204, 1, 1, "", "FreeModuleElement"], [204, 1, 1, "", "Module"], [204, 1, 1, "", "QuotientModule"], [204, 1, 1, "", "QuotientModuleElement"], [204, 1, 1, "", "SubModule"], [204, 1, 1, "", "SubQuotientModule"]], "sympy.polys.agca.modules.FreeModule": [[204, 2, 1, "", "basis"], [204, 2, 1, "", "convert"], [204, 5, 1, "", "dtype"], [204, 2, 1, "", "identity_hom"], [204, 2, 1, "", "is_submodule"], [204, 2, 1, "", "is_zero"], [204, 2, 1, "", "multiply_ideal"], [204, 2, 1, "", "quotient_module"]], "sympy.polys.agca.modules.Module": [[204, 2, 1, "", "contains"], [204, 2, 1, "", "convert"], [204, 2, 1, "", "identity_hom"], [204, 2, 1, "", "is_submodule"], [204, 2, 1, "", "is_zero"], [204, 2, 1, "", "multiply_ideal"], [204, 2, 1, "", "quotient_module"], [204, 2, 1, "", "submodule"], [204, 2, 1, "", "subset"]], "sympy.polys.agca.modules.QuotientModule": [[204, 2, 1, "", "convert"], [204, 5, 1, "", "dtype"], [204, 2, 1, "", "identity_hom"], [204, 2, 1, "", "is_submodule"], [204, 2, 1, "", "is_zero"], [204, 2, 1, "", "quotient_hom"], [204, 2, 1, "", "submodule"]], "sympy.polys.agca.modules.QuotientModuleElement": [[204, 2, 1, "", "eq"]], "sympy.polys.agca.modules.SubModule": [[204, 2, 1, "", "convert"], [204, 2, 1, "", "identity_hom"], [204, 2, 1, "", "in_terms_of_generators"], [204, 2, 1, "", "inclusion_hom"], [204, 2, 1, "", "intersect"], [204, 2, 1, "", "is_full_module"], [204, 2, 1, "", "is_submodule"], [204, 2, 1, "", "is_zero"], [204, 2, 1, "", "module_quotient"], [204, 2, 1, "", "multiply_ideal"], [204, 2, 1, "", "quotient_module"], [204, 2, 1, "", "reduce_element"], [204, 2, 1, "", "submodule"], [204, 2, 1, "", "syzygy_module"], [204, 2, 1, "", "union"]], "sympy.polys.agca.modules.SubQuotientModule": [[204, 2, 1, "", "is_full_module"], [204, 2, 1, "", "quotient_hom"]], "sympy.polys.appellseqs": [[213, 4, 1, "", "andre_poly"], [213, 4, 1, "", "bernoulli_c_poly"], [213, 4, 1, "", "bernoulli_poly"], [213, 4, 1, "", "euler_poly"], [213, 4, 1, "", "genocchi_poly"]], "sympy.polys.constructor": [[213, 4, 1, "", "construct_domain"]], "sympy.polys.densearith": [[210, 4, 1, "", "dmp_abs"], [210, 4, 1, "", "dmp_add"], [210, 4, 1, "", "dmp_add_ground"], [210, 4, 1, "", "dmp_add_mul"], [210, 4, 1, "", "dmp_add_term"], [210, 4, 1, "", "dmp_div"], [210, 4, 1, "", "dmp_expand"], [210, 4, 1, "", "dmp_exquo"], [210, 4, 1, "", "dmp_exquo_ground"], [210, 4, 1, "", "dmp_ff_div"], [210, 4, 1, "", "dmp_l1_norm"], [210, 4, 1, "", "dmp_max_norm"], [210, 4, 1, "", "dmp_mul"], [210, 4, 1, "", "dmp_mul_ground"], [210, 4, 1, "", "dmp_mul_term"], [210, 4, 1, "", "dmp_neg"], [210, 4, 1, "", "dmp_pdiv"], [210, 4, 1, "", "dmp_pexquo"], [210, 4, 1, "", "dmp_pow"], [210, 4, 1, "", "dmp_pquo"], [210, 4, 1, "", "dmp_prem"], [210, 4, 1, "", "dmp_quo"], [210, 4, 1, "", "dmp_quo_ground"], [210, 4, 1, "", "dmp_rem"], [210, 4, 1, "", "dmp_rr_div"], [210, 4, 1, "", "dmp_sqr"], [210, 4, 1, "", "dmp_sub"], [210, 4, 1, "", "dmp_sub_ground"], [210, 4, 1, "", "dmp_sub_mul"], [210, 4, 1, "", "dmp_sub_term"], [210, 4, 1, "", "dup_lshift"], [210, 4, 1, "", "dup_rshift"]], "sympy.polys.densebasic": [[210, 4, 1, "", "dmp_LC"], [210, 4, 1, "", "dmp_TC"], [210, 4, 1, "", "dmp_apply_pairs"], [210, 4, 1, "", "dmp_convert"], [210, 4, 1, "", "dmp_copy"], [210, 4, 1, "", "dmp_deflate"], [210, 4, 1, "", "dmp_degree"], [210, 4, 1, "", "dmp_degree_in"], [210, 4, 1, "", "dmp_degree_list"], [210, 4, 1, "", "dmp_eject"], [210, 4, 1, "", "dmp_exclude"], [210, 4, 1, "", "dmp_from_dict"], [210, 4, 1, "", "dmp_from_sympy"], [210, 4, 1, "", "dmp_ground"], [210, 4, 1, "", "dmp_ground_LC"], [210, 4, 1, "", "dmp_ground_TC"], [210, 4, 1, "", "dmp_ground_nth"], [210, 4, 1, "", "dmp_ground_p"], [210, 4, 1, "", "dmp_grounds"], [210, 4, 1, "", "dmp_include"], [210, 4, 1, "", "dmp_inflate"], [210, 4, 1, "", "dmp_inject"], [210, 4, 1, "", "dmp_list_terms"], [210, 4, 1, "", "dmp_multi_deflate"], [210, 4, 1, "", "dmp_negative_p"], [210, 4, 1, "", "dmp_nest"], [210, 4, 1, "", "dmp_normal"], [210, 4, 1, "", "dmp_nth"], [210, 4, 1, "", "dmp_one"], [210, 4, 1, "", "dmp_one_p"], [210, 4, 1, "", "dmp_permute"], [210, 4, 1, "", "dmp_positive_p"], [210, 4, 1, "", "dmp_raise"], [210, 4, 1, "", "dmp_slice"], [210, 4, 1, "", "dmp_strip"], [210, 4, 1, "", "dmp_swap"], [210, 4, 1, "", "dmp_terms_gcd"], [210, 4, 1, "", "dmp_to_dict"], [210, 4, 1, "", "dmp_to_tuple"], [210, 4, 1, "", "dmp_true_LT"], [210, 4, 1, "", "dmp_validate"], [210, 4, 1, "", "dmp_zero"], [210, 4, 1, "", "dmp_zero_p"], [210, 4, 1, "", "dmp_zeros"], [210, 4, 1, "", "dup_random"], [210, 4, 1, "", "dup_reverse"]], "sympy.polys.densetools": [[210, 4, 1, "", "dmp_clear_denoms"], [210, 4, 1, "", "dmp_compose"], [210, 4, 1, "", "dmp_diff"], [210, 4, 1, "", "dmp_diff_eval_in"], [210, 4, 1, "", "dmp_diff_in"], [210, 4, 1, "", "dmp_eval"], [210, 4, 1, "", "dmp_eval_in"], [210, 4, 1, "", "dmp_eval_tail"], [210, 4, 1, "", "dmp_ground_content"], [210, 4, 1, "", "dmp_ground_extract"], [210, 4, 1, "", "dmp_ground_monic"], [210, 4, 1, "", "dmp_ground_primitive"], [210, 4, 1, "", "dmp_ground_trunc"], [210, 4, 1, "", "dmp_integrate"], [210, 4, 1, "", "dmp_integrate_in"], [210, 4, 1, "", "dmp_lift"], [210, 4, 1, "", "dmp_revert"], [210, 4, 1, "", "dmp_trunc"], [210, 4, 1, "", "dup_content"], [210, 4, 1, "", "dup_decompose"], [210, 4, 1, "", "dup_extract"], [210, 4, 1, "", "dup_mirror"], [210, 4, 1, "", "dup_monic"], [210, 4, 1, "", "dup_primitive"], [210, 4, 1, "", "dup_real_imag"], [210, 4, 1, "", "dup_scale"], [210, 4, 1, "", "dup_shift"], [210, 4, 1, "", "dup_sign_variations"], [210, 4, 1, "", "dup_transform"]], "sympy.polys.dispersion": [[213, 4, 1, "", "dispersion"], [213, 4, 1, "", "dispersionset"]], "sympy.polys.distributedmodules": [[210, 4, 1, "", "sdm_LC"], [210, 4, 1, "", "sdm_LM"], [210, 4, 1, "", "sdm_LT"], [210, 4, 1, "", "sdm_add"], [210, 4, 1, "", "sdm_deg"], [210, 4, 1, "", "sdm_ecart"], [210, 4, 1, "", "sdm_from_dict"], [210, 4, 1, "", "sdm_from_vector"], [210, 4, 1, "", "sdm_groebner"], [210, 4, 1, "", "sdm_monomial_deg"], [210, 4, 1, "", "sdm_monomial_divides"], [210, 4, 1, "", "sdm_monomial_mul"], [210, 4, 1, "", "sdm_mul_term"], [210, 4, 1, "", "sdm_nf_mora"], [210, 4, 1, "", "sdm_spoly"], [210, 4, 1, "", "sdm_to_dict"], [210, 4, 1, "", "sdm_to_vector"], [210, 4, 1, "", "sdm_zero"]], "sympy.polys.domains": [[208, 1, 1, "", "AlgebraicField"], [208, 1, 1, "", "ComplexField"], [208, 1, 1, "", "ExpressionDomain"], [208, 1, 1, "", "FiniteField"], [208, 1, 1, "", "FractionField"], [208, 1, 1, "", "GMPYFiniteField"], [208, 1, 1, "", "GMPYIntegerRing"], [208, 1, 1, "", "GMPYRationalField"], [208, 1, 1, "", "IntegerRing"], [208, 1, 1, "", "PolynomialRing"], [208, 1, 1, "", "PythonFiniteField"], [208, 1, 1, "", "PythonIntegerRing"], [208, 1, 1, "", "PythonRationalField"], [208, 1, 1, "", "RationalField"], [208, 1, 1, "", "RealField"]], "sympy.polys.domains.AlgebraicField": [[208, 2, 1, "", "algebraic_field"], [208, 2, 1, "", "denom"], [208, 2, 1, "", "discriminant"], [208, 5, 1, "", "dtype"], [208, 5, 1, "", "ext"], [208, 2, 1, "", "from_AlgebraicField"], [208, 2, 1, "", "from_GaussianIntegerRing"], [208, 2, 1, "", "from_GaussianRationalField"], [208, 2, 1, "", "from_QQ"], [208, 2, 1, "", "from_QQ_gmpy"], [208, 2, 1, "", "from_QQ_python"], [208, 2, 1, "", "from_RealField"], [208, 2, 1, "", "from_ZZ"], [208, 2, 1, "", "from_ZZ_gmpy"], [208, 2, 1, "", "from_ZZ_python"], [208, 2, 1, "", "from_sympy"], [208, 2, 1, "", "galois_group"], [208, 2, 1, "", "get_ring"], [208, 2, 1, "", "integral_basis"], [208, 2, 1, "", "is_negative"], [208, 2, 1, "", "is_nonnegative"], [208, 2, 1, "", "is_nonpositive"], [208, 2, 1, "", "is_positive"], [208, 2, 1, "", "maximal_order"], [208, 5, 1, "", "mod"], [208, 2, 1, "", "numer"], [208, 5, 1, "", "orig_ext"], [208, 2, 1, "", "primes_above"], [208, 2, 1, "", "to_alg_num"], [208, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ComplexField": [[208, 2, 1, "", "almosteq"], [208, 2, 1, "", "exsqrt"], [208, 2, 1, "", "from_sympy"], [208, 2, 1, "", "gcd"], [208, 2, 1, "", "get_exact"], [208, 2, 1, "", "get_ring"], [208, 2, 1, "", "is_negative"], [208, 2, 1, "", "is_nonnegative"], [208, 2, 1, "", "is_nonpositive"], [208, 2, 1, "", "is_positive"], [208, 2, 1, "", "is_square"], [208, 2, 1, "", "lcm"], [208, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ExpressionDomain": [[208, 1, 1, "", "Expression"], [208, 2, 1, "", "denom"], [208, 5, 1, "", "dtype"], [208, 2, 1, "", "from_ExpressionDomain"], [208, 2, 1, "", "from_FractionField"], [208, 2, 1, "", "from_GaussianIntegerRing"], [208, 2, 1, "", "from_GaussianRationalField"], [208, 2, 1, "", "from_PolynomialRing"], [208, 2, 1, "", "from_QQ"], [208, 2, 1, "", "from_QQ_gmpy"], [208, 2, 1, "", "from_QQ_python"], [208, 2, 1, "", "from_RealField"], [208, 2, 1, "", "from_ZZ"], [208, 2, 1, "", "from_ZZ_gmpy"], [208, 2, 1, "", "from_ZZ_python"], [208, 2, 1, "", "from_sympy"], [208, 2, 1, "", "get_field"], [208, 2, 1, "", "get_ring"], [208, 2, 1, "", "is_negative"], [208, 2, 1, "", "is_nonnegative"], [208, 2, 1, "", "is_nonpositive"], [208, 2, 1, "", "is_positive"], [208, 2, 1, "", "numer"], [208, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FiniteField": [[208, 2, 1, "", "characteristic"], [208, 2, 1, "", "exsqrt"], [208, 2, 1, "", "from_FF"], [208, 2, 1, "", "from_FF_gmpy"], [208, 2, 1, "", "from_FF_python"], [208, 2, 1, "", "from_QQ"], [208, 2, 1, "", "from_QQ_gmpy"], [208, 2, 1, "", "from_QQ_python"], [208, 2, 1, "", "from_RealField"], [208, 2, 1, "", "from_ZZ"], [208, 2, 1, "", "from_ZZ_gmpy"], [208, 2, 1, "", "from_ZZ_python"], [208, 2, 1, "", "from_sympy"], [208, 2, 1, "", "get_field"], [208, 2, 1, "", "is_square"], [208, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FractionField": [[208, 2, 1, "", "denom"], [208, 2, 1, "", "factorial"], [208, 2, 1, "", "from_AlgebraicField"], [208, 2, 1, "", "from_ComplexField"], [208, 2, 1, "", "from_FractionField"], [208, 2, 1, "", "from_GaussianIntegerRing"], [208, 2, 1, "", "from_GaussianRationalField"], [208, 2, 1, "", "from_PolynomialRing"], [208, 2, 1, "", "from_QQ"], [208, 2, 1, "", "from_QQ_gmpy"], [208, 2, 1, "", "from_QQ_python"], [208, 2, 1, "", "from_RealField"], [208, 2, 1, "", "from_ZZ"], [208, 2, 1, "", "from_ZZ_gmpy"], [208, 2, 1, "", "from_ZZ_python"], [208, 2, 1, "", "from_sympy"], [208, 2, 1, "", "get_ring"], [208, 2, 1, "", "is_negative"], [208, 2, 1, "", "is_nonnegative"], [208, 2, 1, "", "is_nonpositive"], [208, 2, 1, "", "is_positive"], [208, 2, 1, "", "numer"], [208, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYIntegerRing": [[208, 2, 1, "", "factorial"], [208, 2, 1, "", "from_FF_gmpy"], [208, 2, 1, "", "from_FF_python"], [208, 2, 1, "", "from_QQ"], [208, 2, 1, "", "from_QQ_gmpy"], [208, 2, 1, "", "from_QQ_python"], [208, 2, 1, "", "from_RealField"], [208, 2, 1, "", "from_ZZ_gmpy"], [208, 2, 1, "", "from_ZZ_python"], [208, 2, 1, "", "from_sympy"], [208, 2, 1, "", "gcd"], [208, 2, 1, "", "gcdex"], [208, 2, 1, "", "lcm"], [208, 2, 1, "", "sqrt"], [208, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYRationalField": [[208, 2, 1, "", "denom"], [208, 2, 1, "", "div"], [208, 2, 1, "", "exquo"], [208, 2, 1, "", "factorial"], [208, 2, 1, "", "from_GaussianRationalField"], [208, 2, 1, "", "from_QQ_gmpy"], [208, 2, 1, "", "from_QQ_python"], [208, 2, 1, "", "from_RealField"], [208, 2, 1, "", "from_ZZ_gmpy"], [208, 2, 1, "", "from_ZZ_python"], [208, 2, 1, "", "from_sympy"], [208, 2, 1, "", "get_ring"], [208, 2, 1, "", "numer"], [208, 2, 1, "", "quo"], [208, 2, 1, "", "rem"], [208, 2, 1, "", "to_sympy"]], "sympy.polys.domains.IntegerRing": [[208, 2, 1, "", "algebraic_field"], [208, 2, 1, "", "exsqrt"], [208, 2, 1, "", "factorial"], [208, 2, 1, "", "from_AlgebraicField"], [208, 2, 1, "", "from_FF"], [208, 2, 1, "", "from_FF_gmpy"], [208, 2, 1, "", "from_FF_python"], [208, 2, 1, "", "from_QQ"], [208, 2, 1, "", "from_QQ_gmpy"], [208, 2, 1, "", "from_QQ_python"], [208, 2, 1, "", "from_RealField"], [208, 2, 1, "", "from_ZZ"], [208, 2, 1, "", "from_ZZ_gmpy"], [208, 2, 1, "", "from_ZZ_python"], [208, 2, 1, "", "from_sympy"], [208, 2, 1, "", "gcd"], [208, 2, 1, "", "gcdex"], [208, 2, 1, "", "get_field"], [208, 2, 1, "", "is_square"], [208, 2, 1, "", "lcm"], [208, 2, 1, "", "log"], [208, 2, 1, "", "sqrt"], [208, 2, 1, "", "to_sympy"]], "sympy.polys.domains.PolynomialRing": [[208, 2, 1, "", "factorial"], [208, 2, 1, "", "from_AlgebraicField"], [208, 2, 1, "", "from_ComplexField"], [208, 2, 1, "", "from_FractionField"], [208, 2, 1, "", "from_GaussianIntegerRing"], [208, 2, 1, "", "from_GaussianRationalField"], [208, 2, 1, "", "from_GlobalPolynomialRing"], [208, 2, 1, "", "from_PolynomialRing"], [208, 2, 1, "", "from_QQ"], [208, 2, 1, "", "from_QQ_gmpy"], [208, 2, 1, "", "from_QQ_python"], [208, 2, 1, "", "from_RealField"], [208, 2, 1, "", "from_ZZ"], [208, 2, 1, "", "from_ZZ_gmpy"], [208, 2, 1, "", "from_ZZ_python"], [208, 2, 1, "", "from_sympy"], [208, 2, 1, "", "gcd"], [208, 2, 1, "", "gcdex"], [208, 2, 1, "", "get_field"], [208, 2, 1, "", "is_negative"], [208, 2, 1, "", "is_nonnegative"], [208, 2, 1, "", "is_nonpositive"], [208, 2, 1, "", "is_positive"], [208, 2, 1, "", "is_unit"], [208, 2, 1, "", "lcm"], [208, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RationalField": [[208, 2, 1, "", "algebraic_field"], [208, 2, 1, "", "denom"], [208, 2, 1, "", "div"], [208, 2, 1, "", "exquo"], [208, 2, 1, "", "exsqrt"], [208, 2, 1, "", "from_AlgebraicField"], [208, 2, 1, "", "from_GaussianRationalField"], [208, 2, 1, "", "from_QQ"], [208, 2, 1, "", "from_QQ_gmpy"], [208, 2, 1, "", "from_QQ_python"], [208, 2, 1, "", "from_RealField"], [208, 2, 1, "", "from_ZZ"], [208, 2, 1, "", "from_ZZ_gmpy"], [208, 2, 1, "", "from_ZZ_python"], [208, 2, 1, "", "from_sympy"], [208, 2, 1, "", "get_ring"], [208, 2, 1, "", "is_square"], [208, 2, 1, "", "numer"], [208, 2, 1, "", "quo"], [208, 2, 1, "", "rem"], [208, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RealField": [[208, 2, 1, "", "almosteq"], [208, 2, 1, "", "exsqrt"], [208, 2, 1, "", "from_sympy"], [208, 2, 1, "", "gcd"], [208, 2, 1, "", "get_exact"], [208, 2, 1, "", "get_ring"], [208, 2, 1, "", "is_square"], [208, 2, 1, "", "lcm"], [208, 2, 1, "", "to_rational"], [208, 2, 1, "", "to_sympy"]], "sympy.polys.domains.compositedomain": [[208, 1, 1, "", "CompositeDomain"]], "sympy.polys.domains.compositedomain.CompositeDomain": [[208, 2, 1, "", "drop"], [208, 2, 1, "", "inject"]], "sympy.polys.domains.domain": [[208, 1, 1, "", "Domain"]], "sympy.polys.domains.domain.Domain": [[208, 2, 1, "", "abs"], [208, 2, 1, "", "add"], [208, 2, 1, "", "alg_field_from_poly"], [208, 2, 1, "", "algebraic_field"], [208, 2, 1, "", "almosteq"], [208, 2, 1, "", "characteristic"], [208, 2, 1, "", "cofactors"], [208, 2, 1, "", "convert"], [208, 2, 1, "", "convert_from"], [208, 2, 1, "", "cyclotomic_field"], [208, 2, 1, "", "denom"], [208, 2, 1, "", "div"], [208, 2, 1, "", "drop"], [208, 5, 1, "", "dtype"], [208, 2, 1, "", "evalf"], [208, 2, 1, "", "exquo"], [208, 2, 1, "", "exsqrt"], [208, 2, 1, "", "frac_field"], [208, 2, 1, "", "from_AlgebraicField"], [208, 2, 1, "", "from_ComplexField"], [208, 2, 1, "", "from_ExpressionDomain"], [208, 2, 1, "", "from_ExpressionRawDomain"], [208, 2, 1, "", "from_FF"], [208, 2, 1, "", "from_FF_gmpy"], [208, 2, 1, "", "from_FF_python"], [208, 2, 1, "", "from_FractionField"], [208, 2, 1, "", "from_GlobalPolynomialRing"], [208, 2, 1, "", "from_MonogenicFiniteExtension"], [208, 2, 1, "", "from_PolynomialRing"], [208, 2, 1, "", "from_QQ_gmpy"], [208, 2, 1, "", "from_QQ_python"], [208, 2, 1, "", "from_RealField"], [208, 2, 1, "", "from_ZZ_gmpy"], [208, 2, 1, "", "from_ZZ_python"], [208, 2, 1, "", "from_sympy"], [208, 2, 1, "", "gcd"], [208, 2, 1, "", "gcdex"], [208, 2, 1, "", "get_exact"], [208, 2, 1, "", "get_field"], [208, 2, 1, "", "get_ring"], [208, 2, 1, "", "half_gcdex"], [208, 5, 1, "", "has_assoc_Field"], [208, 5, 1, "", "has_assoc_Ring"], [208, 2, 1, "", "inject"], [208, 2, 1, "", "invert"], [208, 5, 1, "", "is_Field"], [208, 5, 1, "", "is_PID"], [208, 5, 1, "", "is_Ring"], [208, 2, 1, "", "is_negative"], [208, 2, 1, "", "is_nonnegative"], [208, 2, 1, "", "is_nonpositive"], [208, 2, 1, "", "is_one"], [208, 2, 1, "", "is_positive"], [208, 2, 1, "", "is_square"], [208, 2, 1, "", "is_zero"], [208, 2, 1, "", "lcm"], [208, 2, 1, "", "log"], [208, 2, 1, "", "map"], [208, 2, 1, "", "mul"], [208, 2, 1, "", "n"], [208, 2, 1, "", "neg"], [208, 2, 1, "", "numer"], [208, 2, 1, "", "of_type"], [208, 2, 1, "", "old_frac_field"], [208, 2, 1, "", "old_poly_ring"], [208, 5, 1, "", "one"], [208, 2, 1, "", "poly_ring"], [208, 2, 1, "", "pos"], [208, 2, 1, "", "pow"], [208, 2, 1, "", "quo"], [208, 2, 1, "", "rem"], [208, 2, 1, "", "revert"], [208, 2, 1, "", "sqrt"], [208, 2, 1, "", "sub"], [208, 2, 1, "", "to_sympy"], [208, 3, 1, "", "tp"], [208, 2, 1, "", "unify"], [208, 5, 1, "", "zero"]], "sympy.polys.domains.domainelement": [[208, 1, 1, "", "DomainElement"]], "sympy.polys.domains.domainelement.DomainElement": [[208, 2, 1, "", "parent"]], "sympy.polys.domains.expressiondomain.ExpressionDomain": [[208, 1, 1, "", "Expression"]], "sympy.polys.domains.field": [[208, 1, 1, "", "Field"]], "sympy.polys.domains.field.Field": [[208, 2, 1, "", "div"], [208, 2, 1, "", "exquo"], [208, 2, 1, "", "gcd"], [208, 2, 1, "", "get_field"], [208, 2, 1, "", "get_ring"], [208, 2, 1, "", "is_unit"], [208, 2, 1, "", "lcm"], [208, 2, 1, "", "quo"], [208, 2, 1, "", "rem"], [208, 2, 1, "", "revert"]], "sympy.polys.domains.gaussiandomains": [[208, 1, 1, "", "GaussianDomain"], [208, 1, 1, "", "GaussianElement"], [208, 1, 1, "", "GaussianInteger"], [208, 1, 1, "", "GaussianIntegerRing"], [208, 1, 1, "", "GaussianRational"], [208, 1, 1, "", "GaussianRationalField"]], "sympy.polys.domains.gaussiandomains.GaussianDomain": [[208, 2, 1, "", "from_AlgebraicField"], [208, 2, 1, "", "from_QQ"], [208, 2, 1, "", "from_QQ_gmpy"], [208, 2, 1, "", "from_QQ_python"], [208, 2, 1, "", "from_ZZ"], [208, 2, 1, "", "from_ZZ_gmpy"], [208, 2, 1, "", "from_ZZ_python"], [208, 2, 1, "", "from_sympy"], [208, 2, 1, "", "inject"], [208, 2, 1, "", "is_negative"], [208, 2, 1, "", "is_nonnegative"], [208, 2, 1, "", "is_nonpositive"], [208, 2, 1, "", "is_positive"], [208, 2, 1, "", "to_sympy"]], "sympy.polys.domains.gaussiandomains.GaussianElement": [[208, 2, 1, "", "new"], [208, 2, 1, "", "parent"], [208, 2, 1, "", "quadrant"]], "sympy.polys.domains.gaussiandomains.GaussianIntegerRing": [[208, 5, 1, "", "dtype"], [208, 2, 1, "", "from_GaussianIntegerRing"], [208, 2, 1, "", "from_GaussianRationalField"], [208, 2, 1, "", "gcd"], [208, 2, 1, "", "get_field"], [208, 2, 1, "", "get_ring"], [208, 2, 1, "", "lcm"], [208, 2, 1, "", "normalize"]], "sympy.polys.domains.gaussiandomains.GaussianRationalField": [[208, 2, 1, "", "as_AlgebraicField"], [208, 2, 1, "", "denom"], [208, 5, 1, "", "dtype"], [208, 2, 1, "", "from_GaussianIntegerRing"], [208, 2, 1, "", "from_GaussianRationalField"], [208, 2, 1, "", "get_field"], [208, 2, 1, "", "get_ring"], [208, 2, 1, "", "numer"]], "sympy.polys.domains.mpelements": [[208, 1, 1, "", "ComplexElement"], [208, 1, 1, "", "RealElement"]], "sympy.polys.domains.quotientring": [[208, 1, 1, "", "QuotientRing"]], "sympy.polys.domains.ring": [[208, 1, 1, "", "Ring"]], "sympy.polys.domains.ring.Ring": [[208, 2, 1, "", "denom"], [208, 2, 1, "", "div"], [208, 2, 1, "", "exquo"], [208, 2, 1, "", "free_module"], [208, 2, 1, "", "get_ring"], [208, 2, 1, "", "ideal"], [208, 2, 1, "", "invert"], [208, 2, 1, "", "numer"], [208, 2, 1, "", "quo"], [208, 2, 1, "", "quotient_ring"], [208, 2, 1, "", "rem"], [208, 2, 1, "", "revert"]], "sympy.polys.domains.simpledomain": [[208, 1, 1, "", "SimpleDomain"]], "sympy.polys.domains.simpledomain.SimpleDomain": [[208, 2, 1, "", "inject"]], "sympy.polys.euclidtools": [[210, 4, 1, "", "dmp_cancel"], [210, 4, 1, "", "dmp_content"], [210, 4, 1, "", "dmp_discriminant"], [210, 4, 1, "", "dmp_euclidean_prs"], [210, 4, 1, "", "dmp_ff_prs_gcd"], [210, 4, 1, "", "dmp_gcd"], [210, 4, 1, "", "dmp_gcdex"], [210, 4, 1, "", "dmp_half_gcdex"], [210, 4, 1, "", "dmp_inner_gcd"], [210, 4, 1, "", "dmp_inner_subresultants"], [210, 4, 1, "", "dmp_invert"], [210, 4, 1, "", "dmp_lcm"], [210, 4, 1, "", "dmp_primitive"], [210, 4, 1, "", "dmp_primitive_prs"], [210, 4, 1, "", "dmp_prs_resultant"], [210, 4, 1, "", "dmp_qq_collins_resultant"], [210, 4, 1, "", "dmp_qq_heu_gcd"], [210, 4, 1, "", "dmp_resultant"], [210, 4, 1, "", "dmp_rr_prs_gcd"], [210, 4, 1, "", "dmp_subresultants"], [210, 4, 1, "", "dmp_zz_collins_resultant"], [210, 4, 1, "", "dmp_zz_heu_gcd"], [210, 4, 1, "", "dmp_zz_modular_resultant"]], "sympy.polys.factortools": [[210, 4, 1, "", "dmp_ext_factor"], [210, 4, 1, "", "dmp_factor_list"], [210, 4, 1, "", "dmp_factor_list_include"], [210, 4, 1, "", "dmp_irreducible_p"], [210, 4, 1, "", "dmp_trial_division"], [210, 4, 1, "", "dmp_zz_diophantine"], [210, 4, 1, "", "dmp_zz_factor"], [210, 4, 1, "", "dmp_zz_mignotte_bound"], [210, 4, 1, "", "dmp_zz_wang"], [210, 4, 1, "", "dmp_zz_wang_hensel_lifting"], [210, 4, 1, "", "dmp_zz_wang_lead_coeffs"], [210, 4, 1, "", "dmp_zz_wang_non_divisors"], [210, 4, 1, "", "dmp_zz_wang_test_points"], [210, 4, 1, "", "dup_cyclotomic_p"], [210, 4, 1, "", "dup_gf_factor"], [210, 4, 1, "", "dup_zz_cyclotomic_factor"], [210, 4, 1, "", "dup_zz_cyclotomic_poly"], [210, 4, 1, "", "dup_zz_factor"], [210, 4, 1, "", "dup_zz_factor_sqf"], [210, 4, 1, "", "dup_zz_hensel_lift"], [210, 4, 1, "", "dup_zz_hensel_step"], [210, 4, 1, "", "dup_zz_irreducible_p"], [210, 4, 1, "", "dup_zz_zassenhaus"]], "sympy.polys.fglmtools": [[210, 4, 1, "", "matrix_fglm"]], "sympy.polys.fields": [[208, 1, 1, "", "FracElement"], [208, 1, 1, "", "FracField"], [208, 4, 1, "", "field"], [208, 4, 1, "", "sfield"], [208, 4, 1, "", "vfield"], [208, 4, 1, "", "xfield"]], "sympy.polys.fields.FracElement": [[208, 2, 1, "", "diff"]], "sympy.polys.galoistools": [[210, 4, 1, "", "gf_LC"], [210, 4, 1, "", "gf_Qbasis"], [210, 4, 1, "", "gf_Qmatrix"], [210, 4, 1, "", "gf_TC"], [210, 4, 1, "", "gf_add"], [210, 4, 1, "", "gf_add_ground"], [210, 4, 1, "", "gf_add_mul"], [210, 4, 1, "", "gf_berlekamp"], [210, 4, 1, "", "gf_cofactors"], [210, 4, 1, "", "gf_compose"], [210, 4, 1, "", "gf_compose_mod"], [210, 4, 1, "", "gf_crt"], [210, 4, 1, "", "gf_crt1"], [210, 4, 1, "", "gf_crt2"], [210, 4, 1, "", "gf_csolve"], [210, 4, 1, "", "gf_degree"], [210, 4, 1, "", "gf_diff"], [210, 4, 1, "", "gf_div"], [210, 4, 1, "", "gf_eval"], [210, 4, 1, "", "gf_expand"], [210, 4, 1, "", "gf_exquo"], [210, 4, 1, "", "gf_factor"], [210, 4, 1, "", "gf_factor_sqf"], [210, 4, 1, "", "gf_from_dict"], [210, 4, 1, "", "gf_from_int_poly"], [210, 4, 1, "", "gf_gcd"], [210, 4, 1, "", "gf_gcdex"], [210, 4, 1, "", "gf_int"], [210, 4, 1, "", "gf_irreducible"], [210, 4, 1, "", "gf_irreducible_p"], [210, 4, 1, "", "gf_lcm"], [210, 4, 1, "", "gf_lshift"], [210, 4, 1, "", "gf_monic"], [210, 4, 1, "", "gf_mul"], [210, 4, 1, "", "gf_mul_ground"], [210, 4, 1, "", "gf_multi_eval"], [210, 4, 1, "", "gf_neg"], [210, 4, 1, "", "gf_normal"], [210, 4, 1, "", "gf_pow"], [210, 4, 1, "", "gf_pow_mod"], [210, 4, 1, "", "gf_quo"], [210, 4, 1, "", "gf_quo_ground"], [210, 4, 1, "", "gf_random"], [210, 4, 1, "", "gf_rem"], [210, 4, 1, "", "gf_rshift"], [210, 4, 1, "", "gf_shoup"], [210, 4, 1, "", "gf_sqf_list"], [210, 4, 1, "", "gf_sqf_p"], [210, 4, 1, "", "gf_sqf_part"], [210, 4, 1, "", "gf_sqr"], [210, 4, 1, "", "gf_strip"], [210, 4, 1, "", "gf_sub"], [210, 4, 1, "", "gf_sub_ground"], [210, 4, 1, "", "gf_sub_mul"], [210, 4, 1, "", "gf_to_dict"], [210, 4, 1, "", "gf_to_int_poly"], [210, 4, 1, "", "gf_trace_map"], [210, 4, 1, "", "gf_trunc"], [210, 4, 1, "", "gf_value"], [210, 4, 1, "", "gf_zassenhaus"]], "sympy.polys.groebnertools": [[210, 4, 1, "", "groebner"], [210, 4, 1, "", "is_groebner"], [210, 4, 1, "", "is_minimal"], [210, 4, 1, "", "is_reduced"], [210, 4, 1, "", "red_groebner"], [210, 4, 1, "", "spoly"]], "sympy.polys.matrices": [[206, 0, 0, "-", "_typing"], [206, 0, 0, "-", "ddm"], [206, 0, 0, "-", "dense"], [206, 0, 0, "-", "domainmatrix"], [206, 0, 0, "-", "sdm"]], "sympy.polys.matrices._typing": [[206, 1, 1, "", "RingElement"]], "sympy.polys.matrices.ddm": [[206, 1, 1, "", "DDM"]], "sympy.polys.matrices.ddm.DDM": [[206, 2, 1, "", "add"], [206, 2, 1, "", "charpoly"], [206, 2, 1, "", "det"], [206, 2, 1, "", "from_dok"], [206, 2, 1, "", "from_flat_nz"], [206, 2, 1, "", "from_list_flat"], [206, 2, 1, "", "hstack"], [206, 2, 1, "", "inv"], [206, 2, 1, "", "is_lower"], [206, 2, 1, "", "is_upper"], [206, 2, 1, "", "is_zero_matrix"], [206, 2, 1, "", "lu"], [206, 2, 1, "", "lu_solve"], [206, 2, 1, "", "matmul"], [206, 2, 1, "", "neg"], [206, 2, 1, "", "rref"], [206, 2, 1, "", "rref_den"], [206, 2, 1, "", "scc"], [206, 2, 1, "", "sub"], [206, 2, 1, "", "to_dok"], [206, 2, 1, "", "to_flat_nz"], [206, 2, 1, "", "to_list_flat"], [206, 2, 1, "", "to_sdm"], [206, 2, 1, "", "vstack"]], "sympy.polys.matrices.dense": [[206, 1, 1, "", "R"], [206, 1, 1, "", "T"], [206, 4, 1, "", "ddm_berk"], [206, 4, 1, "", "ddm_iadd"], [206, 4, 1, "", "ddm_idet"], [206, 4, 1, "", "ddm_iinv"], [206, 4, 1, "", "ddm_ilu"], [206, 4, 1, "", "ddm_ilu_solve"], [206, 4, 1, "", "ddm_ilu_split"], [206, 4, 1, "", "ddm_imatmul"], [206, 4, 1, "", "ddm_imul"], [206, 4, 1, "", "ddm_ineg"], [206, 4, 1, "", "ddm_irmul"], [206, 4, 1, "", "ddm_irref"], [206, 4, 1, "", "ddm_irref_den"], [206, 4, 1, "", "ddm_isub"], [206, 4, 1, "", "ddm_transpose"]], "sympy.polys.matrices.domainmatrix": [[206, 4, 1, "", "DM"], [206, 1, 1, "", "DomainMatrix"]], "sympy.polys.matrices.domainmatrix.DomainMatrix": [[206, 2, 1, "", "add"], [206, 2, 1, "", "adj_det"], [206, 2, 1, "", "adj_poly_det"], [206, 2, 1, "", "adjugate"], [206, 2, 1, "", "charpoly"], [206, 2, 1, "", "choose_domain"], [206, 2, 1, "", "clear_denoms"], [206, 2, 1, "", "columnspace"], [206, 2, 1, "", "convert_to"], [206, 2, 1, "", "det"], [206, 2, 1, "", "diag"], [206, 2, 1, "", "eval_poly"], [206, 2, 1, "", "eval_poly_mul"], [206, 2, 1, "", "eye"], [206, 2, 1, "", "from_Matrix"], [206, 2, 1, "", "from_dict_sympy"], [206, 2, 1, "", "from_dok"], [206, 2, 1, "", "from_flat_nz"], [206, 2, 1, "", "from_list"], [206, 2, 1, "", "from_list_flat"], [206, 2, 1, "", "from_list_sympy"], [206, 2, 1, "", "from_rep"], [206, 2, 1, "", "hstack"], [206, 2, 1, "", "inv"], [206, 2, 1, "", "inv_den"], [206, 3, 1, "", "is_lower"], [206, 3, 1, "", "is_upper"], [206, 2, 1, "", "lll"], [206, 2, 1, "", "lll_transform"], [206, 2, 1, "", "lu"], [206, 2, 1, "", "lu_solve"], [206, 2, 1, "", "matmul"], [206, 2, 1, "", "mul"], [206, 2, 1, "", "neg"], [206, 2, 1, "", "nullspace"], [206, 2, 1, "", "ones"], [206, 2, 1, "", "pow"], [206, 2, 1, "", "rowspace"], [206, 2, 1, "", "rref"], [206, 2, 1, "", "rref_den"], [206, 2, 1, "", "scc"], [206, 2, 1, "", "solve_den"], [206, 2, 1, "", "solve_den_charpoly"], [206, 2, 1, "", "solve_den_rref"], [206, 2, 1, "", "sub"], [206, 2, 1, "", "to_Matrix"], [206, 2, 1, "", "to_ddm"], [206, 2, 1, "", "to_dense"], [206, 2, 1, "", "to_dok"], [206, 2, 1, "", "to_field"], [206, 2, 1, "", "to_flat_nz"], [206, 2, 1, "", "to_list"], [206, 2, 1, "", "to_list_flat"], [206, 2, 1, "", "to_sdm"], [206, 2, 1, "", "to_sparse"], [206, 2, 1, "", "transpose"], [206, 2, 1, "", "unify"], [206, 2, 1, "", "vstack"], [206, 2, 1, "", "zeros"]], "sympy.polys.matrices.normalforms": [[206, 4, 1, "", "hermite_normal_form"], [206, 4, 1, "", "smith_normal_form"]], "sympy.polys.matrices.sdm": [[206, 1, 1, "", "SDM"], [206, 4, 1, "", "sdm_irref"], [206, 4, 1, "", "sdm_nullspace_from_rref"], [206, 4, 1, "", "sdm_particular_from_rref"]], "sympy.polys.matrices.sdm.SDM": [[206, 2, 1, "", "add"], [206, 2, 1, "", "charpoly"], [206, 2, 1, "", "convert_to"], [206, 2, 1, "", "copy"], [206, 2, 1, "", "det"], [206, 2, 1, "", "eye"], [206, 2, 1, "", "from_ddm"], [206, 2, 1, "", "from_dok"], [206, 2, 1, "", "from_flat_nz"], [206, 2, 1, "", "from_list"], [206, 2, 1, "", "from_list_flat"], [206, 2, 1, "", "hstack"], [206, 2, 1, "", "inv"], [206, 2, 1, "", "is_lower"], [206, 2, 1, "", "is_upper"], [206, 2, 1, "", "is_zero_matrix"], [206, 2, 1, "", "lu"], [206, 2, 1, "", "lu_solve"], [206, 2, 1, "", "matmul"], [206, 2, 1, "", "mul"], [206, 2, 1, "", "neg"], [206, 2, 1, "", "new"], [206, 2, 1, "", "nullspace"], [206, 2, 1, "", "rref"], [206, 2, 1, "", "rref_den"], [206, 2, 1, "", "scc"], [206, 2, 1, "", "sub"], [206, 2, 1, "", "to_ddm"], [206, 2, 1, "", "to_dok"], [206, 2, 1, "", "to_flat_nz"], [206, 2, 1, "", "to_list"], [206, 2, 1, "", "to_list_flat"], [206, 2, 1, "", "transpose"], [206, 2, 1, "", "vstack"], [206, 2, 1, "", "zeros"]], "sympy.polys.modulargcd": [[210, 4, 1, "", "_modgcd_multivariate_p"], [210, 4, 1, "", "func_field_modgcd"], [210, 4, 1, "", "modgcd_bivariate"], [210, 4, 1, "", "modgcd_multivariate"], [210, 4, 1, "", "modgcd_univariate"]], "sympy.polys.monomials": [[213, 1, 1, "", "Monomial"], [213, 4, 1, "", "itermonomials"], [213, 4, 1, "", "monomial_count"]], "sympy.polys.monomials.Monomial": [[213, 2, 1, "", "as_expr"], [213, 2, 1, "", "gcd"], [213, 2, 1, "", "lcm"]], "sympy.polys.numberfields.basis": [[212, 4, 1, "", "round_two"]], "sympy.polys.numberfields.galoisgroups": [[212, 4, 1, "", "galois_group"]], "sympy.polys.numberfields.minpoly": [[212, 4, 1, "", "minimal_polynomial"], [212, 4, 1, "", "minpoly"]], "sympy.polys.numberfields": [[212, 0, 0, "-", "modules"], [212, 0, 0, "-", "subfield"]], "sympy.polys.numberfields.modules": [[212, 1, 1, "", "EndomorphismRing"], [212, 1, 1, "", "InnerEndomorphism"], [212, 1, 1, "", "Module"], [212, 1, 1, "", "ModuleElement"], [212, 1, 1, "", "ModuleEndomorphism"], [212, 1, 1, "", "ModuleHomomorphism"], [212, 1, 1, "", "PowerBasis"], [212, 1, 1, "", "PowerBasisElement"], [212, 1, 1, "", "Submodule"], [212, 4, 1, "", "find_min_poly"], [212, 4, 1, "", "make_mod_elt"]], "sympy.polys.numberfields.modules.EndomorphismRing": [[212, 2, 1, "", "__init__"], [212, 2, 1, "", "inner_endomorphism"], [212, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.InnerEndomorphism": [[212, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.Module": [[212, 2, 1, "", "__call__"], [212, 2, 1, "", "ancestors"], [212, 2, 1, "", "basis_elements"], [212, 2, 1, "", "element_from_rational"], [212, 2, 1, "", "endomorphism_ring"], [212, 2, 1, "", "is_compat_col"], [212, 2, 1, "", "mult_tab"], [212, 3, 1, "", "n"], [212, 2, 1, "", "nearest_common_ancestor"], [212, 3, 1, "", "number_field"], [212, 2, 1, "", "one"], [212, 3, 1, "", "parent"], [212, 2, 1, "", "power_basis_ancestor"], [212, 2, 1, "", "represent"], [212, 2, 1, "", "starts_with_unity"], [212, 2, 1, "", "submodule_from_gens"], [212, 2, 1, "", "submodule_from_matrix"], [212, 2, 1, "", "whole_submodule"], [212, 2, 1, "", "zero"]], "sympy.polys.numberfields.modules.ModuleElement": [[212, 3, 1, "", "QQ_col"], [212, 2, 1, "", "__add__"], [212, 2, 1, "", "__init__"], [212, 2, 1, "", "__mod__"], [212, 2, 1, "", "__mul__"], [212, 2, 1, "", "column"], [212, 2, 1, "", "equiv"], [212, 2, 1, "", "from_int_list"], [212, 2, 1, "", "is_compat"], [212, 3, 1, "", "n"], [212, 2, 1, "", "over_power_basis"], [212, 2, 1, "", "reduced"], [212, 2, 1, "", "reduced_mod_p"], [212, 2, 1, "", "to_ancestor"], [212, 2, 1, "", "to_parent"], [212, 2, 1, "", "unify"]], "sympy.polys.numberfields.modules.ModuleEndomorphism": [[212, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.ModuleHomomorphism": [[212, 2, 1, "", "__init__"], [212, 2, 1, "", "kernel"], [212, 2, 1, "", "matrix"]], "sympy.polys.numberfields.modules.PowerBasis": [[212, 2, 1, "", "__init__"], [212, 2, 1, "", "element_from_ANP"], [212, 2, 1, "", "element_from_alg_num"], [212, 2, 1, "", "element_from_poly"], [212, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.PowerBasisElement": [[212, 3, 1, "", "T"], [212, 2, 1, "", "as_expr"], [212, 3, 1, "", "generator"], [212, 3, 1, "", "is_rational"], [212, 2, 1, "", "norm"], [212, 2, 1, "", "numerator"], [212, 2, 1, "", "poly"], [212, 2, 1, "", "to_ANP"], [212, 2, 1, "", "to_alg_num"]], "sympy.polys.numberfields.modules.Submodule": [[212, 3, 1, "", "QQ_matrix"], [212, 2, 1, "", "__init__"], [212, 2, 1, "", "add"], [212, 2, 1, "", "basis_element_pullbacks"], [212, 2, 1, "", "discard_before"], [212, 2, 1, "", "mul"], [212, 2, 1, "", "reduce_element"], [212, 2, 1, "", "reduced"], [212, 2, 1, "", "represent"]], "sympy.polys.numberfields.primes": [[212, 1, 1, "", "PrimeIdeal"], [212, 4, 1, "", "prime_decomp"], [212, 4, 1, "", "prime_valuation"]], "sympy.polys.numberfields.primes.PrimeIdeal": [[212, 2, 1, "", "__add__"], [212, 2, 1, "", "__init__"], [212, 2, 1, "", "__mul__"], [212, 2, 1, "", "as_submodule"], [212, 3, 1, "", "is_inert"], [212, 2, 1, "", "reduce_ANP"], [212, 2, 1, "", "reduce_alg_num"], [212, 2, 1, "", "reduce_element"], [212, 2, 1, "", "repr"], [212, 2, 1, "", "test_factor"], [212, 2, 1, "", "valuation"]], "sympy.polys.numberfields.subfield": [[212, 4, 1, "", "field_isomorphism"], [212, 4, 1, "", "primitive_element"], [212, 4, 1, "", "to_number_field"]], "sympy.polys.numberfields.utilities": [[212, 1, 1, "", "AlgIntPowers"], [212, 4, 1, "", "coeff_search"], [212, 4, 1, "", "extract_fundamental_discriminant"], [212, 4, 1, "", "get_num_denom"], [212, 4, 1, "", "is_int"], [212, 4, 1, "", "is_rat"], [212, 4, 1, "", "isolate"], [212, 4, 1, "", "supplement_a_subspace"]], "sympy.polys.numberfields.utilities.AlgIntPowers": [[212, 2, 1, "", "__init__"]], "sympy.polys.orderings": [[213, 1, 1, "", "GradedLexOrder"], [213, 1, 1, "", "LexOrder"], [213, 1, 1, "", "MonomialOrder"], [213, 1, 1, "", "ReversedGradedLexOrder"]], "sympy.polys.orthopolys": [[213, 4, 1, "", "chebyshevt_poly"], [213, 4, 1, "", "chebyshevu_poly"], [213, 4, 1, "", "gegenbauer_poly"], [213, 4, 1, "", "hermite_poly"], [213, 4, 1, "", "hermite_prob_poly"], [213, 4, 1, "", "jacobi_poly"], [213, 4, 1, "", "laguerre_poly"], [213, 4, 1, "", "legendre_poly"], [213, 4, 1, "", "spherical_bessel_fn"]], "sympy.polys.partfrac": [[213, 4, 1, "", "apart"], [213, 4, 1, "", "apart_list"], [213, 4, 1, "", "assemble_partfrac_list"]], "sympy.polys.polyclasses": [[208, 1, 1, "", "ANP"], [208, 1, 1, "", "DMF"], [208, 1, 1, "", "DMP"]], "sympy.polys.polyclasses.ANP": [[208, 2, 1, "", "LC"], [208, 2, 1, "", "TC"], [208, 3, 1, "", "is_ground"], [208, 3, 1, "", "is_one"], [208, 3, 1, "", "is_zero"], [208, 2, 1, "", "pow"], [208, 2, 1, "", "to_dict"], [208, 2, 1, "", "to_list"], [208, 2, 1, "", "to_sympy_dict"], [208, 2, 1, "", "to_sympy_list"], [208, 2, 1, "", "to_tuple"], [208, 2, 1, "", "unify"]], "sympy.polys.polyclasses.DMF": [[208, 2, 1, "", "add"], [208, 2, 1, "", "cancel"], [208, 2, 1, "", "denom"], [208, 2, 1, "", "exquo"], [208, 2, 1, "", "frac_unify"], [208, 2, 1, "", "half_per"], [208, 2, 1, "", "invert"], [208, 3, 1, "", "is_one"], [208, 3, 1, "", "is_zero"], [208, 2, 1, "", "mul"], [208, 2, 1, "", "neg"], [208, 2, 1, "", "numer"], [208, 2, 1, "", "per"], [208, 2, 1, "", "poly_unify"], [208, 2, 1, "", "pow"], [208, 2, 1, "", "quo"], [208, 2, 1, "", "sub"]], "sympy.polys.polyclasses.DMP": [[208, 2, 1, "", "LC"], [208, 2, 1, "", "TC"], [208, 2, 1, "", "abs"], [208, 2, 1, "", "add"], [208, 2, 1, "", "add_ground"], [208, 2, 1, "", "all_coeffs"], [208, 2, 1, "", "all_monoms"], [208, 2, 1, "", "all_terms"], [208, 2, 1, "", "cancel"], [208, 2, 1, "", "cauchy_lower_bound"], [208, 2, 1, "", "cauchy_upper_bound"], [208, 2, 1, "", "clear_denoms"], [208, 2, 1, "", "coeffs"], [208, 2, 1, "", "cofactors"], [208, 2, 1, "", "compose"], [208, 2, 1, "", "content"], [208, 2, 1, "", "convert"], [208, 2, 1, "", "count_complex_roots"], [208, 2, 1, "", "count_real_roots"], [208, 2, 1, "", "decompose"], [208, 2, 1, "", "deflate"], [208, 2, 1, "", "degree"], [208, 2, 1, "", "degree_list"], [208, 2, 1, "", "diff"], [208, 2, 1, "", "discriminant"], [208, 2, 1, "", "div"], [208, 2, 1, "", "eject"], [208, 2, 1, "", "eval"], [208, 2, 1, "", "exclude"], [208, 2, 1, "", "exquo"], [208, 2, 1, "", "exquo_ground"], [208, 2, 1, "", "factor_list"], [208, 2, 1, "", "factor_list_include"], [208, 2, 1, "", "from_dict"], [208, 2, 1, "", "from_list"], [208, 2, 1, "", "from_sympy_list"], [208, 2, 1, "", "gcd"], [208, 2, 1, "", "gcdex"], [208, 2, 1, "", "gff_list"], [208, 2, 1, "", "half_gcdex"], [208, 2, 1, "", "homogeneous_order"], [208, 2, 1, "", "homogenize"], [208, 2, 1, "", "inject"], [208, 2, 1, "", "integrate"], [208, 2, 1, "", "intervals"], [208, 2, 1, "", "invert"], [208, 3, 1, "", "is_cyclotomic"], [208, 3, 1, "", "is_ground"], [208, 3, 1, "", "is_homogeneous"], [208, 3, 1, "", "is_irreducible"], [208, 3, 1, "", "is_linear"], [208, 3, 1, "", "is_monic"], [208, 3, 1, "", "is_monomial"], [208, 3, 1, "", "is_one"], [208, 3, 1, "", "is_primitive"], [208, 3, 1, "", "is_quadratic"], [208, 3, 1, "", "is_sqf"], [208, 3, 1, "", "is_zero"], [208, 2, 1, "", "l1_norm"], [208, 2, 1, "", "l2_norm_squared"], [208, 2, 1, "", "lcm"], [208, 2, 1, "", "lift"], [208, 2, 1, "", "max_norm"], [208, 2, 1, "", "mignotte_sep_bound_squared"], [208, 2, 1, "", "monic"], [208, 2, 1, "", "monoms"], [208, 2, 1, "", "mul"], [208, 2, 1, "", "mul_ground"], [208, 2, 1, "", "neg"], [208, 2, 1, "", "norm"], [208, 2, 1, "", "nth"], [208, 2, 1, "", "pdiv"], [208, 2, 1, "", "per"], [208, 2, 1, "", "permute"], [208, 2, 1, "", "pexquo"], [208, 2, 1, "", "pow"], [208, 2, 1, "", "pquo"], [208, 2, 1, "", "prem"], [208, 2, 1, "", "primitive"], [208, 2, 1, "", "quo"], [208, 2, 1, "", "quo_ground"], [208, 2, 1, "", "refine_root"], [208, 2, 1, "", "rem"], [208, 2, 1, "", "resultant"], [208, 2, 1, "", "revert"], [208, 2, 1, "", "shift"], [208, 2, 1, "", "slice"], [208, 2, 1, "", "sqf_list"], [208, 2, 1, "", "sqf_list_include"], [208, 2, 1, "", "sqf_norm"], [208, 2, 1, "", "sqf_part"], [208, 2, 1, "", "sqr"], [208, 2, 1, "", "sturm"], [208, 2, 1, "", "sub"], [208, 2, 1, "", "sub_ground"], [208, 2, 1, "", "subresultants"], [208, 2, 1, "", "terms"], [208, 2, 1, "", "terms_gcd"], [208, 2, 1, "", "to_dict"], [208, 2, 1, "", "to_exact"], [208, 2, 1, "", "to_field"], [208, 2, 1, "", "to_list"], [208, 2, 1, "", "to_ring"], [208, 2, 1, "", "to_sympy_dict"], [208, 2, 1, "", "to_sympy_list"], [208, 2, 1, "", "to_tuple"], [208, 2, 1, "", "total_degree"], [208, 2, 1, "", "transform"], [208, 2, 1, "", "trunc"], [208, 2, 1, "", "unify"]], "sympy.polys": [[210, 0, 0, "-", "polyconfig"], [210, 0, 0, "-", "polyoptions"], [215, 0, 0, "-", "solvers"]], "sympy.polys.polyconfig": [[210, 4, 1, "", "setup"]], "sympy.polys.polyerrors": [[210, 1, 1, "", "BasePolynomialError"], [210, 1, 1, "", "CoercionFailed"], [210, 1, 1, "", "ComputationFailed"], [210, 1, 1, "", "DomainError"], [210, 1, 1, "", "EvaluationFailed"], [210, 1, 1, "", "ExactQuotientFailed"], [210, 1, 1, "", "ExtraneousFactors"], [210, 1, 1, "", "FlagError"], [210, 1, 1, "", "GeneratorsError"], [210, 1, 1, "", "GeneratorsNeeded"], [210, 1, 1, "", "HeuristicGCDFailed"], [210, 1, 1, "", "HomomorphismFailed"], [210, 1, 1, "", "IsomorphismFailed"], [210, 1, 1, "", "MultivariatePolynomialError"], [210, 1, 1, "", "NotAlgebraic"], [210, 1, 1, "", "NotInvertible"], [210, 1, 1, "", "NotReversible"], [210, 1, 1, "", "OperationNotSupported"], [210, 1, 1, "", "OptionError"], [210, 1, 1, "", "PolificationFailed"], [210, 1, 1, "", "PolynomialError"], [210, 1, 1, "", "RefinementFailed"], [210, 1, 1, "", "UnificationFailed"], [210, 1, 1, "", "UnivariatePolynomialError"]], "sympy.polys.polyfuncs": [[213, 4, 1, "", "horner"], [213, 4, 1, "", "interpolate"], [213, 4, 1, "", "symmetrize"], [213, 4, 1, "", "viete"]], "sympy.polys.polyoptions": [[210, 1, 1, "", "Options"], [210, 4, 1, "", "build_options"]], "sympy.polys.polyoptions.Options": [[210, 2, 1, "", "clone"]], "sympy.polys.polyroots": [[213, 4, 1, "", "roots"]], "sympy.polys.polytools": [[213, 1, 1, "", "GroebnerBasis"], [213, 4, 1, "", "LC"], [213, 4, 1, "", "LM"], [213, 4, 1, "", "LT"], [213, 1, 1, "", "Poly"], [213, 1, 1, "", "PurePoly"], [213, 4, 1, "", "all_roots"], [213, 4, 1, "", "cancel"], [213, 4, 1, "", "cofactors"], [213, 4, 1, "", "compose"], [213, 4, 1, "", "content"], [213, 4, 1, "", "count_roots"], [213, 4, 1, "", "decompose"], [213, 4, 1, "", "degree"], [213, 4, 1, "", "degree_list"], [213, 4, 1, "", "discriminant"], [213, 4, 1, "", "div"], [213, 4, 1, "", "exquo"], [213, 4, 1, "", "factor"], [213, 4, 1, "", "factor_list"], [213, 4, 1, "", "gcd"], [213, 4, 1, "", "gcd_list"], [213, 4, 1, "", "gcdex"], [213, 4, 1, "", "gff"], [213, 4, 1, "", "gff_list"], [213, 4, 1, "", "groebner"], [213, 4, 1, "", "ground_roots"], [213, 4, 1, "", "half_gcdex"], [213, 4, 1, "", "intervals"], [213, 4, 1, "", "invert"], [213, 4, 1, "", "is_zero_dimensional"], [213, 4, 1, "", "lcm"], [213, 4, 1, "", "lcm_list"], [213, 4, 1, "", "monic"], [213, 4, 1, "", "nroots"], [213, 4, 1, "", "nth_power_roots_poly"], [213, 4, 1, "", "parallel_poly_from_expr"], [213, 4, 1, "", "pdiv"], [213, 4, 1, "", "pexquo"], [213, 4, 1, "", "poly"], [213, 4, 1, "", "poly_from_expr"], [213, 4, 1, "", "pquo"], [213, 4, 1, "", "prem"], [213, 4, 1, "", "primitive"], [213, 4, 1, "", "quo"], [213, 4, 1, "", "real_roots"], [213, 4, 1, "", "reduced"], [213, 4, 1, "", "refine_root"], [213, 4, 1, "", "rem"], [213, 4, 1, "", "resultant"], [213, 4, 1, "", "sqf"], [213, 4, 1, "", "sqf_list"], [213, 4, 1, "", "sqf_norm"], [213, 4, 1, "", "sqf_part"], [213, 4, 1, "", "sturm"], [213, 4, 1, "", "subresultants"], [213, 4, 1, "", "terms_gcd"], [213, 4, 1, "", "trunc"]], "sympy.polys.polytools.GroebnerBasis": [[213, 2, 1, "", "contains"], [213, 2, 1, "", "fglm"], [213, 3, 1, "", "is_zero_dimensional"], [213, 2, 1, "", "reduce"]], "sympy.polys.polytools.Poly": [[213, 2, 1, "", "EC"], [213, 2, 1, "", "EM"], [213, 2, 1, "", "ET"], [213, 2, 1, "", "LC"], [213, 2, 1, "", "LM"], [213, 2, 1, "", "LT"], [213, 2, 1, "", "TC"], [213, 2, 1, "", "abs"], [213, 2, 1, "", "add"], [213, 2, 1, "", "add_ground"], [213, 2, 1, "", "all_coeffs"], [213, 2, 1, "", "all_monoms"], [213, 2, 1, "", "all_roots"], [213, 2, 1, "", "all_terms"], [213, 2, 1, "", "as_dict"], [213, 2, 1, "", "as_expr"], [213, 2, 1, "", "as_list"], [213, 2, 1, "", "as_poly"], [213, 2, 1, "", "cancel"], [213, 2, 1, "", "clear_denoms"], [213, 2, 1, "", "coeff_monomial"], [213, 2, 1, "", "coeffs"], [213, 2, 1, "", "cofactors"], [213, 2, 1, "", "compose"], [213, 2, 1, "", "content"], [213, 2, 1, "", "count_roots"], [213, 2, 1, "", "decompose"], [213, 2, 1, "", "deflate"], [213, 2, 1, "", "degree"], [213, 2, 1, "", "degree_list"], [213, 2, 1, "", "diff"], [213, 2, 1, "", "discriminant"], [213, 2, 1, "", "dispersion"], [213, 2, 1, "", "dispersionset"], [213, 2, 1, "", "div"], [213, 3, 1, "", "domain"], [213, 2, 1, "", "eject"], [213, 2, 1, "", "eval"], [213, 2, 1, "", "exclude"], [213, 2, 1, "", "exquo"], [213, 2, 1, "", "exquo_ground"], [213, 2, 1, "", "factor_list"], [213, 2, 1, "", "factor_list_include"], [213, 3, 1, "", "free_symbols"], [213, 3, 1, "", "free_symbols_in_domain"], [213, 2, 1, "", "from_dict"], [213, 2, 1, "", "from_expr"], [213, 2, 1, "", "from_list"], [213, 2, 1, "", "from_poly"], [213, 2, 1, "", "galois_group"], [213, 2, 1, "", "gcd"], [213, 2, 1, "", "gcdex"], [213, 3, 1, "", "gen"], [213, 2, 1, "", "get_domain"], [213, 2, 1, "", "get_modulus"], [213, 2, 1, "", "gff_list"], [213, 2, 1, "", "ground_roots"], [213, 2, 1, "", "half_gcdex"], [213, 2, 1, "", "has_only_gens"], [213, 2, 1, "", "homogeneous_order"], [213, 2, 1, "", "homogenize"], [213, 2, 1, "", "inject"], [213, 2, 1, "", "integrate"], [213, 2, 1, "", "intervals"], [213, 2, 1, "", "invert"], [213, 3, 1, "", "is_cyclotomic"], [213, 3, 1, "", "is_ground"], [213, 3, 1, "", "is_homogeneous"], [213, 3, 1, "", "is_irreducible"], [213, 3, 1, "", "is_linear"], [213, 3, 1, "", "is_monic"], [213, 3, 1, "", "is_monomial"], [213, 3, 1, "", "is_multivariate"], [213, 3, 1, "", "is_one"], [213, 3, 1, "", "is_primitive"], [213, 3, 1, "", "is_quadratic"], [213, 3, 1, "", "is_sqf"], [213, 3, 1, "", "is_univariate"], [213, 3, 1, "", "is_zero"], [213, 2, 1, "", "l1_norm"], [213, 2, 1, "", "lcm"], [213, 2, 1, "", "length"], [213, 2, 1, "", "lift"], [213, 2, 1, "", "ltrim"], [213, 2, 1, "", "make_monic_over_integers_by_scaling_roots"], [213, 2, 1, "", "match"], [213, 2, 1, "", "max_norm"], [213, 2, 1, "", "monic"], [213, 2, 1, "", "monoms"], [213, 2, 1, "", "mul"], [213, 2, 1, "", "mul_ground"], [213, 2, 1, "", "neg"], [213, 2, 1, "", "new"], [213, 2, 1, "", "norm"], [213, 2, 1, "", "nroots"], [213, 2, 1, "", "nth"], [213, 2, 1, "", "nth_power_roots_poly"], [213, 3, 1, "", "one"], [213, 2, 1, "", "pdiv"], [213, 2, 1, "", "per"], [213, 2, 1, "", "pexquo"], [213, 2, 1, "", "pow"], [213, 2, 1, "", "pquo"], [213, 2, 1, "", "prem"], [213, 2, 1, "", "primitive"], [213, 2, 1, "", "quo"], [213, 2, 1, "", "quo_ground"], [213, 2, 1, "", "rat_clear_denoms"], [213, 2, 1, "", "real_roots"], [213, 2, 1, "", "refine_root"], [213, 2, 1, "", "rem"], [213, 2, 1, "", "reorder"], [213, 2, 1, "", "replace"], [213, 2, 1, "", "resultant"], [213, 2, 1, "", "retract"], [213, 2, 1, "", "revert"], [213, 2, 1, "", "root"], [213, 2, 1, "", "same_root"], [213, 2, 1, "", "set_domain"], [213, 2, 1, "", "set_modulus"], [213, 2, 1, "", "shift"], [213, 2, 1, "", "slice"], [213, 2, 1, "", "sqf_list"], [213, 2, 1, "", "sqf_list_include"], [213, 2, 1, "", "sqf_norm"], [213, 2, 1, "", "sqf_part"], [213, 2, 1, "", "sqr"], [213, 2, 1, "", "sturm"], [213, 2, 1, "", "sub"], [213, 2, 1, "", "sub_ground"], [213, 2, 1, "", "subresultants"], [213, 2, 1, "", "terms"], [213, 2, 1, "", "terms_gcd"], [213, 2, 1, "", "termwise"], [213, 2, 1, "", "to_exact"], [213, 2, 1, "", "to_field"], [213, 2, 1, "", "to_ring"], [213, 2, 1, "", "total_degree"], [213, 2, 1, "", "transform"], [213, 2, 1, "", "trunc"], [213, 2, 1, "", "unify"], [213, 3, 1, "", "unit"], [213, 3, 1, "", "zero"]], "sympy.polys.polytools.PurePoly": [[213, 3, 1, "", "free_symbols"]], "sympy.polys.rationaltools": [[213, 4, 1, "", "together"]], "sympy.polys.ring_series": [[214, 4, 1, "", "_tan1"], [214, 4, 1, "", "mul_xin"], [214, 4, 1, "", "pow_xin"], [214, 4, 1, "", "rs_LambertW"], [214, 4, 1, "", "rs_asin"], [214, 4, 1, "", "rs_atan"], [214, 4, 1, "", "rs_atanh"], [214, 4, 1, "", "rs_compose_add"], [214, 4, 1, "", "rs_cos"], [214, 4, 1, "", "rs_cos_sin"], [214, 4, 1, "", "rs_cosh"], [214, 4, 1, "", "rs_cot"], [214, 4, 1, "", "rs_diff"], [214, 4, 1, "", "rs_exp"], [214, 4, 1, "", "rs_fun"], [214, 4, 1, "", "rs_hadamard_exp"], [214, 4, 1, "", "rs_integrate"], [214, 4, 1, "", "rs_is_puiseux"], [214, 4, 1, "", "rs_log"], [214, 4, 1, "", "rs_mul"], [214, 4, 1, "", "rs_newton"], [214, 4, 1, "", "rs_nth_root"], [214, 4, 1, "", "rs_pow"], [214, 4, 1, "", "rs_puiseux"], [214, 4, 1, "", "rs_puiseux2"], [214, 4, 1, "", "rs_series_from_list"], [214, 4, 1, "", "rs_series_inversion"], [214, 4, 1, "", "rs_series_reversion"], [214, 4, 1, "", "rs_sin"], [214, 4, 1, "", "rs_sinh"], [214, 4, 1, "", "rs_square"], [214, 4, 1, "", "rs_subs"], [214, 4, 1, "", "rs_tan"], [214, 4, 1, "", "rs_tanh"], [214, 4, 1, "", "rs_trunc"]], "sympy.polys.rings": [[208, 1, 1, "", "PolyElement"], [208, 1, 1, "", "PolyRing"], [208, 4, 1, "", "ring"], [208, 4, 1, "", "sring"], [208, 4, 1, "", "vring"], [208, 4, 1, "", "xring"]], "sympy.polys.rings.PolyElement": [[208, 2, 1, "", "almosteq"], [208, 2, 1, "", "cancel"], [208, 2, 1, "", "coeff"], [208, 2, 1, "", "coeffs"], [208, 2, 1, "", "const"], [208, 2, 1, "", "content"], [208, 2, 1, "", "copy"], [208, 2, 1, "", "degree"], [208, 2, 1, "", "degrees"], [208, 2, 1, "", "diff"], [208, 2, 1, "", "div"], [208, 2, 1, "", "imul_num"], [208, 2, 1, "", "itercoeffs"], [208, 2, 1, "", "itermonoms"], [208, 2, 1, "", "iterterms"], [208, 2, 1, "", "leading_expv"], [208, 2, 1, "", "leading_monom"], [208, 2, 1, "", "leading_term"], [208, 2, 1, "", "listcoeffs"], [208, 2, 1, "", "listmonoms"], [208, 2, 1, "", "listterms"], [208, 2, 1, "", "monic"], [208, 2, 1, "", "monoms"], [208, 2, 1, "", "primitive"], [208, 2, 1, "", "square"], [208, 2, 1, "", "strip_zero"], [208, 2, 1, "", "symmetrize"], [208, 2, 1, "", "tail_degree"], [208, 2, 1, "", "tail_degrees"], [208, 2, 1, "", "terms"]], "sympy.polys.rings.PolyRing": [[208, 2, 1, "", "add"], [208, 2, 1, "", "add_gens"], [208, 2, 1, "", "compose"], [208, 2, 1, "", "drop"], [208, 2, 1, "", "drop_to_ground"], [208, 2, 1, "", "index"], [208, 2, 1, "", "monomial_basis"], [208, 2, 1, "", "mul"], [208, 2, 1, "", "symmetric_poly"]], "sympy.polys.rootoftools": [[213, 1, 1, "", "ComplexRootOf"], [213, 1, 1, "", "RootOf"], [213, 1, 1, "", "RootSum"], [213, 4, 1, "", "rootof"]], "sympy.polys.rootoftools.ComplexRootOf": [[213, 2, 1, "", "_all_roots"], [213, 2, 1, "", "_complexes_index"], [213, 2, 1, "", "_complexes_sorted"], [213, 2, 1, "", "_count_roots"], [213, 2, 1, "", "_ensure_complexes_init"], [213, 2, 1, "", "_ensure_reals_init"], [213, 2, 1, "", "_eval_evalf"], [213, 2, 1, "", "_eval_is_imaginary"], [213, 2, 1, "", "_eval_is_real"], [213, 2, 1, "", "_get_complexes"], [213, 2, 1, "", "_get_complexes_sqf"], [213, 2, 1, "", "_get_interval"], [213, 2, 1, "", "_get_reals"], [213, 2, 1, "", "_get_reals_sqf"], [213, 2, 1, "", "_get_roots"], [213, 2, 1, "", "_indexed_root"], [213, 2, 1, "", "_new"], [213, 2, 1, "", "_postprocess_root"], [213, 2, 1, "", "_preprocess_roots"], [213, 2, 1, "", "_real_roots"], [213, 2, 1, "", "_reals_index"], [213, 2, 1, "", "_reals_sorted"], [213, 2, 1, "", "_refine_complexes"], [213, 2, 1, "", "_reset"], [213, 2, 1, "", "_roots_trivial"], [213, 2, 1, "", "_set_interval"], [213, 2, 1, "", "all_roots"], [213, 2, 1, "", "clear_cache"], [213, 2, 1, "", "eval_approx"], [213, 2, 1, "", "eval_rational"], [213, 2, 1, "", "real_roots"]], "sympy.polys.rootoftools.RootSum": [[213, 2, 1, "", "new"]], "sympy.polys.solvers": [[215, 4, 1, "", "_solve_lin_sys"], [215, 4, 1, "", "_solve_lin_sys_component"], [215, 4, 1, "", "eqs_to_matrix"], [215, 4, 1, "", "solve_lin_sys"], [215, 4, 1, "", "sympy_eqs_to_ring"]], "sympy.polys.specialpolys": [[213, 4, 1, "", "cyclotomic_poly"], [213, 4, 1, "", "interpolating_poly"], [213, 4, 1, "", "random_poly"], [213, 4, 1, "", "swinnerton_dyer_poly"], [213, 4, 1, "", "symmetric_poly"]], "sympy.printing": [[217, 0, 0, "-", "aesaracode"], [217, 0, 0, "-", "c"], [217, 0, 0, "-", "codeprinter"], [217, 0, 0, "-", "conventions"], [217, 0, 0, "-", "cxx"], [217, 0, 0, "-", "fortran"], [217, 0, 0, "-", "gtk"], [217, 0, 0, "-", "jscode"], [217, 0, 0, "-", "julia"], [217, 0, 0, "-", "lambdarepr"], [217, 0, 0, "-", "latex"], [217, 0, 0, "-", "maple"], [217, 0, 0, "-", "mathematica"], [217, 0, 0, "-", "mathml"], [217, 0, 0, "-", "octave"], [217, 0, 0, "-", "precedence"], [217, 0, 0, "-", "pretty"], [217, 0, 0, "-", "preview"], [217, 0, 0, "-", "printer"], [217, 0, 0, "-", "pycode"], [217, 0, 0, "-", "python"], [217, 0, 0, "-", "rcode"], [217, 0, 0, "-", "repr"], [217, 0, 0, "-", "rust"], [217, 0, 0, "-", "smtlib"], [217, 0, 0, "-", "str"], [217, 0, 0, "-", "tree"]], "sympy.printing.aesaracode": [[217, 1, 1, "", "AesaraPrinter"], [217, 4, 1, "", "aesara_code"], [217, 4, 1, "", "aesara_function"], [217, 4, 1, "", "dim_handling"]], "sympy.printing.aesaracode.AesaraPrinter": [[217, 2, 1, "", "doprint"], [217, 5, 1, "", "printmethod"]], "sympy.printing.c": [[217, 1, 1, "", "C89CodePrinter"], [217, 1, 1, "", "C99CodePrinter"], [217, 4, 1, "", "ccode"], [217, 6, 1, "", "known_functions_C89"], [217, 6, 1, "", "known_functions_C99"], [217, 4, 1, "", "print_ccode"]], "sympy.printing.c.C89CodePrinter": [[217, 2, 1, "", "indent_code"], [217, 5, 1, "", "printmethod"]], "sympy.printing.c.C99CodePrinter": [[217, 5, 1, "", "printmethod"]], "sympy.printing.codeprinter": [[217, 7, 1, "", "AssignmentError"], [217, 1, 1, "", "CodePrinter"], [217, 4, 1, "", "cxxcode"]], "sympy.printing.codeprinter.CodePrinter": [[217, 2, 1, "", "doprint"], [217, 5, 1, "", "printmethod"]], "sympy.printing.conventions": [[217, 4, 1, "", "split_super_sub"]], "sympy.printing.cxx": [[217, 1, 1, "", "CXX11CodePrinter"], [217, 1, 1, "", "CXX98CodePrinter"]], "sympy.printing.cxx.CXX11CodePrinter": [[217, 5, 1, "", "printmethod"]], "sympy.printing.cxx.CXX98CodePrinter": [[217, 5, 1, "", "printmethod"]], "sympy.printing.dot": [[217, 4, 1, "", "dotprint"]], "sympy.printing.fortran": [[217, 1, 1, "", "FCodePrinter"], [217, 4, 1, "", "fcode"], [217, 4, 1, "", "print_fcode"]], "sympy.printing.fortran.FCodePrinter": [[217, 2, 1, "", "indent_code"], [217, 5, 1, "", "printmethod"]], "sympy.printing.gtk": [[217, 4, 1, "", "print_gtk"]], "sympy.printing.jscode": [[217, 1, 1, "", "JavascriptCodePrinter"], [217, 4, 1, "", "jscode"], [217, 6, 1, "", "known_functions"]], "sympy.printing.jscode.JavascriptCodePrinter": [[217, 2, 1, "", "indent_code"], [217, 5, 1, "", "printmethod"]], "sympy.printing.julia": [[217, 1, 1, "", "JuliaCodePrinter"], [217, 4, 1, "", "julia_code"], [217, 6, 1, "", "known_fcns_src1"], [217, 6, 1, "", "known_fcns_src2"]], "sympy.printing.julia.JuliaCodePrinter": [[217, 2, 1, "", "indent_code"], [217, 5, 1, "", "printmethod"]], "sympy.printing.lambdarepr": [[217, 1, 1, "", "LambdaPrinter"], [217, 4, 1, "", "lambdarepr"]], "sympy.printing.lambdarepr.LambdaPrinter": [[217, 5, 1, "", "printmethod"]], "sympy.printing.latex": [[217, 1, 1, "", "LatexPrinter"], [217, 6, 1, "", "accepted_latex_functions"], [217, 4, 1, "", "latex"], [217, 4, 1, "", "print_latex"]], "sympy.printing.latex.LatexPrinter": [[217, 2, 1, "", "parenthesize_super"], [217, 5, 1, "", "printmethod"]], "sympy.printing.maple": [[217, 1, 1, "", "MapleCodePrinter"], [217, 4, 1, "", "maple_code"], [217, 4, 1, "", "print_maple_code"]], "sympy.printing.maple.MapleCodePrinter": [[217, 5, 1, "", "printmethod"]], "sympy.printing.mathematica": [[217, 1, 1, "", "MCodePrinter"], [217, 6, 1, "", "known_functions"], [217, 4, 1, "", "mathematica_code"]], "sympy.printing.mathematica.MCodePrinter": [[217, 5, 1, "", "printmethod"]], "sympy.printing.mathml": [[217, 1, 1, "", "MathMLContentPrinter"], [217, 1, 1, "", "MathMLPresentationPrinter"], [217, 1, 1, "", "MathMLPrinterBase"], [217, 4, 1, "", "mathml"], [217, 4, 1, "", "print_mathml"]], "sympy.printing.mathml.MathMLContentPrinter": [[217, 2, 1, "", "mathml_tag"], [217, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPresentationPrinter": [[217, 2, 1, "", "mathml_tag"], [217, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPrinterBase": [[217, 2, 1, "", "doprint"]], "sympy.printing.octave": [[217, 1, 1, "", "OctaveCodePrinter"], [217, 6, 1, "", "known_fcns_src1"], [217, 6, 1, "", "known_fcns_src2"], [217, 4, 1, "", "octave_code"]], "sympy.printing.octave.OctaveCodePrinter": [[217, 2, 1, "", "indent_code"], [217, 5, 1, "", "printmethod"]], "sympy.printing.precedence": [[217, 6, 1, "", "PRECEDENCE"], [217, 6, 1, "", "PRECEDENCE_FUNCTIONS"], [217, 6, 1, "", "PRECEDENCE_VALUES"], [217, 4, 1, "", "precedence"]], "sympy.printing.pretty": [[217, 0, 0, "-", "pretty"], [217, 0, 0, "-", "pretty_symbology"], [217, 0, 0, "-", "stringpict"]], "sympy.printing.pretty.pretty": [[217, 1, 1, "", "PrettyPrinter"], [217, 4, 1, "", "pretty"], [217, 4, 1, "", "pretty_print"]], "sympy.printing.pretty.pretty.PrettyPrinter": [[217, 5, 1, "", "printmethod"]], "sympy.printing.pretty.pretty_symbology": [[217, 4, 1, "", "G"], [217, 4, 1, "", "U"], [217, 4, 1, "", "VF"], [217, 4, 1, "", "annotated"], [217, 6, 1, "", "atoms_table"], [217, 6, 1, "", "digit_2txt"], [217, 6, 1, "", "frac"], [217, 4, 1, "", "g"], [217, 6, 1, "", "greek_letters"], [217, 4, 1, "", "hobj"], [217, 4, 1, "", "pretty_atom"], [217, 4, 1, "", "pretty_symbol"], [217, 4, 1, "", "pretty_try_use_unicode"], [217, 4, 1, "", "pretty_use_unicode"], [217, 6, 1, "", "root"], [217, 6, 1, "", "sub"], [217, 6, 1, "", "sup"], [217, 6, 1, "", "symb_2txt"], [217, 4, 1, "", "vobj"], [217, 4, 1, "", "xobj"], [217, 4, 1, "", "xstr"], [217, 4, 1, "", "xsym"]], "sympy.printing.pretty.stringpict": [[217, 1, 1, "", "prettyForm"], [217, 1, 1, "", "stringPict"]], "sympy.printing.pretty.stringpict.prettyForm": [[217, 2, 1, "", "apply"]], "sympy.printing.pretty.stringpict.stringPict": [[217, 2, 1, "", "above"], [217, 2, 1, "", "below"], [217, 2, 1, "", "height"], [217, 2, 1, "", "left"], [217, 2, 1, "", "leftslash"], [217, 2, 1, "", "next"], [217, 2, 1, "", "parens"], [217, 2, 1, "", "render"], [217, 2, 1, "", "right"], [217, 2, 1, "", "root"], [217, 2, 1, "", "stack"], [217, 2, 1, "", "terminal_width"], [217, 2, 1, "", "width"]], "sympy.printing.preview": [[217, 4, 1, "", "preview"]], "sympy.printing.printer": [[217, 1, 1, "", "Printer"]], "sympy.printing.printer.Printer": [[217, 2, 1, "", "_print"], [217, 2, 1, "", "doprint"], [217, 5, 1, "", "printmethod"], [217, 2, 1, "", "set_global_settings"]], "sympy.printing.pycode": [[217, 1, 1, "", "MpmathPrinter"], [217, 4, 1, "", "pycode"]], "sympy.printing.rcode": [[217, 1, 1, "", "RCodePrinter"], [217, 6, 1, "", "known_functions"], [217, 4, 1, "", "print_rcode"], [217, 4, 1, "", "rcode"]], "sympy.printing.rcode.RCodePrinter": [[217, 2, 1, "", "indent_code"], [217, 5, 1, "", "printmethod"]], "sympy.printing.repr": [[217, 1, 1, "", "ReprPrinter"], [217, 4, 1, "", "srepr"]], "sympy.printing.repr.ReprPrinter": [[217, 2, 1, "", "emptyPrinter"], [217, 5, 1, "", "printmethod"], [217, 2, 1, "", "reprify"]], "sympy.printing.rust": [[217, 1, 1, "", "RustCodePrinter"], [217, 6, 1, "", "known_functions"], [217, 4, 1, "", "rust_code"]], "sympy.printing.rust.RustCodePrinter": [[217, 2, 1, "", "indent_code"], [217, 5, 1, "", "printmethod"]], "sympy.printing.smtlib": [[217, 1, 1, "", "SMTLibPrinter"], [217, 4, 1, "", "smtlib_code"]], "sympy.printing.smtlib.SMTLibPrinter": [[217, 5, 1, "", "_default_settings"], [217, 5, 1, "", "printmethod"]], "sympy.printing.str": [[217, 1, 1, "", "StrPrinter"], [217, 4, 1, "", "sstr"], [217, 4, 1, "", "sstrrepr"]], "sympy.printing.str.StrPrinter": [[217, 5, 1, "", "printmethod"]], "sympy.printing.tree": [[217, 4, 1, "", "pprint_nodes"], [217, 4, 1, "", "print_node"], [217, 4, 1, "", "print_tree"], [217, 4, 1, "", "tree"]], "sympy.series.acceleration": [[224, 4, 1, "", "richardson"], [224, 4, 1, "", "shanks"]], "sympy.series.formal": [[219, 1, 1, "", "FiniteFormalPowerSeries"], [219, 1, 1, "", "FormalPowerSeries"], [219, 1, 1, "", "FormalPowerSeriesCompose"], [219, 1, 1, "", "FormalPowerSeriesInverse"], [219, 1, 1, "", "FormalPowerSeriesProduct"], [219, 4, 1, "", "compute_fps"], [219, 4, 1, "", "exp_re"], [219, 4, 1, "", "fps"], [219, 4, 1, "", "hyper_algorithm"], [219, 4, 1, "", "hyper_re"], [219, 4, 1, "", "rational_algorithm"], [219, 4, 1, "", "rational_independent"], [219, 4, 1, "", "rsolve_hypergeometric"], [219, 4, 1, "", "simpleDE"], [219, 4, 1, "", "solve_de"]], "sympy.series.formal.FormalPowerSeries": [[219, 2, 1, "", "coeff_bell"], [219, 2, 1, "", "compose"], [219, 3, 1, "", "infinite"], [219, 2, 1, "", "integrate"], [219, 2, 1, "", "inverse"], [219, 2, 1, "", "polynomial"], [219, 2, 1, "", "product"], [219, 2, 1, "", "truncate"]], "sympy.series.formal.FormalPowerSeriesCompose": [[219, 3, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesInverse": [[219, 3, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesProduct": [[219, 3, 1, "", "function"]], "sympy.series.fourier": [[220, 1, 1, "", "FourierSeries"], [220, 4, 1, "", "fourier_series"]], "sympy.series.fourier.FourierSeries": [[220, 2, 1, "", "scale"], [220, 2, 1, "", "scalex"], [220, 2, 1, "", "shift"], [220, 2, 1, "", "shiftx"], [220, 2, 1, "", "sigma_approximation"], [220, 2, 1, "", "truncate"]], "sympy.series.gruntz": [[224, 1, 1, "", "SubsSet"], [224, 4, 1, "", "build_expression_tree"], [224, 4, 1, "", "calculate_series"], [224, 4, 1, "", "compare"], [224, 4, 1, "", "gruntz"], [224, 4, 1, "", "limitinf"], [224, 4, 1, "", "mrv"], [224, 4, 1, "", "mrv_leadterm"], [224, 4, 1, "", "mrv_max1"], [224, 4, 1, "", "mrv_max3"], [224, 4, 1, "", "rewrite"], [224, 4, 1, "", "sign"]], "sympy.series.gruntz.SubsSet": [[224, 2, 1, "", "copy"], [224, 2, 1, "", "do_subs"], [224, 2, 1, "", "meets"], [224, 2, 1, "", "union"]], "sympy.series.limits": [[224, 1, 1, "", "Limit"], [224, 4, 1, "", "limit"]], "sympy.series.limits.Limit": [[224, 2, 1, "", "doit"]], "sympy.series.limitseq": [[222, 4, 1, "", "difference_delta"], [222, 4, 1, "", "dominant"], [222, 4, 1, "", "limit_seq"]], "sympy.series.order": [[224, 1, 1, "", "Order"]], "sympy.series.order.Order": [[224, 2, 1, "", "contains"]], "sympy.series.residues": [[224, 4, 1, "", "residue"]], "sympy.series.sequences": [[223, 1, 1, "", "EmptySequence"], [223, 1, 1, "", "RecursiveSeq"], [223, 1, 1, "", "SeqAdd"], [223, 1, 1, "", "SeqBase"], [223, 1, 1, "", "SeqFormula"], [223, 1, 1, "", "SeqMul"], [223, 1, 1, "", "SeqPer"], [223, 4, 1, "", "sequence"]], "sympy.series.sequences.EmptySequence": [[223, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.RecursiveSeq": [[223, 3, 1, "", "initial"], [223, 3, 1, "", "interval"], [223, 3, 1, "", "n"], [223, 3, 1, "", "recurrence"], [223, 3, 1, "", "start"], [223, 3, 1, "", "stop"], [223, 3, 1, "", "y"], [223, 3, 1, "", "yn"]], "sympy.series.sequences.SeqAdd": [[223, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqBase": [[223, 2, 1, "", "coeff"], [223, 2, 1, "", "coeff_mul"], [223, 2, 1, "", "find_linear_recurrence"], [223, 3, 1, "", "free_symbols"], [223, 3, 1, "", "gen"], [223, 3, 1, "", "interval"], [223, 3, 1, "", "length"], [223, 3, 1, "", "start"], [223, 3, 1, "", "stop"], [223, 3, 1, "", "variables"]], "sympy.series.sequences.SeqFormula": [[223, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.SeqMul": [[223, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqPer": [[223, 2, 1, "", "coeff_mul"]], "sympy.series.series": [[224, 4, 1, "", "series"]], "sympy.sets": [[225, 0, 0, "-", "conditionset"], [225, 0, 0, "-", "fancysets"], [225, 0, 0, "-", "powerset"], [225, 0, 0, "-", "sets"]], "sympy.sets.conditionset": [[225, 1, 1, "", "ConditionSet"], [225, 1, 1, "", "Contains"], [225, 1, 1, "", "SetKind"]], "sympy.sets.fancysets": [[225, 1, 1, "", "CartesianComplexRegion"], [225, 1, 1, "", "ComplexRegion"], [225, 1, 1, "", "Complexes"], [225, 1, 1, "", "ImageSet"], [225, 1, 1, "", "Integers"], [225, 1, 1, "", "Naturals"], [225, 1, 1, "", "Naturals0"], [225, 1, 1, "", "PolarComplexRegion"], [225, 1, 1, "", "Range"], [225, 1, 1, "", "Rationals"], [225, 1, 1, "", "Reals"], [225, 4, 1, "", "normalize_theta_set"]], "sympy.sets.fancysets.ComplexRegion": [[225, 3, 1, "", "a_interval"], [225, 3, 1, "", "b_interval"], [225, 2, 1, "", "from_real"], [225, 3, 1, "", "psets"], [225, 3, 1, "", "sets"]], "sympy.sets.fancysets.Range": [[225, 2, 1, "", "as_relational"], [225, 3, 1, "", "reversed"]], "sympy.sets.powerset": [[225, 1, 1, "", "PowerSet"]], "sympy.sets.sets": [[225, 1, 1, "", "Complement"], [225, 1, 1, "", "DisjointUnion"], [225, 1, 1, "", "EmptySet"], [225, 1, 1, "", "FiniteSet"], [225, 1, 1, "", "Intersection"], [225, 1, 1, "", "Interval"], [225, 1, 1, "", "ProductSet"], [225, 1, 1, "", "Set"], [225, 1, 1, "", "SymmetricDifference"], [225, 1, 1, "", "Union"], [225, 1, 1, "", "UniversalSet"], [225, 4, 1, "", "imageset"]], "sympy.sets.sets.Complement": [[225, 2, 1, "", "as_relational"], [225, 2, 1, "", "reduce"]], "sympy.sets.sets.FiniteSet": [[225, 2, 1, "", "as_relational"]], "sympy.sets.sets.Intersection": [[225, 2, 1, "", "as_relational"]], "sympy.sets.sets.Interval": [[225, 2, 1, "", "Lopen"], [225, 2, 1, "", "Ropen"], [225, 2, 1, "", "as_relational"], [225, 3, 1, "", "end"], [225, 3, 1, "", "is_left_unbounded"], [225, 3, 1, "", "is_right_unbounded"], [225, 3, 1, "", "left_open"], [225, 2, 1, "", "open"], [225, 3, 1, "", "right_open"], [225, 3, 1, "", "start"]], "sympy.sets.sets.ProductSet": [[225, 3, 1, "", "is_iterable"]], "sympy.sets.sets.Set": [[225, 3, 1, "", "boundary"], [225, 3, 1, "", "closure"], [225, 2, 1, "", "complement"], [225, 2, 1, "", "contains"], [225, 3, 1, "", "inf"], [225, 3, 1, "", "interior"], [225, 2, 1, "", "intersect"], [225, 2, 1, "", "intersection"], [225, 3, 1, "", "is_closed"], [225, 2, 1, "", "is_disjoint"], [225, 3, 1, "", "is_open"], [225, 2, 1, "", "is_proper_subset"], [225, 2, 1, "", "is_proper_superset"], [225, 2, 1, "", "is_subset"], [225, 2, 1, "", "is_superset"], [225, 2, 1, "", "isdisjoint"], [225, 2, 1, "", "issubset"], [225, 2, 1, "", "issuperset"], [225, 3, 1, "", "kind"], [225, 3, 1, "", "measure"], [225, 2, 1, "", "powerset"], [225, 3, 1, "", "sup"], [225, 2, 1, "", "symmetric_difference"], [225, 2, 1, "", "union"]], "sympy.sets.sets.SymmetricDifference": [[225, 2, 1, "", "as_relational"]], "sympy.sets.sets.Union": [[225, 2, 1, "", "as_relational"]], "sympy.simplify": [[229, 0, 0, "-", "combsimp"], [229, 0, 0, "-", "cse_main"], [229, 0, 0, "-", "epathtools"], [229, 0, 0, "-", "hyperexpand"], [227, 0, 0, "-", "hyperexpand_doc"], [229, 0, 0, "-", "powsimp"], [229, 0, 0, "-", "radsimp"], [229, 0, 0, "-", "ratsimp"], [15, 0, 0, "-", "simplify"], [229, 0, 0, "-", "sqrtdenest"], [229, 0, 0, "-", "trigsimp"]], "sympy.simplify.combsimp": [[229, 4, 1, "", "combsimp"]], "sympy.simplify.cse_main": [[229, 4, 1, "", "cse"], [229, 4, 1, "", "opt_cse"], [229, 4, 1, "", "tree_cse"]], "sympy.simplify.epathtools": [[229, 1, 1, "", "EPath"], [229, 4, 1, "", "epath"]], "sympy.simplify.epathtools.EPath": [[229, 2, 1, "", "apply"], [229, 2, 1, "", "select"]], "sympy.simplify.fu": [[226, 4, 1, "", "TR0"], [226, 4, 1, "", "TR1"], [226, 4, 1, "", "TR10"], [226, 4, 1, "", "TR10i"], [226, 4, 1, "", "TR11"], [226, 4, 1, "", "TR111"], [226, 4, 1, "", "TR12"], [226, 4, 1, "", "TR12i"], [226, 4, 1, "", "TR13"], [226, 4, 1, "", "TR14"], [226, 4, 1, "", "TR15"], [226, 4, 1, "", "TR16"], [226, 4, 1, "", "TR2"], [226, 4, 1, "", "TR22"], [226, 4, 1, "", "TR2i"], [226, 4, 1, "", "TR3"], [226, 4, 1, "", "TR4"], [226, 4, 1, "", "TR5"], [226, 4, 1, "", "TR6"], [226, 4, 1, "", "TR7"], [226, 4, 1, "", "TR8"], [226, 4, 1, "", "TR9"], [226, 4, 1, "", "TRmorrie"], [226, 4, 1, "", "TRpower"], [226, 4, 1, "", "fu"]], "sympy.simplify.hyperexpand": [[229, 4, 1, "", "hyperexpand"]], "sympy.simplify.powsimp": [[229, 4, 1, "", "powdenest"], [229, 4, 1, "", "powsimp"]], "sympy.simplify.radsimp": [[229, 4, 1, "", "collect"], [229, 4, 1, "", "collect_const"], [229, 4, 1, "", "collect_sqrt"], [229, 4, 1, "", "fraction"], [229, 4, 1, "", "rad_rationalize"], [229, 4, 1, "", "radsimp"], [229, 4, 1, "", "rcollect"]], "sympy.simplify.ratsimp": [[229, 4, 1, "", "ratsimp"], [229, 4, 1, "", "ratsimpmodprime"]], "sympy.simplify.simplify": [[229, 4, 1, "", "besselsimp"], [229, 4, 1, "", "hypersimilar"], [229, 4, 1, "", "hypersimp"], [229, 4, 1, "", "kroneckersimp"], [229, 4, 1, "", "logcombine"], [229, 4, 1, "", "nsimplify"], [229, 4, 1, "", "nthroot"], [229, 4, 1, "", "posify"], [229, 4, 1, "", "separatevars"], [229, 4, 1, "", "simplify"]], "sympy.simplify.sqrtdenest": [[229, 4, 1, "", "sqrtdenest"]], "sympy.simplify.trigsimp": [[229, 4, 1, "", "trigsimp"]], "sympy.solvers.deutils": [[235, 4, 1, "", "ode_order"]], "sympy.solvers.diophantine.diophantine": [[230, 1, 1, "", "BinaryQuadratic"], [230, 1, 1, "", "CubicThue"], [230, 1, 1, "", "DiophantineEquationType"], [230, 1, 1, "", "DiophantineSolutionSet"], [230, 1, 1, "", "GeneralPythagorean"], [230, 1, 1, "", "GeneralSumOfEvenPowers"], [230, 1, 1, "", "GeneralSumOfSquares"], [230, 1, 1, "", "HomogeneousGeneralQuadratic"], [230, 1, 1, "", "HomogeneousTernaryQuadratic"], [230, 1, 1, "", "HomogeneousTernaryQuadraticNormal"], [230, 1, 1, "", "InhomogeneousGeneralQuadratic"], [230, 1, 1, "", "InhomogeneousTernaryQuadratic"], [230, 1, 1, "", "Linear"], [230, 4, 1, "", "PQa"], [230, 1, 1, "", "Univariate"], [230, 4, 1, "", "base_solution_linear"], [230, 4, 1, "", "classify_diop"], [230, 4, 1, "", "cornacchia"], [230, 4, 1, "", "descent"], [230, 4, 1, "", "diop_DN"], [230, 4, 1, "", "diop_bf_DN"], [230, 4, 1, "", "diop_general_pythagorean"], [230, 4, 1, "", "diop_general_sum_of_even_powers"], [230, 4, 1, "", "diop_general_sum_of_squares"], [230, 4, 1, "", "diop_linear"], [230, 4, 1, "", "diop_quadratic"], [230, 4, 1, "", "diop_solve"], [230, 4, 1, "", "diop_ternary_quadratic"], [230, 4, 1, "", "diop_ternary_quadratic_normal"], [230, 4, 1, "", "diophantine"], [230, 4, 1, "", "divisible"], [230, 4, 1, "", "equivalent"], [230, 4, 1, "", "find_DN"], [230, 4, 1, "", "gaussian_reduce"], [230, 4, 1, "", "holzer"], [230, 4, 1, "", "ldescent"], [230, 4, 1, "", "merge_solution"], [230, 4, 1, "", "parametrize_ternary_quadratic"], [230, 4, 1, "", "partition"], [230, 4, 1, "", "power_representation"], [230, 4, 1, "", "prime_as_sum_of_two_squares"], [230, 4, 1, "", "reconstruct"], [230, 4, 1, "", "sqf_normal"], [230, 4, 1, "", "square_factor"], [230, 4, 1, "", "sum_of_four_squares"], [230, 4, 1, "", "sum_of_powers"], [230, 4, 1, "", "sum_of_squares"], [230, 4, 1, "", "sum_of_three_squares"], [230, 4, 1, "", "transformation_to_DN"], [230, 4, 1, "", "transformation_to_normal"]], "sympy.solvers.diophantine.diophantine.DiophantineEquationType": [[230, 2, 1, "", "matches"]], "sympy.solvers": [[232, 0, 0, "-", "inequalities"], [233, 0, 0, "-", "ode"], [234, 0, 0, "-", "pde"], [235, 0, 0, "-", "recurr"], [236, 0, 0, "-", "solveset"]], "sympy.solvers.inequalities": [[232, 4, 1, "", "reduce_abs_inequalities"], [232, 4, 1, "", "reduce_abs_inequality"], [232, 4, 1, "", "reduce_inequalities"], [232, 4, 1, "", "reduce_rational_inequalities"], [232, 4, 1, "", "solve_poly_inequalities"], [232, 4, 1, "", "solve_poly_inequality"], [232, 4, 1, "", "solve_rational_inequalities"], [232, 4, 1, "", "solve_univariate_inequality"]], "sympy.solvers.ode": [[233, 6, 1, "", "allhints"], [233, 4, 1, "", "checkinfsol"], [233, 4, 1, "", "checkodesol"], [233, 4, 1, "", "classify_ode"], [233, 4, 1, "", "constantsimp"], [233, 4, 1, "", "dsolve"], [233, 4, 1, "", "homogeneous_order"], [233, 4, 1, "", "infinitesimals"], [233, 0, 0, "-", "ode"]], "sympy.solvers.ode.lie_group": [[233, 4, 1, "", "lie_heuristic_abaco1_product"], [233, 4, 1, "", "lie_heuristic_abaco1_simple"], [233, 4, 1, "", "lie_heuristic_abaco2_similar"], [233, 4, 1, "", "lie_heuristic_abaco2_unique_general"], [233, 4, 1, "", "lie_heuristic_abaco2_unique_unknown"], [233, 4, 1, "", "lie_heuristic_bivariate"], [233, 4, 1, "", "lie_heuristic_chi"], [233, 4, 1, "", "lie_heuristic_function_sum"], [233, 4, 1, "", "lie_heuristic_linear"]], "sympy.solvers.ode.ode": [[233, 4, 1, "", "_handle_Integral"], [233, 4, 1, "", "_linear_2eq_order1_type6"], [233, 4, 1, "", "_linear_2eq_order1_type7"], [233, 4, 1, "", "_nonlinear_2eq_order1_type1"], [233, 4, 1, "", "_nonlinear_2eq_order1_type2"], [233, 4, 1, "", "_nonlinear_2eq_order1_type3"], [233, 4, 1, "", "_nonlinear_2eq_order1_type4"], [233, 4, 1, "", "_nonlinear_2eq_order1_type5"], [233, 4, 1, "", "_nonlinear_3eq_order1_type1"], [233, 4, 1, "", "_nonlinear_3eq_order1_type2"], [233, 4, 1, "", "_nonlinear_3eq_order1_type3"], [233, 4, 1, "", "_nonlinear_3eq_order1_type4"], [233, 4, 1, "", "_nonlinear_3eq_order1_type5"], [233, 4, 1, "", "constant_renumber"], [233, 4, 1, "", "ode_1st_power_series"], [233, 4, 1, "", "ode_2nd_power_series_ordinary"], [233, 4, 1, "", "ode_2nd_power_series_regular"], [233, 4, 1, "", "ode_sol_simplicity"], [233, 4, 1, "", "odesimp"]], "sympy.solvers.ode.riccati": [[233, 4, 1, "", "compute_m_ybar"], [233, 4, 1, "", "construct_c"], [233, 4, 1, "", "construct_d"], [233, 4, 1, "", "get_gen_sol_from_part_sol"], [233, 4, 1, "", "rational_laurent_series"], [233, 4, 1, "", "remove_redundant_sols"], [233, 4, 1, "", "riccati_inverse_normal"], [233, 4, 1, "", "riccati_normal"], [233, 4, 1, "", "riccati_reduced"], [233, 4, 1, "", "solve_aux_eq"], [233, 4, 1, "", "solve_riccati"]], "sympy.solvers.ode.single": [[233, 1, 1, "", "AlmostLinear"], [233, 1, 1, "", "Bernoulli"], [233, 1, 1, "", "Factorable"], [233, 1, 1, "", "FirstExact"], [233, 1, 1, "", "FirstLinear"], [233, 1, 1, "", "HomogeneousCoeffBest"], [233, 1, 1, "", "HomogeneousCoeffSubsDepDivIndep"], [233, 1, 1, "", "HomogeneousCoeffSubsIndepDivDep"], [233, 1, 1, "", "LieGroup"], [233, 1, 1, "", "LinearCoefficients"], [233, 1, 1, "", "Liouville"], [233, 1, 1, "", "NthAlgebraic"], [233, 1, 1, "", "NthLinearConstantCoeffHomogeneous"], [233, 1, 1, "", "NthLinearConstantCoeffUndeterminedCoefficients"], [233, 1, 1, "", "NthLinearConstantCoeffVariationOfParameters"], [233, 1, 1, "", "NthLinearEulerEqHomogeneous"], [233, 1, 1, "", "NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"], [233, 1, 1, "", "NthLinearEulerEqNonhomogeneousVariationOfParameters"], [233, 1, 1, "", "NthOrderReducible"], [233, 1, 1, "", "RationalRiccati"], [233, 1, 1, "", "RiccatiSpecial"], [233, 1, 1, "", "SecondHypergeometric"], [233, 1, 1, "", "SecondLinearAiry"], [233, 1, 1, "", "SecondLinearBessel"], [233, 1, 1, "", "Separable"], [233, 1, 1, "", "SeparableReduced"]], "sympy.solvers.ode.systems": [[233, 4, 1, "", "canonical_odes"], [233, 4, 1, "", "dsolve_system"], [233, 4, 1, "", "linear_ode_to_matrix"], [233, 4, 1, "", "linodesolve"], [233, 4, 1, "", "linodesolve_type"], [233, 4, 1, "", "matrix_exp"], [233, 4, 1, "", "matrix_exp_jordan_form"]], "sympy.solvers.pde": [[234, 4, 1, "", "checkpdesol"], [234, 4, 1, "", "classify_pde"], [234, 4, 1, "", "pde_1st_linear_constant_coeff"], [234, 4, 1, "", "pde_1st_linear_constant_coeff_homogeneous"], [234, 4, 1, "", "pde_1st_linear_variable_coeff"], [234, 4, 1, "", "pde_separate"], [234, 4, 1, "", "pde_separate_add"], [234, 4, 1, "", "pde_separate_mul"], [234, 4, 1, "", "pdsolve"]], "sympy.solvers.polysys": [[235, 4, 1, "", "solve_poly_system"], [235, 4, 1, "", "solve_triangulated"]], "sympy.solvers.recurr": [[235, 4, 1, "", "rsolve"], [235, 4, 1, "", "rsolve_hyper"], [235, 4, 1, "", "rsolve_poly"], [235, 4, 1, "", "rsolve_ratio"]], "sympy.solvers.solvers": [[235, 4, 1, "", "checksol"], [235, 4, 1, "", "nsolve"], [235, 4, 1, "", "solve"], [235, 4, 1, "", "solve_linear"], [235, 4, 1, "", "solve_linear_system"], [235, 4, 1, "", "solve_linear_system_LU"], [235, 4, 1, "", "solve_undetermined_coeffs"], [235, 4, 1, "", "unrad"]], "sympy.solvers.solveset": [[236, 4, 1, "", "_is_exponential"], [236, 4, 1, "", "_is_logarithmic"], [236, 4, 1, "", "_solve_exponential"], [236, 4, 1, "", "_solve_logarithm"], [236, 4, 1, "", "_transolve"], [236, 4, 1, "", "domain_check"], [236, 4, 1, "", "invert_complex"], [236, 4, 1, "", "invert_real"], [236, 4, 1, "", "linear_eq_to_matrix"], [236, 4, 1, "", "linsolve"], [236, 4, 1, "", "nonlinsolve"], [236, 4, 1, "", "solveset"], [236, 4, 1, "", "solveset_complex"], [236, 4, 1, "", "solveset_real"], [236, 4, 1, "", "solvify"]], "sympy.stats": [[237, 4, 1, "", "Arcsin"], [237, 4, 1, "", "Benini"], [237, 4, 1, "", "Bernoulli"], [237, 1, 1, "", "BernoulliProcess"], [237, 4, 1, "", "Beta"], [237, 4, 1, "", "BetaBinomial"], [237, 4, 1, "", "BetaNoncentral"], [237, 4, 1, "", "BetaPrime"], [237, 4, 1, "", "Binomial"], [237, 4, 1, "", "BoundedPareto"], [237, 4, 1, "", "Cauchy"], [237, 1, 1, "", "CentralMoment"], [237, 4, 1, "", "Chi"], [237, 4, 1, "", "ChiNoncentral"], [237, 4, 1, "", "ChiSquared"], [237, 4, 1, "", "Coin"], [237, 1, 1, "", "ContinuousMarkovChain"], [237, 4, 1, "", "ContinuousRV"], [237, 1, 1, "", "Covariance"], [237, 1, 1, "", "CrossCovarianceMatrix"], [237, 4, 1, "", "Dagum"], [237, 4, 1, "", "Davis"], [237, 4, 1, "", "Die"], [237, 1, 1, "", "DiscreteMarkovChain"], [237, 4, 1, "", "DiscreteUniform"], [237, 4, 1, "", "E"], [237, 4, 1, "", "Erlang"], [237, 4, 1, "", "ExGaussian"], [237, 1, 1, "", "Expectation"], [237, 1, 1, "", "ExpectationMatrix"], [237, 4, 1, "", "Exponential"], [237, 4, 1, "", "FDistribution"], [237, 4, 1, "", "FiniteRV"], [237, 4, 1, "", "FisherZ"], [237, 4, 1, "", "Frechet"], [237, 4, 1, "", "Gamma"], [237, 4, 1, "", "GammaInverse"], [237, 1, 1, "", "GammaProcess"], [237, 4, 1, "", "GeneralizedMultivariateLogGamma"], [237, 4, 1, "", "GeneralizedMultivariateLogGammaOmega"], [237, 4, 1, "", "Geometric"], [237, 4, 1, "", "Gompertz"], [237, 4, 1, "", "Gumbel"], [237, 4, 1, "", "Hermite"], [237, 4, 1, "", "Hypergeometric"], [237, 4, 1, "", "JointRV"], [237, 4, 1, "", "Kumaraswamy"], [237, 4, 1, "", "Laplace"], [237, 4, 1, "", "Levy"], [237, 4, 1, "", "LogLogistic"], [237, 4, 1, "", "LogNormal"], [237, 4, 1, "", "Logarithmic"], [237, 4, 1, "", "Logistic"], [237, 4, 1, "", "Lomax"], [237, 4, 1, "", "MatrixGamma"], [237, 4, 1, "", "MatrixNormal"], [237, 4, 1, "", "Maxwell"], [237, 1, 1, "", "Moment"], [237, 4, 1, "", "Moyal"], [237, 4, 1, "", "Multinomial"], [237, 4, 1, "", "MultivariateBeta"], [237, 4, 1, "", "MultivariateEwens"], [237, 4, 1, "", "MultivariateLaplace"], [237, 4, 1, "", "MultivariateNormal"], [237, 4, 1, "", "MultivariateT"], [237, 4, 1, "", "Nakagami"], [237, 4, 1, "", "NegativeBinomial"], [237, 4, 1, "", "NegativeMultinomial"], [237, 4, 1, "", "Normal"], [237, 4, 1, "", "NormalGamma"], [237, 4, 1, "", "P"], [237, 4, 1, "", "Pareto"], [237, 4, 1, "", "Poisson"], [237, 1, 1, "", "PoissonProcess"], [237, 4, 1, "", "PowerFunction"], [237, 1, 1, "", "Probability"], [237, 4, 1, "", "QuadraticU"], [237, 4, 1, "", "Rademacher"], [237, 4, 1, "", "RaisedCosine"], [237, 4, 1, "", "Rayleigh"], [237, 4, 1, "", "Reciprocal"], [237, 4, 1, "", "ShiftedGompertz"], [237, 4, 1, "", "Skellam"], [237, 4, 1, "", "StudentT"], [237, 4, 1, "", "Trapezoidal"], [237, 4, 1, "", "Triangular"], [237, 4, 1, "", "Uniform"], [237, 4, 1, "", "UniformSum"], [237, 1, 1, "", "Variance"], [237, 1, 1, "", "VarianceMatrix"], [237, 4, 1, "", "VonMises"], [237, 4, 1, "", "Wald"], [237, 4, 1, "", "Weibull"], [237, 1, 1, "", "WienerProcess"], [237, 4, 1, "", "WignerSemicircle"], [237, 4, 1, "", "Wishart"], [237, 4, 1, "", "YuleSimon"], [237, 4, 1, "", "Zeta"], [237, 4, 1, "", "cmoment"], [237, 4, 1, "", "correlation"], [237, 4, 1, "", "coskewness"], [237, 4, 1, "", "covariance"], [237, 0, 0, "-", "crv"], [237, 0, 0, "-", "crv_types"], [237, 4, 1, "", "density"], [237, 4, 1, "", "entropy"], [237, 4, 1, "", "factorial_moment"], [237, 0, 0, "-", "frv"], [237, 0, 0, "-", "frv_types"], [237, 4, 1, "", "given"], [237, 4, 1, "", "kurtosis"], [237, 4, 1, "", "marginal_distribution"], [237, 4, 1, "", "median"], [237, 4, 1, "", "moment"], [237, 4, 1, "", "quantile"], [237, 0, 0, "-", "rv"], [237, 4, 1, "", "sample"], [237, 4, 1, "", "sample_iter"], [237, 4, 1, "", "skewness"], [237, 4, 1, "", "std"], [237, 4, 1, "", "variance"], [237, 4, 1, "", "where"]], "sympy.stats.BernoulliProcess": [[237, 2, 1, "", "expectation"], [237, 2, 1, "", "probability"]], "sympy.stats.DiscreteMarkovChain": [[237, 2, 1, "", "absorbing_probabilities"], [237, 2, 1, "", "canonical_form"], [237, 2, 1, "", "communication_classes"], [237, 2, 1, "", "decompose"], [237, 2, 1, "", "fixed_row_vector"], [237, 2, 1, "", "fundamental_matrix"], [237, 3, 1, "", "limiting_distribution"], [237, 2, 1, "", "sample"], [237, 2, 1, "", "stationary_distribution"], [237, 3, 1, "", "transition_probabilities"]], "sympy.stats.compound_rv": [[237, 1, 1, "", "CompoundDistribution"]], "sympy.stats.crv": [[237, 1, 1, "", "ContinuousDomain"], [237, 1, 1, "", "ContinuousPSpace"]], "sympy.stats.crv_types": [[237, 1, 1, "", "NormalPSpace"]], "sympy.stats.crv_types.sympy.stats": [[237, 4, 1, "", "Die"], [237, 4, 1, "", "Normal"]], "sympy.stats.frv": [[237, 1, 1, "", "FiniteDomain"], [237, 1, 1, "", "FinitePSpace"]], "sympy.stats.frv_types": [[237, 1, 1, "", "DiePSpace"]], "sympy.stats.rv": [[237, 1, 1, "", "ConditionalDomain"], [237, 1, 1, "", "PSpace"], [237, 1, 1, "", "ProductDomain"], [237, 1, 1, "", "ProductPSpace"], [237, 1, 1, "", "RandomDomain"], [237, 1, 1, "", "RandomSymbol"], [237, 1, 1, "", "SingleDomain"], [237, 1, 1, "", "SinglePSpace"], [237, 4, 1, "", "pspace"], [237, 4, 1, "", "random_symbols"], [237, 4, 1, "", "rs_swap"], [237, 4, 1, "", "sampling_E"], [237, 4, 1, "", "sampling_P"], [237, 4, 1, "", "sampling_density"]], "sympy.tensor": [[238, 0, 0, "-", "array"], [241, 0, 0, "-", "index_methods"], [242, 0, 0, "-", "indexed"], [243, 0, 0, "-", "tensor"], [244, 0, 0, "-", "toperators"]], "sympy.tensor.array": [[238, 1, 1, "", "ImmutableDenseNDimArray"], [238, 1, 1, "", "ImmutableSparseNDimArray"], [238, 1, 1, "", "MutableDenseNDimArray"], [238, 1, 1, "", "MutableSparseNDimArray"], [238, 4, 1, "", "derive_by_array"], [239, 0, 0, "-", "expressions"], [238, 4, 1, "", "permutedims"], [238, 4, 1, "", "tensorcontraction"], [238, 4, 1, "", "tensordiagonal"], [238, 4, 1, "", "tensorproduct"]], "sympy.tensor.array.expressions": [[239, 1, 1, "", "ArrayContraction"], [239, 1, 1, "", "ArrayDiagonal"], [239, 1, 1, "", "ArrayTensorProduct"], [239, 1, 1, "", "PermuteDims"]], "sympy.tensor.index_methods": [[241, 4, 1, "", "get_contraction_structure"], [241, 4, 1, "", "get_indices"]], "sympy.tensor.indexed": [[242, 1, 1, "", "Idx"], [242, 1, 1, "", "Indexed"], [242, 1, 1, "", "IndexedBase"]], "sympy.tensor.indexed.Idx": [[242, 3, 1, "", "label"], [242, 3, 1, "", "lower"], [242, 3, 1, "", "upper"]], "sympy.tensor.indexed.Indexed": [[242, 3, 1, "", "base"], [242, 3, 1, "", "indices"], [242, 3, 1, "", "ranges"], [242, 3, 1, "", "rank"], [242, 3, 1, "", "shape"]], "sympy.tensor.indexed.IndexedBase": [[242, 3, 1, "", "label"], [242, 3, 1, "", "offset"], [242, 3, 1, "", "shape"], [242, 3, 1, "", "strides"]], "sympy.tensor.tensor": [[243, 1, 1, "", "TensAdd"], [243, 1, 1, "", "TensExpr"], [243, 1, 1, "", "TensMul"], [243, 1, 1, "", "TensorHead"], [243, 1, 1, "", "TensorIndex"], [243, 1, 1, "", "TensorIndexType"], [243, 1, 1, "", "TensorSymmetry"], [243, 1, 1, "", "TensorType"], [243, 1, 1, "", "_TensorManager"], [243, 4, 1, "", "canon_bp"], [243, 4, 1, "", "riemann_cyclic"], [243, 4, 1, "", "riemann_cyclic_replace"], [243, 4, 1, "", "tensor_heads"], [243, 4, 1, "", "tensorsymmetry"]], "sympy.tensor.tensor.TensAdd": [[243, 2, 1, "", "canon_bp"], [243, 2, 1, "", "contract_metric"]], "sympy.tensor.tensor.TensExpr": [[243, 2, 1, "", "get_matrix"], [243, 2, 1, "", "replace_with_arrays"]], "sympy.tensor.tensor.TensMul": [[243, 2, 1, "", "canon_bp"], [243, 2, 1, "", "contract_metric"], [243, 2, 1, "", "get_free_indices"], [243, 2, 1, "", "get_indices"], [243, 2, 1, "", "perm2tensor"], [243, 2, 1, "", "sorted_components"], [243, 2, 1, "", "split"]], "sympy.tensor.tensor.TensorHead": [[243, 2, 1, "", "commutes_with"]], "sympy.tensor.tensor.TensorSymmetry": [[243, 2, 1, "", "direct_product"], [243, 2, 1, "", "fully_symmetric"], [243, 2, 1, "", "no_symmetry"], [243, 2, 1, "", "riemann"]], "sympy.tensor.tensor._TensorManager": [[243, 2, 1, "", "clear"], [243, 2, 1, "", "comm_i2symbol"], [243, 2, 1, "", "comm_symbols2i"], [243, 2, 1, "", "get_comm"], [243, 2, 1, "", "set_comm"], [243, 2, 1, "", "set_comms"]], "sympy.tensor.toperators": [[244, 1, 1, "", "PartialDerivative"]], "sympy.testing": [[246, 0, 0, "-", "pytest"], [247, 0, 0, "-", "randtest"], [248, 0, 0, "-", "runtests"]], "sympy.testing.pytest": [[246, 4, 1, "", "SKIP"], [246, 4, 1, "", "nocache_fail"], [246, 4, 1, "", "raises"], [246, 4, 1, "", "skip_under_pyodide"], [246, 4, 1, "", "warns"], [246, 4, 1, "", "warns_deprecated_sympy"]], "sympy.testing.runtests": [[248, 1, 1, "", "PyTestReporter"], [248, 1, 1, "", "Reporter"], [248, 1, 1, "", "SymPyDocTestFinder"], [248, 1, 1, "", "SymPyDocTestRunner"], [248, 1, 1, "", "SymPyOutputChecker"], [248, 1, 1, "", "SymPyTestResults"], [248, 4, 1, "", "convert_to_native_paths"], [248, 4, 1, "", "doctest"], [248, 4, 1, "", "get_sympy_dir"], [248, 4, 1, "", "raise_on_deprecated"], [248, 4, 1, "", "run_all_tests"], [248, 4, 1, "", "run_in_subprocess_with_hash_randomization"], [248, 4, 1, "", "split_list"], [248, 4, 1, "", "sympytestfile"], [248, 4, 1, "", "test"]], "sympy.testing.runtests.PyTestReporter": [[248, 2, 1, "", "write"]], "sympy.testing.runtests.SymPyDocTestRunner": [[248, 2, 1, "", "run"]], "sympy.testing.runtests.SymPyOutputChecker": [[248, 2, 1, "", "check_output"]], "sympy.testing.runtests.SymPyTestResults": [[248, 5, 1, "", "attempted"], [248, 5, 1, "", "failed"]], "sympy.utilities": [[249, 0, 0, "-", "autowrap"], [250, 0, 0, "-", "codegen"], [251, 0, 0, "-", "decorator"], [252, 0, 0, "-", "enumerative"], [253, 0, 0, "-", "exceptions"], [255, 0, 0, "-", "iterables"], [256, 0, 0, "-", "lambdify"], [257, 0, 0, "-", "memoization"], [258, 0, 0, "-", "misc"], [259, 0, 0, "-", "pkgdata"], [260, 0, 0, "-", "source"], [261, 0, 0, "-", "timeutils"]], "sympy.utilities.autowrap": [[249, 1, 1, "", "CodeWrapper"], [249, 1, 1, "", "CythonCodeWrapper"], [249, 1, 1, "", "DummyWrapper"], [249, 1, 1, "", "F2PyCodeWrapper"], [249, 1, 1, "", "UfuncifyCodeWrapper"], [249, 4, 1, "", "autowrap"], [249, 4, 1, "", "binary_function"], [249, 4, 1, "", "ufuncify"]], "sympy.utilities.autowrap.CythonCodeWrapper": [[249, 2, 1, "", "dump_pyx"]], "sympy.utilities.autowrap.UfuncifyCodeWrapper": [[249, 2, 1, "", "dump_c"]], "sympy.utilities.codegen": [[250, 1, 1, "", "Argument"], [250, 1, 1, "", "CCodeGen"], [250, 1, 1, "", "CodeGen"], [250, 1, 1, "", "DataType"], [250, 1, 1, "", "FCodeGen"], [250, 1, 1, "", "JuliaCodeGen"], [250, 1, 1, "", "OctaveCodeGen"], [250, 1, 1, "", "OutputArgument"], [250, 1, 1, "", "Result"], [250, 1, 1, "", "Routine"], [250, 1, 1, "", "RustCodeGen"], [250, 4, 1, "", "codegen"], [250, 4, 1, "", "get_default_datatype"], [250, 4, 1, "", "make_routine"]], "sympy.utilities.codegen.CCodeGen": [[250, 2, 1, "", "dump_c"], [250, 2, 1, "", "dump_h"], [250, 2, 1, "", "get_prototype"]], "sympy.utilities.codegen.CodeGen": [[250, 2, 1, "", "dump_code"], [250, 2, 1, "", "routine"], [250, 2, 1, "", "write"]], "sympy.utilities.codegen.FCodeGen": [[250, 2, 1, "", "dump_f95"], [250, 2, 1, "", "dump_h"], [250, 2, 1, "", "get_interface"]], "sympy.utilities.codegen.JuliaCodeGen": [[250, 2, 1, "", "dump_jl"], [250, 2, 1, "", "routine"]], "sympy.utilities.codegen.OctaveCodeGen": [[250, 2, 1, "", "dump_m"], [250, 2, 1, "", "routine"]], "sympy.utilities.codegen.Routine": [[250, 3, 1, "", "result_variables"], [250, 3, 1, "", "variables"]], "sympy.utilities.codegen.RustCodeGen": [[250, 2, 1, "", "dump_rs"], [250, 2, 1, "", "get_prototype"], [250, 2, 1, "", "routine"]], "sympy.utilities.decorator": [[251, 4, 1, "", "conserve_mpmath_dps"], [251, 4, 1, "", "deprecated"], [251, 4, 1, "", "doctest_depends_on"], [251, 4, 1, "", "memoize_property"], [251, 1, 1, "", "no_attrs_in_subclass"], [251, 4, 1, "", "public"], [251, 4, 1, "", "threaded"], [251, 4, 1, "", "threaded_factory"], [251, 4, 1, "", "xthreaded"]], "sympy.utilities.enumerative": [[252, 1, 1, "", "MultisetPartitionTraverser"], [252, 4, 1, "", "factoring_visitor"], [252, 4, 1, "", "list_visitor"], [252, 4, 1, "", "multiset_partitions_taocp"]], "sympy.utilities.enumerative.MultisetPartitionTraverser": [[252, 2, 1, "", "count_partitions"], [252, 2, 1, "", "enum_all"], [252, 2, 1, "", "enum_large"], [252, 2, 1, "", "enum_range"], [252, 2, 1, "", "enum_small"]], "sympy.utilities.exceptions": [[253, 7, 1, "", "SymPyDeprecationWarning"], [253, 4, 1, "", "ignore_warnings"], [253, 4, 1, "", "sympy_deprecation_warning"]], "sympy.utilities.iterables": [[255, 1, 1, "", "NotIterable"], [255, 4, 1, "", "binary_partitions"], [255, 4, 1, "", "bracelets"], [255, 4, 1, "", "capture"], [255, 4, 1, "", "common_prefix"], [255, 4, 1, "", "common_suffix"], [255, 4, 1, "", "connected_components"], [255, 4, 1, "", "dict_merge"], [255, 4, 1, "", "filter_symbols"], [255, 4, 1, "", "flatten"], [255, 4, 1, "", "generate_bell"], [255, 4, 1, "", "generate_derangements"], [255, 4, 1, "", "generate_involutions"], [255, 4, 1, "", "generate_oriented_forest"], [255, 4, 1, "", "group"], [255, 4, 1, "", "has_dups"], [255, 4, 1, "", "has_variety"], [255, 4, 1, "", "ibin"], [255, 4, 1, "", "iproduct"], [255, 4, 1, "", "is_palindromic"], [255, 4, 1, "", "is_sequence"], [255, 4, 1, "", "iterable"], [255, 4, 1, "", "kbins"], [255, 4, 1, "", "least_rotation"], [255, 4, 1, "", "minlex"], [255, 4, 1, "", "multiset"], [255, 4, 1, "", "multiset_combinations"], [255, 4, 1, "", "multiset_derangements"], [255, 4, 1, "", "multiset_partitions"], [255, 4, 1, "", "multiset_permutations"], [255, 4, 1, "", "necklaces"], [255, 4, 1, "", "numbered_symbols"], [255, 4, 1, "", "ordered_partitions"], [255, 4, 1, "", "partitions"], [255, 4, 1, "", "permute_signs"], [255, 4, 1, "", "postfixes"], [255, 4, 1, "", "prefixes"], [255, 4, 1, "", "random_derangement"], [255, 4, 1, "", "reshape"], [255, 4, 1, "", "rotate_left"], [255, 4, 1, "", "rotate_right"], [255, 4, 1, "", "rotations"], [255, 4, 1, "", "roundrobin"], [255, 4, 1, "", "runs"], [255, 4, 1, "", "sequence_partitions"], [255, 4, 1, "", "sequence_partitions_empty"], [255, 4, 1, "", "sift"], [255, 4, 1, "", "signed_permutations"], [255, 4, 1, "", "strongly_connected_components"], [255, 4, 1, "", "subsets"], [255, 4, 1, "", "take"], [255, 4, 1, "", "topological_sort"], [255, 4, 1, "", "unflatten"], [255, 4, 1, "", "uniq"], [255, 4, 1, "", "variations"]], "sympy.utilities.lambdify": [[256, 4, 1, "", "implemented_function"], [256, 4, 1, "", "lambdastr"], [256, 4, 1, "", "lambdify"]], "sympy.utilities.memoization": [[257, 4, 1, "", "assoc_recurrence_memo"], [257, 4, 1, "", "recurrence_memo"]], "sympy.utilities.misc": [[258, 4, 1, "", "as_int"], [258, 4, 1, "", "debug"], [258, 4, 1, "", "debug_decorator"], [258, 4, 1, "", "debugf"], [258, 4, 1, "", "filldedent"], [258, 4, 1, "", "find_executable"], [258, 4, 1, "", "func_name"], [258, 4, 1, "", "ordinal"], [258, 4, 1, "", "rawlines"], [258, 4, 1, "", "replace"], [258, 4, 1, "", "strlines"], [258, 4, 1, "", "translate"]], "sympy.utilities.pkgdata": [[259, 4, 1, "", "get_resource"]], "sympy.utilities.source": [[260, 4, 1, "", "get_class"], [260, 4, 1, "", "get_mod_func"]], "sympy.utilities.timeutils": [[261, 4, 1, "", "timed"]], "sympy.vector.coordsysrect": [[262, 1, 1, "", "CoordSys3D"]], "sympy.vector.coordsysrect.CoordSys3D": [[262, 2, 1, "", "__init__"], [262, 2, 1, "", "create_new"], [262, 2, 1, "", "locate_new"], [262, 2, 1, "", "orient_new"], [262, 2, 1, "", "orient_new_axis"], [262, 2, 1, "", "orient_new_body"], [262, 2, 1, "", "orient_new_quaternion"], [262, 2, 1, "", "orient_new_space"], [262, 2, 1, "", "position_wrt"], [262, 2, 1, "", "rotation_matrix"], [262, 2, 1, "", "scalar_map"]], "sympy.vector": [[265, 4, 1, "", "curl"], [265, 4, 1, "", "divergence"], [265, 4, 1, "", "express"], [265, 4, 1, "", "gradient"], [265, 4, 1, "", "is_conservative"], [265, 4, 1, "", "is_solenoidal"], [265, 4, 1, "", "matrix_to_vector"], [265, 4, 1, "", "scalar_potential"], [265, 4, 1, "", "scalar_potential_difference"]], "sympy.vector.deloperator": [[262, 1, 1, "", "Del"]], "sympy.vector.deloperator.Del": [[262, 2, 1, "", "cross"], [262, 2, 1, "", "dot"], [262, 2, 1, "", "gradient"]], "sympy.vector.dyadic": [[262, 1, 1, "", "Dyadic"]], "sympy.vector.dyadic.Dyadic": [[262, 3, 1, "", "components"], [262, 2, 1, "", "cross"], [262, 2, 1, "", "dot"], [262, 2, 1, "", "to_matrix"]], "sympy.vector.implicitregion": [[262, 1, 1, "", "ImplicitRegion"]], "sympy.vector.implicitregion.ImplicitRegion": [[262, 2, 1, "", "multiplicity"], [262, 2, 1, "", "rational_parametrization"], [262, 2, 1, "", "regular_point"], [262, 2, 1, "", "singular_points"]], "sympy.vector.integrals": [[262, 1, 1, "", "ParametricIntegral"], [265, 4, 1, "", "vector_integrate"]], "sympy.vector.orienters": [[264, 1, 1, "", "AxisOrienter"], [264, 1, 1, "", "BodyOrienter"], [264, 1, 1, "", "Orienter"], [264, 1, 1, "", "QuaternionOrienter"], [264, 1, 1, "", "SpaceOrienter"]], "sympy.vector.orienters.AxisOrienter": [[264, 2, 1, "", "__init__"], [264, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.BodyOrienter": [[264, 2, 1, "", "__init__"]], "sympy.vector.orienters.Orienter": [[264, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.QuaternionOrienter": [[264, 2, 1, "", "__init__"]], "sympy.vector.orienters.SpaceOrienter": [[264, 2, 1, "", "__init__"]], "sympy.vector.parametricregion": [[262, 1, 1, "", "ParametricRegion"]], "sympy.vector.vector": [[262, 1, 1, "", "Vector"]], "sympy.vector.vector.Vector": [[262, 3, 1, "", "components"], [262, 2, 1, "", "cross"], [262, 2, 1, "", "dot"], [262, 2, 1, "", "magnitude"], [262, 2, 1, "", "normalize"], [262, 2, 1, "", "outer"], [262, 2, 1, "", "projection"], [262, 2, 1, "", "separate"], [262, 2, 1, "", "to_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"cite": 0, "sympi": [0, 4, 7, 8, 9, 13, 15, 18, 19, 20, 29, 31, 35, 37, 38, 48, 90, 109, 149, 198, 207, 262, 265, 266, 269, 283, 285, 288], "debug": [1, 12], "depend": [2, 8, 12, 146, 207, 267], "hard": 2, "option": [2, 9, 31, 34, 35, 36, 210], "recommend": [2, 5], "interact": [2, 95, 203], "us": [2, 5, 7, 13, 19, 27, 29, 30, 31, 32, 33, 34, 35, 36, 48, 70, 91, 92, 108, 111, 141, 146, 147, 201, 203, 214, 236, 267], "print": [2, 13, 23, 48, 95, 122, 130, 191, 197, 217, 293], "pars": [2, 36, 109], "logic": [2, 22, 97, 273, 276], "plot": [2, 13, 116, 162, 203], "lambdifi": [2, 13, 108, 256, 283], "code": [2, 3, 5, 7, 9, 11, 12, 13, 48, 51, 122, 201, 217, 260, 273, 275], "gener": [2, 4, 5, 48, 57, 59, 207, 212, 236, 268, 273, 275], "autowrap": [2, 48, 249], "printer": [2, 48, 217, 293], "test": [2, 11, 12, 13, 64, 97, 216, 245, 247, 248, 290], "onli": [2, 29, 34, 236], "statist": 2, "symengin": 2, "backend": [2, 203], "sage": 2, "develop": [2, 7, 9, 11, 67], "get": [2, 7, 9, 15, 27], "sourc": [2, 260], "run": [2, 11, 12, 38, 248], "build": [2, 8], "document": [2, 3, 4, 5, 7, 8, 11, 37], "benchmark": 2, "deprec": [3, 12, 13], "polici": [3, 12], "what": [3, 146, 206, 207, 236, 288, 291], "i": [3, 12, 15, 33, 34, 92, 108, 146, 206, 217, 236, 288], "try": 3, "avoid": 3, "backward": 3, "incompat": 3, "chang": [3, 11, 13], "first": [3, 13], "place": 3, "when": [3, 36, 92], "doe": [3, 15, 236], "requir": [3, 8], "public": 3, "api": [3, 37, 88, 92, 94, 118, 125, 195, 236, 249, 250, 263, 273], "Not": [3, 27, 29, 30, 31, 33, 34, 35, 36], "The": [3, 13, 21, 23, 49, 57, 92, 146, 187, 199, 212, 224, 227, 268, 269, 288], "purpos": 3, "technic": 3, "possibl": [3, 31, 290], "how": [3, 24, 37, 92, 201, 236], "long": 3, "should": [3, 108], "last": 3, "checklist": [3, 11], "ad": 3, "releas": 3, "note": [3, 23, 67, 79, 146, 224, 226, 286, 295], "entri": [3, 103], "docstr": [4, 5, 110, 112, 114, 123, 124, 126, 127, 128, 129, 130, 131, 193, 194, 196, 197, 262, 264, 265], "style": [4, 5, 12], "guid": [4, 5, 10, 12, 24, 37, 142, 199, 270], "guidelin": [4, 5], "format": [4, 5, 13, 36], "section": 4, "1": [4, 13, 25, 34, 92, 111, 132, 146, 158], "singl": [4, 15, 17, 29], "sentenc": 4, "summari": 4, "2": [4, 25, 34, 92, 111, 132, 146], "explan": [4, 16, 37], "3": [4, 25, 94, 111, 132, 183], "exampl": [4, 11, 23, 25, 27, 29, 30, 33, 35, 39, 67, 79, 91, 94, 107, 111, 119, 133, 146, 150, 154, 185, 186, 187, 201, 216, 217, 224, 227, 237, 238, 239, 242, 268, 288, 294], "4": [4, 13, 25, 111], "paramet": [4, 30, 227, 236], "5": [4, 13, 25, 111], "see": [4, 67, 255, 268], "also": [4, 67, 255], "6": [4, 13, 111], "refer": [4, 21, 25, 37, 40, 47, 50, 66, 67, 69, 79, 85, 92, 94, 100, 101, 103, 105, 107, 109, 125, 148, 154, 157, 187, 199, 201, 202, 203, 204, 208, 210, 212, 213, 214, 224, 226, 227, 230, 236, 249, 250, 270, 273], "sampl": [4, 13], "class": [4, 13, 18, 47, 48, 66, 69, 101, 103, 105, 107, 146, 192, 203, 212, 217, 230, 238, 262, 264], "ar": [4, 29, 34, 201, 207, 236], "mathemat": [4, 15, 27, 149], "function": [4, 12, 13, 15, 23, 27, 29, 31, 33, 34, 36, 48, 57, 66, 67, 73, 74, 75, 85, 86, 89, 90, 92, 97, 103, 107, 109, 111, 122, 129, 147, 169, 172, 193, 194, 198, 203, 205, 207, 208, 213, 216, 217, 227, 230, 233, 234, 238, 265, 269, 293, 294], "best": [4, 5, 23], "practic": [4, 5, 23], "write": [4, 5, 11, 12, 23], "import": 4, "sphinx": 4, "cross": 4, "referenc": 4, "type": [5, 12, 17, 29, 48, 75, 193, 236, 237], "narr": 5, "markdown": 5, "prefer": [5, 36], "math": [5, 48], "latex": [5, 109, 293], "head": 5, "spell": 5, "punctuat": 5, "capit": 5, "tone": 5, "contribut": [6, 7, 11, 37, 214], "introduct": [7, 15, 19, 40, 47, 48, 49, 57, 69, 79, 97, 132, 149, 187, 198, 200, 203, 204, 205, 212, 216, 271, 288], "familiar": 7, "softwar": 7, "read": [7, 286], "paper": 7, "perus": 7, "review": 7, "conduct": 7, "join": 7, "our": 7, "mail": 7, "list": [7, 13, 15, 17, 27, 29], "setup": [7, 9], "your": [7, 9, 11, 31], "environ": [7, 9], "identifi": 7, "someth": [7, 12], "work": [7, 30, 32, 34, 79, 216], "codebas": 7, "pull": [7, 11], "request": [7, 11], "docker": 8, "debian": 8, "ubuntu": 8, "fedora": 8, "mac": 8, "window": [8, 203], "10": [8, 13, 111], "doc": [8, 208], "local": 8, "instal": [8, 9, 37, 38, 109, 292], "logo": 8, "view": 8, "auto": 8, "rebuild": 8, "live": 8, "server": 8, "pdf": 8, "git": [9, 38], "configur": [9, 210], "name": [9, 11, 55], "email": [9, 11], "set": [9, 13, 18, 31, 34, 35, 44, 79, 201, 225, 236, 293], "github": [9, 12], "creat": [9, 11, 13, 15, 23, 33, 103], "account": 9, "ssh": 9, "kei": [9, 23, 149, 289], "fork": 9, "virtual": 9, "new": [10, 11, 13, 267], "contributor": 10, "index": [10, 49, 57, 239, 242], "workflow": 11, "process": [11, 237], "pick": 11, "an": [11, 13, 31, 33, 34, 79, 132, 187, 227, 236, 289], "issu": [11, 122, 132, 146, 191, 290], "fix": [11, 132], "branch": [11, 92], "modifi": 11, "qualiti": [11, 12], "add": [11, 23, 67], "commit": 11, "delet": [11, 290], "junk": 11, "file": 11, "messag": 11, "good": 11, "co": 11, "author": [11, 202], "make": [11, 31, 36], "titl": 11, "descript": 11, "address": 11, "mailmap": 11, "basic": [12, 67, 71, 103, 193, 205, 207, 213, 225, 266, 273, 274, 283, 290], "failur": 12, "action": 12, "regress": 12, "special": [12, 15, 20, 48, 75, 213, 225, 294], "except": [12, 103, 109, 210, 253], "warn": [12, 13, 253], "unchang": 12, "express": [12, 13, 15, 27, 30, 31, 33, 48, 79, 86, 89, 97, 100, 109, 124, 207, 216, 239, 267, 283, 289], "dummi": 12, "consist": [12, 36], "check": [12, 13, 193], "random": [12, 67, 237], "skip": 12, "mark": 12, "expect": 12, "fail": 12, "slow": [12, 146], "extern": 12, "doctest": 12, "updat": 12, "exist": [12, 92], "coverag": 12, "activ": 13, "silenc": 13, "version": 13, "13": 13, "marker": 13, "annot": 13, "fill": 13, "rectangl": 13, "move": [13, 227], "mechan": [13, 21, 113, 122, 125, 133, 142, 143, 144, 145, 146, 147, 148, 149, 150, 169, 237], "12": 13, "managedproperti": 13, "metaclass": 13, "joint": [13, 126, 143, 237], "coordin": [13, 122, 136, 146, 203, 266, 267, 269, 271], "intermedi": 13, "frame": [13, 201], "attach": 13, "point": [13, 23, 71, 82, 122, 191, 200, 266], "argument": [13, 15, 236], "11": [13, 111], "modul": [13, 117, 152, 191, 199, 204, 205, 206, 207, 210, 212, 213, 230, 233, 234, 236, 249], "tensor": [13, 63, 75, 181, 240, 243, 244], "arrai": [13, 238, 239], "conv_": 13, "renam": 13, "from_": 13, "mathematica": [13, 217], "parser": [13, 132], "redund": 13, "static": 13, "method": [13, 19, 23, 32, 38, 127, 136, 139, 140, 141, 144, 145, 146, 217, 234, 236, 241, 267, 290], "carmichael": 13, "hadamardproduct": 13, "matadd": 13, "matmul": 13, "some": [13, 34, 149, 236], "travers": [13, 67], "have": [13, 31, 35, 216], "been": 13, "core": [13, 67, 100], "trace": 13, "compat": [13, 239], "submodul": [13, 79], "9": [13, 111], "expr_free_symbol": 13, "stat": [13, 237], "numsampl": 13, "n": [13, 238, 239], "poli": [13, 206, 207, 208, 215], "solver": [13, 34, 215, 231, 232, 233, 235, 236, 295], "rawmatrix": 13, "non": 13, "expr": [13, 67], "object": [13, 18, 242], "matrix": [13, 32, 44, 100, 103, 104, 146, 237, 290], "get_seg": 13, "attribut": [13, 49, 57], "mdft": 13, "physic": [13, 26, 119, 122, 133, 143, 144, 145, 146, 147, 148, 149, 150, 189, 191, 195, 198, 199, 200, 201, 273, 279], "matric": [13, 19, 32, 98, 99, 100, 101, 102, 103, 105, 119, 121, 239, 273, 277, 290], "privat": 13, "sparsematrix": [13, 105], "_smat": 13, "densematrix": 13, "_mat": 13, "laplace_transform": 13, "nocond": 13, "fals": 13, "8": [13, 111], "theanocod": 13, "assumpt": [13, 18, 21, 23, 43, 67], "handler": [13, 21], "askhandl": 13, "relat": [13, 15, 17, 21, 29, 67, 75, 97, 198, 201, 269], "7": [13, 111], "call": [13, 29, 36], "stochasticprocess": 13, "distribut": [13, 210, 237], "randomindexedsymbol": 13, "discretemarkovchain": 13, "absorbing_probabilit": 13, "util": [13, 48, 64, 65, 84, 103, 155, 212, 235, 254, 261, 273, 281], "misc": [13, 43], "find_execut": 13, "mutabl": 13, "diffgeom": 13, "unicod": [13, 293], "pretti": [13, 217, 293], "stringpict": 13, "prettyform": 13, "pretty_symbologi": 13, "xstr": 13, "pass": 13, "oper": [13, 15, 89, 103, 160, 169, 171, 172, 193, 198, 201, 227, 238, 244, 266, 268, 269, 283, 290], "longer": 13, "accept": 13, "arg": [13, 289], "variou": [13, 216], "randtest": 13, "mix": 13, "polynomi": [13, 27, 75, 89, 205, 207, 208, 209, 210, 212, 213, 214, 216, 235, 294], "binari": 13, "print_cycl": 13, "flag": 13, "combinator": [13, 54], "permut": [13, 58, 59], "integr": [13, 34, 71, 75, 89, 91, 92, 93, 94, 122, 205, 212, 272, 284], "string": [13, 21, 36, 283], "fallback": 13, "sympifi": [13, 67], "indefinit": 13, "eq": [13, 31], "fun_ev": 13, "__call__": 13, "tensortyp": 13, "dummy_fmt": 13, "tensorindextyp": 13, "metric": 13, "get_kronecker_delta": 13, "get_epsilon": 13, "tensorsymmetri": 13, "tensorhead": 13, "is_emptyset": 13, "productset": 13, "iter": [13, 225, 255], "set_potential_energi": 13, "condit": [13, 34, 92, 225], "conditionset": 13, "max_degre": 13, "get_upper_degre": 13, "properti": [13, 21, 204], "multivariate_result": 13, "dixonresult": 13, "tupl": [13, 15, 17, 29, 213], "lambda": 13, "evalu": [13, 15, 23, 27, 71, 89, 149, 289], "differentiate_finit": 13, "data": 13, "glossari": 14, "gotcha": [15, 21, 132, 286], "pitfal": 15, "equal": [15, 30, 31, 286], "sign": [15, 286], "doubl": 15, "variabl": [15, 29, 34, 36, 203, 237, 267], "assign": 15, "between": [15, 21, 189, 207], "symbol": [15, 21, 22, 23, 29, 30, 32, 67, 86, 146, 150, 202, 207, 213, 216, 236, 286, 288], "python": [15, 48], "number": [15, 44, 53, 67, 70, 71, 92, 107, 207, 212, 216, 273, 278], "v": [15, 22, 207], "float": [15, 71], "ration": [15, 207, 208, 213, 216, 219, 233, 294], "immut": [15, 101], "invers": [15, 23, 73, 92], "trig": 15, "sqrt": 15, "dictionari": [15, 17, 27, 35], "keyword": 15, "help": 15, "from": [15, 30, 31, 32, 36, 216, 239], "within": 15, "solv": [17, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 111, 205, 212, 235, 236, 295], "output": [17, 122, 236], "empti": 17, "Of": 17, "valu": [17, 22, 36], "boolean": [17, 22, 97], "classif": 18, "kind": [18, 67], "func": [18, 289], "finit": [19, 46, 49, 204, 207, 210, 212, 216, 227, 237, 284], "differ": [19, 21, 46, 149, 207, 267, 284], "approxim": [19, 27, 48], "deriv": [19, 34, 201, 238, 269, 284], "A": [19, 134, 135, 138, 139, 140, 141, 146, 288, 295], "direct": [19, 269], "topic": [20, 122, 191, 273, 280], "old": [21, 207], "system": [21, 29, 33, 35, 116, 137, 150, 184, 186, 187, 190, 233, 235, 266, 267, 269, 271], "appli": [21, 92, 227], "input": [21, 236], "predic": [21, 43, 44], "abov": 21, "definit": [21, 23, 85], "implic": 21, "interpret": 21, "other": [21, 23, 38, 86, 129, 198, 267], "is_": 21, "implement": [21, 92, 198, 217, 227, 249, 250, 266, 269], "limit": [21, 29, 30, 91, 132, 222, 224, 284], "combin": [21, 89], "fuzzi": 22, "three": [22, 79], "bool": 22, "custom": [23, 203, 217], "easi": 23, "case": [23, 236], "fulli": 23, "defin": [23, 34], "automat": [23, 216], "eval": 23, "remind": 23, "numer": [23, 27, 33, 34, 36, 71, 89, 94, 108, 122, 149], "evalf": [23, 67, 108, 283], "rewrit": [23, 48, 218, 294], "simplif": [23, 71, 97, 226, 294], "doit": 23, "expand": [23, 216, 218, 294], "differenti": [23, 34, 69, 89, 122, 235, 236, 295], "as_real_imag": 23, "miscellan": [23, 73, 79, 258], "_eval_": 23, "complet": [23, 27, 132], "versin": 23, "divid": 23, "fuse": 23, "multipli": 23, "fma": 23, "addit": [23, 89], "tip": [23, 283, 284, 286, 289, 290], "control": [25, 115, 116, 117, 118, 203], "packag": 25, "find": [27, 33, 212, 213], "root": [27, 33, 213], "algebra": [27, 29, 30, 31, 32, 34, 35, 40, 96, 103, 157, 201, 204, 207, 212, 216, 235, 295], "altern": [27, 29, 30, 31, 32, 33, 34, 35, 201], "consid": [27, 29, 30, 31, 32, 33, 34, 35], "guidanc": [27, 29, 30, 31, 32, 33, 34, 35, 36], "solut": [27, 30, 31, 32, 33, 34, 35, 36, 169, 236, 268], "without": [27, 34], "multipl": [27, 34, 89, 201, 212], "With": [27, 30, 31, 32, 33, 34, 35, 36], "factor": [27, 205, 210, 216, 294], "equat": [27, 28, 30, 31, 32, 33, 34, 35, 36, 144, 145, 146, 185, 205, 230, 235, 236, 295], "exact": [27, 36], "real_root": 27, "nroot": 27, "complex": [27, 33, 73, 207], "result": [27, 29, 30, 31, 32, 33, 34, 35, 216], "all_root": 27, "tradeoff": 27, "speed": [27, 31, 32, 35, 36, 122, 146], "all": [27, 29, 30, 31, 33, 34, 35], "perhap": 27, "implicitli": [27, 34], "crootof": 27, "repres": [27, 31, 36, 92, 177, 207, 212], "can": [27, 29, 30, 31, 33, 34, 35, 36], "Be": [27, 29, 30, 31, 32, 33, 34], "No": [27, 30, 31, 32, 34], "close": [27, 31, 34, 35, 36], "form": [27, 31, 34, 35, 36, 97, 104, 146, 239], "report": [27, 29, 30, 31, 32, 33, 34, 35, 36], "bug": [27, 29, 30, 31, 32, 33, 34, 35, 36, 94], "reduc": [29, 216], "One": [29, 33, 34], "inequ": [29, 232, 235, 236], "includ": [29, 34, 36], "extract": [29, 30, 32, 34], "decompos": 29, "reduct": [29, 227], "interest": [29, 288], "per": 29, "That": [29, 30, 31, 33, 35, 36], "return": [29, 34, 236], "period": 29, "which": [29, 31, 35, 108, 217], "cannot": [29, 31, 34, 35], "satisfi": 29, "analyt": [29, 169], "diophantin": [30, 230, 235, 236], "zero": [30, 31, 36, 116, 210, 216, 290], "specifi": [30, 34, 203], "order": [30, 44, 213, 224, 227], "verifi": [30, 272], "programmat": [30, 31], "Into": [31, 33, 35], "put": 31, "restrict": 31, "domain": [31, 205, 207, 208, 213, 216, 236], "explicitli": [31, 34], "infinit": [31, 236], "substitut": [31, 33, 122, 191, 283], "solveset": [31, 236], "necessarili": 31, "interrog": 31, "up": [31, 32, 35, 36, 293], "usual": 32, "must": 32, "squar": [32, 205], "sever": 32, "same": 32, "vector": [32, 57, 142, 191, 193, 195, 198, 199, 200, 201, 210, 262, 263, 265, 266, 267, 269, 270, 271, 272], "element": [32, 146, 207, 212], "real": [33, 207], "ensur": [33, 36, 236], "found": 33, "given": [33, 35], "interv": [33, 203], "increas": 33, "precis": 33, "scipi": [33, 34], "ordinari": [34, 235, 236], "od": [34, 233, 235, 236], "Its": 34, "independ": 34, "initi": 34, "boundari": 34, "bewar": 34, "copi": 34, "past": 34, "pair": 34, "If": 34, "There": 34, "arbitrari": 34, "constant": [34, 164, 187], "hint": [34, 233, 234], "unevalu": 34, "select": 34, "specif": [34, 48], "linear": [35, 89, 103, 122, 128, 146, 147, 187, 216], "nonlinear": 35, "you": 36, "might": 36, "ani": [36, 236], "denomin": 36, "do": [36, 236], "simplifi": [36, 48, 210, 228, 229, 294], "welcom": 37, "": [37, 127, 136, 139, 140, 141, 144, 145, 146, 167, 178, 216, 226, 235, 236, 267, 272, 291], "tutori": [37, 230, 282, 287], "anaconda": 38, "mpmath": 38, "question": 38, "abc": 39, "caveat": [39, 109], "quaternion": 40, "ask": 41, "assum": 42, "queri": 43, "content": [43, 54, 74, 87, 93, 209, 221, 231, 240], "perform": 43, "improv": [43, 132], "common": [44, 98, 122, 191, 216, 217, 218], "calculu": [44, 46, 201, 284], "theori": [44, 47, 107, 273, 278], "refin": 45, "singular": [46, 111], "weight": 46, "categori": 47, "base": [47, 69, 103, 204, 205, 216, 223, 236], "diagram": 47, "draw": 47, "codegen": [48, 250], "tool": [48, 106], "abstract": [48, 113, 117, 119, 142, 152, 169, 199, 208], "syntax": 48, "tree": [48, 207, 217, 289], "ast": [48, 132], "predefin": 48, "node": 48, "c": [48, 217], "cfunction": 48, "cnode": 48, "cxxnode": 48, "fortran": [48, 217], "fnode": 48, "algorithm": [48, 49, 167, 178, 210, 213, 219, 224, 227], "pyutil": 48, "cutil": 48, "futil": 48, "present": [49, 57], "group": [49, 50, 52, 55, 57, 58, 187, 212], "overview": [49, 57, 92], "facil": 49, "construct": [49, 57, 239], "free": [49, 205], "word": [49, 57], "coset": 49, "enumer": [49, 72], "todd": 49, "coxet": 49, "cosett": 49, "compress": 49, "standard": 49, "subgroup": 49, "low": 49, "reidemeist": 49, "schreier": 49, "bibliographi": [49, 57], "galoi": [50, 212], "grai": 51, "constructor": [52, 213, 290], "nilpot": 53, "abelian": 53, "cyclic": 53, "partit": [56, 255], "polycycl": 57, "polycyclicgroup": 57, "collector": 57, "comput": [57, 92, 108, 169, 216, 288], "minim": [57, 212], "uncollect": 57, "subword": 57, "collect": [57, 218, 294], "expon": [57, 216], "depth": [57, 79], "lead": 57, "polyhedron": 60, "prufer": 61, "sequenc": [61, 89, 210, 213, 222, 223], "subset": [62, 70], "canonic": 63, "concret": 66, "hypergeometr": [66, 75, 86, 89, 219, 227], "term": [66, 216, 218, 224], "cach": 67, "singleton": [67, 223, 225], "power": [67, 219, 225, 288, 294], "mul": 67, "mod": 67, "multidimension": 67, "contain": 67, "exprtool": 67, "sort": 67, "cryptographi": 68, "geometri": [69, 79, 204], "discret": [70, 237], "transform": [70, 92, 94, 109, 267], "fast": 70, "fourier": [70, 220], "theoret": 70, "walsh": 70, "hadamard": 70, "m\u00f6biu": 70, "convolut": 70, "cover": 70, "product": [70, 170, 181, 238, 268], "intersect": [70, 79], "accuraci": 71, "error": [71, 75], "handl": [71, 236], "sum": 71, "combinatori": 72, "elementari": [73, 204, 223, 225], "trigonometr": [73, 75, 226, 294], "hyperbol": 73, "integ": [73, 207], "exponenti": [73, 75, 294], "piecewis": 73, "dirac": 75, "delta": 75, "discontinu": 75, "gamma": [75, 119], "beta": 75, "fresnel": 75, "logarithm": [75, 294], "bessel": 75, "airi": 75, "b": 75, "spline": 75, "riemann": 75, "zeta": 75, "ellipt": 75, "mathieu": 75, "orthogon": [75, 213, 269], "jacobi": 75, "gegenbau": 75, "chebyshev": 75, "legendr": 75, "hermit": 75, "laguerr": 75, "spheric": 75, "harmon": [75, 158, 183], "curv": 76, "ellips": 77, "entiti": [78, 79, 203], "avail": 79, "usag": [79, 132, 150, 207, 268], "median": 79, "pappu": 79, "hexagon": 79, "theorem": [79, 92, 272], "futur": [79, 122, 132, 191], "truth": [79, 97], "dimens": [79, 184, 187], "beyond": 79, "visual": [79, 149], "line": 80, "plane": [81, 92], "polygon": [83, 94], "about": [85, 236, 267, 295], "holonom": [85, 86, 87, 89, 90, 137], "convert": [86, 89, 207, 283], "represent": [86, 90, 187, 201, 207], "meijer": [86, 89, 92, 227], "g": [86, 89, 92, 227], "intern": [88, 92, 94, 207, 210, 212, 230], "composit": 89, "seri": [89, 203, 214, 219, 220, 221, 224, 284], "expans": [89, 224, 227, 284], "current": 91, "polar": [92, 154], "argand": 92, "tabl": [92, 97, 227], "lookup": 92, "mellin": 92, "converg": 92, "laplac": 92, "thi": [92, 236], "valid": 92, "formula": [92, 227], "todo": 94, "over": [94, 216, 225], "polytop": 94, "For": 94, "2d": 94, "polyhedra": 94, "session": 95, "lie": [96, 233], "equival": [97, 149], "manipul": [97, 103, 124, 209, 210, 213, 214, 236, 289], "infer": 97, "dens": [99, 207, 208, 210], "block": 100, "immutablematrix": 101, "rotat": 103, "numpi": 103, "normal": [104, 216], "spars": [105, 106, 207, 208, 210], "immutablesparsematrix": 105, "ntheori": 107, "ecm": 107, "q": 107, "sub": 108, "ufuncifi": 108, "aesara": [108, 217], "so": 108, "experiment": 109, "mathrm": [109, 293], "runtim": 109, "beam": [110, 111, 113], "bend": 111, "problem": [111, 212, 268], "cabl": [112, 113], "continuum": 113, "truss": [113, 114], "pole": 116, "bode": 116, "impuls": 116, "respons": [116, 217], "step": [116, 236], "ramp": 116, "lti": 118, "high": 119, "energi": [119, 147], "hydrogen": 120, "wavefunct": 120, "potenti": [122, 146, 147, 191, 198, 269], "advanc": [122, 191, 216, 289, 290], "featur": [122, 191, 285], "choic": 122, "acceler": [122, 191, 200, 224], "interfac": [122, 191, 203, 237], "bodi": [123, 129, 147, 272], "framework": [126, 143], "kane": [127, 136, 139, 140, 144, 146], "lagrang": [127, 136, 141, 145, 146], "inertia": [129, 147], "load": [129, 147], "mechanics_print": 130, "mprint": 130, "mpprint": 130, "mlatex": 130, "symbolicsystem": [131, 150], "autolev": [132, 149], "dynam": 132, "onlin": 132, "switch": 132, "bicycl": 134, "four": 135, "bar": 135, "linkag": 135, "nonminim": 136, "pendulum": 136, "multi": 137, "degre": 137, "freedom": 137, "roll": [138, 139, 140, 141], "disc": [138, 139, 140, 141], "constraint": 140, "forc": 140, "classic": [142, 210], "jointsmethod": 143, "structur": [144, 145, 187, 230], "background": 146, "directli": [146, 267], "new_method": 146, "kwarg": 146, "a_and_b": 146, "true": 146, "ha": 146, "nan": 146, "zoo": 146, "oo": 146, "further": [146, 286], "mass": [147, 272], "particl": [147, 173], "rigid": 147, "dyadic": [147, 191, 266, 267], "momentum": 147, "angular": [147, 200], "momenta": 147, "kinet": 147, "lagrangian": 147, "user": [149, 230, 233, 234], "rough": 149, "link": 149, "gaussian": [151, 207, 208, 216], "optic": [151, 152], "medium": 153, "wave": 156, "pauli": 157, "quantum": [158, 169, 183], "oscil": [158, 183], "d": [158, 183], "anticommut": 159, "cartesian": 160, "state": [160, 169, 172, 180], "clebsch": 161, "gordan": 161, "coeffici": [161, 210], "circuit": 162, "commut": [163, 204], "dagger": 165, "gate": 166, "grover": 167, "hilbert": 168, "space": [168, 187, 227], "inner": 170, "helper": [172, 217], "box": 173, "qappli": 174, "qft": 175, "qubit": 176, "shor": 178, "spin": 179, "second": 182, "quantiz": 182, "more": [185, 186, 224, 267, 288], "dimension": 185, "analysi": 185, "quantiti": [185, 187, 189, 267], "unit": [186, 187, 188, 190], "philosophi": 187, "behind": 187, "need": 187, "literatur": [187, 211, 216], "prefix": 188, "convers": 189, "referencefram": [191, 201], "dynamicsymbol": 191, "essenti": [192, 194, 262, 265], "field": [193, 198, 207, 210, 212, 216, 269, 271], "kinemat": [196, 200], "kinematic_equ": 196, "scalar": [198, 269, 271], "curl": [198, 269], "diverg": [198, 269, 272], "gradient": [198, 269], "conserv": [198, 269], "solenoid": [198, 269], "veloc": 200, "basi": [201, 210, 212], "wigner": 202, "credit": 202, "copyright": 202, "plotgrid": 203, "pyglet": 203, "mode": 203, "color": 203, "geometr": 203, "ascii": [203, 293], "art": 203, "agca": 204, "ring": [204, 207, 208], "ideal": 204, "homomorph": [204, 212], "syzygi": 204, "extens": [204, 216], "concept": 205, "divis": 205, "factori": 205, "euclidean": 205, "gcd": [205, 210, 216], "lcm": 205, "groebner": [205, 210], "introduc": [206, 207], "domainmatrix": 206, "dup": 207, "dmp": 207, "polyr": 207, "polynomialr": 207, "choos": 207, "unifi": 207, "gf": 208, "p": [208, 212], "zz": 208, "qq": 208, "mpq": 208, "zz_i": 208, "qq_i": 208, "rr": 208, "cc": 208, "k": 208, "x": 208, "ex": 208, "quotient": 208, "level": 210, "multivari": [210, 216], "univari": [210, 216], "remaind": 210, "subresult": 210, "modular": 210, "undocu": 210, "main": 212, "prime": 212, "decomposit": [212, 213, 216], "adic": 212, "valuat": 212, "subfield": 212, "As": 212, "arithmet": 212, "extra": 213, "monomi": 213, "encod": 213, "formal": [213, 219], "appel": 213, "partial": [213, 216, 235, 236], "fraction": [213, 216, 294], "dispers": 213, "rs_seri": 214, "wester": 216, "articl": 216, "simpl": 216, "support": 216, "back": 216, "cyclotom": 216, "gr\u00f6bner": 216, "mistak": 217, "prettyprint": 217, "rcodeprint": 217, "smt": 217, "lib": 217, "mapl": 217, "javascript": 217, "julia": 217, "octav": 217, "matlab": 217, "rust": 217, "gtk": 217, "lambdaprint": 217, "latexprint": 217, "mathmlprint": 217, "pythoncodeprint": 217, "pythonprint": 217, "srepr": [217, 293], "strprinter": 217, "preview": 217, "codeprint": 217, "preced": 217, "dotprint": 217, "subexpress": 218, "detect": 218, "compound": [223, 225, 237], "recurs": [223, 289], "gruntz": 224, "intuit": 224, "residu": 224, "setkind": 225, "hongguang": 226, "fu": 226, "rule": [226, 268], "notat": 227, "increment": 227, "decrement": 227, "indic": 227, "around": 227, "loos": 227, "end": 227, "confluenc": 227, "extend": 227, "heurist": 233, "riccati": 233, "inform": [233, 234], "pde": [234, 235, 236], "deutil": 235, "recurr": 235, "de": [235, 236], "wrong": 236, "why": [236, 288], "we": 236, "emploi": 236, "search": 236, "deal": 236, "where": 236, "known": 236, "plan": 236, "transolv": 236, "continu": [237, 294], "stochast": 237, "dim": [238, 239], "contract": 238, "diagon": [238, 290], "explicit": 239, "pytest": 246, "randomis": 247, "detail": [249, 250, 266], "routin": 250, "decor": 251, "enum": 252, "variat": 255, "memoiz": 257, "pkgdata": 259, "inspect": 260, "time": 261, "orient": [264, 267], "locat": 267, "coordsys3d": 267, "orient_new": 267, "AND": 267, "quadrilater": 268, "third": 268, "del": [268, 269], "curvilinear": 269, "applic": 272, "calcul": 272, "perimet": 272, "surfac": 272, "area": 272, "volum": 272, "flux": 272, "stoke": 272, "introductori": [282, 287], "quick": [283, 284, 286, 289, 290], "two": 286, "final": 286, "understand": 289, "through": 289, "invari": 289, "walk": 289, "prevent": 289, "shape": 290, "access": 290, "row": 290, "column": 290, "insert": 290, "determin": 290, "rref": 290, "nullspac": 290, "columnspac": 290, "eigenvalu": 290, "eigenvector": 290, "next": 291, "preliminari": 292, "exercis": 292, "str": 293, "mathml": 293, "dot": 293, "cancel": 294, "apart": 294, "trigsimp": 294, "expand_trig": 294, "powsimp": 294, "expand_power_exp": 294, "expand_power_bas": 294, "powdenest": 294, "expand_log": 294, "logcombin": 294, "expand_func": 294, "hyperexpand": 294, "combsimp": 294, "gammasimp": 294}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Citing SymPy": [[0, "citing-sympy"]], "Debugging": [[1, "debugging"]], "Dependencies": [[2, "dependencies"]], "Hard Dependencies": [[2, "hard-dependencies"]], "Optional Dependencies": [[2, "optional-dependencies"]], "Recommended Optional Dependencies": [[2, "recommended-optional-dependencies"]], "Interactive Use": [[2, "interactive-use"]], "Printing": [[2, "printing"], [23, "printing"], [95, "module-sympy.interactive.printing"], [122, "printing"], [191, "printing"], [217, "printing"], [293, "printing"]], "Parsing": [[2, "parsing"], [109, "module-sympy.parsing"]], "Logic": [[2, "logic"], [97, "module-sympy.logic"], [273, "logic"], [276, "logic"]], "Plotting": [[2, "plotting"], [203, "module-sympy.plotting.plot"]], "lambdify": [[2, "lambdify"], [283, "lambdify"]], "Code Generation": [[2, "code-generation"], [48, "code-generation"], [273, "code-generation"], [275, "code-generation"]], "Autowrap": [[2, "autowrap"], [48, "autowrap"]], "Code Printers": [[2, "code-printers"]], "Testing-Only Dependencies": [[2, "testing-only-dependencies"]], "Statistics": [[2, "statistics"]], "Optional SymEngine Backend": [[2, "optional-symengine-backend"]], "Sage": [[2, "sage"]], "Development Dependencies": [[2, "development-dependencies"]], "Getting the Source Code": [[2, "getting-the-source-code"]], "Running the Tests": [[2, "running-the-tests"]], "Building the Documentation": [[2, "building-the-documentation"], [8, "building-the-documentation"]], "Running the Benchmarks": [[2, "running-the-benchmarks"]], "Deprecation Policy": [[3, "deprecation-policy"]], "What is a deprecation?": [[3, "what-is-a-deprecation"]], "Try to avoid backwards incompatible changes in the first place": [[3, "try-to-avoid-backwards-incompatible-changes-in-the-first-place"]], "When does a change require deprecation?": [[3, "when-does-a-change-require-deprecation"]], "Public API": [[3, null]], "Not Public API": [[3, null]], "The purpose of deprecation": [[3, "the-purpose-of-deprecation"]], "When it is not technically possible to deprecate": [[3, "when-it-is-not-technically-possible-to-deprecate"]], "How long should deprecations last?": [[3, "how-long-should-deprecations-last"]], "How to deprecate code": [[3, "how-to-deprecate-code"]], "Checklist": [[3, "checklist"]], "Adding the deprecation to the code": [[3, "adding-the-deprecation-to-the-code"]], "Documenting a deprecation": [[3, "documenting-a-deprecation"]], "Release notes entry": [[3, "release-notes-entry"]], "SymPy Docstrings Style Guide": [[4, "sympy-docstrings-style-guide"]], "General Guidelines": [[4, "general-guidelines"], [5, "general-guidelines"]], "Formatting": [[4, "formatting"]], "Sections": [[4, "sections"]], "1. Single-Sentence Summary": [[4, "single-sentence-summary"]], "2. Explanation Section": [[4, "explanation-section"]], "3. Examples Section": [[4, "examples-section"]], "4. Parameters Section": [[4, "parameters-section"]], "5. See Also Section": [[4, "see-also-section"]], "6. References Section": [[4, "references-section"]], "Sample Docstring": [[4, "sample-docstring"]], "Docstrings for Classes that are Mathematical Functions": [[4, "docstrings-for-classes-that-are-mathematical-functions"]], "Best Practices for Writing Docstrings": [[4, "best-practices-for-writing-docstrings"]], "Importing Docstrings into the Sphinx Documentation": [[4, "importing-docstrings-into-the-sphinx-documentation"]], "Cross-Referencing": [[4, "cross-referencing"]], "Docstring Style Guide": [[5, "docstring-style-guide"]], "Types of Documentation": [[5, "types-of-documentation"]], "Narrative Documentation Guidelines": [[5, "narrative-documentation-guidelines"]], "Documentation using Markdown": [[5, "documentation-using-markdown"]], "Best Practices for Writing Documentation": [[5, "best-practices-for-writing-documentation"]], "Formatting Preferences": [[5, "formatting-preferences"]], "Math": [[5, "math"]], "LaTeX Recommendations": [[5, "latex-recommendations"]], "Code": [[5, "code"]], "Headings": [[5, "headings"]], "Style Preferences": [[5, "style-preferences"]], "Spelling and Punctuation": [[5, "spelling-and-punctuation"]], "Capitalization": [[5, "capitalization"]], "Tone Preferences": [[5, "tone-preferences"]], "Contributing": [[6, "contributing"], [37, "contributing"]], "Introduction to Contributing": [[7, "introduction-to-contributing"]], "Get familiar using the software": [[7, "get-familiar-using-the-software"]], "Read the paper": [[7, "read-the-paper"]], "Peruse the documentation": [[7, "peruse-the-documentation"]], "Review the Code of Conduct": [[7, "review-the-code-of-conduct"]], "Join our mailing list": [[7, "join-our-mailing-list"]], "Setup your development environment": [[7, "setup-your-development-environment"]], "Identify something to work on": [[7, "identify-something-to-work-on"]], "SymPy Codebase": [[7, "sympy-codebase"]], "Documentation": [[7, "documentation"], [11, "documentation"]], "Review pull requests": [[7, "review-pull-requests"]], "Required dependencies": [[8, "required-dependencies"]], "Docker": [[8, "docker"], [8, "id2"], [8, "id3"]], "Debian/Ubuntu": [[8, "debian-ubuntu"]], "Fedora": [[8, "fedora"]], "Mac": [[8, "mac"]], "Windows 10": [[8, "windows-10"]], "Build the Docs": [[8, "build-the-docs"]], "Local Installation": [[8, "local-installation"], [8, "id4"]], "SymPy Logos": [[8, "sympy-logos"]], "View the Docs": [[8, "view-the-docs"]], "Auto-Rebuild with the Live Server": [[8, "auto-rebuild-with-the-live-server"]], "PDF Documentation": [[8, "pdf-documentation"]], "Setup Development Environment": [[9, "setup-development-environment"]], "Install Git": [[9, "install-git"]], "Configure Your Name and Email in Git": [[9, "configure-your-name-and-email-in-git"]], "(Optional) Configure Git Settings": [[9, "optional-configure-git-settings"]], "Setup GitHub": [[9, "setup-github"]], "Create a GitHub Account": [[9, "create-a-github-account"]], "Setup SSH Keys": [[9, "setup-ssh-keys"]], "Fork SymPy": [[9, "fork-sympy"]], "Get the SymPy Code": [[9, "get-the-sympy-code"]], "Virtual Environment Setup": [[9, "virtual-environment-setup"]], "Guide for New Contributors": [[10, "guide-for-new-contributors"]], "Index": [[10, "index"]], "Development Workflow Process": [[11, "development-workflow-process"]], "Checklist for Contributions": [[11, "checklist-for-contributions"]], "Pick an issue to fix": [[11, "pick-an-issue-to-fix"]], "Create a new branch": [[11, "create-a-new-branch"]], "Branch names": [[11, "branch-names"]], "Modify code": [[11, "modify-code"]], "Code Quality": [[11, "code-quality"]], "Add Tests": [[11, "add-tests"]], "Run the Tests": [[11, "run-the-tests"]], "Commit the changes": [[11, "commit-the-changes"]], "Deleting junk files": [[11, "deleting-junk-files"]], "Writing commit messages": [[11, "writing-commit-messages"]], "Example of a good commit message": [[11, "example-of-a-good-commit-message"]], "Co-Author": [[11, "co-author"]], "Make a Pull Request": [[11, "make-a-pull-request"]], "Writing pull request title and description": [[11, "writing-pull-request-title-and-description"]], "Add your name and email address to the .mailmap file.": [[11, "add-your-name-and-email-address-to-the-mailmap-file"]], "Writing Tests": [[12, "writing-tests"]], "Testing Policies": [[12, "testing-policies"]], "Basics for Writing Tests": [[12, "basics-for-writing-tests"]], "Running Tests": [[12, "running-tests"]], "Debugging Test Failures on GitHub Actions": [[12, "debugging-test-failures-on-github-actions"]], "Regression Tests": [[12, "regression-tests"]], "Special Types of Tests": [[12, "special-types-of-tests"]], "Testing Exceptions": [[12, "testing-exceptions"]], "Testing Warnings": [[12, "testing-warnings"]], "Test Deprecated Functionality": [[12, "test-deprecated-functionality"]], "Testing that Something is Unchanged": [[12, "testing-that-something-is-unchanged"]], "Testing Expressions with Dummy": [[12, "testing-expressions-with-dummy"]], "Consistency Checks": [[12, "consistency-checks"]], "Random Tests": [[12, "random-tests"]], "Skipping Tests": [[12, "skipping-tests"]], "Marking Tests as Expected to Fail": [[12, "marking-tests-as-expected-to-fail"]], "Marking Tests as Slow": [[12, "marking-tests-as-slow"]], "Writing Tests with External Dependencies": [[12, "writing-tests-with-external-dependencies"]], "Doctests": [[12, "doctests"]], "Updating Existing Tests": [[12, "updating-existing-tests"]], "Code Quality Checks": [[12, "code-quality-checks"]], "Tests Style Guide": [[12, "tests-style-guide"]], "Test Coverage": [[12, "test-coverage"]], "List of active deprecations": [[13, "list-of-active-deprecations"]], "Silencing SymPy Deprecation Warnings": [[13, "silencing-sympy-deprecation-warnings"]], "Version 1.13": [[13, "version-1-13"]], "Deprecate markers, annotations, fill, rectangles of the Plot class": [[13, "deprecate-markers-annotations-fill-rectangles-of-the-plot-class"]], "Moved mechanics functions": [[13, "moved-mechanics-functions"]], "Version 1.12": [[13, "version-1-12"]], "The ManagedProperties metaclass": [[13, "the-managedproperties-metaclass"]], "New Joint coordinate format": [[13, "new-joint-coordinate-format"]], "New Joint intermediate frames": [[13, "new-joint-intermediate-frames"]], "Change in joint attachment point argument": [[13, "change-in-joint-attachment-point-argument"]], "Version 1.11": [[13, "version-1-11"]], "Modules sympy.tensor.array.expressions.conv_* renamed to sympy.tensor.array.expressions.from_*": [[13, "modules-sympy-tensor-array-expressions-conv-renamed-to-sympy-tensor-array-expressions-from"]], "New Mathematica code parser": [[13, "new-mathematica-code-parser"]], "Redundant static methods in carmichael": [[13, "redundant-static-methods-in-carmichael"]], "The check argument to HadamardProduct, MatAdd and MatMul": [[13, "the-check-argument-to-hadamardproduct-matadd-and-matmul"]], "Version 1.10": [[13, "version-1-10"]], "Some traversal functions have been moved": [[13, "some-traversal-functions-have-been-moved"]], "sympy.core.trace": [[13, "sympy-core-trace"]], "The sympy.core.compatibility submodule": [[13, "the-sympy-core-compatibility-submodule"]], "Version 1.9": [[13, "version-1-9"]], "expr_free_symbols": [[13, "expr-free-symbols"]], "sympy.stats.sample(numsamples=n)": [[13, "sympy-stats-sample-numsamples-n"]], "sympy.polys.solvers.RawMatrix": [[13, "sympy-polys-solvers-rawmatrix"]], "Non-Expr objects in a Matrix": [[13, "non-expr-objects-in-a-matrix"]], "The get_segments attribute of plotting objects": [[13, "the-get-segments-attribute-of-plotting-objects"]], "The mdft function in sympy.physics.matrices": [[13, "the-mdft-function-in-sympy-physics-matrices"]], "The private SparseMatrix._smat and DenseMatrix._mat attributes": [[13, "the-private-sparsematrix-smat-and-densematrix-mat-attributes"]], "laplace_transform of a Matrix with noconds=False": [[13, "laplace-transform-of-a-matrix-with-noconds-false"]], "Version 1.8": [[13, "version-1-8"]], "sympy.printing.theanocode": [[13, "sympy-printing-theanocode"]], "sympy.assumptions.handlers.AskHandler and related methods": [[13, "sympy-assumptions-handlers-askhandler-and-related-methods"]], "Version 1.7.1": [[13, "version-1-7-1"]], "Calling sympy.stats.StochasticProcess.distribution with RandomIndexedSymbol": [[13, "calling-sympy-stats-stochasticprocess-distribution-with-randomindexedsymbol"]], "Version 1.7": [[13, "version-1-7"]], "sympy.stats.DiscreteMarkovChain.absorbing_probabilites()": [[13, "sympy-stats-discretemarkovchain-absorbing-probabilites"]], "sympy.utilities.misc.find_executable()": [[13, "sympy-utilities-misc-find-executable"]], "Mutable attributes in sympy.diffgeom": [[13, "mutable-attributes-in-sympy-diffgeom"]], "The unicode argument and attribute to sympy.printing.pretty.stringpict.prettyForm and the sympy.printing.pretty.pretty_symbology.xstr function": [[13, "the-unicode-argument-and-attribute-to-sympy-printing-pretty-stringpict-prettyform-and-the-sympy-printing-pretty-pretty-symbology-xstr-function"]], "Passing the arguments to lambdify as a set": [[13, "passing-the-arguments-to-lambdify-as-a-set"]], "Core operators no longer accept non-Expr args": [[13, "core-operators-no-longer-accept-non-expr-args"]], "Version 1.6": [[13, "version-1-6"]], "Various sympy.utilities submodules have moved": [[13, "various-sympy-utilities-submodules-have-moved"]], "sympy.testing.randtest": [[13, "sympy-testing-randtest"]], "Mixing Poly and non-polynomial expressions in binary operations": [[13, "mixing-poly-and-non-polynomial-expressions-in-binary-operations"]], "The print_cyclic flag of sympy.combinatorics.Permutation": [[13, "the-print-cyclic-flag-of-sympy-combinatorics-permutation"]], "Using integrate with Poly": [[13, "using-integrate-with-poly"]], "The string fallback in sympify()": [[13, "the-string-fallback-in-sympify"]], "Creating an indefinite Integral with an Eq argument": [[13, "creating-an-indefinite-integral-with-an-eq-argument"]], "Version 1.5": [[13, "version-1-5"]], "Tensor.fun_eval and Tensor.__call__": [[13, "tensor-fun-eval-and-tensor-call"]], "TensorType": [[13, "tensortype"]], "The dummy_fmt argument to TensorIndexType": [[13, "the-dummy-fmt-argument-to-tensorindextype"]], "The metric argument to TensorIndexType": [[13, "the-metric-argument-to-tensorindextype"]], "The get_kronecker_delta() and get_epsilon() methods of TensorIndexType": [[13, "the-get-kronecker-delta-and-get-epsilon-methods-of-tensorindextype"]], "The tensorsymmetry() function": [[13, "the-tensorsymmetry-function"]], "The tensorhead() function": [[13, "the-tensorhead-function"]], "The is_EmptySet attribute of sets": [[13, "the-is-emptyset-attribute-of-sets"]], "ProductSet(iterable)": [[13, "productset-iterable"]], "The set_potential_energy method in sympy.physics.mechanics": [[13, "the-set-potential-energy-method-in-sympy-physics-mechanics"]], "Using a set for the condition in ConditionSet": [[13, "using-a-set-for-the-condition-in-conditionset"]], "The max_degree and get_upper_degree properties of sympy.polys.multivariate_resultants.DixonResultant": [[13, "the-max-degree-and-get-upper-degree-properties-of-sympy-polys-multivariate-resultants-dixonresultant"]], "Non-tuple iterable for the first argument to Lambda": [[13, "non-tuple-iterable-for-the-first-argument-to-lambda"]], "The evaluate flag to differentiate_finite": [[13, "the-evaluate-flag-to-differentiate-finite"]], "Version 1.4": [[13, "version-1-4"]], "TensorIndexType.data and related methods": [[13, "tensorindextype-data-and-related-methods"]], "Glossary": [[14, "glossary"]], "Gotchas and Pitfalls": [[15, "gotchas-and-pitfalls"]], "Introduction": [[15, "introduction"], [19, "introduction"], [40, "introduction"], [47, "introduction"], [48, "introduction"], [49, "introduction"], [57, "introduction"], [69, "introduction"], [79, "introduction"], [97, "introduction"], [132, "introduction"], [149, "introduction"], [187, "introduction"], [198, "introduction"], [203, "introduction"], [204, "introduction"], [205, "introduction"], [212, "introduction"], [216, "introduction"], [271, "introduction"], [288, "introduction"]], "Equals Signs (=)": [[15, "equals-signs"]], "Single Equals Sign": [[15, "single-equals-sign"]], "Double Equals Signs": [[15, "double-equals-signs"]], "Variables": [[15, "variables"]], "Variables Assignment does not Create a Relation Between Expressions": [[15, "variables-assignment-does-not-create-a-relation-between-expressions"]], "Symbols": [[15, "symbols"], [286, "symbols"]], "Functions": [[15, "functions"], [74, "functions"], [238, "functions"]], "Symbolic Expressions": [[15, "symbolic-expressions"]], "Python numbers vs. SymPy Numbers": [[15, "python-numbers-vs-sympy-numbers"]], "Evaluating Expressions with Floats and Rationals": [[15, "evaluating-expressions-with-floats-and-rationals"]], "Immutability of Expressions": [[15, "immutability-of-expressions"]], "Mathematical Operators": [[15, "mathematical-operators"]], "Inverse Trig Functions": [[15, "inverse-trig-functions"]], "Sqrt is not a Function": [[15, "sqrt-is-not-a-function"]], "Special Symbols": [[15, "special-symbols"]], "Lists": [[15, "lists"]], "Dictionaries": [[15, "dictionaries"]], "Tuples": [[15, "tuples"]], "Keyword Arguments": [[15, "keyword-arguments"]], "Getting help from within SymPy": [[15, "getting-help-from-within-sympy"]], "help()": [[15, "help"]], "Explanations": [[16, "explanations"], [37, "explanations"]], "Solve Output by Type": [[17, "solve-output-by-type"]], "Empty List": [[17, "empty-list"]], "List Of Values": [[17, "list-of-values"]], "Single Dictionary": [[17, "single-dictionary"]], "List of Tuples": [[17, "list-of-tuples"]], "List of Dictionaries": [[17, "list-of-dictionaries"]], "Boolean or Relational": [[17, "boolean-or-relational"]], "Classification of SymPy objects": [[18, "classification-of-sympy-objects"]], "class": [[18, "class"]], "kind": [[18, "kind"], [67, "module-sympy.core.kind"]], "sets and assumptions": [[18, "sets-and-assumptions"]], "func": [[18, "func"], [289, "func"]], "Finite Difference Approximations to Derivatives": [[19, "finite-difference-approximations-to-derivatives"]], "A Direct Method Using SymPy Matrices": [[19, "a-direct-method-using-sympy-matrices"]], "SymPy Special Topics": [[20, "sympy-special-topics"]], "Assumptions": [[21, "assumptions"], [23, "assumptions"], [43, "module-sympy.assumptions"]], "The (old) assumptions system": [[21, "the-old-assumptions-system"]], "Gotcha: symbols with different assumptions": [[21, "gotcha-symbols-with-different-assumptions"]], "Applying assumptions to string inputs": [[21, "applying-assumptions-to-string-inputs"]], "Predicates": [[21, "predicates"], [44, "id1"]], "Assumptions predicates for the (old) assumptions": [[21, "id28"]], "References for the above definitions": [[21, "references-for-the-above-definitions"]], "Implications": [[21, "implications"]], "Interpretation of the predicates": [[21, "interpretation-of-the-predicates"]], "Other is_* properties": [[21, "other-is-properties"]], "Implementing assumptions handlers": [[21, "implementing-assumptions-handlers"]], "Mechanism of the assumptions system": [[21, "mechanism-of-the-assumptions-system"]], "Limitations": [[21, "limitations"], [30, "limitations"], [91, "limitations"]], "Combining predicates with or": [[21, "combining-predicates-with-or"]], "Relations between different symbols": [[21, "relations-between-different-symbols"]], "Symbolic and fuzzy booleans": [[22, "symbolic-and-fuzzy-booleans"]], "Symbolic Boolean vs three valued bool": [[22, "symbolic-boolean-vs-three-valued-bool"]], "Three-valued logic with fuzzy bools": [[22, "three-valued-logic-with-fuzzy-bools"]], "Three-valued logic with symbolic Booleans": [[22, "three-valued-logic-with-symbolic-booleans"]], "Writing Custom Functions": [[23, "writing-custom-functions"]], "Easy Cases: Fully Symbolic or Fully Evaluated": [[23, "easy-cases-fully-symbolic-or-fully-evaluated"]], "The Fully Symbolic Case": [[23, "the-fully-symbolic-case"]], "The Fully Evaluated Case": [[23, "the-fully-evaluated-case"]], "Creating a Custom Function": [[23, "creating-a-custom-function"]], "Defining Automatic Evaluation with eval()": [[23, "defining-automatic-evaluation-with-eval"]], "Reminder": [[23, null]], "Best Practices for eval()": [[23, "best-practices-for-eval"]], "Key Point": [[23, null]], "Note": [[23, null]], "Numerical Evaluation with evalf()": [[23, "numerical-evaluation-with-evalf"]], "Rewriting and Simplification": [[23, "rewriting-and-simplification"]], "rewrite()": [[23, "rewrite"]], "doit()": [[23, "doit"]], "expand()": [[23, "expand"]], "Differentiation": [[23, "differentiation"]], "Other Methods": [[23, "other-methods"], [38, "other-methods"]], "inverse()": [[23, "inverse"]], "as_real_imag()": [[23, "as-real-imag"]], "Miscellaneous _eval_* methods": [[23, "miscellaneous-eval-methods"]], "Complete Examples": [[23, "complete-examples"]], "Versine": [[23, "versine"]], "Definition": [[23, "definition"], [23, "id2"], [23, "id4"], [85, "definition"]], "Examples": [[23, "examples"], [23, "id3"], [23, "id5"], [29, "examples"], [39, "examples"], [67, "examples"], [67, "id48"], [91, "examples"], [94, "examples"], [94, "id38"], [107, "examples"], [107, "id65"], [111, "examples"], [119, "examples"], [154, "examples"], [186, "examples"], [201, "examples"], [201, "id1"], [216, "examples"], [224, "examples"], [224, "id3"], [237, "examples"], [238, "examples"], [239, "examples"], [242, "examples"]], "divides": [[23, "divides"]], "Fused Multiply-Add (FMA)": [[23, "fused-multiply-add-fma"]], "Additional Tips": [[23, "additional-tips"]], "How-to Guides": [[24, "how-to-guides"], [37, "how-to-guides"]], "Control Package Examples": [[25, "control-package-examples"]], "Example 1": [[25, "example-1"], [111, "example-1"]], "Example 2": [[25, "example-2"], [111, "example-2"]], "Example 3": [[25, "example-3"], [111, "example-3"]], "Example 4": [[25, "example-4"], [111, "example-4"]], "Example 5": [[25, "example-5"], [111, "example-5"]], "References": [[25, "references"], [50, "references"], [67, "references"], [79, "references"], [85, "references"], [94, "references"], [154, "references"], [157, "references"], [202, "references"], [226, "references"], [227, "references"], [230, "references"], [236, "references"]], "Physics": [[26, "physics"], [273, "physics"], [279, "module-sympy.physics"]], "Find the Roots of a Polynomial Algebraically or Numerically": [[27, "find-the-roots-of-a-polynomial-algebraically-or-numerically"]], "Alternatives to Consider": [[27, "alternatives-to-consider"], [29, "alternatives-to-consider"], [30, "alternatives-to-consider"], [32, "alternatives-to-consider"], [33, "alternatives-to-consider"], [34, "alternatives-to-consider"], [35, "alternatives-to-consider"]], "Example of Finding the Roots of a Polynomial Algebraically": [[27, "example-of-finding-the-roots-of-a-polynomial-algebraically"]], "Functions to Find the Roots of a Polynomial": [[27, "functions-to-find-the-roots-of-a-polynomial"]], "Guidance": [[27, "guidance"], [29, "guidance"], [30, "guidance"], [31, "guidance"], [32, "guidance"], [33, "guidance"], [34, "guidance"], [35, "guidance"]], "Find the Roots of a Polynomial": [[27, "find-the-roots-of-a-polynomial"]], "Algebraic Solution Without Root Multiplicities": [[27, "algebraic-solution-without-root-multiplicities"]], "Algebraic Solution With Root Multiplicities": [[27, "algebraic-solution-with-root-multiplicities"]], "roots": [[27, "roots"]], "Factor the Equation": [[27, "factor-the-equation"]], "Exact Numeric Solution With Root Multiplicities": [[27, "exact-numeric-solution-with-root-multiplicities"]], "real_roots": [[27, "real-roots"]], "Approximate Numeric Solution With Root Multiplicities": [[27, "approximate-numeric-solution-with-root-multiplicities"]], "nroots": [[27, "nroots"]], "Complex Roots": [[27, "complex-roots"]], "Use the Solution Result": [[27, "use-the-solution-result"], [30, "use-the-solution-result"], [31, "use-the-solution-result"], [32, "use-the-solution-result"], [33, "use-the-solution-result"], [34, "use-the-solution-result"]], "List (all_roots, real_roots, nroots)": [[27, "list-all-roots-real-roots-nroots"]], "List of dictionaries (solve)": [[27, "list-of-dictionaries-solve"]], "Dictionary (roots)": [[27, "dictionary-roots"]], "Expression (factor)": [[27, "expression-factor"]], "Tradeoffs": [[27, "tradeoffs"]], "Mathematical Exactness, Completeness of List of Roots, and Speed": [[27, "mathematical-exactness-completeness-of-list-of-roots-and-speed"]], "Get All Roots, Perhaps Implicitly": [[27, "get-all-roots-perhaps-implicitly"]], "Numerically Evaluate CRootOf Roots": [[27, "numerically-evaluate-crootof-roots"]], "Representing Roots": [[27, "representing-roots"]], "Not All Equations Can Be Solved": [[27, "not-all-equations-can-be-solved"], [30, "not-all-equations-can-be-solved"], [31, "not-all-equations-can-be-solved"], [34, "not-all-equations-can-be-solved"]], "Equations With No Closed-Form Solution": [[27, "equations-with-no-closed-form-solution"], [31, "equations-with-no-closed-form-solution"], [34, "equations-with-no-closed-form-solution"]], "Report a Bug": [[27, "report-a-bug"], [29, "report-a-bug"], [30, "report-a-bug"], [31, "report-a-bug"], [32, "report-a-bug"], [33, "report-a-bug"], [34, "report-a-bug"], [35, "report-a-bug"], [36, "report-a-bug"]], "Solve Equations": [[28, "solve-equations"]], "Reduce One or a System of Inequalities for a Single Variable Algebraically": [[29, "reduce-one-or-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Reducing a System of Inequalities for a Single Variable Algebraically": [[29, "reducing-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Reducing One Inequality for a Single Variable Algebraically": [[29, "reducing-one-inequality-for-a-single-variable-algebraically"]], "Include the Variable to Be Reduced for in the Function Call": [[29, "include-the-variable-to-be-reduced-for-in-the-function-call"]], "Reduce a System of Inequalities Algebraically": [[29, "reduce-a-system-of-inequalities-algebraically"]], "Use the Result": [[29, "use-the-result"]], "Extract a List of Decomposed Relations": [[29, "extract-a-list-of-decomposed-relations"]], "Extract a Tuple of Relations": [[29, "extract-a-tuple-of-relations"]], "Limitations of Inequality Reduction Using SymPy": [[29, "limitations-of-inequality-reduction-using-sympy"]], "SymPy Can Reduce for Only One Symbol of Interest Per Inequality": [[29, "sympy-can-reduce-for-only-one-symbol-of-interest-per-inequality"]], "Limitations on Types of Inequalities That SymPy Can Solve": [[29, "limitations-on-types-of-inequalities-that-sympy-can-solve"]], "Not All Results Are Returned for Periodic Functions": [[29, "not-all-results-are-returned-for-periodic-functions"]], "Not All Systems of Inequalities Can Be Reduced": [[29, "not-all-systems-of-inequalities-can-be-reduced"]], "Systems of Inequalities Which Cannot Be Satisfied": [[29, "systems-of-inequalities-which-cannot-be-satisfied"]], "Systems of Inequalities That Cannot Be Reduced Analytically": [[29, "systems-of-inequalities-that-cannot-be-reduced-analytically"]], "Inequalities Which Can Be Reduced Analytically, and SymPy Cannot Reduce": [[29, "inequalities-which-can-be-reduced-analytically-and-sympy-cannot-reduce"]], "Solve a Diophantine Equation Algebraically": [[30, "solve-a-diophantine-equation-algebraically"]], "Example of Solving a Diophantine Equation": [[30, "example-of-solving-a-diophantine-equation"]], "Diophantine Equation Can be Expressed as Expression That Equals Zero": [[30, "diophantine-equation-can-be-expressed-as-expression-that-equals-zero"]], "Specify the Order of Symbols in the Result": [[30, "specify-the-order-of-symbols-in-the-result"]], "Extract Expressions From the Result": [[30, "extract-expressions-from-the-result"]], "Work With Parameters": [[30, "work-with-parameters"]], "Verify a Solution": [[30, "verify-a-solution"]], "Programmatically Extract Parameter Symbols": [[30, "programmatically-extract-parameter-symbols"]], "Equations With No Solution": [[30, "equations-with-no-solution"], [32, "equations-with-no-solution"], [34, "equations-with-no-solution"]], "Solve an Equation Algebraically": [[31, "solve-an-equation-algebraically"], [31, "id1"]], "Alternatives to consider": [[31, "alternatives-to-consider"]], "Solving Functions": [[31, "solving-functions"]], "Make Your Equation Into an Expression That Equals Zero": [[31, "make-your-equation-into-an-expression-that-equals-zero"]], "Put Your Equation Into Eq Form": [[31, "put-your-equation-into-eq-form"]], "Restrict the Domain of Solutions": [[31, "restrict-the-domain-of-solutions"]], "Explicitly Represent Infinite Sets of Possible Solutions": [[31, "explicitly-represent-infinite-sets-of-possible-solutions"]], "Substitute Solutions From solve() Into an Expression": [[31, "substitute-solutions-from-solve-into-an-expression"]], "solveset() Solution Sets Cannot Necessarily Be Interrogated Programmatically": [[31, "solveset-solution-sets-cannot-necessarily-be-interrogated-programmatically"]], "Options That Can Speed up solve()": [[31, "options-that-can-speed-up-solve"], [35, "options-that-can-speed-up-solve"], [36, "options-that-can-speed-up-solve"]], "Equations Which Have a Closed-Form Solution, and SymPy Cannot Solve": [[31, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"], [35, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"]], "Solve a Matrix Equation Algebraically": [[32, "solve-a-matrix-equation-algebraically"]], "Solve a Matrix Equation": [[32, "solve-a-matrix-equation"]], "Matrix Usually Must Be Square": [[32, "matrix-usually-must-be-square"]], "Methods for Solving Matrix Equations": [[32, "methods-for-solving-matrix-equations"]], "Solving Several Matrix Equations With the Same Matrix": [[32, "solving-several-matrix-equations-with-the-same-matrix"]], "Work With Symbolic Matrices": [[32, "work-with-symbolic-matrices"]], "Speed up Solving Matrix Equations": [[32, "speed-up-solving-matrix-equations"]], "Use the Solution as a Vector": [[32, "use-the-solution-as-a-vector"]], "Extract Elements From the Solution": [[32, "extract-elements-from-the-solution"]], "Solve One or a System of Equations Numerically": [[33, "solve-one-or-a-system-of-equations-numerically"]], "Example of Numerically Solving an Equation": [[33, "example-of-numerically-solving-an-equation"]], "Find Complex Roots of a Real Function": [[33, "find-complex-roots-of-a-real-function"]], "Ensure the Root Found is in a Given Interval": [[33, "ensure-the-root-found-is-in-a-given-interval"]], "Solve a System of Equations Numerically": [[33, "solve-a-system-of-equations-numerically"]], "Increase Precision of the Solution": [[33, "increase-precision-of-the-solution"]], "Create a Function That Can Be Solved With SciPy": [[33, "create-a-function-that-can-be-solved-with-scipy"]], "Substitute the Result Into an Expression": [[33, "substitute-the-result-into-an-expression"]], "Not all Equations Can be Solved": [[33, "not-all-equations-can-be-solved"]], "Equations With no Solution": [[33, "equations-with-no-solution"]], "Solve an Ordinary Differential Equation (ODE) Algebraically": [[34, "solve-an-ordinary-differential-equation-ode-algebraically"]], "Solve an Ordinary Differential Equation (ODE)": [[34, "solve-an-ordinary-differential-equation-ode"]], "Defining Derivatives": [[34, "defining-derivatives"]], "Options to Define an ODE": [[34, "options-to-define-an-ode"]], "Option 1: Define a Function Without Including Its Independent Variable": [[34, "option-1-define-a-function-without-including-its-independent-variable"]], "Specify Initial Conditions or Boundary Conditions": [[34, "specify-initial-conditions-or-boundary-conditions"], [34, "id1"]], "Option 2: Define a Function of an Independent Variable": [[34, "option-2-define-a-function-of-an-independent-variable"]], "Beware Copying and Pasting Results": [[34, "beware-copying-and-pasting-results"]], "Extract the Result for One Solution and Function": [[34, "extract-the-result-for-one-solution-and-function"]], "Some ODEs Cannot Be Solved Explicitly, Only Implicitly": [[34, "some-odes-cannot-be-solved-explicitly-only-implicitly"]], "Extract the Result for Multiple Function-Solution Pairs": [[34, "extract-the-result-for-multiple-function-solution-pairs"]], "If There is One Solution Set": [[34, "if-there-is-one-solution-set"]], "If There are Multiple Solution Sets": [[34, "if-there-are-multiple-solution-sets"]], "Work With Arbitrary Constants": [[34, "work-with-arbitrary-constants"]], "Numerically Solve an ODE in SciPy": [[34, "numerically-solve-an-ode-in-scipy"]], "Ordinary Differential Equation Solving Hints": [[34, "ordinary-differential-equation-solving-hints"]], "Return Unevaluated Integrals": [[34, "return-unevaluated-integrals"]], "Select a Specific Solver": [[34, "select-a-specific-solver"]], "Solve a System of Equations Algebraically": [[35, "solve-a-system-of-equations-algebraically"]], "Examples of Solving a System of Equations Algebraically": [[35, "examples-of-solving-a-system-of-equations-algebraically"]], "Solve a System of Linear Equations Algebraically": [[35, "solve-a-system-of-linear-equations-algebraically"]], "Solve a System of Nonlinear Equations Algebraically": [[35, "solve-a-system-of-nonlinear-equations-algebraically"]], "Solve and Use Results in a Dictionary": [[35, "solve-and-use-results-in-a-dictionary"]], "Solve Into a Solution Given as a Dictionary": [[35, "solve-into-a-solution-given-as-a-dictionary"]], "Use a Solution Given as a Dictionary": [[35, "use-a-solution-given-as-a-dictionary"]], "Solve Results in a Set": [[35, "solve-results-in-a-set"]], "Not All Systems of Equations Can be Solved": [[35, "not-all-systems-of-equations-can-be-solved"]], "Systems of Equations With no Solution": [[35, "systems-of-equations-with-no-solution"]], "Systems of Equations With no Closed-Form Solution": [[35, "systems-of-equations-with-no-closed-form-solution"]], "Solving Guidance": [[36, "solving-guidance"]], "Numeric Solutions": [[36, "numeric-solutions"]], "Equations With no Closed-Form Solution": [[36, "equations-with-no-closed-form-solution"]], "When You Might Prefer a Numeric Solution": [[36, "when-you-might-prefer-a-numeric-solution"]], "Use Exact Values": [[36, "use-exact-values"]], "Include the Variable to be Solved for in the Function Call": [[36, "include-the-variable-to-be-solved-for-in-the-function-call"]], "Ensure Consistent Formatting From solve()": [[36, "ensure-consistent-formatting-from-solve"]], "Include Solutions Making Any Denominator Zero": [[36, "include-solutions-making-any-denominator-zero"]], "Do Not Simplify Solutions": [[36, "do-not-simplify-solutions"]], "Parse a String Representing the Equation": [[36, "parse-a-string-representing-the-equation"]], "Welcome to SymPy\u2019s documentation!": [[37, "welcome-to-sympy-s-documentation"]], "Installation": [[37, "installation"], [38, "installation"], [292, "installation"]], "Tutorials": [[37, "tutorials"], [282, "tutorials"]], "API Reference": [[37, "api-reference"], [249, "module-sympy.utilities.autowrap"], [250, "module-sympy.utilities.codegen"], [273, "api-reference"]], "Anaconda": [[38, "anaconda"]], "Git": [[38, "git"]], "Run SymPy": [[38, "run-sympy"]], "mpmath": [[38, "mpmath"]], "Questions": [[38, "questions"]], "abc": [[39, "module-sympy.abc"]], "Caveats": [[39, "caveats"]], "Algebras": [[40, "algebras"]], "Quaternion Reference": [[40, "module-sympy.algebras"]], "Ask": [[41, "module-sympy.assumptions.ask"]], "Assume": [[42, "module-sympy.assumptions.assume"]], "Predicate": [[43, "predicate"]], "Querying": [[43, "querying"]], "Contents": [[43, "contents"], [54, "contents"], [74, "contents"], [87, "contents"], [93, "contents"], [209, "contents"], [221, "contents"], [231, "contents"], [240, "contents"]], "Performance improvements": [[43, "performance-improvements"]], "Misc": [[43, "misc"]], "Common": [[44, "common"]], "Calculus": [[44, "calculus"], [46, "module-sympy.calculus"], [284, "calculus"]], "Matrix": [[44, "matrix"]], "Number Theory": [[44, "number-theory"], [107, "module-sympy.ntheory.generate"], [273, "number-theory"], [278, "number-theory"]], "Order": [[44, "order"]], "Sets": [[44, "sets"], [225, "sets"]], "Refine": [[45, "module-sympy.assumptions.refine"]], "Singularities": [[46, "singularities"]], "Finite difference weights": [[46, "finite-difference-weights"]], "Category Theory": [[47, "category-theory"]], "Base Class Reference": [[47, "module-sympy.categories"], [69, "base-class-reference"]], "Diagram Drawing": [[47, "module-sympy.categories.diagram_drawing"]], "Code printers (sympy.printing)": [[48, "code-printers-sympy-printing"]], "Codegen (sympy.utilities.codegen)": [[48, "codegen-sympy-utilities-codegen"]], "Classes and functions for rewriting expressions (sympy.codegen.rewriting)": [[48, "module-sympy.codegen.rewriting"]], "Tools for simplifying expressions using approximations (sympy.codegen.approximations)": [[48, "module-sympy.codegen.approximations"]], "Classes for abstract syntax trees (sympy.codegen.ast)": [[48, "module-sympy.codegen.ast"]], "AST Type Tree": [[48, "ast-type-tree"]], "Predefined types": [[48, "predefined-types"]], "Using the nodes": [[48, "using-the-nodes"]], "Special C math functions (sympy.codegen.cfunctions)": [[48, "module-sympy.codegen.cfunctions"]], "C specific AST nodes (sympy.codegen.cnodes)": [[48, "module-sympy.codegen.cnodes"]], "C++ specific AST nodes (sympy.codegen.cxxnodes)": [[48, "module-sympy.codegen.cxxnodes"]], "Fortran specific AST nodes (sympy.codegen.fnodes)": [[48, "module-sympy.codegen.fnodes"]], "Algorithms (sympy.codegen.algorithms)": [[48, "module-sympy.codegen.algorithms"]], "Python utilities (sympy.codegen.pyutils)": [[48, "module-sympy.codegen.pyutils"]], "C utilities (sympy.codegen.cutils)": [[48, "module-sympy.codegen.cutils"]], "Fortran utilities (sympy.codegen.futils)": [[48, "module-sympy.codegen.futils"]], "Finitely Presented Groups": [[49, "finitely-presented-groups"]], "Overview of Facilities": [[49, "overview-of-facilities"]], "The Construction of Finitely Presented Groups": [[49, "the-construction-of-finitely-presented-groups"]], "Free Groups and Words": [[49, "free-groups-and-words"]], "Construction of a Free Group": [[49, "construction-of-a-free-group"]], "Construction of words": [[49, "construction-of-words"]], "Coset Enumeration: The Todd-Coxeter Algorithm": [[49, "coset-enumeration-the-todd-coxeter-algorithm"]], "CosetTable": [[49, "cosettable"]], "Attributes of CosetTable": [[49, "attributes-of-cosettable"]], "Compression and Standardization": [[49, "compression-and-standardization"]], "Subgroups of Finite Index": [[49, "subgroups-of-finite-index"]], "Low Index Subgroups": [[49, "low-index-subgroups"]], "Constructing a presentation for a subgroup": [[49, "constructing-a-presentation-for-a-subgroup"]], "Reidemeister Schreier algorithm": [[49, "reidemeister-schreier-algorithm"]], "Bibliography": [[49, "bibliography"], [57, "bibliography"]], "Galois Groups": [[50, "module-sympy.combinatorics.galois"], [212, "galois-groups"]], "Gray Code": [[51, "module-sympy.combinatorics.graycode"]], "Group constructors": [[52, "module-sympy.combinatorics.group_constructs"]], "Nilpotent, Abelian and Cyclic Numbers": [[53, "module-sympy.combinatorics.group_numbers"]], "Combinatorics": [[54, "combinatorics"]], "Named Groups": [[55, "module-sympy.combinatorics.named_groups"]], "Partitions": [[56, "module-sympy.combinatorics.partitions"]], "Polycyclic Groups": [[57, "polycyclic-groups"]], "Overview of functionalities": [[57, "overview-of-functionalities"]], "The Construction of Polycyclic Groups": [[57, "the-construction-of-polycyclic-groups"]], "Attributes of PolycyclicGroup": [[57, "attributes-of-polycyclicgroup"]], "The Construction of Collector": [[57, "the-construction-of-collector"]], "Attributes of Collector": [[57, "attributes-of-collector"]], "Computation of Minimal Uncollected Subword": [[57, "computation-of-minimal-uncollected-subword"]], "Computation of Subword Index": [[57, "computation-of-subword-index"]], "Computation of Collected Word": [[57, "computation-of-collected-word"]], "Computation of Polycyclic Presentation": [[57, "computation-of-polycyclic-presentation"]], "Computation of Exponent Vector": [[57, "computation-of-exponent-vector"]], "Depth of Polycyclic generator": [[57, "depth-of-polycyclic-generator"]], "Computation of Leading Exponent": [[57, "computation-of-leading-exponent"]], "Permutation Groups": [[58, "module-sympy.combinatorics.perm_groups"]], "Permutations": [[59, "module-sympy.combinatorics.permutations"]], "Generators": [[59, "module-sympy.combinatorics.generators"]], "Polyhedron": [[60, "module-sympy.combinatorics.polyhedron"]], "Prufer Sequences": [[61, "module-sympy.combinatorics.prufer"]], "Subsets": [[62, "module-sympy.combinatorics.subsets"]], "Tensor Canonicalization": [[63, "module-sympy.combinatorics.tensor_can"]], "Test Utilities": [[64, "module-sympy.combinatorics.testutil"]], "Utilities": [[65, "module-sympy.combinatorics.util"], [155, "module-sympy.physics.optics.utils"], [212, "utilities"], [254, "module-sympy.utilities"], [273, "utilities"], [281, "utilities"]], "Concrete": [[66, "concrete"]], "Hypergeometric terms": [[66, "hypergeometric-terms"]], "Concrete Class Reference": [[66, "concrete-class-reference"]], "Concrete Functions Reference": [[66, "concrete-functions-reference"]], "Core": [[67, "core"]], "sympify": [[67, "module-sympy.core.sympify"]], "assumptions": [[67, "module-sympy.core.assumptions"]], "See Also": [[67, "see-also"], [255, "see-also"]], "Notes": [[67, "notes"], [224, "notes"], [226, "notes"]], "Developers Notes": [[67, "developers-notes"]], "cache": [[67, "module-sympy.core.cache"]], "basic": [[67, "module-sympy.core.basic"]], "singleton": [[67, "module-sympy.core.singleton"]], "expr": [[67, "module-sympy.core.expr"]], "symbol": [[67, "module-sympy.core.symbol"]], "numbers": [[67, "module-sympy.core.numbers"]], "power": [[67, "module-sympy.core.power"]], "mul": [[67, "module-sympy.core.mul"]], "add": [[67, "module-sympy.core.add"]], "mod": [[67, "module-sympy.core.mod"]], "relational": [[67, "module-sympy.core.relational"]], "multidimensional": [[67, "module-sympy.core.multidimensional"]], "function": [[67, "module-sympy.core.function"]], "evalf": [[67, "module-sympy.core.evalf"], [283, "evalf"]], "containers": [[67, "module-sympy.core.containers"]], "exprtools": [[67, "module-sympy.core.exprtools"]], "Sorting": [[67, "sorting"]], "Random": [[67, "module-sympy.core.random"]], "Traversal": [[67, "module-sympy.core.traversal"]], "Cryptography": [[68, "cryptography"]], "Differential Geometry": [[69, "module-sympy.diffgeom"]], "Discrete": [[70, "discrete"]], "Transforms": [[70, "module-sympy.discrete.transforms"]], "Fast Fourier Transform": [[70, "fast-fourier-transform"]], "Number Theoretic Transform": [[70, "number-theoretic-transform"]], "Fast Walsh Hadamard Transform": [[70, "fast-walsh-hadamard-transform"]], "M\u00f6bius Transform": [[70, "mobius-transform"]], "Convolutions": [[70, "module-sympy.discrete.convolutions"]], "Convolution": [[70, "convolution"]], "Convolution using Fast Fourier Transform": [[70, "convolution-using-fast-fourier-transform"]], "Convolution using Number Theoretic Transform": [[70, "convolution-using-number-theoretic-transform"]], "Convolution using Fast Walsh Hadamard Transform": [[70, "convolution-using-fast-walsh-hadamard-transform"]], "Subset Convolution": [[70, "subset-convolution"]], "Covering Product": [[70, "covering-product"]], "Intersecting Product": [[70, "intersecting-product"]], "Numerical Evaluation": [[71, "numerical-evaluation"]], "Basics": [[71, "basics"], [273, "basics"], [274, "basics"]], "Floating-point numbers": [[71, "floating-point-numbers"]], "Accuracy and error handling": [[71, "accuracy-and-error-handling"]], "Sums and integrals": [[71, "sums-and-integrals"]], "Numerical simplification": [[71, "numerical-simplification"]], "Combinatorial": [[72, "combinatorial"]], "Enumeration": [[72, "enumeration"]], "Elementary": [[73, "elementary"]], "Complex Functions": [[73, "complex-functions"]], "Trigonometric": [[73, "trigonometric"]], "Trigonometric Functions": [[73, "trigonometric-functions"]], "Trigonometric Inverses": [[73, "trigonometric-inverses"]], "Hyperbolic": [[73, "hyperbolic"]], "Hyperbolic Functions": [[73, "hyperbolic-functions"]], "Hyperbolic Inverses": [[73, "hyperbolic-inverses"]], "Integer Functions": [[73, "integer-functions"]], "Exponential": [[73, "exponential"]], "Piecewise": [[73, "piecewise"]], "Miscellaneous": [[73, "miscellaneous"], [258, "module-sympy.utilities.misc"]], "Special": [[75, "special"]], "Dirac Delta and Related Discontinuous Functions": [[75, "dirac-delta-and-related-discontinuous-functions"]], "Gamma, Beta and Related Functions": [[75, "module-sympy.functions.special.gamma_functions"]], "Error Functions and Fresnel Integrals": [[75, "module-sympy.functions.special.error_functions"]], "Exponential, Logarithmic and Trigonometric Integrals": [[75, "exponential-logarithmic-and-trigonometric-integrals"]], "Bessel Type Functions": [[75, "module-sympy.functions.special.bessel"]], "Airy Functions": [[75, "airy-functions"]], "B-Splines": [[75, "b-splines"]], "Riemann Zeta and Related Functions": [[75, "module-sympy.functions.special.zeta_functions"]], "Hypergeometric Functions": [[75, "hypergeometric-functions"]], "Elliptic integrals": [[75, "module-sympy.functions.special.elliptic_integrals"]], "Mathieu Functions": [[75, "module-sympy.functions.special.mathieu_functions"]], "Orthogonal Polynomials": [[75, "module-sympy.functions.special.polynomials"]], "Jacobi Polynomials": [[75, "jacobi-polynomials"]], "Gegenbauer Polynomials": [[75, "gegenbauer-polynomials"]], "Chebyshev Polynomials": [[75, "chebyshev-polynomials"]], "Legendre Polynomials": [[75, "legendre-polynomials"]], "Hermite Polynomials": [[75, "hermite-polynomials"]], "Laguerre Polynomials": [[75, "laguerre-polynomials"]], "Spherical Harmonics": [[75, "spherical-harmonics"]], "Tensor Functions": [[75, "tensor-functions"]], "Curves": [[76, "module-sympy.geometry.curve"]], "Ellipses": [[77, "module-sympy.geometry.ellipse"]], "Entities": [[78, "module-sympy.geometry.entity"]], "Geometry": [[79, "geometry"]], "Available Entities": [[79, "available-entities"]], "Example Usage": [[79, "example-usage"]], "Intersection of medians": [[79, "intersection-of-medians"]], "An in-depth example: Pappus\u2019 Hexagon Theorem": [[79, "an-in-depth-example-pappus-hexagon-theorem"]], "Miscellaneous Notes": [[79, "miscellaneous-notes"]], "Future Work": [[79, "future-work"]], "Truth Setting Expressions": [[79, "truth-setting-expressions"]], "Three Dimensions and Beyond": [[79, "three-dimensions-and-beyond"]], "Geometry Visualization": [[79, "geometry-visualization"]], "Submodules": [[79, "submodules"]], "Lines": [[80, "module-sympy.geometry.line"]], "Plane": [[81, "module-sympy.geometry.plane"]], "Points": [[82, "module-sympy.geometry.point"], [266, "points"]], "Polygons": [[83, "module-sympy.geometry.polygon"]], "Utils": [[84, "module-sympy.geometry.util"]], "About Holonomic Functions": [[85, "about-holonomic-functions"]], "Converting other representations to holonomic": [[86, "converting-other-representations-to-holonomic"]], "Converting hypergeometric functions": [[86, "converting-hypergeometric-functions"]], "Converting Meijer G-functions": [[86, "converting-meijer-g-functions"]], "Converting symbolic expressions": [[86, "converting-symbolic-expressions"]], "Holonomic": [[87, "module-sympy.holonomic"]], "Internal API": [[88, "internal-api"]], "Operations on holonomic functions": [[89, "operations-on-holonomic-functions"]], "Addition and Multiplication": [[89, "addition-and-multiplication"]], "Integration and Differentiation": [[89, "integration-and-differentiation"]], "Composition with polynomials": [[89, "composition-with-polynomials"]], "Convert to holonomic sequence": [[89, "convert-to-holonomic-sequence"]], "Series expansion": [[89, "series-expansion"]], "Numerical evaluation": [[89, "numerical-evaluation"]], "Convert to a linear combination of hypergeometric functions": [[89, "convert-to-a-linear-combination-of-hypergeometric-functions"]], "Convert to a linear combination of Meijer G-functions": [[89, "convert-to-a-linear-combination-of-meijer-g-functions"]], "Convert to expressions": [[89, "convert-to-expressions"]], "Representation of holonomic functions in SymPy": [[90, "representation-of-holonomic-functions-in-sympy"]], "Uses and Current limitations": [[91, "uses-and-current-limitations"]], "Integration": [[91, "integration"]], "Computing Integrals using Meijer G-Functions": [[92, "computing-integrals-using-meijer-g-functions"]], "Overview": [[92, "overview"]], "Polar Numbers and Branched Functions": [[92, "polar-numbers-and-branched-functions"]], "Representing Branched Functions on the Argand Plane": [[92, "representing-branched-functions-on-the-argand-plane"]], "Table Lookups and Inverse Mellin Transforms": [[92, "table-lookups-and-inverse-mellin-transforms"]], "Applying the Integral Theorems": [[92, "applying-the-integral-theorems"]], "The G-Function Integration Theorems": [[92, "the-g-function-integration-theorems"]], "Conditions of Convergence for Integral (1)": [[92, "conditions-of-convergence-for-integral-1"]], "Conditions of Convergence for Integral (2)": [[92, "conditions-of-convergence-for-integral-2"]], "The Inverse Laplace Transform of a G-function": [[92, "the-inverse-laplace-transform-of-a-g-function"]], "How to compute the integral": [[92, "how-to-compute-the-integral"]], "When this computation is valid": [[92, "when-this-computation-is-valid"]], "When the integral exists": [[92, "when-the-integral-exists"]], "Implemented G-Function Formulae": [[92, "implemented-g-function-formulae"]], "Internal API Reference": [[92, "module-sympy.integrals.meijerint"]], "Integrals": [[93, "integrals"], [94, "module-sympy.integrals"], [284, "integrals"]], "Integral Transforms": [[94, "module-sympy.integrals.transforms"]], "Internals": [[94, "internals"], [212, "internals"]], "API reference": [[94, "api-reference"], [94, "id39"]], "TODO and Bugs": [[94, "todo-and-bugs"]], "Numeric Integrals": [[94, "numeric-integrals"]], "Integration over Polytopes": [[94, "module-sympy.integrals.intpoly"]], "For 2D Polygons": [[94, "for-2d-polygons"]], "For 3-Polytopes/Polyhedra": [[94, "for-3-polytopes-polyhedra"]], "Interactive": [[95, "module-sympy.interactive"]], "Session": [[95, "module-sympy.interactive.session"]], "Lie Algebra": [[96, "module-sympy.liealgebras"]], "Forming logical expressions": [[97, "forming-logical-expressions"]], "Boolean functions": [[97, "boolean-functions"]], "Simplification and equivalence-testing": [[97, "simplification-and-equivalence-testing"]], "Manipulating expressions": [[97, "manipulating-expressions"]], "Truth tables and related functions": [[97, "truth-tables-and-related-functions"]], "Inference": [[97, "module-sympy.logic.inference"]], "Common Matrices": [[98, "module-sympy.matrices.common"]], "Dense Matrices": [[99, "dense-matrices"]], "Matrix Expressions": [[100, "module-sympy.matrices.expressions"]], "Matrix Expressions Core Reference": [[100, "matrix-expressions-core-reference"]], "Block Matrices": [[100, "block-matrices"]], "Immutable Matrices": [[101, "immutable-matrices"]], "ImmutableMatrix Class Reference": [[101, "module-sympy.matrices.immutable"]], "Matrices": [[102, "module-sympy.matrices"], [121, "module-sympy.physics.matrices"], [273, "matrices"], [277, "matrices"], [290, "matrices"]], "Matrices (linear algebra)": [[103, "module-sympy.matrices.matrices"]], "Creating Matrices": [[103, "creating-matrices"]], "Basic Manipulation": [[103, "basic-manipulation"]], "Operations on entries": [[103, "operations-on-entries"]], "Linear algebra": [[103, "linear-algebra"]], "Reference": [[103, "reference"], [204, "reference"], [210, "reference"], [214, "reference"], [224, "reference"], [224, "id2"], [224, "id4"], [224, "id7"], [224, "id8"]], "Matrix Base Classes": [[103, "matrix-base-classes"]], "Matrix Exceptions": [[103, "matrix-exceptions"]], "Matrix Functions": [[103, "matrix-functions"]], "Rotation matrices": [[103, "rotation-matrices"]], "Numpy Utility Functions": [[103, "numpy-utility-functions"]], "Matrix Normal Forms": [[104, "matrix-normal-forms"]], "Sparse Matrices": [[105, "module-sympy.matrices.sparse"]], "SparseMatrix Class Reference": [[105, "sparsematrix-class-reference"]], "ImmutableSparseMatrix Class Reference": [[105, "immutablesparsematrix-class-reference"]], "Sparse Tools": [[106, "module-sympy.matrices.sparsetools"]], "Ntheory Class Reference": [[107, "ntheory-class-reference"]], "Ntheory Functions Reference": [[107, "ntheory-functions-reference"]], "ECM function": [[107, "ecm-function"]], "QS function": [[107, "qs-function"]], "Numeric Computation": [[108, "numeric-computation"]], "Subs/evalf": [[108, "subs-evalf"]], "Lambdify": [[108, "lambdify"], [256, "module-sympy.utilities.lambdify"]], "uFuncify": [[108, "ufuncify"]], "Aesara": [[108, "aesara"]], "So Which Should I Use?": [[108, "so-which-should-i-use"]], "Parsing Functions Reference": [[109, "parsing-functions-reference"]], "Parsing Transformations Reference": [[109, "parsing-transformations-reference"]], "Experimental \\mathrm{\\LaTeX} Parsing": [[109, "experimental-mathrm-latex-parsing"]], "\\mathrm{\\LaTeX} Parsing Caveats": [[109, "mathrm-latex-parsing-caveats"]], "\\mathrm{\\LaTeX} Parsing Functions Reference": [[109, "mathrm-latex-parsing-functions-reference"]], "\\mathrm{\\LaTeX} Parsing Exceptions Reference": [[109, "mathrm-latex-parsing-exceptions-reference"]], "SymPy Expression Reference": [[109, "module-sympy.parsing.sym_expr"]], "Runtime Installation": [[109, "runtime-installation"]], "Beam (Docstrings)": [[110, "module-sympy.physics.continuum_mechanics.beam"]], "Solving Beam Bending Problems using Singularity Functions": [[111, "solving-beam-bending-problems-using-singularity-functions"]], "Beam": [[111, "beam"], [113, "beam"]], "Example 6": [[111, "example-6"]], "Example 7": [[111, "example-7"]], "Example 8": [[111, "example-8"]], "Example 9": [[111, "example-9"]], "Example 10": [[111, "example-10"]], "Example 11": [[111, "example-11"]], "Cable (Docstrings)": [[112, "cable-docstrings"]], "Cable": [[112, "module-sympy.physics.continuum_mechanics.cable"], [113, "cable"]], "Continuum Mechanics": [[113, "continuum-mechanics"]], "Abstract": [[113, null], [117, null], [119, null], [142, null], [152, null], [169, null], [199, null]], "Truss": [[113, "truss"]], "Truss (Docstrings)": [[114, "module-sympy.physics.continuum_mechanics.truss"]], "Control": [[115, "control"]], "Control System Plots": [[116, "control-system-plots"]], "Pole-Zero Plot": [[116, "pole-zero-plot"]], "Bode Plot": [[116, "bode-plot"]], "Impulse-Response Plot": [[116, "impulse-response-plot"]], "Step-Response Plot": [[116, "step-response-plot"]], "Ramp-Response Plot": [[116, "ramp-response-plot"]], "Control Module": [[117, "module-sympy.physics.control"]], "Control API": [[118, "control-api"]], "lti": [[118, "module-sympy.physics.control.lti"]], "High energy physics": [[119, "high-energy-physics"]], "Gamma matrices": [[119, "module-sympy.physics.hep.gamma_matrices"]], "Hydrogen Wavefunctions": [[120, "module-sympy.physics.hydrogen"]], "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics": [[122, "potential-issues-advanced-topics-future-features-in-physics-mechanics"]], "Common Issues": [[122, "common-issues"], [191, "common-issues"]], "Numerically Integrating Code": [[122, "numerically-integrating-code"]], "Differentiating": [[122, "differentiating"]], "Choice of Coordinates and Speeds": [[122, "choice-of-coordinates-and-speeds"]], "Substitution": [[122, "substitution"], [191, "substitution"], [283, "substitution"]], "Linearization": [[122, "linearization"]], "Acceleration of Points": [[122, "acceleration-of-points"], [191, "acceleration-of-points"]], "Advanced Interfaces": [[122, "advanced-interfaces"], [191, "advanced-interfaces"]], "Advanced Functionality": [[122, "advanced-functionality"]], "Future Features": [[122, "future-features"]], "Code Output": [[122, "code-output"]], "Body (Docstrings)": [[123, "module-sympy.physics.mechanics.body"]], "Expression Manipulation (Docstrings)": [[124, "expression-manipulation-docstrings"]], "Mechanics API Reference": [[125, "mechanics-api-reference"]], "Joints Framework (Docstrings)": [[126, "joints-framework-docstrings"]], "Joint (Docstrings)": [[126, "module-sympy.physics.mechanics.joint"]], "Kane\u2019s Method & Lagrange\u2019s Method (Docstrings)": [[127, "module-sympy.physics.mechanics.kane"]], "Linearization (Docstrings)": [[128, "module-sympy.physics.mechanics.linearize"]], "Bodies, Inertias, Loads & Other Functions (Docstrings)": [[129, "bodies-inertias-loads-other-functions-docstrings"]], "Bodies": [[129, "bodies"]], "Inertias": [[129, "inertias"]], "Loads": [[129, "loads"], [147, "loads"]], "Other Functions": [[129, "other-functions"]], "Printing (Docstrings)": [[130, "printing-docstrings"], [197, "printing-docstrings"]], "mechanics_printing": [[130, "mechanics-printing"]], "mprint": [[130, "mprint"]], "mpprint": [[130, "mpprint"]], "mlatex": [[130, "mlatex"]], "SymbolicSystem (Docstrings)": [[131, "symbolicsystem-docstrings"]], "Autolev Parser": [[132, "autolev-parser"]], "Usage": [[132, "usage"]], "Gotchas": [[132, "gotchas"], [286, "gotchas"]], "Limitations and Issues": [[132, "limitations-and-issues"]], "Future Improvements": [[132, "future-improvements"]], "1. Completing Dynamics Online": [[132, "completing-dynamics-online"]], "2. Fixing Issues": [[132, "fixing-issues"]], "3. Switching to an AST": [[132, "switching-to-an-ast"]], "Examples for Physics/Mechanics": [[133, "examples-for-physics-mechanics"]], "A bicycle": [[134, "a-bicycle"]], "A four bar linkage": [[135, "a-four-bar-linkage"]], "Nonminimal Coordinates Pendulum": [[136, "nonminimal-coordinates-pendulum"]], "Kane\u2019s Method": [[136, "kane-s-method"]], "Lagrange\u2019s Method": [[136, "lagrange-s-method"]], "Multi Degree of Freedom Holonomic System": [[137, "multi-degree-of-freedom-holonomic-system"]], "A rolling disc": [[138, "a-rolling-disc"]], "A rolling disc, with Kane\u2019s method": [[139, "a-rolling-disc-with-kane-s-method"]], "A rolling disc, with Kane\u2019s method and constraint forces": [[140, "a-rolling-disc-with-kane-s-method-and-constraint-forces"]], "A rolling disc using Lagrange\u2019s Method": [[141, "a-rolling-disc-using-lagrange-s-method"]], "Classical Mechanics": [[142, "classical-mechanics"]], "Vector": [[142, "vector"], [201, "vector"], [270, "vector"]], "Mechanics": [[142, "mechanics"], [237, "module-sympy.stats.rv"]], "Guide to Mechanics": [[142, "guide-to-mechanics"]], "Joints Framework in Physics/Mechanics": [[143, "joints-framework-in-physics-mechanics"]], "Joints in Physics/Mechanics": [[143, "joints-in-physics-mechanics"]], "JointsMethod in Physics/Mechanics": [[143, "jointsmethod-in-physics-mechanics"]], "Kane\u2019s Method in Physics/Mechanics": [[144, "kane-s-method-in-physics-mechanics"], [144, "id2"]], "Structure of Equations": [[144, "structure-of-equations"], [145, "structure-of-equations"]], "Lagrange\u2019s Method in Physics/Mechanics": [[145, "lagrange-s-method-in-physics-mechanics"], [145, "id1"]], "Linearization in Physics/Mechanics": [[146, "linearization-in-physics-mechanics"]], "Background": [[146, "background"]], "A Note on Dependent Coordinates and Speeds": [[146, null]], "Linearizing Kane\u2019s Equations": [[146, "linearizing-kane-s-equations"]], "1. Using the Linearizer class directly:": [[146, "using-the-linearizer-class-directly"], [146, "id2"]], "2. Using the linearize class method:": [[146, "using-the-linearize-class-method"], [146, "id3"]], "What\u2019s with the new_method kwarg?": [[146, null]], "Linearizing Lagrange\u2019s Equations": [[146, "linearizing-lagrange-s-equations"]], "Potential Issues": [[146, "potential-issues"]], "1. Symbolic linearization with A_and_B=True is slow": [[146, "symbolic-linearization-with-a-and-b-true-is-slow"]], "2. The linearized form has nan, zoo, or oo as matrix elements": [[146, "the-linearized-form-has-nan-zoo-or-oo-as-matrix-elements"]], "Further Examples": [[146, "further-examples"]], "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics": [[147, "masses-inertias-particles-and-rigid-bodies-in-physics-mechanics"]], "Mass": [[147, "mass"]], "Particle": [[147, "particle"]], "Inertia": [[147, "inertia"]], "Inertia (Dyadics)": [[147, "inertia-dyadics"]], "Rigid Body": [[147, "rigid-body"]], "Linear Momentum": [[147, "linear-momentum"]], "Angular Momentum": [[147, "angular-momentum"]], "Using momenta functions in Mechanics": [[147, "using-momenta-functions-in-mechanics"]], "Kinetic Energy": [[147, "kinetic-energy"]], "Potential Energy": [[147, "potential-energy"]], "Lagrangian": [[147, "lagrangian"]], "Using energy functions in Mechanics": [[147, "using-energy-functions-in-mechanics"]], "References for Physics/Mechanics": [[148, "references-for-physics-mechanics"]], "SymPy Mechanics for Autolev Users": [[149, "sympy-mechanics-for-autolev-users"]], "Some Key Differences": [[149, "some-key-differences"]], "Rough Autolev-SymPy Equivalents": [[149, "rough-autolev-sympy-equivalents"]], "Mathematical Equivalents": [[149, "mathematical-equivalents"]], "Physical Equivalents": [[149, "physical-equivalents"]], "Numerical Evaluation and Visualization": [[149, "numerical-evaluation-and-visualization"]], "Links": [[149, "links"]], "Symbolic Systems in Physics/Mechanics": [[150, "symbolic-systems-in-physics-mechanics"]], "SymbolicSystem Example Usage": [[150, "symbolicsystem-example-usage"]], "Gaussian Optics": [[151, "module-sympy.physics.optics.gaussopt"]], "Optics Module": [[152, "optics-module"]], "Medium": [[153, "module-sympy.physics.optics.medium"]], "Polarization": [[154, "module-sympy.physics.optics.polarization"]], "Waves": [[156, "module-sympy.physics.optics.waves"]], "Pauli Algebra": [[157, "module-sympy.physics.paulialgebra"]], "Quantum Harmonic Oscillator in 1-D": [[158, "module-sympy.physics.qho_1d"]], "Anticommutator": [[159, "module-sympy.physics.quantum.anticommutator"]], "Cartesian Operators and States": [[160, "module-sympy.physics.quantum.cartesian"]], "Clebsch-Gordan Coefficients": [[161, "module-sympy.physics.quantum.cg"]], "Circuit Plot": [[162, "module-sympy.physics.quantum.circuitplot"]], "Commutator": [[163, "module-sympy.physics.quantum.commutator"]], "Constants": [[164, "module-sympy.physics.quantum.constants"], [187, "constants"]], "Dagger": [[165, "module-sympy.physics.quantum.dagger"]], "Gates": [[166, "module-sympy.physics.quantum.gate"]], "Grover\u2019s Algorithm": [[167, "module-sympy.physics.quantum.grover"]], "Hilbert Space": [[168, "module-sympy.physics.quantum.hilbert"]], "Quantum Mechanics": [[169, "quantum-mechanics"]], "Quantum Functions": [[169, "quantum-functions"]], "States and Operators": [[169, "states-and-operators"]], "Quantum Computation": [[169, "quantum-computation"]], "Analytic Solutions": [[169, "analytic-solutions"]], "Inner Product": [[170, "module-sympy.physics.quantum.innerproduct"]], "Operator": [[171, "module-sympy.physics.quantum.operator"]], "Operator/State Helper Functions": [[172, "module-sympy.physics.quantum.operatorset"]], "Particle in a Box": [[173, "module-sympy.physics.quantum.piab"]], "Qapply": [[174, "module-sympy.physics.quantum.qapply"]], "QFT": [[175, "module-sympy.physics.quantum.qft"]], "Qubit": [[176, "module-sympy.physics.quantum.qubit"]], "Represent": [[177, "module-sympy.physics.quantum.represent"]], "Shor\u2019s Algorithm": [[178, "module-sympy.physics.quantum.shor"]], "Spin": [[179, "module-sympy.physics.quantum.spin"]], "State": [[180, "module-sympy.physics.quantum.state"]], "Tensor Product": [[181, "module-sympy.physics.quantum.tensorproduct"]], "Second Quantization": [[182, "module-sympy.physics.secondquant"]], "Quantum Harmonic Oscillator in 3-D": [[183, "module-sympy.physics.sho"]], "Dimensions and dimension systems": [[184, "module-sympy.physics.units.dimensions"]], "More examples": [[185, "more-examples"]], "Dimensional analysis": [[185, "dimensional-analysis"]], "Equation with quantities": [[185, "equation-with-quantities"]], "Unit systems": [[186, "unit-systems"]], "More": [[186, "more"]], "Philosophy behind unit systems": [[187, "philosophy-behind-unit-systems"]], "Dimensions": [[187, "dimensions"]], "Group structure": [[187, "group-structure"]], "Linear space representation": [[187, "linear-space-representation"]], "An example": [[187, "an-example"], [227, "an-example"]], "Quantities": [[187, "quantities"]], "Units": [[187, "units"]], "The need for a reference": [[187, "the-need-for-a-reference"]], "Literature": [[187, "literature"], [211, "literature"], [216, "literature"]], "Unit prefixes": [[188, "module-sympy.physics.units.prefixes"]], "Physical quantities": [[189, "module-sympy.physics.units.quantities"]], "Conversion between quantities": [[189, "module-sympy.physics.units.util"]], "Units and unit systems": [[190, "module-sympy.physics.units.unitsystem"]], "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module": [[191, "potential-issues-advanced-topics-future-features-in-physics-vector-module"]], "Dyadic": [[191, "dyadic"]], "ReferenceFrame": [[191, "referenceframe"]], "dynamicsymbols": [[191, "dynamicsymbols"]], "Essential Classes": [[192, "essential-classes"]], "Docstrings for basic field functions": [[193, "docstrings-for-basic-field-functions"]], "Field operation functions": [[193, "field-operation-functions"]], "Checking the type of vector field": [[193, "checking-the-type-of-vector-field"]], "Essential Functions (Docstrings)": [[194, "essential-functions-docstrings"]], "Physics Vector API": [[195, "physics-vector-api"]], "Kinematics (Docstrings)": [[196, "module-sympy.physics.vector.point"]], "kinematic_equations": [[196, "module-sympy.physics.vector.functions"]], "Scalar and Vector Field Functionality": [[198, "scalar-and-vector-field-functionality"], [269, "scalar-and-vector-field-functionality"]], "Vectors and Scalars": [[198, "vectors-and-scalars"], [271, "vectors-and-scalars"]], "Fields": [[198, "fields"], [271, "fields"]], "Implementation of fields in sympy.physics.vector": [[198, "implementation-of-fields-in-sympy-physics-vector"]], "Field operators and other related functions": [[198, "field-operators-and-other-related-functions"]], "Curl": [[198, "curl"], [269, "curl"]], "Divergence": [[198, "divergence"], [269, "divergence"]], "Gradient": [[198, "gradient"], [269, "gradient"]], "Conservative and Solenoidal fields": [[198, "conservative-and-solenoidal-fields"], [269, "conservative-and-solenoidal-fields"]], "Scalar potential functions": [[198, "scalar-potential-functions"], [269, "scalar-potential-functions"]], "The Physics Vector Module": [[199, "the-physics-vector-module"]], "References for Physics/Vector": [[199, "references-for-physics-vector"]], "Guide to Vector": [[199, "guide-to-vector"], [270, "guide-to-vector"]], "Vector: Kinematics": [[200, "vector-kinematics"]], "Introduction to Kinematics": [[200, "introduction-to-kinematics"]], "Angular Velocity": [[200, "angular-velocity"]], "Angular Acceleration": [[200, "angular-acceleration"]], "Point Velocity & Acceleration": [[200, "point-velocity-acceleration"]], "Kinematics in physics.vector": [[200, "kinematics-in-physics-vector"]], "Vector & ReferenceFrame": [[201, "vector-referenceframe"]], "Vector Algebra": [[201, "vector-algebra"]], "Vector Operations": [[201, "vector-operations"]], "Alternative Representation": [[201, "alternative-representation"]], "Vector Calculus": [[201, "vector-calculus"]], "Derivatives of Vectors": [[201, "derivatives-of-vectors"]], "Relating Sets of Basis Vectors": [[201, "relating-sets-of-basis-vectors"]], "Derivatives with Multiple Frames": [[201, "derivatives-with-multiple-frames"]], "Using Vectors and Reference Frames": [[201, "using-vectors-and-reference-frames"]], "Vector Algebra, in physics.vector": [[201, "vector-algebra-in-physics-vector"]], "Vector Calculus, in physics.vector": [[201, "vector-calculus-in-physics-vector"]], "How Vectors are Coded": [[201, "how-vectors-are-coded"]], "Wigner Symbols": [[202, "module-sympy.physics.wigner"]], "Credits and Copyright": [[202, "credits-and-copyright"]], "Authors": [[202, "authors"]], "Plot Class": [[203, "plot-class"]], "Plotting Function Reference": [[203, "plotting-function-reference"]], "PlotGrid Class": [[203, "plotgrid-class"]], "Series Classes": [[203, "series-classes"]], "Backends": [[203, "backends"]], "Pyglet Plotting": [[203, "module-sympy.plotting.pygletplot"]], "Plot Window Controls": [[203, "plot-window-controls"]], "Coordinate Modes": [[203, "coordinate-modes"]], "Specifying Intervals for Variables": [[203, "specifying-intervals-for-variables"]], "Using the Interactive Interface": [[203, "using-the-interactive-interface"]], "Using Custom Color Functions": [[203, "using-custom-color-functions"]], "Plotting Geometric Entities": [[203, "plotting-geometric-entities"]], "Plotting with ASCII art": [[203, "plotting-with-ascii-art"]], "AGCA - Algebraic Geometry and Commutative Algebra Module": [[204, "agca-algebraic-geometry-and-commutative-algebra-module"]], "Base Rings": [[204, "base-rings"]], "Modules, Ideals and their Elementary Properties": [[204, "modules-ideals-and-their-elementary-properties"]], "Module Homomorphisms and Syzygies": [[204, "module-homomorphisms-and-syzygies"]], "Finite Extensions": [[204, "finite-extensions"]], "Basic functionality of the module": [[205, "basic-functionality-of-the-module"]], "Basic concepts": [[205, "basic-concepts"]], "Polynomials": [[205, "polynomials"]], "Divisibility": [[205, "divisibility"]], "Integral domains": [[205, "integral-domains"]], "Factorial domains": [[205, "factorial-domains"]], "Euclidean domains": [[205, "euclidean-domains"]], "Divisibility of polynomials": [[205, "divisibility-of-polynomials"]], "Basic functionality": [[205, "basic-functionality"]], "Division": [[205, "division"]], "GCD and LCM": [[205, "gcd-and-lcm"]], "Square-free factorization": [[205, "square-free-factorization"]], "Factorization": [[205, "factorization"]], "Groebner bases": [[205, "groebner-bases"]], "Solving Equations": [[205, "solving-equations"]], "Introducing the domainmatrix of the poly module": [[206, "introducing-the-domainmatrix-of-the-poly-module"]], "What is domainmatrix?": [[206, "what-is-domainmatrix"]], "Introducing the Domains of the poly module": [[207, "introducing-the-domains-of-the-poly-module"]], "What are the domains?": [[207, "what-are-the-domains"]], "Representing expressions symbolically": [[207, "representing-expressions-symbolically"]], "Tree representation": [[207, "tree-representation"]], "DUP representation": [[207, "dup-representation"]], "DMP representation": [[207, "dmp-representation"]], "Sparse polynomial representation": [[207, "sparse-polynomial-representation"]], "Basic usage of domains": [[207, "basic-usage-of-domains"]], "Domain elements vs sympy expressions": [[207, "domain-elements-vs-sympy-expressions"]], "Gaussian integers and Gaussian rationals": [[207, "gaussian-integers-and-gaussian-rationals"]], "Finite fields": [[207, "finite-fields"]], "Real and complex fields": [[207, "real-and-complex-fields"]], "Algebraic number fields": [[207, "algebraic-number-fields"], [212, "algebraic-number-fields"]], "Polynomial ring domains": [[207, "polynomial-ring-domains"]], "Old (dense) polynomial rings": [[207, "old-dense-polynomial-rings"]], "PolyRing vs PolynomialRing": [[207, "polyring-vs-polynomialring"]], "Rational function fields": [[207, "rational-function-fields"]], "Expression domain": [[207, "expression-domain"]], "Choosing a domain": [[207, "choosing-a-domain"]], "Converting elements between different domains": [[207, "converting-elements-between-different-domains"]], "Unifying domains": [[207, "unifying-domains"]], "Internals of a Poly": [[207, "internals-of-a-poly"]], "Choosing a domain for a Poly": [[207, "choosing-a-domain-for-a-poly"]], "Choosing generators": [[207, "choosing-generators"]], "Algebraically dependent generators": [[207, "algebraically-dependent-generators"]], "Reference docs for the Poly Domains": [[208, "reference-docs-for-the-poly-domains"]], "Domains": [[208, "domains"]], "Abstract Domains": [[208, "abstract-domains"]], "GF(p)": [[208, "gf-p"]], "ZZ": [[208, "zz"]], "QQ": [[208, "qq"]], "MPQ": [[208, "mpq"]], "Gaussian domains": [[208, "gaussian-domains"]], "ZZ_I": [[208, "zz-i"]], "QQ_I": [[208, "qq-i"]], "QQ<a>": [[208, "qq-a"]], "RR": [[208, "rr"]], "CC": [[208, "cc"]], "K[x]": [[208, "k-x"]], "K(x)": [[208, "id11"]], "EX": [[208, "ex"]], "Quotient ring": [[208, "quotient-ring"]], "Sparse polynomials": [[208, "sparse-polynomials"]], "Sparse rational functions": [[208, "sparse-rational-functions"]], "Dense polynomials": [[208, "dense-polynomials"]], "Polynomial Manipulation": [[209, "polynomial-manipulation"]], "Internals of the Polynomial Manipulation Module": [[210, "internals-of-the-polynomial-manipulation-module"]], "Level Zero": [[210, "level-zero"]], "Manipulation of dense, multivariate polynomials": [[210, "manipulation-of-dense-multivariate-polynomials"]], "Manipulation of dense, univariate polynomials with finite field coefficients": [[210, "manipulation-of-dense-univariate-polynomials-with-finite-field-coefficients"]], "Manipulation of sparse, distributed polynomials and vectors": [[210, "manipulation-of-sparse-distributed-polynomials-and-vectors"]], "Polynomial factorization algorithms": [[210, "polynomial-factorization-algorithms"]], "Classical remainder sequence": [[210, "classical-remainder-sequence"]], "Simplified remainder sequences": [[210, "simplified-remainder-sequences"]], "Subresultant sequence": [[210, "subresultant-sequence"]], "Groebner basis algorithms": [[210, "groebner-basis-algorithms"]], "Options": [[210, "module-sympy.polys.polyoptions"]], "Configuration": [[210, "module-sympy.polys.polyconfig"]], "Exceptions": [[210, "exceptions"]], "Modular GCD": [[210, "modular-gcd"]], "Undocumented": [[210, "undocumented"]], "Number Fields": [[212, "number-fields"]], "Solving the Main Problems": [[212, "solving-the-main-problems"]], "Integral Basis": [[212, "integral-basis"]], "Prime Decomposition": [[212, "prime-decomposition"]], "p-adic Valuation": [[212, "p-adic-valuation"]], "Finding Minimal Polynomials": [[212, "finding-minimal-polynomials"]], "The Subfield Problem": [[212, "the-subfield-problem"]], "Representing algebraic numbers": [[212, "representing-algebraic-numbers"]], "As number field elements": [[212, "as-number-field-elements"]], "As elements of finitely-generated modules": [[212, "as-elements-of-finitely-generated-modules"]], "Finitely-generated modules": [[212, "module-sympy.polys.numberfields.modules"]], "Arithmetic with module elements": [[212, "arithmetic-with-module-elements"]], "Multiplication": [[212, "multiplication"]], "Module Homomorphisms": [[212, "module-homomorphisms"]], "Class Reference": [[212, "class-reference"]], "Polynomials Manipulation Module Reference": [[213, "module-sympy.polys"]], "Basic polynomial manipulation functions": [[213, "basic-polynomial-manipulation-functions"]], "Extra polynomial manipulation functions": [[213, "extra-polynomial-manipulation-functions"]], "Domain constructors": [[213, "domain-constructors"]], "Monomials encoded as tuples": [[213, "monomials-encoded-as-tuples"]], "Orderings of monomials": [[213, "orderings-of-monomials"]], "Formal manipulation of roots of polynomials": [[213, "formal-manipulation-of-roots-of-polynomials"]], "Symbolic root-finding algorithms": [[213, "symbolic-root-finding-algorithms"]], "Special polynomials": [[213, "special-polynomials"]], "Orthogonal polynomials": [[213, "orthogonal-polynomials"]], "Appell sequences": [[213, "appell-sequences"]], "Manipulation of rational functions": [[213, "manipulation-of-rational-functions"]], "Partial fraction decomposition": [[213, "partial-fraction-decomposition"], [216, "partial-fraction-decomposition"]], "Dispersion of Polynomials": [[213, "dispersion-of-polynomials"]], "Series Manipulation using Polynomials": [[214, "series-manipulation-using-polynomials"]], "rs_series": [[214, "rs-series"]], "Contribute": [[214, "contribute"]], "Poly solvers": [[215, "poly-solvers"]], "Examples from Wester\u2019s Article": [[216, "examples-from-wester-s-article"]], "Simple univariate polynomial factorization": [[216, "simple-univariate-polynomial-factorization"]], "Univariate GCD, resultant and factorization": [[216, "univariate-gcd-resultant-and-factorization"]], "Multivariate GCD and factorization": [[216, "multivariate-gcd-and-factorization"]], "Support for symbols in exponents": [[216, "support-for-symbols-in-exponents"]], "Testing if polynomials have common zeros": [[216, "testing-if-polynomials-have-common-zeros"]], "Normalizing simple rational functions": [[216, "normalizing-simple-rational-functions"]], "Expanding expressions and factoring back": [[216, "expanding-expressions-and-factoring-back"]], "Factoring in terms of cyclotomic polynomials": [[216, "factoring-in-terms-of-cyclotomic-polynomials"]], "Univariate factoring over Gaussian numbers": [[216, "univariate-factoring-over-gaussian-numbers"]], "Computing with automatic field extensions": [[216, "computing-with-automatic-field-extensions"]], "Univariate factoring over various domains": [[216, "univariate-factoring-over-various-domains"]], "Factoring polynomials into linear factors": [[216, "factoring-polynomials-into-linear-factors"]], "Advanced factoring over finite fields": [[216, "advanced-factoring-over-finite-fields"]], "Working with expressions as polynomials": [[216, "working-with-expressions-as-polynomials"]], "Computing reduced Gr\u00f6bner bases": [[216, "computing-reduced-grobner-bases"]], "Multivariate factoring over algebraic numbers": [[216, "multivariate-factoring-over-algebraic-numbers"]], "Printer Class": [[217, "module-sympy.printing.printer"]], "Which Method is Responsible for Printing?": [[217, "which-method-is-responsible-for-printing"]], "Example of Custom Printer": [[217, "example-of-custom-printer"]], "Example of Custom Printing Method": [[217, "example-of-custom-printing-method"]], "Common mistakes": [[217, "common-mistakes"]], "PrettyPrinter Class": [[217, "prettyprinter-class"]], "C code printers": [[217, "module-sympy.printing.c"]], "C++ code printers": [[217, "module-sympy.printing.cxx"]], "RCodePrinter": [[217, "module-sympy.printing.rcode"]], "Fortran Printing": [[217, "fortran-printing"]], "SMT-Lib printing": [[217, "module-sympy.printing.smtlib"]], "Mathematica code printing": [[217, "module-sympy.printing.mathematica"]], "Maple code printing": [[217, "module-sympy.printing.maple"]], "Javascript Code printing": [[217, "module-sympy.printing.jscode"]], "Julia code printing": [[217, "module-sympy.printing.julia"]], "Octave (and Matlab) Code printing": [[217, "module-sympy.printing.octave"]], "Rust code printing": [[217, "module-sympy.printing.rust"]], "Aesara Code printing": [[217, "module-sympy.printing.aesaracode"]], "Gtk": [[217, "module-sympy.printing.gtk"]], "LambdaPrinter": [[217, "module-sympy.printing.lambdarepr"]], "LatexPrinter": [[217, "module-sympy.printing.latex"]], "MathMLPrinter": [[217, "module-sympy.printing.mathml"]], "PythonCodePrinter": [[217, "module-sympy.printing.pycode"]], "PythonPrinter": [[217, "module-sympy.printing.python"]], "srepr": [[217, "module-sympy.printing.repr"], [293, "srepr"]], "StrPrinter": [[217, "module-sympy.printing.str"]], "Tree Printing": [[217, "module-sympy.printing.tree"]], "Preview": [[217, "preview"]], "Implementation - Helper Classes/Functions": [[217, "module-sympy.printing.conventions"]], "CodePrinter": [[217, "module-sympy.printing.codeprinter"]], "Precedence": [[217, "module-sympy.printing.precedence"]], "Pretty-Printing Implementation Helpers": [[217, "module-sympy.printing.pretty.pretty_symbology"]], "dotprint": [[217, "dotprint"]], "Term Rewriting": [[218, "term-rewriting"]], "Expanding": [[218, "expanding"]], "Common Subexpression Detection and Collection": [[218, "common-subexpression-detection-and-collection"]], "Formal Power Series": [[219, "formal-power-series"]], "Rational Algorithm": [[219, "rational-algorithm"]], "Hypergeometric Algorithm": [[219, "hypergeometric-algorithm"]], "Fourier Series": [[220, "fourier-series"]], "Series": [[221, "series"]], "Limits of Sequences": [[222, "limits-of-sequences"]], "Sequences": [[223, "sequences"]], "Sequences Base": [[223, "sequences-base"]], "Elementary Sequences": [[223, "elementary-sequences"]], "Singleton Sequences": [[223, "singleton-sequences"]], "Compound Sequences": [[223, "compound-sequences"]], "Recursive Sequences": [[223, "recursive-sequences"]], "Series Expansions": [[224, "series-expansions"]], "Limits": [[224, "limits"], [284, "limits"]], "The Gruntz Algorithm": [[224, "the-gruntz-algorithm"]], "More Intuitive Series Expansion": [[224, "more-intuitive-series-expansion"]], "Order Terms": [[224, "order-terms"]], "Series Acceleration": [[224, "series-acceleration"]], "Residues": [[224, "residues"]], "Basic Sets": [[225, "module-sympy.sets.sets"]], "Elementary Sets": [[225, "elementary-sets"]], "Compound Sets": [[225, "compound-sets"]], "Singleton Sets": [[225, "singleton-sets"]], "Special Sets": [[225, "module-sympy.sets.fancysets"]], "Power sets": [[225, "module-sympy.sets.powerset"]], "Condition Sets": [[225, "module-sympy.sets.conditionset"]], "SetKind": [[225, "setkind"]], "Iteration over sets": [[225, "iteration-over-sets"]], "Hongguang Fu\u2019s Trigonometric Simplification": [[226, "hongguang-fu-s-trigonometric-simplification"]], "Rules": [[226, "rules"]], "Hypergeometric Expansion": [[227, "hypergeometric-expansion"]], "Hypergeometric Function Expansion Algorithm": [[227, "hypergeometric-function-expansion-algorithm"]], "Notation": [[227, "notation"]], "Incrementing and decrementing indices": [[227, "incrementing-and-decrementing-indices"]], "Reduction of Order": [[227, "reduction-of-order"]], "Moving Around in the Parameter Space": [[227, "moving-around-in-the-parameter-space"]], "Applying the Operators": [[227, "applying-the-operators"]], "Loose Ends": [[227, "loose-ends"]], "Meijer G-Functions of Finite Confluence": [[227, "meijer-g-functions-of-finite-confluence"]], "Extending The Hypergeometric Tables": [[227, "extending-the-hypergeometric-tables"]], "Implemented Hypergeometric Formulae": [[227, "implemented-hypergeometric-formulae"]], "Simplify": [[228, "simplify"], [229, "simplify"]], "Diophantine": [[230, "diophantine"]], "Diophantine equations": [[230, "diophantine-equations"]], "Module structure": [[230, "module-structure"]], "Tutorial": [[230, "tutorial"]], "User Functions": [[230, "user-functions"], [233, "user-functions"], [234, "user-functions"]], "Internal Functions": [[230, "internal-functions"]], "Internal Classes": [[230, "internal-classes"]], "Solvers": [[231, "solvers"], [235, "module-sympy.solvers"], [295, "solvers"]], "Inequality Solvers": [[232, "inequality-solvers"]], "ODE": [[233, "ode"]], "Hint Functions": [[233, "hint-functions"]], "Lie heuristics": [[233, "lie-heuristics"]], "Rational Riccati Solver": [[233, "rational-riccati-solver"]], "System of ODEs": [[233, "system-of-odes"]], "Information on the ode module": [[233, "module-sympy.solvers.ode.ode"]], "PDE": [[234, "pde"]], "Hint Methods": [[234, "hint-methods"]], "Information on the pde module": [[234, "module-sympy.solvers.pde"]], "Algebraic equations": [[235, "algebraic-equations"]], "Ordinary Differential equations (ODEs)": [[235, "ordinary-differential-equations-odes"], [236, "ordinary-differential-equations-odes"]], "Partial Differential Equations (PDEs)": [[235, "partial-differential-equations-pdes"], [236, "partial-differential-equations-pdes"]], "Deutils (Utilities for solving ODE\u2019s and PDE\u2019s)": [[235, "deutils-utilities-for-solving-ode-s-and-pde-s"]], "Recurrence Equations": [[235, "module-sympy.solvers.recurr"]], "Systems of Polynomial Equations": [[235, "systems-of-polynomial-equations"]], "Diophantine Equations (DEs)": [[235, "diophantine-equations-des"], [236, "diophantine-equations-des"]], "Inequalities": [[235, "inequalities"], [236, "inequalities"]], "Solveset": [[236, "solveset"]], "What\u2019s wrong with solve():": [[236, "what-s-wrong-with-solve"]], "Why Solveset?": [[236, "why-solveset"]], "Why do we use Sets as an output type?": [[236, "why-do-we-use-sets-as-an-output-type"]], "Input API of solveset": [[236, "input-api-of-solveset"]], "What is this domain argument about?": [[236, "what-is-this-domain-argument-about"]], "What are the general methods employed by solveset to solve an equation?": [[236, "what-are-the-general-methods-employed-by-solveset-to-solve-an-equation"]], "How do we manipulate and return an infinite solution?": [[236, "how-do-we-manipulate-and-return-an-infinite-solution"]], "How does solveset ensure that it is not returning any wrong solution?": [[236, "how-does-solveset-ensure-that-it-is-not-returning-any-wrong-solution"]], "Search based solver and step-by-step solution": [[236, "search-based-solver-and-step-by-step-solution"]], "How do we deal with cases where only some of the solutions are known?": [[236, "how-do-we-deal-with-cases-where-only-some-of-the-solutions-are-known"]], "What is the plan for solve and solveset?": [[236, "what-is-the-plan-for-solve-and-solveset"]], "How are symbolic parameters handled in solveset?": [[236, "how-are-symbolic-parameters-handled-in-solveset"]], "Solveset Module Reference": [[236, "solveset-module-reference"]], "transolve": [[236, "transolve"]], "Stats": [[237, "module-sympy.stats"]], "Random Variable Types": [[237, "random-variable-types"]], "Finite Types": [[237, "finite-types"]], "Discrete Types": [[237, "discrete-types"]], "Continuous Types": [[237, "continuous-types"]], "Joint Types": [[237, "joint-types"]], "Stochastic Processes": [[237, "stochastic-processes"]], "Matrix Distributions": [[237, "matrix-distributions"]], "Compound Distribution": [[237, "compound-distribution"]], "Interface": [[237, "interface"]], "N-dim array": [[238, "module-sympy.tensor.array"]], "Products and contractions": [[238, "products-and-contractions"]], "Diagonal operator": [[238, "diagonal-operator"]], "Derivatives by array": [[238, "derivatives-by-array"]], "Classes": [[238, "classes"]], "N-dim array expressions": [[239, "module-sympy.tensor.array.expressions"]], "Constructing array expressions from index-explicit forms": [[239, "constructing-array-expressions-from-index-explicit-forms"]], "Compatibility with matrices": [[239, "compatibility-with-matrices"]], "Tensor": [[240, "module-sympy.tensor"], [243, "module-sympy.tensor.tensor"]], "Methods": [[241, "module-sympy.tensor.index_methods"]], "Indexed Objects": [[242, "module-sympy.tensor.indexed"]], "Tensor Operators": [[244, "module-sympy.tensor.toperators"]], "Testing": [[245, "testing"]], "pytest": [[246, "module-sympy.testing.pytest"]], "Randomised Testing": [[247, "module-sympy.testing.randtest"]], "Run Tests": [[248, "module-sympy.testing.runtests"]], "Autowrap Module": [[249, "autowrap-module"]], "Implementation details": [[249, "implementation-details"]], "Codegen": [[250, "codegen"]], "Implementation Details": [[250, "implementation-details"]], "Routine": [[250, "routine"]], "Decorator": [[251, "module-sympy.utilities.decorator"]], "Enumerative": [[252, "module-sympy.utilities.enumerative"]], "Exceptions and Warnings": [[253, "module-sympy.utilities.exceptions"]], "Iterables": [[255, "module-sympy.utilities.iterables"]], "variations": [[255, "variations"]], "partitions": [[255, "partitions"]], "Memoization": [[257, "module-sympy.utilities.memoization"]], "PKGDATA": [[259, "module-sympy.utilities.pkgdata"]], "Source Code Inspection": [[260, "module-sympy.utilities.source"]], "Timing Utilities": [[261, "module-sympy.utilities.timeutils"]], "Essential Classes in sympy.vector (docstrings)": [[262, "essential-classes-in-sympy-vector-docstrings"]], "Vector API": [[263, "vector-api"]], "Orienter classes (docstrings)": [[264, "orienter-classes-docstrings"]], "Essential Functions in sympy.vector (docstrings)": [[265, "essential-functions-in-sympy-vector-docstrings"]], "Basic Implementation details": [[266, "basic-implementation-details"]], "Coordinate Systems and Vectors": [[266, "coordinate-systems-and-vectors"]], "SymPy operations on Vectors": [[266, "sympy-operations-on-vectors"]], "Dyadics": [[266, "dyadics"]], "More about Coordinate Systems": [[267, "more-about-coordinate-systems"]], "Locating new systems": [[267, "locating-new-systems"]], "Orienting new systems": [[267, "orienting-new-systems"]], "Using a method of CoordSys3D directly": [[267, "using-a-method-of-coordsys3d-directly"]], "Using Orienter(s) and the orient_new method": [[267, "using-orienter-s-and-the-orient-new-method"]], "Orienting AND Locating new systems": [[267, "orienting-and-locating-new-systems"]], "Transforming new system": [[267, "transforming-new-system"]], "Expression of quantities in different coordinate systems": [[267, "expression-of-quantities-in-different-coordinate-systems"]], "Vectors and Dyadics": [[267, "vectors-and-dyadics"]], "Coordinate Variables": [[267, "coordinate-variables"]], "Other expression-dependent methods": [[267, "other-expression-dependent-methods"]], "General examples of usage": [[268, "general-examples-of-usage"]], "Quadrilateral problem": [[268, "quadrilateral-problem"]], "The Problem": [[268, "the-problem"], [268, "id1"]], "Solution": [[268, "solution"], [268, "id2"]], "Third product rule for Del operator": [[268, "third-product-rule-for-del-operator"]], "See": [[268, "see"]], "Implementation in sympy.vector": [[269, "implementation-in-sympy-vector"]], "Scalar and vector fields": [[269, "scalar-and-vector-fields"]], "The Del operator": [[269, "the-del-operator"]], "Field operators and related functions": [[269, "field-operators-and-related-functions"]], "Directional Derivative": [[269, "directional-derivative"]], "Field operator in orthogonal curvilinear coordinate system": [[269, "field-operator-in-orthogonal-curvilinear-coordinate-system"]], "References for Vector": [[270, "references-for-vector"]], "Coordinate Systems": [[271, "coordinate-systems"]], "Applications of Vector Integrals": [[272, "applications-of-vector-integrals"]], "Calculation of Perimeter, Surface Area, and Volume": [[272, "calculation-of-perimeter-surface-area-and-volume"]], "Calculation of mass of a body": [[272, "calculation-of-mass-of-a-body"]], "Calculation of Flux": [[272, "calculation-of-flux"]], "Verifying Stoke\u2019s Theorem": [[272, "verifying-stoke-s-theorem"]], "Verifying Divergence Theorem": [[272, "verifying-divergence-theorem"]], "Topics": [[273, "topics"], [280, "topics"]], "Introductory Tutorial": [[282, "introductory-tutorial"], [287, "introductory-tutorial"]], "Basic Operations": [[283, "basic-operations"], [290, "basic-operations"]], "Quick Tip": [[283, null], [284, null], [286, null], [289, null], [290, null]], "Converting Strings to SymPy Expressions": [[283, "converting-strings-to-sympy-expressions"]], "Derivatives": [[284, "derivatives"]], "Series Expansion": [[284, "series-expansion"]], "Finite differences": [[284, "finite-differences"]], "SymPy Features": [[285, "sympy-features"]], "Equals signs": [[286, "equals-signs"]], "Two Final Notes: ^ and /": [[286, "two-final-notes-and"]], "Further Reading": [[286, "further-reading"]], "What is Symbolic Computation?": [[288, "what-is-symbolic-computation"]], "A More Interesting Example": [[288, "a-more-interesting-example"]], "The Power of Symbolic Computation": [[288, "the-power-of-symbolic-computation"]], "Why SymPy?": [[288, "why-sympy"]], "Advanced Expression Manipulation": [[289, "advanced-expression-manipulation"]], "Understanding Expression Trees": [[289, "understanding-expression-trees"]], "Recursing through an Expression Tree": [[289, "recursing-through-an-expression-tree"]], "args": [[289, "args"]], "Key Invariant": [[289, null]], "Walking the Tree": [[289, "walking-the-tree"]], "Prevent expression evaluation": [[289, "prevent-expression-evaluation"]], "Shape": [[290, "shape"]], "Accessing Rows and Columns": [[290, "accessing-rows-and-columns"]], "Deleting and Inserting Rows and Columns": [[290, "deleting-and-inserting-rows-and-columns"]], "Basic Methods": [[290, "basic-methods"]], "Matrix Constructors": [[290, "matrix-constructors"]], "Advanced Methods": [[290, "advanced-methods"]], "Determinant": [[290, "determinant"]], "RREF": [[290, "rref"]], "Nullspace": [[290, "nullspace"]], "Columnspace": [[290, "columnspace"]], "Eigenvalues, Eigenvectors, and Diagonalization": [[290, "eigenvalues-eigenvectors-and-diagonalization"]], "Possible Issues": [[290, "possible-issues"]], "Zero Testing": [[290, "zero-testing"]], "What\u2019s Next": [[291, "whats-next"]], "Preliminaries": [[292, "preliminaries"]], "Exercises": [[292, "exercises"]], "Printers": [[293, "printers"]], "Setting up Pretty Printing": [[293, "setting-up-pretty-printing"]], "Printing Functions": [[293, "printing-functions"]], "str": [[293, "str"]], "ASCII Pretty Printer": [[293, "ascii-pretty-printer"]], "Unicode Pretty Printer": [[293, "unicode-pretty-printer"]], "\\mathrm{\\LaTeX}": [[293, "mathrm-latex"]], "MathML": [[293, "mathml"]], "Dot": [[293, "dot"]], "Simplification": [[294, "simplification"]], "simplify": [[294, "simplify"]], "Polynomial/Rational Function Simplification": [[294, "polynomial-rational-function-simplification"]], "expand": [[294, "expand"]], "factor": [[294, "factor"]], "collect": [[294, "collect"]], "cancel": [[294, "cancel"]], "apart": [[294, "apart"]], "Trigonometric Simplification": [[294, "trigonometric-simplification"]], "trigsimp": [[294, "trigsimp"]], "expand_trig": [[294, "expand-trig"]], "Powers": [[294, "powers"]], "powsimp": [[294, "powsimp"]], "expand_power_exp / expand_power_base": [[294, "expand-power-exp-expand-power-base"]], "powdenest": [[294, "powdenest"]], "Exponentials and logarithms": [[294, "exponentials-and-logarithms"]], "expand_log": [[294, "expand-log"]], "logcombine": [[294, "logcombine"]], "Special Functions": [[294, "special-functions"]], "rewrite": [[294, "rewrite"]], "expand_func": [[294, "expand-func"]], "hyperexpand": [[294, "hyperexpand"]], "combsimp": [[294, "combsimp"]], "gammasimp": [[294, "gammasimp"]], "Example: Continued Fractions": [[294, "example-continued-fractions"]], "A Note about Equations": [[295, "a-note-about-equations"]], "Solving Equations Algebraically": [[295, "solving-equations-algebraically"]], "Solving Differential Equations": [[295, "solving-differential-equations"]]}, "indexentries": {"antiderivative": [[14, "term-Antiderivative"]], "assumptions": [[14, "term-Assumptions"]], "atom": [[14, "term-Atom"]], "automatic simplification": [[14, "term-Automatic-Simplification"]], "basic": [[14, "term-Basic"]], "boolean": [[14, "term-Boolean"]], "bound symbols": [[14, "term-Bound-symbols"]], "canonical form": [[14, "term-Canonical-Form"]], "canonicalize": [[14, "term-Canonicalize"]], "code generation": [[14, "term-Code-Generation"]], "core": [[14, "term-Core"]], "dummy": [[14, "term-Dummy"]], "equation": [[14, "term-Equation"]], "evaluate": [[14, "term-Evaluate"]], "expr": [[14, "term-Expr"]], "expression": [[14, "term-Expression"]], "expression tree": [[14, "term-Expression-Tree"]], "free symbols": [[14, "term-Free-symbols"]], "function": [[14, "term-Function"]], "function (class)": [[14, "term-Function-class"]], "immutable": [[14, "term-Immutable"]], "interactive": [[14, "term-Interactive"]], "kind": [[14, "term-Kind"]], "matrix": [[14, "term-Matrix"]], "number": [[14, "term-Number"]], "numeric": [[14, "term-Numeric"]], "polys": [[14, "term-Polys"]], "printing": [[14, "term-Printing"]], "relational": [[14, "term-Relational"]], "s": [[14, "term-S"]], "simplification": [[14, "term-Simplification"]], "solve": [[14, "term-Solve"]], "solvers": [[14, "term-Solvers"]], "structural equality": [[14, "term-Structural-Equality"]], "subexpression": [[14, "term-Subexpression"]], "substitution": [[14, "term-Substitution"]], "symbol": [[14, "term-Symbol"]], "symbolic": [[14, "term-Symbolic"]], "three-valued logic": [[14, "term-Three-valued-logic"]], "undefined function": [[14, "term-Undefined-Function"]], "unevaluated": [[14, "term-Unevaluated"]], "_eval_*": [[14, "term-_eval_"]], "args": [[14, "term-args"]], "evalf": [[14, "term-evalf"]], "func": [[14, "term-func"]], "is_*": [[14, "term-is_"]], "isympy": [[14, "term-isympy"]], "lambdify()": [[14, "term-lambdify"]], "lamda": [[14, "term-lamda"]], "mpmath": [[14, "term-mpmath"]], "oo": [[14, "term-oo"]], "sympify()": [[14, "term-sympify"]], "zoo": [[14, "term-zoo"]], "module": [[15, "module-sympy.simplify.simplify"], [37, "module-sympy"], [39, "module-sympy.abc"], [40, "module-sympy.algebras"], [41, "module-sympy.assumptions.ask"], [42, "module-sympy.assumptions.assume"], [43, "module-sympy.assumptions"], [44, "module-sympy.assumptions.predicates"], [45, "module-sympy.assumptions.refine"], [46, "module-sympy.calculus"], [46, "module-sympy.calculus.euler"], [46, "module-sympy.calculus.finite_diff"], [46, "module-sympy.calculus.singularities"], [46, "module-sympy.calculus.util"], [47, "module-sympy.categories"], [47, "module-sympy.categories.diagram_drawing"], [48, "module-sympy.codegen.algorithms"], [48, "module-sympy.codegen.approximations"], [48, "module-sympy.codegen.ast"], [48, "module-sympy.codegen.cfunctions"], [48, "module-sympy.codegen.cnodes"], [48, "module-sympy.codegen.cutils"], [48, "module-sympy.codegen.cxxnodes"], [48, "module-sympy.codegen.fnodes"], [48, "module-sympy.codegen.futils"], [48, "module-sympy.codegen.matrix_nodes"], [48, "module-sympy.codegen.pyutils"], [48, "module-sympy.codegen.rewriting"], [50, "module-sympy.combinatorics.galois"], [51, "module-sympy.combinatorics.graycode"], [52, "module-sympy.combinatorics.group_constructs"], [53, "module-sympy.combinatorics.group_numbers"], [55, "module-sympy.combinatorics.named_groups"], [56, "module-sympy.combinatorics.partitions"], [58, "module-sympy.combinatorics.perm_groups"], [59, "module-sympy.combinatorics.generators"], [59, "module-sympy.combinatorics.permutations"], [60, "module-sympy.combinatorics.polyhedron"], [61, "module-sympy.combinatorics.prufer"], [62, "module-sympy.combinatorics.subsets"], [63, "module-sympy.combinatorics.tensor_can"], [64, "module-sympy.combinatorics.testutil"], [65, "module-sympy.combinatorics.util"], [67, "module-sympy.core.add"], [67, "module-sympy.core.assumptions"], [67, "module-sympy.core.basic"], [67, "module-sympy.core.cache"], [67, "module-sympy.core.containers"], [67, "module-sympy.core.evalf"], [67, "module-sympy.core.expr"], [67, "module-sympy.core.exprtools"], [67, "module-sympy.core.function"], [67, "module-sympy.core.kind"], [67, "module-sympy.core.mod"], [67, "module-sympy.core.mul"], [67, "module-sympy.core.multidimensional"], [67, "module-sympy.core.numbers"], [67, "module-sympy.core.power"], [67, "module-sympy.core.random"], [67, "module-sympy.core.relational"], [67, "module-sympy.core.singleton"], [67, "module-sympy.core.symbol"], [67, "module-sympy.core.sympify"], [67, "module-sympy.core.traversal"], [68, "module-sympy.crypto.crypto"], [69, "module-sympy.diffgeom"], [70, "module-sympy.discrete"], [70, "module-sympy.discrete.convolutions"], [70, "module-sympy.discrete.transforms"], [74, "module-sympy.functions"], [75, "module-sympy.functions.special.bessel"], [75, "module-sympy.functions.special.beta_functions"], [75, "module-sympy.functions.special.elliptic_integrals"], [75, "module-sympy.functions.special.error_functions"], [75, "module-sympy.functions.special.gamma_functions"], [75, "module-sympy.functions.special.mathieu_functions"], [75, "module-sympy.functions.special.polynomials"], [75, "module-sympy.functions.special.singularity_functions"], [75, "module-sympy.functions.special.zeta_functions"], [76, "module-sympy.geometry.curve"], [77, "module-sympy.geometry.ellipse"], [78, "module-sympy.geometry.entity"], [80, "module-sympy.geometry.line"], [81, "module-sympy.geometry.plane"], [82, "module-sympy.geometry.point"], [83, "module-sympy.geometry.polygon"], [84, "module-sympy.geometry.util"], [87, "module-sympy.holonomic"], [92, "module-sympy.integrals.meijerint"], [92, "module-sympy.integrals.meijerint_doc"], [94, "module-sympy.integrals"], [94, "module-sympy.integrals.intpoly"], [94, "module-sympy.integrals.transforms"], [95, "module-sympy.interactive"], [95, "module-sympy.interactive.printing"], [95, "module-sympy.interactive.session"], [96, "module-sympy.liealgebras"], [97, "module-sympy.logic"], [97, "module-sympy.logic.inference"], [98, "module-sympy.matrices.common"], [100, "module-sympy.matrices.expressions"], [100, "module-sympy.matrices.expressions.blockmatrix"], [101, "module-sympy.matrices.immutable"], [102, "module-sympy.matrices"], [103, "module-sympy.matrices.matrices"], [105, "module-sympy.matrices.sparse"], [106, "module-sympy.matrices.sparsetools"], [107, "module-sympy.ntheory.bbp_pi"], [107, "module-sympy.ntheory.continued_fraction"], [107, "module-sympy.ntheory.digits"], [107, "module-sympy.ntheory.ecm"], [107, "module-sympy.ntheory.egyptian_fraction"], [107, "module-sympy.ntheory.factor_"], [107, "module-sympy.ntheory.generate"], [107, "module-sympy.ntheory.modular"], [107, "module-sympy.ntheory.multinomial"], [107, "module-sympy.ntheory.partitions_"], [107, "module-sympy.ntheory.primetest"], [107, "module-sympy.ntheory.qs"], [107, "module-sympy.ntheory.residue_ntheory"], [109, "module-sympy.parsing"], [109, "module-sympy.parsing.sym_expr"], [110, "module-sympy.physics.continuum_mechanics.beam"], [112, "module-sympy.physics.continuum_mechanics.cable"], [114, "module-sympy.physics.continuum_mechanics.truss"], [117, "module-sympy.physics.control"], [118, "module-sympy.physics.control.lti"], [119, "module-sympy.physics.hep.gamma_matrices"], [120, "module-sympy.physics.hydrogen"], [121, "module-sympy.physics.matrices"], [123, "module-sympy.physics.mechanics.body"], [126, "module-sympy.physics.mechanics.joint"], [126, "module-sympy.physics.mechanics.jointsmethod"], [127, "module-sympy.physics.mechanics.kane"], [127, "module-sympy.physics.mechanics.lagrange"], [128, "module-sympy.physics.mechanics.linearize"], [131, "module-sympy.physics.mechanics.system"], [142, "module-sympy.physics.mechanics"], [151, "module-sympy.physics.optics.gaussopt"], [153, "module-sympy.physics.optics.medium"], [154, "module-sympy.physics.optics.polarization"], [155, "module-sympy.physics.optics.utils"], [156, "module-sympy.physics.optics.waves"], [157, "module-sympy.physics.paulialgebra"], [158, "module-sympy.physics.qho_1d"], [159, "module-sympy.physics.quantum.anticommutator"], [160, "module-sympy.physics.quantum.cartesian"], [161, "module-sympy.physics.quantum.cg"], [162, "module-sympy.physics.quantum.circuitplot"], [163, "module-sympy.physics.quantum.commutator"], [164, "module-sympy.physics.quantum.constants"], [165, "module-sympy.physics.quantum.dagger"], [166, "module-sympy.physics.quantum.gate"], [167, "module-sympy.physics.quantum.grover"], [168, "module-sympy.physics.quantum.hilbert"], [170, "module-sympy.physics.quantum.innerproduct"], [171, "module-sympy.physics.quantum.operator"], [172, "module-sympy.physics.quantum.operatorset"], [173, "module-sympy.physics.quantum.piab"], [174, "module-sympy.physics.quantum.qapply"], [175, "module-sympy.physics.quantum.qft"], [176, "module-sympy.physics.quantum.qubit"], [177, "module-sympy.physics.quantum.represent"], [178, "module-sympy.physics.quantum.shor"], [179, "module-sympy.physics.quantum.spin"], [180, "module-sympy.physics.quantum.state"], [181, "module-sympy.physics.quantum.tensorproduct"], [182, "module-sympy.physics.secondquant"], [183, "module-sympy.physics.sho"], [184, "module-sympy.physics.units.dimensions"], [188, "module-sympy.physics.units.prefixes"], [189, "module-sympy.physics.units.quantities"], [189, "module-sympy.physics.units.util"], [190, "module-sympy.physics.units.unitsystem"], [196, "module-sympy.physics.vector.functions"], [196, "module-sympy.physics.vector.point"], [199, "module-sympy.physics.vector"], [202, "module-sympy.physics.wigner"], [203, "module-sympy.plotting.plot"], [203, "module-sympy.plotting.pygletplot"], [206, "module-sympy.polys.matrices._typing"], [206, "module-sympy.polys.matrices.ddm"], [206, "module-sympy.polys.matrices.dense"], [206, "module-sympy.polys.matrices.domainmatrix"], [206, "module-sympy.polys.matrices.sdm"], [210, "module-sympy.polys.polyconfig"], [210, "module-sympy.polys.polyoptions"], [212, "module-sympy.polys.numberfields.modules"], [212, "module-sympy.polys.numberfields.subfield"], [213, "module-sympy.polys"], [215, "module-sympy.polys.solvers"], [217, "module-sympy.printing.aesaracode"], [217, "module-sympy.printing.c"], [217, "module-sympy.printing.codeprinter"], [217, "module-sympy.printing.conventions"], [217, "module-sympy.printing.cxx"], [217, "module-sympy.printing.fortran"], [217, "module-sympy.printing.gtk"], [217, "module-sympy.printing.jscode"], [217, "module-sympy.printing.julia"], [217, "module-sympy.printing.lambdarepr"], [217, "module-sympy.printing.latex"], [217, "module-sympy.printing.maple"], [217, "module-sympy.printing.mathematica"], [217, "module-sympy.printing.mathml"], [217, "module-sympy.printing.octave"], [217, "module-sympy.printing.precedence"], [217, "module-sympy.printing.pretty"], [217, "module-sympy.printing.pretty.pretty"], [217, "module-sympy.printing.pretty.pretty_symbology"], [217, "module-sympy.printing.pretty.stringpict"], [217, "module-sympy.printing.preview"], [217, "module-sympy.printing.printer"], [217, "module-sympy.printing.pycode"], [217, "module-sympy.printing.python"], [217, "module-sympy.printing.rcode"], [217, "module-sympy.printing.repr"], [217, "module-sympy.printing.rust"], [217, "module-sympy.printing.smtlib"], [217, "module-sympy.printing.str"], [217, "module-sympy.printing.tree"], [225, "module-sympy.sets.conditionset"], [225, "module-sympy.sets.fancysets"], [225, "module-sympy.sets.powerset"], [225, "module-sympy.sets.sets"], [227, "module-sympy.simplify.hyperexpand_doc"], [229, "module-sympy.simplify.combsimp"], [229, "module-sympy.simplify.cse_main"], [229, "module-sympy.simplify.epathtools"], [229, "module-sympy.simplify.hyperexpand"], [229, "module-sympy.simplify.powsimp"], [229, "module-sympy.simplify.radsimp"], [229, "module-sympy.simplify.ratsimp"], [229, "module-sympy.simplify.sqrtdenest"], [229, "module-sympy.simplify.trigsimp"], [232, "module-sympy.solvers.inequalities"], [233, "module-sympy.solvers.ode"], [233, "module-sympy.solvers.ode.ode"], [234, "module-sympy.solvers.pde"], [235, "module-sympy.solvers"], [235, "module-sympy.solvers.recurr"], [236, "module-sympy.solvers.solveset"], [237, "module-sympy.stats"], [237, "module-sympy.stats.crv"], [237, "module-sympy.stats.crv_types"], [237, "module-sympy.stats.frv"], [237, "module-sympy.stats.frv_types"], [237, "module-sympy.stats.rv"], [238, "module-sympy.tensor.array"], [239, "module-sympy.tensor.array.expressions"], [240, "module-sympy.tensor"], [241, "module-sympy.tensor.index_methods"], [242, "module-sympy.tensor.indexed"], [243, "module-sympy.tensor.tensor"], [244, "module-sympy.tensor.toperators"], [245, "module-sympy.testing"], [246, "module-sympy.testing.pytest"], [247, "module-sympy.testing.randtest"], [248, "module-sympy.testing.runtests"], [249, "module-sympy.utilities.autowrap"], [250, "module-sympy.utilities.codegen"], [251, "module-sympy.utilities.decorator"], [252, "module-sympy.utilities.enumerative"], [253, "module-sympy.utilities.exceptions"], [254, "module-sympy.utilities"], [255, "module-sympy.utilities.iterables"], [256, "module-sympy.utilities.lambdify"], [257, "module-sympy.utilities.memoization"], [258, "module-sympy.utilities.misc"], [259, "module-sympy.utilities.pkgdata"], [260, "module-sympy.utilities.source"], [261, "module-sympy.utilities.timeutils"], [270, "module-sympy.vector"], [279, "module-sympy.physics"]], "sympy.simplify.simplify": [[15, "module-sympy.simplify.simplify"]], "sympy": [[37, "module-sympy"]], "sympy.abc": [[39, "module-sympy.abc"]], "quaternion (class in sympy.algebras)": [[40, "sympy.algebras.Quaternion"]], "add() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.add"]], "angle() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.angle"]], "arc_coplanar() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.arc_coplanar"]], "axis() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.axis"]], "exp() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.exp"]], "from_matrix() (sympy.algebras.quaternion class method)": [[40, "sympy.algebras.Quaternion.from_Matrix"]], "from_axis_angle() (sympy.algebras.quaternion class method)": [[40, "sympy.algebras.Quaternion.from_axis_angle"]], "from_euler() (sympy.algebras.quaternion class method)": [[40, "sympy.algebras.Quaternion.from_euler"]], "from_rotation_matrix() (sympy.algebras.quaternion class method)": [[40, "sympy.algebras.Quaternion.from_rotation_matrix"]], "index_vector() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.index_vector"]], "integrate() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.integrate"]], "inverse() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.inverse"]], "is_pure() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.is_pure"]], "is_zero_quaternion() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.is_zero_quaternion"]], "mensor() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.mensor"]], "mul() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.mul"]], "norm() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.norm"]], "normalize() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.normalize"]], "orthogonal() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.orthogonal"]], "parallel() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.parallel"]], "pow() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.pow"]], "pow_cos_sin() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.pow_cos_sin"]], "product_matrix_left (sympy.algebras.quaternion property)": [[40, "sympy.algebras.Quaternion.product_matrix_left"]], "product_matrix_right (sympy.algebras.quaternion property)": [[40, "sympy.algebras.Quaternion.product_matrix_right"]], "rotate_point() (sympy.algebras.quaternion static method)": [[40, "sympy.algebras.Quaternion.rotate_point"]], "scalar_part() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.scalar_part"]], "set_norm() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.set_norm"]], "sympy.algebras": [[40, "module-sympy.algebras"]], "to_matrix() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.to_Matrix"]], "to_axis_angle() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.to_axis_angle"]], "to_euler() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.to_euler"]], "to_rotation_matrix() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.to_rotation_matrix"]], "vector_coplanar() (sympy.algebras.quaternion class method)": [[40, "sympy.algebras.Quaternion.vector_coplanar"]], "vector_part() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.vector_part"]], "assumptionkeys (class in sympy.assumptions.ask)": [[41, "sympy.assumptions.ask.AssumptionKeys"]], "ask() (in module sympy.assumptions.ask)": [[41, "sympy.assumptions.ask.ask"]], "register_handler() (in module sympy.assumptions.ask)": [[41, "sympy.assumptions.ask.register_handler"]], "remove_handler() (in module sympy.assumptions.ask)": [[41, "sympy.assumptions.ask.remove_handler"]], "sympy.assumptions.ask": [[41, "module-sympy.assumptions.ask"]], "appliedpredicate (class in sympy.assumptions.assume)": [[42, "sympy.assumptions.assume.AppliedPredicate"]], "assumptionscontext (class in sympy.assumptions.assume)": [[42, "sympy.assumptions.assume.AssumptionsContext"]], "predicate (class in sympy.assumptions.assume)": [[42, "sympy.assumptions.assume.Predicate"]], "undefinedpredicate (class in sympy.assumptions.assume)": [[42, "sympy.assumptions.assume.UndefinedPredicate"]], "add() (sympy.assumptions.assume.assumptionscontext method)": [[42, "sympy.assumptions.assume.AssumptionsContext.add"]], "arg (sympy.assumptions.assume.appliedpredicate property)": [[42, "sympy.assumptions.assume.AppliedPredicate.arg"]], "arguments (sympy.assumptions.assume.appliedpredicate property)": [[42, "sympy.assumptions.assume.AppliedPredicate.arguments"]], "assuming() (in module sympy.assumptions.assume)": [[42, "sympy.assumptions.assume.assuming"]], "eval() (sympy.assumptions.assume.predicate method)": [[42, "sympy.assumptions.assume.Predicate.eval"]], "function (sympy.assumptions.assume.appliedpredicate property)": [[42, "sympy.assumptions.assume.AppliedPredicate.function"]], "handler (sympy.assumptions.assume.predicate attribute)": [[42, "sympy.assumptions.assume.Predicate.handler"]], "register() (sympy.assumptions.assume.predicate class method)": [[42, "sympy.assumptions.assume.Predicate.register"]], "register_many() (sympy.assumptions.assume.predicate class method)": [[42, "sympy.assumptions.assume.Predicate.register_many"]], "sympy.assumptions.assume": [[42, "module-sympy.assumptions.assume"]], "sympy.assumptions": [[43, "module-sympy.assumptions"]], "algebraichandler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.AlgebraicPredicate.AlgebraicHandler"]], "algebraicpredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.AlgebraicPredicate"]], "antihermitianpredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.AntihermitianPredicate"]], "commutativepredicate (class in sympy.assumptions.predicates.common)": [[44, "sympy.assumptions.predicates.common.CommutativePredicate"]], "complexelementspredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate"]], "complexpredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.ComplexPredicate"]], "compositepredicate (class in sympy.assumptions.predicates.ntheory)": [[44, "sympy.assumptions.predicates.ntheory.CompositePredicate"]], "diagonalpredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.DiagonalPredicate"]], "evenpredicate (class in sympy.assumptions.predicates.ntheory)": [[44, "sympy.assumptions.predicates.ntheory.EvenPredicate"]], "extendedrealpredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.ExtendedRealPredicate"]], "finitepredicate (class in sympy.assumptions.predicates.calculus)": [[44, "sympy.assumptions.predicates.calculus.FinitePredicate"]], "fullrankpredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.FullRankPredicate"]], "hermitianpredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.HermitianPredicate"]], "imaginarypredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.ImaginaryPredicate"]], "infinitepredicate (class in sympy.assumptions.predicates.calculus)": [[44, "sympy.assumptions.predicates.calculus.InfinitePredicate"]], "integerelementspredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate"]], "integerpredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.IntegerPredicate"]], "invertiblepredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.InvertiblePredicate"]], "irrationalpredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.IrrationalPredicate"]], "istruepredicate (class in sympy.assumptions.predicates.common)": [[44, "sympy.assumptions.predicates.common.IsTruePredicate"]], "lowertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate"]], "negativepredicate (class in sympy.assumptions.predicates.order)": [[44, "sympy.assumptions.predicates.order.NegativePredicate"]], "nonnegativepredicate (class in sympy.assumptions.predicates.order)": [[44, "sympy.assumptions.predicates.order.NonNegativePredicate"]], "nonpositivepredicate (class in sympy.assumptions.predicates.order)": [[44, "sympy.assumptions.predicates.order.NonPositivePredicate"]], "nonzeropredicate (class in sympy.assumptions.predicates.order)": [[44, "sympy.assumptions.predicates.order.NonZeroPredicate"]], "normalpredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.NormalPredicate"]], "oddpredicate (class in sympy.assumptions.predicates.ntheory)": [[44, "sympy.assumptions.predicates.ntheory.OddPredicate"]], "orthogonalpredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.OrthogonalPredicate"]], "positivedefinitepredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate"]], "positivepredicate (class in sympy.assumptions.predicates.order)": [[44, "sympy.assumptions.predicates.order.PositivePredicate"]], "primepredicate (class in sympy.assumptions.predicates.ntheory)": [[44, "sympy.assumptions.predicates.ntheory.PrimePredicate"]], "rationalpredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.RationalPredicate"]], "realelementspredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.RealElementsPredicate"]], "realpredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.RealPredicate"]], "singularpredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.SingularPredicate"]], "squarepredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.SquarePredicate"]], "symmetricpredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.SymmetricPredicate"]], "transcendentalpredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.TranscendentalPredicate"]], "triangularpredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.TriangularPredicate"]], "unittriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate"]], "unitarypredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.UnitaryPredicate"]], "uppertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate"]], "zeropredicate (class in sympy.assumptions.predicates.order)": [[44, "sympy.assumptions.predicates.order.ZeroPredicate"]], "handler (sympy.assumptions.predicates.calculus.finitepredicate attribute)": [[44, "sympy.assumptions.predicates.calculus.FinitePredicate.handler"]], "handler (sympy.assumptions.predicates.calculus.infinitepredicate attribute)": [[44, "sympy.assumptions.predicates.calculus.InfinitePredicate.handler"]], "handler (sympy.assumptions.predicates.common.commutativepredicate attribute)": [[44, "sympy.assumptions.predicates.common.CommutativePredicate.handler"]], "handler (sympy.assumptions.predicates.common.istruepredicate attribute)": [[44, "sympy.assumptions.predicates.common.IsTruePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.complexelementspredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.diagonalpredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.DiagonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.fullrankpredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.FullRankPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.integerelementspredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.invertiblepredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.InvertiblePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.lowertriangularpredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.normalpredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.NormalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.orthogonalpredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.OrthogonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.positivedefinitepredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.realelementspredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.RealElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.singularpredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.SingularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.squarepredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.SquarePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.symmetricpredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.SymmetricPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.triangularpredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.TriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unittriangularpredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unitarypredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.UnitaryPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.uppertriangularpredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.compositepredicate attribute)": [[44, "sympy.assumptions.predicates.ntheory.CompositePredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.evenpredicate attribute)": [[44, "sympy.assumptions.predicates.ntheory.EvenPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.oddpredicate attribute)": [[44, "sympy.assumptions.predicates.ntheory.OddPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.primepredicate attribute)": [[44, "sympy.assumptions.predicates.ntheory.PrimePredicate.handler"]], "handler (sympy.assumptions.predicates.order.negativepredicate attribute)": [[44, "sympy.assumptions.predicates.order.NegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonnegativepredicate attribute)": [[44, "sympy.assumptions.predicates.order.NonNegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonpositivepredicate attribute)": [[44, "sympy.assumptions.predicates.order.NonPositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonzeropredicate attribute)": [[44, "sympy.assumptions.predicates.order.NonZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.order.positivepredicate attribute)": [[44, "sympy.assumptions.predicates.order.PositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.zeropredicate attribute)": [[44, "sympy.assumptions.predicates.order.ZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.AlgebraicPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.antihermitianpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.AntihermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.complexpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.ComplexPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.extendedrealpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.ExtendedRealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.hermitianpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.HermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.imaginarypredicate attribute)": [[44, "sympy.assumptions.predicates.sets.ImaginaryPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.integerpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.IntegerPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.irrationalpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.IrrationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.rationalpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.RationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.realpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.RealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.transcendentalpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.TranscendentalPredicate.handler"]], "sympy.assumptions.predicates": [[44, "module-sympy.assumptions.predicates"]], "refine() (in module sympy.assumptions.refine)": [[45, "sympy.assumptions.refine.refine"]], "refine_pow() (in module sympy.assumptions.refine)": [[45, "sympy.assumptions.refine.refine_Pow"]], "refine_abs() (in module sympy.assumptions.refine)": [[45, "sympy.assumptions.refine.refine_abs"]], "refine_arg() (in module sympy.assumptions.refine)": [[45, "sympy.assumptions.refine.refine_arg"]], "refine_atan2() (in module sympy.assumptions.refine)": [[45, "sympy.assumptions.refine.refine_atan2"]], "refine_im() (in module sympy.assumptions.refine)": [[45, "sympy.assumptions.refine.refine_im"]], "refine_matrixelement() (in module sympy.assumptions.refine)": [[45, "sympy.assumptions.refine.refine_matrixelement"]], "refine_re() (in module sympy.assumptions.refine)": [[45, "sympy.assumptions.refine.refine_re"]], "refine_sign() (in module sympy.assumptions.refine)": [[45, "sympy.assumptions.refine.refine_sign"]], "sympy.assumptions.refine": [[45, "module-sympy.assumptions.refine"]], "apply_finite_diff() (in module sympy.calculus.finite_diff)": [[46, "sympy.calculus.finite_diff.apply_finite_diff"]], "continuous_domain() (in module sympy.calculus.util)": [[46, "sympy.calculus.util.continuous_domain"]], "differentiate_finite() (in module sympy.calculus.finite_diff)": [[46, "sympy.calculus.finite_diff.differentiate_finite"]], "euler_equations() (in module sympy.calculus.euler)": [[46, "sympy.calculus.euler.euler_equations"]], "finite_diff_weights() (in module sympy.calculus.finite_diff)": [[46, "sympy.calculus.finite_diff.finite_diff_weights"]], "function_range() (in module sympy.calculus.util)": [[46, "sympy.calculus.util.function_range"]], "is_convex() (in module sympy.calculus.util)": [[46, "sympy.calculus.util.is_convex"]], "is_decreasing() (in module sympy.calculus.singularities)": [[46, "sympy.calculus.singularities.is_decreasing"]], "is_increasing() (in module sympy.calculus.singularities)": [[46, "sympy.calculus.singularities.is_increasing"]], "is_monotonic() (in module sympy.calculus.singularities)": [[46, "sympy.calculus.singularities.is_monotonic"]], "is_strictly_decreasing() (in module sympy.calculus.singularities)": [[46, "sympy.calculus.singularities.is_strictly_decreasing"]], "is_strictly_increasing() (in module sympy.calculus.singularities)": [[46, "sympy.calculus.singularities.is_strictly_increasing"]], "lcim() (in module sympy.calculus.util)": [[46, "sympy.calculus.util.lcim"]], "maximum() (in module sympy.calculus.util)": [[46, "sympy.calculus.util.maximum"]], "minimum() (in module sympy.calculus.util)": [[46, "sympy.calculus.util.minimum"]], "monotonicity_helper() (in module sympy.calculus.singularities)": [[46, "sympy.calculus.singularities.monotonicity_helper"]], "not_empty_in() (in module sympy.calculus.util)": [[46, "sympy.calculus.util.not_empty_in"]], "periodicity() (in module sympy.calculus.util)": [[46, "sympy.calculus.util.periodicity"]], "singularities() (in module sympy.calculus.singularities)": [[46, "sympy.calculus.singularities.singularities"]], "stationary_points() (in module sympy.calculus.util)": [[46, "sympy.calculus.util.stationary_points"]], "sympy.calculus": [[46, "module-sympy.calculus"]], "sympy.calculus.euler": [[46, "module-sympy.calculus.euler"]], "sympy.calculus.finite_diff": [[46, "module-sympy.calculus.finite_diff"]], "sympy.calculus.singularities": [[46, "module-sympy.calculus.singularities"]], "sympy.calculus.util": [[46, "module-sympy.calculus.util"]], "arrowstringdescription (class in sympy.categories.diagram_drawing)": [[47, "sympy.categories.diagram_drawing.ArrowStringDescription"]], "category (class in sympy.categories)": [[47, "sympy.categories.Category"]], "compositemorphism (class in sympy.categories)": [[47, "sympy.categories.CompositeMorphism"]], "diagram (class in sympy.categories)": [[47, "sympy.categories.Diagram"]], "diagramgrid (class in sympy.categories.diagram_drawing)": [[47, "sympy.categories.diagram_drawing.DiagramGrid"]], "identitymorphism (class in sympy.categories)": [[47, "sympy.categories.IdentityMorphism"]], "morphism (class in sympy.categories)": [[47, "sympy.categories.Morphism"]], "namedmorphism (class in sympy.categories)": [[47, "sympy.categories.NamedMorphism"]], "object (class in sympy.categories)": [[47, "sympy.categories.Object"]], "xypicdiagramdrawer (class in sympy.categories.diagram_drawing)": [[47, "sympy.categories.diagram_drawing.XypicDiagramDrawer"]], "codomain (sympy.categories.compositemorphism property)": [[47, "sympy.categories.CompositeMorphism.codomain"]], "codomain (sympy.categories.morphism property)": [[47, "sympy.categories.Morphism.codomain"]], "commutative_diagrams (sympy.categories.category property)": [[47, "sympy.categories.Category.commutative_diagrams"]], "components (sympy.categories.compositemorphism property)": [[47, "sympy.categories.CompositeMorphism.components"]], "compose() (sympy.categories.morphism method)": [[47, "sympy.categories.Morphism.compose"]], "conclusions (sympy.categories.diagram property)": [[47, "sympy.categories.Diagram.conclusions"]], "domain (sympy.categories.compositemorphism property)": [[47, "sympy.categories.CompositeMorphism.domain"]], "domain (sympy.categories.morphism property)": [[47, "sympy.categories.Morphism.domain"]], "draw() (sympy.categories.diagram_drawing.xypicdiagramdrawer method)": [[47, "sympy.categories.diagram_drawing.XypicDiagramDrawer.draw"]], "flatten() (sympy.categories.compositemorphism method)": [[47, "sympy.categories.CompositeMorphism.flatten"]], "height (sympy.categories.diagram_drawing.diagramgrid property)": [[47, "sympy.categories.diagram_drawing.DiagramGrid.height"]], "hom() (sympy.categories.diagram method)": [[47, "sympy.categories.Diagram.hom"]], "is_subdiagram() (sympy.categories.diagram method)": [[47, "sympy.categories.Diagram.is_subdiagram"]], "morphisms (sympy.categories.diagram_drawing.diagramgrid property)": [[47, "sympy.categories.diagram_drawing.DiagramGrid.morphisms"]], "name (sympy.categories.category property)": [[47, "sympy.categories.Category.name"]], "name (sympy.categories.namedmorphism property)": [[47, "sympy.categories.NamedMorphism.name"]], "objects (sympy.categories.category property)": [[47, "sympy.categories.Category.objects"]], "objects (sympy.categories.diagram property)": [[47, "sympy.categories.Diagram.objects"]], "premises (sympy.categories.diagram property)": [[47, "sympy.categories.Diagram.premises"]], "preview_diagram() (in module sympy.categories.diagram_drawing)": [[47, "sympy.categories.diagram_drawing.preview_diagram"]], "subdiagram_from_objects() (sympy.categories.diagram method)": [[47, "sympy.categories.Diagram.subdiagram_from_objects"]], "sympy.categories": [[47, "module-sympy.categories"]], "sympy.categories.diagram_drawing": [[47, "module-sympy.categories.diagram_drawing"]], "width (sympy.categories.diagram_drawing.diagramgrid property)": [[47, "sympy.categories.diagram_drawing.DiagramGrid.width"]], "xypic_draw_diagram() (in module sympy.categories.diagram_drawing)": [[47, "sympy.categories.diagram_drawing.xypic_draw_diagram"]], "arrayconstructor (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.ArrayConstructor"]], "assignment (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Assignment"]], "assignmentbase (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.AssignmentBase"]], "attribute (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Attribute"]], "augmentedassignment (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.AugmentedAssignment"]], "breaktoken (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.BreakToken"]], "cbrt (class in sympy.codegen.cfunctions)": [[48, "sympy.codegen.cfunctions.Cbrt"]], "codeblock (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.CodeBlock"]], "commaoperator (class in sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.CommaOperator"]], "comment (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Comment"]], "complextype (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.ComplexType"]], "continuetoken (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.ContinueToken"]], "declaration (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Declaration"]], "do (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.Do"]], "element (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Element"]], "extent (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.Extent"]], "floatbasetype (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.FloatBaseType"]], "floattype (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.FloatType"]], "for (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.For"]], "fortranreturn (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.FortranReturn"]], "funcminusoneoptim (class in sympy.codegen.rewriting)": [[48, "sympy.codegen.rewriting.FuncMinusOneOptim"]], "functioncall (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.FunctionCall"]], "functiondefinition (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.FunctionDefinition"]], "functionprototype (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.FunctionPrototype"]], "goto (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.GoTo"]], "implieddoloop (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.ImpliedDoLoop"]], "intbasetype (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.IntBaseType"]], "label (class in sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.Label"]], "matrixsolve (class in sympy.codegen.matrix_nodes)": [[48, "sympy.codegen.matrix_nodes.MatrixSolve"]], "module (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.Module"]], "node (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Node"]], "nonetoken (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.NoneToken"]], "optimization (class in sympy.codegen.rewriting)": [[48, "sympy.codegen.rewriting.Optimization"]], "pointer (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Pointer"]], "postdecrement (class in sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.PostDecrement"]], "postincrement (class in sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.PostIncrement"]], "predecrement (class in sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.PreDecrement"]], "preincrement (class in sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.PreIncrement"]], "print (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Print"]], "program (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.Program"]], "quotedstring (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.QuotedString"]], "raise (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Raise"]], "replaceoptim (class in sympy.codegen.rewriting)": [[48, "sympy.codegen.rewriting.ReplaceOptim"]], "return (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Return"]], "runtimeerror_ (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.RuntimeError_"]], "scope (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Scope"]], "seriesapprox (class in sympy.codegen.approximations)": [[48, "sympy.codegen.approximations.SeriesApprox"]], "signedinttype (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.SignedIntType"]], "sqrt (class in sympy.codegen.cfunctions)": [[48, "sympy.codegen.cfunctions.Sqrt"]], "stream (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Stream"]], "string (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.String"]], "subroutine (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.Subroutine"]], "subroutinecall (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.SubroutineCall"]], "sumapprox (class in sympy.codegen.approximations)": [[48, "sympy.codegen.approximations.SumApprox"]], "token (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Token"]], "type (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Type"]], "unsignedinttype (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.UnsignedIntType"]], "variable (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Variable"]], "while (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.While"]], "alignof() (in module sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.alignof"]], "allocated() (in module sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.allocated"]], "array() (in module sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.array"]], "as_declaration() (sympy.codegen.ast.variable method)": [[48, "sympy.codegen.ast.Variable.as_Declaration"]], "attr_params() (sympy.codegen.ast.node method)": [[48, "sympy.codegen.ast.Node.attr_params"]], "aug_assign() (in module sympy.codegen.ast)": [[48, "sympy.codegen.ast.aug_assign"]], "bind_c() (in module sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.bind_C"]], "cast_check() (sympy.codegen.ast.type method)": [[48, "sympy.codegen.ast.Type.cast_check"]], "cast_nocheck (sympy.codegen.ast.floatbasetype attribute)": [[48, "sympy.codegen.ast.FloatBaseType.cast_nocheck"]], "cast_nocheck() (sympy.codegen.ast.floattype method)": [[48, "sympy.codegen.ast.FloatType.cast_nocheck"]], "cmplx (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.cmplx"]], "create_expand_pow_optimization() (in module sympy.codegen.rewriting)": [[48, "sympy.codegen.rewriting.create_expand_pow_optimization"]], "cse() (sympy.codegen.ast.codeblock method)": [[48, "sympy.codegen.ast.CodeBlock.cse"]], "decimal_dig (sympy.codegen.ast.floattype property)": [[48, "sympy.codegen.ast.FloatType.decimal_dig"]], "deduced() (sympy.codegen.ast.variable class method)": [[48, "sympy.codegen.ast.Variable.deduced"]], "dig (sympy.codegen.ast.floattype property)": [[48, "sympy.codegen.ast.FloatType.dig"]], "dimension() (in module sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.dimension"]], "dsign (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.dsign"]], "eps (sympy.codegen.ast.floattype property)": [[48, "sympy.codegen.ast.FloatType.eps"]], "exp2 (class in sympy.codegen.cfunctions)": [[48, "sympy.codegen.cfunctions.exp2"]], "expm1 (class in sympy.codegen.cfunctions)": [[48, "sympy.codegen.cfunctions.expm1"]], "fdiff() (sympy.codegen.cfunctions.cbrt method)": [[48, "sympy.codegen.cfunctions.Cbrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.sqrt method)": [[48, "sympy.codegen.cfunctions.Sqrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.exp2 method)": [[48, "sympy.codegen.cfunctions.exp2.fdiff"]], "fdiff() (sympy.codegen.cfunctions.expm1 method)": [[48, "sympy.codegen.cfunctions.expm1.fdiff"]], "fdiff() (sympy.codegen.cfunctions.fma method)": [[48, "sympy.codegen.cfunctions.fma.fdiff"]], "fdiff() (sympy.codegen.cfunctions.hypot method)": [[48, "sympy.codegen.cfunctions.hypot.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log10 method)": [[48, "sympy.codegen.cfunctions.log10.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log1p method)": [[48, "sympy.codegen.cfunctions.log1p.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log2 method)": [[48, "sympy.codegen.cfunctions.log2.fdiff"]], "fma (class in sympy.codegen.cfunctions)": [[48, "sympy.codegen.cfunctions.fma"]], "from_expr() (sympy.codegen.ast.type class method)": [[48, "sympy.codegen.ast.Type.from_expr"]], "goto (class in sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.goto"]], "hypot (class in sympy.codegen.cfunctions)": [[48, "sympy.codegen.cfunctions.hypot"]], "isign (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.isign"]], "kind (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.kind"]], "kwargs() (sympy.codegen.ast.token method)": [[48, "sympy.codegen.ast.Token.kwargs"]], "lbound() (in module sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.lbound"]], "literal_dp (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.literal_dp"]], "literal_sp (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.literal_sp"]], "log10 (class in sympy.codegen.cfunctions)": [[48, "sympy.codegen.cfunctions.log10"]], "log1p (class in sympy.codegen.cfunctions)": [[48, "sympy.codegen.cfunctions.log1p"]], "log2 (class in sympy.codegen.cfunctions)": [[48, "sympy.codegen.cfunctions.log2"]], "max (sympy.codegen.ast.floattype property)": [[48, "sympy.codegen.ast.FloatType.max"]], "max_exponent (sympy.codegen.ast.floattype property)": [[48, "sympy.codegen.ast.FloatType.max_exponent"]], "merge (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.merge"]], "min_exponent (sympy.codegen.ast.floattype property)": [[48, "sympy.codegen.ast.FloatType.min_exponent"]], "newtons_method() (in module sympy.codegen.algorithms)": [[48, "sympy.codegen.algorithms.newtons_method"]], "newtons_method_function() (in module sympy.codegen.algorithms)": [[48, "sympy.codegen.algorithms.newtons_method_function"]], "optimize() (in module sympy.codegen.rewriting)": [[48, "sympy.codegen.rewriting.optimize"]], "render_as_module() (in module sympy.codegen.futils)": [[48, "sympy.codegen.futils.render_as_module"]], "render_as_module() (in module sympy.codegen.pyutils)": [[48, "sympy.codegen.pyutils.render_as_module"]], "render_as_source_file() (in module sympy.codegen.cutils)": [[48, "sympy.codegen.cutils.render_as_source_file"]], "replace_in_add() (sympy.codegen.rewriting.funcminusoneoptim method)": [[48, "sympy.codegen.rewriting.FuncMinusOneOptim.replace_in_Add"]], "reshape() (in module sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.reshape"]], "shape() (in module sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.shape"]], "size() (in module sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.size"]], "sizeof() (in module sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.sizeof"]], "struct (class in sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.struct"]], "sympy.codegen.algorithms": [[48, "module-sympy.codegen.algorithms"]], "sympy.codegen.approximations": [[48, "module-sympy.codegen.approximations"]], "sympy.codegen.ast": [[48, "module-sympy.codegen.ast"]], "sympy.codegen.cfunctions": [[48, "module-sympy.codegen.cfunctions"]], "sympy.codegen.cnodes": [[48, "module-sympy.codegen.cnodes"]], "sympy.codegen.cutils": [[48, "module-sympy.codegen.cutils"]], "sympy.codegen.cxxnodes": [[48, "module-sympy.codegen.cxxnodes"]], "sympy.codegen.fnodes": [[48, "module-sympy.codegen.fnodes"]], "sympy.codegen.futils": [[48, "module-sympy.codegen.futils"]], "sympy.codegen.matrix_nodes": [[48, "module-sympy.codegen.matrix_nodes"]], "sympy.codegen.pyutils": [[48, "module-sympy.codegen.pyutils"]], "sympy.codegen.rewriting": [[48, "module-sympy.codegen.rewriting"]], "tiny (sympy.codegen.ast.floattype property)": [[48, "sympy.codegen.ast.FloatType.tiny"]], "topological_sort() (sympy.codegen.ast.codeblock class method)": [[48, "sympy.codegen.ast.CodeBlock.topological_sort"]], "union (class in sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.union"]], "use (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.use"]], "use_rename (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.use_rename"]], "using (class in sympy.codegen.cxxnodes)": [[48, "sympy.codegen.cxxnodes.using"]], "a4_in_s6() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.A4_in_S6"]], "a4xc2() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.A4xC2"]], "g18() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.G18"]], "g36m() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.G36m"]], "g36p() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.G36p"]], "g72() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.G72"]], "m20() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.M20"]], "pgl2f5() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.PGL2F5"]], "psl2f5() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.PSL2F5"]], "s1transitivesubgroups (class in sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.S1TransitiveSubgroups"]], "s2transitivesubgroups (class in sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.S2TransitiveSubgroups"]], "s3transitivesubgroups (class in sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.S3TransitiveSubgroups"]], "s3_in_s6() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.S3_in_S6"]], "s4transitivesubgroups (class in sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.S4TransitiveSubgroups"]], "s4m() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.S4m"]], "s4p() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.S4p"]], "s4xc2() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.S4xC2"]], "s5transitivesubgroups (class in sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.S5TransitiveSubgroups"]], "s6transitivesubgroups (class in sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.S6TransitiveSubgroups"]], "find_transitive_subgroups_of_s6() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.find_transitive_subgroups_of_S6"]], "four_group() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.four_group"]], "sympy.combinatorics.galois": [[50, "module-sympy.combinatorics.galois"]], "graycode (class in sympy.combinatorics.graycode)": [[51, "sympy.combinatorics.graycode.GrayCode"]], "bin_to_gray() (sympy.combinatorics.graycode method)": [[51, "sympy.combinatorics.graycode.bin_to_gray"]], "current (sympy.combinatorics.graycode.graycode property)": [[51, "sympy.combinatorics.graycode.GrayCode.current"]], "generate_gray() (sympy.combinatorics.graycode.graycode method)": [[51, "sympy.combinatorics.graycode.GrayCode.generate_gray"]], "get_subset_from_bitstring() (sympy.combinatorics.graycode method)": [[51, "sympy.combinatorics.graycode.get_subset_from_bitstring"]], "gray_to_bin() (sympy.combinatorics.graycode method)": [[51, "sympy.combinatorics.graycode.gray_to_bin"]], "graycode_subsets() (sympy.combinatorics.graycode method)": [[51, "sympy.combinatorics.graycode.graycode_subsets"]], "n (sympy.combinatorics.graycode.graycode property)": [[51, "sympy.combinatorics.graycode.GrayCode.n"]], "next() (sympy.combinatorics.graycode.graycode method)": [[51, "sympy.combinatorics.graycode.GrayCode.next"]], "random_bitstring() (sympy.combinatorics.graycode method)": [[51, "sympy.combinatorics.graycode.random_bitstring"]], "rank (sympy.combinatorics.graycode.graycode property)": [[51, "sympy.combinatorics.graycode.GrayCode.rank"]], "selections (sympy.combinatorics.graycode.graycode property)": [[51, "sympy.combinatorics.graycode.GrayCode.selections"]], "skip() (sympy.combinatorics.graycode.graycode method)": [[51, "sympy.combinatorics.graycode.GrayCode.skip"]], "sympy.combinatorics.graycode": [[51, "module-sympy.combinatorics.graycode"]], "unrank() (sympy.combinatorics.graycode.graycode class method)": [[51, "sympy.combinatorics.graycode.GrayCode.unrank"]], "directproduct() (in module sympy.combinatorics.group_constructs)": [[52, "sympy.combinatorics.group_constructs.DirectProduct"]], "sympy.combinatorics.group_constructs": [[52, "module-sympy.combinatorics.group_constructs"]], "is_abelian_number() (in module sympy.combinatorics.group_numbers)": [[53, "sympy.combinatorics.group_numbers.is_abelian_number"]], "is_cyclic_number() (in module sympy.combinatorics.group_numbers)": [[53, "sympy.combinatorics.group_numbers.is_cyclic_number"]], "is_nilpotent_number() (in module sympy.combinatorics.group_numbers)": [[53, "sympy.combinatorics.group_numbers.is_nilpotent_number"]], "sympy.combinatorics.group_numbers": [[53, "module-sympy.combinatorics.group_numbers"]], "abeliangroup() (in module sympy.combinatorics.named_groups)": [[55, "sympy.combinatorics.named_groups.AbelianGroup"]], "alternatinggroup() (in module sympy.combinatorics.named_groups)": [[55, "sympy.combinatorics.named_groups.AlternatingGroup"]], "cyclicgroup() (in module sympy.combinatorics.named_groups)": [[55, "sympy.combinatorics.named_groups.CyclicGroup"]], "dihedralgroup() (in module sympy.combinatorics.named_groups)": [[55, "sympy.combinatorics.named_groups.DihedralGroup"]], "symmetricgroup() (in module sympy.combinatorics.named_groups)": [[55, "sympy.combinatorics.named_groups.SymmetricGroup"]], "sympy.combinatorics.named_groups": [[55, "module-sympy.combinatorics.named_groups"]], "integerpartition (class in sympy.combinatorics.partitions)": [[56, "sympy.combinatorics.partitions.IntegerPartition"]], "partition (class in sympy.combinatorics.partitions)": [[56, "sympy.combinatorics.partitions.Partition"]], "rgs (sympy.combinatorics.partitions.partition property)": [[56, "sympy.combinatorics.partitions.Partition.RGS"]], "rgs_enum() (in module sympy.combinatorics.partitions)": [[56, "sympy.combinatorics.partitions.RGS_enum"]], "rgs_generalized() (in module sympy.combinatorics.partitions)": [[56, "sympy.combinatorics.partitions.RGS_generalized"]], "rgs_rank() (in module sympy.combinatorics.partitions)": [[56, "sympy.combinatorics.partitions.RGS_rank"]], "rgs_unrank() (in module sympy.combinatorics.partitions)": [[56, "sympy.combinatorics.partitions.RGS_unrank"]], "as_dict() (sympy.combinatorics.partitions.integerpartition method)": [[56, "sympy.combinatorics.partitions.IntegerPartition.as_dict"]], "as_ferrers() (sympy.combinatorics.partitions.integerpartition method)": [[56, "sympy.combinatorics.partitions.IntegerPartition.as_ferrers"]], "conjugate (sympy.combinatorics.partitions.integerpartition property)": [[56, "sympy.combinatorics.partitions.IntegerPartition.conjugate"]], "from_rgs() (sympy.combinatorics.partitions.partition class method)": [[56, "sympy.combinatorics.partitions.Partition.from_rgs"]], "next_lex() (sympy.combinatorics.partitions.integerpartition method)": [[56, "sympy.combinatorics.partitions.IntegerPartition.next_lex"]], "partition (sympy.combinatorics.partitions.partition property)": [[56, "sympy.combinatorics.partitions.Partition.partition"]], "prev_lex() (sympy.combinatorics.partitions.integerpartition method)": [[56, "sympy.combinatorics.partitions.IntegerPartition.prev_lex"]], "random_integer_partition() (in module sympy.combinatorics.partitions)": [[56, "sympy.combinatorics.partitions.random_integer_partition"]], "rank (sympy.combinatorics.partitions.partition property)": [[56, "sympy.combinatorics.partitions.Partition.rank"]], "sort_key() (sympy.combinatorics.partitions.partition method)": [[56, "sympy.combinatorics.partitions.Partition.sort_key"]], "sympy.combinatorics.partitions": [[56, "module-sympy.combinatorics.partitions"]], "permutationgroup (class in sympy.combinatorics.perm_groups)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup"]], "__contains__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.__contains__"]], "__mul__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.__mul__"]], "__new__() (sympy.combinatorics.perm_groups.permutationgroup static method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.__new__"]], "__weakref__ (sympy.combinatorics.perm_groups.permutationgroup attribute)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.__weakref__"]], "_coset_representative() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._coset_representative"]], "_distinct_primes_lemma() (sympy.combinatorics.perm_groups.permutationgroup class method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._distinct_primes_lemma"]], "_elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._elements"]], "_eval_is_alt_sym_monte_carlo() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_monte_carlo"]], "_eval_is_alt_sym_naive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_naive"]], "_p_elements_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._p_elements_group"]], "_random_pr_init() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._random_pr_init"]], "_sylow_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._sylow_alt_sym"]], "_union_find_merge() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge"]], "_union_find_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep"]], "_verify() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._verify"]], "abelian_invariants() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.abelian_invariants"]], "base (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.base"]], "baseswap() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.baseswap"]], "basic_orbits (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits"]], "basic_stabilizers (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers"]], "basic_transversals (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals"]], "center() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.center"]], "centralizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.centralizer"]], "commutator() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.commutator"]], "composition_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.composition_series"]], "conjugacy_class() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_class"]], "conjugacy_classes() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_classes"]], "contains() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.contains"]], "coset_factor() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.coset_factor"]], "coset_rank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.coset_rank"]], "coset_table() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.coset_table"]], "coset_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.coset_transversal"]], "coset_unrank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.coset_unrank"]], "degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.degree"]], "derived_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.derived_series"]], "derived_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup"]], "elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.elements"]], "equals() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.equals"]], "generate() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.generate"]], "generate_dimino() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.generate_dimino"]], "generate_schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.generate_schreier_sims"]], "generator_product() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.generator_product"]], "generators (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.generators"]], "identity (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.identity"]], "index() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.index"]], "is_abelian (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_abelian"]], "is_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym"]], "is_alternating (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_alternating"]], "is_cyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_cyclic"]], "is_dihedral (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_dihedral"]], "is_elementary() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_elementary"]], "is_nilpotent (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_nilpotent"]], "is_normal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_normal"]], "is_perfect (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_perfect"]], "is_polycyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_polycyclic"]], "is_primitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_primitive"]], "is_solvable (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_solvable"]], "is_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_subgroup"]], "is_symmetric (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_symmetric"]], "is_transitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_transitive"]], "is_trivial (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_trivial"]], "lower_central_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.lower_central_series"]], "make_perm() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.make_perm"]], "max_div (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.max_div"]], "minimal_block() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"]], "minimal_blocks() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_blocks"]], "normal_closure() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.normal_closure"]], "orbit() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.orbit"]], "orbit_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_rep"]], "orbit_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_transversal"]], "orbits() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.orbits"]], "order() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.order"]], "pointwise_stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.pointwise_stabilizer"]], "polycyclic_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.polycyclic_group"]], "presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.presentation"]], "random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.random"]], "random_pr() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.random_pr"]], "random_stab() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.random_stab"]], "schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims"]], "schreier_sims_incremental() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental"]], "schreier_sims_random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random"]], "schreier_vector() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_vector"]], "stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.stabilizer"]], "strong_gens (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens"]], "strong_presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.strong_presentation"]], "subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup"]], "subgroup_search() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup_search"]], "sylow_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.sylow_subgroup"]], "sympy.combinatorics.perm_groups": [[58, "module-sympy.combinatorics.perm_groups"]], "transitivity_degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.transitivity_degree"]], "cycle (class in sympy.combinatorics.permutations)": [[59, "sympy.combinatorics.permutations.Cycle"]], "permutation (class in sympy.combinatorics.permutations)": [[59, "sympy.combinatorics.permutations.Permutation"]], "_af_parity() (in module sympy.combinatorics.permutations)": [[59, "sympy.combinatorics.permutations._af_parity"]], "alternating() (sympy.combinatorics.generators method)": [[59, "sympy.combinatorics.generators.alternating"]], "apply() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.apply"]], "array_form (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.array_form"]], "ascents() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.ascents"]], "atoms() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.atoms"]], "cardinality (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.cardinality"]], "commutator() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.commutator"]], "commutes_with() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.commutes_with"]], "cycle_structure (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.cycle_structure"]], "cycles (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.cycles"]], "cyclic() (sympy.combinatorics.generators method)": [[59, "sympy.combinatorics.generators.cyclic"]], "cyclic_form (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.cyclic_form"]], "descents() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.descents"]], "dihedral() (sympy.combinatorics.generators method)": [[59, "sympy.combinatorics.generators.dihedral"]], "from_inversion_vector() (sympy.combinatorics.permutations.permutation class method)": [[59, "sympy.combinatorics.permutations.Permutation.from_inversion_vector"]], "from_sequence() (sympy.combinatorics.permutations.permutation class method)": [[59, "sympy.combinatorics.permutations.Permutation.from_sequence"]], "full_cyclic_form (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.full_cyclic_form"]], "get_adjacency_distance() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.get_adjacency_distance"]], "get_adjacency_matrix() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix"]], "get_positional_distance() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.get_positional_distance"]], "get_precedence_distance() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.get_precedence_distance"]], "get_precedence_matrix() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"]], "index() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.index"]], "inversion_vector() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.inversion_vector"]], "inversions() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.inversions"]], "is_empty (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.is_Empty"]], "is_identity (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.is_Identity"]], "is_singleton (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.is_Singleton"]], "is_even (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.is_even"]], "is_odd (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.is_odd"]], "josephus() (sympy.combinatorics.permutations.permutation class method)": [[59, "sympy.combinatorics.permutations.Permutation.josephus"]], "length() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.length"]], "list() (sympy.combinatorics.permutations.cycle method)": [[59, "sympy.combinatorics.permutations.Cycle.list"]], "list() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.list"]], "max() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.max"]], "min() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.min"]], "mul_inv() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.mul_inv"]], "next_lex() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.next_lex"]], "next_nonlex() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.next_nonlex"]], "next_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.next_trotterjohnson"]], "order() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.order"]], "parity() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.parity"]], "random() (sympy.combinatorics.permutations.permutation class method)": [[59, "sympy.combinatorics.permutations.Permutation.random"]], "rank() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.rank"]], "rank_nonlex() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.rank_nonlex"]], "rank_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.rank_trotterjohnson"]], "resize() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.resize"]], "rmul() (sympy.combinatorics.permutations.permutation static method)": [[59, "sympy.combinatorics.permutations.Permutation.rmul"]], "rmul_with_af() (sympy.combinatorics.permutations.permutation class method)": [[59, "sympy.combinatorics.permutations.Permutation.rmul_with_af"]], "runs() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.runs"]], "signature() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.signature"]], "size (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.size"]], "support() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.support"]], "symmetric() (sympy.combinatorics.generators method)": [[59, "sympy.combinatorics.generators.symmetric"]], "sympy.combinatorics.generators": [[59, "module-sympy.combinatorics.generators"]], "sympy.combinatorics.permutations": [[59, "module-sympy.combinatorics.permutations"]], "transpositions() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.transpositions"]], "unrank_lex() (sympy.combinatorics.permutations.permutation class method)": [[59, "sympy.combinatorics.permutations.Permutation.unrank_lex"]], "unrank_nonlex() (sympy.combinatorics.permutations.permutation class method)": [[59, "sympy.combinatorics.permutations.Permutation.unrank_nonlex"]], "unrank_trotterjohnson() (sympy.combinatorics.permutations.permutation class method)": [[59, "sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson"]], "polyhedron (class in sympy.combinatorics.polyhedron)": [[60, "sympy.combinatorics.polyhedron.Polyhedron"]], "array_form (sympy.combinatorics.polyhedron.polyhedron property)": [[60, "sympy.combinatorics.polyhedron.Polyhedron.array_form"]], "corners (sympy.combinatorics.polyhedron.polyhedron property)": [[60, "sympy.combinatorics.polyhedron.Polyhedron.corners"]], "cyclic_form (sympy.combinatorics.polyhedron.polyhedron property)": [[60, "sympy.combinatorics.polyhedron.Polyhedron.cyclic_form"]], "edges (sympy.combinatorics.polyhedron.polyhedron property)": [[60, "sympy.combinatorics.polyhedron.Polyhedron.edges"]], "faces (sympy.combinatorics.polyhedron.polyhedron property)": [[60, "sympy.combinatorics.polyhedron.Polyhedron.faces"]], "pgroup (sympy.combinatorics.polyhedron.polyhedron property)": [[60, "sympy.combinatorics.polyhedron.Polyhedron.pgroup"]], "reset() (sympy.combinatorics.polyhedron.polyhedron method)": [[60, "sympy.combinatorics.polyhedron.Polyhedron.reset"]], "rotate() (sympy.combinatorics.polyhedron.polyhedron method)": [[60, "sympy.combinatorics.polyhedron.Polyhedron.rotate"]], "size (sympy.combinatorics.polyhedron.polyhedron property)": [[60, "sympy.combinatorics.polyhedron.Polyhedron.size"]], "sympy.combinatorics.polyhedron": [[60, "module-sympy.combinatorics.polyhedron"]], "vertices (sympy.combinatorics.polyhedron.polyhedron property)": [[60, "sympy.combinatorics.polyhedron.Polyhedron.vertices"]], "prufer (class in sympy.combinatorics.prufer)": [[61, "sympy.combinatorics.prufer.Prufer"]], "edges() (sympy.combinatorics.prufer.prufer static method)": [[61, "sympy.combinatorics.prufer.Prufer.edges"]], "next() (sympy.combinatorics.prufer.prufer method)": [[61, "sympy.combinatorics.prufer.Prufer.next"]], "nodes (sympy.combinatorics.prufer.prufer property)": [[61, "sympy.combinatorics.prufer.Prufer.nodes"]], "prev() (sympy.combinatorics.prufer.prufer method)": [[61, "sympy.combinatorics.prufer.Prufer.prev"]], "prufer_rank() (sympy.combinatorics.prufer.prufer method)": [[61, "sympy.combinatorics.prufer.Prufer.prufer_rank"]], "prufer_repr (sympy.combinatorics.prufer.prufer property)": [[61, "sympy.combinatorics.prufer.Prufer.prufer_repr"]], "rank (sympy.combinatorics.prufer.prufer property)": [[61, "sympy.combinatorics.prufer.Prufer.rank"]], "size (sympy.combinatorics.prufer.prufer property)": [[61, "sympy.combinatorics.prufer.Prufer.size"]], "sympy.combinatorics.prufer": [[61, "module-sympy.combinatorics.prufer"]], "to_prufer() (sympy.combinatorics.prufer.prufer static method)": [[61, "sympy.combinatorics.prufer.Prufer.to_prufer"]], "to_tree() (sympy.combinatorics.prufer.prufer static method)": [[61, "sympy.combinatorics.prufer.Prufer.to_tree"]], "tree_repr (sympy.combinatorics.prufer.prufer property)": [[61, "sympy.combinatorics.prufer.Prufer.tree_repr"]], "unrank() (sympy.combinatorics.prufer.prufer class method)": [[61, "sympy.combinatorics.prufer.Prufer.unrank"]], "subset (class in sympy.combinatorics.subsets)": [[62, "sympy.combinatorics.subsets.Subset"]], "bitlist_from_subset() (sympy.combinatorics.subsets.subset class method)": [[62, "sympy.combinatorics.subsets.Subset.bitlist_from_subset"]], "cardinality (sympy.combinatorics.subsets.subset property)": [[62, "sympy.combinatorics.subsets.Subset.cardinality"]], "iterate_binary() (sympy.combinatorics.subsets.subset method)": [[62, "sympy.combinatorics.subsets.Subset.iterate_binary"]], "iterate_graycode() (sympy.combinatorics.subsets.subset method)": [[62, "sympy.combinatorics.subsets.Subset.iterate_graycode"]], "ksubsets() (sympy.combinatorics.subsets method)": [[62, "sympy.combinatorics.subsets.ksubsets"]], "next_binary() (sympy.combinatorics.subsets.subset method)": [[62, "sympy.combinatorics.subsets.Subset.next_binary"]], "next_gray() (sympy.combinatorics.subsets.subset method)": [[62, "sympy.combinatorics.subsets.Subset.next_gray"]], "next_lexicographic() (sympy.combinatorics.subsets.subset method)": [[62, "sympy.combinatorics.subsets.Subset.next_lexicographic"]], "prev_binary() (sympy.combinatorics.subsets.subset method)": [[62, "sympy.combinatorics.subsets.Subset.prev_binary"]], "prev_gray() (sympy.combinatorics.subsets.subset method)": [[62, "sympy.combinatorics.subsets.Subset.prev_gray"]], "prev_lexicographic() (sympy.combinatorics.subsets.subset method)": [[62, "sympy.combinatorics.subsets.Subset.prev_lexicographic"]], "rank_binary (sympy.combinatorics.subsets.subset property)": [[62, "sympy.combinatorics.subsets.Subset.rank_binary"]], "rank_gray (sympy.combinatorics.subsets.subset property)": [[62, "sympy.combinatorics.subsets.Subset.rank_gray"]], "rank_lexicographic (sympy.combinatorics.subsets.subset property)": [[62, "sympy.combinatorics.subsets.Subset.rank_lexicographic"]], "size (sympy.combinatorics.subsets.subset property)": [[62, "sympy.combinatorics.subsets.Subset.size"]], "subset (sympy.combinatorics.subsets.subset property)": [[62, "sympy.combinatorics.subsets.Subset.subset"]], "subset_from_bitlist() (sympy.combinatorics.subsets.subset class method)": [[62, "sympy.combinatorics.subsets.Subset.subset_from_bitlist"]], "subset_indices() (sympy.combinatorics.subsets.subset class method)": [[62, "sympy.combinatorics.subsets.Subset.subset_indices"]], "superset (sympy.combinatorics.subsets.subset property)": [[62, "sympy.combinatorics.subsets.Subset.superset"]], "superset_size (sympy.combinatorics.subsets.subset property)": [[62, "sympy.combinatorics.subsets.Subset.superset_size"]], "sympy.combinatorics.subsets": [[62, "module-sympy.combinatorics.subsets"]], "unrank_binary() (sympy.combinatorics.subsets.subset class method)": [[62, "sympy.combinatorics.subsets.Subset.unrank_binary"]], "unrank_gray() (sympy.combinatorics.subsets.subset class method)": [[62, "sympy.combinatorics.subsets.Subset.unrank_gray"]], "bsgs_direct_product() (in module sympy.combinatorics.tensor_can)": [[63, "sympy.combinatorics.tensor_can.bsgs_direct_product"]], "canonicalize() (in module sympy.combinatorics.tensor_can)": [[63, "sympy.combinatorics.tensor_can.canonicalize"]], "double_coset_can_rep() (in module sympy.combinatorics.tensor_can)": [[63, "sympy.combinatorics.tensor_can.double_coset_can_rep"]], "get_symmetric_group_sgs() (in module sympy.combinatorics.tensor_can)": [[63, "sympy.combinatorics.tensor_can.get_symmetric_group_sgs"]], "sympy.combinatorics.tensor_can": [[63, "module-sympy.combinatorics.tensor_can"]], "_cmp_perm_lists() (in module sympy.combinatorics.testutil)": [[64, "sympy.combinatorics.testutil._cmp_perm_lists"]], "_naive_list_centralizer() (in module sympy.combinatorics.testutil)": [[64, "sympy.combinatorics.testutil._naive_list_centralizer"]], "_verify_bsgs() (in module sympy.combinatorics.testutil)": [[64, "sympy.combinatorics.testutil._verify_bsgs"]], "_verify_centralizer() (in module sympy.combinatorics.testutil)": [[64, "sympy.combinatorics.testutil._verify_centralizer"]], "_verify_normal_closure() (in module sympy.combinatorics.testutil)": [[64, "sympy.combinatorics.testutil._verify_normal_closure"]], "sympy.combinatorics.testutil": [[64, "module-sympy.combinatorics.testutil"]], "_base_ordering() (in module sympy.combinatorics.util)": [[65, "sympy.combinatorics.util._base_ordering"]], "_check_cycles_alt_sym() (in module sympy.combinatorics.util)": [[65, "sympy.combinatorics.util._check_cycles_alt_sym"]], "_distribute_gens_by_base() (in module sympy.combinatorics.util)": [[65, "sympy.combinatorics.util._distribute_gens_by_base"]], "_handle_precomputed_bsgs() (in module sympy.combinatorics.util)": [[65, "sympy.combinatorics.util._handle_precomputed_bsgs"]], "_orbits_transversals_from_bsgs() (in module sympy.combinatorics.util)": [[65, "sympy.combinatorics.util._orbits_transversals_from_bsgs"]], "_remove_gens() (in module sympy.combinatorics.util)": [[65, "sympy.combinatorics.util._remove_gens"]], "_strip() (in module sympy.combinatorics.util)": [[65, "sympy.combinatorics.util._strip"]], "_strong_gens_from_distr() (in module sympy.combinatorics.util)": [[65, "sympy.combinatorics.util._strong_gens_from_distr"]], "sympy.combinatorics.util": [[65, "module-sympy.combinatorics.util"]], "exprwithintlimits (class in sympy.concrete.expr_with_intlimits)": [[66, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits"]], "product (class in sympy.concrete.products)": [[66, "sympy.concrete.products.Product"]], "sum (class in sympy.concrete.summations)": [[66, "sympy.concrete.summations.Sum"]], "change_index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[66, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.change_index"]], "euler_maclaurin() (sympy.concrete.summations.sum method)": [[66, "sympy.concrete.summations.Sum.euler_maclaurin"]], "eval_zeta_function() (sympy.concrete.summations.sum method)": [[66, "sympy.concrete.summations.Sum.eval_zeta_function"]], "gosper_normal() (in module sympy.concrete.gosper)": [[66, "sympy.concrete.gosper.gosper_normal"]], "gosper_sum() (in module sympy.concrete.gosper)": [[66, "sympy.concrete.gosper.gosper_sum"]], "gosper_term() (in module sympy.concrete.gosper)": [[66, "sympy.concrete.gosper.gosper_term"]], "has_empty_sequence (sympy.concrete.expr_with_intlimits.exprwithintlimits property)": [[66, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.has_empty_sequence"]], "index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[66, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.index"]], "is_absolutely_convergent() (sympy.concrete.summations.sum method)": [[66, "sympy.concrete.summations.Sum.is_absolutely_convergent"]], "is_convergent() (sympy.concrete.products.product method)": [[66, "sympy.concrete.products.Product.is_convergent"]], "is_convergent() (sympy.concrete.summations.sum method)": [[66, "sympy.concrete.summations.Sum.is_convergent"]], "product() (in module sympy.concrete.products)": [[66, "sympy.concrete.products.product"]], "reorder() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[66, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder"]], "reorder_limit() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[66, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder_limit"]], "reverse_order() (sympy.concrete.products.product method)": [[66, "sympy.concrete.products.Product.reverse_order"]], "reverse_order() (sympy.concrete.summations.sum method)": [[66, "sympy.concrete.summations.Sum.reverse_order"]], "summation() (in module sympy.concrete.summations)": [[66, "sympy.concrete.summations.summation"]], "add (class in sympy.core.add)": [[67, "sympy.core.add.Add"]], "algebraicnumber (class in sympy.core.numbers)": [[67, "sympy.core.numbers.AlgebraicNumber"]], "atom (class in sympy.core.basic)": [[67, "sympy.core.basic.Atom"]], "atomicexpr (class in sympy.core.expr)": [[67, "sympy.core.expr.AtomicExpr"]], "basic (class in sympy.core.basic)": [[67, "sympy.core.basic.Basic"]], "booleankind (in module sympy.core.kind)": [[67, "sympy.core.kind.BooleanKind"]], "catalan (class in sympy.core.numbers)": [[67, "sympy.core.numbers.Catalan"]], "complexinfinity (class in sympy.core.numbers)": [[67, "sympy.core.numbers.ComplexInfinity"]], "derivative (class in sympy.core.function)": [[67, "sympy.core.function.Derivative"]], "dict (class in sympy.core.containers)": [[67, "sympy.core.containers.Dict"]], "dummy (class in sympy.core.symbol)": [[67, "sympy.core.symbol.Dummy"]], "eq (in module sympy.core.relational)": [[67, "sympy.core.relational.Eq"]], "equality (class in sympy.core.relational)": [[67, "sympy.core.relational.Equality"]], "eulergamma (class in sympy.core.numbers)": [[67, "sympy.core.numbers.EulerGamma"]], "evalfmixin (class in sympy.core.evalf)": [[67, "sympy.core.evalf.EvalfMixin"]], "exp1 (class in sympy.core.numbers)": [[67, "sympy.core.numbers.Exp1"]], "expr (class in sympy.core.expr)": [[67, "sympy.core.expr.Expr"]], "float (class in sympy.core.numbers)": [[67, "sympy.core.numbers.Float"]], "function (class in sympy.core.function)": [[67, "sympy.core.function.Function"]], "functionclass (class in sympy.core.function)": [[67, "sympy.core.function.FunctionClass"]], "ge (in module sympy.core.relational)": [[67, "sympy.core.relational.Ge"]], "goldenratio (class in sympy.core.numbers)": [[67, "sympy.core.numbers.GoldenRatio"]], "greaterthan (class in sympy.core.relational)": [[67, "sympy.core.relational.GreaterThan"]], "gt (in module sympy.core.relational)": [[67, "sympy.core.relational.Gt"]], "half (class in sympy.core.numbers)": [[67, "sympy.core.numbers.Half"]], "imaginaryunit (class in sympy.core.numbers)": [[67, "sympy.core.numbers.ImaginaryUnit"]], "infinity (class in sympy.core.numbers)": [[67, "sympy.core.numbers.Infinity"]], "integer (class in sympy.core.numbers)": [[67, "sympy.core.numbers.Integer"]], "kind (class in sympy.core.kind)": [[67, "sympy.core.kind.Kind"]], "lambda (class in sympy.core.function)": [[67, "sympy.core.function.Lambda"]], "le (in module sympy.core.relational)": [[67, "sympy.core.relational.Le"]], "lessthan (class in sympy.core.relational)": [[67, "sympy.core.relational.LessThan"]], "lt (in module sympy.core.relational)": [[67, "sympy.core.relational.Lt"]], "mod (class in sympy.core.mod)": [[67, "sympy.core.mod.Mod"]], "mul (class in sympy.core.mul)": [[67, "sympy.core.mul.Mul"]], "n() (in module sympy.core.evalf)": [[67, "sympy.core.evalf.N"]], "nan (class in sympy.core.numbers)": [[67, "sympy.core.numbers.NaN"]], "ne (in module sympy.core.relational)": [[67, "sympy.core.relational.Ne"]], "negativeinfinity (class in sympy.core.numbers)": [[67, "sympy.core.numbers.NegativeInfinity"]], "negativeone (class in sympy.core.numbers)": [[67, "sympy.core.numbers.NegativeOne"]], "number (class in sympy.core.numbers)": [[67, "sympy.core.numbers.Number"]], "numberkind (in module sympy.core.kind)": [[67, "sympy.core.kind.NumberKind"]], "numbersymbol (class in sympy.core.numbers)": [[67, "sympy.core.numbers.NumberSymbol"]], "one (class in sympy.core.numbers)": [[67, "sympy.core.numbers.One"]], "pep 335": [[67, "index-0"], [67, "index-1"], [67, "index-2"], [67, "index-3"]], "pi (class in sympy.core.numbers)": [[67, "sympy.core.numbers.Pi"]], "poleerror (class in sympy.core.function)": [[67, "sympy.core.function.PoleError"]], "pow (class in sympy.core.power)": [[67, "sympy.core.power.Pow"]], "precisionexhausted (class in sympy.core.evalf)": [[67, "sympy.core.evalf.PrecisionExhausted"]], "python enhancement proposals": [[67, "index-0"], [67, "index-1"], [67, "index-2"], [67, "index-3"]], "rational (class in sympy.core.numbers)": [[67, "sympy.core.numbers.Rational"]], "realnumber (in module sympy.core.numbers)": [[67, "sympy.core.numbers.RealNumber"]], "rel (in module sympy.core.relational)": [[67, "sympy.core.relational.Rel"]], "relational (class in sympy.core.relational)": [[67, "sympy.core.relational.Relational"]], "singleton (class in sympy.core.singleton)": [[67, "sympy.core.singleton.Singleton"]], "singletonregistry (class in sympy.core.singleton)": [[67, "sympy.core.singleton.SingletonRegistry"]], "strictgreaterthan (class in sympy.core.relational)": [[67, "sympy.core.relational.StrictGreaterThan"]], "strictlessthan (class in sympy.core.relational)": [[67, "sympy.core.relational.StrictLessThan"]], "subs (class in sympy.core.function)": [[67, "sympy.core.function.Subs"]], "symbol (class in sympy.core.symbol)": [[67, "sympy.core.symbol.Symbol"]], "tribonacciconstant (class in sympy.core.numbers)": [[67, "sympy.core.numbers.TribonacciConstant"]], "tuple (class in sympy.core.containers)": [[67, "sympy.core.containers.Tuple"]], "tuplekind (class in sympy.core.containers)": [[67, "sympy.core.containers.TupleKind"]], "undefinedkind (in module sympy.core.kind)": [[67, "sympy.core.kind.UndefinedKind"]], "unequality (class in sympy.core.relational)": [[67, "sympy.core.relational.Unequality"]], "unevaluatedexpr (class in sympy.core.expr)": [[67, "sympy.core.expr.UnevaluatedExpr"]], "wild (class in sympy.core.symbol)": [[67, "sympy.core.symbol.Wild"]], "wildfunction (class in sympy.core.function)": [[67, "sympy.core.function.WildFunction"]], "zero (class in sympy.core.numbers)": [[67, "sympy.core.numbers.Zero"]], "__cacheit() (in module sympy.core.cache)": [[67, "sympy.core.cache.__cacheit"]], "__new__() (sympy.core.numbers.algebraicnumber static method)": [[67, "sympy.core.numbers.AlgebraicNumber.__new__"]], "_diff_wrt (sympy.core.function.derivative property)": [[67, "sympy.core.function.Derivative._diff_wrt"]], "_randint() (in module sympy.core.random)": [[67, "sympy.core.random._randint"]], "_randrange() (in module sympy.core.random)": [[67, "sympy.core.random._randrange"]], "_sort_variable_count() (sympy.core.function.derivative class method)": [[67, "sympy.core.function.Derivative._sort_variable_count"]], "algebraic": [[67, "term-algebraic"]], "antihermitian": [[67, "term-antihermitian"]], "apart() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.apart"]], "approximation() (sympy.core.numbers.numbersymbol method)": [[67, "sympy.core.numbers.NumberSymbol.approximation"]], "args (sympy.core.basic.basic property)": [[67, "sympy.core.basic.Basic.args"]], "args_cnc() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.args_cnc"]], "as_base_exp() (sympy.core.function.function method)": [[67, "sympy.core.function.Function.as_base_exp"]], "as_base_exp() (sympy.core.power.pow method)": [[67, "sympy.core.power.Pow.as_base_exp"]], "as_coeff_add() (sympy.core.add.add method)": [[67, "sympy.core.add.Add.as_coeff_Add"], [67, "sympy.core.add.Add.as_coeff_add"]], "as_coeff_add() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_coeff_Add"], [67, "sympy.core.expr.Expr.as_coeff_add"]], "as_coeff_add() (sympy.core.numbers.number method)": [[67, "sympy.core.numbers.Number.as_coeff_Add"]], "as_coeff_add() (sympy.core.numbers.rational method)": [[67, "sympy.core.numbers.Rational.as_coeff_Add"]], "as_coeff_mul() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_coeff_Mul"], [67, "sympy.core.expr.Expr.as_coeff_mul"]], "as_coeff_mul() (sympy.core.mul.mul method)": [[67, "sympy.core.mul.Mul.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.number method)": [[67, "sympy.core.numbers.Number.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.rational method)": [[67, "sympy.core.numbers.Rational.as_coeff_Mul"]], "as_coeff_exponent() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_coeff_exponent"]], "as_coefficient() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_coefficient"]], "as_coefficients_dict() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_coefficients_dict"]], "as_content_primitive() (sympy.core.add.add method)": [[67, "sympy.core.add.Add.as_content_primitive"]], "as_content_primitive() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.as_content_primitive"]], "as_content_primitive() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_content_primitive"]], "as_content_primitive() (sympy.core.mul.mul method)": [[67, "sympy.core.mul.Mul.as_content_primitive"]], "as_content_primitive() (sympy.core.numbers.rational method)": [[67, "sympy.core.numbers.Rational.as_content_primitive"]], "as_content_primitive() (sympy.core.power.pow method)": [[67, "sympy.core.power.Pow.as_content_primitive"]], "as_dummy() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.as_dummy"]], "as_expr() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_expr"]], "as_expr() (sympy.core.numbers.algebraicnumber method)": [[67, "sympy.core.numbers.AlgebraicNumber.as_expr"]], "as_finite_difference() (sympy.core.function.derivative method)": [[67, "sympy.core.function.Derivative.as_finite_difference"]], "as_independent() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_independent"]], "as_leading_term() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_leading_term"]], "as_numer_denom() (sympy.core.add.add method)": [[67, "sympy.core.add.Add.as_numer_denom"]], "as_numer_denom() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_numer_denom"]], "as_ordered_factors() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_ordered_factors"]], "as_ordered_factors() (sympy.core.mul.mul method)": [[67, "sympy.core.mul.Mul.as_ordered_factors"]], "as_ordered_terms() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_ordered_terms"]], "as_poly() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_poly"]], "as_poly() (sympy.core.numbers.algebraicnumber method)": [[67, "sympy.core.numbers.AlgebraicNumber.as_poly"]], "as_poly() (sympy.core.relational.equality method)": [[67, "sympy.core.relational.Equality.as_poly"]], "as_powers_dict() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_powers_dict"]], "as_real_imag() (sympy.core.add.add method)": [[67, "sympy.core.add.Add.as_real_imag"]], "as_real_imag() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_real_imag"]], "as_terms() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_terms"]], "as_two_terms() (sympy.core.add.add method)": [[67, "sympy.core.add.Add.as_two_terms"]], "as_two_terms() (sympy.core.mul.mul method)": [[67, "sympy.core.mul.Mul.as_two_terms"]], "aseries() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.aseries"]], "assumptions0 (sympy.core.basic.basic property)": [[67, "sympy.core.basic.Basic.assumptions0"]], "atoms() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.atoms"]], "bottom_up() (in module sympy.core.traversal)": [[67, "sympy.core.traversal.bottom_up"]], "bound_symbols (sympy.core.function.lambda property)": [[67, "sympy.core.function.Lambda.bound_symbols"]], "bound_symbols (sympy.core.function.subs property)": [[67, "sympy.core.function.Subs.bound_symbols"]], "cancel() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.cancel"]], "canonical (sympy.core.relational.relational property)": [[67, "sympy.core.relational.Relational.canonical"]], "canonical_variables (sympy.core.basic.basic property)": [[67, "sympy.core.basic.Basic.canonical_variables"]], "class_key() (sympy.core.basic.basic class method)": [[67, "sympy.core.basic.Basic.class_key"]], "coeff() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.coeff"]], "coeffs() (sympy.core.numbers.algebraicnumber method)": [[67, "sympy.core.numbers.AlgebraicNumber.coeffs"]], "cofactors() (sympy.core.numbers.number method)": [[67, "sympy.core.numbers.Number.cofactors"]], "collect() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.collect"]], "combsimp() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.combsimp"]], "commutative": [[67, "term-commutative"]], "compare() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.compare"]], "complex": [[67, "term-complex"]], "composite": [[67, "term-composite"]], "compute_leading_term() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.compute_leading_term"]], "conjugate() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.conjugate"]], "could_extract_minus_sign() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.could_extract_minus_sign"]], "count() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.count"]], "count_ops() (in module sympy.core.function)": [[67, "sympy.core.function.count_ops"]], "count_ops() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.count_ops"]], "default_sort_key() (in module sympy.core.sorting)": [[67, "sympy.core.sorting.default_sort_key"]], "diff() (in module sympy.core.function)": [[67, "sympy.core.function.diff"]], "doit() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.doit"]], "doit_numerically() (sympy.core.function.derivative method)": [[67, "sympy.core.function.Derivative.doit_numerically"]], "dummy_eq() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.dummy_eq"]], "equal_valued() (in module sympy.core.numbers)": [[67, "sympy.core.numbers.equal_valued"]], "equals() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.equals"]], "equals() (sympy.core.relational.relational method)": [[67, "sympy.core.relational.Relational.equals"]], "evalf() (sympy.core.evalf.evalfmixin method)": [[67, "sympy.core.evalf.EvalfMixin.evalf"]], "even": [[67, "term-even"]], "expand() (in module sympy.core.function)": [[67, "sympy.core.function.expand"]], "expand() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.expand"]], "expand_complex() (in module sympy.core.function)": [[67, "sympy.core.function.expand_complex"]], "expand_func() (in module sympy.core.function)": [[67, "sympy.core.function.expand_func"]], "expand_log() (in module sympy.core.function)": [[67, "sympy.core.function.expand_log"]], "expand_mul() (in module sympy.core.function)": [[67, "sympy.core.function.expand_mul"]], "expand_multinomial() (in module sympy.core.function)": [[67, "sympy.core.function.expand_multinomial"]], "expand_power_base() (in module sympy.core.function)": [[67, "sympy.core.function.expand_power_base"]], "expand_power_exp() (in module sympy.core.function)": [[67, "sympy.core.function.expand_power_exp"]], "expand_trig() (in module sympy.core.function)": [[67, "sympy.core.function.expand_trig"]], "expr (sympy.core.function.lambda property)": [[67, "sympy.core.function.Lambda.expr"]], "expr (sympy.core.function.subs property)": [[67, "sympy.core.function.Subs.expr"]], "expr_free_symbols (sympy.core.expr.expr property)": [[67, "sympy.core.expr.Expr.expr_free_symbols"]], "extended_negative": [[67, "term-extended_negative"]], "extended_nonnegative": [[67, "term-extended_nonnegative"]], "extended_nonpositive": [[67, "term-extended_nonpositive"]], "extended_nonzero": [[67, "term-extended_nonzero"]], "extended_positive": [[67, "term-extended_positive"]], "extended_real": [[67, "term-extended_real"]], "extract_additively() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.extract_additively"]], "extract_branch_factor() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.extract_branch_factor"]], "extract_leading_order() (sympy.core.add.add method)": [[67, "sympy.core.add.Add.extract_leading_order"]], "extract_multiplicatively() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.extract_multiplicatively"]], "factor() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.factor"]], "factor_terms() (in module sympy.core.exprtools)": [[67, "sympy.core.exprtools.factor_terms"]], "factors() (sympy.core.numbers.rational method)": [[67, "sympy.core.numbers.Rational.factors"]], "fdiff() (sympy.core.function.function method)": [[67, "sympy.core.function.Function.fdiff"]], "field_element() (sympy.core.numbers.algebraicnumber method)": [[67, "sympy.core.numbers.AlgebraicNumber.field_element"]], "find() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.find"]], "finite": [[67, "term-finite"]], "flatten() (sympy.core.add.add class method)": [[67, "sympy.core.add.Add.flatten"]], "flatten() (sympy.core.mul.mul class method)": [[67, "sympy.core.mul.Mul.flatten"]], "fourier_series() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.fourier_series"]], "fps() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.fps"]], "free_symbols (sympy.core.basic.basic property)": [[67, "sympy.core.basic.Basic.free_symbols"]], "fromiter() (sympy.core.basic.basic class method)": [[67, "sympy.core.basic.Basic.fromiter"]], "func (sympy.core.basic.basic property)": [[67, "sympy.core.basic.Basic.func"]], "gammasimp() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.gammasimp"]], "gcd() (sympy.core.numbers.number method)": [[67, "sympy.core.numbers.Number.gcd"]], "gcd_terms() (in module sympy.core.exprtools)": [[67, "sympy.core.exprtools.gcd_terms"]], "get() (sympy.core.containers.dict method)": [[67, "sympy.core.containers.Dict.get"]], "geto() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.getO"]], "getn() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.getn"]], "has() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.has"]], "has_free() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.has_free"]], "has_xfree() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.has_xfree"]], "hermitian": [[67, "term-hermitian"]], "igcd() (in module sympy.core.numbers)": [[67, "sympy.core.numbers.igcd"]], "ilcm() (in module sympy.core.numbers)": [[67, "sympy.core.numbers.ilcm"]], "imaginary": [[67, "term-imaginary"]], "index() (sympy.core.containers.tuple method)": [[67, "sympy.core.containers.Tuple.index"]], "infinite": [[67, "term-infinite"]], "integer": [[67, "term-integer"]], "integer_log() (in module sympy.core.power)": [[67, "sympy.core.power.integer_log"]], "integer_nthroot() (in module sympy.core.power)": [[67, "sympy.core.power.integer_nthroot"]], "integrate() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.integrate"]], "integrate() (sympy.core.relational.equality method)": [[67, "sympy.core.relational.Equality.integrate"]], "invert() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.invert"]], "irrational": [[67, "term-irrational"]], "is_algebraic_expr() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.is_algebraic_expr"]], "is_aliased (sympy.core.numbers.algebraicnumber property)": [[67, "sympy.core.numbers.AlgebraicNumber.is_aliased"]], "is_comparable (sympy.core.basic.basic property)": [[67, "sympy.core.basic.Basic.is_comparable"]], "is_constant() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.is_constant"]], "is_identity (sympy.core.function.lambda property)": [[67, "sympy.core.function.Lambda.is_identity"]], "is_meromorphic() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.is_meromorphic"]], "is_number (sympy.core.expr.expr property)": [[67, "sympy.core.expr.Expr.is_number"]], "is_polynomial() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.is_polynomial"]], "is_primitive_element (sympy.core.numbers.algebraicnumber property)": [[67, "sympy.core.numbers.AlgebraicNumber.is_primitive_element"]], "is_rational_function() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.is_rational_function"]], "is_singular() (sympy.core.function.function class method)": [[67, "sympy.core.function.Function.is_singular"]], "isqrt() (in module sympy.core.power)": [[67, "sympy.core.power.isqrt"]], "items() (sympy.core.containers.dict method)": [[67, "sympy.core.containers.Dict.items"]], "keys() (sympy.core.containers.dict method)": [[67, "sympy.core.containers.Dict.keys"]], "kind (sympy.core.containers.tuple property)": [[67, "sympy.core.containers.Tuple.kind"]], "lcm() (sympy.core.numbers.number method)": [[67, "sympy.core.numbers.Number.lcm"]], "leadterm() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.leadterm"]], "lhs (sympy.core.relational.relational property)": [[67, "sympy.core.relational.Relational.lhs"]], "limit() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.limit"]], "limit_denominator() (sympy.core.numbers.rational method)": [[67, "sympy.core.numbers.Rational.limit_denominator"]], "lseries() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.lseries"]], "match() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.match"]], "matches() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.matches"]], "minpoly_of_element() (sympy.core.numbers.algebraicnumber method)": [[67, "sympy.core.numbers.AlgebraicNumber.minpoly_of_element"]], "mod_inverse() (in module sympy.core.numbers)": [[67, "sympy.core.numbers.mod_inverse"]], "n() (sympy.core.evalf.evalfmixin method)": [[67, "sympy.core.evalf.EvalfMixin.n"]], "nargs (sympy.core.function.functionclass property)": [[67, "sympy.core.function.FunctionClass.nargs"]], "native_coeffs() (sympy.core.numbers.algebraicnumber method)": [[67, "sympy.core.numbers.AlgebraicNumber.native_coeffs"]], "negated (sympy.core.relational.relational property)": [[67, "sympy.core.relational.Relational.negated"]], "negative": [[67, "term-negative"]], "nfloat() (in module sympy.core.function)": [[67, "sympy.core.function.nfloat"]], "nonnegative": [[67, "term-nonnegative"]], "nonpositive": [[67, "term-nonpositive"]], "nonzero": [[67, "term-nonzero"]], "normal() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.normal"]], "nseries() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.nseries"]], "nsimplify() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.nsimplify"]], "odd": [[67, "term-odd"]], "ordered() (in module sympy.core.sorting)": [[67, "sympy.core.sorting.ordered"]], "point (sympy.core.function.subs property)": [[67, "sympy.core.function.Subs.point"]], "positive": [[67, "term-positive"]], "postorder_traversal() (in module sympy.core.traversal)": [[67, "sympy.core.traversal.postorder_traversal"]], "powsimp() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.powsimp"]], "preorder_traversal() (in module sympy.core.traversal)": [[67, "sympy.core.traversal.preorder_traversal"]], "prime": [[67, "term-prime"]], "primitive() (sympy.core.add.add method)": [[67, "sympy.core.add.Add.primitive"]], "primitive() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.primitive"]], "primitive_element() (sympy.core.numbers.algebraicnumber method)": [[67, "sympy.core.numbers.AlgebraicNumber.primitive_element"]], "prod() (in module sympy.core.mul)": [[67, "sympy.core.mul.prod"]], "radsimp() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.radsimp"]], "random_complex_number() (in module sympy.core.random)": [[67, "sympy.core.random.random_complex_number"]], "rational": [[67, "term-rational"]], "ratsimp() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.ratsimp"]], "rcall() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.rcall"]], "real": [[67, "term-real"]], "refine() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.refine"]], "removeo() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.removeO"]], "replace() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.replace"]], "reversed (sympy.core.relational.relational property)": [[67, "sympy.core.relational.Relational.reversed"]], "reversedsign (sympy.core.relational.relational property)": [[67, "sympy.core.relational.Relational.reversedsign"]], "rewrite() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.rewrite"]], "rhs (sympy.core.relational.relational property)": [[67, "sympy.core.relational.Relational.rhs"]], "round() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.round"]], "separate() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.separate"]], "series() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.series"]], "seterr() (in module sympy.core.numbers)": [[67, "sympy.core.numbers.seterr"]], "signature (sympy.core.function.lambda property)": [[67, "sympy.core.function.Lambda.signature"]], "simplify() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.simplify"]], "sort_key() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.sort_key"]], "strict (sympy.core.relational.relational property)": [[67, "sympy.core.relational.Relational.strict"]], "subs() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.subs"]], "symbols() (in module sympy.core.symbol)": [[67, "sympy.core.symbol.symbols"]], "sympify() (in module sympy.core.sympify)": [[67, "sympy.core.sympify.sympify"]], "sympy.core.add": [[67, "module-sympy.core.add"]], "sympy.core.assumptions": [[67, "module-sympy.core.assumptions"]], "sympy.core.basic": [[67, "module-sympy.core.basic"]], "sympy.core.cache": [[67, "module-sympy.core.cache"]], "sympy.core.containers": [[67, "module-sympy.core.containers"]], "sympy.core.evalf": [[67, "module-sympy.core.evalf"]], "sympy.core.expr": [[67, "module-sympy.core.expr"]], "sympy.core.exprtools": [[67, "module-sympy.core.exprtools"]], "sympy.core.function": [[67, "module-sympy.core.function"]], "sympy.core.kind": [[67, "module-sympy.core.kind"]], "sympy.core.mod": [[67, "module-sympy.core.mod"]], "sympy.core.mul": [[67, "module-sympy.core.mul"]], "sympy.core.multidimensional": [[67, "module-sympy.core.multidimensional"]], "sympy.core.numbers": [[67, "module-sympy.core.numbers"]], "sympy.core.power": [[67, "module-sympy.core.power"]], "sympy.core.random": [[67, "module-sympy.core.random"]], "sympy.core.relational": [[67, "module-sympy.core.relational"]], "sympy.core.singleton": [[67, "module-sympy.core.singleton"]], "sympy.core.symbol": [[67, "module-sympy.core.symbol"]], "sympy.core.sympify": [[67, "module-sympy.core.sympify"]], "sympy.core.traversal": [[67, "module-sympy.core.traversal"]], "taylor_term() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.taylor_term"]], "test_derivative_numerically() (in module sympy.core.random)": [[67, "sympy.core.random.test_derivative_numerically"]], "to_algebraic_integer() (sympy.core.numbers.algebraicnumber method)": [[67, "sympy.core.numbers.AlgebraicNumber.to_algebraic_integer"]], "to_primitive_element() (sympy.core.numbers.algebraicnumber method)": [[67, "sympy.core.numbers.AlgebraicNumber.to_primitive_element"]], "to_root() (sympy.core.numbers.algebraicnumber method)": [[67, "sympy.core.numbers.AlgebraicNumber.to_root"]], "together() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.together"]], "transcendental": [[67, "term-transcendental"]], "trigsimp() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.trigsimp"]], "tuple_count() (sympy.core.containers.tuple method)": [[67, "sympy.core.containers.Tuple.tuple_count"]], "use() (in module sympy.core.traversal)": [[67, "sympy.core.traversal.use"]], "values() (sympy.core.containers.dict method)": [[67, "sympy.core.containers.Dict.values"]], "var() (in module sympy.core.symbol)": [[67, "sympy.core.symbol.var"]], "variables (sympy.core.function.lambda property)": [[67, "sympy.core.function.Lambda.variables"]], "variables (sympy.core.function.subs property)": [[67, "sympy.core.function.Subs.variables"]], "vectorize (class in sympy.core.multidimensional)": [[67, "sympy.core.multidimensional.vectorize"]], "verify_numerically() (in module sympy.core.random)": [[67, "sympy.core.random.verify_numerically"]], "walk() (in module sympy.core.traversal)": [[67, "sympy.core.traversal.walk"]], "weak (sympy.core.relational.relational property)": [[67, "sympy.core.relational.Relational.weak"]], "xreplace() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.xreplace"]], "zero": [[67, "term-zero"]], "az() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.AZ"]], "bifid5_square() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.bifid5_square"]], "bifid6_square() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.bifid6_square"]], "check_and_join() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.check_and_join"]], "cycle_list() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.cycle_list"]], "decipher_affine() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_affine"]], "decipher_atbash() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_atbash"]], "decipher_bifid() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_bifid"]], "decipher_bifid5() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_bifid5"]], "decipher_bifid6() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_bifid6"]], "decipher_elgamal() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_elgamal"]], "decipher_gm() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_gm"]], "decipher_hill() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_hill"]], "decipher_kid_rsa() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_kid_rsa"]], "decipher_railfence() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_railfence"]], "decipher_rot13() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_rot13"]], "decipher_rsa() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_rsa"]], "decipher_shift() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_shift"]], "decipher_vigenere() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_vigenere"]], "decode_morse() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decode_morse"]], "dh_private_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.dh_private_key"]], "dh_public_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.dh_public_key"]], "dh_shared_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.dh_shared_key"]], "elgamal_private_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.elgamal_private_key"]], "elgamal_public_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.elgamal_public_key"]], "encipher_affine() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_affine"]], "encipher_atbash() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_atbash"]], "encipher_bifid() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_bifid"]], "encipher_bifid5() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_bifid5"]], "encipher_bifid6() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_bifid6"]], "encipher_elgamal() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_elgamal"]], "encipher_gm() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_gm"]], "encipher_hill() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_hill"]], "encipher_kid_rsa() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_kid_rsa"]], "encipher_railfence() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_railfence"]], "encipher_rot13() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_rot13"]], "encipher_rsa() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_rsa"]], "encipher_shift() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_shift"]], "encipher_substitution() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_substitution"]], "encipher_vigenere() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_vigenere"]], "encode_morse() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encode_morse"]], "gm_private_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.gm_private_key"]], "gm_public_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.gm_public_key"]], "kid_rsa_private_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.kid_rsa_private_key"]], "kid_rsa_public_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.kid_rsa_public_key"]], "lfsr_autocorrelation() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.lfsr_autocorrelation"]], "lfsr_connection_polynomial() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.lfsr_connection_polynomial"]], "lfsr_sequence() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.lfsr_sequence"]], "padded_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.padded_key"]], "rsa_private_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.rsa_private_key"]], "rsa_public_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.rsa_public_key"]], "sympy.crypto.crypto": [[68, "module-sympy.crypto.crypto"]], "basecovarderivativeop (class in sympy.diffgeom)": [[69, "sympy.diffgeom.BaseCovarDerivativeOp"]], "basescalarfield (class in sympy.diffgeom)": [[69, "sympy.diffgeom.BaseScalarField"]], "basevectorfield (class in sympy.diffgeom)": [[69, "sympy.diffgeom.BaseVectorField"]], "commutator (class in sympy.diffgeom)": [[69, "sympy.diffgeom.Commutator"]], "coordsystem (class in sympy.diffgeom)": [[69, "sympy.diffgeom.CoordSystem"]], "coordinatesymbol (class in sympy.diffgeom)": [[69, "sympy.diffgeom.CoordinateSymbol"]], "covarderivativeop (class in sympy.diffgeom)": [[69, "sympy.diffgeom.CovarDerivativeOp"]], "differential (class in sympy.diffgeom)": [[69, "sympy.diffgeom.Differential"]], "liederivative (class in sympy.diffgeom)": [[69, "sympy.diffgeom.LieDerivative"]], "manifold (class in sympy.diffgeom)": [[69, "sympy.diffgeom.Manifold"]], "patch (class in sympy.diffgeom)": [[69, "sympy.diffgeom.Patch"]], "point (class in sympy.diffgeom)": [[69, "sympy.diffgeom.Point"]], "tensorproduct (class in sympy.diffgeom)": [[69, "sympy.diffgeom.TensorProduct"]], "wedgeproduct (class in sympy.diffgeom)": [[69, "sympy.diffgeom.WedgeProduct"]], "base_oneform() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.base_oneform"]], "base_oneforms() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.base_oneforms"]], "base_scalar() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.base_scalar"]], "base_scalars() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.base_scalars"]], "base_vector() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.base_vector"]], "base_vectors() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.base_vectors"]], "coord_function() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.coord_function"]], "coord_functions() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.coord_functions"]], "coord_tuple_transform_to() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.coord_tuple_transform_to"]], "coords() (sympy.diffgeom.point method)": [[69, "sympy.diffgeom.Point.coords"]], "intcurve_diffequ() (in module sympy.diffgeom)": [[69, "sympy.diffgeom.intcurve_diffequ"]], "intcurve_series() (in module sympy.diffgeom)": [[69, "sympy.diffgeom.intcurve_series"]], "jacobian() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.jacobian"]], "jacobian_determinant() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.jacobian_determinant"]], "jacobian_matrix() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.jacobian_matrix"]], "metric_to_christoffel_1st() (in module sympy.diffgeom)": [[69, "sympy.diffgeom.metric_to_Christoffel_1st"]], "metric_to_christoffel_2nd() (in module sympy.diffgeom)": [[69, "sympy.diffgeom.metric_to_Christoffel_2nd"]], "metric_to_ricci_components() (in module sympy.diffgeom)": [[69, "sympy.diffgeom.metric_to_Ricci_components"]], "metric_to_riemann_components() (in module sympy.diffgeom)": [[69, "sympy.diffgeom.metric_to_Riemann_components"]], "point() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.point"]], "point_to_coords() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.point_to_coords"]], "sympy.diffgeom": [[69, "module-sympy.diffgeom"]], "transform() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.transform"]], "transformation() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.transformation"]], "twoform_to_matrix() (in module sympy.diffgeom)": [[69, "sympy.diffgeom.twoform_to_matrix"]], "vectors_in_basis() (in module sympy.diffgeom)": [[69, "sympy.diffgeom.vectors_in_basis"]], "convolution() (in module sympy.discrete.convolutions)": [[70, "sympy.discrete.convolutions.convolution"]], "convolution_fft() (in module sympy.discrete.convolutions)": [[70, "sympy.discrete.convolutions.convolution_fft"]], "convolution_fwht() (in module sympy.discrete.convolutions)": [[70, "sympy.discrete.convolutions.convolution_fwht"]], "convolution_ntt() (in module sympy.discrete.convolutions)": [[70, "sympy.discrete.convolutions.convolution_ntt"]], "convolution_subset() (in module sympy.discrete.convolutions)": [[70, "sympy.discrete.convolutions.convolution_subset"]], "covering_product() (in module sympy.discrete.convolutions)": [[70, "sympy.discrete.convolutions.covering_product"]], "fft() (in module sympy.discrete.transforms)": [[70, "sympy.discrete.transforms.fft"]], "fwht() (in module sympy.discrete.transforms)": [[70, "sympy.discrete.transforms.fwht"]], "ifft() (in module sympy.discrete.transforms)": [[70, "sympy.discrete.transforms.ifft"]], "ifwht() (in module sympy.discrete.transforms)": [[70, "sympy.discrete.transforms.ifwht"]], "intersecting_product() (in module sympy.discrete.convolutions)": [[70, "sympy.discrete.convolutions.intersecting_product"]], "intt() (in module sympy.discrete.transforms)": [[70, "sympy.discrete.transforms.intt"]], "inverse_mobius_transform() (in module sympy.discrete.transforms)": [[70, "sympy.discrete.transforms.inverse_mobius_transform"]], "mobius_transform() (in module sympy.discrete.transforms)": [[70, "sympy.discrete.transforms.mobius_transform"]], "ntt() (in module sympy.discrete.transforms)": [[70, "sympy.discrete.transforms.ntt"]], "sympy.discrete": [[70, "module-sympy.discrete"]], "sympy.discrete.convolutions": [[70, "module-sympy.discrete.convolutions"]], "sympy.discrete.transforms": [[70, "module-sympy.discrete.transforms"]], "fallingfactorial (class in sympy.functions.combinatorial.factorials)": [[72, "sympy.functions.combinatorial.factorials.FallingFactorial"]], "multifactorial (class in sympy.functions.combinatorial.factorials)": [[72, "sympy.functions.combinatorial.factorials.MultiFactorial"]], "risingfactorial (class in sympy.functions.combinatorial.factorials)": [[72, "sympy.functions.combinatorial.factorials.RisingFactorial"]], "andre (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.andre"]], "bell (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.bell"]], "bernoulli (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.bernoulli"]], "binomial (class in sympy.functions.combinatorial.factorials)": [[72, "sympy.functions.combinatorial.factorials.binomial"]], "catalan (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.catalan"]], "euler (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.euler"]], "factorial (class in sympy.functions.combinatorial.factorials)": [[72, "sympy.functions.combinatorial.factorials.factorial"]], "factorial2 (class in sympy.functions.combinatorial.factorials)": [[72, "sympy.functions.combinatorial.factorials.factorial2"]], "fibonacci (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.fibonacci"]], "genocchi (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.genocchi"]], "harmonic (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.harmonic"]], "lucas (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.lucas"]], "nc() (in module sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.nC"]], "np() (in module sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.nP"]], "nt() (in module sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.nT"]], "partition (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.partition"]], "stirling() (in module sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.stirling"]], "subfactorial (class in sympy.functions.combinatorial.factorials)": [[72, "sympy.functions.combinatorial.factorials.subfactorial"]], "tribonacci (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.tribonacci"]], "abs (class in sympy.functions.elementary.complexes)": [[73, "sympy.functions.elementary.complexes.Abs"]], "exprcondpair (class in sympy.functions.elementary.piecewise)": [[73, "sympy.functions.elementary.piecewise.ExprCondPair"]], "hyperbolicfunction (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.HyperbolicFunction"]], "identityfunction (class in sympy.functions.elementary.miscellaneous)": [[73, "sympy.functions.elementary.miscellaneous.IdentityFunction"]], "lambertw (class in sympy.functions.elementary.exponential)": [[73, "sympy.functions.elementary.exponential.LambertW"]], "max (class in sympy.functions.elementary.miscellaneous)": [[73, "sympy.functions.elementary.miscellaneous.Max"]], "min (class in sympy.functions.elementary.miscellaneous)": [[73, "sympy.functions.elementary.miscellaneous.Min"]], "piecewise (class in sympy.functions.elementary.piecewise)": [[73, "sympy.functions.elementary.piecewise.Piecewise"]], "roundfunction (class in sympy.functions.elementary.integers)": [[73, "sympy.functions.elementary.integers.RoundFunction"]], "_eval_integral() (sympy.functions.elementary.piecewise.piecewise method)": [[73, "sympy.functions.elementary.piecewise.Piecewise._eval_integral"]], "acos (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.acos"]], "acosh (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.acosh"]], "acot (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.acot"]], "acoth (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.acoth"]], "acsc (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.acsc"]], "acsch (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.acsch"]], "arg (class in sympy.functions.elementary.complexes)": [[73, "sympy.functions.elementary.complexes.arg"]], "as_base_exp() (sympy.functions.elementary.exponential.log method)": [[73, "sympy.functions.elementary.exponential.log.as_base_exp"]], "as_expr_set_pairs() (sympy.functions.elementary.piecewise.piecewise method)": [[73, "sympy.functions.elementary.piecewise.Piecewise.as_expr_set_pairs"]], "as_real_imag() (sympy.functions.elementary.complexes.im method)": [[73, "sympy.functions.elementary.complexes.im.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.complexes.re method)": [[73, "sympy.functions.elementary.complexes.re.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.exp method)": [[73, "sympy.functions.elementary.exponential.exp.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.log method)": [[73, "sympy.functions.elementary.exponential.log.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.hyperbolic.sinh method)": [[73, "sympy.functions.elementary.hyperbolic.sinh.as_real_imag"]], "asec (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.asec"]], "asech (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.asech"]], "asin (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.asin"]], "asinh (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.asinh"]], "atan (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.atan"]], "atan2 (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.atan2"]], "atanh (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.atanh"]], "base (sympy.functions.elementary.exponential.exp property)": [[73, "sympy.functions.elementary.exponential.exp.base"]], "cbrt() (in module sympy.functions.elementary.miscellaneous)": [[73, "sympy.functions.elementary.miscellaneous.cbrt"]], "ceiling (class in sympy.functions.elementary.integers)": [[73, "sympy.functions.elementary.integers.ceiling"]], "cond (sympy.functions.elementary.piecewise.exprcondpair property)": [[73, "sympy.functions.elementary.piecewise.ExprCondPair.cond"]], "conjugate (class in sympy.functions.elementary.complexes)": [[73, "sympy.functions.elementary.complexes.conjugate"]], "cos (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.cos"]], "cosh (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.cosh"]], "cot (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.cot"]], "coth (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.coth"]], "csc (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.csc"]], "csch (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.csch"]], "doit() (sympy.functions.elementary.piecewise.piecewise method)": [[73, "sympy.functions.elementary.piecewise.Piecewise.doit"]], "eval() (sympy.functions.elementary.piecewise.piecewise class method)": [[73, "sympy.functions.elementary.piecewise.Piecewise.eval"]], "exp (class in sympy.functions.elementary.exponential)": [[73, "sympy.functions.elementary.exponential.exp"]], "exp_polar (class in sympy.functions.elementary.exponential)": [[73, "sympy.functions.elementary.exponential.exp_polar"]], "expr (sympy.functions.elementary.piecewise.exprcondpair property)": [[73, "sympy.functions.elementary.piecewise.ExprCondPair.expr"]], "fdiff() (sympy.functions.elementary.complexes.abs method)": [[73, "sympy.functions.elementary.complexes.Abs.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.lambertw method)": [[73, "sympy.functions.elementary.exponential.LambertW.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.exp method)": [[73, "sympy.functions.elementary.exponential.exp.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.log method)": [[73, "sympy.functions.elementary.exponential.log.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.csch method)": [[73, "sympy.functions.elementary.hyperbolic.csch.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.sinh method)": [[73, "sympy.functions.elementary.hyperbolic.sinh.fdiff"]], "floor (class in sympy.functions.elementary.integers)": [[73, "sympy.functions.elementary.integers.floor"]], "frac (class in sympy.functions.elementary.integers)": [[73, "sympy.functions.elementary.integers.frac"]], "im (class in sympy.functions.elementary.complexes)": [[73, "sympy.functions.elementary.complexes.im"]], "inverse() (sympy.functions.elementary.exponential.log method)": [[73, "sympy.functions.elementary.exponential.log.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acosh method)": [[73, "sympy.functions.elementary.hyperbolic.acosh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acoth method)": [[73, "sympy.functions.elementary.hyperbolic.acoth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acsch method)": [[73, "sympy.functions.elementary.hyperbolic.acsch.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asech method)": [[73, "sympy.functions.elementary.hyperbolic.asech.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asinh method)": [[73, "sympy.functions.elementary.hyperbolic.asinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.atanh method)": [[73, "sympy.functions.elementary.hyperbolic.atanh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.coth method)": [[73, "sympy.functions.elementary.hyperbolic.coth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.sinh method)": [[73, "sympy.functions.elementary.hyperbolic.sinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.tanh method)": [[73, "sympy.functions.elementary.hyperbolic.tanh.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acos method)": [[73, "sympy.functions.elementary.trigonometric.acos.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acot method)": [[73, "sympy.functions.elementary.trigonometric.acot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acsc method)": [[73, "sympy.functions.elementary.trigonometric.acsc.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asec method)": [[73, "sympy.functions.elementary.trigonometric.asec.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asin method)": [[73, "sympy.functions.elementary.trigonometric.asin.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.atan method)": [[73, "sympy.functions.elementary.trigonometric.atan.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.cot method)": [[73, "sympy.functions.elementary.trigonometric.cot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.tan method)": [[73, "sympy.functions.elementary.trigonometric.tan.inverse"]], "log (class in sympy.functions.elementary.exponential)": [[73, "sympy.functions.elementary.exponential.log"]], "periodic_argument (class in sympy.functions.elementary.complexes)": [[73, "sympy.functions.elementary.complexes.periodic_argument"]], "piecewise_exclusive() (in module sympy.functions.elementary.piecewise)": [[73, "sympy.functions.elementary.piecewise.piecewise_exclusive"]], "piecewise_fold() (in module sympy.functions.elementary.piecewise)": [[73, "sympy.functions.elementary.piecewise.piecewise_fold"]], "piecewise_integrate() (sympy.functions.elementary.piecewise.piecewise method)": [[73, "sympy.functions.elementary.piecewise.Piecewise.piecewise_integrate"]], "polar_lift (class in sympy.functions.elementary.complexes)": [[73, "sympy.functions.elementary.complexes.polar_lift"]], "principal_branch (class in sympy.functions.elementary.complexes)": [[73, "sympy.functions.elementary.complexes.principal_branch"]], "re (class in sympy.functions.elementary.complexes)": [[73, "sympy.functions.elementary.complexes.re"]], "real_root() (in module sympy.functions.elementary.miscellaneous)": [[73, "sympy.functions.elementary.miscellaneous.real_root"]], "root() (in module sympy.functions.elementary.miscellaneous)": [[73, "sympy.functions.elementary.miscellaneous.root"]], "sec (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.sec"]], "sech (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.sech"]], "sign (class in sympy.functions.elementary.complexes)": [[73, "sympy.functions.elementary.complexes.sign"]], "sin (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.sin"]], "sinc (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.sinc"]], "sinh (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.sinh"]], "sqrt() (in module sympy.functions.elementary.miscellaneous)": [[73, "sympy.functions.elementary.miscellaneous.sqrt"]], "tan (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.tan"]], "tanh (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.tanh"]], "taylor_term() (sympy.functions.elementary.exponential.exp static method)": [[73, "sympy.functions.elementary.exponential.exp.taylor_term"]], "taylor_term() (sympy.functions.elementary.exponential.log static method)": [[73, "sympy.functions.elementary.exponential.log.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.csch static method)": [[73, "sympy.functions.elementary.hyperbolic.csch.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.sinh static method)": [[73, "sympy.functions.elementary.hyperbolic.sinh.taylor_term"]], "sympy.functions": [[74, "module-sympy.functions"]], "airybase (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.AiryBase"]], "besselbase (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.BesselBase"]], "chi (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.Chi"]], "ci (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.Ci"]], "diracdelta (class in sympy.functions.special.delta_functions)": [[75, "sympy.functions.special.delta_functions.DiracDelta"]], "e1() (in module sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.E1"]], "ei (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.Ei"]], "eijk() (in module sympy.functions.special.tensor_functions)": [[75, "sympy.functions.special.tensor_functions.Eijk"]], "fresnelintegral (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.FresnelIntegral"]], "heaviside (class in sympy.functions.special.delta_functions)": [[75, "sympy.functions.special.delta_functions.Heaviside"]], "kroneckerdelta (class in sympy.functions.special.tensor_functions)": [[75, "sympy.functions.special.tensor_functions.KroneckerDelta"]], "levicivita (class in sympy.functions.special.tensor_functions)": [[75, "sympy.functions.special.tensor_functions.LeviCivita"]], "li (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.Li"], [75, "sympy.functions.special.error_functions.li"]], "mathieubase (class in sympy.functions.special.mathieu_functions)": [[75, "sympy.functions.special.mathieu_functions.MathieuBase"]], "shi (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.Shi"]], "si (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.Si"]], "singularityfunction (class in sympy.functions.special.singularity_functions)": [[75, "sympy.functions.special.singularity_functions.SingularityFunction"]], "ynm (class in sympy.functions.special.spherical_harmonics)": [[75, "sympy.functions.special.spherical_harmonics.Ynm"]], "ynm_c() (in module sympy.functions.special.spherical_harmonics)": [[75, "sympy.functions.special.spherical_harmonics.Ynm_c"]], "znm (class in sympy.functions.special.spherical_harmonics)": [[75, "sympy.functions.special.spherical_harmonics.Znm"]], "airyai (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.airyai"]], "airyaiprime (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.airyaiprime"]], "airybi (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.airybi"]], "airybiprime (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.airybiprime"]], "an (sympy.functions.special.hyper.meijerg property)": [[75, "sympy.functions.special.hyper.meijerg.an"]], "aother (sympy.functions.special.hyper.meijerg property)": [[75, "sympy.functions.special.hyper.meijerg.aother"]], "ap (sympy.functions.special.hyper.hyper property)": [[75, "sympy.functions.special.hyper.hyper.ap"]], "ap (sympy.functions.special.hyper.meijerg property)": [[75, "sympy.functions.special.hyper.meijerg.ap"]], "appellf1 (class in sympy.functions.special.hyper)": [[75, "sympy.functions.special.hyper.appellf1"]], "argument (sympy.functions.special.bessel.besselbase property)": [[75, "sympy.functions.special.bessel.BesselBase.argument"]], "argument (sympy.functions.special.hyper.hyper property)": [[75, "sympy.functions.special.hyper.hyper.argument"]], "argument (sympy.functions.special.hyper.meijerg property)": [[75, "sympy.functions.special.hyper.meijerg.argument"]], "assoc_laguerre (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.assoc_laguerre"]], "assoc_legendre (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.assoc_legendre"]], "besseli (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.besseli"]], "besselj (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.besselj"]], "besselk (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.besselk"]], "bessely (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.bessely"]], "beta (class in sympy.functions.special.beta_functions)": [[75, "sympy.functions.special.beta_functions.beta"]], "bm (sympy.functions.special.hyper.meijerg property)": [[75, "sympy.functions.special.hyper.meijerg.bm"]], "bother (sympy.functions.special.hyper.meijerg property)": [[75, "sympy.functions.special.hyper.meijerg.bother"]], "bq (sympy.functions.special.hyper.hyper property)": [[75, "sympy.functions.special.hyper.hyper.bq"]], "bq (sympy.functions.special.hyper.meijerg property)": [[75, "sympy.functions.special.hyper.meijerg.bq"]], "bspline_basis() (in module sympy.functions.special.bsplines)": [[75, "sympy.functions.special.bsplines.bspline_basis"]], "bspline_basis_set() (in module sympy.functions.special.bsplines)": [[75, "sympy.functions.special.bsplines.bspline_basis_set"]], "chebyshevt (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.chebyshevt"]], "chebyshevt_root (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.chebyshevt_root"]], "chebyshevu (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.chebyshevu"]], "chebyshevu_root (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.chebyshevu_root"]], "convergence_statement (sympy.functions.special.hyper.hyper property)": [[75, "sympy.functions.special.hyper.hyper.convergence_statement"]], "delta (sympy.functions.special.hyper.meijerg property)": [[75, "sympy.functions.special.hyper.meijerg.delta"]], "digamma (class in sympy.functions.special.gamma_functions)": [[75, "sympy.functions.special.gamma_functions.digamma"]], "dirichlet_eta (class in sympy.functions.special.zeta_functions)": [[75, "sympy.functions.special.zeta_functions.dirichlet_eta"]], "elliptic_e (class in sympy.functions.special.elliptic_integrals)": [[75, "sympy.functions.special.elliptic_integrals.elliptic_e"]], "elliptic_f (class in sympy.functions.special.elliptic_integrals)": [[75, "sympy.functions.special.elliptic_integrals.elliptic_f"]], "elliptic_k (class in sympy.functions.special.elliptic_integrals)": [[75, "sympy.functions.special.elliptic_integrals.elliptic_k"]], "elliptic_pi (class in sympy.functions.special.elliptic_integrals)": [[75, "sympy.functions.special.elliptic_integrals.elliptic_pi"]], "erf (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.erf"]], "erf2 (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.erf2"]], "erf2inv (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.erf2inv"]], "erfc (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.erfc"]], "erfcinv (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.erfcinv"]], "erfi (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.erfi"]], "erfinv (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.erfinv"]], "eta (sympy.functions.special.hyper.hyper property)": [[75, "sympy.functions.special.hyper.hyper.eta"]], "eval() (sympy.functions.special.delta_functions.diracdelta class method)": [[75, "sympy.functions.special.delta_functions.DiracDelta.eval"]], "eval() (sympy.functions.special.delta_functions.heaviside class method)": [[75, "sympy.functions.special.delta_functions.Heaviside.eval"]], "eval() (sympy.functions.special.singularity_functions.singularityfunction class method)": [[75, "sympy.functions.special.singularity_functions.SingularityFunction.eval"]], "eval() (sympy.functions.special.tensor_functions.kroneckerdelta class method)": [[75, "sympy.functions.special.tensor_functions.KroneckerDelta.eval"]], "eval_levicivita() (in module sympy.functions.special.tensor_functions)": [[75, "sympy.functions.special.tensor_functions.eval_levicivita"]], "expint (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.expint"]], "fdiff() (sympy.functions.special.delta_functions.diracdelta method)": [[75, "sympy.functions.special.delta_functions.DiracDelta.fdiff"]], "fdiff() (sympy.functions.special.delta_functions.heaviside method)": [[75, "sympy.functions.special.delta_functions.Heaviside.fdiff"]], "fdiff() (sympy.functions.special.singularity_functions.singularityfunction method)": [[75, "sympy.functions.special.singularity_functions.SingularityFunction.fdiff"]], "fresnelc (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.fresnelc"]], "fresnels (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.fresnels"]], "gamma (class in sympy.functions.special.gamma_functions)": [[75, "sympy.functions.special.gamma_functions.gamma"]], "gegenbauer (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.gegenbauer"]], "get_period() (sympy.functions.special.hyper.meijerg method)": [[75, "sympy.functions.special.hyper.meijerg.get_period"]], "hankel1 (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.hankel1"]], "hankel2 (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.hankel2"]], "hermite (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.hermite"]], "hermite_prob (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.hermite_prob"]], "hyper (class in sympy.functions.special.hyper)": [[75, "sympy.functions.special.hyper.hyper"]], "indices_contain_equal_information (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[75, "sympy.functions.special.tensor_functions.KroneckerDelta.indices_contain_equal_information"]], "integrand() (sympy.functions.special.hyper.meijerg method)": [[75, "sympy.functions.special.hyper.meijerg.integrand"]], "interpolating_spline() (in module sympy.functions.special.bsplines)": [[75, "sympy.functions.special.bsplines.interpolating_spline"]], "inverse() (sympy.functions.special.error_functions.erf method)": [[75, "sympy.functions.special.error_functions.erf.inverse"]], "inverse() (sympy.functions.special.error_functions.erfc method)": [[75, "sympy.functions.special.error_functions.erfc.inverse"]], "inverse() (sympy.functions.special.error_functions.erfcinv method)": [[75, "sympy.functions.special.error_functions.erfcinv.inverse"]], "inverse() (sympy.functions.special.error_functions.erfinv method)": [[75, "sympy.functions.special.error_functions.erfinv.inverse"]], "is_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[75, "sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[75, "sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi"]], "is_number (sympy.functions.special.hyper.meijerg property)": [[75, "sympy.functions.special.hyper.meijerg.is_number"]], "is_only_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[75, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[75, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi"]], "is_simple() (sympy.functions.special.delta_functions.diracdelta method)": [[75, "sympy.functions.special.delta_functions.DiracDelta.is_simple"]], "jacobi (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.jacobi"]], "jacobi_normalized() (in module sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.jacobi_normalized"]], "jn (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.jn"]], "jn_zeros() (in module sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.jn_zeros"]], "killable_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[75, "sympy.functions.special.tensor_functions.KroneckerDelta.killable_index"]], "laguerre (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.laguerre"]], "legendre (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.legendre"]], "lerchphi (class in sympy.functions.special.zeta_functions)": [[75, "sympy.functions.special.zeta_functions.lerchphi"]], "loggamma (class in sympy.functions.special.gamma_functions)": [[75, "sympy.functions.special.gamma_functions.loggamma"]], "lowergamma (class in sympy.functions.special.gamma_functions)": [[75, "sympy.functions.special.gamma_functions.lowergamma"]], "marcumq (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.marcumq"]], "mathieuc (class in sympy.functions.special.mathieu_functions)": [[75, "sympy.functions.special.mathieu_functions.mathieuc"]], "mathieucprime (class in sympy.functions.special.mathieu_functions)": [[75, "sympy.functions.special.mathieu_functions.mathieucprime"]], "mathieus (class in sympy.functions.special.mathieu_functions)": [[75, "sympy.functions.special.mathieu_functions.mathieus"]], "mathieusprime (class in sympy.functions.special.mathieu_functions)": [[75, "sympy.functions.special.mathieu_functions.mathieusprime"]], "meijerg (class in sympy.functions.special.hyper)": [[75, "sympy.functions.special.hyper.meijerg"]], "multigamma (class in sympy.functions.special.gamma_functions)": [[75, "sympy.functions.special.gamma_functions.multigamma"]], "nu (sympy.functions.special.hyper.meijerg property)": [[75, "sympy.functions.special.hyper.meijerg.nu"]], "order (sympy.functions.special.bessel.besselbase property)": [[75, "sympy.functions.special.bessel.BesselBase.order"]], "pargs (sympy.functions.special.delta_functions.heaviside property)": [[75, "sympy.functions.special.delta_functions.Heaviside.pargs"]], "polygamma (class in sympy.functions.special.gamma_functions)": [[75, "sympy.functions.special.gamma_functions.polygamma"]], "polylog (class in sympy.functions.special.zeta_functions)": [[75, "sympy.functions.special.zeta_functions.polylog"]], "preferred_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[75, "sympy.functions.special.tensor_functions.KroneckerDelta.preferred_index"]], "radius_of_convergence (sympy.functions.special.hyper.hyper property)": [[75, "sympy.functions.special.hyper.hyper.radius_of_convergence"]], "stieltjes (class in sympy.functions.special.zeta_functions)": [[75, "sympy.functions.special.zeta_functions.stieltjes"]], "sympy.functions.special.bessel": [[75, "module-sympy.functions.special.bessel"]], "sympy.functions.special.beta_functions": [[75, "module-sympy.functions.special.beta_functions"]], "sympy.functions.special.elliptic_integrals": [[75, "module-sympy.functions.special.elliptic_integrals"]], "sympy.functions.special.error_functions": [[75, "module-sympy.functions.special.error_functions"]], "sympy.functions.special.gamma_functions": [[75, "module-sympy.functions.special.gamma_functions"]], "sympy.functions.special.mathieu_functions": [[75, "module-sympy.functions.special.mathieu_functions"]], "sympy.functions.special.polynomials": [[75, "module-sympy.functions.special.polynomials"]], "sympy.functions.special.singularity_functions": [[75, "module-sympy.functions.special.singularity_functions"]], "sympy.functions.special.zeta_functions": [[75, "module-sympy.functions.special.zeta_functions"]], "trigamma (class in sympy.functions.special.gamma_functions)": [[75, "sympy.functions.special.gamma_functions.trigamma"]], "uppergamma (class in sympy.functions.special.gamma_functions)": [[75, "sympy.functions.special.gamma_functions.uppergamma"]], "yn (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.yn"]], "zeta (class in sympy.functions.special.zeta_functions)": [[75, "sympy.functions.special.zeta_functions.zeta"]], "curve (class in sympy.geometry.curve)": [[76, "sympy.geometry.curve.Curve"]], "ambient_dimension (sympy.geometry.curve.curve property)": [[76, "sympy.geometry.curve.Curve.ambient_dimension"]], "arbitrary_point() (sympy.geometry.curve.curve method)": [[76, "sympy.geometry.curve.Curve.arbitrary_point"]], "free_symbols (sympy.geometry.curve.curve property)": [[76, "sympy.geometry.curve.Curve.free_symbols"]], "functions (sympy.geometry.curve.curve property)": [[76, "sympy.geometry.curve.Curve.functions"]], "length (sympy.geometry.curve.curve property)": [[76, "sympy.geometry.curve.Curve.length"]], "limits (sympy.geometry.curve.curve property)": [[76, "sympy.geometry.curve.Curve.limits"]], "parameter (sympy.geometry.curve.curve property)": [[76, "sympy.geometry.curve.Curve.parameter"]], "plot_interval() (sympy.geometry.curve.curve method)": [[76, "sympy.geometry.curve.Curve.plot_interval"]], "rotate() (sympy.geometry.curve.curve method)": [[76, "sympy.geometry.curve.Curve.rotate"]], "scale() (sympy.geometry.curve.curve method)": [[76, "sympy.geometry.curve.Curve.scale"]], "sympy.geometry.curve": [[76, "module-sympy.geometry.curve"]], "translate() (sympy.geometry.curve.curve method)": [[76, "sympy.geometry.curve.Curve.translate"]], "circle (class in sympy.geometry.ellipse)": [[77, "sympy.geometry.ellipse.Circle"]], "ellipse (class in sympy.geometry.ellipse)": [[77, "sympy.geometry.ellipse.Ellipse"]], "apoapsis (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.apoapsis"]], "arbitrary_point() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.arbitrary_point"]], "area (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.area"]], "auxiliary_circle() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.auxiliary_circle"]], "bounds (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.bounds"]], "center (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.center"]], "circumference (sympy.geometry.ellipse.circle property)": [[77, "sympy.geometry.ellipse.Circle.circumference"]], "circumference (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.circumference"]], "director_circle() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.director_circle"]], "eccentricity (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.eccentricity"]], "encloses_point() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.encloses_point"]], "equation() (sympy.geometry.ellipse.circle method)": [[77, "sympy.geometry.ellipse.Circle.equation"]], "equation() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.equation"]], "evolute() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.evolute"]], "foci (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.foci"]], "focus_distance (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.focus_distance"]], "hradius (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.hradius"]], "intersection() (sympy.geometry.ellipse.circle method)": [[77, "sympy.geometry.ellipse.Circle.intersection"]], "intersection() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.intersection"]], "is_tangent() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.is_tangent"]], "major (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.major"]], "minor (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.minor"]], "normal_lines() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.normal_lines"]], "periapsis (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.periapsis"]], "plot_interval() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.polar_second_moment_of_area"]], "radius (sympy.geometry.ellipse.circle property)": [[77, "sympy.geometry.ellipse.Circle.radius"]], "random_point() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.random_point"]], "reflect() (sympy.geometry.ellipse.circle method)": [[77, "sympy.geometry.ellipse.Circle.reflect"]], "reflect() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.reflect"]], "rotate() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.rotate"]], "scale() (sympy.geometry.ellipse.circle method)": [[77, "sympy.geometry.ellipse.Circle.scale"]], "scale() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.scale"]], "second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.second_moment_of_area"]], "section_modulus() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.section_modulus"]], "semilatus_rectum (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.semilatus_rectum"]], "sympy.geometry.ellipse": [[77, "module-sympy.geometry.ellipse"]], "tangent_lines() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.tangent_lines"]], "vradius (sympy.geometry.ellipse.circle property)": [[77, "sympy.geometry.ellipse.Circle.vradius"]], "vradius (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.vradius"]], "geometryentity (class in sympy.geometry.entity)": [[78, "sympy.geometry.entity.GeometryEntity"]], "ambient_dimension (sympy.geometry.entity.geometryentity property)": [[78, "sympy.geometry.entity.GeometryEntity.ambient_dimension"]], "bounds (sympy.geometry.entity.geometryentity property)": [[78, "sympy.geometry.entity.GeometryEntity.bounds"]], "encloses() (sympy.geometry.entity.geometryentity method)": [[78, "sympy.geometry.entity.GeometryEntity.encloses"]], "intersection() (sympy.geometry.entity.geometryentity method)": [[78, "sympy.geometry.entity.GeometryEntity.intersection"]], "is_similar() (sympy.geometry.entity.geometryentity method)": [[78, "sympy.geometry.entity.GeometryEntity.is_similar"]], "parameter_value() (sympy.geometry.entity.geometryentity method)": [[78, "sympy.geometry.entity.GeometryEntity.parameter_value"]], "reflect() (sympy.geometry.entity.geometryentity method)": [[78, "sympy.geometry.entity.GeometryEntity.reflect"]], "rotate() (sympy.geometry.entity.geometryentity method)": [[78, "sympy.geometry.entity.GeometryEntity.rotate"]], "scale() (sympy.geometry.entity.geometryentity method)": [[78, "sympy.geometry.entity.GeometryEntity.scale"]], "sympy.geometry.entity": [[78, "module-sympy.geometry.entity"]], "translate() (sympy.geometry.entity.geometryentity method)": [[78, "sympy.geometry.entity.GeometryEntity.translate"]], "line (class in sympy.geometry.line)": [[80, "sympy.geometry.line.Line"]], "line2d (class in sympy.geometry.line)": [[80, "sympy.geometry.line.Line2D"]], "line3d (class in sympy.geometry.line)": [[80, "sympy.geometry.line.Line3D"]], "linearentity (class in sympy.geometry.line)": [[80, "sympy.geometry.line.LinearEntity"]], "linearentity2d (class in sympy.geometry.line)": [[80, "sympy.geometry.line.LinearEntity2D"]], "linearentity3d (class in sympy.geometry.line)": [[80, "sympy.geometry.line.LinearEntity3D"]], "ray (class in sympy.geometry.line)": [[80, "sympy.geometry.line.Ray"]], "ray2d (class in sympy.geometry.line)": [[80, "sympy.geometry.line.Ray2D"]], "ray3d (class in sympy.geometry.line)": [[80, "sympy.geometry.line.Ray3D"]], "segment (class in sympy.geometry.line)": [[80, "sympy.geometry.line.Segment"]], "segment2d (class in sympy.geometry.line)": [[80, "sympy.geometry.line.Segment2D"]], "segment3d (class in sympy.geometry.line)": [[80, "sympy.geometry.line.Segment3D"]], "ambient_dimension (sympy.geometry.line.linearentity property)": [[80, "sympy.geometry.line.LinearEntity.ambient_dimension"]], "angle_between() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.angle_between"]], "arbitrary_point() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.arbitrary_point"]], "are_concurrent() (sympy.geometry.line.linearentity static method)": [[80, "sympy.geometry.line.LinearEntity.are_concurrent"]], "bisectors() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.bisectors"]], "bounds (sympy.geometry.line.linearentity2d property)": [[80, "sympy.geometry.line.LinearEntity2D.bounds"]], "closing_angle() (sympy.geometry.line.ray2d method)": [[80, "sympy.geometry.line.Ray2D.closing_angle"]], "coefficients (sympy.geometry.line.line2d property)": [[80, "sympy.geometry.line.Line2D.coefficients"]], "contains() (sympy.geometry.line.line method)": [[80, "sympy.geometry.line.Line.contains"]], "contains() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.contains"]], "contains() (sympy.geometry.line.ray method)": [[80, "sympy.geometry.line.Ray.contains"]], "contains() (sympy.geometry.line.segment method)": [[80, "sympy.geometry.line.Segment.contains"]], "direction (sympy.geometry.line.linearentity property)": [[80, "sympy.geometry.line.LinearEntity.direction"]], "direction_cosine (sympy.geometry.line.linearentity3d property)": [[80, "sympy.geometry.line.LinearEntity3D.direction_cosine"]], "direction_ratio (sympy.geometry.line.linearentity3d property)": [[80, "sympy.geometry.line.LinearEntity3D.direction_ratio"]], "distance() (sympy.geometry.line.line method)": [[80, "sympy.geometry.line.Line.distance"]], "distance() (sympy.geometry.line.line3d method)": [[80, "sympy.geometry.line.Line3D.distance"]], "distance() (sympy.geometry.line.ray method)": [[80, "sympy.geometry.line.Ray.distance"]], "distance() (sympy.geometry.line.segment method)": [[80, "sympy.geometry.line.Segment.distance"]], "equals() (sympy.geometry.line.line method)": [[80, "sympy.geometry.line.Line.equals"]], "equals() (sympy.geometry.line.ray method)": [[80, "sympy.geometry.line.Ray.equals"]], "equals() (sympy.geometry.line.segment method)": [[80, "sympy.geometry.line.Segment.equals"]], "equation() (sympy.geometry.line.line2d method)": [[80, "sympy.geometry.line.Line2D.equation"]], "equation() (sympy.geometry.line.line3d method)": [[80, "sympy.geometry.line.Line3D.equation"]], "intersection() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.intersection"]], "is_parallel() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.is_parallel"]], "is_perpendicular() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.is_perpendicular"]], "is_similar() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.is_similar"]], "length (sympy.geometry.line.linearentity property)": [[80, "sympy.geometry.line.LinearEntity.length"]], "length (sympy.geometry.line.segment property)": [[80, "sympy.geometry.line.Segment.length"]], "midpoint (sympy.geometry.line.segment property)": [[80, "sympy.geometry.line.Segment.midpoint"]], "p1 (sympy.geometry.line.linearentity property)": [[80, "sympy.geometry.line.LinearEntity.p1"]], "p2 (sympy.geometry.line.linearentity property)": [[80, "sympy.geometry.line.LinearEntity.p2"]], "parallel_line() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.parallel_line"]], "perpendicular_bisector() (sympy.geometry.line.segment method)": [[80, "sympy.geometry.line.Segment.perpendicular_bisector"]], "perpendicular_line() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.perpendicular_line"]], "perpendicular_line() (sympy.geometry.line.linearentity2d method)": [[80, "sympy.geometry.line.LinearEntity2D.perpendicular_line"]], "perpendicular_segment() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.perpendicular_segment"]], "plot_interval() (sympy.geometry.line.line method)": [[80, "sympy.geometry.line.Line.plot_interval"]], "plot_interval() (sympy.geometry.line.ray method)": [[80, "sympy.geometry.line.Ray.plot_interval"]], "plot_interval() (sympy.geometry.line.segment method)": [[80, "sympy.geometry.line.Segment.plot_interval"]], "points (sympy.geometry.line.linearentity property)": [[80, "sympy.geometry.line.LinearEntity.points"]], "projection() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.projection"]], "random_point() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.random_point"]], "slope (sympy.geometry.line.linearentity2d property)": [[80, "sympy.geometry.line.LinearEntity2D.slope"]], "smallest_angle_between() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.smallest_angle_between"]], "source (sympy.geometry.line.ray property)": [[80, "sympy.geometry.line.Ray.source"]], "sympy.geometry.line": [[80, "module-sympy.geometry.line"]], "xdirection (sympy.geometry.line.ray2d property)": [[80, "sympy.geometry.line.Ray2D.xdirection"]], "xdirection (sympy.geometry.line.ray3d property)": [[80, "sympy.geometry.line.Ray3D.xdirection"]], "ydirection (sympy.geometry.line.ray2d property)": [[80, "sympy.geometry.line.Ray2D.ydirection"]], "ydirection (sympy.geometry.line.ray3d property)": [[80, "sympy.geometry.line.Ray3D.ydirection"]], "zdirection (sympy.geometry.line.ray3d property)": [[80, "sympy.geometry.line.Ray3D.zdirection"]], "plane (class in sympy.geometry.plane)": [[81, "sympy.geometry.plane.Plane"]], "angle_between() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.angle_between"]], "arbitrary_point() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.arbitrary_point"]], "are_concurrent() (sympy.geometry.plane.plane static method)": [[81, "sympy.geometry.plane.Plane.are_concurrent"]], "distance() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.distance"]], "equals() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.equals"]], "equation() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.equation"]], "intersection() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.intersection"]], "is_coplanar() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.is_coplanar"]], "is_parallel() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.is_parallel"]], "is_perpendicular() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.is_perpendicular"]], "normal_vector (sympy.geometry.plane.plane property)": [[81, "sympy.geometry.plane.Plane.normal_vector"]], "p1 (sympy.geometry.plane.plane property)": [[81, "sympy.geometry.plane.Plane.p1"]], "parallel_plane() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.parallel_plane"]], "parameter_value() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.parameter_value"]], "perpendicular_line() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.perpendicular_line"]], "perpendicular_plane() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.perpendicular_plane"]], "projection() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.projection"]], "projection_line() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.projection_line"]], "random_point() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.random_point"]], "sympy.geometry.plane": [[81, "module-sympy.geometry.plane"]], "point (class in sympy.geometry.point)": [[82, "sympy.geometry.point.Point"]], "point2d (class in sympy.geometry.point)": [[82, "sympy.geometry.point.Point2D"]], "point3d (class in sympy.geometry.point)": [[82, "sympy.geometry.point.Point3D"]], "affine_rank() (sympy.geometry.point.point static method)": [[82, "sympy.geometry.point.Point.affine_rank"]], "ambient_dimension (sympy.geometry.point.point property)": [[82, "sympy.geometry.point.Point.ambient_dimension"]], "are_collinear() (sympy.geometry.point.point3d static method)": [[82, "sympy.geometry.point.Point3D.are_collinear"]], "are_coplanar() (sympy.geometry.point.point class method)": [[82, "sympy.geometry.point.Point.are_coplanar"]], "bounds (sympy.geometry.point.point2d property)": [[82, "sympy.geometry.point.Point2D.bounds"]], "canberra_distance() (sympy.geometry.point.point method)": [[82, "sympy.geometry.point.Point.canberra_distance"]], "coordinates (sympy.geometry.point.point2d property)": [[82, "sympy.geometry.point.Point2D.coordinates"]], "coordinates (sympy.geometry.point.point3d property)": [[82, "sympy.geometry.point.Point3D.coordinates"]], "direction_cosine() (sympy.geometry.point.point3d method)": [[82, "sympy.geometry.point.Point3D.direction_cosine"]], "direction_ratio() (sympy.geometry.point.point3d method)": [[82, "sympy.geometry.point.Point3D.direction_ratio"]], "distance() (sympy.geometry.point.point method)": [[82, "sympy.geometry.point.Point.distance"]], "dot() (sympy.geometry.point.point method)": [[82, "sympy.geometry.point.Point.dot"]], "equals() (sympy.geometry.point.point method)": [[82, "sympy.geometry.point.Point.equals"]], "intersection() (sympy.geometry.point.point method)": [[82, "sympy.geometry.point.Point.intersection"]], "intersection() (sympy.geometry.point.point3d method)": [[82, "sympy.geometry.point.Point3D.intersection"]], "is_collinear() (sympy.geometry.point.point method)": [[82, "sympy.geometry.point.Point.is_collinear"]], "is_concyclic() (sympy.geometry.point.point method)": [[82, "sympy.geometry.point.Point.is_concyclic"]], "is_nonzero (sympy.geometry.point.point property)": [[82, "sympy.geometry.point.Point.is_nonzero"]], "is_scalar_multiple() (sympy.geometry.point.point method)": [[82, "sympy.geometry.point.Point.is_scalar_multiple"]], "is_zero (sympy.geometry.point.point property)": [[82, "sympy.geometry.point.Point.is_zero"]], "length (sympy.geometry.point.point property)": [[82, "sympy.geometry.point.Point.length"]], "midpoint() (sympy.geometry.point.point method)": [[82, "sympy.geometry.point.Point.midpoint"]], "origin (sympy.geometry.point.point property)": [[82, "sympy.geometry.point.Point.origin"]], "orthogonal_direction (sympy.geometry.point.point property)": [[82, "sympy.geometry.point.Point.orthogonal_direction"]], "project() (sympy.geometry.point.point static method)": [[82, "sympy.geometry.point.Point.project"]], "rotate() (sympy.geometry.point.point2d method)": [[82, "sympy.geometry.point.Point2D.rotate"]], "scale() (sympy.geometry.point.point2d method)": [[82, "sympy.geometry.point.Point2D.scale"]], "scale() (sympy.geometry.point.point3d method)": [[82, "sympy.geometry.point.Point3D.scale"]], "sympy.geometry.point": [[82, "module-sympy.geometry.point"]], "taxicab_distance() (sympy.geometry.point.point method)": [[82, "sympy.geometry.point.Point.taxicab_distance"]], "transform() (sympy.geometry.point.point2d method)": [[82, "sympy.geometry.point.Point2D.transform"]], "transform() (sympy.geometry.point.point3d method)": [[82, "sympy.geometry.point.Point3D.transform"]], "translate() (sympy.geometry.point.point2d method)": [[82, "sympy.geometry.point.Point2D.translate"]], "translate() (sympy.geometry.point.point3d method)": [[82, "sympy.geometry.point.Point3D.translate"]], "unit (sympy.geometry.point.point property)": [[82, "sympy.geometry.point.Point.unit"]], "x (sympy.geometry.point.point2d property)": [[82, "sympy.geometry.point.Point2D.x"]], "x (sympy.geometry.point.point3d property)": [[82, "sympy.geometry.point.Point3D.x"]], "y (sympy.geometry.point.point2d property)": [[82, "sympy.geometry.point.Point2D.y"]], "y (sympy.geometry.point.point3d property)": [[82, "sympy.geometry.point.Point3D.y"]], "z (sympy.geometry.point.point3d property)": [[82, "sympy.geometry.point.Point3D.z"]], "polygon (class in sympy.geometry.polygon)": [[83, "sympy.geometry.polygon.Polygon"]], "regularpolygon (class in sympy.geometry.polygon)": [[83, "sympy.geometry.polygon.RegularPolygon"]], "triangle (class in sympy.geometry.polygon)": [[83, "sympy.geometry.polygon.Triangle"]], "altitudes (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.altitudes"]], "angles (sympy.geometry.polygon.polygon property)": [[83, "sympy.geometry.polygon.Polygon.angles"]], "angles (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.angles"]], "apothem (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.apothem"]], "arbitrary_point() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.arbitrary_point"]], "area (sympy.geometry.polygon.polygon property)": [[83, "sympy.geometry.polygon.Polygon.area"]], "area (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.area"]], "args (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.args"]], "bisectors() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.bisectors"]], "bisectors() (sympy.geometry.polygon.triangle method)": [[83, "sympy.geometry.polygon.Triangle.bisectors"]], "bounds (sympy.geometry.polygon.polygon property)": [[83, "sympy.geometry.polygon.Polygon.bounds"]], "center (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.center"]], "centroid (sympy.geometry.polygon.polygon property)": [[83, "sympy.geometry.polygon.Polygon.centroid"]], "centroid (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.centroid"]], "circumcenter (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.circumcenter"]], "circumcenter (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.circumcenter"]], "circumcircle (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.circumcircle"]], "circumcircle (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.circumcircle"]], "circumradius (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.circumradius"]], "circumradius (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.circumradius"]], "cut_section() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.cut_section"]], "distance() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.distance"]], "encloses_point() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.encloses_point"]], "encloses_point() (sympy.geometry.polygon.regularpolygon method)": [[83, "sympy.geometry.polygon.RegularPolygon.encloses_point"]], "eulerline (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.eulerline"]], "excenters (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.excenters"]], "exradii (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.exradii"]], "exterior_angle (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.exterior_angle"]], "first_moment_of_area() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.first_moment_of_area"]], "incenter (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.incenter"]], "incircle (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.incircle"]], "incircle (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.incircle"]], "inradius (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.inradius"]], "inradius (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.inradius"]], "interior_angle (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.interior_angle"]], "intersection() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.intersection"]], "is_convex() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.is_convex"]], "is_equilateral() (sympy.geometry.polygon.triangle method)": [[83, "sympy.geometry.polygon.Triangle.is_equilateral"]], "is_isosceles() (sympy.geometry.polygon.triangle method)": [[83, "sympy.geometry.polygon.Triangle.is_isosceles"]], "is_right() (sympy.geometry.polygon.triangle method)": [[83, "sympy.geometry.polygon.Triangle.is_right"]], "is_scalene() (sympy.geometry.polygon.triangle method)": [[83, "sympy.geometry.polygon.Triangle.is_scalene"]], "is_similar() (sympy.geometry.polygon.triangle method)": [[83, "sympy.geometry.polygon.Triangle.is_similar"]], "length (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.length"]], "medial (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.medial"]], "medians (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.medians"]], "nine_point_circle (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.nine_point_circle"]], "orthocenter (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.orthocenter"]], "perimeter (sympy.geometry.polygon.polygon property)": [[83, "sympy.geometry.polygon.Polygon.perimeter"]], "plot_interval() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.polar_second_moment_of_area"]], "radius (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.radius"]], "reflect() (sympy.geometry.polygon.regularpolygon method)": [[83, "sympy.geometry.polygon.RegularPolygon.reflect"]], "rotate() (sympy.geometry.polygon.regularpolygon method)": [[83, "sympy.geometry.polygon.RegularPolygon.rotate"]], "rotation (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.rotation"]], "scale() (sympy.geometry.polygon.regularpolygon method)": [[83, "sympy.geometry.polygon.RegularPolygon.scale"]], "second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.second_moment_of_area"]], "section_modulus() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.section_modulus"]], "sides (sympy.geometry.polygon.polygon property)": [[83, "sympy.geometry.polygon.Polygon.sides"]], "spin() (sympy.geometry.polygon.regularpolygon method)": [[83, "sympy.geometry.polygon.RegularPolygon.spin"]], "sympy.geometry.polygon": [[83, "module-sympy.geometry.polygon"]], "vertices (sympy.geometry.polygon.polygon property)": [[83, "sympy.geometry.polygon.Polygon.vertices"]], "vertices (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.vertices"]], "vertices (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.vertices"]], "are_similar() (in module sympy.geometry.util)": [[84, "sympy.geometry.util.are_similar"]], "centroid() (in module sympy.geometry.util)": [[84, "sympy.geometry.util.centroid"]], "convex_hull() (in module sympy.geometry.util)": [[84, "sympy.geometry.util.convex_hull"]], "idiff() (in module sympy.geometry.util)": [[84, "sympy.geometry.util.idiff"]], "intersection() (in module sympy.geometry.util)": [[84, "sympy.geometry.util.intersection"]], "sympy.geometry.util": [[84, "module-sympy.geometry.util"]], "expr_to_holonomic() (in module sympy.holonomic.holonomic)": [[86, "sympy.holonomic.holonomic.expr_to_holonomic"]], "from_hyper() (in module sympy.holonomic.holonomic)": [[86, "sympy.holonomic.holonomic.from_hyper"]], "from_meijerg() (in module sympy.holonomic.holonomic)": [[86, "sympy.holonomic.holonomic.from_meijerg"]], "sympy.holonomic": [[87, "module-sympy.holonomic"]], "_convert_poly_rat_alg() (in module sympy.holonomic.holonomic)": [[88, "sympy.holonomic.holonomic._convert_poly_rat_alg"]], "_create_table() (in module sympy.holonomic.holonomic)": [[88, "sympy.holonomic.holonomic._create_table"]], "composition() (sympy.holonomic.holonomic.holonomicfunction method)": [[89, "sympy.holonomic.holonomic.HolonomicFunction.composition"]], "diff() (sympy.holonomic.holonomic.holonomicfunction method)": [[89, "sympy.holonomic.holonomic.HolonomicFunction.diff"]], "evalf() (sympy.holonomic.holonomic.holonomicfunction method)": [[89, "sympy.holonomic.holonomic.HolonomicFunction.evalf"]], "integrate() (sympy.holonomic.holonomic.holonomicfunction method)": [[89, "sympy.holonomic.holonomic.HolonomicFunction.integrate"]], "series() (sympy.holonomic.holonomic.holonomicfunction method)": [[89, "sympy.holonomic.holonomic.HolonomicFunction.series"]], "to_expr() (sympy.holonomic.holonomic.holonomicfunction method)": [[89, "sympy.holonomic.holonomic.HolonomicFunction.to_expr"]], "to_hyper() (sympy.holonomic.holonomic.holonomicfunction method)": [[89, "sympy.holonomic.holonomic.HolonomicFunction.to_hyper"]], "to_meijerg() (sympy.holonomic.holonomic.holonomicfunction method)": [[89, "sympy.holonomic.holonomic.HolonomicFunction.to_meijerg"]], "to_sequence() (sympy.holonomic.holonomic.holonomicfunction method)": [[89, "sympy.holonomic.holonomic.HolonomicFunction.to_sequence"]], "differentialoperator (class in sympy.holonomic.holonomic)": [[90, "sympy.holonomic.holonomic.DifferentialOperator"]], "differentialoperatoralgebra (class in sympy.holonomic.holonomic)": [[90, "sympy.holonomic.holonomic.DifferentialOperatorAlgebra"]], "differentialoperators() (in module sympy.holonomic.holonomic)": [[90, "sympy.holonomic.holonomic.DifferentialOperators"]], "holonomicfunction (class in sympy.holonomic.holonomic)": [[90, "sympy.holonomic.holonomic.HolonomicFunction"]], "is_singular() (sympy.holonomic.holonomic.differentialoperator method)": [[90, "sympy.holonomic.holonomic.DifferentialOperator.is_singular"]], "_coeffexpvalueerror": [[92, "sympy.integrals.meijerint._CoeffExpValueError"]], "_check_antecedents() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._check_antecedents"]], "_check_antecedents_1() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._check_antecedents_1"]], "_check_antecedents_inversion() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._check_antecedents_inversion"]], "_condsimp() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._condsimp"]], "_create_lookup_table() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._create_lookup_table"]], "_dummy() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._dummy"]], "_dummy_() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._dummy_"]], "_eval_cond() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._eval_cond"]], "_exponents() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._exponents"]], "_find_splitting_points() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._find_splitting_points"]], "_flip_g() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._flip_g"]], "_functions() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._functions"]], "_get_coeff_exp() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._get_coeff_exp"]], "_guess_expansion() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._guess_expansion"]], "_inflate_fox_h() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._inflate_fox_h"]], "_inflate_g() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._inflate_g"]], "_int0oo() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._int0oo"]], "_int0oo_1() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._int0oo_1"]], "_int_inversion() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._int_inversion"]], "_is_analytic() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._is_analytic"]], "_meijerint_definite_2() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._meijerint_definite_2"]], "_meijerint_definite_3() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._meijerint_definite_3"]], "_meijerint_definite_4() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._meijerint_definite_4"]], "_meijerint_indefinite_1() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._meijerint_indefinite_1"]], "_mul_args() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._mul_args"]], "_mul_as_two_parts() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._mul_as_two_parts"]], "_my_principal_branch() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._my_principal_branch"]], "_mytype() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._mytype"]], "_rewrite1() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._rewrite1"]], "_rewrite2() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._rewrite2"]], "_rewrite_inversion() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._rewrite_inversion"]], "_rewrite_saxena() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._rewrite_saxena"]], "_rewrite_saxena_1() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._rewrite_saxena_1"]], "_rewrite_single() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._rewrite_single"]], "_split_mul() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._split_mul"]], "meijerint_definite() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint.meijerint_definite"]], "meijerint_indefinite() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint.meijerint_indefinite"]], "meijerint_inversion() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint.meijerint_inversion"]], "sympy.integrals.meijerint": [[92, "module-sympy.integrals.meijerint"]], "sympy.integrals.meijerint_doc": [[92, "module-sympy.integrals.meijerint_doc"]], "cosinetransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.CosineTransform"]], "exprwithlimits (class in sympy.concrete.expr_with_limits)": [[94, "sympy.concrete.expr_with_limits.ExprWithLimits"]], "fouriertransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.FourierTransform"]], "hankeltransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.HankelTransform"]], "integral (class in sympy.integrals.integrals)": [[94, "sympy.integrals.integrals.Integral"]], "integral.is_commutative (in module sympy.integrals.integrals)": [[94, "sympy.integrals.integrals.Integral.is_commutative"]], "integraltransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.IntegralTransform"]], "integraltransformerror": [[94, "sympy.integrals.transforms.IntegralTransformError"]], "inversecosinetransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.InverseCosineTransform"]], "inversefouriertransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.InverseFourierTransform"]], "inversehankeltransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.InverseHankelTransform"]], "inverselaplacetransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.InverseLaplaceTransform"]], "inversemellintransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.InverseMellinTransform"]], "inversesinetransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.InverseSineTransform"]], "laplacetransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.LaplaceTransform"]], "mellintransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.MellinTransform"]], "nonelementaryintegral (class in sympy.integrals.risch)": [[94, "sympy.integrals.risch.NonElementaryIntegral"]], "sinetransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.SineTransform"]], "_fourier_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms._fourier_transform"]], "as_sum() (sympy.integrals.integrals.integral method)": [[94, "sympy.integrals.integrals.Integral.as_sum"]], "bound_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[94, "sympy.concrete.expr_with_limits.ExprWithLimits.bound_symbols"]], "components() (in module sympy.integrals.heurisch)": [[94, "sympy.integrals.heurisch.components"]], "cosine_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.cosine_transform"]], "deltaintegrate() (in module sympy.integrals.deltafunctions)": [[94, "sympy.integrals.deltafunctions.deltaintegrate"]], "doit() (sympy.integrals.integrals.integral method)": [[94, "sympy.integrals.integrals.Integral.doit"]], "doit() (sympy.integrals.transforms.integraltransform method)": [[94, "sympy.integrals.transforms.IntegralTransform.doit"]], "doit() (sympy.integrals.transforms.inverselaplacetransform method)": [[94, "sympy.integrals.transforms.InverseLaplaceTransform.doit"]], "doit() (sympy.integrals.transforms.laplacetransform method)": [[94, "sympy.integrals.transforms.LaplaceTransform.doit"]], "fourier_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.fourier_transform"]], "free_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[94, "sympy.concrete.expr_with_limits.ExprWithLimits.free_symbols"]], "free_symbols (sympy.integrals.integrals.integral property)": [[94, "sympy.integrals.integrals.Integral.free_symbols"]], "function (sympy.concrete.expr_with_limits.exprwithlimits property)": [[94, "sympy.concrete.expr_with_limits.ExprWithLimits.function"]], "function (sympy.integrals.transforms.integraltransform property)": [[94, "sympy.integrals.transforms.IntegralTransform.function"]], "function_variable (sympy.integrals.transforms.integraltransform property)": [[94, "sympy.integrals.transforms.IntegralTransform.function_variable"]], "gauss_chebyshev_t() (in module sympy.integrals.quadrature)": [[94, "sympy.integrals.quadrature.gauss_chebyshev_t"]], "gauss_chebyshev_u() (in module sympy.integrals.quadrature)": [[94, "sympy.integrals.quadrature.gauss_chebyshev_u"]], "gauss_gen_laguerre() (in module sympy.integrals.quadrature)": [[94, "sympy.integrals.quadrature.gauss_gen_laguerre"]], "gauss_hermite() (in module sympy.integrals.quadrature)": [[94, "sympy.integrals.quadrature.gauss_hermite"]], "gauss_jacobi() (in module sympy.integrals.quadrature)": [[94, "sympy.integrals.quadrature.gauss_jacobi"]], "gauss_laguerre() (in module sympy.integrals.quadrature)": [[94, "sympy.integrals.quadrature.gauss_laguerre"]], "gauss_legendre() (in module sympy.integrals.quadrature)": [[94, "sympy.integrals.quadrature.gauss_legendre"]], "gauss_lobatto() (in module sympy.integrals.quadrature)": [[94, "sympy.integrals.quadrature.gauss_lobatto"]], "hankel_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.hankel_transform"]], "has_finite_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[94, "sympy.concrete.expr_with_limits.ExprWithLimits.has_finite_limits"]], "has_reversed_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[94, "sympy.concrete.expr_with_limits.ExprWithLimits.has_reversed_limits"]], "heurisch() (in module sympy.integrals.heurisch)": [[94, "sympy.integrals.heurisch.heurisch"]], "integral_steps() (in module sympy.integrals.manualintegrate)": [[94, "sympy.integrals.manualintegrate.integral_steps"]], "integrate() (in module sympy.integrals.integrals)": [[94, "sympy.integrals.integrals.integrate"]], "inverse_cosine_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.inverse_cosine_transform"]], "inverse_fourier_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.inverse_fourier_transform"]], "inverse_hankel_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.inverse_hankel_transform"]], "inverse_laplace_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.inverse_laplace_transform"]], "inverse_mellin_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.inverse_mellin_transform"]], "inverse_sine_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.inverse_sine_transform"]], "is_number (sympy.concrete.expr_with_limits.exprwithlimits property)": [[94, "sympy.concrete.expr_with_limits.ExprWithLimits.is_number"]], "laplace_correspondence() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.laplace_correspondence"]], "laplace_initial_conds() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.laplace_initial_conds"]], "laplace_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.laplace_transform"]], "limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[94, "sympy.concrete.expr_with_limits.ExprWithLimits.limits"]], "line_integrate() (in module sympy.integrals.integrals)": [[94, "sympy.integrals.integrals.line_integrate"]], "manualintegrate() (in module sympy.integrals.manualintegrate)": [[94, "sympy.integrals.manualintegrate.manualintegrate"]], "mellin_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.mellin_transform"]], "polytope_integrate() (in module sympy.integrals.intpoly)": [[94, "sympy.integrals.intpoly.polytope_integrate"]], "principal_value() (sympy.integrals.integrals.integral method)": [[94, "sympy.integrals.integrals.Integral.principal_value"]], "ratint() (in module sympy.integrals.rationaltools)": [[94, "sympy.integrals.rationaltools.ratint"]], "ratint_logpart() (in module sympy.integrals.rationaltools)": [[94, "sympy.integrals.rationaltools.ratint_logpart"]], "ratint_ratpart() (in module sympy.integrals.rationaltools)": [[94, "sympy.integrals.rationaltools.ratint_ratpart"]], "risch_integrate() (in module sympy.integrals.risch)": [[94, "sympy.integrals.risch.risch_integrate"]], "sine_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.sine_transform"]], "singularityintegrate() (in module sympy.integrals.singularityfunctions)": [[94, "sympy.integrals.singularityfunctions.singularityintegrate"]], "sympy.integrals": [[94, "module-sympy.integrals"]], "sympy.integrals.intpoly": [[94, "module-sympy.integrals.intpoly"]], "sympy.integrals.transforms": [[94, "module-sympy.integrals.transforms"]], "transform() (sympy.integrals.integrals.integral method)": [[94, "sympy.integrals.integrals.Integral.transform"]], "transform_variable (sympy.integrals.transforms.integraltransform property)": [[94, "sympy.integrals.transforms.IntegralTransform.transform_variable"]], "trigintegrate() (in module sympy.integrals.trigonometry)": [[94, "sympy.integrals.trigonometry.trigintegrate"]], "variables (sympy.concrete.expr_with_limits.exprwithlimits property)": [[94, "sympy.concrete.expr_with_limits.ExprWithLimits.variables"]], "enable_automatic_int_sympification() (in module sympy.interactive.session)": [[95, "sympy.interactive.session.enable_automatic_int_sympification"]], "enable_automatic_symbols() (in module sympy.interactive.session)": [[95, "sympy.interactive.session.enable_automatic_symbols"]], "init_ipython_session() (in module sympy.interactive.session)": [[95, "sympy.interactive.session.init_ipython_session"]], "init_printing() (in module sympy.interactive.printing)": [[95, "sympy.interactive.printing.init_printing"]], "init_python_session() (in module sympy.interactive.session)": [[95, "sympy.interactive.session.init_python_session"]], "init_session() (in module sympy.interactive.session)": [[95, "sympy.interactive.session.init_session"]], "int_to_integer() (in module sympy.interactive.session)": [[95, "sympy.interactive.session.int_to_Integer"]], "sympy.interactive": [[95, "module-sympy.interactive"]], "sympy.interactive.printing": [[95, "module-sympy.interactive.printing"]], "sympy.interactive.session": [[95, "module-sympy.interactive.session"]], "cartanmatrix() (in module sympy.liealgebras.cartan_matrix)": [[96, "sympy.liealgebras.cartan_matrix.CartanMatrix"]], "cartantype_generator (class in sympy.liealgebras.cartan_type)": [[96, "sympy.liealgebras.cartan_type.CartanType_generator"]], "dynkindiagram() (in module sympy.liealgebras.dynkin_diagram)": [[96, "sympy.liealgebras.dynkin_diagram.DynkinDiagram"]], "rootsystem (class in sympy.liealgebras.root_system)": [[96, "sympy.liealgebras.root_system.RootSystem"]], "standard_cartan (class in sympy.liealgebras.cartan_type)": [[96, "sympy.liealgebras.cartan_type.Standard_Cartan"]], "typea (class in sympy.liealgebras.type_a)": [[96, "sympy.liealgebras.type_a.TypeA"]], "typeb (class in sympy.liealgebras.type_b)": [[96, "sympy.liealgebras.type_b.TypeB"]], "typec (class in sympy.liealgebras.type_c)": [[96, "sympy.liealgebras.type_c.TypeC"]], "typed (class in sympy.liealgebras.type_d)": [[96, "sympy.liealgebras.type_d.TypeD"]], "typee (class in sympy.liealgebras.type_e)": [[96, "sympy.liealgebras.type_e.TypeE"]], "typef (class in sympy.liealgebras.type_f)": [[96, "sympy.liealgebras.type_f.TypeF"]], "typeg (class in sympy.liealgebras.type_g)": [[96, "sympy.liealgebras.type_g.TypeG"]], "weylgroup (class in sympy.liealgebras.weyl_group)": [[96, "sympy.liealgebras.weyl_group.WeylGroup"]], "add_as_roots() (sympy.liealgebras.root_system.rootsystem method)": [[96, "sympy.liealgebras.root_system.RootSystem.add_as_roots"]], "add_simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[96, "sympy.liealgebras.root_system.RootSystem.add_simple_roots"]], "all_roots() (sympy.liealgebras.root_system.rootsystem method)": [[96, "sympy.liealgebras.root_system.RootSystem.all_roots"]], "basic_root() (sympy.liealgebras.type_a.typea method)": [[96, "sympy.liealgebras.type_a.TypeA.basic_root"]], "basic_root() (sympy.liealgebras.type_b.typeb method)": [[96, "sympy.liealgebras.type_b.TypeB.basic_root"]], "basic_root() (sympy.liealgebras.type_c.typec method)": [[96, "sympy.liealgebras.type_c.TypeC.basic_root"]], "basic_root() (sympy.liealgebras.type_d.typed method)": [[96, "sympy.liealgebras.type_d.TypeD.basic_root"]], "basic_root() (sympy.liealgebras.type_e.typee method)": [[96, "sympy.liealgebras.type_e.TypeE.basic_root"]], "basic_root() (sympy.liealgebras.type_f.typef method)": [[96, "sympy.liealgebras.type_f.TypeF.basic_root"]], "basis() (sympy.liealgebras.type_a.typea method)": [[96, "sympy.liealgebras.type_a.TypeA.basis"]], "basis() (sympy.liealgebras.type_b.typeb method)": [[96, "sympy.liealgebras.type_b.TypeB.basis"]], "basis() (sympy.liealgebras.type_c.typec method)": [[96, "sympy.liealgebras.type_c.TypeC.basis"]], "basis() (sympy.liealgebras.type_d.typed method)": [[96, "sympy.liealgebras.type_d.TypeD.basis"]], "basis() (sympy.liealgebras.type_e.typee method)": [[96, "sympy.liealgebras.type_e.TypeE.basis"]], "basis() (sympy.liealgebras.type_f.typef method)": [[96, "sympy.liealgebras.type_f.TypeF.basis"]], "basis() (sympy.liealgebras.type_g.typeg method)": [[96, "sympy.liealgebras.type_g.TypeG.basis"]], "cartan_matrix() (sympy.liealgebras.root_system.rootsystem method)": [[96, "sympy.liealgebras.root_system.RootSystem.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_a.typea method)": [[96, "sympy.liealgebras.type_a.TypeA.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_b.typeb method)": [[96, "sympy.liealgebras.type_b.TypeB.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_c.typec method)": [[96, "sympy.liealgebras.type_c.TypeC.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_d.typed method)": [[96, "sympy.liealgebras.type_d.TypeD.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_e.typee method)": [[96, "sympy.liealgebras.type_e.TypeE.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_f.typef method)": [[96, "sympy.liealgebras.type_f.TypeF.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_g.typeg method)": [[96, "sympy.liealgebras.type_g.TypeG.cartan_matrix"]], "coxeter_diagram() (sympy.liealgebras.weyl_group.weylgroup method)": [[96, "sympy.liealgebras.weyl_group.WeylGroup.coxeter_diagram"]], "delete_doubles() (sympy.liealgebras.weyl_group.weylgroup method)": [[96, "sympy.liealgebras.weyl_group.WeylGroup.delete_doubles"]], "dimension() (sympy.liealgebras.type_a.typea method)": [[96, "sympy.liealgebras.type_a.TypeA.dimension"]], "dimension() (sympy.liealgebras.type_b.typeb method)": [[96, "sympy.liealgebras.type_b.TypeB.dimension"]], "dimension() (sympy.liealgebras.type_c.typec method)": [[96, "sympy.liealgebras.type_c.TypeC.dimension"]], "dimension() (sympy.liealgebras.type_d.typed method)": [[96, "sympy.liealgebras.type_d.TypeD.dimension"]], "dimension() (sympy.liealgebras.type_e.typee method)": [[96, "sympy.liealgebras.type_e.TypeE.dimension"]], "dimension() (sympy.liealgebras.type_f.typef method)": [[96, "sympy.liealgebras.type_f.TypeF.dimension"]], "dimension() (sympy.liealgebras.type_g.typeg method)": [[96, "sympy.liealgebras.type_g.TypeG.dimension"]], "dynkin_diagram() (sympy.liealgebras.root_system.rootsystem method)": [[96, "sympy.liealgebras.root_system.RootSystem.dynkin_diagram"]], "element_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[96, "sympy.liealgebras.weyl_group.WeylGroup.element_order"]], "generators() (sympy.liealgebras.weyl_group.weylgroup method)": [[96, "sympy.liealgebras.weyl_group.WeylGroup.generators"]], "group_name() (sympy.liealgebras.weyl_group.weylgroup method)": [[96, "sympy.liealgebras.weyl_group.WeylGroup.group_name"]], "group_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[96, "sympy.liealgebras.weyl_group.WeylGroup.group_order"]], "highest_root() (sympy.liealgebras.type_a.typea method)": [[96, "sympy.liealgebras.type_a.TypeA.highest_root"]], "lie_algebra() (sympy.liealgebras.type_a.typea method)": [[96, "sympy.liealgebras.type_a.TypeA.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_b.typeb method)": [[96, "sympy.liealgebras.type_b.TypeB.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_c.typec method)": [[96, "sympy.liealgebras.type_c.TypeC.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_d.typed method)": [[96, "sympy.liealgebras.type_d.TypeD.lie_algebra"]], "matrix_form() (sympy.liealgebras.weyl_group.weylgroup method)": [[96, "sympy.liealgebras.weyl_group.WeylGroup.matrix_form"]], "positive_roots() (sympy.liealgebras.type_a.typea method)": [[96, "sympy.liealgebras.type_a.TypeA.positive_roots"]], "positive_roots() (sympy.liealgebras.type_b.typeb method)": [[96, "sympy.liealgebras.type_b.TypeB.positive_roots"]], "positive_roots() (sympy.liealgebras.type_c.typec method)": [[96, "sympy.liealgebras.type_c.TypeC.positive_roots"]], "positive_roots() (sympy.liealgebras.type_d.typed method)": [[96, "sympy.liealgebras.type_d.TypeD.positive_roots"]], "positive_roots() (sympy.liealgebras.type_e.typee method)": [[96, "sympy.liealgebras.type_e.TypeE.positive_roots"]], "positive_roots() (sympy.liealgebras.type_f.typef method)": [[96, "sympy.liealgebras.type_f.TypeF.positive_roots"]], "positive_roots() (sympy.liealgebras.type_g.typeg method)": [[96, "sympy.liealgebras.type_g.TypeG.positive_roots"]], "rank() (sympy.liealgebras.cartan_type.standard_cartan method)": [[96, "sympy.liealgebras.cartan_type.Standard_Cartan.rank"]], "root_space() (sympy.liealgebras.root_system.rootsystem method)": [[96, "sympy.liealgebras.root_system.RootSystem.root_space"]], "roots() (sympy.liealgebras.type_a.typea method)": [[96, "sympy.liealgebras.type_a.TypeA.roots"]], "roots() (sympy.liealgebras.type_b.typeb method)": [[96, "sympy.liealgebras.type_b.TypeB.roots"]], "roots() (sympy.liealgebras.type_c.typec method)": [[96, "sympy.liealgebras.type_c.TypeC.roots"]], "roots() (sympy.liealgebras.type_d.typed method)": [[96, "sympy.liealgebras.type_d.TypeD.roots"]], "roots() (sympy.liealgebras.type_e.typee method)": [[96, "sympy.liealgebras.type_e.TypeE.roots"]], "roots() (sympy.liealgebras.type_f.typef method)": [[96, "sympy.liealgebras.type_f.TypeF.roots"]], "roots() (sympy.liealgebras.type_g.typeg method)": [[96, "sympy.liealgebras.type_g.TypeG.roots"]], "series() (sympy.liealgebras.cartan_type.standard_cartan method)": [[96, "sympy.liealgebras.cartan_type.Standard_Cartan.series"]], "simple_root() (sympy.liealgebras.type_a.typea method)": [[96, "sympy.liealgebras.type_a.TypeA.simple_root"]], "simple_root() (sympy.liealgebras.type_b.typeb method)": [[96, "sympy.liealgebras.type_b.TypeB.simple_root"]], "simple_root() (sympy.liealgebras.type_c.typec method)": [[96, "sympy.liealgebras.type_c.TypeC.simple_root"]], "simple_root() (sympy.liealgebras.type_d.typed method)": [[96, "sympy.liealgebras.type_d.TypeD.simple_root"]], "simple_root() (sympy.liealgebras.type_e.typee method)": [[96, "sympy.liealgebras.type_e.TypeE.simple_root"]], "simple_root() (sympy.liealgebras.type_f.typef method)": [[96, "sympy.liealgebras.type_f.TypeF.simple_root"]], "simple_root() (sympy.liealgebras.type_g.typeg method)": [[96, "sympy.liealgebras.type_g.TypeG.simple_root"]], "simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[96, "sympy.liealgebras.root_system.RootSystem.simple_roots"]], "sympy.liealgebras": [[96, "module-sympy.liealgebras"]], "anfform() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.ANFform"]], "and (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.And"]], "boolean (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.Boolean"]], "booleanfalse (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.BooleanFalse"]], "booleantrue (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.BooleanTrue"]], "equivalent (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.Equivalent"]], "exclusive (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.Exclusive"]], "ite (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.ITE"]], "implies (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.Implies"]], "nand (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.Nand"]], "nor (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.Nor"]], "not (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.Not"]], "or (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.Or"]], "posform() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.POSform"]], "sopform() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.SOPform"]], "xnor (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.Xnor"]], "xor (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.Xor"]], "anf_coeffs() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.anf_coeffs"]], "as_set() (sympy.logic.boolalg.boolean method)": [[97, "sympy.logic.boolalg.Boolean.as_set"]], "as_set() (sympy.logic.boolalg.booleanfalse method)": [[97, "sympy.logic.boolalg.BooleanFalse.as_set"]], "as_set() (sympy.logic.boolalg.booleantrue method)": [[97, "sympy.logic.boolalg.BooleanTrue.as_set"]], "bool_map() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.bool_map"]], "bool_maxterm() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.bool_maxterm"]], "bool_minterm() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.bool_minterm"]], "bool_monomial() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.bool_monomial"]], "distribute_and_over_or() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.distribute_and_over_or"]], "distribute_or_over_and() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.distribute_or_over_and"]], "distribute_xor_over_and() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.distribute_xor_over_and"]], "eliminate_implications() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.eliminate_implications"]], "equals() (sympy.logic.boolalg.boolean method)": [[97, "sympy.logic.boolalg.Boolean.equals"]], "gateinputcount() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.gateinputcount"]], "integer_to_term() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.integer_to_term"]], "is_anf() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.is_anf"]], "is_cnf() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.is_cnf"]], "is_dnf() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.is_dnf"]], "is_nnf() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.is_nnf"]], "satisfiable() (in module sympy.logic.inference)": [[97, "sympy.logic.inference.satisfiable"]], "simplify_logic() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.simplify_logic"]], "sympy.logic": [[97, "module-sympy.logic"]], "sympy.logic.inference": [[97, "module-sympy.logic.inference"]], "term_to_integer() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.term_to_integer"]], "to_anf() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.to_anf"]], "to_cnf() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.to_cnf"]], "to_dnf() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.to_dnf"]], "to_int_repr() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.to_int_repr"]], "to_nnf() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.to_nnf"]], "truth_table() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.truth_table"]], "c (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.C"]], "h (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.H"]], "matrixcommon (class in sympy.matrices.common)": [[98, "sympy.matrices.common.MatrixCommon"]], "matrixkind (class in sympy.matrices.common)": [[98, "sympy.matrices.common.MatrixKind"]], "t (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.T"]], "__abs__() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.__abs__"]], "__add__() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.__add__"]], "__getitem__() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.__getitem__"]], "__len__() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.__len__"]], "__mul__() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.__mul__"]], "__pow__() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.__pow__"]], "__weakref__ (sympy.matrices.common.matrixcommon attribute)": [[98, "sympy.matrices.common.MatrixCommon.__weakref__"]], "adjoint() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.adjoint"]], "applyfunc() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.applyfunc"]], "as_real_imag() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.as_real_imag"]], "atoms() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.atoms"]], "col() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.col"]], "col_del() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.col_del"]], "col_insert() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.col_insert"]], "col_join() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.col_join"]], "companion() (sympy.matrices.common.matrixcommon class method)": [[98, "sympy.matrices.common.MatrixCommon.companion"]], "conjugate() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.conjugate"]], "diag() (sympy.matrices.common.matrixcommon class method)": [[98, "sympy.matrices.common.MatrixCommon.diag"]], "diagonal() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.diagonal"]], "evalf() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.evalf"]], "expand() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.expand"]], "extract() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.extract"]], "eye() (sympy.matrices.common.matrixcommon class method)": [[98, "sympy.matrices.common.MatrixCommon.eye"]], "free_symbols (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.free_symbols"]], "get_diag_blocks() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.get_diag_blocks"]], "has() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.has"]], "hstack() (sympy.matrices.common.matrixcommon class method)": [[98, "sympy.matrices.common.MatrixCommon.hstack"]], "is_anti_symmetric() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.is_anti_symmetric"]], "is_diagonal() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.is_diagonal"]], "is_hermitian (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.is_hermitian"]], "is_lower (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.is_lower"]], "is_lower_hessenberg (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.is_lower_hessenberg"]], "is_square (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.is_square"]], "is_strongly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.is_strongly_diagonally_dominant"]], "is_symbolic() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.is_symbolic"]], "is_symmetric() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.is_symmetric"]], "is_upper (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.is_upper"]], "is_upper_hessenberg (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.is_upper_hessenberg"]], "is_weakly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.is_weakly_diagonally_dominant"]], "is_zero_matrix (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.is_zero_matrix"]], "jordan_block() (sympy.matrices.common.matrixcommon class method)": [[98, "sympy.matrices.common.MatrixCommon.jordan_block"]], "lower_triangular() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.lower_triangular"]], "multiply() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.multiply"]], "multiply_elementwise() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.multiply_elementwise"]], "n() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.n"]], "ones() (sympy.matrices.common.matrixcommon class method)": [[98, "sympy.matrices.common.MatrixCommon.ones"]], "permute() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.permute"]], "permute_cols() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.permute_cols"]], "permute_rows() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.permute_rows"]], "pow() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.pow"]], "refine() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.refine"]], "replace() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.replace"]], "reshape() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.reshape"]], "rmultiply() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.rmultiply"]], "rot90() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.rot90"]], "row() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.row"]], "row_del() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.row_del"]], "row_insert() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.row_insert"]], "row_join() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.row_join"]], "shape (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.shape"]], "simplify() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.simplify"]], "subs() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.subs"]], "sympy.matrices.common": [[98, "module-sympy.matrices.common"]], "todod() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.todod"]], "todok() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.todok"]], "tolist() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.tolist"]], "trace() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.trace"]], "transpose() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.transpose"]], "upper_triangular() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.upper_triangular"]], "values() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.values"]], "vec() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.vec"]], "vech() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.vech"]], "vstack() (sympy.matrices.common.matrixcommon class method)": [[98, "sympy.matrices.common.MatrixCommon.vstack"]], "wilkinson() (sympy.matrices.common.matrixcommon class method)": [[98, "sympy.matrices.common.MatrixCommon.wilkinson"]], "xreplace() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.xreplace"]], "zeros() (sympy.matrices.common.matrixcommon class method)": [[98, "sympy.matrices.common.MatrixCommon.zeros"]], "densematrix (class in sympy.matrices.dense)": [[99, "sympy.matrices.dense.DenseMatrix"]], "ldldecomposition() (sympy.matrices.dense.densematrix method)": [[99, "sympy.matrices.dense.DenseMatrix.LDLdecomposition"]], "matrix (in module sympy.matrices.dense)": [[99, "sympy.matrices.dense.Matrix"]], "mutabledensematrix (class in sympy.matrices.dense)": [[99, "sympy.matrices.dense.MutableDenseMatrix"]], "as_immutable() (sympy.matrices.dense.densematrix method)": [[99, "sympy.matrices.dense.DenseMatrix.as_immutable"]], "as_mutable() (sympy.matrices.dense.densematrix method)": [[99, "sympy.matrices.dense.DenseMatrix.as_mutable"]], "cholesky() (sympy.matrices.dense.densematrix method)": [[99, "sympy.matrices.dense.DenseMatrix.cholesky"]], "lower_triangular_solve() (sympy.matrices.dense.densematrix method)": [[99, "sympy.matrices.dense.DenseMatrix.lower_triangular_solve"]], "simplify() (sympy.matrices.dense.mutabledensematrix method)": [[99, "sympy.matrices.dense.MutableDenseMatrix.simplify"]], "upper_triangular_solve() (sympy.matrices.dense.densematrix method)": [[99, "sympy.matrices.dense.DenseMatrix.upper_triangular_solve"]], "blockdiagmatrix (class in sympy.matrices.expressions.blockmatrix)": [[100, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix"]], "blockmatrix (class in sympy.matrices.expressions.blockmatrix)": [[100, "sympy.matrices.expressions.blockmatrix.BlockMatrix"]], "companionmatrix (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.CompanionMatrix"]], "functionmatrix (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.FunctionMatrix"]], "hadamardpower (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.HadamardPower"]], "hadamardproduct (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.HadamardProduct"]], "identity (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.Identity"]], "inverse (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.Inverse"]], "ldudecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[100, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LDUdecomposition"]], "ludecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[100, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LUdecomposition"]], "matadd (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.MatAdd"]], "matmul (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.MatMul"]], "matpow (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.MatPow"]], "matrixexpr (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.MatrixExpr"]], "matrixpermute (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.MatrixPermute"]], "matrixset (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.MatrixSet"]], "matrixsymbol (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.MatrixSymbol"]], "permutationmatrix (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.PermutationMatrix"]], "t (sympy.matrices.expressions.matrixexpr property)": [[100, "sympy.matrices.expressions.MatrixExpr.T"]], "trace (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.Trace"]], "transpose (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.Transpose"]], "udldecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[100, "sympy.matrices.expressions.blockmatrix.BlockMatrix.UDLdecomposition"]], "zeromatrix (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.ZeroMatrix"]], "as_coeff_mul() (sympy.matrices.expressions.matrixexpr method)": [[100, "sympy.matrices.expressions.MatrixExpr.as_coeff_Mul"]], "as_explicit() (sympy.matrices.expressions.matrixexpr method)": [[100, "sympy.matrices.expressions.MatrixExpr.as_explicit"]], "as_mutable() (sympy.matrices.expressions.matrixexpr method)": [[100, "sympy.matrices.expressions.MatrixExpr.as_mutable"]], "block_collapse() (in module sympy.matrices.expressions.blockmatrix)": [[100, "sympy.matrices.expressions.blockmatrix.block_collapse"]], "equals() (sympy.matrices.expressions.matrixexpr method)": [[100, "sympy.matrices.expressions.MatrixExpr.equals"]], "from_index_summation() (sympy.matrices.expressions.matrixexpr static method)": [[100, "sympy.matrices.expressions.MatrixExpr.from_index_summation"]], "get_diag_blocks() (sympy.matrices.expressions.blockmatrix.blockdiagmatrix method)": [[100, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.get_diag_blocks"]], "hadamard_product() (in module sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.hadamard_product"]], "schur() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[100, "sympy.matrices.expressions.blockmatrix.BlockMatrix.schur"]], "sympy.matrices.expressions": [[100, "module-sympy.matrices.expressions"]], "sympy.matrices.expressions.blockmatrix": [[100, "module-sympy.matrices.expressions.blockmatrix"]], "transpose() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[100, "sympy.matrices.expressions.blockmatrix.BlockMatrix.transpose"]], "immutabledensematrix (class in sympy.matrices.immutable)": [[101, "sympy.matrices.immutable.ImmutableDenseMatrix"]], "immutablematrix (in module sympy.matrices.immutable)": [[101, "sympy.matrices.immutable.ImmutableMatrix"]], "sympy.matrices.immutable": [[101, "module-sympy.matrices.immutable"]], "sympy.matrices": [[102, "module-sympy.matrices"]], "d (sympy.matrices.matrices.matrixbase property)": [[103, "sympy.matrices.matrices.MatrixBase.D"]], "gramschmidt() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.GramSchmidt"]], "ldldecomposition() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.LDLdecomposition"]], "ldlsolve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.LDLsolve"]], "ludecomposition() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.LUdecomposition"]], "ludecompositionff() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.LUdecompositionFF"]], "ludecomposition_simple() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.LUdecomposition_Simple"]], "lusolve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.LUsolve"]], "matrixbase (class in sympy.matrices.matrices)": [[103, "sympy.matrices.matrices.MatrixBase"]], "matrixcalculus (class in sympy.matrices.matrices)": [[103, "sympy.matrices.matrices.MatrixCalculus"]], "matrixdeterminant (class in sympy.matrices.matrices)": [[103, "sympy.matrices.matrices.MatrixDeterminant"]], "matrixeigen (class in sympy.matrices.matrices)": [[103, "sympy.matrices.matrices.MatrixEigen"]], "matrixerror (class in sympy.matrices.matrices)": [[103, "sympy.matrices.matrices.MatrixError"]], "matrixreductions (class in sympy.matrices.matrices)": [[103, "sympy.matrices.matrices.MatrixReductions"]], "matrixsubspaces (class in sympy.matrices.matrices)": [[103, "sympy.matrices.matrices.MatrixSubspaces"]], "nonsquarematrixerror (class in sympy.matrices.matrices)": [[103, "sympy.matrices.matrices.NonSquareMatrixError"]], "qrdecomposition() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.QRdecomposition"]], "qrsolve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.QRsolve"]], "shapeerror (class in sympy.matrices.matrices)": [[103, "sympy.matrices.matrices.ShapeError"]], "a2idx() (in module sympy.matrices.matrices)": [[103, "sympy.matrices.matrices.a2idx"]], "add() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.add"]], "adjugate() (sympy.matrices.matrices.matrixdeterminant method)": [[103, "sympy.matrices.matrices.MatrixDeterminant.adjugate"]], "analytic_func() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.analytic_func"]], "bidiagonal_decomposition() (sympy.matrices.matrices.matrixeigen method)": [[103, "sympy.matrices.matrices.MatrixEigen.bidiagonal_decomposition"]], "bidiagonalize() (sympy.matrices.matrices.matrixeigen method)": [[103, "sympy.matrices.matrices.MatrixEigen.bidiagonalize"]], "casoratian() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.casoratian"]], "charpoly() (sympy.matrices.matrices.matrixdeterminant method)": [[103, "sympy.matrices.matrices.MatrixDeterminant.charpoly"]], "cholesky() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.cholesky"]], "cholesky_solve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.cholesky_solve"]], "cofactor() (sympy.matrices.matrices.matrixdeterminant method)": [[103, "sympy.matrices.matrices.MatrixDeterminant.cofactor"]], "cofactor_matrix() (sympy.matrices.matrices.matrixdeterminant method)": [[103, "sympy.matrices.matrices.MatrixDeterminant.cofactor_matrix"]], "columnspace() (sympy.matrices.matrices.matrixsubspaces method)": [[103, "sympy.matrices.matrices.MatrixSubspaces.columnspace"]], "condition_number() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.condition_number"]], "connected_components() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.connected_components"]], "connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.connected_components_decomposition"]], "copy() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.copy"]], "cramer_solve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.cramer_solve"]], "cross() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.cross"]], "det() (sympy.matrices.matrices.matrixdeterminant method)": [[103, "sympy.matrices.matrices.MatrixDeterminant.det"]], "diag() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.diag"]], "diagonal_solve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.diagonal_solve"]], "diagonalize() (sympy.matrices.matrices.matrixeigen method)": [[103, "sympy.matrices.matrices.MatrixEigen.diagonalize"]], "diff() (sympy.matrices.matrices.matrixcalculus method)": [[103, "sympy.matrices.matrices.MatrixCalculus.diff"]], "dot() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.dot"]], "dual() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.dual"]], "echelon_form() (sympy.matrices.matrices.matrixreductions method)": [[103, "sympy.matrices.matrices.MatrixReductions.echelon_form"]], "eigenvals() (sympy.matrices.matrices.matrixeigen method)": [[103, "sympy.matrices.matrices.MatrixEigen.eigenvals"]], "eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[103, "sympy.matrices.matrices.MatrixEigen.eigenvects"]], "elementary_col_op() (sympy.matrices.matrices.matrixreductions method)": [[103, "sympy.matrices.matrices.MatrixReductions.elementary_col_op"]], "elementary_row_op() (sympy.matrices.matrices.matrixreductions method)": [[103, "sympy.matrices.matrices.MatrixReductions.elementary_row_op"]], "exp() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.exp"]], "eye() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.eye"]], "gauss_jordan_solve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.gauss_jordan_solve"]], "hat() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.hat"]], "hessian() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.hessian"]], "integrate() (sympy.matrices.matrices.matrixcalculus method)": [[103, "sympy.matrices.matrices.MatrixCalculus.integrate"]], "inv() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.inv"]], "inv_mod() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.inv_mod"]], "inverse_adj() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.inverse_ADJ"]], "inverse_block() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.inverse_BLOCK"]], "inverse_ch() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.inverse_CH"]], "inverse_ge() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.inverse_GE"]], "inverse_ldl() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.inverse_LDL"]], "inverse_lu() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.inverse_LU"]], "inverse_qr() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.inverse_QR"]], "irregular() (sympy.matrices.matrices.matrixbase class method)": [[103, "sympy.matrices.matrices.MatrixBase.irregular"]], "is_diagonalizable() (sympy.matrices.matrices.matrixeigen method)": [[103, "sympy.matrices.matrices.MatrixEigen.is_diagonalizable"]], "is_echelon (sympy.matrices.matrices.matrixreductions property)": [[103, "sympy.matrices.matrices.MatrixReductions.is_echelon"]], "is_indefinite (sympy.matrices.matrices.matrixeigen property)": [[103, "sympy.matrices.matrices.MatrixEigen.is_indefinite"]], "is_negative_definite (sympy.matrices.matrices.matrixeigen property)": [[103, "sympy.matrices.matrices.MatrixEigen.is_negative_definite"]], "is_negative_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[103, "sympy.matrices.matrices.MatrixEigen.is_negative_semidefinite"]], "is_nilpotent() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.is_nilpotent"]], "is_positive_definite (sympy.matrices.matrices.matrixeigen property)": [[103, "sympy.matrices.matrices.MatrixEigen.is_positive_definite"]], "is_positive_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[103, "sympy.matrices.matrices.MatrixEigen.is_positive_semidefinite"]], "jacobian() (sympy.matrices.matrices.matrixcalculus method)": [[103, "sympy.matrices.matrices.MatrixCalculus.jacobian"]], "jordan_cell() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.jordan_cell"]], "jordan_form() (sympy.matrices.matrices.matrixeigen method)": [[103, "sympy.matrices.matrices.MatrixEigen.jordan_form"]], "key2bounds() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.key2bounds"]], "key2ij() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.key2ij"]], "left_eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[103, "sympy.matrices.matrices.MatrixEigen.left_eigenvects"]], "limit() (sympy.matrices.matrices.matrixcalculus method)": [[103, "sympy.matrices.matrices.MatrixCalculus.limit"]], "list2numpy() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.list2numpy"]], "log() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.log"]], "lower_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.lower_triangular_solve"]], "matrix2numpy() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.matrix2numpy"]], "matrix_multiply_elementwise() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.matrix_multiply_elementwise"]], "minor() (sympy.matrices.matrices.matrixdeterminant method)": [[103, "sympy.matrices.matrices.MatrixDeterminant.minor"]], "minor_submatrix() (sympy.matrices.matrices.matrixdeterminant method)": [[103, "sympy.matrices.matrices.MatrixDeterminant.minor_submatrix"]], "norm() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.norm"]], "normalized() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.normalized"]], "nullspace() (sympy.matrices.matrices.matrixsubspaces method)": [[103, "sympy.matrices.matrices.MatrixSubspaces.nullspace"]], "ones() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.ones"]], "orthogonalize() (sympy.matrices.matrices.matrixsubspaces class method)": [[103, "sympy.matrices.matrices.MatrixSubspaces.orthogonalize"]], "per() (sympy.matrices.matrices.matrixdeterminant method)": [[103, "sympy.matrices.matrices.MatrixDeterminant.per"]], "pinv() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.pinv"]], "pinv_solve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.pinv_solve"]], "print_nonzero() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.print_nonzero"]], "project() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.project"]], "randmatrix() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.randMatrix"]], "rank() (sympy.matrices.matrices.matrixreductions method)": [[103, "sympy.matrices.matrices.MatrixReductions.rank"]], "rank_decomposition() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.rank_decomposition"]], "rot_axis1() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.rot_axis1"]], "rot_axis2() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.rot_axis2"]], "rot_axis3() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.rot_axis3"]], "rot_ccw_axis1() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.rot_ccw_axis1"]], "rot_ccw_axis2() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.rot_ccw_axis2"]], "rot_ccw_axis3() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.rot_ccw_axis3"]], "rot_givens() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.rot_givens"]], "rowspace() (sympy.matrices.matrices.matrixsubspaces method)": [[103, "sympy.matrices.matrices.MatrixSubspaces.rowspace"]], "rref() (sympy.matrices.matrices.matrixreductions method)": [[103, "sympy.matrices.matrices.MatrixReductions.rref"]], "singular_value_decomposition() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.singular_value_decomposition"]], "singular_values() (sympy.matrices.matrices.matrixeigen method)": [[103, "sympy.matrices.matrices.MatrixEigen.singular_values"]], "solve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.solve"]], "solve_least_squares() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.solve_least_squares"]], "strongly_connected_components() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.strongly_connected_components"]], "strongly_connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.strongly_connected_components_decomposition"]], "symarray() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.symarray"]], "sympy.matrices.matrices": [[103, "module-sympy.matrices.matrices"]], "table() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.table"]], "upper_hessenberg_decomposition() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.upper_hessenberg_decomposition"]], "upper_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.upper_triangular_solve"]], "vee() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.vee"]], "wronskian() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.wronskian"]], "zeros() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.zeros"]], "hermite_normal_form() (in module sympy.matrices.normalforms)": [[104, "sympy.matrices.normalforms.hermite_normal_form"]], "smith_normal_form() (in module sympy.matrices.normalforms)": [[104, "sympy.matrices.normalforms.smith_normal_form"]], "immutablesparsematrix (class in sympy.matrices.immutable)": [[105, "sympy.matrices.immutable.ImmutableSparseMatrix"]], "mutablesparsematrix (class in sympy.matrices.sparse)": [[105, "sympy.matrices.sparse.MutableSparseMatrix"]], "sparsematrix (in module sympy.matrices.sparse)": [[105, "sympy.matrices.sparse.SparseMatrix"]], "sympy.matrices.sparse": [[105, "module-sympy.matrices.sparse"]], "_csrtodok() (in module sympy.matrices.sparsetools)": [[106, "sympy.matrices.sparsetools._csrtodok"]], "_doktocsr() (in module sympy.matrices.sparsetools)": [[106, "sympy.matrices.sparsetools._doktocsr"]], "banded() (in module sympy.matrices.sparsetools)": [[106, "sympy.matrices.sparsetools.banded"]], "sympy.matrices.sparsetools": [[106, "module-sympy.matrices.sparsetools"]], "sieve (class in sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.Sieve"]], "abundance() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.abundance"]], "antidivisor_count() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.antidivisor_count"]], "antidivisors() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.antidivisors"]], "binomial_coefficients() (in module sympy.ntheory.multinomial)": [[107, "sympy.ntheory.multinomial.binomial_coefficients"]], "binomial_coefficients_list() (in module sympy.ntheory.multinomial)": [[107, "sympy.ntheory.multinomial.binomial_coefficients_list"]], "binomial_mod() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.binomial_mod"]], "composite() (in module sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.composite"]], "compositepi() (in module sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.compositepi"]], "continued_fraction() (in module sympy.ntheory.continued_fraction)": [[107, "sympy.ntheory.continued_fraction.continued_fraction"]], "continued_fraction_convergents() (in module sympy.ntheory.continued_fraction)": [[107, "sympy.ntheory.continued_fraction.continued_fraction_convergents"]], "continued_fraction_iterator() (in module sympy.ntheory.continued_fraction)": [[107, "sympy.ntheory.continued_fraction.continued_fraction_iterator"]], "continued_fraction_periodic() (in module sympy.ntheory.continued_fraction)": [[107, "sympy.ntheory.continued_fraction.continued_fraction_periodic"]], "continued_fraction_reduce() (in module sympy.ntheory.continued_fraction)": [[107, "sympy.ntheory.continued_fraction.continued_fraction_reduce"]], "core() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.core"]], "count_digits() (in module sympy.ntheory.digits)": [[107, "sympy.ntheory.digits.count_digits"]], "crt() (in module sympy.ntheory.modular)": [[107, "sympy.ntheory.modular.crt"]], "crt1() (in module sympy.ntheory.modular)": [[107, "sympy.ntheory.modular.crt1"]], "crt2() (in module sympy.ntheory.modular)": [[107, "sympy.ntheory.modular.crt2"]], "cycle_length() (in module sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.cycle_length"]], "digits() (in module sympy.ntheory.digits)": [[107, "sympy.ntheory.digits.digits"]], "digits() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.digits"]], "discrete_log() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.discrete_log"]], "divisor_count() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.divisor_count"]], "divisor_sigma (class in sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.divisor_sigma"]], "divisors() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.divisors"]], "ecm() (in module sympy.ntheory.ecm)": [[107, "sympy.ntheory.ecm.ecm"]], "egyptian_fraction() (in module sympy.ntheory.egyptian_fraction)": [[107, "sympy.ntheory.egyptian_fraction.egyptian_fraction"]], "extend() (sympy.ntheory.generate.sieve method)": [[107, "sympy.ntheory.generate.Sieve.extend"]], "extend_to_no() (sympy.ntheory.generate.sieve method)": [[107, "sympy.ntheory.generate.Sieve.extend_to_no"]], "factorint() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.factorint"]], "factorrat() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.factorrat"]], "is_abundant() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.is_abundant"]], "is_amicable() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.is_amicable"]], "is_deficient() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.is_deficient"]], "is_euler_pseudoprime() (in module sympy.ntheory.primetest)": [[107, "sympy.ntheory.primetest.is_euler_pseudoprime"]], "is_extra_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[107, "sympy.ntheory.primetest.is_extra_strong_lucas_prp"]], "is_gaussian_prime() (in module sympy.ntheory.primetest)": [[107, "sympy.ntheory.primetest.is_gaussian_prime"]], "is_lucas_prp() (in module sympy.ntheory.primetest)": [[107, "sympy.ntheory.primetest.is_lucas_prp"]], "is_mersenne_prime() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.is_mersenne_prime"]], "is_nthpow_residue() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.is_nthpow_residue"]], "is_palindromic() (in module sympy.ntheory.digits)": [[107, "sympy.ntheory.digits.is_palindromic"]], "is_perfect() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.is_perfect"]], "is_primitive_root() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.is_primitive_root"]], "is_quad_residue() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.is_quad_residue"]], "is_square() (in module sympy.ntheory.primetest)": [[107, "sympy.ntheory.primetest.is_square"]], "is_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[107, "sympy.ntheory.primetest.is_strong_lucas_prp"]], "isprime() (in module sympy.ntheory.primetest)": [[107, "sympy.ntheory.primetest.isprime"]], "jacobi_symbol() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.jacobi_symbol"]], "kronecker_symbol() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.kronecker_symbol"]], "legendre_symbol() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.legendre_symbol"]], "mersenne_prime_exponent() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.mersenne_prime_exponent"]], "mobius (class in sympy.ntheory)": [[107, "sympy.ntheory.mobius"]], "mobiusrange() (sympy.ntheory.generate.sieve method)": [[107, "sympy.ntheory.generate.Sieve.mobiusrange"]], "mr() (in module sympy.ntheory.primetest)": [[107, "sympy.ntheory.primetest.mr"]], "multinomial_coefficients() (in module sympy.ntheory.multinomial)": [[107, "sympy.ntheory.multinomial.multinomial_coefficients"]], "multinomial_coefficients_iterator() (in module sympy.ntheory.multinomial)": [[107, "sympy.ntheory.multinomial.multinomial_coefficients_iterator"]], "multiplicity() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.multiplicity"]], "n_order() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.n_order"]], "nextprime() (in module sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.nextprime"]], "npartitions() (in module sympy.ntheory.partitions_)": [[107, "sympy.ntheory.partitions_.npartitions"]], "nthroot_mod() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.nthroot_mod"]], "perfect_power() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.perfect_power"]], "pi_hex_digits() (in module sympy.ntheory.bbp_pi)": [[107, "sympy.ntheory.bbp_pi.pi_hex_digits"]], "pollard_pm1() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.pollard_pm1"]], "pollard_rho() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.pollard_rho"]], "polynomial_congruence() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.polynomial_congruence"]], "prevprime() (in module sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.prevprime"]], "prime() (in module sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.prime"]], "primefactors() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.primefactors"]], "primenu (class in sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.primenu"]], "primeomega (class in sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.primeomega"]], "primepi() (in module sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.primepi"]], "primerange() (in module sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.primerange"]], "primerange() (sympy.ntheory.generate.sieve method)": [[107, "sympy.ntheory.generate.Sieve.primerange"]], "primitive_root() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.primitive_root"]], "primorial() (in module sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.primorial"]], "proper_divisor_count() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.proper_divisor_count"]], "proper_divisors() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.proper_divisors"]], "qs() (in module sympy.ntheory.qs)": [[107, "sympy.ntheory.qs.qs"]], "quadratic_congruence() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.quadratic_congruence"]], "quadratic_residues() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.quadratic_residues"]], "randprime() (in module sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.randprime"]], "reduced_totient (class in sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.reduced_totient"]], "search() (sympy.ntheory.generate.sieve method)": [[107, "sympy.ntheory.generate.Sieve.search"]], "smoothness() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.smoothness"]], "smoothness_p() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.smoothness_p"]], "solve_congruence() (in module sympy.ntheory.modular)": [[107, "sympy.ntheory.modular.solve_congruence"]], "sqrt_mod() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.sqrt_mod"]], "sqrt_mod_iter() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.sqrt_mod_iter"]], "symmetric_residue() (in module sympy.ntheory.modular)": [[107, "sympy.ntheory.modular.symmetric_residue"]], "sympy.ntheory.bbp_pi": [[107, "module-sympy.ntheory.bbp_pi"]], "sympy.ntheory.continued_fraction": [[107, "module-sympy.ntheory.continued_fraction"]], "sympy.ntheory.digits": [[107, "module-sympy.ntheory.digits"]], "sympy.ntheory.ecm": [[107, "module-sympy.ntheory.ecm"]], "sympy.ntheory.egyptian_fraction": [[107, "module-sympy.ntheory.egyptian_fraction"]], "sympy.ntheory.factor_": [[107, "module-sympy.ntheory.factor_"]], "sympy.ntheory.generate": [[107, "module-sympy.ntheory.generate"]], "sympy.ntheory.modular": [[107, "module-sympy.ntheory.modular"]], "sympy.ntheory.multinomial": [[107, "module-sympy.ntheory.multinomial"]], "sympy.ntheory.partitions_": [[107, "module-sympy.ntheory.partitions_"]], "sympy.ntheory.primetest": [[107, "module-sympy.ntheory.primetest"]], "sympy.ntheory.qs": [[107, "module-sympy.ntheory.qs"]], "sympy.ntheory.residue_ntheory": [[107, "module-sympy.ntheory.residue_ntheory"]], "totient (class in sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.totient"]], "totientrange() (sympy.ntheory.generate.sieve method)": [[107, "sympy.ntheory.generate.Sieve.totientrange"]], "trailing() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.trailing"]], "udivisor_count() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.udivisor_count"]], "udivisor_sigma (class in sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.udivisor_sigma"]], "udivisors() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.udivisors"]], "latexparsingerror (class in sympy.parsing.latex)": [[109, "sympy.parsing.latex.LaTeXParsingError"]], "sympyexpression (class in sympy.parsing.sym_expr)": [[109, "sympy.parsing.sym_expr.SymPyExpression"]], "auto_number() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.auto_number"]], "auto_symbol() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.auto_symbol"]], "convert_to_c() (sympy.parsing.sym_expr.sympyexpression method)": [[109, "sympy.parsing.sym_expr.SymPyExpression.convert_to_c"]], "convert_to_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[109, "sympy.parsing.sym_expr.SymPyExpression.convert_to_expr"]], "convert_to_fortran() (sympy.parsing.sym_expr.sympyexpression method)": [[109, "sympy.parsing.sym_expr.SymPyExpression.convert_to_fortran"]], "convert_to_python() (sympy.parsing.sym_expr.sympyexpression method)": [[109, "sympy.parsing.sym_expr.SymPyExpression.convert_to_python"]], "convert_xor() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.convert_xor"]], "eval_expr() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.eval_expr"]], "factorial_notation() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.factorial_notation"]], "function_exponentiation() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.function_exponentiation"]], "implicit_application() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.implicit_application"]], "implicit_multiplication() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.implicit_multiplication"]], "implicit_multiplication_application() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.implicit_multiplication_application"]], "lambda_notation() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.lambda_notation"]], "parse_expr() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.parse_expr"]], "parse_latex() (in module sympy.parsing.latex)": [[109, "sympy.parsing.latex.parse_latex"]], "parse_mathematica() (in module sympy.parsing.mathematica)": [[109, "sympy.parsing.mathematica.parse_mathematica"]], "parse_maxima() (in module sympy.parsing.maxima)": [[109, "sympy.parsing.maxima.parse_maxima"]], "rationalize() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.rationalize"]], "repeated_decimals() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.repeated_decimals"]], "return_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[109, "sympy.parsing.sym_expr.SymPyExpression.return_expr"]], "split_symbols() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.split_symbols"]], "split_symbols_custom() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.split_symbols_custom"]], "standard_transformations (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.standard_transformations"]], "stringify_expr() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.stringify_expr"]], "sympy.parsing": [[109, "module-sympy.parsing"]], "sympy.parsing.sym_expr": [[109, "module-sympy.parsing.sym_expr"]], "beam (class in sympy.physics.continuum_mechanics.beam)": [[110, "sympy.physics.continuum_mechanics.beam.Beam"]], "beam3d (class in sympy.physics.continuum_mechanics.beam)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D"]], "angular_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.angular_deflection"]], "applied_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.applied_loads"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.apply_load"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_load"]], "apply_moment_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_moment_load"]], "apply_support() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.apply_support"]], "area (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.area"]], "area (sympy.physics.continuum_mechanics.beam.beam3d property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.area"]], "axial_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_force"]], "axial_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_stress"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.bending_moment"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.bending_moment"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.boundary_conditions"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam3d property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.boundary_conditions"]], "cross_section (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.cross_section"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.deflection"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.deflection"]], "draw() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.draw"]], "elastic_modulus (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.elastic_modulus"]], "ild_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.ild_moment"]], "ild_reactions (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.ild_reactions"]], "ild_shear (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.ild_shear"]], "join() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.join"]], "length (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.length"]], "load (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.load"]], "load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.load_vector"]], "max_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bending_moment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.max_bmoment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bmoment"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.max_deflection"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.max_deflection"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.max_shear_force"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.max_shear_force"]], "moment_load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.moment_load_vector"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.plot_bending_moment"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_bending_moment"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.plot_deflection"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_deflection"]], "plot_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_moment"]], "plot_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_reactions"]], "plot_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_shear"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.plot_loading_results"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_loading_results"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_force"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_force"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_stress"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_stress"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.plot_slope"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_slope"]], "point_cflexure() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.point_cflexure"]], "polar_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.polar_moment"]], "reaction_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.remove_load"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.second_moment"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam3d property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.second_moment"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.shear_force"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_force"]], "shear_modulus (sympy.physics.continuum_mechanics.beam.beam3d property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_modulus"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.shear_stress"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_stress"]], "slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.slope"]], "slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.slope"]], "solve_for_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_moment"]], "solve_for_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_reactions"]], "solve_for_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_shear"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_reaction_loads"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_reaction_loads"]], "solve_for_torsion() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_torsion"]], "sympy.physics.continuum_mechanics.beam": [[110, "module-sympy.physics.continuum_mechanics.beam"]], "torsional_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.torsional_moment"]], "variable (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.variable"]], "cable (class in sympy.physics.continuum_mechanics.cable)": [[112, "sympy.physics.continuum_mechanics.cable.Cable"]], "apply_length() (sympy.physics.continuum_mechanics.cable.cable method)": [[112, "sympy.physics.continuum_mechanics.cable.Cable.apply_length"]], "apply_load() (sympy.physics.continuum_mechanics.cable.cable method)": [[112, "sympy.physics.continuum_mechanics.cable.Cable.apply_load"]], "change_support() (sympy.physics.continuum_mechanics.cable.cable method)": [[112, "sympy.physics.continuum_mechanics.cable.Cable.change_support"]], "left_support (sympy.physics.continuum_mechanics.cable.cable property)": [[112, "sympy.physics.continuum_mechanics.cable.Cable.left_support"]], "length (sympy.physics.continuum_mechanics.cable.cable property)": [[112, "sympy.physics.continuum_mechanics.cable.Cable.length"]], "loads (sympy.physics.continuum_mechanics.cable.cable property)": [[112, "sympy.physics.continuum_mechanics.cable.Cable.loads"]], "loads_position (sympy.physics.continuum_mechanics.cable.cable property)": [[112, "sympy.physics.continuum_mechanics.cable.Cable.loads_position"]], "reaction_loads (sympy.physics.continuum_mechanics.cable.cable property)": [[112, "sympy.physics.continuum_mechanics.cable.Cable.reaction_loads"]], "remove_loads() (sympy.physics.continuum_mechanics.cable.cable method)": [[112, "sympy.physics.continuum_mechanics.cable.Cable.remove_loads"]], "right_support (sympy.physics.continuum_mechanics.cable.cable property)": [[112, "sympy.physics.continuum_mechanics.cable.Cable.right_support"]], "supports (sympy.physics.continuum_mechanics.cable.cable property)": [[112, "sympy.physics.continuum_mechanics.cable.Cable.supports"]], "sympy.physics.continuum_mechanics.cable": [[112, "module-sympy.physics.continuum_mechanics.cable"]], "truss (class in sympy.physics.continuum_mechanics.truss)": [[114, "sympy.physics.continuum_mechanics.truss.Truss"]], "add_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.add_member"]], "add_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.add_node"]], "apply_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.apply_load"]], "apply_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.apply_support"]], "change_member_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.change_member_label"]], "change_node_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.change_node_label"]], "draw() (sympy.physics.continuum_mechanics.truss.truss method)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.draw"]], "internal_forces (sympy.physics.continuum_mechanics.truss.truss property)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.internal_forces"]], "loads (sympy.physics.continuum_mechanics.truss.truss property)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.loads"]], "member_lengths (sympy.physics.continuum_mechanics.truss.truss property)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.member_lengths"]], "members (sympy.physics.continuum_mechanics.truss.truss property)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.members"]], "node_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.node_labels"]], "node_positions (sympy.physics.continuum_mechanics.truss.truss property)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.node_positions"]], "nodes (sympy.physics.continuum_mechanics.truss.truss property)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.nodes"]], "reaction_loads (sympy.physics.continuum_mechanics.truss.truss property)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.remove_load"]], "remove_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.remove_member"]], "remove_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.remove_node"]], "remove_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.remove_support"]], "solve() (sympy.physics.continuum_mechanics.truss.truss method)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.solve"]], "supports (sympy.physics.continuum_mechanics.truss.truss property)": [[114, "sympy.physics.continuum_mechanics.truss.Truss.supports"]], "sympy.physics.continuum_mechanics.truss": [[114, "module-sympy.physics.continuum_mechanics.truss"]], "bode_magnitude_numerical_data() (sympy.physics.control.control_plots method)": [[116, "sympy.physics.control.control_plots.bode_magnitude_numerical_data"]], "bode_magnitude_plot() (sympy.physics.control.control_plots method)": [[116, "sympy.physics.control.control_plots.bode_magnitude_plot"]], "bode_phase_numerical_data() (sympy.physics.control.control_plots method)": [[116, "sympy.physics.control.control_plots.bode_phase_numerical_data"]], "bode_phase_plot() (sympy.physics.control.control_plots method)": [[116, "sympy.physics.control.control_plots.bode_phase_plot"]], "bode_plot() (sympy.physics.control.control_plots method)": [[116, "sympy.physics.control.control_plots.bode_plot"]], "impulse_response_numerical_data() (sympy.physics.control.control_plots method)": [[116, "sympy.physics.control.control_plots.impulse_response_numerical_data"]], "impulse_response_plot() (sympy.physics.control.control_plots method)": [[116, "sympy.physics.control.control_plots.impulse_response_plot"]], "pole_zero_numerical_data() (sympy.physics.control.control_plots method)": [[116, "sympy.physics.control.control_plots.pole_zero_numerical_data"]], "pole_zero_plot() (sympy.physics.control.control_plots method)": [[116, "sympy.physics.control.control_plots.pole_zero_plot"]], "ramp_response_numerical_data() (sympy.physics.control.control_plots method)": [[116, "sympy.physics.control.control_plots.ramp_response_numerical_data"]], "ramp_response_plot() (sympy.physics.control.control_plots method)": [[116, "sympy.physics.control.control_plots.ramp_response_plot"]], "step_response_numerical_data() (sympy.physics.control.control_plots method)": [[116, "sympy.physics.control.control_plots.step_response_numerical_data"]], "step_response_plot() (sympy.physics.control.control_plots method)": [[116, "sympy.physics.control.control_plots.step_response_plot"]], "sympy.physics.control": [[117, "module-sympy.physics.control"]], "feedback (class in sympy.physics.control.lti)": [[118, "sympy.physics.control.lti.Feedback"]], "mimofeedback (class in sympy.physics.control.lti)": [[118, "sympy.physics.control.lti.MIMOFeedback"]], "mimoparallel (class in sympy.physics.control.lti)": [[118, "sympy.physics.control.lti.MIMOParallel"]], "mimoseries (class in sympy.physics.control.lti)": [[118, "sympy.physics.control.lti.MIMOSeries"]], "parallel (class in sympy.physics.control.lti)": [[118, "sympy.physics.control.lti.Parallel"]], "series (class in sympy.physics.control.lti)": [[118, "sympy.physics.control.lti.Series"]], "transferfunction (class in sympy.physics.control.lti)": [[118, "sympy.physics.control.lti.TransferFunction"]], "transferfunctionmatrix (class in sympy.physics.control.lti)": [[118, "sympy.physics.control.lti.TransferFunctionMatrix"]], "backward_diff() (in module sympy.physics.control.lti)": [[118, "sympy.physics.control.lti.backward_diff"]], "bilinear() (in module sympy.physics.control.lti)": [[118, "sympy.physics.control.lti.bilinear"]], "dc_gain() (sympy.physics.control.lti.transferfunction method)": [[118, "sympy.physics.control.lti.TransferFunction.dc_gain"]], "den (sympy.physics.control.lti.transferfunction property)": [[118, "sympy.physics.control.lti.TransferFunction.den"]], "doit() (sympy.physics.control.lti.feedback method)": [[118, "sympy.physics.control.lti.Feedback.doit"]], "doit() (sympy.physics.control.lti.mimofeedback method)": [[118, "sympy.physics.control.lti.MIMOFeedback.doit"]], "doit() (sympy.physics.control.lti.mimoparallel method)": [[118, "sympy.physics.control.lti.MIMOParallel.doit"]], "doit() (sympy.physics.control.lti.mimoseries method)": [[118, "sympy.physics.control.lti.MIMOSeries.doit"]], "doit() (sympy.physics.control.lti.parallel method)": [[118, "sympy.physics.control.lti.Parallel.doit"]], "doit() (sympy.physics.control.lti.series method)": [[118, "sympy.physics.control.lti.Series.doit"]], "elem_poles() (sympy.physics.control.lti.transferfunctionmatrix method)": [[118, "sympy.physics.control.lti.TransferFunctionMatrix.elem_poles"]], "elem_zeros() (sympy.physics.control.lti.transferfunctionmatrix method)": [[118, "sympy.physics.control.lti.TransferFunctionMatrix.elem_zeros"]], "expand() (sympy.physics.control.lti.transferfunction method)": [[118, "sympy.physics.control.lti.TransferFunction.expand"]], "expand() (sympy.physics.control.lti.transferfunctionmatrix method)": [[118, "sympy.physics.control.lti.TransferFunctionMatrix.expand"]], "forward_diff() (in module sympy.physics.control.lti)": [[118, "sympy.physics.control.lti.forward_diff"]], "from_matrix() (sympy.physics.control.lti.transferfunctionmatrix class method)": [[118, "sympy.physics.control.lti.TransferFunctionMatrix.from_Matrix"]], "from_coeff_lists() (sympy.physics.control.lti.transferfunction class method)": [[118, "sympy.physics.control.lti.TransferFunction.from_coeff_lists"]], "from_rational_expression() (sympy.physics.control.lti.transferfunction class method)": [[118, "sympy.physics.control.lti.TransferFunction.from_rational_expression"]], "from_zpk() (sympy.physics.control.lti.transferfunction class method)": [[118, "sympy.physics.control.lti.TransferFunction.from_zpk"]], "gbt() (in module sympy.physics.control.lti)": [[118, "sympy.physics.control.lti.gbt"]], "is_biproper (sympy.physics.control.lti.parallel property)": [[118, "sympy.physics.control.lti.Parallel.is_biproper"]], "is_biproper (sympy.physics.control.lti.series property)": [[118, "sympy.physics.control.lti.Series.is_biproper"]], "is_biproper (sympy.physics.control.lti.transferfunction property)": [[118, "sympy.physics.control.lti.TransferFunction.is_biproper"]], "is_proper (sympy.physics.control.lti.parallel property)": [[118, "sympy.physics.control.lti.Parallel.is_proper"]], "is_proper (sympy.physics.control.lti.series property)": [[118, "sympy.physics.control.lti.Series.is_proper"]], "is_proper (sympy.physics.control.lti.transferfunction property)": [[118, "sympy.physics.control.lti.TransferFunction.is_proper"]], "is_stable() (sympy.physics.control.lti.transferfunction method)": [[118, "sympy.physics.control.lti.TransferFunction.is_stable"]], "is_strictly_proper (sympy.physics.control.lti.parallel property)": [[118, "sympy.physics.control.lti.Parallel.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.series property)": [[118, "sympy.physics.control.lti.Series.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.transferfunction property)": [[118, "sympy.physics.control.lti.TransferFunction.is_strictly_proper"]], "num (sympy.physics.control.lti.transferfunction property)": [[118, "sympy.physics.control.lti.TransferFunction.num"]], "num_inputs (sympy.physics.control.lti.mimoparallel property)": [[118, "sympy.physics.control.lti.MIMOParallel.num_inputs"]], "num_inputs (sympy.physics.control.lti.mimoseries property)": [[118, "sympy.physics.control.lti.MIMOSeries.num_inputs"]], "num_inputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[118, "sympy.physics.control.lti.TransferFunctionMatrix.num_inputs"]], "num_outputs (sympy.physics.control.lti.mimoparallel property)": [[118, "sympy.physics.control.lti.MIMOParallel.num_outputs"]], "num_outputs (sympy.physics.control.lti.mimoseries property)": [[118, "sympy.physics.control.lti.MIMOSeries.num_outputs"]], "num_outputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[118, "sympy.physics.control.lti.TransferFunctionMatrix.num_outputs"]], "poles() (sympy.physics.control.lti.transferfunction method)": [[118, "sympy.physics.control.lti.TransferFunction.poles"]], "sensitivity (sympy.physics.control.lti.feedback property)": [[118, "sympy.physics.control.lti.Feedback.sensitivity"]], "sensitivity (sympy.physics.control.lti.mimofeedback property)": [[118, "sympy.physics.control.lti.MIMOFeedback.sensitivity"]], "shape (sympy.physics.control.lti.mimoparallel property)": [[118, "sympy.physics.control.lti.MIMOParallel.shape"]], "shape (sympy.physics.control.lti.mimoseries property)": [[118, "sympy.physics.control.lti.MIMOSeries.shape"]], "shape (sympy.physics.control.lti.transferfunctionmatrix property)": [[118, "sympy.physics.control.lti.TransferFunctionMatrix.shape"]], "sign (sympy.physics.control.lti.feedback property)": [[118, "sympy.physics.control.lti.Feedback.sign"]], "sign (sympy.physics.control.lti.mimofeedback property)": [[118, "sympy.physics.control.lti.MIMOFeedback.sign"]], "sympy.physics.control.lti": [[118, "module-sympy.physics.control.lti"]], "sys1 (sympy.physics.control.lti.feedback property)": [[118, "sympy.physics.control.lti.Feedback.sys1"]], "sys1 (sympy.physics.control.lti.mimofeedback property)": [[118, "sympy.physics.control.lti.MIMOFeedback.sys1"]], "sys2 (sympy.physics.control.lti.feedback property)": [[118, "sympy.physics.control.lti.Feedback.sys2"]], "sys2 (sympy.physics.control.lti.mimofeedback property)": [[118, "sympy.physics.control.lti.MIMOFeedback.sys2"]], "to_expr() (sympy.physics.control.lti.parallel method)": [[118, "sympy.physics.control.lti.Parallel.to_expr"]], "to_expr() (sympy.physics.control.lti.series method)": [[118, "sympy.physics.control.lti.Series.to_expr"]], "to_expr() (sympy.physics.control.lti.transferfunction method)": [[118, "sympy.physics.control.lti.TransferFunction.to_expr"]], "transpose() (sympy.physics.control.lti.transferfunctionmatrix method)": [[118, "sympy.physics.control.lti.TransferFunctionMatrix.transpose"]], "var (sympy.physics.control.lti.feedback property)": [[118, "sympy.physics.control.lti.Feedback.var"]], "var (sympy.physics.control.lti.mimofeedback property)": [[118, "sympy.physics.control.lti.MIMOFeedback.var"]], "var (sympy.physics.control.lti.mimoparallel property)": [[118, "sympy.physics.control.lti.MIMOParallel.var"]], "var (sympy.physics.control.lti.mimoseries property)": [[118, "sympy.physics.control.lti.MIMOSeries.var"]], "var (sympy.physics.control.lti.parallel property)": [[118, "sympy.physics.control.lti.Parallel.var"]], "var (sympy.physics.control.lti.series property)": [[118, "sympy.physics.control.lti.Series.var"]], "var (sympy.physics.control.lti.transferfunction property)": [[118, "sympy.physics.control.lti.TransferFunction.var"]], "var (sympy.physics.control.lti.transferfunctionmatrix property)": [[118, "sympy.physics.control.lti.TransferFunctionMatrix.var"]], "zeros() (sympy.physics.control.lti.transferfunction method)": [[118, "sympy.physics.control.lti.TransferFunction.zeros"]], "extract_type_tens() (in module sympy.physics.hep.gamma_matrices)": [[119, "sympy.physics.hep.gamma_matrices.extract_type_tens"]], "gamma_trace() (in module sympy.physics.hep.gamma_matrices)": [[119, "sympy.physics.hep.gamma_matrices.gamma_trace"]], "kahane_simplify() (in module sympy.physics.hep.gamma_matrices)": [[119, "sympy.physics.hep.gamma_matrices.kahane_simplify"]], "simplify_gpgp() (in module sympy.physics.hep.gamma_matrices)": [[119, "sympy.physics.hep.gamma_matrices.simplify_gpgp"]], "sympy.physics.hep.gamma_matrices": [[119, "module-sympy.physics.hep.gamma_matrices"]], "e_nl() (in module sympy.physics.hydrogen)": [[120, "sympy.physics.hydrogen.E_nl"]], "e_nl_dirac() (in module sympy.physics.hydrogen)": [[120, "sympy.physics.hydrogen.E_nl_dirac"]], "psi_nlm() (in module sympy.physics.hydrogen)": [[120, "sympy.physics.hydrogen.Psi_nlm"]], "r_nl() (in module sympy.physics.hydrogen)": [[120, "sympy.physics.hydrogen.R_nl"]], "sympy.physics.hydrogen": [[120, "module-sympy.physics.hydrogen"]], "mdft() (in module sympy.physics.matrices)": [[121, "sympy.physics.matrices.mdft"]], "mgamma() (in module sympy.physics.matrices)": [[121, "sympy.physics.matrices.mgamma"]], "msigma() (in module sympy.physics.matrices)": [[121, "sympy.physics.matrices.msigma"]], "pat_matrix() (in module sympy.physics.matrices)": [[121, "sympy.physics.matrices.pat_matrix"]], "sympy.physics.matrices": [[121, "module-sympy.physics.matrices"]], "body (class in sympy.physics.mechanics.body)": [[123, "sympy.physics.mechanics.body.Body"]], "ang_vel_in() (sympy.physics.mechanics.body.body method)": [[123, "sympy.physics.mechanics.body.Body.ang_vel_in"]], "apply_force() (sympy.physics.mechanics.body.body method)": [[123, "sympy.physics.mechanics.body.Body.apply_force"]], "apply_torque() (sympy.physics.mechanics.body.body method)": [[123, "sympy.physics.mechanics.body.Body.apply_torque"]], "clear_loads() (sympy.physics.mechanics.body.body method)": [[123, "sympy.physics.mechanics.body.Body.clear_loads"]], "dcm() (sympy.physics.mechanics.body.body method)": [[123, "sympy.physics.mechanics.body.Body.dcm"]], "inertia (sympy.physics.mechanics.body.body property)": [[123, "sympy.physics.mechanics.body.Body.inertia"]], "kinetic_energy() (sympy.physics.mechanics.body.body method)": [[123, "sympy.physics.mechanics.body.Body.kinetic_energy"]], "masscenter_vel() (sympy.physics.mechanics.body.body method)": [[123, "sympy.physics.mechanics.body.Body.masscenter_vel"]], "parallel_axis() (sympy.physics.mechanics.body.body method)": [[123, "sympy.physics.mechanics.body.Body.parallel_axis"]], "remove_load() (sympy.physics.mechanics.body.body method)": [[123, "sympy.physics.mechanics.body.Body.remove_load"]], "sympy.physics.mechanics.body": [[123, "module-sympy.physics.mechanics.body"]], "x (sympy.physics.mechanics.body.body property)": [[123, "sympy.physics.mechanics.body.Body.x"]], "y (sympy.physics.mechanics.body.body property)": [[123, "sympy.physics.mechanics.body.Body.y"]], "z (sympy.physics.mechanics.body.body property)": [[123, "sympy.physics.mechanics.body.Body.z"]], "find_dynamicsymbols() (in module sympy.physics.mechanics)": [[124, "sympy.physics.mechanics.find_dynamicsymbols"]], "msubs() (in module sympy.physics.mechanics)": [[124, "sympy.physics.mechanics.msubs"]], "cylindricaljoint (class in sympy.physics.mechanics.joint)": [[126, "sympy.physics.mechanics.joint.CylindricalJoint"]], "joint (class in sympy.physics.mechanics.joint)": [[126, "sympy.physics.mechanics.joint.Joint"]], "jointsmethod (class in sympy.physics.mechanics.jointsmethod)": [[126, "sympy.physics.mechanics.jointsmethod.JointsMethod"]], "pinjoint (class in sympy.physics.mechanics.joint)": [[126, "sympy.physics.mechanics.joint.PinJoint"]], "planarjoint (class in sympy.physics.mechanics.joint)": [[126, "sympy.physics.mechanics.joint.PlanarJoint"]], "prismaticjoint (class in sympy.physics.mechanics.joint)": [[126, "sympy.physics.mechanics.joint.PrismaticJoint"]], "sphericaljoint (class in sympy.physics.mechanics.joint)": [[126, "sympy.physics.mechanics.joint.SphericalJoint"]], "weldjoint (class in sympy.physics.mechanics.joint)": [[126, "sympy.physics.mechanics.joint.WeldJoint"]], "bodies (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[126, "sympy.physics.mechanics.jointsmethod.JointsMethod.bodies"]], "child (sympy.physics.mechanics.joint.joint property)": [[126, "sympy.physics.mechanics.joint.Joint.child"]], "child_axis (sympy.physics.mechanics.joint.joint property)": [[126, "sympy.physics.mechanics.joint.Joint.child_axis"]], "child_point (sympy.physics.mechanics.joint.joint property)": [[126, "sympy.physics.mechanics.joint.Joint.child_point"]], "coordinates (sympy.physics.mechanics.joint.joint property)": [[126, "sympy.physics.mechanics.joint.Joint.coordinates"]], "forcing (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[126, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing"]], "forcing_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[126, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing_full"]], "form_eoms() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[126, "sympy.physics.mechanics.jointsmethod.JointsMethod.form_eoms"]], "joint_axis (sympy.physics.mechanics.joint.cylindricaljoint property)": [[126, "sympy.physics.mechanics.joint.CylindricalJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.pinjoint property)": [[126, "sympy.physics.mechanics.joint.PinJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.prismaticjoint property)": [[126, "sympy.physics.mechanics.joint.PrismaticJoint.joint_axis"]], "kdes (sympy.physics.mechanics.joint.joint property)": [[126, "sympy.physics.mechanics.joint.Joint.kdes"]], "kdes (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[126, "sympy.physics.mechanics.jointsmethod.JointsMethod.kdes"]], "loads (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[126, "sympy.physics.mechanics.jointsmethod.JointsMethod.loads"]], "mass_matrix (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[126, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[126, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix_full"]], "method (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[126, "sympy.physics.mechanics.jointsmethod.JointsMethod.method"]], "name (sympy.physics.mechanics.joint.joint property)": [[126, "sympy.physics.mechanics.joint.Joint.name"]], "parent (sympy.physics.mechanics.joint.joint property)": [[126, "sympy.physics.mechanics.joint.Joint.parent"]], "parent_axis (sympy.physics.mechanics.joint.joint property)": [[126, "sympy.physics.mechanics.joint.Joint.parent_axis"]], "parent_point (sympy.physics.mechanics.joint.joint property)": [[126, "sympy.physics.mechanics.joint.Joint.parent_point"]], "planar_coordinates (sympy.physics.mechanics.joint.planarjoint property)": [[126, "sympy.physics.mechanics.joint.PlanarJoint.planar_coordinates"]], "planar_speeds (sympy.physics.mechanics.joint.planarjoint property)": [[126, "sympy.physics.mechanics.joint.PlanarJoint.planar_speeds"]], "planar_vectors (sympy.physics.mechanics.joint.planarjoint property)": [[126, "sympy.physics.mechanics.joint.PlanarJoint.planar_vectors"]], "q (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[126, "sympy.physics.mechanics.jointsmethod.JointsMethod.q"]], "rhs() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[126, "sympy.physics.mechanics.jointsmethod.JointsMethod.rhs"]], "rotation_axis (sympy.physics.mechanics.joint.planarjoint property)": [[126, "sympy.physics.mechanics.joint.PlanarJoint.rotation_axis"]], "rotation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[126, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_coordinate"]], "rotation_coordinate (sympy.physics.mechanics.joint.planarjoint property)": [[126, "sympy.physics.mechanics.joint.PlanarJoint.rotation_coordinate"]], "rotation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[126, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_speed"]], "rotation_speed (sympy.physics.mechanics.joint.planarjoint property)": [[126, "sympy.physics.mechanics.joint.PlanarJoint.rotation_speed"]], "speeds (sympy.physics.mechanics.joint.joint property)": [[126, "sympy.physics.mechanics.joint.Joint.speeds"]], "sympy.physics.mechanics.joint": [[126, "module-sympy.physics.mechanics.joint"]], "sympy.physics.mechanics.jointsmethod": [[126, "module-sympy.physics.mechanics.jointsmethod"]], "translation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[126, "sympy.physics.mechanics.joint.CylindricalJoint.translation_coordinate"]], "translation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[126, "sympy.physics.mechanics.joint.CylindricalJoint.translation_speed"]], "u (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[126, "sympy.physics.mechanics.jointsmethod.JointsMethod.u"]], "kanesmethod (class in sympy.physics.mechanics.kane)": [[127, "sympy.physics.mechanics.kane.KanesMethod"]], "lagrangesmethod (class in sympy.physics.mechanics.lagrange)": [[127, "sympy.physics.mechanics.lagrange.LagrangesMethod"]], "auxiliary_eqs (sympy.physics.mechanics.kane.kanesmethod property)": [[127, "sympy.physics.mechanics.kane.KanesMethod.auxiliary_eqs"]], "forcing (sympy.physics.mechanics.kane.kanesmethod property)": [[127, "sympy.physics.mechanics.kane.KanesMethod.forcing"]], "forcing (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[127, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing"]], "forcing_full (sympy.physics.mechanics.kane.kanesmethod property)": [[127, "sympy.physics.mechanics.kane.KanesMethod.forcing_full"]], "forcing_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[127, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing_full"]], "forcing_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[127, "sympy.physics.mechanics.kane.KanesMethod.forcing_kin"]], "form_lagranges_equations() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[127, "sympy.physics.mechanics.lagrange.LagrangesMethod.form_lagranges_equations"]], "kanes_equations() (sympy.physics.mechanics.kane.kanesmethod method)": [[127, "sympy.physics.mechanics.kane.KanesMethod.kanes_equations"]], "kindiffdict() (sympy.physics.mechanics.kane.kanesmethod method)": [[127, "sympy.physics.mechanics.kane.KanesMethod.kindiffdict"]], "linearize() (sympy.physics.mechanics.kane.kanesmethod method)": [[127, "sympy.physics.mechanics.kane.KanesMethod.linearize"]], "linearize() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[127, "sympy.physics.mechanics.lagrange.LagrangesMethod.linearize"]], "mass_matrix (sympy.physics.mechanics.kane.kanesmethod property)": [[127, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix"]], "mass_matrix (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[127, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.kane.kanesmethod property)": [[127, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_full"]], "mass_matrix_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[127, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix_full"]], "mass_matrix_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[127, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_kin"]], "rhs() (sympy.physics.mechanics.kane.kanesmethod method)": [[127, "sympy.physics.mechanics.kane.KanesMethod.rhs"]], "rhs() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[127, "sympy.physics.mechanics.lagrange.LagrangesMethod.rhs"]], "solve_multipliers() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[127, "sympy.physics.mechanics.lagrange.LagrangesMethod.solve_multipliers"]], "sympy.physics.mechanics.kane": [[127, "module-sympy.physics.mechanics.kane"]], "sympy.physics.mechanics.lagrange": [[127, "module-sympy.physics.mechanics.lagrange"]], "to_linearizer() (sympy.physics.mechanics.kane.kanesmethod method)": [[127, "sympy.physics.mechanics.kane.KanesMethod.to_linearizer"]], "to_linearizer() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[127, "sympy.physics.mechanics.lagrange.LagrangesMethod.to_linearizer"]], "linearizer (class in sympy.physics.mechanics.linearize)": [[128, "sympy.physics.mechanics.linearize.Linearizer"]], "__init__() (sympy.physics.mechanics.linearize.linearizer method)": [[128, "sympy.physics.mechanics.linearize.Linearizer.__init__"]], "linearize() (sympy.physics.mechanics.linearize.linearizer method)": [[128, "sympy.physics.mechanics.linearize.Linearizer.linearize"]], "sympy.physics.mechanics.linearize": [[128, "module-sympy.physics.mechanics.linearize"]], "force (class in sympy.physics.mechanics.loads)": [[129, "sympy.physics.mechanics.loads.Force"]], "inertia (class in sympy.physics.mechanics.inertia)": [[129, "sympy.physics.mechanics.inertia.Inertia"]], "lagrangian() (in module sympy.physics.mechanics.functions)": [[129, "sympy.physics.mechanics.functions.Lagrangian"]], "particle (class in sympy.physics.mechanics.particle)": [[129, "sympy.physics.mechanics.particle.Particle"]], "rigidbody (class in sympy.physics.mechanics.rigidbody)": [[129, "sympy.physics.mechanics.rigidbody.RigidBody"]], "torque (class in sympy.physics.mechanics.loads)": [[129, "sympy.physics.mechanics.loads.Torque"]], "angular_momentum() (in module sympy.physics.mechanics.functions)": [[129, "sympy.physics.mechanics.functions.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.particle.particle method)": [[129, "sympy.physics.mechanics.particle.Particle.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[129, "sympy.physics.mechanics.rigidbody.RigidBody.angular_momentum"]], "center_of_mass() (in module sympy.physics.mechanics.functions)": [[129, "sympy.physics.mechanics.functions.center_of_mass"]], "central_inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[129, "sympy.physics.mechanics.rigidbody.RigidBody.central_inertia"]], "find_dynamicsymbols() (in module sympy.physics.mechanics.functions)": [[129, "sympy.physics.mechanics.functions.find_dynamicsymbols"]], "frame (sympy.physics.mechanics.rigidbody.rigidbody property)": [[129, "sympy.physics.mechanics.rigidbody.RigidBody.frame"]], "from_inertia_scalars() (sympy.physics.mechanics.inertia.inertia class method)": [[129, "sympy.physics.mechanics.inertia.Inertia.from_inertia_scalars"]], "inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[129, "sympy.physics.mechanics.rigidbody.RigidBody.inertia"]], "inertia() (in module sympy.physics.mechanics.inertia)": [[129, "sympy.physics.mechanics.inertia.inertia"]], "inertia_of_point_mass() (in module sympy.physics.mechanics.inertia)": [[129, "sympy.physics.mechanics.inertia.inertia_of_point_mass"]], "kinetic_energy() (in module sympy.physics.mechanics.functions)": [[129, "sympy.physics.mechanics.functions.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.particle.particle method)": [[129, "sympy.physics.mechanics.particle.Particle.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[129, "sympy.physics.mechanics.rigidbody.RigidBody.kinetic_energy"]], "linear_momentum() (in module sympy.physics.mechanics.functions)": [[129, "sympy.physics.mechanics.functions.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.particle.particle method)": [[129, "sympy.physics.mechanics.particle.Particle.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[129, "sympy.physics.mechanics.rigidbody.RigidBody.linear_momentum"]], "mass (sympy.physics.mechanics.particle.particle property)": [[129, "sympy.physics.mechanics.particle.Particle.mass"]], "mass (sympy.physics.mechanics.rigidbody.rigidbody property)": [[129, "sympy.physics.mechanics.rigidbody.RigidBody.mass"]], "masscenter (sympy.physics.mechanics.particle.particle property)": [[129, "sympy.physics.mechanics.particle.Particle.masscenter"]], "masscenter (sympy.physics.mechanics.rigidbody.rigidbody property)": [[129, "sympy.physics.mechanics.rigidbody.RigidBody.masscenter"]], "name (sympy.physics.mechanics.particle.particle property)": [[129, "sympy.physics.mechanics.particle.Particle.name"]], "name (sympy.physics.mechanics.rigidbody.rigidbody property)": [[129, "sympy.physics.mechanics.rigidbody.RigidBody.name"]], "parallel_axis() (sympy.physics.mechanics.particle.particle method)": [[129, "sympy.physics.mechanics.particle.Particle.parallel_axis"]], "parallel_axis() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[129, "sympy.physics.mechanics.rigidbody.RigidBody.parallel_axis"]], "point (sympy.physics.mechanics.particle.particle property)": [[129, "sympy.physics.mechanics.particle.Particle.point"]], "potential_energy (sympy.physics.mechanics.particle.particle property)": [[129, "sympy.physics.mechanics.particle.Particle.potential_energy"]], "potential_energy (sympy.physics.mechanics.rigidbody.rigidbody property)": [[129, "sympy.physics.mechanics.rigidbody.RigidBody.potential_energy"]], "potential_energy() (in module sympy.physics.mechanics.functions)": [[129, "sympy.physics.mechanics.functions.potential_energy"]], "x (sympy.physics.mechanics.rigidbody.rigidbody property)": [[129, "sympy.physics.mechanics.rigidbody.RigidBody.x"]], "y (sympy.physics.mechanics.rigidbody.rigidbody property)": [[129, "sympy.physics.mechanics.rigidbody.RigidBody.y"]], "z (sympy.physics.mechanics.rigidbody.rigidbody property)": [[129, "sympy.physics.mechanics.rigidbody.RigidBody.z"]], "symbolicsystem (class in sympy.physics.mechanics.system)": [[131, "sympy.physics.mechanics.system.SymbolicSystem"]], "system (class in sympy.physics.mechanics._system)": [[131, "sympy.physics.mechanics._system.System"]], "actuators (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.actuators"]], "add_actuators() (sympy.physics.mechanics._system.system method)": [[131, "sympy.physics.mechanics._system.System.add_actuators"]], "add_bodies() (sympy.physics.mechanics._system.system method)": [[131, "sympy.physics.mechanics._system.System.add_bodies"]], "add_coordinates() (sympy.physics.mechanics._system.system method)": [[131, "sympy.physics.mechanics._system.System.add_coordinates"]], "add_holonomic_constraints() (sympy.physics.mechanics._system.system method)": [[131, "sympy.physics.mechanics._system.System.add_holonomic_constraints"]], "add_joints() (sympy.physics.mechanics._system.system method)": [[131, "sympy.physics.mechanics._system.System.add_joints"]], "add_kdes() (sympy.physics.mechanics._system.system method)": [[131, "sympy.physics.mechanics._system.System.add_kdes"]], "add_loads() (sympy.physics.mechanics._system.system method)": [[131, "sympy.physics.mechanics._system.System.add_loads"]], "add_nonholonomic_constraints() (sympy.physics.mechanics._system.system method)": [[131, "sympy.physics.mechanics._system.System.add_nonholonomic_constraints"]], "add_speeds() (sympy.physics.mechanics._system.system method)": [[131, "sympy.physics.mechanics._system.System.add_speeds"]], "alg_con (sympy.physics.mechanics.system.symbolicsystem property)": [[131, "sympy.physics.mechanics.system.SymbolicSystem.alg_con"]], "apply_gravity() (sympy.physics.mechanics._system.system method)": [[131, "sympy.physics.mechanics._system.System.apply_gravity"]], "bodies (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.bodies"]], "bodies (sympy.physics.mechanics.system.symbolicsystem property)": [[131, "sympy.physics.mechanics.system.SymbolicSystem.bodies"]], "comb_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[131, "sympy.physics.mechanics.system.SymbolicSystem.comb_explicit_rhs"]], "comb_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[131, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_mat"]], "comb_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[131, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_rhs"]], "compute_explicit_form() (sympy.physics.mechanics.system.symbolicsystem method)": [[131, "sympy.physics.mechanics.system.SymbolicSystem.compute_explicit_form"]], "constant_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[131, "sympy.physics.mechanics.system.SymbolicSystem.constant_symbols"]], "coordinates (sympy.physics.mechanics.system.symbolicsystem property)": [[131, "sympy.physics.mechanics.system.SymbolicSystem.coordinates"]], "dyn_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[131, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_mat"]], "dyn_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[131, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_rhs"]], "dynamic_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[131, "sympy.physics.mechanics.system.SymbolicSystem.dynamic_symbols"]], "eom_method (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.eom_method"]], "forcing (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.forcing"]], "forcing_full (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.forcing_full"]], "form_eoms() (sympy.physics.mechanics._system.system method)": [[131, "sympy.physics.mechanics._system.System.form_eoms"]], "frame (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.frame"]], "from_newtonian() (sympy.physics.mechanics._system.system class method)": [[131, "sympy.physics.mechanics._system.System.from_newtonian"]], "get_body() (sympy.physics.mechanics._system.system method)": [[131, "sympy.physics.mechanics._system.System.get_body"]], "get_joint() (sympy.physics.mechanics._system.system method)": [[131, "sympy.physics.mechanics._system.System.get_joint"]], "holonomic_constraints (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.holonomic_constraints"]], "joints (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.joints"]], "kdes (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.kdes"]], "kin_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[131, "sympy.physics.mechanics.system.SymbolicSystem.kin_explicit_rhs"]], "loads (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.loads"]], "loads (sympy.physics.mechanics.system.symbolicsystem property)": [[131, "sympy.physics.mechanics.system.SymbolicSystem.loads"]], "mass_matrix (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.mass_matrix_full"]], "nonholonomic_constraints (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.nonholonomic_constraints"]], "origin (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.origin"]], "q (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.q"]], "q_dep (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.q_dep"]], "q_ind (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.q_ind"]], "rhs() (sympy.physics.mechanics._system.system method)": [[131, "sympy.physics.mechanics._system.System.rhs"]], "speeds (sympy.physics.mechanics.system.symbolicsystem property)": [[131, "sympy.physics.mechanics.system.SymbolicSystem.speeds"]], "states (sympy.physics.mechanics.system.symbolicsystem property)": [[131, "sympy.physics.mechanics.system.SymbolicSystem.states"]], "sympy.physics.mechanics.system": [[131, "module-sympy.physics.mechanics.system"]], "u (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.u"]], "u_dep (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.u_dep"]], "u_ind (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.u_ind"]], "validate_system() (sympy.physics.mechanics._system.system method)": [[131, "sympy.physics.mechanics._system.System.validate_system"]], "x (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.x"]], "y (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.y"]], "z (sympy.physics.mechanics._system.system property)": [[131, "sympy.physics.mechanics._system.System.z"]], "sympy.physics.mechanics": [[142, "module-sympy.physics.mechanics"]], "a (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[151, "sympy.physics.optics.gaussopt.RayTransferMatrix.A"]], "b (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[151, "sympy.physics.optics.gaussopt.RayTransferMatrix.B"]], "beamparameter (class in sympy.physics.optics.gaussopt)": [[151, "sympy.physics.optics.gaussopt.BeamParameter"]], "c (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[151, "sympy.physics.optics.gaussopt.RayTransferMatrix.C"]], "curvedmirror (class in sympy.physics.optics.gaussopt)": [[151, "sympy.physics.optics.gaussopt.CurvedMirror"]], "curvedrefraction (class in sympy.physics.optics.gaussopt)": [[151, "sympy.physics.optics.gaussopt.CurvedRefraction"]], "d (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[151, "sympy.physics.optics.gaussopt.RayTransferMatrix.D"]], "flatmirror (class in sympy.physics.optics.gaussopt)": [[151, "sympy.physics.optics.gaussopt.FlatMirror"]], "flatrefraction (class in sympy.physics.optics.gaussopt)": [[151, "sympy.physics.optics.gaussopt.FlatRefraction"]], "freespace (class in sympy.physics.optics.gaussopt)": [[151, "sympy.physics.optics.gaussopt.FreeSpace"]], "geometricray (class in sympy.physics.optics.gaussopt)": [[151, "sympy.physics.optics.gaussopt.GeometricRay"]], "raytransfermatrix (class in sympy.physics.optics.gaussopt)": [[151, "sympy.physics.optics.gaussopt.RayTransferMatrix"]], "thinlens (class in sympy.physics.optics.gaussopt)": [[151, "sympy.physics.optics.gaussopt.ThinLens"]], "angle (sympy.physics.optics.gaussopt.geometricray property)": [[151, "sympy.physics.optics.gaussopt.GeometricRay.angle"]], "conjugate_gauss_beams() (in module sympy.physics.optics.gaussopt)": [[151, "sympy.physics.optics.gaussopt.conjugate_gauss_beams"]], "divergence (sympy.physics.optics.gaussopt.beamparameter property)": [[151, "sympy.physics.optics.gaussopt.BeamParameter.divergence"]], "gaussian_conj() (in module sympy.physics.optics.gaussopt)": [[151, "sympy.physics.optics.gaussopt.gaussian_conj"]], "geometric_conj_ab() (in module sympy.physics.optics.gaussopt)": [[151, "sympy.physics.optics.gaussopt.geometric_conj_ab"]], "geometric_conj_af() (in module sympy.physics.optics.gaussopt)": [[151, "sympy.physics.optics.gaussopt.geometric_conj_af"]], "geometric_conj_bf() (in module sympy.physics.optics.gaussopt)": [[151, "sympy.physics.optics.gaussopt.geometric_conj_bf"]], "gouy (sympy.physics.optics.gaussopt.beamparameter property)": [[151, "sympy.physics.optics.gaussopt.BeamParameter.gouy"]], "height (sympy.physics.optics.gaussopt.geometricray property)": [[151, "sympy.physics.optics.gaussopt.GeometricRay.height"]], "q (sympy.physics.optics.gaussopt.beamparameter property)": [[151, "sympy.physics.optics.gaussopt.BeamParameter.q"]], "radius (sympy.physics.optics.gaussopt.beamparameter property)": [[151, "sympy.physics.optics.gaussopt.BeamParameter.radius"]], "rayleigh2waist() (in module sympy.physics.optics.gaussopt)": [[151, "sympy.physics.optics.gaussopt.rayleigh2waist"]], "sympy.physics.optics.gaussopt": [[151, "module-sympy.physics.optics.gaussopt"]], "w (sympy.physics.optics.gaussopt.beamparameter property)": [[151, "sympy.physics.optics.gaussopt.BeamParameter.w"]], "w_0 (sympy.physics.optics.gaussopt.beamparameter property)": [[151, "sympy.physics.optics.gaussopt.BeamParameter.w_0"]], "waist2rayleigh() (in module sympy.physics.optics.gaussopt)": [[151, "sympy.physics.optics.gaussopt.waist2rayleigh"]], "waist_approximation_limit (sympy.physics.optics.gaussopt.beamparameter property)": [[151, "sympy.physics.optics.gaussopt.BeamParameter.waist_approximation_limit"]], "medium (class in sympy.physics.optics.medium)": [[153, "sympy.physics.optics.medium.Medium"]], "refractive_index (sympy.physics.optics.medium.medium property)": [[153, "sympy.physics.optics.medium.Medium.refractive_index"]], "speed (sympy.physics.optics.medium.medium property)": [[153, "sympy.physics.optics.medium.Medium.speed"]], "sympy.physics.optics.medium": [[153, "module-sympy.physics.optics.medium"]], "half_wave_retarder() (in module sympy.physics.optics.polarization)": [[154, "sympy.physics.optics.polarization.half_wave_retarder"]], "jones_2_stokes() (in module sympy.physics.optics.polarization)": [[154, "sympy.physics.optics.polarization.jones_2_stokes"]], "jones_vector() (in module sympy.physics.optics.polarization)": [[154, "sympy.physics.optics.polarization.jones_vector"]], "linear_polarizer() (in module sympy.physics.optics.polarization)": [[154, "sympy.physics.optics.polarization.linear_polarizer"]], "mueller_matrix() (in module sympy.physics.optics.polarization)": [[154, "sympy.physics.optics.polarization.mueller_matrix"]], "phase_retarder() (in module sympy.physics.optics.polarization)": [[154, "sympy.physics.optics.polarization.phase_retarder"]], "polarizing_beam_splitter() (in module sympy.physics.optics.polarization)": [[154, "sympy.physics.optics.polarization.polarizing_beam_splitter"]], "quarter_wave_retarder() (in module sympy.physics.optics.polarization)": [[154, "sympy.physics.optics.polarization.quarter_wave_retarder"]], "reflective_filter() (in module sympy.physics.optics.polarization)": [[154, "sympy.physics.optics.polarization.reflective_filter"]], "stokes_vector() (in module sympy.physics.optics.polarization)": [[154, "sympy.physics.optics.polarization.stokes_vector"]], "sympy.physics.optics.polarization": [[154, "module-sympy.physics.optics.polarization"]], "transmissive_filter() (in module sympy.physics.optics.polarization)": [[154, "sympy.physics.optics.polarization.transmissive_filter"]], "brewster_angle() (in module sympy.physics.optics.utils)": [[155, "sympy.physics.optics.utils.brewster_angle"]], "critical_angle() (in module sympy.physics.optics.utils)": [[155, "sympy.physics.optics.utils.critical_angle"]], "deviation() (in module sympy.physics.optics.utils)": [[155, "sympy.physics.optics.utils.deviation"]], "fresnel_coefficients() (in module sympy.physics.optics.utils)": [[155, "sympy.physics.optics.utils.fresnel_coefficients"]], "hyperfocal_distance() (in module sympy.physics.optics.utils)": [[155, "sympy.physics.optics.utils.hyperfocal_distance"]], "lens_formula() (in module sympy.physics.optics.utils)": [[155, "sympy.physics.optics.utils.lens_formula"]], "lens_makers_formula() (in module sympy.physics.optics.utils)": [[155, "sympy.physics.optics.utils.lens_makers_formula"]], "mirror_formula() (in module sympy.physics.optics.utils)": [[155, "sympy.physics.optics.utils.mirror_formula"]], "refraction_angle() (in module sympy.physics.optics.utils)": [[155, "sympy.physics.optics.utils.refraction_angle"]], "sympy.physics.optics.utils": [[155, "module-sympy.physics.optics.utils"]], "transverse_magnification() (in module sympy.physics.optics.utils)": [[155, "sympy.physics.optics.utils.transverse_magnification"]], "twave (class in sympy.physics.optics.waves)": [[156, "sympy.physics.optics.waves.TWave"]], "amplitude (sympy.physics.optics.waves.twave property)": [[156, "sympy.physics.optics.waves.TWave.amplitude"]], "angular_velocity (sympy.physics.optics.waves.twave property)": [[156, "sympy.physics.optics.waves.TWave.angular_velocity"]], "frequency (sympy.physics.optics.waves.twave property)": [[156, "sympy.physics.optics.waves.TWave.frequency"]], "n (sympy.physics.optics.waves.twave property)": [[156, "sympy.physics.optics.waves.TWave.n"]], "phase (sympy.physics.optics.waves.twave property)": [[156, "sympy.physics.optics.waves.TWave.phase"]], "speed (sympy.physics.optics.waves.twave property)": [[156, "sympy.physics.optics.waves.TWave.speed"]], "sympy.physics.optics.waves": [[156, "module-sympy.physics.optics.waves"]], "time_period (sympy.physics.optics.waves.twave property)": [[156, "sympy.physics.optics.waves.TWave.time_period"]], "wavelength (sympy.physics.optics.waves.twave property)": [[156, "sympy.physics.optics.waves.TWave.wavelength"]], "wavenumber (sympy.physics.optics.waves.twave property)": [[156, "sympy.physics.optics.waves.TWave.wavenumber"]], "evaluate_pauli_product() (in module sympy.physics.paulialgebra)": [[157, "sympy.physics.paulialgebra.evaluate_pauli_product"]], "sympy.physics.paulialgebra": [[157, "module-sympy.physics.paulialgebra"]], "e_n() (in module sympy.physics.qho_1d)": [[158, "sympy.physics.qho_1d.E_n"]], "coherent_state() (in module sympy.physics.qho_1d)": [[158, "sympy.physics.qho_1d.coherent_state"]], "psi_n() (in module sympy.physics.qho_1d)": [[158, "sympy.physics.qho_1d.psi_n"]], "sympy.physics.qho_1d": [[158, "module-sympy.physics.qho_1d"]], "anticommutator (class in sympy.physics.quantum.anticommutator)": [[159, "sympy.physics.quantum.anticommutator.AntiCommutator"]], "doit() (sympy.physics.quantum.anticommutator.anticommutator method)": [[159, "sympy.physics.quantum.anticommutator.AntiCommutator.doit"]], "sympy.physics.quantum.anticommutator": [[159, "module-sympy.physics.quantum.anticommutator"]], "positionbra3d (class in sympy.physics.quantum.cartesian)": [[160, "sympy.physics.quantum.cartesian.PositionBra3D"]], "positionket3d (class in sympy.physics.quantum.cartesian)": [[160, "sympy.physics.quantum.cartesian.PositionKet3D"]], "positionstate3d (class in sympy.physics.quantum.cartesian)": [[160, "sympy.physics.quantum.cartesian.PositionState3D"]], "pxbra (class in sympy.physics.quantum.cartesian)": [[160, "sympy.physics.quantum.cartesian.PxBra"]], "pxket (class in sympy.physics.quantum.cartesian)": [[160, "sympy.physics.quantum.cartesian.PxKet"]], "pxop (class in sympy.physics.quantum.cartesian)": [[160, "sympy.physics.quantum.cartesian.PxOp"]], "xbra (class in sympy.physics.quantum.cartesian)": [[160, "sympy.physics.quantum.cartesian.XBra"]], "xket (class in sympy.physics.quantum.cartesian)": [[160, "sympy.physics.quantum.cartesian.XKet"]], "xop (class in sympy.physics.quantum.cartesian)": [[160, "sympy.physics.quantum.cartesian.XOp"]], "yop (class in sympy.physics.quantum.cartesian)": [[160, "sympy.physics.quantum.cartesian.YOp"]], "zop (class in sympy.physics.quantum.cartesian)": [[160, "sympy.physics.quantum.cartesian.ZOp"]], "momentum (sympy.physics.quantum.cartesian.pxbra property)": [[160, "sympy.physics.quantum.cartesian.PxBra.momentum"]], "momentum (sympy.physics.quantum.cartesian.pxket property)": [[160, "sympy.physics.quantum.cartesian.PxKet.momentum"]], "position (sympy.physics.quantum.cartesian.xbra property)": [[160, "sympy.physics.quantum.cartesian.XBra.position"]], "position (sympy.physics.quantum.cartesian.xket property)": [[160, "sympy.physics.quantum.cartesian.XKet.position"]], "position_x (sympy.physics.quantum.cartesian.positionstate3d property)": [[160, "sympy.physics.quantum.cartesian.PositionState3D.position_x"]], "position_y (sympy.physics.quantum.cartesian.positionstate3d property)": [[160, "sympy.physics.quantum.cartesian.PositionState3D.position_y"]], "position_z (sympy.physics.quantum.cartesian.positionstate3d property)": [[160, "sympy.physics.quantum.cartesian.PositionState3D.position_z"]], "sympy.physics.quantum.cartesian": [[160, "module-sympy.physics.quantum.cartesian"]], "cg (class in sympy.physics.quantum.cg)": [[161, "sympy.physics.quantum.cg.CG"]], "wigner3j (class in sympy.physics.quantum.cg)": [[161, "sympy.physics.quantum.cg.Wigner3j"]], "wigner6j (class in sympy.physics.quantum.cg)": [[161, "sympy.physics.quantum.cg.Wigner6j"]], "wigner9j (class in sympy.physics.quantum.cg)": [[161, "sympy.physics.quantum.cg.Wigner9j"]], "cg_simp() (in module sympy.physics.quantum.cg)": [[161, "sympy.physics.quantum.cg.cg_simp"]], "sympy.physics.quantum.cg": [[161, "module-sympy.physics.quantum.cg"]], "circuitplot (class in sympy.physics.quantum.circuitplot)": [[162, "sympy.physics.quantum.circuitplot.CircuitPlot"]], "createcgate() (in module sympy.physics.quantum.circuitplot)": [[162, "sympy.physics.quantum.circuitplot.CreateCGate"]], "mx (class in sympy.physics.quantum.circuitplot)": [[162, "sympy.physics.quantum.circuitplot.Mx"]], "mz (class in sympy.physics.quantum.circuitplot)": [[162, "sympy.physics.quantum.circuitplot.Mz"]], "circuit_plot() (in module sympy.physics.quantum.circuitplot)": [[162, "sympy.physics.quantum.circuitplot.circuit_plot"]], "control_line() (sympy.physics.quantum.circuitplot.circuitplot method)": [[162, "sympy.physics.quantum.circuitplot.CircuitPlot.control_line"]], "control_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[162, "sympy.physics.quantum.circuitplot.CircuitPlot.control_point"]], "labeller() (in module sympy.physics.quantum.circuitplot)": [[162, "sympy.physics.quantum.circuitplot.labeller"]], "not_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[162, "sympy.physics.quantum.circuitplot.CircuitPlot.not_point"]], "one_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[162, "sympy.physics.quantum.circuitplot.CircuitPlot.one_qubit_box"]], "swap_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[162, "sympy.physics.quantum.circuitplot.CircuitPlot.swap_point"]], "sympy.physics.quantum.circuitplot": [[162, "module-sympy.physics.quantum.circuitplot"]], "two_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[162, "sympy.physics.quantum.circuitplot.CircuitPlot.two_qubit_box"]], "update() (sympy.physics.quantum.circuitplot.circuitplot method)": [[162, "sympy.physics.quantum.circuitplot.CircuitPlot.update"]], "commutator (class in sympy.physics.quantum.commutator)": [[163, "sympy.physics.quantum.commutator.Commutator"]], "doit() (sympy.physics.quantum.commutator.commutator method)": [[163, "sympy.physics.quantum.commutator.Commutator.doit"]], "sympy.physics.quantum.commutator": [[163, "module-sympy.physics.quantum.commutator"]], "hbar (class in sympy.physics.quantum.constants)": [[164, "sympy.physics.quantum.constants.HBar"]], "sympy.physics.quantum.constants": [[164, "module-sympy.physics.quantum.constants"]], "dagger (class in sympy.physics.quantum.dagger)": [[165, "sympy.physics.quantum.dagger.Dagger"]], "sympy.physics.quantum.dagger": [[165, "module-sympy.physics.quantum.dagger"]], "cgate (class in sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.CGate"]], "cgates (class in sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.CGateS"]], "cnot (in module sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.CNOT"]], "cnotgate (class in sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.CNotGate"]], "gate (class in sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.Gate"]], "h (in module sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.H"]], "hadamardgate (class in sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.HadamardGate"]], "identitygate (class in sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.IdentityGate"]], "onequbitgate (class in sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.OneQubitGate"]], "phase (in module sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.Phase"]], "phasegate (class in sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.PhaseGate"]], "s (in module sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.S"]], "swap (in module sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.SWAP"]], "swapgate (class in sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.SwapGate"]], "t (in module sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.T"]], "tgate (class in sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.TGate"]], "twoqubitgate (class in sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.TwoQubitGate"]], "ugate (class in sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.UGate"]], "x (in module sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.X"]], "xgate (class in sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.XGate"]], "y (in module sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.Y"]], "ygate (class in sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.YGate"]], "z (in module sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.Z"]], "zgate (class in sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.ZGate"]], "controls (sympy.physics.quantum.gate.cgate property)": [[166, "sympy.physics.quantum.gate.CGate.controls"]], "controls (sympy.physics.quantum.gate.cnotgate property)": [[166, "sympy.physics.quantum.gate.CNotGate.controls"]], "decompose() (sympy.physics.quantum.gate.cgate method)": [[166, "sympy.physics.quantum.gate.CGate.decompose"]], "decompose() (sympy.physics.quantum.gate.swapgate method)": [[166, "sympy.physics.quantum.gate.SwapGate.decompose"]], "eval_controls() (sympy.physics.quantum.gate.cgate method)": [[166, "sympy.physics.quantum.gate.CGate.eval_controls"]], "gate (sympy.physics.quantum.gate.cgate property)": [[166, "sympy.physics.quantum.gate.CGate.gate"]], "gate (sympy.physics.quantum.gate.cnotgate property)": [[166, "sympy.physics.quantum.gate.CNotGate.gate"]], "gate_simp() (in module sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.gate_simp"]], "gate_sort() (in module sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.gate_sort"]], "get_target_matrix() (sympy.physics.quantum.gate.gate method)": [[166, "sympy.physics.quantum.gate.Gate.get_target_matrix"]], "get_target_matrix() (sympy.physics.quantum.gate.ugate method)": [[166, "sympy.physics.quantum.gate.UGate.get_target_matrix"]], "min_qubits (sympy.physics.quantum.gate.cgate property)": [[166, "sympy.physics.quantum.gate.CGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.cnotgate property)": [[166, "sympy.physics.quantum.gate.CNotGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.gate property)": [[166, "sympy.physics.quantum.gate.Gate.min_qubits"]], "normalized() (in module sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.normalized"]], "nqubits (sympy.physics.quantum.gate.cgate property)": [[166, "sympy.physics.quantum.gate.CGate.nqubits"]], "nqubits (sympy.physics.quantum.gate.gate property)": [[166, "sympy.physics.quantum.gate.Gate.nqubits"]], "plot_gate() (sympy.physics.quantum.gate.cgate method)": [[166, "sympy.physics.quantum.gate.CGate.plot_gate"]], "random_circuit() (in module sympy.physics.quantum.gate)": [[166, "sympy.physics.quantum.gate.random_circuit"]], "sympy.physics.quantum.gate": [[166, "module-sympy.physics.quantum.gate"]], "targets (sympy.physics.quantum.gate.cgate property)": [[166, "sympy.physics.quantum.gate.CGate.targets"]], "targets (sympy.physics.quantum.gate.cnotgate property)": [[166, "sympy.physics.quantum.gate.CNotGate.targets"]], "targets (sympy.physics.quantum.gate.gate property)": [[166, "sympy.physics.quantum.gate.Gate.targets"]], "targets (sympy.physics.quantum.gate.ugate property)": [[166, "sympy.physics.quantum.gate.UGate.targets"]], "oraclegate (class in sympy.physics.quantum.grover)": [[167, "sympy.physics.quantum.grover.OracleGate"]], "wgate (class in sympy.physics.quantum.grover)": [[167, "sympy.physics.quantum.grover.WGate"]], "apply_grover() (in module sympy.physics.quantum.grover)": [[167, "sympy.physics.quantum.grover.apply_grover"]], "grover_iteration() (in module sympy.physics.quantum.grover)": [[167, "sympy.physics.quantum.grover.grover_iteration"]], "search_function (sympy.physics.quantum.grover.oraclegate property)": [[167, "sympy.physics.quantum.grover.OracleGate.search_function"]], "superposition_basis() (in module sympy.physics.quantum.grover)": [[167, "sympy.physics.quantum.grover.superposition_basis"]], "sympy.physics.quantum.grover": [[167, "module-sympy.physics.quantum.grover"]], "targets (sympy.physics.quantum.grover.oraclegate property)": [[167, "sympy.physics.quantum.grover.OracleGate.targets"]], "complexspace (class in sympy.physics.quantum.hilbert)": [[168, "sympy.physics.quantum.hilbert.ComplexSpace"]], "directsumhilbertspace (class in sympy.physics.quantum.hilbert)": [[168, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace"]], "fockspace (class in sympy.physics.quantum.hilbert)": [[168, "sympy.physics.quantum.hilbert.FockSpace"]], "hilbertspace (class in sympy.physics.quantum.hilbert)": [[168, "sympy.physics.quantum.hilbert.HilbertSpace"]], "l2 (class in sympy.physics.quantum.hilbert)": [[168, "sympy.physics.quantum.hilbert.L2"]], "tensorpowerhilbertspace (class in sympy.physics.quantum.hilbert)": [[168, "sympy.physics.quantum.hilbert.TensorPowerHilbertSpace"]], "tensorproducthilbertspace (class in sympy.physics.quantum.hilbert)": [[168, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace"]], "dimension (sympy.physics.quantum.hilbert.hilbertspace property)": [[168, "sympy.physics.quantum.hilbert.HilbertSpace.dimension"]], "eval() (sympy.physics.quantum.hilbert.directsumhilbertspace class method)": [[168, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.eval"]], "eval() (sympy.physics.quantum.hilbert.tensorproducthilbertspace class method)": [[168, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.eval"]], "spaces (sympy.physics.quantum.hilbert.directsumhilbertspace property)": [[168, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.spaces"]], "spaces (sympy.physics.quantum.hilbert.tensorproducthilbertspace property)": [[168, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.spaces"]], "sympy.physics.quantum.hilbert": [[168, "module-sympy.physics.quantum.hilbert"]], "innerproduct (class in sympy.physics.quantum.innerproduct)": [[170, "sympy.physics.quantum.innerproduct.InnerProduct"]], "sympy.physics.quantum.innerproduct": [[170, "module-sympy.physics.quantum.innerproduct"]], "differentialoperator (class in sympy.physics.quantum.operator)": [[171, "sympy.physics.quantum.operator.DifferentialOperator"]], "hermitianoperator (class in sympy.physics.quantum.operator)": [[171, "sympy.physics.quantum.operator.HermitianOperator"]], "identityoperator (class in sympy.physics.quantum.operator)": [[171, "sympy.physics.quantum.operator.IdentityOperator"]], "operator (class in sympy.physics.quantum.operator)": [[171, "sympy.physics.quantum.operator.Operator"]], "outerproduct (class in sympy.physics.quantum.operator)": [[171, "sympy.physics.quantum.operator.OuterProduct"]], "unitaryoperator (class in sympy.physics.quantum.operator)": [[171, "sympy.physics.quantum.operator.UnitaryOperator"]], "bra (sympy.physics.quantum.operator.outerproduct property)": [[171, "sympy.physics.quantum.operator.OuterProduct.bra"]], "expr (sympy.physics.quantum.operator.differentialoperator property)": [[171, "sympy.physics.quantum.operator.DifferentialOperator.expr"]], "free_symbols (sympy.physics.quantum.operator.differentialoperator property)": [[171, "sympy.physics.quantum.operator.DifferentialOperator.free_symbols"]], "function (sympy.physics.quantum.operator.differentialoperator property)": [[171, "sympy.physics.quantum.operator.DifferentialOperator.function"]], "ket (sympy.physics.quantum.operator.outerproduct property)": [[171, "sympy.physics.quantum.operator.OuterProduct.ket"]], "sympy.physics.quantum.operator": [[171, "module-sympy.physics.quantum.operator"]], "variables (sympy.physics.quantum.operator.differentialoperator property)": [[171, "sympy.physics.quantum.operator.DifferentialOperator.variables"]], "operators_to_state() (in module sympy.physics.quantum.operatorset)": [[172, "sympy.physics.quantum.operatorset.operators_to_state"]], "state_to_operators() (in module sympy.physics.quantum.operatorset)": [[172, "sympy.physics.quantum.operatorset.state_to_operators"]], "sympy.physics.quantum.operatorset": [[172, "module-sympy.physics.quantum.operatorset"]], "piabbra (class in sympy.physics.quantum.piab)": [[173, "sympy.physics.quantum.piab.PIABBra"]], "piabhamiltonian (class in sympy.physics.quantum.piab)": [[173, "sympy.physics.quantum.piab.PIABHamiltonian"]], "piabket (class in sympy.physics.quantum.piab)": [[173, "sympy.physics.quantum.piab.PIABKet"]], "sympy.physics.quantum.piab": [[173, "module-sympy.physics.quantum.piab"]], "qapply() (in module sympy.physics.quantum.qapply)": [[174, "sympy.physics.quantum.qapply.qapply"]], "sympy.physics.quantum.qapply": [[174, "module-sympy.physics.quantum.qapply"]], "iqft (class in sympy.physics.quantum.qft)": [[175, "sympy.physics.quantum.qft.IQFT"]], "qft (class in sympy.physics.quantum.qft)": [[175, "sympy.physics.quantum.qft.QFT"]], "rk (in module sympy.physics.quantum.qft)": [[175, "sympy.physics.quantum.qft.Rk"]], "rkgate (class in sympy.physics.quantum.qft)": [[175, "sympy.physics.quantum.qft.RkGate"]], "decompose() (sympy.physics.quantum.qft.iqft method)": [[175, "sympy.physics.quantum.qft.IQFT.decompose"]], "decompose() (sympy.physics.quantum.qft.qft method)": [[175, "sympy.physics.quantum.qft.QFT.decompose"]], "sympy.physics.quantum.qft": [[175, "module-sympy.physics.quantum.qft"]], "intqubit (class in sympy.physics.quantum.qubit)": [[176, "sympy.physics.quantum.qubit.IntQubit"]], "intqubitbra (class in sympy.physics.quantum.qubit)": [[176, "sympy.physics.quantum.qubit.IntQubitBra"]], "qubit (class in sympy.physics.quantum.qubit)": [[176, "sympy.physics.quantum.qubit.Qubit"]], "qubitbra (class in sympy.physics.quantum.qubit)": [[176, "sympy.physics.quantum.qubit.QubitBra"]], "matrix_to_density() (in module sympy.physics.quantum.qubit)": [[176, "sympy.physics.quantum.qubit.matrix_to_density"]], "matrix_to_qubit() (in module sympy.physics.quantum.qubit)": [[176, "sympy.physics.quantum.qubit.matrix_to_qubit"]], "measure_all() (in module sympy.physics.quantum.qubit)": [[176, "sympy.physics.quantum.qubit.measure_all"]], "measure_all_oneshot() (in module sympy.physics.quantum.qubit)": [[176, "sympy.physics.quantum.qubit.measure_all_oneshot"]], "measure_partial() (in module sympy.physics.quantum.qubit)": [[176, "sympy.physics.quantum.qubit.measure_partial"]], "measure_partial_oneshot() (in module sympy.physics.quantum.qubit)": [[176, "sympy.physics.quantum.qubit.measure_partial_oneshot"]], "qubit_to_matrix() (in module sympy.physics.quantum.qubit)": [[176, "sympy.physics.quantum.qubit.qubit_to_matrix"]], "sympy.physics.quantum.qubit": [[176, "module-sympy.physics.quantum.qubit"]], "enumerate_states() (in module sympy.physics.quantum.represent)": [[177, "sympy.physics.quantum.represent.enumerate_states"]], "get_basis() (in module sympy.physics.quantum.represent)": [[177, "sympy.physics.quantum.represent.get_basis"]], "integrate_result() (in module sympy.physics.quantum.represent)": [[177, "sympy.physics.quantum.represent.integrate_result"]], "rep_expectation() (in module sympy.physics.quantum.represent)": [[177, "sympy.physics.quantum.represent.rep_expectation"]], "rep_innerproduct() (in module sympy.physics.quantum.represent)": [[177, "sympy.physics.quantum.represent.rep_innerproduct"]], "represent() (in module sympy.physics.quantum.represent)": [[177, "sympy.physics.quantum.represent.represent"]], "sympy.physics.quantum.represent": [[177, "module-sympy.physics.quantum.represent"]], "cmod (class in sympy.physics.quantum.shor)": [[178, "sympy.physics.quantum.shor.CMod"]], "n (sympy.physics.quantum.shor.cmod property)": [[178, "sympy.physics.quantum.shor.CMod.N"]], "a (sympy.physics.quantum.shor.cmod property)": [[178, "sympy.physics.quantum.shor.CMod.a"]], "period_find() (in module sympy.physics.quantum.shor)": [[178, "sympy.physics.quantum.shor.period_find"]], "shor() (in module sympy.physics.quantum.shor)": [[178, "sympy.physics.quantum.shor.shor"]], "sympy.physics.quantum.shor": [[178, "module-sympy.physics.quantum.shor"]], "t (sympy.physics.quantum.shor.cmod property)": [[178, "sympy.physics.quantum.shor.CMod.t"]], "d() (sympy.physics.quantum.spin.rotation class method)": [[179, "sympy.physics.quantum.spin.Rotation.D"], [179, "sympy.physics.quantum.spin.Rotation.d"]], "j2op (class in sympy.physics.quantum.spin)": [[179, "sympy.physics.quantum.spin.J2Op"]], "jxbra (class in sympy.physics.quantum.spin)": [[179, "sympy.physics.quantum.spin.JxBra"]], "jxbracoupled (class in sympy.physics.quantum.spin)": [[179, "sympy.physics.quantum.spin.JxBraCoupled"]], "jxket (class in sympy.physics.quantum.spin)": [[179, "sympy.physics.quantum.spin.JxKet"]], "jxketcoupled (class in sympy.physics.quantum.spin)": [[179, "sympy.physics.quantum.spin.JxKetCoupled"]], "jybra (class in sympy.physics.quantum.spin)": [[179, "sympy.physics.quantum.spin.JyBra"]], "jybracoupled (class in sympy.physics.quantum.spin)": [[179, "sympy.physics.quantum.spin.JyBraCoupled"]], "jyket (class in sympy.physics.quantum.spin)": [[179, "sympy.physics.quantum.spin.JyKet"]], "jyketcoupled (class in sympy.physics.quantum.spin)": [[179, "sympy.physics.quantum.spin.JyKetCoupled"]], "jzbra (class in sympy.physics.quantum.spin)": [[179, "sympy.physics.quantum.spin.JzBra"]], "jzbracoupled (class in sympy.physics.quantum.spin)": [[179, "sympy.physics.quantum.spin.JzBraCoupled"]], "jzket (class in sympy.physics.quantum.spin)": [[179, "sympy.physics.quantum.spin.JzKet"]], "jzketcoupled (class in sympy.physics.quantum.spin)": [[179, "sympy.physics.quantum.spin.JzKetCoupled"]], "jzop (class in sympy.physics.quantum.spin)": [[179, "sympy.physics.quantum.spin.JzOp"]], "rotation (class in sympy.physics.quantum.spin)": [[179, "sympy.physics.quantum.spin.Rotation"]], "wignerd (class in sympy.physics.quantum.spin)": [[179, "sympy.physics.quantum.spin.WignerD"]], "couple() (in module sympy.physics.quantum.spin)": [[179, "sympy.physics.quantum.spin.couple"]], "sympy.physics.quantum.spin": [[179, "module-sympy.physics.quantum.spin"]], "uncouple() (in module sympy.physics.quantum.spin)": [[179, "sympy.physics.quantum.spin.uncouple"]], "bra (class in sympy.physics.quantum.state)": [[180, "sympy.physics.quantum.state.Bra"]], "brabase (class in sympy.physics.quantum.state)": [[180, "sympy.physics.quantum.state.BraBase"]], "ket (class in sympy.physics.quantum.state)": [[180, "sympy.physics.quantum.state.Ket"]], "ketbase (class in sympy.physics.quantum.state)": [[180, "sympy.physics.quantum.state.KetBase"]], "orthogonalbra (class in sympy.physics.quantum.state)": [[180, "sympy.physics.quantum.state.OrthogonalBra"]], "orthogonalket (class in sympy.physics.quantum.state)": [[180, "sympy.physics.quantum.state.OrthogonalKet"]], "orthogonalstate (class in sympy.physics.quantum.state)": [[180, "sympy.physics.quantum.state.OrthogonalState"]], "state (class in sympy.physics.quantum.state)": [[180, "sympy.physics.quantum.state.State"]], "statebase (class in sympy.physics.quantum.state)": [[180, "sympy.physics.quantum.state.StateBase"]], "timedepbra (class in sympy.physics.quantum.state)": [[180, "sympy.physics.quantum.state.TimeDepBra"]], "timedepket (class in sympy.physics.quantum.state)": [[180, "sympy.physics.quantum.state.TimeDepKet"]], "timedepstate (class in sympy.physics.quantum.state)": [[180, "sympy.physics.quantum.state.TimeDepState"]], "wavefunction (class in sympy.physics.quantum.state)": [[180, "sympy.physics.quantum.state.Wavefunction"]], "dual (sympy.physics.quantum.state.statebase property)": [[180, "sympy.physics.quantum.state.StateBase.dual"]], "dual_class() (sympy.physics.quantum.state.statebase class method)": [[180, "sympy.physics.quantum.state.StateBase.dual_class"]], "expr (sympy.physics.quantum.state.wavefunction property)": [[180, "sympy.physics.quantum.state.Wavefunction.expr"]], "is_commutative (sympy.physics.quantum.state.wavefunction property)": [[180, "sympy.physics.quantum.state.Wavefunction.is_commutative"]], "is_normalized (sympy.physics.quantum.state.wavefunction property)": [[180, "sympy.physics.quantum.state.Wavefunction.is_normalized"]], "label (sympy.physics.quantum.state.timedepstate property)": [[180, "sympy.physics.quantum.state.TimeDepState.label"]], "limits (sympy.physics.quantum.state.wavefunction property)": [[180, "sympy.physics.quantum.state.Wavefunction.limits"]], "norm (sympy.physics.quantum.state.wavefunction property)": [[180, "sympy.physics.quantum.state.Wavefunction.norm"]], "normalize() (sympy.physics.quantum.state.wavefunction method)": [[180, "sympy.physics.quantum.state.Wavefunction.normalize"]], "operators (sympy.physics.quantum.state.statebase property)": [[180, "sympy.physics.quantum.state.StateBase.operators"]], "prob() (sympy.physics.quantum.state.wavefunction method)": [[180, "sympy.physics.quantum.state.Wavefunction.prob"]], "sympy.physics.quantum.state": [[180, "module-sympy.physics.quantum.state"]], "time (sympy.physics.quantum.state.timedepstate property)": [[180, "sympy.physics.quantum.state.TimeDepState.time"]], "variables (sympy.physics.quantum.state.wavefunction property)": [[180, "sympy.physics.quantum.state.Wavefunction.variables"]], "tensorproduct (class in sympy.physics.quantum.tensorproduct)": [[181, "sympy.physics.quantum.tensorproduct.TensorProduct"]], "sympy.physics.quantum.tensorproduct": [[181, "module-sympy.physics.quantum.tensorproduct"]], "tensor_product_simp() (in module sympy.physics.quantum.tensorproduct)": [[181, "sympy.physics.quantum.tensorproduct.tensor_product_simp"]], "annihilateboson (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.AnnihilateBoson"]], "annihilatefermion (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.AnnihilateFermion"]], "antisymmetrictensor (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.AntiSymmetricTensor"]], "b (in module sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.B"]], "bbra (in module sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.BBra"]], "bket (in module sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.BKet"]], "bd (in module sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.Bd"]], "bosonicbasis (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.BosonicBasis"]], "commutator (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.Commutator"]], "createboson (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.CreateBoson"]], "createfermion (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.CreateFermion"]], "dagger (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.Dagger"]], "f (in module sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.F"]], "fbra (in module sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.FBra"]], "fket (in module sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.FKet"]], "fd (in module sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.Fd"]], "fixedbosonicbasis (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.FixedBosonicBasis"]], "fockstate (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.FockState"]], "fockstatebosonbra (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.FockStateBosonBra"]], "fockstatebosonket (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.FockStateBosonKet"]], "fockstatebra (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.FockStateBra"]], "fockstatefermionbra (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.FockStateFermionBra"]], "fockstatefermionket (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.FockStateFermionKet"]], "fockstateket (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.FockStateKet"]], "innerproduct (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.InnerProduct"]], "kroneckerdelta (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.KroneckerDelta"]], "no (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.NO"]], "permutationoperator (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.PermutationOperator"]], "varbosonicbasis (class in sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.VarBosonicBasis"]], "apply_operator() (sympy.physics.secondquant.annihilateboson method)": [[182, "sympy.physics.secondquant.AnnihilateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.annihilatefermion method)": [[182, "sympy.physics.secondquant.AnnihilateFermion.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createboson method)": [[182, "sympy.physics.secondquant.CreateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createfermion method)": [[182, "sympy.physics.secondquant.CreateFermion.apply_operator"]], "apply_operators() (in module sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.apply_operators"]], "bra (sympy.physics.secondquant.innerproduct property)": [[182, "sympy.physics.secondquant.InnerProduct.bra"]], "contraction() (in module sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.contraction"]], "doit() (sympy.physics.secondquant.commutator method)": [[182, "sympy.physics.secondquant.Commutator.doit"]], "doit() (sympy.physics.secondquant.no method)": [[182, "sympy.physics.secondquant.NO.doit"]], "eval() (sympy.physics.secondquant.commutator class method)": [[182, "sympy.physics.secondquant.Commutator.eval"]], "eval() (sympy.physics.secondquant.dagger class method)": [[182, "sympy.physics.secondquant.Dagger.eval"]], "eval() (sympy.physics.secondquant.kroneckerdelta class method)": [[182, "sympy.physics.secondquant.KroneckerDelta.eval"]], "evaluate_deltas() (in module sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.evaluate_deltas"]], "get_permuted() (sympy.physics.secondquant.permutationoperator method)": [[182, "sympy.physics.secondquant.PermutationOperator.get_permuted"]], "get_subno() (sympy.physics.secondquant.no method)": [[182, "sympy.physics.secondquant.NO.get_subNO"]], "has_q_annihilators (sympy.physics.secondquant.no property)": [[182, "sympy.physics.secondquant.NO.has_q_annihilators"]], "has_q_creators (sympy.physics.secondquant.no property)": [[182, "sympy.physics.secondquant.NO.has_q_creators"]], "index() (sympy.physics.secondquant.fixedbosonicbasis method)": [[182, "sympy.physics.secondquant.FixedBosonicBasis.index"]], "index() (sympy.physics.secondquant.varbosonicbasis method)": [[182, "sympy.physics.secondquant.VarBosonicBasis.index"]], "indices_contain_equal_information (sympy.physics.secondquant.kroneckerdelta property)": [[182, "sympy.physics.secondquant.KroneckerDelta.indices_contain_equal_information"]], "is_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[182, "sympy.physics.secondquant.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[182, "sympy.physics.secondquant.KroneckerDelta.is_below_fermi"]], "is_only_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[182, "sympy.physics.secondquant.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[182, "sympy.physics.secondquant.KroneckerDelta.is_only_below_fermi"]], "is_only_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[182, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_annihilator"]], "is_only_q_annihilator (sympy.physics.secondquant.createfermion property)": [[182, "sympy.physics.secondquant.CreateFermion.is_only_q_annihilator"]], "is_only_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[182, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_creator"]], "is_only_q_creator (sympy.physics.secondquant.createfermion property)": [[182, "sympy.physics.secondquant.CreateFermion.is_only_q_creator"]], "is_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[182, "sympy.physics.secondquant.AnnihilateFermion.is_q_annihilator"]], "is_q_annihilator (sympy.physics.secondquant.createfermion property)": [[182, "sympy.physics.secondquant.CreateFermion.is_q_annihilator"]], "is_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[182, "sympy.physics.secondquant.AnnihilateFermion.is_q_creator"]], "is_q_creator (sympy.physics.secondquant.createfermion property)": [[182, "sympy.physics.secondquant.CreateFermion.is_q_creator"]], "iter_q_annihilators() (sympy.physics.secondquant.no method)": [[182, "sympy.physics.secondquant.NO.iter_q_annihilators"]], "iter_q_creators() (sympy.physics.secondquant.no method)": [[182, "sympy.physics.secondquant.NO.iter_q_creators"]], "ket (sympy.physics.secondquant.innerproduct property)": [[182, "sympy.physics.secondquant.InnerProduct.ket"]], "killable_index (sympy.physics.secondquant.kroneckerdelta property)": [[182, "sympy.physics.secondquant.KroneckerDelta.killable_index"]], "lower (sympy.physics.secondquant.antisymmetrictensor property)": [[182, "sympy.physics.secondquant.AntiSymmetricTensor.lower"]], "matrix_rep() (in module sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.matrix_rep"]], "preferred_index (sympy.physics.secondquant.kroneckerdelta property)": [[182, "sympy.physics.secondquant.KroneckerDelta.preferred_index"]], "simplify_index_permutations() (in module sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.simplify_index_permutations"]], "state() (sympy.physics.secondquant.fixedbosonicbasis method)": [[182, "sympy.physics.secondquant.FixedBosonicBasis.state"]], "state() (sympy.physics.secondquant.varbosonicbasis method)": [[182, "sympy.physics.secondquant.VarBosonicBasis.state"]], "substitute_dummies() (in module sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.substitute_dummies"]], "symbol (sympy.physics.secondquant.antisymmetrictensor property)": [[182, "sympy.physics.secondquant.AntiSymmetricTensor.symbol"]], "sympy.physics.secondquant": [[182, "module-sympy.physics.secondquant"]], "upper (sympy.physics.secondquant.antisymmetrictensor property)": [[182, "sympy.physics.secondquant.AntiSymmetricTensor.upper"]], "wicks() (in module sympy.physics.secondquant)": [[182, "sympy.physics.secondquant.wicks"]], "e_nl() (in module sympy.physics.sho)": [[183, "sympy.physics.sho.E_nl"]], "r_nl() (in module sympy.physics.sho)": [[183, "sympy.physics.sho.R_nl"]], "sympy.physics.sho": [[183, "module-sympy.physics.sho"]], "dimension (class in sympy.physics.units.dimensions)": [[184, "sympy.physics.units.dimensions.Dimension"]], "dimensionsystem (class in sympy.physics.units.dimensions)": [[184, "sympy.physics.units.dimensions.DimensionSystem"]], "can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[184, "sympy.physics.units.dimensions.DimensionSystem.can_transf_matrix"]], "dim (sympy.physics.units.dimensions.dimensionsystem property)": [[184, "sympy.physics.units.dimensions.DimensionSystem.dim"]], "dim_can_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[184, "sympy.physics.units.dimensions.DimensionSystem.dim_can_vector"]], "dim_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[184, "sympy.physics.units.dimensions.DimensionSystem.dim_vector"]], "has_integer_powers() (sympy.physics.units.dimensions.dimension method)": [[184, "sympy.physics.units.dimensions.Dimension.has_integer_powers"]], "inv_can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[184, "sympy.physics.units.dimensions.DimensionSystem.inv_can_transf_matrix"]], "is_consistent (sympy.physics.units.dimensions.dimensionsystem property)": [[184, "sympy.physics.units.dimensions.DimensionSystem.is_consistent"]], "is_dimensionless() (sympy.physics.units.dimensions.dimensionsystem method)": [[184, "sympy.physics.units.dimensions.DimensionSystem.is_dimensionless"]], "list_can_dims (sympy.physics.units.dimensions.dimensionsystem property)": [[184, "sympy.physics.units.dimensions.DimensionSystem.list_can_dims"]], "print_dim_base() (sympy.physics.units.dimensions.dimensionsystem method)": [[184, "sympy.physics.units.dimensions.DimensionSystem.print_dim_base"]], "sympy.physics.units.dimensions": [[184, "module-sympy.physics.units.dimensions"]], "prefix (class in sympy.physics.units.prefixes)": [[188, "sympy.physics.units.prefixes.Prefix"]], "sympy.physics.units.prefixes": [[188, "module-sympy.physics.units.prefixes"]], "quantity (class in sympy.physics.units.quantities)": [[189, "sympy.physics.units.quantities.Quantity"]], "abbrev (sympy.physics.units.quantities.quantity property)": [[189, "sympy.physics.units.quantities.Quantity.abbrev"]], "convert_to() (in module sympy.physics.units.util)": [[189, "sympy.physics.units.util.convert_to"]], "convert_to() (sympy.physics.units.quantities.quantity method)": [[189, "sympy.physics.units.quantities.Quantity.convert_to"]], "free_symbols (sympy.physics.units.quantities.quantity property)": [[189, "sympy.physics.units.quantities.Quantity.free_symbols"]], "is_prefixed (sympy.physics.units.quantities.quantity property)": [[189, "sympy.physics.units.quantities.Quantity.is_prefixed"]], "scale_factor (sympy.physics.units.quantities.quantity property)": [[189, "sympy.physics.units.quantities.Quantity.scale_factor"]], "set_global_relative_scale_factor() (sympy.physics.units.quantities.quantity method)": [[189, "sympy.physics.units.quantities.Quantity.set_global_relative_scale_factor"]], "sympy.physics.units.quantities": [[189, "module-sympy.physics.units.quantities"]], "sympy.physics.units.util": [[189, "module-sympy.physics.units.util"]], "unitsystem (class in sympy.physics.units.unitsystem)": [[190, "sympy.physics.units.unitsystem.UnitSystem"]], "dim (sympy.physics.units.unitsystem.unitsystem property)": [[190, "sympy.physics.units.unitsystem.UnitSystem.dim"]], "extend() (sympy.physics.units.unitsystem.unitsystem method)": [[190, "sympy.physics.units.unitsystem.UnitSystem.extend"]], "get_units_non_prefixed() (sympy.physics.units.unitsystem.unitsystem method)": [[190, "sympy.physics.units.unitsystem.UnitSystem.get_units_non_prefixed"]], "is_consistent (sympy.physics.units.unitsystem.unitsystem property)": [[190, "sympy.physics.units.unitsystem.UnitSystem.is_consistent"]], "sympy.physics.units.unitsystem": [[190, "module-sympy.physics.units.unitsystem"]], "coordinatesym (class in sympy.physics.vector.frame)": [[192, "sympy.physics.vector.frame.CoordinateSym"]], "dyadic (class in sympy.physics.vector.dyadic)": [[192, "sympy.physics.vector.dyadic.Dyadic"]], "referenceframe (class in sympy.physics.vector.frame)": [[192, "sympy.physics.vector.frame.ReferenceFrame"]], "vector (class in sympy.physics.vector.vector)": [[192, "sympy.physics.vector.vector.Vector"]], "ang_acc_in() (sympy.physics.vector.frame.referenceframe method)": [[192, "sympy.physics.vector.frame.ReferenceFrame.ang_acc_in"]], "ang_vel_in() (sympy.physics.vector.frame.referenceframe method)": [[192, "sympy.physics.vector.frame.ReferenceFrame.ang_vel_in"]], "angle_between() (sympy.physics.vector.vector.vector method)": [[192, "sympy.physics.vector.vector.Vector.angle_between"]], "applyfunc() (sympy.physics.vector.dyadic.dyadic method)": [[192, "sympy.physics.vector.dyadic.Dyadic.applyfunc"]], "applyfunc() (sympy.physics.vector.vector.vector method)": [[192, "sympy.physics.vector.vector.Vector.applyfunc"]], "cross() (sympy.physics.vector.dyadic.dyadic method)": [[192, "sympy.physics.vector.dyadic.Dyadic.cross"]], "cross() (sympy.physics.vector.vector.vector method)": [[192, "sympy.physics.vector.vector.Vector.cross"]], "dcm() (sympy.physics.vector.frame.referenceframe method)": [[192, "sympy.physics.vector.frame.ReferenceFrame.dcm"]], "diff() (sympy.physics.vector.vector.vector method)": [[192, "sympy.physics.vector.vector.Vector.diff"]], "doit() (sympy.physics.vector.dyadic.dyadic method)": [[192, "sympy.physics.vector.dyadic.Dyadic.doit"]], "doit() (sympy.physics.vector.vector.vector method)": [[192, "sympy.physics.vector.vector.Vector.doit"]], "dot() (sympy.physics.vector.dyadic.dyadic method)": [[192, "sympy.physics.vector.dyadic.Dyadic.dot"]], "dot() (sympy.physics.vector.vector.vector method)": [[192, "sympy.physics.vector.vector.Vector.dot"]], "dt() (sympy.physics.vector.dyadic.dyadic method)": [[192, "sympy.physics.vector.dyadic.Dyadic.dt"]], "dt() (sympy.physics.vector.vector.vector method)": [[192, "sympy.physics.vector.vector.Vector.dt"]], "express() (sympy.physics.vector.dyadic.dyadic method)": [[192, "sympy.physics.vector.dyadic.Dyadic.express"]], "express() (sympy.physics.vector.vector.vector method)": [[192, "sympy.physics.vector.vector.Vector.express"]], "free_dynamicsymbols() (sympy.physics.vector.vector.vector method)": [[192, "sympy.physics.vector.vector.Vector.free_dynamicsymbols"]], "free_symbols() (sympy.physics.vector.vector.vector method)": [[192, "sympy.physics.vector.vector.Vector.free_symbols"]], "func (sympy.physics.vector.dyadic.dyadic property)": [[192, "sympy.physics.vector.dyadic.Dyadic.func"]], "func (sympy.physics.vector.vector.vector property)": [[192, "sympy.physics.vector.vector.Vector.func"]], "magnitude() (sympy.physics.vector.vector.vector method)": [[192, "sympy.physics.vector.vector.Vector.magnitude"]], "normalize() (sympy.physics.vector.vector.vector method)": [[192, "sympy.physics.vector.vector.Vector.normalize"]], "orient() (sympy.physics.vector.frame.referenceframe method)": [[192, "sympy.physics.vector.frame.ReferenceFrame.orient"]], "orient_axis() (sympy.physics.vector.frame.referenceframe method)": [[192, "sympy.physics.vector.frame.ReferenceFrame.orient_axis"]], "orient_body_fixed() (sympy.physics.vector.frame.referenceframe method)": [[192, "sympy.physics.vector.frame.ReferenceFrame.orient_body_fixed"]], "orient_explicit() (sympy.physics.vector.frame.referenceframe method)": [[192, "sympy.physics.vector.frame.ReferenceFrame.orient_explicit"]], "orient_quaternion() (sympy.physics.vector.frame.referenceframe method)": [[192, "sympy.physics.vector.frame.ReferenceFrame.orient_quaternion"]], "orient_space_fixed() (sympy.physics.vector.frame.referenceframe method)": [[192, "sympy.physics.vector.frame.ReferenceFrame.orient_space_fixed"]], "orientnew() (sympy.physics.vector.frame.referenceframe method)": [[192, "sympy.physics.vector.frame.ReferenceFrame.orientnew"]], "outer() (sympy.physics.vector.vector.vector method)": [[192, "sympy.physics.vector.vector.Vector.outer"]], "partial_velocity() (sympy.physics.vector.frame.referenceframe method)": [[192, "sympy.physics.vector.frame.ReferenceFrame.partial_velocity"]], "separate() (sympy.physics.vector.vector.vector method)": [[192, "sympy.physics.vector.vector.Vector.separate"]], "set_ang_acc() (sympy.physics.vector.frame.referenceframe method)": [[192, "sympy.physics.vector.frame.ReferenceFrame.set_ang_acc"]], "set_ang_vel() (sympy.physics.vector.frame.referenceframe method)": [[192, "sympy.physics.vector.frame.ReferenceFrame.set_ang_vel"]], "simplify() (sympy.physics.vector.dyadic.dyadic method)": [[192, "sympy.physics.vector.dyadic.Dyadic.simplify"]], "simplify() (sympy.physics.vector.vector.vector method)": [[192, "sympy.physics.vector.vector.Vector.simplify"]], "subs() (sympy.physics.vector.dyadic.dyadic method)": [[192, "sympy.physics.vector.dyadic.Dyadic.subs"]], "subs() (sympy.physics.vector.vector.vector method)": [[192, "sympy.physics.vector.vector.Vector.subs"]], "to_matrix() (sympy.physics.vector.dyadic.dyadic method)": [[192, "sympy.physics.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.physics.vector.vector.vector method)": [[192, "sympy.physics.vector.vector.Vector.to_matrix"]], "u (sympy.physics.vector.frame.referenceframe property)": [[192, "sympy.physics.vector.frame.ReferenceFrame.u"]], "variable_map() (sympy.physics.vector.frame.referenceframe method)": [[192, "sympy.physics.vector.frame.ReferenceFrame.variable_map"]], "x (sympy.physics.vector.frame.referenceframe property)": [[192, "sympy.physics.vector.frame.ReferenceFrame.x"]], "xreplace() (sympy.physics.vector.dyadic.dyadic method)": [[192, "sympy.physics.vector.dyadic.Dyadic.xreplace"]], "xreplace() (sympy.physics.vector.vector.vector method)": [[192, "sympy.physics.vector.vector.Vector.xreplace"]], "xx (sympy.physics.vector.frame.referenceframe property)": [[192, "sympy.physics.vector.frame.ReferenceFrame.xx"]], "xy (sympy.physics.vector.frame.referenceframe property)": [[192, "sympy.physics.vector.frame.ReferenceFrame.xy"]], "xz (sympy.physics.vector.frame.referenceframe property)": [[192, "sympy.physics.vector.frame.ReferenceFrame.xz"]], "y (sympy.physics.vector.frame.referenceframe property)": [[192, "sympy.physics.vector.frame.ReferenceFrame.y"]], "yx (sympy.physics.vector.frame.referenceframe property)": [[192, "sympy.physics.vector.frame.ReferenceFrame.yx"]], "yy (sympy.physics.vector.frame.referenceframe property)": [[192, "sympy.physics.vector.frame.ReferenceFrame.yy"]], "yz (sympy.physics.vector.frame.referenceframe property)": [[192, "sympy.physics.vector.frame.ReferenceFrame.yz"]], "z (sympy.physics.vector.frame.referenceframe property)": [[192, "sympy.physics.vector.frame.ReferenceFrame.z"]], "zx (sympy.physics.vector.frame.referenceframe property)": [[192, "sympy.physics.vector.frame.ReferenceFrame.zx"]], "zy (sympy.physics.vector.frame.referenceframe property)": [[192, "sympy.physics.vector.frame.ReferenceFrame.zy"]], "zz (sympy.physics.vector.frame.referenceframe property)": [[192, "sympy.physics.vector.frame.ReferenceFrame.zz"]], "curl() (in module sympy.physics.vector.fieldfunctions)": [[193, "sympy.physics.vector.fieldfunctions.curl"]], "divergence() (in module sympy.physics.vector.fieldfunctions)": [[193, "sympy.physics.vector.fieldfunctions.divergence"]], "gradient() (in module sympy.physics.vector.fieldfunctions)": [[193, "sympy.physics.vector.fieldfunctions.gradient"]], "is_conservative() (in module sympy.physics.vector.fieldfunctions)": [[193, "sympy.physics.vector.fieldfunctions.is_conservative"]], "is_solenoidal() (in module sympy.physics.vector.fieldfunctions)": [[193, "sympy.physics.vector.fieldfunctions.is_solenoidal"]], "scalar_potential() (in module sympy.physics.vector.fieldfunctions)": [[193, "sympy.physics.vector.fieldfunctions.scalar_potential"]], "scalar_potential_difference() (in module sympy.physics.vector.fieldfunctions)": [[193, "sympy.physics.vector.fieldfunctions.scalar_potential_difference"]], "cross() (in module sympy.physics.vector.functions)": [[194, "sympy.physics.vector.functions.cross"]], "dot() (in module sympy.physics.vector.functions)": [[194, "sympy.physics.vector.functions.dot"]], "dynamicsymbols() (in module sympy.physics.vector)": [[194, "sympy.physics.vector.dynamicsymbols"]], "express() (in module sympy.physics.vector.functions)": [[194, "sympy.physics.vector.functions.express"]], "outer() (in module sympy.physics.vector.functions)": [[194, "sympy.physics.vector.functions.outer"]], "time_derivative() (in module sympy.physics.vector.functions)": [[194, "sympy.physics.vector.functions.time_derivative"]], "point (class in sympy.physics.vector.point)": [[196, "sympy.physics.vector.point.Point"]], "a1pt_theory() (sympy.physics.vector.point.point method)": [[196, "sympy.physics.vector.point.Point.a1pt_theory"]], "a2pt_theory() (sympy.physics.vector.point.point method)": [[196, "sympy.physics.vector.point.Point.a2pt_theory"]], "acc() (sympy.physics.vector.point.point method)": [[196, "sympy.physics.vector.point.Point.acc"]], "get_motion_params() (in module sympy.physics.vector.functions)": [[196, "sympy.physics.vector.functions.get_motion_params"]], "kinematic_equations() (in module sympy.physics.vector.functions)": [[196, "sympy.physics.vector.functions.kinematic_equations"]], "locatenew() (sympy.physics.vector.point.point method)": [[196, "sympy.physics.vector.point.Point.locatenew"]], "partial_velocity() (in module sympy.physics.vector.functions)": [[196, "sympy.physics.vector.functions.partial_velocity"]], "partial_velocity() (sympy.physics.vector.point.point method)": [[196, "sympy.physics.vector.point.Point.partial_velocity"]], "pos_from() (sympy.physics.vector.point.point method)": [[196, "sympy.physics.vector.point.Point.pos_from"]], "set_acc() (sympy.physics.vector.point.point method)": [[196, "sympy.physics.vector.point.Point.set_acc"]], "set_pos() (sympy.physics.vector.point.point method)": [[196, "sympy.physics.vector.point.Point.set_pos"]], "set_vel() (sympy.physics.vector.point.point method)": [[196, "sympy.physics.vector.point.Point.set_vel"]], "sympy.physics.vector.functions": [[196, "module-sympy.physics.vector.functions"]], "sympy.physics.vector.point": [[196, "module-sympy.physics.vector.point"]], "v1pt_theory() (sympy.physics.vector.point.point method)": [[196, "sympy.physics.vector.point.Point.v1pt_theory"]], "v2pt_theory() (sympy.physics.vector.point.point method)": [[196, "sympy.physics.vector.point.Point.v2pt_theory"]], "vel() (sympy.physics.vector.point.point method)": [[196, "sympy.physics.vector.point.Point.vel"]], "init_vprinting() (in module sympy.physics.vector.printing)": [[197, "sympy.physics.vector.printing.init_vprinting"]], "vlatex() (in module sympy.physics.vector.printing)": [[197, "sympy.physics.vector.printing.vlatex"]], "vpprint() (in module sympy.physics.vector.printing)": [[197, "sympy.physics.vector.printing.vpprint"]], "vprint() (in module sympy.physics.vector.printing)": [[197, "sympy.physics.vector.printing.vprint"]], "sympy.physics.vector": [[199, "module-sympy.physics.vector"]], "clebsch_gordan() (in module sympy.physics.wigner)": [[202, "sympy.physics.wigner.clebsch_gordan"]], "dot_rot_grad_ynm() (in module sympy.physics.wigner)": [[202, "sympy.physics.wigner.dot_rot_grad_Ynm"]], "gaunt() (in module sympy.physics.wigner)": [[202, "sympy.physics.wigner.gaunt"]], "racah() (in module sympy.physics.wigner)": [[202, "sympy.physics.wigner.racah"]], "real_gaunt() (in module sympy.physics.wigner)": [[202, "sympy.physics.wigner.real_gaunt"]], "sympy.physics.wigner": [[202, "module-sympy.physics.wigner"]], "wigner_3j() (in module sympy.physics.wigner)": [[202, "sympy.physics.wigner.wigner_3j"]], "wigner_6j() (in module sympy.physics.wigner)": [[202, "sympy.physics.wigner.wigner_6j"]], "wigner_9j() (in module sympy.physics.wigner)": [[202, "sympy.physics.wigner.wigner_9j"]], "wigner_d() (in module sympy.physics.wigner)": [[202, "sympy.physics.wigner.wigner_d"]], "wigner_d_small() (in module sympy.physics.wigner)": [[202, "sympy.physics.wigner.wigner_d_small"]], "baseseries (class in sympy.plotting.plot)": [[203, "sympy.plotting.plot.BaseSeries"]], "implicitseries (class in sympy.plotting.plot_implicit)": [[203, "sympy.plotting.plot_implicit.ImplicitSeries"]], "line2dbaseseries (class in sympy.plotting.plot)": [[203, "sympy.plotting.plot.Line2DBaseSeries"]], "line3dbaseseries (class in sympy.plotting.plot)": [[203, "sympy.plotting.plot.Line3DBaseSeries"]], "lineover1drangeseries (class in sympy.plotting.plot)": [[203, "sympy.plotting.plot.LineOver1DRangeSeries"]], "matplotlibbackend (class in sympy.plotting.plot)": [[203, "sympy.plotting.plot.MatplotlibBackend"]], "parametric2dlineseries (class in sympy.plotting.plot)": [[203, "sympy.plotting.plot.Parametric2DLineSeries"]], "parametric3dlineseries (class in sympy.plotting.plot)": [[203, "sympy.plotting.plot.Parametric3DLineSeries"]], "parametricsurfaceseries (class in sympy.plotting.plot)": [[203, "sympy.plotting.plot.ParametricSurfaceSeries"]], "plot (class in sympy.plotting.plot)": [[203, "sympy.plotting.plot.Plot"]], "plotgrid (class in sympy.plotting.plot)": [[203, "sympy.plotting.plot.PlotGrid"]], "surfacebaseseries (class in sympy.plotting.plot)": [[203, "sympy.plotting.plot.SurfaceBaseSeries"]], "surfaceover2drangeseries (class in sympy.plotting.plot)": [[203, "sympy.plotting.plot.SurfaceOver2DRangeSeries"]], "textbackend (class in sympy.plotting.plot)": [[203, "sympy.plotting.plot.TextBackend"]], "annotations (sympy.plotting.plot.plot property)": [[203, "sympy.plotting.plot.Plot.annotations"]], "append() (sympy.plotting.plot.plot method)": [[203, "sympy.plotting.plot.Plot.append"]], "extend() (sympy.plotting.plot.plot method)": [[203, "sympy.plotting.plot.Plot.extend"]], "fill (sympy.plotting.plot.plot property)": [[203, "sympy.plotting.plot.Plot.fill"]], "get_data() (sympy.plotting.plot.line2dbaseseries method)": [[203, "sympy.plotting.plot.Line2DBaseSeries.get_data"]], "get_points() (sympy.plotting.plot.lineover1drangeseries method)": [[203, "sympy.plotting.plot.LineOver1DRangeSeries.get_points"]], "get_points() (sympy.plotting.plot.parametric2dlineseries method)": [[203, "sympy.plotting.plot.Parametric2DLineSeries.get_points"]], "get_segments() (sympy.plotting.plot.matplotlibbackend static method)": [[203, "sympy.plotting.plot.MatplotlibBackend.get_segments"]], "markers (sympy.plotting.plot.plot property)": [[203, "sympy.plotting.plot.Plot.markers"]], "plot() (in module sympy.plotting.plot)": [[203, "sympy.plotting.plot.plot"]], "plot3d() (in module sympy.plotting.plot)": [[203, "sympy.plotting.plot.plot3d"]], "plot3d_parametric_line() (in module sympy.plotting.plot)": [[203, "sympy.plotting.plot.plot3d_parametric_line"]], "plot3d_parametric_surface() (in module sympy.plotting.plot)": [[203, "sympy.plotting.plot.plot3d_parametric_surface"]], "plot_implicit() (in module sympy.plotting.plot_implicit)": [[203, "sympy.plotting.plot_implicit.plot_implicit"]], "plot_parametric() (in module sympy.plotting.plot)": [[203, "sympy.plotting.plot.plot_parametric"]], "process_series() (sympy.plotting.plot.matplotlibbackend method)": [[203, "sympy.plotting.plot.MatplotlibBackend.process_series"]], "rectangles (sympy.plotting.plot.plot property)": [[203, "sympy.plotting.plot.Plot.rectangles"]], "sympy.plotting.plot": [[203, "module-sympy.plotting.plot"]], "sympy.plotting.pygletplot": [[203, "module-sympy.plotting.pygletplot"]], "textplot() (in module sympy.plotting.textplot)": [[203, "sympy.plotting.textplot.textplot"]], "extensionelement (class in sympy.polys.agca.extensions)": [[204, "sympy.polys.agca.extensions.ExtensionElement"]], "freemodule (class in sympy.polys.agca.modules)": [[204, "sympy.polys.agca.modules.FreeModule"]], "freemoduleelement (class in sympy.polys.agca.modules)": [[204, "sympy.polys.agca.modules.FreeModuleElement"]], "ideal (class in sympy.polys.agca.ideals)": [[204, "sympy.polys.agca.ideals.Ideal"]], "module (class in sympy.polys.agca.modules)": [[204, "sympy.polys.agca.modules.Module"]], "modulehomomorphism (class in sympy.polys.agca.homomorphisms)": [[204, "sympy.polys.agca.homomorphisms.ModuleHomomorphism"]], "monogenicfiniteextension (class in sympy.polys.agca.extensions)": [[204, "sympy.polys.agca.extensions.MonogenicFiniteExtension"]], "quotientmodule (class in sympy.polys.agca.modules)": [[204, "sympy.polys.agca.modules.QuotientModule"]], "quotientmoduleelement (class in sympy.polys.agca.modules)": [[204, "sympy.polys.agca.modules.QuotientModuleElement"]], "submodule (class in sympy.polys.agca.modules)": [[204, "sympy.polys.agca.modules.SubModule"]], "subquotientmodule (class in sympy.polys.agca.modules)": [[204, "sympy.polys.agca.modules.SubQuotientModule"]], "basis() (sympy.polys.agca.modules.freemodule method)": [[204, "sympy.polys.agca.modules.FreeModule.basis"]], "contains() (sympy.polys.agca.ideals.ideal method)": [[204, "sympy.polys.agca.ideals.Ideal.contains"]], "contains() (sympy.polys.agca.modules.module method)": [[204, "sympy.polys.agca.modules.Module.contains"]], "convert() (sympy.polys.agca.modules.freemodule method)": [[204, "sympy.polys.agca.modules.FreeModule.convert"]], "convert() (sympy.polys.agca.modules.module method)": [[204, "sympy.polys.agca.modules.Module.convert"]], "convert() (sympy.polys.agca.modules.quotientmodule method)": [[204, "sympy.polys.agca.modules.QuotientModule.convert"]], "convert() (sympy.polys.agca.modules.submodule method)": [[204, "sympy.polys.agca.modules.SubModule.convert"]], "depth() (sympy.polys.agca.ideals.ideal method)": [[204, "sympy.polys.agca.ideals.Ideal.depth"]], "dtype (sympy.polys.agca.extensions.monogenicfiniteextension attribute)": [[204, "sympy.polys.agca.extensions.MonogenicFiniteExtension.dtype"]], "dtype (sympy.polys.agca.modules.freemodule attribute)": [[204, "sympy.polys.agca.modules.FreeModule.dtype"]], "dtype (sympy.polys.agca.modules.quotientmodule attribute)": [[204, "sympy.polys.agca.modules.QuotientModule.dtype"]], "eq() (sympy.polys.agca.modules.quotientmoduleelement method)": [[204, "sympy.polys.agca.modules.QuotientModuleElement.eq"]], "height() (sympy.polys.agca.ideals.ideal method)": [[204, "sympy.polys.agca.ideals.Ideal.height"]], "homomorphism() (in module sympy.polys.agca.homomorphisms)": [[204, "sympy.polys.agca.homomorphisms.homomorphism"]], "identity_hom() (sympy.polys.agca.modules.freemodule method)": [[204, "sympy.polys.agca.modules.FreeModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.module method)": [[204, "sympy.polys.agca.modules.Module.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.quotientmodule method)": [[204, "sympy.polys.agca.modules.QuotientModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.submodule method)": [[204, "sympy.polys.agca.modules.SubModule.identity_hom"]], "image() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[204, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.image"]], "in_terms_of_generators() (sympy.polys.agca.modules.submodule method)": [[204, "sympy.polys.agca.modules.SubModule.in_terms_of_generators"]], "inclusion_hom() (sympy.polys.agca.modules.submodule method)": [[204, "sympy.polys.agca.modules.SubModule.inclusion_hom"]], "intersect() (sympy.polys.agca.ideals.ideal method)": [[204, "sympy.polys.agca.ideals.Ideal.intersect"]], "intersect() (sympy.polys.agca.modules.submodule method)": [[204, "sympy.polys.agca.modules.SubModule.intersect"]], "inverse() (sympy.polys.agca.extensions.extensionelement method)": [[204, "sympy.polys.agca.extensions.ExtensionElement.inverse"]], "is_full_module() (sympy.polys.agca.modules.submodule method)": [[204, "sympy.polys.agca.modules.SubModule.is_full_module"]], "is_full_module() (sympy.polys.agca.modules.subquotientmodule method)": [[204, "sympy.polys.agca.modules.SubQuotientModule.is_full_module"]], "is_injective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[204, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_injective"]], "is_isomorphism() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[204, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_isomorphism"]], "is_maximal() (sympy.polys.agca.ideals.ideal method)": [[204, "sympy.polys.agca.ideals.Ideal.is_maximal"]], "is_primary() (sympy.polys.agca.ideals.ideal method)": [[204, "sympy.polys.agca.ideals.Ideal.is_primary"]], "is_prime() (sympy.polys.agca.ideals.ideal method)": [[204, "sympy.polys.agca.ideals.Ideal.is_prime"]], "is_principal() (sympy.polys.agca.ideals.ideal method)": [[204, "sympy.polys.agca.ideals.Ideal.is_principal"]], "is_radical() (sympy.polys.agca.ideals.ideal method)": [[204, "sympy.polys.agca.ideals.Ideal.is_radical"]], "is_submodule() (sympy.polys.agca.modules.freemodule method)": [[204, "sympy.polys.agca.modules.FreeModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.module method)": [[204, "sympy.polys.agca.modules.Module.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.quotientmodule method)": [[204, "sympy.polys.agca.modules.QuotientModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.submodule method)": [[204, "sympy.polys.agca.modules.SubModule.is_submodule"]], "is_surjective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[204, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_surjective"]], "is_whole_ring() (sympy.polys.agca.ideals.ideal method)": [[204, "sympy.polys.agca.ideals.Ideal.is_whole_ring"]], "is_zero() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[204, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_zero"]], "is_zero() (sympy.polys.agca.ideals.ideal method)": [[204, "sympy.polys.agca.ideals.Ideal.is_zero"]], "is_zero() (sympy.polys.agca.modules.freemodule method)": [[204, "sympy.polys.agca.modules.FreeModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.module method)": [[204, "sympy.polys.agca.modules.Module.is_zero"]], "is_zero() (sympy.polys.agca.modules.quotientmodule method)": [[204, "sympy.polys.agca.modules.QuotientModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.submodule method)": [[204, "sympy.polys.agca.modules.SubModule.is_zero"]], "kernel() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[204, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.kernel"]], "module_quotient() (sympy.polys.agca.modules.submodule method)": [[204, "sympy.polys.agca.modules.SubModule.module_quotient"]], "multiply_ideal() (sympy.polys.agca.modules.freemodule method)": [[204, "sympy.polys.agca.modules.FreeModule.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.module method)": [[204, "sympy.polys.agca.modules.Module.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.submodule method)": [[204, "sympy.polys.agca.modules.SubModule.multiply_ideal"]], "product() (sympy.polys.agca.ideals.ideal method)": [[204, "sympy.polys.agca.ideals.Ideal.product"]], "quotient() (sympy.polys.agca.ideals.ideal method)": [[204, "sympy.polys.agca.ideals.Ideal.quotient"]], "quotient_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[204, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_codomain"]], "quotient_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[204, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_domain"]], "quotient_hom() (sympy.polys.agca.modules.quotientmodule method)": [[204, "sympy.polys.agca.modules.QuotientModule.quotient_hom"]], "quotient_hom() (sympy.polys.agca.modules.subquotientmodule method)": [[204, "sympy.polys.agca.modules.SubQuotientModule.quotient_hom"]], "quotient_module() (sympy.polys.agca.modules.freemodule method)": [[204, "sympy.polys.agca.modules.FreeModule.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.module method)": [[204, "sympy.polys.agca.modules.Module.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.submodule method)": [[204, "sympy.polys.agca.modules.SubModule.quotient_module"]], "radical() (sympy.polys.agca.ideals.ideal method)": [[204, "sympy.polys.agca.ideals.Ideal.radical"]], "reduce_element() (sympy.polys.agca.ideals.ideal method)": [[204, "sympy.polys.agca.ideals.Ideal.reduce_element"]], "reduce_element() (sympy.polys.agca.modules.submodule method)": [[204, "sympy.polys.agca.modules.SubModule.reduce_element"]], "restrict_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[204, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_codomain"]], "restrict_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[204, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_domain"]], "saturate() (sympy.polys.agca.ideals.ideal method)": [[204, "sympy.polys.agca.ideals.Ideal.saturate"]], "submodule() (sympy.polys.agca.modules.module method)": [[204, "sympy.polys.agca.modules.Module.submodule"]], "submodule() (sympy.polys.agca.modules.quotientmodule method)": [[204, "sympy.polys.agca.modules.QuotientModule.submodule"]], "submodule() (sympy.polys.agca.modules.submodule method)": [[204, "sympy.polys.agca.modules.SubModule.submodule"]], "subset() (sympy.polys.agca.ideals.ideal method)": [[204, "sympy.polys.agca.ideals.Ideal.subset"]], "subset() (sympy.polys.agca.modules.module method)": [[204, "sympy.polys.agca.modules.Module.subset"]], "syzygy_module() (sympy.polys.agca.modules.submodule method)": [[204, "sympy.polys.agca.modules.SubModule.syzygy_module"]], "union() (sympy.polys.agca.ideals.ideal method)": [[204, "sympy.polys.agca.ideals.Ideal.union"]], "union() (sympy.polys.agca.modules.submodule method)": [[204, "sympy.polys.agca.modules.SubModule.union"]], "ddm (class in sympy.polys.matrices.ddm)": [[206, "sympy.polys.matrices.ddm.DDM"]], "dm() (in module sympy.polys.matrices.domainmatrix)": [[206, "sympy.polys.matrices.domainmatrix.DM"]], "domainmatrix (class in sympy.polys.matrices.domainmatrix)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix"]], "r (class in sympy.polys.matrices.dense)": [[206, "sympy.polys.matrices.dense.R"]], "ringelement (class in sympy.polys.matrices._typing)": [[206, "sympy.polys.matrices._typing.RingElement"]], "sdm (class in sympy.polys.matrices.sdm)": [[206, "sympy.polys.matrices.sdm.SDM"]], "t (class in sympy.polys.matrices.dense)": [[206, "sympy.polys.matrices.dense.T"]], "add() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.add"]], "add() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.add"]], "add() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.add"]], "adj_det() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.adj_det"]], "adj_poly_det() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.adj_poly_det"]], "adjugate() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.adjugate"]], "charpoly() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.charpoly"]], "charpoly() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly"]], "charpoly() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.charpoly"]], "choose_domain() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.choose_domain"]], "clear_denoms() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.clear_denoms"]], "columnspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.columnspace"]], "convert_to() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.convert_to"]], "convert_to() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.convert_to"]], "copy() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.copy"]], "ddm_berk() (in module sympy.polys.matrices.dense)": [[206, "sympy.polys.matrices.dense.ddm_berk"]], "ddm_iadd() (in module sympy.polys.matrices.dense)": [[206, "sympy.polys.matrices.dense.ddm_iadd"]], "ddm_idet() (in module sympy.polys.matrices.dense)": [[206, "sympy.polys.matrices.dense.ddm_idet"]], "ddm_iinv() (in module sympy.polys.matrices.dense)": [[206, "sympy.polys.matrices.dense.ddm_iinv"]], "ddm_ilu() (in module sympy.polys.matrices.dense)": [[206, "sympy.polys.matrices.dense.ddm_ilu"]], "ddm_ilu_solve() (in module sympy.polys.matrices.dense)": [[206, "sympy.polys.matrices.dense.ddm_ilu_solve"]], "ddm_ilu_split() (in module sympy.polys.matrices.dense)": [[206, "sympy.polys.matrices.dense.ddm_ilu_split"]], "ddm_imatmul() (in module sympy.polys.matrices.dense)": [[206, "sympy.polys.matrices.dense.ddm_imatmul"]], "ddm_imul() (in module sympy.polys.matrices.dense)": [[206, "sympy.polys.matrices.dense.ddm_imul"]], "ddm_ineg() (in module sympy.polys.matrices.dense)": [[206, "sympy.polys.matrices.dense.ddm_ineg"]], "ddm_irmul() (in module sympy.polys.matrices.dense)": [[206, "sympy.polys.matrices.dense.ddm_irmul"]], "ddm_irref() (in module sympy.polys.matrices.dense)": [[206, "sympy.polys.matrices.dense.ddm_irref"]], "ddm_irref_den() (in module sympy.polys.matrices.dense)": [[206, "sympy.polys.matrices.dense.ddm_irref_den"]], "ddm_isub() (in module sympy.polys.matrices.dense)": [[206, "sympy.polys.matrices.dense.ddm_isub"]], "ddm_transpose() (in module sympy.polys.matrices.dense)": [[206, "sympy.polys.matrices.dense.ddm_transpose"]], "det() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.det"]], "det() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.det"]], "det() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.det"]], "diag() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.diag"]], "eval_poly() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.eval_poly"]], "eval_poly_mul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.eval_poly_mul"]], "eye() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.eye"]], "eye() (sympy.polys.matrices.sdm.sdm class method)": [[206, "sympy.polys.matrices.sdm.SDM.eye"]], "from_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix"]], "from_ddm() (sympy.polys.matrices.sdm.sdm class method)": [[206, "sympy.polys.matrices.sdm.SDM.from_ddm"]], "from_dict_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dict_sympy"]], "from_dok() (sympy.polys.matrices.ddm.ddm class method)": [[206, "sympy.polys.matrices.ddm.DDM.from_dok"]], "from_dok() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dok"]], "from_dok() (sympy.polys.matrices.sdm.sdm class method)": [[206, "sympy.polys.matrices.sdm.SDM.from_dok"]], "from_flat_nz() (sympy.polys.matrices.ddm.ddm class method)": [[206, "sympy.polys.matrices.ddm.DDM.from_flat_nz"]], "from_flat_nz() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_flat_nz"]], "from_flat_nz() (sympy.polys.matrices.sdm.sdm class method)": [[206, "sympy.polys.matrices.sdm.SDM.from_flat_nz"]], "from_list() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list"]], "from_list() (sympy.polys.matrices.sdm.sdm class method)": [[206, "sympy.polys.matrices.sdm.SDM.from_list"]], "from_list_flat() (sympy.polys.matrices.ddm.ddm class method)": [[206, "sympy.polys.matrices.ddm.DDM.from_list_flat"]], "from_list_flat() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_flat"]], "from_list_flat() (sympy.polys.matrices.sdm.sdm class method)": [[206, "sympy.polys.matrices.sdm.SDM.from_list_flat"]], "from_list_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_sympy"]], "from_rep() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_rep"]], "hermite_normal_form() (in module sympy.polys.matrices.normalforms)": [[206, "sympy.polys.matrices.normalforms.hermite_normal_form"]], "hstack() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.hstack"]], "hstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.hstack"]], "hstack() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.hstack"]], "inv() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.inv"]], "inv() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.inv"]], "inv() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.inv"]], "inv_den() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.inv_den"]], "is_lower (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_lower"]], "is_lower() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.is_lower"]], "is_lower() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.is_lower"]], "is_upper (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_upper"]], "is_upper() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.is_upper"]], "is_upper() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.is_upper"]], "is_zero_matrix() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.is_zero_matrix"]], "is_zero_matrix() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.is_zero_matrix"]], "lll() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.lll"]], "lll_transform() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.lll_transform"]], "lu() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.lu"]], "lu() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu"]], "lu() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.lu"]], "lu_solve() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.lu_solve"]], "lu_solve() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve"]], "lu_solve() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.lu_solve"]], "matmul() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.matmul"]], "matmul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.matmul"]], "matmul() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.matmul"]], "mul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.mul"]], "mul() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.mul"]], "neg() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.neg"]], "neg() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.neg"]], "neg() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.neg"]], "new() (sympy.polys.matrices.sdm.sdm class method)": [[206, "sympy.polys.matrices.sdm.SDM.new"]], "nullspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace"]], "nullspace() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.nullspace"]], "ones() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.ones"]], "pow() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.pow"]], "rowspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.rowspace"]], "rref() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.rref"]], "rref() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.rref"]], "rref() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.rref"]], "rref_den() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.rref_den"]], "rref_den() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den"]], "rref_den() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.rref_den"]], "scc() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.scc"]], "scc() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.scc"]], "scc() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.scc"]], "sdm_irref() (in module sympy.polys.matrices.sdm)": [[206, "sympy.polys.matrices.sdm.sdm_irref"]], "sdm_nullspace_from_rref() (in module sympy.polys.matrices.sdm)": [[206, "sympy.polys.matrices.sdm.sdm_nullspace_from_rref"]], "sdm_particular_from_rref() (in module sympy.polys.matrices.sdm)": [[206, "sympy.polys.matrices.sdm.sdm_particular_from_rref"]], "smith_normal_form() (in module sympy.polys.matrices.normalforms)": [[206, "sympy.polys.matrices.normalforms.smith_normal_form"]], "solve_den() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den"]], "solve_den_charpoly() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den_charpoly"]], "solve_den_rref() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den_rref"]], "sub() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.sub"]], "sub() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.sub"]], "sub() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.sub"]], "sympy.polys.matrices._typing": [[206, "module-sympy.polys.matrices._typing"]], "sympy.polys.matrices.ddm": [[206, "module-sympy.polys.matrices.ddm"]], "sympy.polys.matrices.dense": [[206, "module-sympy.polys.matrices.dense"]], "sympy.polys.matrices.domainmatrix": [[206, "module-sympy.polys.matrices.domainmatrix"]], "sympy.polys.matrices.sdm": [[206, "module-sympy.polys.matrices.sdm"]], "to_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_Matrix"]], "to_ddm() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_ddm"]], "to_ddm() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.to_ddm"]], "to_dense() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense"]], "to_dok() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.to_dok"]], "to_dok() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dok"]], "to_dok() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.to_dok"]], "to_field() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_field"]], "to_flat_nz() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.to_flat_nz"]], "to_flat_nz() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz"]], "to_flat_nz() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.to_flat_nz"]], "to_list() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_list"]], "to_list() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.to_list"]], "to_list_flat() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.to_list_flat"]], "to_list_flat() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_list_flat"]], "to_list_flat() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.to_list_flat"]], "to_sdm() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.to_sdm"]], "to_sdm() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_sdm"]], "to_sparse() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_sparse"]], "transpose() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.transpose"]], "transpose() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.transpose"]], "unify() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.unify"]], "vstack() (sympy.polys.matrices.ddm.ddm method)": [[206, "sympy.polys.matrices.ddm.DDM.vstack"]], "vstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.vstack"]], "vstack() (sympy.polys.matrices.sdm.sdm method)": [[206, "sympy.polys.matrices.sdm.SDM.vstack"]], "zeros() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[206, "sympy.polys.matrices.domainmatrix.DomainMatrix.zeros"]], "zeros() (sympy.polys.matrices.sdm.sdm class method)": [[206, "sympy.polys.matrices.sdm.SDM.zeros"]], "anp (class in sympy.polys.polyclasses)": [[208, "sympy.polys.polyclasses.ANP"]], "algebraicfield (class in sympy.polys.domains)": [[208, "sympy.polys.domains.AlgebraicField"]], "complexelement (class in sympy.polys.domains.mpelements)": [[208, "sympy.polys.domains.mpelements.ComplexElement"]], "complexfield (class in sympy.polys.domains)": [[208, "sympy.polys.domains.ComplexField"]], "compositedomain (class in sympy.polys.domains.compositedomain)": [[208, "sympy.polys.domains.compositedomain.CompositeDomain"]], "dmf (class in sympy.polys.polyclasses)": [[208, "sympy.polys.polyclasses.DMF"]], "dmp (class in sympy.polys.polyclasses)": [[208, "sympy.polys.polyclasses.DMP"]], "domain (class in sympy.polys.domains.domain)": [[208, "sympy.polys.domains.domain.Domain"]], "domainelement (class in sympy.polys.domains.domainelement)": [[208, "sympy.polys.domains.domainelement.DomainElement"]], "expressiondomain (class in sympy.polys.domains)": [[208, "sympy.polys.domains.ExpressionDomain"]], "expressiondomain.expression (class in sympy.polys.domains)": [[208, "sympy.polys.domains.ExpressionDomain.Expression"]], "expressiondomain.expression (class in sympy.polys.domains.expressiondomain)": [[208, "sympy.polys.domains.expressiondomain.ExpressionDomain.Expression"]], "field (class in sympy.polys.domains.field)": [[208, "sympy.polys.domains.field.Field"]], "finitefield (class in sympy.polys.domains)": [[208, "sympy.polys.domains.FiniteField"]], "fracelement (class in sympy.polys.fields)": [[208, "sympy.polys.fields.FracElement"]], "fracfield (class in sympy.polys.fields)": [[208, "sympy.polys.fields.FracField"]], "fractionfield (class in sympy.polys.domains)": [[208, "sympy.polys.domains.FractionField"]], "gmpyfinitefield (class in sympy.polys.domains)": [[208, "sympy.polys.domains.GMPYFiniteField"]], "gmpyintegerring (class in sympy.polys.domains)": [[208, "sympy.polys.domains.GMPYIntegerRing"]], "gmpyrationalfield (class in sympy.polys.domains)": [[208, "sympy.polys.domains.GMPYRationalField"]], "gaussiandomain (class in sympy.polys.domains.gaussiandomains)": [[208, "sympy.polys.domains.gaussiandomains.GaussianDomain"]], "gaussianelement (class in sympy.polys.domains.gaussiandomains)": [[208, "sympy.polys.domains.gaussiandomains.GaussianElement"]], "gaussianinteger (class in sympy.polys.domains.gaussiandomains)": [[208, "sympy.polys.domains.gaussiandomains.GaussianInteger"]], "gaussianintegerring (class in sympy.polys.domains.gaussiandomains)": [[208, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing"]], "gaussianrational (class in sympy.polys.domains.gaussiandomains)": [[208, "sympy.polys.domains.gaussiandomains.GaussianRational"]], "gaussianrationalfield (class in sympy.polys.domains.gaussiandomains)": [[208, "sympy.polys.domains.gaussiandomains.GaussianRationalField"]], "integerring (class in sympy.polys.domains)": [[208, "sympy.polys.domains.IntegerRing"]], "lc() (sympy.polys.polyclasses.anp method)": [[208, "sympy.polys.polyclasses.ANP.LC"]], "lc() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.LC"]], "polyelement (class in sympy.polys.rings)": [[208, "sympy.polys.rings.PolyElement"]], "polyring (class in sympy.polys.rings)": [[208, "sympy.polys.rings.PolyRing"]], "polynomialring (class in sympy.polys.domains)": [[208, "sympy.polys.domains.PolynomialRing"]], "pythonfinitefield (class in sympy.polys.domains)": [[208, "sympy.polys.domains.PythonFiniteField"]], "pythonintegerring (class in sympy.polys.domains)": [[208, "sympy.polys.domains.PythonIntegerRing"]], "pythonmpq (class in sympy.external.pythonmpq)": [[208, "sympy.external.pythonmpq.PythonMPQ"]], "pythonrationalfield (class in sympy.polys.domains)": [[208, "sympy.polys.domains.PythonRationalField"]], "quotientring (class in sympy.polys.domains.quotientring)": [[208, "sympy.polys.domains.quotientring.QuotientRing"]], "rationalfield (class in sympy.polys.domains)": [[208, "sympy.polys.domains.RationalField"]], "realelement (class in sympy.polys.domains.mpelements)": [[208, "sympy.polys.domains.mpelements.RealElement"]], "realfield (class in sympy.polys.domains)": [[208, "sympy.polys.domains.RealField"]], "ring (class in sympy.polys.domains.ring)": [[208, "sympy.polys.domains.ring.Ring"]], "simpledomain (class in sympy.polys.domains.simpledomain)": [[208, "sympy.polys.domains.simpledomain.SimpleDomain"]], "tc() (sympy.polys.polyclasses.anp method)": [[208, "sympy.polys.polyclasses.ANP.TC"]], "tc() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.TC"]], "abs() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.abs"]], "abs() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.abs"]], "add() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.add"]], "add() (sympy.polys.polyclasses.dmf method)": [[208, "sympy.polys.polyclasses.DMF.add"]], "add() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.add"]], "add() (sympy.polys.rings.polyring method)": [[208, "sympy.polys.rings.PolyRing.add"]], "add_gens() (sympy.polys.rings.polyring method)": [[208, "sympy.polys.rings.PolyRing.add_gens"]], "add_ground() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.add_ground"]], "alg_field_from_poly() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.alg_field_from_poly"]], "algebraic_field() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.algebraic_field"]], "algebraic_field() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.algebraic_field"]], "all_coeffs() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.all_coeffs"]], "all_monoms() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.all_monoms"]], "all_terms() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.all_terms"]], "almosteq() (sympy.polys.domains.complexfield method)": [[208, "sympy.polys.domains.ComplexField.almosteq"]], "almosteq() (sympy.polys.domains.realfield method)": [[208, "sympy.polys.domains.RealField.almosteq"]], "almosteq() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.almosteq"]], "almosteq() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.almosteq"]], "as_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianRationalField.as_AlgebraicField"]], "cancel() (sympy.polys.polyclasses.dmf method)": [[208, "sympy.polys.polyclasses.DMF.cancel"]], "cancel() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.cancel"]], "cancel() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.cancel"]], "cauchy_lower_bound() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.cauchy_lower_bound"]], "cauchy_upper_bound() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.cauchy_upper_bound"]], "characteristic() (sympy.polys.domains.finitefield method)": [[208, "sympy.polys.domains.FiniteField.characteristic"]], "characteristic() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.characteristic"]], "clear_denoms() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.clear_denoms"]], "coeff() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.coeff"]], "coeffs() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.coeffs"]], "coeffs() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.coeffs"]], "cofactors() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.cofactors"]], "cofactors() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.cofactors"]], "compose() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.compose"]], "compose() (sympy.polys.rings.polyring method)": [[208, "sympy.polys.rings.PolyRing.compose"]], "const() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.const"]], "content() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.content"]], "content() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.content"]], "convert() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.convert"]], "convert() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.convert"]], "convert_from() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.convert_from"]], "copy() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.copy"]], "count_complex_roots() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.count_complex_roots"]], "count_real_roots() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.count_real_roots"]], "cyclotomic_field() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.cyclotomic_field"]], "decompose() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.decompose"]], "deflate() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.deflate"]], "degree() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.degree"]], "degree() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.degree"]], "degree_list() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.degree_list"]], "degrees() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.degrees"]], "denom() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.denom"]], "denom() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.denom"]], "denom() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.denom"]], "denom() (sympy.polys.domains.gmpyrationalfield method)": [[208, "sympy.polys.domains.GMPYRationalField.denom"]], "denom() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.denom"]], "denom() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.denom"]], "denom() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianRationalField.denom"]], "denom() (sympy.polys.domains.ring.ring method)": [[208, "sympy.polys.domains.ring.Ring.denom"]], "denom() (sympy.polys.polyclasses.dmf method)": [[208, "sympy.polys.polyclasses.DMF.denom"]], "diff() (sympy.polys.fields.fracelement method)": [[208, "sympy.polys.fields.FracElement.diff"]], "diff() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.diff"]], "diff() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.diff"]], "discriminant() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.discriminant"]], "discriminant() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.discriminant"]], "div() (sympy.polys.domains.gmpyrationalfield method)": [[208, "sympy.polys.domains.GMPYRationalField.div"]], "div() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.div"]], "div() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.div"]], "div() (sympy.polys.domains.field.field method)": [[208, "sympy.polys.domains.field.Field.div"]], "div() (sympy.polys.domains.ring.ring method)": [[208, "sympy.polys.domains.ring.Ring.div"]], "div() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.div"]], "div() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.div"]], "drop() (sympy.polys.domains.compositedomain.compositedomain method)": [[208, "sympy.polys.domains.compositedomain.CompositeDomain.drop"]], "drop() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.drop"]], "drop() (sympy.polys.rings.polyring method)": [[208, "sympy.polys.rings.PolyRing.drop"]], "drop_to_ground() (sympy.polys.rings.polyring method)": [[208, "sympy.polys.rings.PolyRing.drop_to_ground"]], "dtype (sympy.polys.domains.algebraicfield attribute)": [[208, "sympy.polys.domains.AlgebraicField.dtype"]], "dtype (sympy.polys.domains.expressiondomain attribute)": [[208, "sympy.polys.domains.ExpressionDomain.dtype"]], "dtype (sympy.polys.domains.domain.domain attribute)": [[208, "sympy.polys.domains.domain.Domain.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianintegerring attribute)": [[208, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianrationalfield attribute)": [[208, "sympy.polys.domains.gaussiandomains.GaussianRationalField.dtype"]], "eject() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.eject"]], "eval() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.eval"]], "evalf() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.evalf"]], "exclude() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.exclude"]], "exquo() (sympy.polys.domains.gmpyrationalfield method)": [[208, "sympy.polys.domains.GMPYRationalField.exquo"]], "exquo() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.exquo"]], "exquo() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.exquo"]], "exquo() (sympy.polys.domains.field.field method)": [[208, "sympy.polys.domains.field.Field.exquo"]], "exquo() (sympy.polys.domains.ring.ring method)": [[208, "sympy.polys.domains.ring.Ring.exquo"]], "exquo() (sympy.polys.polyclasses.dmf method)": [[208, "sympy.polys.polyclasses.DMF.exquo"]], "exquo() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.exquo"]], "exquo_ground() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.exquo_ground"]], "exsqrt() (sympy.polys.domains.complexfield method)": [[208, "sympy.polys.domains.ComplexField.exsqrt"]], "exsqrt() (sympy.polys.domains.finitefield method)": [[208, "sympy.polys.domains.FiniteField.exsqrt"]], "exsqrt() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.exsqrt"]], "exsqrt() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.exsqrt"]], "exsqrt() (sympy.polys.domains.realfield method)": [[208, "sympy.polys.domains.RealField.exsqrt"]], "exsqrt() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.exsqrt"]], "ext (sympy.polys.domains.algebraicfield attribute)": [[208, "sympy.polys.domains.AlgebraicField.ext"]], "factor_list() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.factor_list"]], "factor_list_include() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.factor_list_include"]], "factorial() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.factorial"]], "factorial() (sympy.polys.domains.gmpyintegerring method)": [[208, "sympy.polys.domains.GMPYIntegerRing.factorial"]], "factorial() (sympy.polys.domains.gmpyrationalfield method)": [[208, "sympy.polys.domains.GMPYRationalField.factorial"]], "factorial() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.factorial"]], "factorial() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.factorial"]], "field() (in module sympy.polys.fields)": [[208, "sympy.polys.fields.field"]], "frac_field() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.frac_field"]], "frac_unify() (sympy.polys.polyclasses.dmf method)": [[208, "sympy.polys.polyclasses.DMF.frac_unify"]], "free_module() (sympy.polys.domains.ring.ring method)": [[208, "sympy.polys.domains.ring.Ring.free_module"]], "from_algebraicfield() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_AlgebraicField"]], "from_complexfield() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.from_ComplexField"]], "from_expressiondomain() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.from_ExpressionDomain"]], "from_expressiondomain() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.from_ExpressionDomain"]], "from_expressionrawdomain() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.from_ExpressionRawDomain"]], "from_ff() (sympy.polys.domains.finitefield method)": [[208, "sympy.polys.domains.FiniteField.from_FF"]], "from_ff() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.from_FF"]], "from_ff() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.from_FF"]], "from_ff_gmpy() (sympy.polys.domains.finitefield method)": [[208, "sympy.polys.domains.FiniteField.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[208, "sympy.polys.domains.GMPYIntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.from_FF_gmpy"]], "from_ff_python() (sympy.polys.domains.finitefield method)": [[208, "sympy.polys.domains.FiniteField.from_FF_python"]], "from_ff_python() (sympy.polys.domains.gmpyintegerring method)": [[208, "sympy.polys.domains.GMPYIntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.from_FF_python"]], "from_fractionfield() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.from_FractionField"]], "from_gaussianintegerring() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianIntegerRing"]], "from_gaussianrationalfield() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gmpyrationalfield method)": [[208, "sympy.polys.domains.GMPYRationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianRationalField"]], "from_globalpolynomialring() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.from_GlobalPolynomialRing"]], "from_globalpolynomialring() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.from_GlobalPolynomialRing"]], "from_monogenicfiniteextension() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.from_MonogenicFiniteExtension"]], "from_polynomialring() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.from_PolynomialRing"]], "from_qq() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.from_QQ"]], "from_qq() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.from_QQ"]], "from_qq() (sympy.polys.domains.finitefield method)": [[208, "sympy.polys.domains.FiniteField.from_QQ"]], "from_qq() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.from_QQ"]], "from_qq() (sympy.polys.domains.gmpyintegerring method)": [[208, "sympy.polys.domains.GMPYIntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.from_QQ"]], "from_qq() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.from_QQ"]], "from_qq() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ"]], "from_qq_gmpy() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.finitefield method)": [[208, "sympy.polys.domains.FiniteField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[208, "sympy.polys.domains.GMPYIntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[208, "sympy.polys.domains.GMPYRationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_gmpy"]], "from_qq_python() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.finitefield method)": [[208, "sympy.polys.domains.FiniteField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyintegerring method)": [[208, "sympy.polys.domains.GMPYIntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyrationalfield method)": [[208, "sympy.polys.domains.GMPYRationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_python"]], "from_realfield() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.from_RealField"]], "from_realfield() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.from_RealField"]], "from_realfield() (sympy.polys.domains.finitefield method)": [[208, "sympy.polys.domains.FiniteField.from_RealField"]], "from_realfield() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyintegerring method)": [[208, "sympy.polys.domains.GMPYIntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyrationalfield method)": [[208, "sympy.polys.domains.GMPYRationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.from_RealField"]], "from_realfield() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.from_RealField"]], "from_zz() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.from_ZZ"]], "from_zz() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.from_ZZ"]], "from_zz() (sympy.polys.domains.finitefield method)": [[208, "sympy.polys.domains.FiniteField.from_ZZ"]], "from_zz() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.from_ZZ"]], "from_zz() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.from_ZZ"]], "from_zz() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.from_ZZ"]], "from_zz() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.from_ZZ"]], "from_zz() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ"]], "from_zz_gmpy() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.finitefield method)": [[208, "sympy.polys.domains.FiniteField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[208, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[208, "sympy.polys.domains.GMPYRationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_gmpy"]], "from_zz_python() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.finitefield method)": [[208, "sympy.polys.domains.FiniteField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyintegerring method)": [[208, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyrationalfield method)": [[208, "sympy.polys.domains.GMPYRationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_python"]], "from_dict() (sympy.polys.polyclasses.dmp class method)": [[208, "sympy.polys.polyclasses.DMP.from_dict"]], "from_list() (sympy.polys.polyclasses.dmp class method)": [[208, "sympy.polys.polyclasses.DMP.from_list"]], "from_sympy() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.from_sympy"]], "from_sympy() (sympy.polys.domains.complexfield method)": [[208, "sympy.polys.domains.ComplexField.from_sympy"]], "from_sympy() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.from_sympy"]], "from_sympy() (sympy.polys.domains.finitefield method)": [[208, "sympy.polys.domains.FiniteField.from_sympy"]], "from_sympy() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyintegerring method)": [[208, "sympy.polys.domains.GMPYIntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[208, "sympy.polys.domains.GMPYRationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.from_sympy"]], "from_sympy() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.realfield method)": [[208, "sympy.polys.domains.RealField.from_sympy"]], "from_sympy() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.from_sympy"]], "from_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_sympy"]], "from_sympy_list() (sympy.polys.polyclasses.dmp class method)": [[208, "sympy.polys.polyclasses.DMP.from_sympy_list"]], "galois_group() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.galois_group"]], "gcd() (sympy.polys.domains.complexfield method)": [[208, "sympy.polys.domains.ComplexField.gcd"]], "gcd() (sympy.polys.domains.gmpyintegerring method)": [[208, "sympy.polys.domains.GMPYIntegerRing.gcd"]], "gcd() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.gcd"]], "gcd() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.gcd"]], "gcd() (sympy.polys.domains.realfield method)": [[208, "sympy.polys.domains.RealField.gcd"]], "gcd() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.gcd"]], "gcd() (sympy.polys.domains.field.field method)": [[208, "sympy.polys.domains.field.Field.gcd"]], "gcd() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.gcd"]], "gcd() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.gcd"]], "gcdex() (sympy.polys.domains.gmpyintegerring method)": [[208, "sympy.polys.domains.GMPYIntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.gcdex"]], "gcdex() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.gcdex"]], "gcdex() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.gcdex"]], "get_exact() (sympy.polys.domains.complexfield method)": [[208, "sympy.polys.domains.ComplexField.get_exact"]], "get_exact() (sympy.polys.domains.realfield method)": [[208, "sympy.polys.domains.RealField.get_exact"]], "get_exact() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.get_exact"]], "get_field() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.get_field"]], "get_field() (sympy.polys.domains.finitefield method)": [[208, "sympy.polys.domains.FiniteField.get_field"]], "get_field() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.get_field"]], "get_field() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.get_field"]], "get_field() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.get_field"]], "get_field() (sympy.polys.domains.field.field method)": [[208, "sympy.polys.domains.field.Field.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_field"]], "get_ring() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.get_ring"]], "get_ring() (sympy.polys.domains.complexfield method)": [[208, "sympy.polys.domains.ComplexField.get_ring"]], "get_ring() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.get_ring"]], "get_ring() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.get_ring"]], "get_ring() (sympy.polys.domains.gmpyrationalfield method)": [[208, "sympy.polys.domains.GMPYRationalField.get_ring"]], "get_ring() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.get_ring"]], "get_ring() (sympy.polys.domains.realfield method)": [[208, "sympy.polys.domains.RealField.get_ring"]], "get_ring() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.get_ring"]], "get_ring() (sympy.polys.domains.field.field method)": [[208, "sympy.polys.domains.field.Field.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_ring"]], "get_ring() (sympy.polys.domains.ring.ring method)": [[208, "sympy.polys.domains.ring.Ring.get_ring"]], "gff_list() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.gff_list"]], "half_gcdex() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.half_gcdex"]], "half_gcdex() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.half_gcdex"]], "half_per() (sympy.polys.polyclasses.dmf method)": [[208, "sympy.polys.polyclasses.DMF.half_per"]], "has_assoc_field (sympy.polys.domains.domain.domain attribute)": [[208, "sympy.polys.domains.domain.Domain.has_assoc_Field"]], "has_assoc_ring (sympy.polys.domains.domain.domain attribute)": [[208, "sympy.polys.domains.domain.Domain.has_assoc_Ring"]], "homogeneous_order() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.homogeneous_order"]], "homogenize() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.homogenize"]], "ideal() (sympy.polys.domains.ring.ring method)": [[208, "sympy.polys.domains.ring.Ring.ideal"]], "imul_num() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.imul_num"]], "index() (sympy.polys.rings.polyring method)": [[208, "sympy.polys.rings.PolyRing.index"]], "inject() (sympy.polys.domains.compositedomain.compositedomain method)": [[208, "sympy.polys.domains.compositedomain.CompositeDomain.inject"]], "inject() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.inject"]], "inject() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianDomain.inject"]], "inject() (sympy.polys.domains.simpledomain.simpledomain method)": [[208, "sympy.polys.domains.simpledomain.SimpleDomain.inject"]], "inject() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.inject"]], "integral_basis() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.integral_basis"]], "integrate() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.integrate"]], "intervals() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.intervals"]], "invert() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.invert"]], "invert() (sympy.polys.domains.ring.ring method)": [[208, "sympy.polys.domains.ring.Ring.invert"]], "invert() (sympy.polys.polyclasses.dmf method)": [[208, "sympy.polys.polyclasses.DMF.invert"]], "invert() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.invert"]], "is_field (sympy.polys.domains.domain.domain attribute)": [[208, "sympy.polys.domains.domain.Domain.is_Field"]], "is_pid (sympy.polys.domains.domain.domain attribute)": [[208, "sympy.polys.domains.domain.Domain.is_PID"]], "is_ring (sympy.polys.domains.domain.domain attribute)": [[208, "sympy.polys.domains.domain.Domain.is_Ring"]], "is_cyclotomic (sympy.polys.polyclasses.dmp property)": [[208, "sympy.polys.polyclasses.DMP.is_cyclotomic"]], "is_ground (sympy.polys.polyclasses.anp property)": [[208, "sympy.polys.polyclasses.ANP.is_ground"]], "is_ground (sympy.polys.polyclasses.dmp property)": [[208, "sympy.polys.polyclasses.DMP.is_ground"]], "is_homogeneous (sympy.polys.polyclasses.dmp property)": [[208, "sympy.polys.polyclasses.DMP.is_homogeneous"]], "is_irreducible (sympy.polys.polyclasses.dmp property)": [[208, "sympy.polys.polyclasses.DMP.is_irreducible"]], "is_linear (sympy.polys.polyclasses.dmp property)": [[208, "sympy.polys.polyclasses.DMP.is_linear"]], "is_monic (sympy.polys.polyclasses.dmp property)": [[208, "sympy.polys.polyclasses.DMP.is_monic"]], "is_monomial (sympy.polys.polyclasses.dmp property)": [[208, "sympy.polys.polyclasses.DMP.is_monomial"]], "is_negative() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.is_negative"]], "is_negative() (sympy.polys.domains.complexfield method)": [[208, "sympy.polys.domains.ComplexField.is_negative"]], "is_negative() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.is_negative"]], "is_negative() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.is_negative"]], "is_negative() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.is_negative"]], "is_negative() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.is_negative"]], "is_negative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_negative"]], "is_nonnegative() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.complexfield method)": [[208, "sympy.polys.domains.ComplexField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonnegative"]], "is_nonpositive() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.complexfield method)": [[208, "sympy.polys.domains.ComplexField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonpositive"]], "is_one (sympy.polys.polyclasses.anp property)": [[208, "sympy.polys.polyclasses.ANP.is_one"]], "is_one (sympy.polys.polyclasses.dmf property)": [[208, "sympy.polys.polyclasses.DMF.is_one"]], "is_one (sympy.polys.polyclasses.dmp property)": [[208, "sympy.polys.polyclasses.DMP.is_one"]], "is_one() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.is_one"]], "is_positive() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.is_positive"]], "is_positive() (sympy.polys.domains.complexfield method)": [[208, "sympy.polys.domains.ComplexField.is_positive"]], "is_positive() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.is_positive"]], "is_positive() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.is_positive"]], "is_positive() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.is_positive"]], "is_positive() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.is_positive"]], "is_positive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_positive"]], "is_primitive (sympy.polys.polyclasses.dmp property)": [[208, "sympy.polys.polyclasses.DMP.is_primitive"]], "is_quadratic (sympy.polys.polyclasses.dmp property)": [[208, "sympy.polys.polyclasses.DMP.is_quadratic"]], "is_sqf (sympy.polys.polyclasses.dmp property)": [[208, "sympy.polys.polyclasses.DMP.is_sqf"]], "is_square() (sympy.polys.domains.complexfield method)": [[208, "sympy.polys.domains.ComplexField.is_square"]], "is_square() (sympy.polys.domains.finitefield method)": [[208, "sympy.polys.domains.FiniteField.is_square"]], "is_square() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.is_square"]], "is_square() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.is_square"]], "is_square() (sympy.polys.domains.realfield method)": [[208, "sympy.polys.domains.RealField.is_square"]], "is_square() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.is_square"]], "is_unit() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.is_unit"]], "is_unit() (sympy.polys.domains.field.field method)": [[208, "sympy.polys.domains.field.Field.is_unit"]], "is_zero (sympy.polys.polyclasses.anp property)": [[208, "sympy.polys.polyclasses.ANP.is_zero"]], "is_zero (sympy.polys.polyclasses.dmf property)": [[208, "sympy.polys.polyclasses.DMF.is_zero"]], "is_zero (sympy.polys.polyclasses.dmp property)": [[208, "sympy.polys.polyclasses.DMP.is_zero"]], "is_zero() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.is_zero"]], "itercoeffs() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.itercoeffs"]], "itermonoms() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.itermonoms"]], "iterterms() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.iterterms"]], "l1_norm() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.l1_norm"]], "l2_norm_squared() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.l2_norm_squared"]], "lcm() (sympy.polys.domains.complexfield method)": [[208, "sympy.polys.domains.ComplexField.lcm"]], "lcm() (sympy.polys.domains.gmpyintegerring method)": [[208, "sympy.polys.domains.GMPYIntegerRing.lcm"]], "lcm() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.lcm"]], "lcm() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.lcm"]], "lcm() (sympy.polys.domains.realfield method)": [[208, "sympy.polys.domains.RealField.lcm"]], "lcm() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.lcm"]], "lcm() (sympy.polys.domains.field.field method)": [[208, "sympy.polys.domains.field.Field.lcm"]], "lcm() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.lcm"]], "lcm() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.lcm"]], "leading_expv() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.leading_expv"]], "leading_monom() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.leading_monom"]], "leading_term() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.leading_term"]], "lift() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.lift"]], "listcoeffs() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.listcoeffs"]], "listmonoms() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.listmonoms"]], "listterms() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.listterms"]], "log() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.log"]], "log() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.log"]], "map() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.map"]], "max_norm() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.max_norm"]], "maximal_order() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.maximal_order"]], "mignotte_sep_bound_squared() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.mignotte_sep_bound_squared"]], "mod (sympy.polys.domains.algebraicfield attribute)": [[208, "sympy.polys.domains.AlgebraicField.mod"]], "monic() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.monic"]], "monic() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.monic"]], "monomial_basis() (sympy.polys.rings.polyring method)": [[208, "sympy.polys.rings.PolyRing.monomial_basis"]], "monoms() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.monoms"]], "monoms() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.monoms"]], "mul() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.mul"]], "mul() (sympy.polys.polyclasses.dmf method)": [[208, "sympy.polys.polyclasses.DMF.mul"]], "mul() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.mul"]], "mul() (sympy.polys.rings.polyring method)": [[208, "sympy.polys.rings.PolyRing.mul"]], "mul_ground() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.mul_ground"]], "n() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.n"]], "neg() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.neg"]], "neg() (sympy.polys.polyclasses.dmf method)": [[208, "sympy.polys.polyclasses.DMF.neg"]], "neg() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.neg"]], "new() (sympy.polys.domains.gaussiandomains.gaussianelement class method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianElement.new"]], "norm() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.norm"]], "normalize() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.normalize"]], "nth() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.nth"]], "numer() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.numer"]], "numer() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.numer"]], "numer() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.numer"]], "numer() (sympy.polys.domains.gmpyrationalfield method)": [[208, "sympy.polys.domains.GMPYRationalField.numer"]], "numer() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.numer"]], "numer() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.numer"]], "numer() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianRationalField.numer"]], "numer() (sympy.polys.domains.ring.ring method)": [[208, "sympy.polys.domains.ring.Ring.numer"]], "numer() (sympy.polys.polyclasses.dmf method)": [[208, "sympy.polys.polyclasses.DMF.numer"]], "of_type() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.of_type"]], "old_frac_field() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.old_frac_field"]], "old_poly_ring() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.old_poly_ring"]], "one (sympy.polys.domains.domain.domain attribute)": [[208, "sympy.polys.domains.domain.Domain.one"]], "orig_ext (sympy.polys.domains.algebraicfield attribute)": [[208, "sympy.polys.domains.AlgebraicField.orig_ext"]], "parent() (sympy.polys.domains.domainelement.domainelement method)": [[208, "sympy.polys.domains.domainelement.DomainElement.parent"]], "parent() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianElement.parent"]], "pdiv() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.pdiv"]], "per() (sympy.polys.polyclasses.dmf method)": [[208, "sympy.polys.polyclasses.DMF.per"]], "per() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.per"]], "permute() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.permute"]], "pexquo() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.pexquo"]], "poly_ring() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.poly_ring"]], "poly_unify() (sympy.polys.polyclasses.dmf method)": [[208, "sympy.polys.polyclasses.DMF.poly_unify"]], "pos() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.pos"]], "pow() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.pow"]], "pow() (sympy.polys.polyclasses.anp method)": [[208, "sympy.polys.polyclasses.ANP.pow"]], "pow() (sympy.polys.polyclasses.dmf method)": [[208, "sympy.polys.polyclasses.DMF.pow"]], "pow() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.pow"]], "pquo() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.pquo"]], "prem() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.prem"]], "primes_above() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.primes_above"]], "primitive() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.primitive"]], "primitive() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.primitive"]], "quadrant() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianElement.quadrant"]], "quo() (sympy.polys.domains.gmpyrationalfield method)": [[208, "sympy.polys.domains.GMPYRationalField.quo"]], "quo() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.quo"]], "quo() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.quo"]], "quo() (sympy.polys.domains.field.field method)": [[208, "sympy.polys.domains.field.Field.quo"]], "quo() (sympy.polys.domains.ring.ring method)": [[208, "sympy.polys.domains.ring.Ring.quo"]], "quo() (sympy.polys.polyclasses.dmf method)": [[208, "sympy.polys.polyclasses.DMF.quo"]], "quo() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.quo"]], "quo_ground() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.quo_ground"]], "quotient_ring() (sympy.polys.domains.ring.ring method)": [[208, "sympy.polys.domains.ring.Ring.quotient_ring"]], "refine_root() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.refine_root"]], "rem() (sympy.polys.domains.gmpyrationalfield method)": [[208, "sympy.polys.domains.GMPYRationalField.rem"]], "rem() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.rem"]], "rem() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.rem"]], "rem() (sympy.polys.domains.field.field method)": [[208, "sympy.polys.domains.field.Field.rem"]], "rem() (sympy.polys.domains.ring.ring method)": [[208, "sympy.polys.domains.ring.Ring.rem"]], "rem() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.rem"]], "resultant() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.resultant"]], "revert() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.revert"]], "revert() (sympy.polys.domains.field.field method)": [[208, "sympy.polys.domains.field.Field.revert"]], "revert() (sympy.polys.domains.ring.ring method)": [[208, "sympy.polys.domains.ring.Ring.revert"]], "revert() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.revert"]], "ring() (in module sympy.polys.rings)": [[208, "sympy.polys.rings.ring"]], "sfield() (in module sympy.polys.fields)": [[208, "sympy.polys.fields.sfield"]], "shift() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.shift"]], "slice() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.slice"]], "sqf_list() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.sqf_list"]], "sqf_list_include() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.sqf_list_include"]], "sqf_norm() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.sqf_norm"]], "sqf_part() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.sqf_part"]], "sqr() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.sqr"]], "sqrt() (sympy.polys.domains.gmpyintegerring method)": [[208, "sympy.polys.domains.GMPYIntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.sqrt"]], "square() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.square"]], "sring() (in module sympy.polys.rings)": [[208, "sympy.polys.rings.sring"]], "strip_zero() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.strip_zero"]], "sturm() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.sturm"]], "sub() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.sub"]], "sub() (sympy.polys.polyclasses.dmf method)": [[208, "sympy.polys.polyclasses.DMF.sub"]], "sub() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.sub"]], "sub_ground() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.sub_ground"]], "subresultants() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.subresultants"]], "symmetric_poly() (sympy.polys.rings.polyring method)": [[208, "sympy.polys.rings.PolyRing.symmetric_poly"]], "symmetrize() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.symmetrize"]], "tail_degree() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.tail_degree"]], "tail_degrees() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.tail_degrees"]], "terms() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.terms"]], "terms() (sympy.polys.rings.polyelement method)": [[208, "sympy.polys.rings.PolyElement.terms"]], "terms_gcd() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.terms_gcd"]], "to_alg_num() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.to_alg_num"]], "to_dict() (sympy.polys.polyclasses.anp method)": [[208, "sympy.polys.polyclasses.ANP.to_dict"]], "to_dict() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.to_dict"]], "to_exact() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.to_exact"]], "to_field() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.to_field"]], "to_list() (sympy.polys.polyclasses.anp method)": [[208, "sympy.polys.polyclasses.ANP.to_list"]], "to_list() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.to_list"]], "to_rational() (sympy.polys.domains.realfield method)": [[208, "sympy.polys.domains.RealField.to_rational"]], "to_ring() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.to_ring"]], "to_sympy() (sympy.polys.domains.algebraicfield method)": [[208, "sympy.polys.domains.AlgebraicField.to_sympy"]], "to_sympy() (sympy.polys.domains.complexfield method)": [[208, "sympy.polys.domains.ComplexField.to_sympy"]], "to_sympy() (sympy.polys.domains.expressiondomain method)": [[208, "sympy.polys.domains.ExpressionDomain.to_sympy"]], "to_sympy() (sympy.polys.domains.finitefield method)": [[208, "sympy.polys.domains.FiniteField.to_sympy"]], "to_sympy() (sympy.polys.domains.fractionfield method)": [[208, "sympy.polys.domains.FractionField.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyintegerring method)": [[208, "sympy.polys.domains.GMPYIntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[208, "sympy.polys.domains.GMPYRationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.integerring method)": [[208, "sympy.polys.domains.IntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.polynomialring method)": [[208, "sympy.polys.domains.PolynomialRing.to_sympy"]], "to_sympy() (sympy.polys.domains.rationalfield method)": [[208, "sympy.polys.domains.RationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.realfield method)": [[208, "sympy.polys.domains.RealField.to_sympy"]], "to_sympy() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.to_sympy"]], "to_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[208, "sympy.polys.domains.gaussiandomains.GaussianDomain.to_sympy"]], "to_sympy_dict() (sympy.polys.polyclasses.anp method)": [[208, "sympy.polys.polyclasses.ANP.to_sympy_dict"]], "to_sympy_dict() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.to_sympy_dict"]], "to_sympy_list() (sympy.polys.polyclasses.anp method)": [[208, "sympy.polys.polyclasses.ANP.to_sympy_list"]], "to_sympy_list() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.to_sympy_list"]], "to_tuple() (sympy.polys.polyclasses.anp method)": [[208, "sympy.polys.polyclasses.ANP.to_tuple"]], "to_tuple() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.to_tuple"]], "total_degree() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.total_degree"]], "tp (sympy.polys.domains.domain.domain property)": [[208, "sympy.polys.domains.domain.Domain.tp"]], "transform() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.transform"]], "trunc() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.trunc"]], "unify() (sympy.polys.domains.domain.domain method)": [[208, "sympy.polys.domains.domain.Domain.unify"]], "unify() (sympy.polys.polyclasses.anp method)": [[208, "sympy.polys.polyclasses.ANP.unify"]], "unify() (sympy.polys.polyclasses.dmp method)": [[208, "sympy.polys.polyclasses.DMP.unify"]], "vfield() (in module sympy.polys.fields)": [[208, "sympy.polys.fields.vfield"]], "vring() (in module sympy.polys.rings)": [[208, "sympy.polys.rings.vring"]], "xfield() (in module sympy.polys.fields)": [[208, "sympy.polys.fields.xfield"]], "xring() (in module sympy.polys.rings)": [[208, "sympy.polys.rings.xring"]], "zero (sympy.polys.domains.domain.domain attribute)": [[208, "sympy.polys.domains.domain.Domain.zero"]], "basepolynomialerror (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.BasePolynomialError"]], "coercionfailed (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.CoercionFailed"]], "computationfailed (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.ComputationFailed"]], "domainerror (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.DomainError"]], "evaluationfailed (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.EvaluationFailed"]], "exactquotientfailed (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.ExactQuotientFailed"]], "extraneousfactors (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.ExtraneousFactors"]], "flagerror (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.FlagError"]], "generatorserror (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.GeneratorsError"]], "generatorsneeded (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.GeneratorsNeeded"]], "heuristicgcdfailed (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.HeuristicGCDFailed"]], "homomorphismfailed (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.HomomorphismFailed"]], "isomorphismfailed (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.IsomorphismFailed"]], "multivariatepolynomialerror (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.MultivariatePolynomialError"]], "notalgebraic (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.NotAlgebraic"]], "notinvertible (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.NotInvertible"]], "notreversible (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.NotReversible"]], "operationnotsupported (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.OperationNotSupported"]], "optionerror (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.OptionError"]], "options (class in sympy.polys.polyoptions)": [[210, "sympy.polys.polyoptions.Options"]], "polificationfailed (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.PolificationFailed"]], "polynomialerror (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.PolynomialError"]], "refinementfailed (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.RefinementFailed"]], "unificationfailed (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.UnificationFailed"]], "univariatepolynomialerror (class in sympy.polys.polyerrors)": [[210, "sympy.polys.polyerrors.UnivariatePolynomialError"]], "_modgcd_multivariate_p() (in module sympy.polys.modulargcd)": [[210, "sympy.polys.modulargcd._modgcd_multivariate_p"]], "build_options() (in module sympy.polys.polyoptions)": [[210, "sympy.polys.polyoptions.build_options"]], "clone() (sympy.polys.polyoptions.options method)": [[210, "sympy.polys.polyoptions.Options.clone"]], "dmp_lc() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_LC"]], "dmp_tc() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_TC"]], "dmp_abs() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_abs"]], "dmp_add() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_add"]], "dmp_add_ground() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_add_ground"]], "dmp_add_mul() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_add_mul"]], "dmp_add_term() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_add_term"]], "dmp_apply_pairs() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_apply_pairs"]], "dmp_cancel() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_cancel"]], "dmp_clear_denoms() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dmp_clear_denoms"]], "dmp_compose() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dmp_compose"]], "dmp_content() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_content"]], "dmp_convert() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_convert"]], "dmp_copy() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_copy"]], "dmp_deflate() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_deflate"]], "dmp_degree() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_degree"]], "dmp_degree_in() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_degree_in"]], "dmp_degree_list() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_degree_list"]], "dmp_diff() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dmp_diff"]], "dmp_diff_eval_in() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dmp_diff_eval_in"]], "dmp_diff_in() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dmp_diff_in"]], "dmp_discriminant() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_discriminant"]], "dmp_div() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_div"]], "dmp_eject() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_eject"]], "dmp_euclidean_prs() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_euclidean_prs"]], "dmp_eval() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dmp_eval"]], "dmp_eval_in() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dmp_eval_in"]], "dmp_eval_tail() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dmp_eval_tail"]], "dmp_exclude() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_exclude"]], "dmp_expand() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_expand"]], "dmp_exquo() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_exquo"]], "dmp_exquo_ground() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_exquo_ground"]], "dmp_ext_factor() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dmp_ext_factor"]], "dmp_factor_list() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dmp_factor_list"]], "dmp_factor_list_include() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dmp_factor_list_include"]], "dmp_ff_div() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_ff_div"]], "dmp_ff_prs_gcd() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_ff_prs_gcd"]], "dmp_from_dict() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_from_dict"]], "dmp_from_sympy() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_from_sympy"]], "dmp_gcd() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_gcd"]], "dmp_gcdex() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_gcdex"]], "dmp_ground() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_ground"]], "dmp_ground_lc() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_ground_LC"]], "dmp_ground_tc() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_ground_TC"]], "dmp_ground_content() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dmp_ground_content"]], "dmp_ground_extract() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dmp_ground_extract"]], "dmp_ground_monic() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dmp_ground_monic"]], "dmp_ground_nth() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_ground_nth"]], "dmp_ground_p() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_ground_p"]], "dmp_ground_primitive() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dmp_ground_primitive"]], "dmp_ground_trunc() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dmp_ground_trunc"]], "dmp_grounds() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_grounds"]], "dmp_half_gcdex() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_half_gcdex"]], "dmp_include() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_include"]], "dmp_inflate() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_inflate"]], "dmp_inject() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_inject"]], "dmp_inner_gcd() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_inner_gcd"]], "dmp_inner_subresultants() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_inner_subresultants"]], "dmp_integrate() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dmp_integrate"]], "dmp_integrate_in() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dmp_integrate_in"]], "dmp_invert() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_invert"]], "dmp_irreducible_p() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dmp_irreducible_p"]], "dmp_l1_norm() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_l1_norm"]], "dmp_lcm() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_lcm"]], "dmp_lift() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dmp_lift"]], "dmp_list_terms() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_list_terms"]], "dmp_max_norm() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_max_norm"]], "dmp_mul() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_mul"]], "dmp_mul_ground() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_mul_ground"]], "dmp_mul_term() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_mul_term"]], "dmp_multi_deflate() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_multi_deflate"]], "dmp_neg() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_neg"]], "dmp_negative_p() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_negative_p"]], "dmp_nest() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_nest"]], "dmp_normal() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_normal"]], "dmp_nth() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_nth"]], "dmp_one() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_one"]], "dmp_one_p() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_one_p"]], "dmp_pdiv() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_pdiv"]], "dmp_permute() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_permute"]], "dmp_pexquo() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_pexquo"]], "dmp_positive_p() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_positive_p"]], "dmp_pow() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_pow"]], "dmp_pquo() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_pquo"]], "dmp_prem() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_prem"]], "dmp_primitive() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_primitive"]], "dmp_primitive_prs() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_primitive_prs"]], "dmp_prs_resultant() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_prs_resultant"]], "dmp_qq_collins_resultant() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_qq_collins_resultant"]], "dmp_qq_heu_gcd() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_qq_heu_gcd"]], "dmp_quo() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_quo"]], "dmp_quo_ground() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_quo_ground"]], "dmp_raise() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_raise"]], "dmp_rem() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_rem"]], "dmp_resultant() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_resultant"]], "dmp_revert() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dmp_revert"]], "dmp_rr_div() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_rr_div"]], "dmp_rr_prs_gcd() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_rr_prs_gcd"]], "dmp_slice() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_slice"]], "dmp_sqr() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_sqr"]], "dmp_strip() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_strip"]], "dmp_sub() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_sub"]], "dmp_sub_ground() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_sub_ground"]], "dmp_sub_mul() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_sub_mul"]], "dmp_sub_term() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dmp_sub_term"]], "dmp_subresultants() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_subresultants"]], "dmp_swap() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_swap"]], "dmp_terms_gcd() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_terms_gcd"]], "dmp_to_dict() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_to_dict"]], "dmp_to_tuple() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_to_tuple"]], "dmp_trial_division() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dmp_trial_division"]], "dmp_true_lt() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_true_LT"]], "dmp_trunc() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dmp_trunc"]], "dmp_validate() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_validate"]], "dmp_zero() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_zero"]], "dmp_zero_p() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_zero_p"]], "dmp_zeros() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dmp_zeros"]], "dmp_zz_collins_resultant() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_zz_collins_resultant"]], "dmp_zz_diophantine() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dmp_zz_diophantine"]], "dmp_zz_factor() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dmp_zz_factor"]], "dmp_zz_heu_gcd() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_zz_heu_gcd"]], "dmp_zz_mignotte_bound() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dmp_zz_mignotte_bound"]], "dmp_zz_modular_resultant() (in module sympy.polys.euclidtools)": [[210, "sympy.polys.euclidtools.dmp_zz_modular_resultant"]], "dmp_zz_wang() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dmp_zz_wang"]], "dmp_zz_wang_hensel_lifting() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dmp_zz_wang_hensel_lifting"]], "dmp_zz_wang_lead_coeffs() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dmp_zz_wang_lead_coeffs"]], "dmp_zz_wang_non_divisors() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dmp_zz_wang_non_divisors"]], "dmp_zz_wang_test_points() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dmp_zz_wang_test_points"]], "dup_content() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dup_content"]], "dup_cyclotomic_p() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dup_cyclotomic_p"]], "dup_decompose() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dup_decompose"]], "dup_extract() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dup_extract"]], "dup_gf_factor() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dup_gf_factor"]], "dup_lshift() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dup_lshift"]], "dup_mirror() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dup_mirror"]], "dup_monic() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dup_monic"]], "dup_primitive() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dup_primitive"]], "dup_random() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dup_random"]], "dup_real_imag() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dup_real_imag"]], "dup_reverse() (in module sympy.polys.densebasic)": [[210, "sympy.polys.densebasic.dup_reverse"]], "dup_rshift() (in module sympy.polys.densearith)": [[210, "sympy.polys.densearith.dup_rshift"]], "dup_scale() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dup_scale"]], "dup_shift() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dup_shift"]], "dup_sign_variations() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dup_sign_variations"]], "dup_transform() (in module sympy.polys.densetools)": [[210, "sympy.polys.densetools.dup_transform"]], "dup_zz_cyclotomic_factor() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dup_zz_cyclotomic_factor"]], "dup_zz_cyclotomic_poly() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dup_zz_cyclotomic_poly"]], "dup_zz_factor() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dup_zz_factor"]], "dup_zz_factor_sqf() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dup_zz_factor_sqf"]], "dup_zz_hensel_lift() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dup_zz_hensel_lift"]], "dup_zz_hensel_step() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dup_zz_hensel_step"]], "dup_zz_irreducible_p() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dup_zz_irreducible_p"]], "dup_zz_zassenhaus() (in module sympy.polys.factortools)": [[210, "sympy.polys.factortools.dup_zz_zassenhaus"]], "func_field_modgcd() (in module sympy.polys.modulargcd)": [[210, "sympy.polys.modulargcd.func_field_modgcd"]], "gf_lc() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_LC"]], "gf_qbasis() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_Qbasis"]], "gf_qmatrix() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_Qmatrix"]], "gf_tc() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_TC"]], "gf_add() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_add"]], "gf_add_ground() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_add_ground"]], "gf_add_mul() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_add_mul"]], "gf_berlekamp() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_berlekamp"]], "gf_cofactors() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_cofactors"]], "gf_compose() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_compose"]], "gf_compose_mod() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_compose_mod"]], "gf_crt() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_crt"]], "gf_crt1() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_crt1"]], "gf_crt2() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_crt2"]], "gf_csolve() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_csolve"]], "gf_degree() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_degree"]], "gf_diff() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_diff"]], "gf_div() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_div"]], "gf_eval() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_eval"]], "gf_expand() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_expand"]], "gf_exquo() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_exquo"]], "gf_factor() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_factor"]], "gf_factor_sqf() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_factor_sqf"]], "gf_from_dict() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_from_dict"]], "gf_from_int_poly() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_from_int_poly"]], "gf_gcd() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_gcd"]], "gf_gcdex() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_gcdex"]], "gf_int() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_int"]], "gf_irreducible() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_irreducible"]], "gf_irreducible_p() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_irreducible_p"]], "gf_lcm() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_lcm"]], "gf_lshift() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_lshift"]], "gf_monic() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_monic"]], "gf_mul() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_mul"]], "gf_mul_ground() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_mul_ground"]], "gf_multi_eval() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_multi_eval"]], "gf_neg() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_neg"]], "gf_normal() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_normal"]], "gf_pow() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_pow"]], "gf_pow_mod() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_pow_mod"]], "gf_quo() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_quo"]], "gf_quo_ground() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_quo_ground"]], "gf_random() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_random"]], "gf_rem() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_rem"]], "gf_rshift() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_rshift"]], "gf_shoup() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_shoup"]], "gf_sqf_list() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_sqf_list"]], "gf_sqf_p() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_sqf_p"]], "gf_sqf_part() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_sqf_part"]], "gf_sqr() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_sqr"]], "gf_strip() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_strip"]], "gf_sub() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_sub"]], "gf_sub_ground() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_sub_ground"]], "gf_sub_mul() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_sub_mul"]], "gf_to_dict() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_to_dict"]], "gf_to_int_poly() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_to_int_poly"]], "gf_trace_map() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_trace_map"]], "gf_trunc() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_trunc"]], "gf_value() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_value"]], "gf_zassenhaus() (in module sympy.polys.galoistools)": [[210, "sympy.polys.galoistools.gf_zassenhaus"]], "groebner() (in module sympy.polys.groebnertools)": [[210, "sympy.polys.groebnertools.groebner"]], "is_groebner() (in module sympy.polys.groebnertools)": [[210, "sympy.polys.groebnertools.is_groebner"]], "is_minimal() (in module sympy.polys.groebnertools)": [[210, "sympy.polys.groebnertools.is_minimal"]], "is_reduced() (in module sympy.polys.groebnertools)": [[210, "sympy.polys.groebnertools.is_reduced"]], "matrix_fglm() (in module sympy.polys.fglmtools)": [[210, "sympy.polys.fglmtools.matrix_fglm"]], "modgcd_bivariate() (in module sympy.polys.modulargcd)": [[210, "sympy.polys.modulargcd.modgcd_bivariate"]], "modgcd_multivariate() (in module sympy.polys.modulargcd)": [[210, "sympy.polys.modulargcd.modgcd_multivariate"]], "modgcd_univariate() (in module sympy.polys.modulargcd)": [[210, "sympy.polys.modulargcd.modgcd_univariate"]], "red_groebner() (in module sympy.polys.groebnertools)": [[210, "sympy.polys.groebnertools.red_groebner"]], "sdm_lc() (in module sympy.polys.distributedmodules)": [[210, "sympy.polys.distributedmodules.sdm_LC"]], "sdm_lm() (in module sympy.polys.distributedmodules)": [[210, "sympy.polys.distributedmodules.sdm_LM"]], "sdm_lt() (in module sympy.polys.distributedmodules)": [[210, "sympy.polys.distributedmodules.sdm_LT"]], "sdm_add() (in module sympy.polys.distributedmodules)": [[210, "sympy.polys.distributedmodules.sdm_add"]], "sdm_deg() (in module sympy.polys.distributedmodules)": [[210, "sympy.polys.distributedmodules.sdm_deg"]], "sdm_ecart() (in module sympy.polys.distributedmodules)": [[210, "sympy.polys.distributedmodules.sdm_ecart"]], "sdm_from_dict() (in module sympy.polys.distributedmodules)": [[210, "sympy.polys.distributedmodules.sdm_from_dict"]], "sdm_from_vector() (in module sympy.polys.distributedmodules)": [[210, "sympy.polys.distributedmodules.sdm_from_vector"]], "sdm_groebner() (in module sympy.polys.distributedmodules)": [[210, "sympy.polys.distributedmodules.sdm_groebner"]], "sdm_monomial_deg() (in module sympy.polys.distributedmodules)": [[210, "sympy.polys.distributedmodules.sdm_monomial_deg"]], "sdm_monomial_divides() (in module sympy.polys.distributedmodules)": [[210, "sympy.polys.distributedmodules.sdm_monomial_divides"]], "sdm_monomial_mul() (in module sympy.polys.distributedmodules)": [[210, "sympy.polys.distributedmodules.sdm_monomial_mul"]], "sdm_mul_term() (in module sympy.polys.distributedmodules)": [[210, "sympy.polys.distributedmodules.sdm_mul_term"]], "sdm_nf_mora() (in module sympy.polys.distributedmodules)": [[210, "sympy.polys.distributedmodules.sdm_nf_mora"]], "sdm_spoly() (in module sympy.polys.distributedmodules)": [[210, "sympy.polys.distributedmodules.sdm_spoly"]], "sdm_to_dict() (in module sympy.polys.distributedmodules)": [[210, "sympy.polys.distributedmodules.sdm_to_dict"]], "sdm_to_vector() (in module sympy.polys.distributedmodules)": [[210, "sympy.polys.distributedmodules.sdm_to_vector"]], "sdm_zero() (in module sympy.polys.distributedmodules)": [[210, "sympy.polys.distributedmodules.sdm_zero"]], "setup() (in module sympy.polys.polyconfig)": [[210, "sympy.polys.polyconfig.setup"]], "spoly() (in module sympy.polys.groebnertools)": [[210, "sympy.polys.groebnertools.spoly"]], "sympy.polys.polyconfig": [[210, "module-sympy.polys.polyconfig"]], "sympy.polys.polyoptions": [[210, "module-sympy.polys.polyoptions"]], "algintpowers (class in sympy.polys.numberfields.utilities)": [[212, "sympy.polys.numberfields.utilities.AlgIntPowers"]], "endomorphismring (class in sympy.polys.numberfields.modules)": [[212, "sympy.polys.numberfields.modules.EndomorphismRing"]], "innerendomorphism (class in sympy.polys.numberfields.modules)": [[212, "sympy.polys.numberfields.modules.InnerEndomorphism"]], "module (class in sympy.polys.numberfields.modules)": [[212, "sympy.polys.numberfields.modules.Module"]], "moduleelement (class in sympy.polys.numberfields.modules)": [[212, "sympy.polys.numberfields.modules.ModuleElement"]], "moduleendomorphism (class in sympy.polys.numberfields.modules)": [[212, "sympy.polys.numberfields.modules.ModuleEndomorphism"]], "modulehomomorphism (class in sympy.polys.numberfields.modules)": [[212, "sympy.polys.numberfields.modules.ModuleHomomorphism"]], "powerbasis (class in sympy.polys.numberfields.modules)": [[212, "sympy.polys.numberfields.modules.PowerBasis"]], "powerbasiselement (class in sympy.polys.numberfields.modules)": [[212, "sympy.polys.numberfields.modules.PowerBasisElement"]], "primeideal (class in sympy.polys.numberfields.primes)": [[212, "sympy.polys.numberfields.primes.PrimeIdeal"]], "qq_col (sympy.polys.numberfields.modules.moduleelement property)": [[212, "sympy.polys.numberfields.modules.ModuleElement.QQ_col"]], "qq_matrix (sympy.polys.numberfields.modules.submodule property)": [[212, "sympy.polys.numberfields.modules.Submodule.QQ_matrix"]], "submodule (class in sympy.polys.numberfields.modules)": [[212, "sympy.polys.numberfields.modules.Submodule"]], "t (sympy.polys.numberfields.modules.powerbasiselement property)": [[212, "sympy.polys.numberfields.modules.PowerBasisElement.T"]], "__add__() (sympy.polys.numberfields.modules.moduleelement method)": [[212, "sympy.polys.numberfields.modules.ModuleElement.__add__"]], "__add__() (sympy.polys.numberfields.primes.primeideal method)": [[212, "sympy.polys.numberfields.primes.PrimeIdeal.__add__"]], "__call__() (sympy.polys.numberfields.modules.module method)": [[212, "sympy.polys.numberfields.modules.Module.__call__"]], "__init__() (sympy.polys.numberfields.modules.endomorphismring method)": [[212, "sympy.polys.numberfields.modules.EndomorphismRing.__init__"]], "__init__() (sympy.polys.numberfields.modules.innerendomorphism method)": [[212, "sympy.polys.numberfields.modules.InnerEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleelement method)": [[212, "sympy.polys.numberfields.modules.ModuleElement.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleendomorphism method)": [[212, "sympy.polys.numberfields.modules.ModuleEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[212, "sympy.polys.numberfields.modules.ModuleHomomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.powerbasis method)": [[212, "sympy.polys.numberfields.modules.PowerBasis.__init__"]], "__init__() (sympy.polys.numberfields.modules.submodule method)": [[212, "sympy.polys.numberfields.modules.Submodule.__init__"]], "__init__() (sympy.polys.numberfields.primes.primeideal method)": [[212, "sympy.polys.numberfields.primes.PrimeIdeal.__init__"]], "__init__() (sympy.polys.numberfields.utilities.algintpowers method)": [[212, "sympy.polys.numberfields.utilities.AlgIntPowers.__init__"]], "__mod__() (sympy.polys.numberfields.modules.moduleelement method)": [[212, "sympy.polys.numberfields.modules.ModuleElement.__mod__"]], "__mul__() (sympy.polys.numberfields.modules.moduleelement method)": [[212, "sympy.polys.numberfields.modules.ModuleElement.__mul__"]], "__mul__() (sympy.polys.numberfields.primes.primeideal method)": [[212, "sympy.polys.numberfields.primes.PrimeIdeal.__mul__"]], "add() (sympy.polys.numberfields.modules.submodule method)": [[212, "sympy.polys.numberfields.modules.Submodule.add"]], "ancestors() (sympy.polys.numberfields.modules.module method)": [[212, "sympy.polys.numberfields.modules.Module.ancestors"]], "as_expr() (sympy.polys.numberfields.modules.powerbasiselement method)": [[212, "sympy.polys.numberfields.modules.PowerBasisElement.as_expr"]], "as_submodule() (sympy.polys.numberfields.primes.primeideal method)": [[212, "sympy.polys.numberfields.primes.PrimeIdeal.as_submodule"]], "basis_element_pullbacks() (sympy.polys.numberfields.modules.submodule method)": [[212, "sympy.polys.numberfields.modules.Submodule.basis_element_pullbacks"]], "basis_elements() (sympy.polys.numberfields.modules.module method)": [[212, "sympy.polys.numberfields.modules.Module.basis_elements"]], "coeff_search() (in module sympy.polys.numberfields.utilities)": [[212, "sympy.polys.numberfields.utilities.coeff_search"]], "column() (sympy.polys.numberfields.modules.moduleelement method)": [[212, "sympy.polys.numberfields.modules.ModuleElement.column"]], "discard_before() (sympy.polys.numberfields.modules.submodule method)": [[212, "sympy.polys.numberfields.modules.Submodule.discard_before"]], "element_from_anp() (sympy.polys.numberfields.modules.powerbasis method)": [[212, "sympy.polys.numberfields.modules.PowerBasis.element_from_ANP"]], "element_from_alg_num() (sympy.polys.numberfields.modules.powerbasis method)": [[212, "sympy.polys.numberfields.modules.PowerBasis.element_from_alg_num"]], "element_from_poly() (sympy.polys.numberfields.modules.powerbasis method)": [[212, "sympy.polys.numberfields.modules.PowerBasis.element_from_poly"]], "element_from_rational() (sympy.polys.numberfields.modules.module method)": [[212, "sympy.polys.numberfields.modules.Module.element_from_rational"]], "endomorphism_ring() (sympy.polys.numberfields.modules.module method)": [[212, "sympy.polys.numberfields.modules.Module.endomorphism_ring"]], "equiv() (sympy.polys.numberfields.modules.moduleelement method)": [[212, "sympy.polys.numberfields.modules.ModuleElement.equiv"]], "extract_fundamental_discriminant() (in module sympy.polys.numberfields.utilities)": [[212, "sympy.polys.numberfields.utilities.extract_fundamental_discriminant"]], "field_isomorphism() (in module sympy.polys.numberfields.subfield)": [[212, "sympy.polys.numberfields.subfield.field_isomorphism"]], "find_min_poly() (in module sympy.polys.numberfields.modules)": [[212, "sympy.polys.numberfields.modules.find_min_poly"]], "from_int_list() (sympy.polys.numberfields.modules.moduleelement class method)": [[212, "sympy.polys.numberfields.modules.ModuleElement.from_int_list"]], "galois_group() (in module sympy.polys.numberfields.galoisgroups)": [[212, "sympy.polys.numberfields.galoisgroups.galois_group"]], "generator (sympy.polys.numberfields.modules.powerbasiselement property)": [[212, "sympy.polys.numberfields.modules.PowerBasisElement.generator"]], "get_num_denom() (in module sympy.polys.numberfields.utilities)": [[212, "sympy.polys.numberfields.utilities.get_num_denom"]], "inner_endomorphism() (sympy.polys.numberfields.modules.endomorphismring method)": [[212, "sympy.polys.numberfields.modules.EndomorphismRing.inner_endomorphism"]], "is_compat() (sympy.polys.numberfields.modules.moduleelement method)": [[212, "sympy.polys.numberfields.modules.ModuleElement.is_compat"]], "is_compat_col() (sympy.polys.numberfields.modules.module method)": [[212, "sympy.polys.numberfields.modules.Module.is_compat_col"]], "is_inert (sympy.polys.numberfields.primes.primeideal property)": [[212, "sympy.polys.numberfields.primes.PrimeIdeal.is_inert"]], "is_int() (in module sympy.polys.numberfields.utilities)": [[212, "sympy.polys.numberfields.utilities.is_int"]], "is_rat() (in module sympy.polys.numberfields.utilities)": [[212, "sympy.polys.numberfields.utilities.is_rat"]], "is_rational (sympy.polys.numberfields.modules.powerbasiselement property)": [[212, "sympy.polys.numberfields.modules.PowerBasisElement.is_rational"]], "isolate() (in module sympy.polys.numberfields.utilities)": [[212, "sympy.polys.numberfields.utilities.isolate"]], "kernel() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[212, "sympy.polys.numberfields.modules.ModuleHomomorphism.kernel"]], "make_mod_elt() (in module sympy.polys.numberfields.modules)": [[212, "sympy.polys.numberfields.modules.make_mod_elt"]], "matrix() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[212, "sympy.polys.numberfields.modules.ModuleHomomorphism.matrix"]], "minimal_polynomial() (in module sympy.polys.numberfields.minpoly)": [[212, "sympy.polys.numberfields.minpoly.minimal_polynomial"]], "minpoly() (in module sympy.polys.numberfields.minpoly)": [[212, "sympy.polys.numberfields.minpoly.minpoly"]], "mul() (sympy.polys.numberfields.modules.submodule method)": [[212, "sympy.polys.numberfields.modules.Submodule.mul"]], "mult_tab() (sympy.polys.numberfields.modules.module method)": [[212, "sympy.polys.numberfields.modules.Module.mult_tab"]], "n (sympy.polys.numberfields.modules.module property)": [[212, "sympy.polys.numberfields.modules.Module.n"]], "n (sympy.polys.numberfields.modules.moduleelement property)": [[212, "sympy.polys.numberfields.modules.ModuleElement.n"]], "nearest_common_ancestor() (sympy.polys.numberfields.modules.module method)": [[212, "sympy.polys.numberfields.modules.Module.nearest_common_ancestor"]], "norm() (sympy.polys.numberfields.modules.powerbasiselement method)": [[212, "sympy.polys.numberfields.modules.PowerBasisElement.norm"]], "number_field (sympy.polys.numberfields.modules.module property)": [[212, "sympy.polys.numberfields.modules.Module.number_field"]], "numerator() (sympy.polys.numberfields.modules.powerbasiselement method)": [[212, "sympy.polys.numberfields.modules.PowerBasisElement.numerator"]], "one() (sympy.polys.numberfields.modules.module method)": [[212, "sympy.polys.numberfields.modules.Module.one"]], "over_power_basis() (sympy.polys.numberfields.modules.moduleelement method)": [[212, "sympy.polys.numberfields.modules.ModuleElement.over_power_basis"]], "parent (sympy.polys.numberfields.modules.module property)": [[212, "sympy.polys.numberfields.modules.Module.parent"]], "poly() (sympy.polys.numberfields.modules.powerbasiselement method)": [[212, "sympy.polys.numberfields.modules.PowerBasisElement.poly"]], "power_basis_ancestor() (sympy.polys.numberfields.modules.module method)": [[212, "sympy.polys.numberfields.modules.Module.power_basis_ancestor"]], "prime_decomp() (in module sympy.polys.numberfields.primes)": [[212, "sympy.polys.numberfields.primes.prime_decomp"]], "prime_valuation() (in module sympy.polys.numberfields.primes)": [[212, "sympy.polys.numberfields.primes.prime_valuation"]], "primitive_element() (in module sympy.polys.numberfields.subfield)": [[212, "sympy.polys.numberfields.subfield.primitive_element"]], "reduce_anp() (sympy.polys.numberfields.primes.primeideal method)": [[212, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP"]], "reduce_alg_num() (sympy.polys.numberfields.primes.primeideal method)": [[212, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num"]], "reduce_element() (sympy.polys.numberfields.modules.submodule method)": [[212, "sympy.polys.numberfields.modules.Submodule.reduce_element"]], "reduce_element() (sympy.polys.numberfields.primes.primeideal method)": [[212, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_element"]], "reduced() (sympy.polys.numberfields.modules.moduleelement method)": [[212, "sympy.polys.numberfields.modules.ModuleElement.reduced"]], "reduced() (sympy.polys.numberfields.modules.submodule method)": [[212, "sympy.polys.numberfields.modules.Submodule.reduced"]], "reduced_mod_p() (sympy.polys.numberfields.modules.moduleelement method)": [[212, "sympy.polys.numberfields.modules.ModuleElement.reduced_mod_p"]], "repr() (sympy.polys.numberfields.primes.primeideal method)": [[212, "sympy.polys.numberfields.primes.PrimeIdeal.repr"]], "represent() (sympy.polys.numberfields.modules.endomorphismring method)": [[212, "sympy.polys.numberfields.modules.EndomorphismRing.represent"]], "represent() (sympy.polys.numberfields.modules.module method)": [[212, "sympy.polys.numberfields.modules.Module.represent"]], "represent() (sympy.polys.numberfields.modules.powerbasis method)": [[212, "sympy.polys.numberfields.modules.PowerBasis.represent"]], "represent() (sympy.polys.numberfields.modules.submodule method)": [[212, "sympy.polys.numberfields.modules.Submodule.represent"]], "round_two() (in module sympy.polys.numberfields.basis)": [[212, "sympy.polys.numberfields.basis.round_two"]], "starts_with_unity() (sympy.polys.numberfields.modules.module method)": [[212, "sympy.polys.numberfields.modules.Module.starts_with_unity"]], "submodule_from_gens() (sympy.polys.numberfields.modules.module method)": [[212, "sympy.polys.numberfields.modules.Module.submodule_from_gens"]], "submodule_from_matrix() (sympy.polys.numberfields.modules.module method)": [[212, "sympy.polys.numberfields.modules.Module.submodule_from_matrix"]], "supplement_a_subspace() (in module sympy.polys.numberfields.utilities)": [[212, "sympy.polys.numberfields.utilities.supplement_a_subspace"]], "sympy.polys.numberfields.modules": [[212, "module-sympy.polys.numberfields.modules"]], "sympy.polys.numberfields.subfield": [[212, "module-sympy.polys.numberfields.subfield"]], "test_factor() (sympy.polys.numberfields.primes.primeideal method)": [[212, "sympy.polys.numberfields.primes.PrimeIdeal.test_factor"]], "to_anp() (sympy.polys.numberfields.modules.powerbasiselement method)": [[212, "sympy.polys.numberfields.modules.PowerBasisElement.to_ANP"]], "to_alg_num() (sympy.polys.numberfields.modules.powerbasiselement method)": [[212, "sympy.polys.numberfields.modules.PowerBasisElement.to_alg_num"]], "to_ancestor() (sympy.polys.numberfields.modules.moduleelement method)": [[212, "sympy.polys.numberfields.modules.ModuleElement.to_ancestor"]], "to_number_field() (in module sympy.polys.numberfields.subfield)": [[212, "sympy.polys.numberfields.subfield.to_number_field"]], "to_parent() (sympy.polys.numberfields.modules.moduleelement method)": [[212, "sympy.polys.numberfields.modules.ModuleElement.to_parent"]], "unify() (sympy.polys.numberfields.modules.moduleelement method)": [[212, "sympy.polys.numberfields.modules.ModuleElement.unify"]], "valuation() (sympy.polys.numberfields.primes.primeideal method)": [[212, "sympy.polys.numberfields.primes.PrimeIdeal.valuation"]], "whole_submodule() (sympy.polys.numberfields.modules.module method)": [[212, "sympy.polys.numberfields.modules.Module.whole_submodule"]], "zero() (sympy.polys.numberfields.modules.module method)": [[212, "sympy.polys.numberfields.modules.Module.zero"]], "complexrootof (class in sympy.polys.rootoftools)": [[213, "sympy.polys.rootoftools.ComplexRootOf"]], "ec() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.EC"]], "em() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.EM"]], "et() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.ET"]], "gradedlexorder (class in sympy.polys.orderings)": [[213, "sympy.polys.orderings.GradedLexOrder"]], "groebnerbasis (class in sympy.polys.polytools)": [[213, "sympy.polys.polytools.GroebnerBasis"]], "lc() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.LC"]], "lc() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.LC"]], "lm() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.LM"]], "lm() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.LM"]], "lt() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.LT"]], "lt() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.LT"]], "lexorder (class in sympy.polys.orderings)": [[213, "sympy.polys.orderings.LexOrder"]], "monomial (class in sympy.polys.monomials)": [[213, "sympy.polys.monomials.Monomial"]], "monomialorder (class in sympy.polys.orderings)": [[213, "sympy.polys.orderings.MonomialOrder"]], "poly (class in sympy.polys.polytools)": [[213, "sympy.polys.polytools.Poly"]], "purepoly (class in sympy.polys.polytools)": [[213, "sympy.polys.polytools.PurePoly"]], "reversedgradedlexorder (class in sympy.polys.orderings)": [[213, "sympy.polys.orderings.ReversedGradedLexOrder"]], "rootof (class in sympy.polys.rootoftools)": [[213, "sympy.polys.rootoftools.RootOf"]], "rootsum (class in sympy.polys.rootoftools)": [[213, "sympy.polys.rootoftools.RootSum"]], "tc() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.TC"]], "_all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._all_roots"]], "_complexes_index() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._complexes_index"]], "_complexes_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._complexes_sorted"]], "_count_roots() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._count_roots"]], "_ensure_complexes_init() (sympy.polys.rootoftools.complexrootof method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._ensure_complexes_init"]], "_ensure_reals_init() (sympy.polys.rootoftools.complexrootof method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._ensure_reals_init"]], "_eval_evalf() (sympy.polys.rootoftools.complexrootof method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._eval_evalf"]], "_eval_is_imaginary() (sympy.polys.rootoftools.complexrootof method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._eval_is_imaginary"]], "_eval_is_real() (sympy.polys.rootoftools.complexrootof method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._eval_is_real"]], "_get_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._get_complexes"]], "_get_complexes_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._get_complexes_sqf"]], "_get_interval() (sympy.polys.rootoftools.complexrootof method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._get_interval"]], "_get_reals() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._get_reals"]], "_get_reals_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._get_reals_sqf"]], "_get_roots() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._get_roots"]], "_indexed_root() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._indexed_root"]], "_new() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._new"]], "_postprocess_root() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._postprocess_root"]], "_preprocess_roots() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._preprocess_roots"]], "_real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._real_roots"]], "_reals_index() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._reals_index"]], "_reals_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._reals_sorted"]], "_refine_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._refine_complexes"]], "_reset() (sympy.polys.rootoftools.complexrootof method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._reset"]], "_roots_trivial() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._roots_trivial"]], "_set_interval() (sympy.polys.rootoftools.complexrootof method)": [[213, "sympy.polys.rootoftools.ComplexRootOf._set_interval"]], "abs() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.abs"]], "add() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.add"]], "add_ground() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.add_ground"]], "all_coeffs() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.all_coeffs"]], "all_monoms() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.all_monoms"]], "all_roots() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.all_roots"]], "all_roots() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.all_roots"]], "all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf.all_roots"]], "all_terms() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.all_terms"]], "andre_poly() (in module sympy.polys.appellseqs)": [[213, "sympy.polys.appellseqs.andre_poly"]], "apart() (in module sympy.polys.partfrac)": [[213, "sympy.polys.partfrac.apart"]], "apart_list() (in module sympy.polys.partfrac)": [[213, "sympy.polys.partfrac.apart_list"]], "as_dict() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.as_dict"]], "as_expr() (sympy.polys.monomials.monomial method)": [[213, "sympy.polys.monomials.Monomial.as_expr"]], "as_expr() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.as_expr"]], "as_list() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.as_list"]], "as_poly() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.as_poly"]], "assemble_partfrac_list() (in module sympy.polys.partfrac)": [[213, "sympy.polys.partfrac.assemble_partfrac_list"]], "bernoulli_c_poly() (in module sympy.polys.appellseqs)": [[213, "sympy.polys.appellseqs.bernoulli_c_poly"]], "bernoulli_poly() (in module sympy.polys.appellseqs)": [[213, "sympy.polys.appellseqs.bernoulli_poly"]], "cancel() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.cancel"]], "cancel() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.cancel"]], "chebyshevt_poly() (in module sympy.polys.orthopolys)": [[213, "sympy.polys.orthopolys.chebyshevt_poly"]], "chebyshevu_poly() (in module sympy.polys.orthopolys)": [[213, "sympy.polys.orthopolys.chebyshevu_poly"]], "clear_cache() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf.clear_cache"]], "clear_denoms() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.clear_denoms"]], "coeff_monomial() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.coeff_monomial"]], "coeffs() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.coeffs"]], "cofactors() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.cofactors"]], "cofactors() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.cofactors"]], "compose() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.compose"]], "compose() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.compose"]], "construct_domain() (in module sympy.polys.constructor)": [[213, "sympy.polys.constructor.construct_domain"]], "contains() (sympy.polys.polytools.groebnerbasis method)": [[213, "sympy.polys.polytools.GroebnerBasis.contains"]], "content() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.content"]], "content() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.content"]], "count_roots() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.count_roots"]], "count_roots() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.count_roots"]], "cyclotomic_poly() (in module sympy.polys.specialpolys)": [[213, "sympy.polys.specialpolys.cyclotomic_poly"]], "decompose() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.decompose"]], "decompose() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.decompose"]], "deflate() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.deflate"]], "degree() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.degree"]], "degree() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.degree"]], "degree_list() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.degree_list"]], "degree_list() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.degree_list"]], "diff() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.diff"]], "discriminant() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.discriminant"]], "discriminant() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.discriminant"]], "dispersion() (in module sympy.polys.dispersion)": [[213, "sympy.polys.dispersion.dispersion"]], "dispersion() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.dispersion"]], "dispersionset() (in module sympy.polys.dispersion)": [[213, "sympy.polys.dispersion.dispersionset"]], "dispersionset() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.dispersionset"]], "div() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.div"]], "div() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.div"]], "domain (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.domain"]], "eject() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.eject"]], "euler_poly() (in module sympy.polys.appellseqs)": [[213, "sympy.polys.appellseqs.euler_poly"]], "eval() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.eval"]], "eval_approx() (sympy.polys.rootoftools.complexrootof method)": [[213, "sympy.polys.rootoftools.ComplexRootOf.eval_approx"]], "eval_rational() (sympy.polys.rootoftools.complexrootof method)": [[213, "sympy.polys.rootoftools.ComplexRootOf.eval_rational"]], "exclude() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.exclude"]], "exquo() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.exquo"]], "exquo() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.exquo"]], "exquo_ground() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.exquo_ground"]], "factor() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.factor"]], "factor_list() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.factor_list"]], "factor_list() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.factor_list"]], "factor_list_include() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.factor_list_include"]], "fglm() (sympy.polys.polytools.groebnerbasis method)": [[213, "sympy.polys.polytools.GroebnerBasis.fglm"]], "free_symbols (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.free_symbols"]], "free_symbols (sympy.polys.polytools.purepoly property)": [[213, "sympy.polys.polytools.PurePoly.free_symbols"]], "free_symbols_in_domain (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.free_symbols_in_domain"]], "from_dict() (sympy.polys.polytools.poly class method)": [[213, "sympy.polys.polytools.Poly.from_dict"]], "from_expr() (sympy.polys.polytools.poly class method)": [[213, "sympy.polys.polytools.Poly.from_expr"]], "from_list() (sympy.polys.polytools.poly class method)": [[213, "sympy.polys.polytools.Poly.from_list"]], "from_poly() (sympy.polys.polytools.poly class method)": [[213, "sympy.polys.polytools.Poly.from_poly"]], "galois_group() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.galois_group"]], "gcd() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.gcd"]], "gcd() (sympy.polys.monomials.monomial method)": [[213, "sympy.polys.monomials.Monomial.gcd"]], "gcd() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.gcd"]], "gcd_list() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.gcd_list"]], "gcdex() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.gcdex"]], "gcdex() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.gcdex"]], "gegenbauer_poly() (in module sympy.polys.orthopolys)": [[213, "sympy.polys.orthopolys.gegenbauer_poly"]], "gen (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.gen"]], "genocchi_poly() (in module sympy.polys.appellseqs)": [[213, "sympy.polys.appellseqs.genocchi_poly"]], "get_domain() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.get_domain"]], "get_modulus() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.get_modulus"]], "gff() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.gff"]], "gff_list() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.gff_list"]], "gff_list() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.gff_list"]], "groebner() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.groebner"]], "ground_roots() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.ground_roots"]], "ground_roots() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.ground_roots"]], "half_gcdex() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.half_gcdex"]], "half_gcdex() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.half_gcdex"]], "has_only_gens() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.has_only_gens"]], "hermite_poly() (in module sympy.polys.orthopolys)": [[213, "sympy.polys.orthopolys.hermite_poly"]], "hermite_prob_poly() (in module sympy.polys.orthopolys)": [[213, "sympy.polys.orthopolys.hermite_prob_poly"]], "homogeneous_order() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.homogeneous_order"]], "homogenize() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.homogenize"]], "horner() (in module sympy.polys.polyfuncs)": [[213, "sympy.polys.polyfuncs.horner"]], "inject() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.inject"]], "integrate() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.integrate"]], "interpolate() (in module sympy.polys.polyfuncs)": [[213, "sympy.polys.polyfuncs.interpolate"]], "interpolating_poly() (in module sympy.polys.specialpolys)": [[213, "sympy.polys.specialpolys.interpolating_poly"]], "intervals() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.intervals"]], "intervals() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.intervals"]], "invert() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.invert"]], "invert() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.invert"]], "is_cyclotomic (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.is_cyclotomic"]], "is_ground (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.is_ground"]], "is_homogeneous (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.is_homogeneous"]], "is_irreducible (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.is_irreducible"]], "is_linear (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.is_linear"]], "is_monic (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.is_monic"]], "is_monomial (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.is_monomial"]], "is_multivariate (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.is_multivariate"]], "is_one (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.is_one"]], "is_primitive (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.is_primitive"]], "is_quadratic (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.is_quadratic"]], "is_sqf (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.is_sqf"]], "is_univariate (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.is_univariate"]], "is_zero (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.is_zero"]], "is_zero_dimensional (sympy.polys.polytools.groebnerbasis property)": [[213, "sympy.polys.polytools.GroebnerBasis.is_zero_dimensional"]], "is_zero_dimensional() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.is_zero_dimensional"]], "itermonomials() (in module sympy.polys.monomials)": [[213, "sympy.polys.monomials.itermonomials"]], "jacobi_poly() (in module sympy.polys.orthopolys)": [[213, "sympy.polys.orthopolys.jacobi_poly"]], "l1_norm() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.l1_norm"]], "laguerre_poly() (in module sympy.polys.orthopolys)": [[213, "sympy.polys.orthopolys.laguerre_poly"]], "lcm() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.lcm"]], "lcm() (sympy.polys.monomials.monomial method)": [[213, "sympy.polys.monomials.Monomial.lcm"]], "lcm() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.lcm"]], "lcm_list() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.lcm_list"]], "legendre_poly() (in module sympy.polys.orthopolys)": [[213, "sympy.polys.orthopolys.legendre_poly"]], "length() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.length"]], "lift() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.lift"]], "ltrim() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.ltrim"]], "make_monic_over_integers_by_scaling_roots() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.make_monic_over_integers_by_scaling_roots"]], "match() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.match"]], "max_norm() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.max_norm"]], "monic() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.monic"]], "monic() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.monic"]], "monomial_count() (in module sympy.polys.monomials)": [[213, "sympy.polys.monomials.monomial_count"]], "monoms() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.monoms"]], "mul() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.mul"]], "mul_ground() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.mul_ground"]], "neg() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.neg"]], "new() (sympy.polys.polytools.poly class method)": [[213, "sympy.polys.polytools.Poly.new"]], "new() (sympy.polys.rootoftools.rootsum class method)": [[213, "sympy.polys.rootoftools.RootSum.new"]], "norm() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.norm"]], "nroots() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.nroots"]], "nroots() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.nroots"]], "nth() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.nth"]], "nth_power_roots_poly() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.nth_power_roots_poly"]], "nth_power_roots_poly() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.nth_power_roots_poly"]], "one (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.one"]], "parallel_poly_from_expr() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.parallel_poly_from_expr"]], "pdiv() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.pdiv"]], "pdiv() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.pdiv"]], "per() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.per"]], "pexquo() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.pexquo"]], "pexquo() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.pexquo"]], "poly() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.poly"]], "poly_from_expr() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.poly_from_expr"]], "pow() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.pow"]], "pquo() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.pquo"]], "pquo() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.pquo"]], "prem() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.prem"]], "prem() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.prem"]], "primitive() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.primitive"]], "primitive() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.primitive"]], "quo() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.quo"]], "quo() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.quo"]], "quo_ground() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.quo_ground"]], "random_poly() (in module sympy.polys.specialpolys)": [[213, "sympy.polys.specialpolys.random_poly"]], "rat_clear_denoms() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.rat_clear_denoms"]], "real_roots() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.real_roots"]], "real_roots() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.real_roots"]], "real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[213, "sympy.polys.rootoftools.ComplexRootOf.real_roots"]], "reduce() (sympy.polys.polytools.groebnerbasis method)": [[213, "sympy.polys.polytools.GroebnerBasis.reduce"]], "reduced() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.reduced"]], "refine_root() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.refine_root"]], "refine_root() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.refine_root"]], "rem() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.rem"]], "rem() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.rem"]], "reorder() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.reorder"]], "replace() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.replace"]], "resultant() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.resultant"]], "resultant() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.resultant"]], "retract() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.retract"]], "revert() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.revert"]], "root() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.root"]], "rootof() (in module sympy.polys.rootoftools)": [[213, "sympy.polys.rootoftools.rootof"]], "roots() (in module sympy.polys.polyroots)": [[213, "sympy.polys.polyroots.roots"]], "same_root() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.same_root"]], "set_domain() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.set_domain"]], "set_modulus() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.set_modulus"]], "shift() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.shift"]], "slice() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.slice"]], "spherical_bessel_fn() (in module sympy.polys.orthopolys)": [[213, "sympy.polys.orthopolys.spherical_bessel_fn"]], "sqf() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.sqf"]], "sqf_list() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.sqf_list"]], "sqf_list() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.sqf_list"]], "sqf_list_include() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.sqf_list_include"]], "sqf_norm() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.sqf_norm"]], "sqf_norm() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.sqf_norm"]], "sqf_part() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.sqf_part"]], "sqf_part() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.sqf_part"]], "sqr() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.sqr"]], "sturm() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.sturm"]], "sturm() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.sturm"]], "sub() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.sub"]], "sub_ground() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.sub_ground"]], "subresultants() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.subresultants"]], "subresultants() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.subresultants"]], "swinnerton_dyer_poly() (in module sympy.polys.specialpolys)": [[213, "sympy.polys.specialpolys.swinnerton_dyer_poly"]], "symmetric_poly() (in module sympy.polys.specialpolys)": [[213, "sympy.polys.specialpolys.symmetric_poly"]], "symmetrize() (in module sympy.polys.polyfuncs)": [[213, "sympy.polys.polyfuncs.symmetrize"]], "sympy.polys": [[213, "module-sympy.polys"]], "terms() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.terms"]], "terms_gcd() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.terms_gcd"]], "terms_gcd() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.terms_gcd"]], "termwise() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.termwise"]], "to_exact() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.to_exact"]], "to_field() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.to_field"]], "to_ring() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.to_ring"]], "together() (in module sympy.polys.rationaltools)": [[213, "sympy.polys.rationaltools.together"]], "total_degree() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.total_degree"]], "transform() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.transform"]], "trunc() (in module sympy.polys.polytools)": [[213, "sympy.polys.polytools.trunc"]], "trunc() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.trunc"]], "unify() (sympy.polys.polytools.poly method)": [[213, "sympy.polys.polytools.Poly.unify"]], "unit (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.unit"]], "viete() (in module sympy.polys.polyfuncs)": [[213, "sympy.polys.polyfuncs.viete"]], "zero (sympy.polys.polytools.poly property)": [[213, "sympy.polys.polytools.Poly.zero"]], "_tan1() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series._tan1"]], "mul_xin() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.mul_xin"]], "pow_xin() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.pow_xin"]], "rs_lambertw() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_LambertW"]], "rs_asin() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_asin"]], "rs_atan() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_atan"]], "rs_atanh() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_atanh"]], "rs_compose_add() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_compose_add"]], "rs_cos() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_cos"]], "rs_cos_sin() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_cos_sin"]], "rs_cosh() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_cosh"]], "rs_cot() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_cot"]], "rs_diff() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_diff"]], "rs_exp() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_exp"]], "rs_fun() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_fun"]], "rs_hadamard_exp() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_hadamard_exp"]], "rs_integrate() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_integrate"]], "rs_is_puiseux() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_is_puiseux"]], "rs_log() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_log"]], "rs_mul() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_mul"]], "rs_newton() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_newton"]], "rs_nth_root() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_nth_root"]], "rs_pow() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_pow"]], "rs_puiseux() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_puiseux"]], "rs_puiseux2() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_puiseux2"]], "rs_series_from_list() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_series_from_list"]], "rs_series_inversion() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_series_inversion"]], "rs_series_reversion() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_series_reversion"]], "rs_sin() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_sin"]], "rs_sinh() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_sinh"]], "rs_square() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_square"]], "rs_subs() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_subs"]], "rs_tan() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_tan"]], "rs_tanh() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_tanh"]], "rs_trunc() (in module sympy.polys.ring_series)": [[214, "sympy.polys.ring_series.rs_trunc"]], "_solve_lin_sys() (in module sympy.polys.solvers)": [[215, "sympy.polys.solvers._solve_lin_sys"]], "_solve_lin_sys_component() (in module sympy.polys.solvers)": [[215, "sympy.polys.solvers._solve_lin_sys_component"]], "eqs_to_matrix() (in module sympy.polys.solvers)": [[215, "sympy.polys.solvers.eqs_to_matrix"]], "solve_lin_sys() (in module sympy.polys.solvers)": [[215, "sympy.polys.solvers.solve_lin_sys"]], "sympy.polys.solvers": [[215, "module-sympy.polys.solvers"]], "sympy_eqs_to_ring() (in module sympy.polys.solvers)": [[215, "sympy.polys.solvers.sympy_eqs_to_ring"]], "aesaraprinter (class in sympy.printing.aesaracode)": [[217, "sympy.printing.aesaracode.AesaraPrinter"]], "assignmenterror": [[217, "sympy.printing.codeprinter.AssignmentError"]], "c89codeprinter (class in sympy.printing.c)": [[217, "sympy.printing.c.C89CodePrinter"]], "c99codeprinter (class in sympy.printing.c)": [[217, "sympy.printing.c.C99CodePrinter"]], "cxx11codeprinter (class in sympy.printing.cxx)": [[217, "sympy.printing.cxx.CXX11CodePrinter"]], "cxx98codeprinter (class in sympy.printing.cxx)": [[217, "sympy.printing.cxx.CXX98CodePrinter"]], "codeprinter (class in sympy.printing.codeprinter)": [[217, "sympy.printing.codeprinter.CodePrinter"]], "fcodeprinter (class in sympy.printing.fortran)": [[217, "sympy.printing.fortran.FCodePrinter"]], "g() (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.G"], [217, "sympy.printing.pretty.pretty_symbology.g"]], "javascriptcodeprinter (class in sympy.printing.jscode)": [[217, "sympy.printing.jscode.JavascriptCodePrinter"]], "juliacodeprinter (class in sympy.printing.julia)": [[217, "sympy.printing.julia.JuliaCodePrinter"]], "lambdaprinter (class in sympy.printing.lambdarepr)": [[217, "sympy.printing.lambdarepr.LambdaPrinter"]], "latexprinter (class in sympy.printing.latex)": [[217, "sympy.printing.latex.LatexPrinter"]], "mcodeprinter (class in sympy.printing.mathematica)": [[217, "sympy.printing.mathematica.MCodePrinter"]], "maplecodeprinter (class in sympy.printing.maple)": [[217, "sympy.printing.maple.MapleCodePrinter"]], "mathmlcontentprinter (class in sympy.printing.mathml)": [[217, "sympy.printing.mathml.MathMLContentPrinter"]], "mathmlpresentationprinter (class in sympy.printing.mathml)": [[217, "sympy.printing.mathml.MathMLPresentationPrinter"]], "mathmlprinterbase (class in sympy.printing.mathml)": [[217, "sympy.printing.mathml.MathMLPrinterBase"]], "mpmathprinter (class in sympy.printing.pycode)": [[217, "sympy.printing.pycode.MpmathPrinter"]], "octavecodeprinter (class in sympy.printing.octave)": [[217, "sympy.printing.octave.OctaveCodePrinter"]], "precedence (in module sympy.printing.precedence)": [[217, "sympy.printing.precedence.PRECEDENCE"]], "precedence_functions (in module sympy.printing.precedence)": [[217, "sympy.printing.precedence.PRECEDENCE_FUNCTIONS"]], "precedence_values (in module sympy.printing.precedence)": [[217, "sympy.printing.precedence.PRECEDENCE_VALUES"]], "prettyprinter (class in sympy.printing.pretty.pretty)": [[217, "sympy.printing.pretty.pretty.PrettyPrinter"]], "printer (class in sympy.printing.printer)": [[217, "sympy.printing.printer.Printer"]], "rcodeprinter (class in sympy.printing.rcode)": [[217, "sympy.printing.rcode.RCodePrinter"]], "reprprinter (class in sympy.printing.repr)": [[217, "sympy.printing.repr.ReprPrinter"]], "rustcodeprinter (class in sympy.printing.rust)": [[217, "sympy.printing.rust.RustCodePrinter"]], "smtlibprinter (class in sympy.printing.smtlib)": [[217, "sympy.printing.smtlib.SMTLibPrinter"]], "strprinter (class in sympy.printing.str)": [[217, "sympy.printing.str.StrPrinter"]], "u() (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.U"]], "vf() (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.VF"]], "_default_settings (sympy.printing.smtlib.smtlibprinter attribute)": [[217, "sympy.printing.smtlib.SMTLibPrinter._default_settings"]], "_print() (sympy.printing.printer.printer method)": [[217, "sympy.printing.printer.Printer._print"]], "above() (sympy.printing.pretty.stringpict.stringpict method)": [[217, "sympy.printing.pretty.stringpict.stringPict.above"]], "accepted_latex_functions (in module sympy.printing.latex)": [[217, "sympy.printing.latex.accepted_latex_functions"]], "aesara_code() (in module sympy.printing.aesaracode)": [[217, "sympy.printing.aesaracode.aesara_code"]], "aesara_function() (in module sympy.printing.aesaracode)": [[217, "sympy.printing.aesaracode.aesara_function"]], "annotated() (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.annotated"]], "apply() (sympy.printing.pretty.stringpict.prettyform static method)": [[217, "sympy.printing.pretty.stringpict.prettyForm.apply"]], "atoms_table (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.atoms_table"]], "below() (sympy.printing.pretty.stringpict.stringpict method)": [[217, "sympy.printing.pretty.stringpict.stringPict.below"]], "ccode() (in module sympy.printing.c)": [[217, "sympy.printing.c.ccode"]], "cxxcode() (in module sympy.printing.codeprinter)": [[217, "sympy.printing.codeprinter.cxxcode"]], "digit_2txt (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.digit_2txt"]], "dim_handling() (in module sympy.printing.aesaracode)": [[217, "sympy.printing.aesaracode.dim_handling"]], "doprint() (sympy.printing.aesaracode.aesaraprinter method)": [[217, "sympy.printing.aesaracode.AesaraPrinter.doprint"]], "doprint() (sympy.printing.codeprinter.codeprinter method)": [[217, "sympy.printing.codeprinter.CodePrinter.doprint"]], "doprint() (sympy.printing.mathml.mathmlprinterbase method)": [[217, "sympy.printing.mathml.MathMLPrinterBase.doprint"]], "doprint() (sympy.printing.printer.printer method)": [[217, "sympy.printing.printer.Printer.doprint"]], "dotprint() (in module sympy.printing.dot)": [[217, "sympy.printing.dot.dotprint"]], "emptyprinter() (sympy.printing.repr.reprprinter method)": [[217, "sympy.printing.repr.ReprPrinter.emptyPrinter"]], "fcode() (in module sympy.printing.fortran)": [[217, "sympy.printing.fortran.fcode"]], "frac (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.frac"]], "greek_letters (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.greek_letters"]], "height() (sympy.printing.pretty.stringpict.stringpict method)": [[217, "sympy.printing.pretty.stringpict.stringPict.height"]], "hobj() (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.hobj"]], "indent_code() (sympy.printing.c.c89codeprinter method)": [[217, "sympy.printing.c.C89CodePrinter.indent_code"]], "indent_code() (sympy.printing.fortran.fcodeprinter method)": [[217, "sympy.printing.fortran.FCodePrinter.indent_code"]], "indent_code() (sympy.printing.jscode.javascriptcodeprinter method)": [[217, "sympy.printing.jscode.JavascriptCodePrinter.indent_code"]], "indent_code() (sympy.printing.julia.juliacodeprinter method)": [[217, "sympy.printing.julia.JuliaCodePrinter.indent_code"]], "indent_code() (sympy.printing.octave.octavecodeprinter method)": [[217, "sympy.printing.octave.OctaveCodePrinter.indent_code"]], "indent_code() (sympy.printing.rcode.rcodeprinter method)": [[217, "sympy.printing.rcode.RCodePrinter.indent_code"]], "indent_code() (sympy.printing.rust.rustcodeprinter method)": [[217, "sympy.printing.rust.RustCodePrinter.indent_code"]], "jscode() (in module sympy.printing.jscode)": [[217, "sympy.printing.jscode.jscode"]], "julia_code() (in module sympy.printing.julia)": [[217, "sympy.printing.julia.julia_code"]], "known_fcns_src1 (in module sympy.printing.julia)": [[217, "sympy.printing.julia.known_fcns_src1"]], "known_fcns_src1 (in module sympy.printing.octave)": [[217, "sympy.printing.octave.known_fcns_src1"]], "known_fcns_src2 (in module sympy.printing.julia)": [[217, "sympy.printing.julia.known_fcns_src2"]], "known_fcns_src2 (in module sympy.printing.octave)": [[217, "sympy.printing.octave.known_fcns_src2"]], "known_functions (in module sympy.printing.jscode)": [[217, "sympy.printing.jscode.known_functions"]], "known_functions (in module sympy.printing.mathematica)": [[217, "sympy.printing.mathematica.known_functions"]], "known_functions (in module sympy.printing.rcode)": [[217, "sympy.printing.rcode.known_functions"]], "known_functions (in module sympy.printing.rust)": [[217, "sympy.printing.rust.known_functions"]], "known_functions_c89 (in module sympy.printing.c)": [[217, "sympy.printing.c.known_functions_C89"]], "known_functions_c99 (in module sympy.printing.c)": [[217, "sympy.printing.c.known_functions_C99"]], "lambdarepr() (in module sympy.printing.lambdarepr)": [[217, "sympy.printing.lambdarepr.lambdarepr"]], "latex() (in module sympy.printing.latex)": [[217, "sympy.printing.latex.latex"]], "left() (sympy.printing.pretty.stringpict.stringpict method)": [[217, "sympy.printing.pretty.stringpict.stringPict.left"]], "leftslash() (sympy.printing.pretty.stringpict.stringpict method)": [[217, "sympy.printing.pretty.stringpict.stringPict.leftslash"]], "maple_code() (in module sympy.printing.maple)": [[217, "sympy.printing.maple.maple_code"]], "mathematica_code() (in module sympy.printing.mathematica)": [[217, "sympy.printing.mathematica.mathematica_code"]], "mathml() (in module sympy.printing.mathml)": [[217, "sympy.printing.mathml.mathml"]], "mathml_tag() (sympy.printing.mathml.mathmlcontentprinter method)": [[217, "sympy.printing.mathml.MathMLContentPrinter.mathml_tag"]], "mathml_tag() (sympy.printing.mathml.mathmlpresentationprinter method)": [[217, "sympy.printing.mathml.MathMLPresentationPrinter.mathml_tag"]], "next() (sympy.printing.pretty.stringpict.stringpict static method)": [[217, "sympy.printing.pretty.stringpict.stringPict.next"]], "octave_code() (in module sympy.printing.octave)": [[217, "sympy.printing.octave.octave_code"]], "parens() (sympy.printing.pretty.stringpict.stringpict method)": [[217, "sympy.printing.pretty.stringpict.stringPict.parens"]], "parenthesize_super() (sympy.printing.latex.latexprinter method)": [[217, "sympy.printing.latex.LatexPrinter.parenthesize_super"]], "pprint_nodes() (in module sympy.printing.tree)": [[217, "sympy.printing.tree.pprint_nodes"]], "precedence() (in module sympy.printing.precedence)": [[217, "sympy.printing.precedence.precedence"]], "pretty() (in module sympy.printing.pretty.pretty)": [[217, "sympy.printing.pretty.pretty.pretty"]], "prettyform (class in sympy.printing.pretty.stringpict)": [[217, "sympy.printing.pretty.stringpict.prettyForm"]], "pretty_atom() (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.pretty_atom"]], "pretty_print() (in module sympy.printing.pretty.pretty)": [[217, "sympy.printing.pretty.pretty.pretty_print"]], "pretty_symbol() (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.pretty_symbol"]], "pretty_try_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.pretty_try_use_unicode"]], "pretty_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.pretty_use_unicode"]], "preview() (in module sympy.printing.preview)": [[217, "sympy.printing.preview.preview"]], "print_ccode() (in module sympy.printing.c)": [[217, "sympy.printing.c.print_ccode"]], "print_fcode() (in module sympy.printing.fortran)": [[217, "sympy.printing.fortran.print_fcode"]], "print_gtk() (in module sympy.printing.gtk)": [[217, "sympy.printing.gtk.print_gtk"]], "print_latex() (in module sympy.printing.latex)": [[217, "sympy.printing.latex.print_latex"]], "print_maple_code() (in module sympy.printing.maple)": [[217, "sympy.printing.maple.print_maple_code"]], "print_mathml() (in module sympy.printing.mathml)": [[217, "sympy.printing.mathml.print_mathml"]], "print_node() (in module sympy.printing.tree)": [[217, "sympy.printing.tree.print_node"]], "print_rcode() (in module sympy.printing.rcode)": [[217, "sympy.printing.rcode.print_rcode"]], "print_tree() (in module sympy.printing.tree)": [[217, "sympy.printing.tree.print_tree"]], "printmethod (sympy.printing.aesaracode.aesaraprinter attribute)": [[217, "sympy.printing.aesaracode.AesaraPrinter.printmethod"]], "printmethod (sympy.printing.c.c89codeprinter attribute)": [[217, "sympy.printing.c.C89CodePrinter.printmethod"]], "printmethod (sympy.printing.c.c99codeprinter attribute)": [[217, "sympy.printing.c.C99CodePrinter.printmethod"]], "printmethod (sympy.printing.codeprinter.codeprinter attribute)": [[217, "sympy.printing.codeprinter.CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx11codeprinter attribute)": [[217, "sympy.printing.cxx.CXX11CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx98codeprinter attribute)": [[217, "sympy.printing.cxx.CXX98CodePrinter.printmethod"]], "printmethod (sympy.printing.fortran.fcodeprinter attribute)": [[217, "sympy.printing.fortran.FCodePrinter.printmethod"]], "printmethod (sympy.printing.jscode.javascriptcodeprinter attribute)": [[217, "sympy.printing.jscode.JavascriptCodePrinter.printmethod"]], "printmethod (sympy.printing.julia.juliacodeprinter attribute)": [[217, "sympy.printing.julia.JuliaCodePrinter.printmethod"]], "printmethod (sympy.printing.lambdarepr.lambdaprinter attribute)": [[217, "sympy.printing.lambdarepr.LambdaPrinter.printmethod"]], "printmethod (sympy.printing.latex.latexprinter attribute)": [[217, "sympy.printing.latex.LatexPrinter.printmethod"]], "printmethod (sympy.printing.maple.maplecodeprinter attribute)": [[217, "sympy.printing.maple.MapleCodePrinter.printmethod"]], "printmethod (sympy.printing.mathematica.mcodeprinter attribute)": [[217, "sympy.printing.mathematica.MCodePrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlcontentprinter attribute)": [[217, "sympy.printing.mathml.MathMLContentPrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlpresentationprinter attribute)": [[217, "sympy.printing.mathml.MathMLPresentationPrinter.printmethod"]], "printmethod (sympy.printing.octave.octavecodeprinter attribute)": [[217, "sympy.printing.octave.OctaveCodePrinter.printmethod"]], "printmethod (sympy.printing.pretty.pretty.prettyprinter attribute)": [[217, "sympy.printing.pretty.pretty.PrettyPrinter.printmethod"]], "printmethod (sympy.printing.printer.printer attribute)": [[217, "sympy.printing.printer.Printer.printmethod"]], "printmethod (sympy.printing.rcode.rcodeprinter attribute)": [[217, "sympy.printing.rcode.RCodePrinter.printmethod"]], "printmethod (sympy.printing.repr.reprprinter attribute)": [[217, "sympy.printing.repr.ReprPrinter.printmethod"]], "printmethod (sympy.printing.rust.rustcodeprinter attribute)": [[217, "sympy.printing.rust.RustCodePrinter.printmethod"]], "printmethod (sympy.printing.smtlib.smtlibprinter attribute)": [[217, "sympy.printing.smtlib.SMTLibPrinter.printmethod"]], "printmethod (sympy.printing.str.strprinter attribute)": [[217, "sympy.printing.str.StrPrinter.printmethod"]], "pycode() (in module sympy.printing.pycode)": [[217, "sympy.printing.pycode.pycode"]], "rcode() (in module sympy.printing.rcode)": [[217, "sympy.printing.rcode.rcode"]], "render() (sympy.printing.pretty.stringpict.stringpict method)": [[217, "sympy.printing.pretty.stringpict.stringPict.render"]], "reprify() (sympy.printing.repr.reprprinter method)": [[217, "sympy.printing.repr.ReprPrinter.reprify"]], "right() (sympy.printing.pretty.stringpict.stringpict method)": [[217, "sympy.printing.pretty.stringpict.stringPict.right"]], "root (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.root"]], "root() (sympy.printing.pretty.stringpict.stringpict method)": [[217, "sympy.printing.pretty.stringpict.stringPict.root"]], "rust_code() (in module sympy.printing.rust)": [[217, "sympy.printing.rust.rust_code"]], "set_global_settings() (sympy.printing.printer.printer class method)": [[217, "sympy.printing.printer.Printer.set_global_settings"]], "smtlib_code() (in module sympy.printing.smtlib)": [[217, "sympy.printing.smtlib.smtlib_code"]], "split_super_sub() (in module sympy.printing.conventions)": [[217, "sympy.printing.conventions.split_super_sub"]], "srepr() (in module sympy.printing.repr)": [[217, "sympy.printing.repr.srepr"]], "sstr() (in module sympy.printing.str)": [[217, "sympy.printing.str.sstr"]], "sstrrepr() (in module sympy.printing.str)": [[217, "sympy.printing.str.sstrrepr"]], "stack() (sympy.printing.pretty.stringpict.stringpict static method)": [[217, "sympy.printing.pretty.stringpict.stringPict.stack"]], "stringpict (class in sympy.printing.pretty.stringpict)": [[217, "sympy.printing.pretty.stringpict.stringPict"]], "sub (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.sub"]], "sup (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.sup"]], "symb_2txt (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.symb_2txt"]], "sympy.printing.aesaracode": [[217, "module-sympy.printing.aesaracode"]], "sympy.printing.c": [[217, "module-sympy.printing.c"]], "sympy.printing.codeprinter": [[217, "module-sympy.printing.codeprinter"]], "sympy.printing.conventions": [[217, "module-sympy.printing.conventions"]], "sympy.printing.cxx": [[217, "module-sympy.printing.cxx"]], "sympy.printing.fortran": [[217, "module-sympy.printing.fortran"]], "sympy.printing.gtk": [[217, "module-sympy.printing.gtk"]], "sympy.printing.jscode": [[217, "module-sympy.printing.jscode"]], "sympy.printing.julia": [[217, "module-sympy.printing.julia"]], "sympy.printing.lambdarepr": [[217, "module-sympy.printing.lambdarepr"]], "sympy.printing.latex": [[217, "module-sympy.printing.latex"]], "sympy.printing.maple": [[217, "module-sympy.printing.maple"]], "sympy.printing.mathematica": [[217, "module-sympy.printing.mathematica"]], "sympy.printing.mathml": [[217, "module-sympy.printing.mathml"]], "sympy.printing.octave": [[217, "module-sympy.printing.octave"]], "sympy.printing.precedence": [[217, "module-sympy.printing.precedence"]], "sympy.printing.pretty": [[217, "module-sympy.printing.pretty"]], "sympy.printing.pretty.pretty": [[217, "module-sympy.printing.pretty.pretty"]], "sympy.printing.pretty.pretty_symbology": [[217, "module-sympy.printing.pretty.pretty_symbology"]], "sympy.printing.pretty.stringpict": [[217, "module-sympy.printing.pretty.stringpict"]], "sympy.printing.preview": [[217, "module-sympy.printing.preview"]], "sympy.printing.printer": [[217, "module-sympy.printing.printer"]], "sympy.printing.pycode": [[217, "module-sympy.printing.pycode"]], "sympy.printing.python": [[217, "module-sympy.printing.python"]], "sympy.printing.rcode": [[217, "module-sympy.printing.rcode"]], "sympy.printing.repr": [[217, "module-sympy.printing.repr"]], "sympy.printing.rust": [[217, "module-sympy.printing.rust"]], "sympy.printing.smtlib": [[217, "module-sympy.printing.smtlib"]], "sympy.printing.str": [[217, "module-sympy.printing.str"]], "sympy.printing.tree": [[217, "module-sympy.printing.tree"]], "terminal_width() (sympy.printing.pretty.stringpict.stringpict method)": [[217, "sympy.printing.pretty.stringpict.stringPict.terminal_width"]], "tree() (in module sympy.printing.tree)": [[217, "sympy.printing.tree.tree"]], "vobj() (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.vobj"]], "width() (sympy.printing.pretty.stringpict.stringpict method)": [[217, "sympy.printing.pretty.stringpict.stringPict.width"]], "xobj() (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.xobj"]], "xstr() (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.xstr"]], "xsym() (in module sympy.printing.pretty.pretty_symbology)": [[217, "sympy.printing.pretty.pretty_symbology.xsym"]], "finiteformalpowerseries (class in sympy.series.formal)": [[219, "sympy.series.formal.FiniteFormalPowerSeries"]], "formalpowerseries (class in sympy.series.formal)": [[219, "sympy.series.formal.FormalPowerSeries"]], "formalpowerseriescompose (class in sympy.series.formal)": [[219, "sympy.series.formal.FormalPowerSeriesCompose"]], "formalpowerseriesinverse (class in sympy.series.formal)": [[219, "sympy.series.formal.FormalPowerSeriesInverse"]], "formalpowerseriesproduct (class in sympy.series.formal)": [[219, "sympy.series.formal.FormalPowerSeriesProduct"]], "coeff_bell() (sympy.series.formal.formalpowerseries method)": [[219, "sympy.series.formal.FormalPowerSeries.coeff_bell"]], "compose() (sympy.series.formal.formalpowerseries method)": [[219, "sympy.series.formal.FormalPowerSeries.compose"]], "compute_fps() (in module sympy.series.formal)": [[219, "sympy.series.formal.compute_fps"]], "exp_re() (in module sympy.series.formal)": [[219, "sympy.series.formal.exp_re"]], "fps() (in module sympy.series.formal)": [[219, "sympy.series.formal.fps"]], "function (sympy.series.formal.formalpowerseriescompose property)": [[219, "sympy.series.formal.FormalPowerSeriesCompose.function"]], "function (sympy.series.formal.formalpowerseriesinverse property)": [[219, "sympy.series.formal.FormalPowerSeriesInverse.function"]], "function (sympy.series.formal.formalpowerseriesproduct property)": [[219, "sympy.series.formal.FormalPowerSeriesProduct.function"]], "hyper_algorithm() (in module sympy.series.formal)": [[219, "sympy.series.formal.hyper_algorithm"]], "hyper_re() (in module sympy.series.formal)": [[219, "sympy.series.formal.hyper_re"]], "infinite (sympy.series.formal.formalpowerseries property)": [[219, "sympy.series.formal.FormalPowerSeries.infinite"]], "integrate() (sympy.series.formal.formalpowerseries method)": [[219, "sympy.series.formal.FormalPowerSeries.integrate"]], "inverse() (sympy.series.formal.formalpowerseries method)": [[219, "sympy.series.formal.FormalPowerSeries.inverse"]], "polynomial() (sympy.series.formal.formalpowerseries method)": [[219, "sympy.series.formal.FormalPowerSeries.polynomial"]], "product() (sympy.series.formal.formalpowerseries method)": [[219, "sympy.series.formal.FormalPowerSeries.product"]], "rational_algorithm() (in module sympy.series.formal)": [[219, "sympy.series.formal.rational_algorithm"]], "rational_independent() (in module sympy.series.formal)": [[219, "sympy.series.formal.rational_independent"]], "rsolve_hypergeometric() (in module sympy.series.formal)": [[219, "sympy.series.formal.rsolve_hypergeometric"]], "simplede() (in module sympy.series.formal)": [[219, "sympy.series.formal.simpleDE"]], "solve_de() (in module sympy.series.formal)": [[219, "sympy.series.formal.solve_de"]], "truncate() (sympy.series.formal.formalpowerseries method)": [[219, "sympy.series.formal.FormalPowerSeries.truncate"]], "fourierseries (class in sympy.series.fourier)": [[220, "sympy.series.fourier.FourierSeries"]], "fourier_series() (in module sympy.series.fourier)": [[220, "sympy.series.fourier.fourier_series"]], "scale() (sympy.series.fourier.fourierseries method)": [[220, "sympy.series.fourier.FourierSeries.scale"]], "scalex() (sympy.series.fourier.fourierseries method)": [[220, "sympy.series.fourier.FourierSeries.scalex"]], "shift() (sympy.series.fourier.fourierseries method)": [[220, "sympy.series.fourier.FourierSeries.shift"]], "shiftx() (sympy.series.fourier.fourierseries method)": [[220, "sympy.series.fourier.FourierSeries.shiftx"]], "sigma_approximation() (sympy.series.fourier.fourierseries method)": [[220, "sympy.series.fourier.FourierSeries.sigma_approximation"]], "truncate() (sympy.series.fourier.fourierseries method)": [[220, "sympy.series.fourier.FourierSeries.truncate"]], "difference_delta() (in module sympy.series.limitseq)": [[222, "sympy.series.limitseq.difference_delta"]], "dominant() (in module sympy.series.limitseq)": [[222, "sympy.series.limitseq.dominant"]], "limit_seq() (in module sympy.series.limitseq)": [[222, "sympy.series.limitseq.limit_seq"]], "emptysequence (class in sympy.series.sequences)": [[223, "sympy.series.sequences.EmptySequence"]], "recursiveseq (class in sympy.series.sequences)": [[223, "sympy.series.sequences.RecursiveSeq"]], "seqadd (class in sympy.series.sequences)": [[223, "sympy.series.sequences.SeqAdd"]], "seqbase (class in sympy.series.sequences)": [[223, "sympy.series.sequences.SeqBase"]], "seqformula (class in sympy.series.sequences)": [[223, "sympy.series.sequences.SeqFormula"]], "seqmul (class in sympy.series.sequences)": [[223, "sympy.series.sequences.SeqMul"]], "seqper (class in sympy.series.sequences)": [[223, "sympy.series.sequences.SeqPer"]], "coeff() (sympy.series.sequences.seqbase method)": [[223, "sympy.series.sequences.SeqBase.coeff"]], "coeff_mul() (sympy.series.sequences.emptysequence method)": [[223, "sympy.series.sequences.EmptySequence.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqbase method)": [[223, "sympy.series.sequences.SeqBase.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqformula method)": [[223, "sympy.series.sequences.SeqFormula.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqper method)": [[223, "sympy.series.sequences.SeqPer.coeff_mul"]], "find_linear_recurrence() (sympy.series.sequences.seqbase method)": [[223, "sympy.series.sequences.SeqBase.find_linear_recurrence"]], "free_symbols (sympy.series.sequences.seqbase property)": [[223, "sympy.series.sequences.SeqBase.free_symbols"]], "gen (sympy.series.sequences.seqbase property)": [[223, "sympy.series.sequences.SeqBase.gen"]], "initial (sympy.series.sequences.recursiveseq property)": [[223, "sympy.series.sequences.RecursiveSeq.initial"]], "interval (sympy.series.sequences.recursiveseq property)": [[223, "sympy.series.sequences.RecursiveSeq.interval"]], "interval (sympy.series.sequences.seqbase property)": [[223, "sympy.series.sequences.SeqBase.interval"]], "length (sympy.series.sequences.seqbase property)": [[223, "sympy.series.sequences.SeqBase.length"]], "n (sympy.series.sequences.recursiveseq property)": [[223, "sympy.series.sequences.RecursiveSeq.n"]], "recurrence (sympy.series.sequences.recursiveseq property)": [[223, "sympy.series.sequences.RecursiveSeq.recurrence"]], "reduce() (sympy.series.sequences.seqadd static method)": [[223, "sympy.series.sequences.SeqAdd.reduce"]], "reduce() (sympy.series.sequences.seqmul static method)": [[223, "sympy.series.sequences.SeqMul.reduce"]], "sequence() (in module sympy.series.sequences)": [[223, "sympy.series.sequences.sequence"]], "start (sympy.series.sequences.recursiveseq property)": [[223, "sympy.series.sequences.RecursiveSeq.start"]], "start (sympy.series.sequences.seqbase property)": [[223, "sympy.series.sequences.SeqBase.start"]], "stop (sympy.series.sequences.recursiveseq property)": [[223, "sympy.series.sequences.RecursiveSeq.stop"]], "stop (sympy.series.sequences.seqbase property)": [[223, "sympy.series.sequences.SeqBase.stop"]], "variables (sympy.series.sequences.seqbase property)": [[223, "sympy.series.sequences.SeqBase.variables"]], "y (sympy.series.sequences.recursiveseq property)": [[223, "sympy.series.sequences.RecursiveSeq.y"]], "yn (sympy.series.sequences.recursiveseq property)": [[223, "sympy.series.sequences.RecursiveSeq.yn"]], "limit (class in sympy.series.limits)": [[224, "sympy.series.limits.Limit"]], "order (class in sympy.series.order)": [[224, "sympy.series.order.Order"]], "subsset (class in sympy.series.gruntz)": [[224, "sympy.series.gruntz.SubsSet"]], "build_expression_tree() (in module sympy.series.gruntz)": [[224, "sympy.series.gruntz.build_expression_tree"]], "calculate_series() (in module sympy.series.gruntz)": [[224, "sympy.series.gruntz.calculate_series"]], "compare() (in module sympy.series.gruntz)": [[224, "sympy.series.gruntz.compare"]], "contains() (sympy.series.order.order method)": [[224, "sympy.series.order.Order.contains"]], "copy() (sympy.series.gruntz.subsset method)": [[224, "sympy.series.gruntz.SubsSet.copy"]], "do_subs() (sympy.series.gruntz.subsset method)": [[224, "sympy.series.gruntz.SubsSet.do_subs"]], "doit() (sympy.series.limits.limit method)": [[224, "sympy.series.limits.Limit.doit"]], "gruntz() (in module sympy.series.gruntz)": [[224, "sympy.series.gruntz.gruntz"]], "limit() (in module sympy.series.limits)": [[224, "sympy.series.limits.limit"]], "limitinf() (in module sympy.series.gruntz)": [[224, "sympy.series.gruntz.limitinf"]], "meets() (sympy.series.gruntz.subsset method)": [[224, "sympy.series.gruntz.SubsSet.meets"]], "mrv() (in module sympy.series.gruntz)": [[224, "sympy.series.gruntz.mrv"]], "mrv_leadterm() (in module sympy.series.gruntz)": [[224, "sympy.series.gruntz.mrv_leadterm"]], "mrv_max1() (in module sympy.series.gruntz)": [[224, "sympy.series.gruntz.mrv_max1"]], "mrv_max3() (in module sympy.series.gruntz)": [[224, "sympy.series.gruntz.mrv_max3"]], "residue() (in module sympy.series.residues)": [[224, "sympy.series.residues.residue"]], "rewrite() (in module sympy.series.gruntz)": [[224, "sympy.series.gruntz.rewrite"]], "richardson() (in module sympy.series.acceleration)": [[224, "sympy.series.acceleration.richardson"]], "series() (in module sympy.series.series)": [[224, "sympy.series.series.series"]], "shanks() (in module sympy.series.acceleration)": [[224, "sympy.series.acceleration.shanks"]], "sign() (in module sympy.series.gruntz)": [[224, "sympy.series.gruntz.sign"]], "union() (sympy.series.gruntz.subsset method)": [[224, "sympy.series.gruntz.SubsSet.union"]], "cartesiancomplexregion (class in sympy.sets.fancysets)": [[225, "sympy.sets.fancysets.CartesianComplexRegion"]], "complement (class in sympy.sets.sets)": [[225, "sympy.sets.sets.Complement"]], "complexregion (class in sympy.sets.fancysets)": [[225, "sympy.sets.fancysets.ComplexRegion"]], "complexes (class in sympy.sets.fancysets)": [[225, "sympy.sets.fancysets.Complexes"]], "conditionset (class in sympy.sets.conditionset)": [[225, "sympy.sets.conditionset.ConditionSet"]], "contains (class in sympy.sets.conditionset)": [[225, "sympy.sets.conditionset.Contains"]], "disjointunion (class in sympy.sets.sets)": [[225, "sympy.sets.sets.DisjointUnion"]], "emptyset (class in sympy.sets.sets)": [[225, "sympy.sets.sets.EmptySet"]], "finiteset (class in sympy.sets.sets)": [[225, "sympy.sets.sets.FiniteSet"]], "imageset (class in sympy.sets.fancysets)": [[225, "sympy.sets.fancysets.ImageSet"]], "integers (class in sympy.sets.fancysets)": [[225, "sympy.sets.fancysets.Integers"]], "intersection (class in sympy.sets.sets)": [[225, "sympy.sets.sets.Intersection"]], "interval (class in sympy.sets.sets)": [[225, "sympy.sets.sets.Interval"]], "lopen() (sympy.sets.sets.interval class method)": [[225, "sympy.sets.sets.Interval.Lopen"]], "naturals (class in sympy.sets.fancysets)": [[225, "sympy.sets.fancysets.Naturals"]], "naturals0 (class in sympy.sets.fancysets)": [[225, "sympy.sets.fancysets.Naturals0"]], "polarcomplexregion (class in sympy.sets.fancysets)": [[225, "sympy.sets.fancysets.PolarComplexRegion"]], "powerset (class in sympy.sets.powerset)": [[225, "sympy.sets.powerset.PowerSet"]], "productset (class in sympy.sets.sets)": [[225, "sympy.sets.sets.ProductSet"]], "range (class in sympy.sets.fancysets)": [[225, "sympy.sets.fancysets.Range"]], "rationals (class in sympy.sets.fancysets)": [[225, "sympy.sets.fancysets.Rationals"]], "reals (class in sympy.sets.fancysets)": [[225, "sympy.sets.fancysets.Reals"]], "ropen() (sympy.sets.sets.interval class method)": [[225, "sympy.sets.sets.Interval.Ropen"]], "set (class in sympy.sets.sets)": [[225, "sympy.sets.sets.Set"]], "setkind (class in sympy.sets.conditionset)": [[225, "sympy.sets.conditionset.SetKind"]], "symmetricdifference (class in sympy.sets.sets)": [[225, "sympy.sets.sets.SymmetricDifference"]], "union (class in sympy.sets.sets)": [[225, "sympy.sets.sets.Union"]], "universalset (class in sympy.sets.sets)": [[225, "sympy.sets.sets.UniversalSet"]], "a_interval (sympy.sets.fancysets.complexregion property)": [[225, "sympy.sets.fancysets.ComplexRegion.a_interval"]], "as_relational() (sympy.sets.fancysets.range method)": [[225, "sympy.sets.fancysets.Range.as_relational"]], "as_relational() (sympy.sets.sets.complement method)": [[225, "sympy.sets.sets.Complement.as_relational"]], "as_relational() (sympy.sets.sets.finiteset method)": [[225, "sympy.sets.sets.FiniteSet.as_relational"]], "as_relational() (sympy.sets.sets.intersection method)": [[225, "sympy.sets.sets.Intersection.as_relational"]], "as_relational() (sympy.sets.sets.interval method)": [[225, "sympy.sets.sets.Interval.as_relational"]], "as_relational() (sympy.sets.sets.symmetricdifference method)": [[225, "sympy.sets.sets.SymmetricDifference.as_relational"]], "as_relational() (sympy.sets.sets.union method)": [[225, "sympy.sets.sets.Union.as_relational"]], "b_interval (sympy.sets.fancysets.complexregion property)": [[225, "sympy.sets.fancysets.ComplexRegion.b_interval"]], "boundary (sympy.sets.sets.set property)": [[225, "sympy.sets.sets.Set.boundary"]], "closure (sympy.sets.sets.set property)": [[225, "sympy.sets.sets.Set.closure"]], "complement() (sympy.sets.sets.set method)": [[225, "sympy.sets.sets.Set.complement"]], "contains() (sympy.sets.sets.set method)": [[225, "sympy.sets.sets.Set.contains"]], "end (sympy.sets.sets.interval property)": [[225, "sympy.sets.sets.Interval.end"]], "from_real() (sympy.sets.fancysets.complexregion class method)": [[225, "sympy.sets.fancysets.ComplexRegion.from_real"]], "imageset() (in module sympy.sets.sets)": [[225, "sympy.sets.sets.imageset"]], "inf (sympy.sets.sets.set property)": [[225, "sympy.sets.sets.Set.inf"]], "interior (sympy.sets.sets.set property)": [[225, "sympy.sets.sets.Set.interior"]], "intersect() (sympy.sets.sets.set method)": [[225, "sympy.sets.sets.Set.intersect"]], "intersection() (sympy.sets.sets.set method)": [[225, "sympy.sets.sets.Set.intersection"]], "is_closed (sympy.sets.sets.set property)": [[225, "sympy.sets.sets.Set.is_closed"]], "is_disjoint() (sympy.sets.sets.set method)": [[225, "sympy.sets.sets.Set.is_disjoint"]], "is_iterable (sympy.sets.sets.productset property)": [[225, "sympy.sets.sets.ProductSet.is_iterable"]], "is_left_unbounded (sympy.sets.sets.interval property)": [[225, "sympy.sets.sets.Interval.is_left_unbounded"]], "is_open (sympy.sets.sets.set property)": [[225, "sympy.sets.sets.Set.is_open"]], "is_proper_subset() (sympy.sets.sets.set method)": [[225, "sympy.sets.sets.Set.is_proper_subset"]], "is_proper_superset() (sympy.sets.sets.set method)": [[225, "sympy.sets.sets.Set.is_proper_superset"]], "is_right_unbounded (sympy.sets.sets.interval property)": [[225, "sympy.sets.sets.Interval.is_right_unbounded"]], "is_subset() (sympy.sets.sets.set method)": [[225, "sympy.sets.sets.Set.is_subset"]], "is_superset() (sympy.sets.sets.set method)": [[225, "sympy.sets.sets.Set.is_superset"]], "isdisjoint() (sympy.sets.sets.set method)": [[225, "sympy.sets.sets.Set.isdisjoint"]], "issubset() (sympy.sets.sets.set method)": [[225, "sympy.sets.sets.Set.issubset"]], "issuperset() (sympy.sets.sets.set method)": [[225, "sympy.sets.sets.Set.issuperset"]], "kind (sympy.sets.sets.set property)": [[225, "sympy.sets.sets.Set.kind"]], "left_open (sympy.sets.sets.interval property)": [[225, "sympy.sets.sets.Interval.left_open"]], "measure (sympy.sets.sets.set property)": [[225, "sympy.sets.sets.Set.measure"]], "normalize_theta_set() (in module sympy.sets.fancysets)": [[225, "sympy.sets.fancysets.normalize_theta_set"]], "open() (sympy.sets.sets.interval class method)": [[225, "sympy.sets.sets.Interval.open"]], "powerset() (sympy.sets.sets.set method)": [[225, "sympy.sets.sets.Set.powerset"]], "psets (sympy.sets.fancysets.complexregion property)": [[225, "sympy.sets.fancysets.ComplexRegion.psets"]], "reduce() (sympy.sets.sets.complement static method)": [[225, "sympy.sets.sets.Complement.reduce"]], "reversed (sympy.sets.fancysets.range property)": [[225, "sympy.sets.fancysets.Range.reversed"]], "right_open (sympy.sets.sets.interval property)": [[225, "sympy.sets.sets.Interval.right_open"]], "sets (sympy.sets.fancysets.complexregion property)": [[225, "sympy.sets.fancysets.ComplexRegion.sets"]], "start (sympy.sets.sets.interval property)": [[225, "sympy.sets.sets.Interval.start"]], "sup (sympy.sets.sets.set property)": [[225, "sympy.sets.sets.Set.sup"]], "symmetric_difference() (sympy.sets.sets.set method)": [[225, "sympy.sets.sets.Set.symmetric_difference"]], "sympy.sets.conditionset": [[225, "module-sympy.sets.conditionset"]], "sympy.sets.fancysets": [[225, "module-sympy.sets.fancysets"]], "sympy.sets.powerset": [[225, "module-sympy.sets.powerset"]], "sympy.sets.sets": [[225, "module-sympy.sets.sets"]], "union() (sympy.sets.sets.set method)": [[225, "sympy.sets.sets.Set.union"]], "tr0() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR0"]], "tr1() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR1"]], "tr10() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR10"]], "tr10i() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR10i"]], "tr11() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR11"]], "tr111() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR111"]], "tr12() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR12"]], "tr12i() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR12i"]], "tr13() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR13"]], "tr14() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR14"]], "tr15() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR15"]], "tr16() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR16"]], "tr2() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR2"]], "tr22() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR22"]], "tr2i() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR2i"]], "tr3() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR3"]], "tr4() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR4"]], "tr5() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR5"]], "tr6() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR6"]], "tr7() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR7"]], "tr8() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR8"]], "tr9() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TR9"]], "trmorrie() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TRmorrie"]], "trpower() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.TRpower"]], "fu() (in module sympy.simplify.fu)": [[226, "sympy.simplify.fu.fu"]], "sympy.simplify.hyperexpand_doc": [[227, "module-sympy.simplify.hyperexpand_doc"]], "epath (class in sympy.simplify.epathtools)": [[229, "sympy.simplify.epathtools.EPath"]], "apply() (sympy.simplify.epathtools.epath method)": [[229, "sympy.simplify.epathtools.EPath.apply"]], "besselsimp() (in module sympy.simplify.simplify)": [[229, "sympy.simplify.simplify.besselsimp"]], "collect() (in module sympy.simplify.radsimp)": [[229, "sympy.simplify.radsimp.collect"]], "collect_const() (in module sympy.simplify.radsimp)": [[229, "sympy.simplify.radsimp.collect_const"]], "collect_sqrt() (in module sympy.simplify.radsimp)": [[229, "sympy.simplify.radsimp.collect_sqrt"]], "combsimp() (in module sympy.simplify.combsimp)": [[229, "sympy.simplify.combsimp.combsimp"]], "cse() (in module sympy.simplify.cse_main)": [[229, "sympy.simplify.cse_main.cse"]], "epath() (in module sympy.simplify.epathtools)": [[229, "sympy.simplify.epathtools.epath"]], "fraction() (in module sympy.simplify.radsimp)": [[229, "sympy.simplify.radsimp.fraction"]], "hyperexpand() (in module sympy.simplify.hyperexpand)": [[229, "sympy.simplify.hyperexpand.hyperexpand"]], "hypersimilar() (in module sympy.simplify.simplify)": [[229, "sympy.simplify.simplify.hypersimilar"]], "hypersimp() (in module sympy.simplify.simplify)": [[229, "sympy.simplify.simplify.hypersimp"]], "kroneckersimp() (in module sympy.simplify.simplify)": [[229, "sympy.simplify.simplify.kroneckersimp"]], "logcombine() (in module sympy.simplify.simplify)": [[229, "sympy.simplify.simplify.logcombine"]], "nsimplify() (in module sympy.simplify.simplify)": [[229, "sympy.simplify.simplify.nsimplify"]], "nthroot() (in module sympy.simplify.simplify)": [[229, "sympy.simplify.simplify.nthroot"]], "opt_cse() (in module sympy.simplify.cse_main)": [[229, "sympy.simplify.cse_main.opt_cse"]], "posify() (in module sympy.simplify.simplify)": [[229, "sympy.simplify.simplify.posify"]], "powdenest() (in module sympy.simplify.powsimp)": [[229, "sympy.simplify.powsimp.powdenest"]], "powsimp() (in module sympy.simplify.powsimp)": [[229, "sympy.simplify.powsimp.powsimp"]], "rad_rationalize() (in module sympy.simplify.radsimp)": [[229, "sympy.simplify.radsimp.rad_rationalize"]], "radsimp() (in module sympy.simplify.radsimp)": [[229, "sympy.simplify.radsimp.radsimp"]], "ratsimp() (in module sympy.simplify.ratsimp)": [[229, "sympy.simplify.ratsimp.ratsimp"]], "ratsimpmodprime() (in module sympy.simplify.ratsimp)": [[229, "sympy.simplify.ratsimp.ratsimpmodprime"]], "rcollect() (in module sympy.simplify.radsimp)": [[229, "sympy.simplify.radsimp.rcollect"]], "select() (sympy.simplify.epathtools.epath method)": [[229, "sympy.simplify.epathtools.EPath.select"]], "separatevars() (in module sympy.simplify.simplify)": [[229, "sympy.simplify.simplify.separatevars"]], "simplify() (in module sympy.simplify.simplify)": [[229, "sympy.simplify.simplify.simplify"]], "sqrtdenest() (in module sympy.simplify.sqrtdenest)": [[229, "sympy.simplify.sqrtdenest.sqrtdenest"]], "sympy.simplify.combsimp": [[229, "module-sympy.simplify.combsimp"]], "sympy.simplify.cse_main": [[229, "module-sympy.simplify.cse_main"]], "sympy.simplify.epathtools": [[229, "module-sympy.simplify.epathtools"]], "sympy.simplify.hyperexpand": [[229, "module-sympy.simplify.hyperexpand"]], "sympy.simplify.powsimp": [[229, "module-sympy.simplify.powsimp"]], "sympy.simplify.radsimp": [[229, "module-sympy.simplify.radsimp"]], "sympy.simplify.ratsimp": [[229, "module-sympy.simplify.ratsimp"]], "sympy.simplify.sqrtdenest": [[229, "module-sympy.simplify.sqrtdenest"]], "sympy.simplify.trigsimp": [[229, "module-sympy.simplify.trigsimp"]], "tree_cse() (in module sympy.simplify.cse_main)": [[229, "sympy.simplify.cse_main.tree_cse"]], "trigsimp() (in module sympy.simplify.trigsimp)": [[229, "sympy.simplify.trigsimp.trigsimp"]], "binaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.BinaryQuadratic"]], "cubicthue (class in sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.CubicThue"]], "diophantineequationtype (class in sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.DiophantineEquationType"]], "diophantinesolutionset (class in sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.DiophantineSolutionSet"]], "generalpythagorean (class in sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.GeneralPythagorean"]], "generalsumofevenpowers (class in sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.GeneralSumOfEvenPowers"]], "generalsumofsquares (class in sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.GeneralSumOfSquares"]], "homogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.HomogeneousGeneralQuadratic"]], "homogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadratic"]], "homogeneousternaryquadraticnormal (class in sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadraticNormal"]], "inhomogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.InhomogeneousGeneralQuadratic"]], "inhomogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.InhomogeneousTernaryQuadratic"]], "linear (class in sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.Linear"]], "pqa() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.PQa"]], "univariate (class in sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.Univariate"]], "base_solution_linear() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.base_solution_linear"]], "classify_diop() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.classify_diop"]], "cornacchia() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.cornacchia"]], "descent() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.descent"]], "diop_dn() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.diop_DN"]], "diop_bf_dn() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.diop_bf_DN"]], "diop_general_pythagorean() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.diop_general_pythagorean"]], "diop_general_sum_of_even_powers() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_even_powers"]], "diop_general_sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_squares"]], "diop_linear() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.diop_linear"]], "diop_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.diop_quadratic"]], "diop_solve() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.diop_solve"]], "diop_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic"]], "diop_ternary_quadratic_normal() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic_normal"]], "diophantine() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.diophantine"]], "divisible() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.divisible"]], "equivalent() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.equivalent"]], "find_dn() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.find_DN"]], "gaussian_reduce() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.gaussian_reduce"]], "holzer() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.holzer"]], "ldescent() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.ldescent"]], "matches() (sympy.solvers.diophantine.diophantine.diophantineequationtype method)": [[230, "sympy.solvers.diophantine.diophantine.DiophantineEquationType.matches"]], "merge_solution() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.merge_solution"]], "parametrize_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.parametrize_ternary_quadratic"]], "partition() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.partition"]], "power_representation() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.power_representation"]], "prime_as_sum_of_two_squares() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.prime_as_sum_of_two_squares"]], "reconstruct() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.reconstruct"]], "sqf_normal() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.sqf_normal"]], "square_factor() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.square_factor"]], "sum_of_four_squares() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.sum_of_four_squares"]], "sum_of_powers() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.sum_of_powers"]], "sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.sum_of_squares"]], "sum_of_three_squares() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.sum_of_three_squares"]], "transformation_to_dn() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.transformation_to_DN"]], "transformation_to_normal() (in module sympy.solvers.diophantine.diophantine)": [[230, "sympy.solvers.diophantine.diophantine.transformation_to_normal"]], "reduce_abs_inequalities() (in module sympy.solvers.inequalities)": [[232, "sympy.solvers.inequalities.reduce_abs_inequalities"]], "reduce_abs_inequality() (in module sympy.solvers.inequalities)": [[232, "sympy.solvers.inequalities.reduce_abs_inequality"]], "reduce_inequalities() (in module sympy.solvers.inequalities)": [[232, "sympy.solvers.inequalities.reduce_inequalities"]], "reduce_rational_inequalities() (in module sympy.solvers.inequalities)": [[232, "sympy.solvers.inequalities.reduce_rational_inequalities"]], "solve_poly_inequalities() (in module sympy.solvers.inequalities)": [[232, "sympy.solvers.inequalities.solve_poly_inequalities"]], "solve_poly_inequality() (in module sympy.solvers.inequalities)": [[232, "sympy.solvers.inequalities.solve_poly_inequality"]], "solve_rational_inequalities() (in module sympy.solvers.inequalities)": [[232, "sympy.solvers.inequalities.solve_rational_inequalities"]], "solve_univariate_inequality() (in module sympy.solvers.inequalities)": [[232, "sympy.solvers.inequalities.solve_univariate_inequality"]], "sympy.solvers.inequalities": [[232, "module-sympy.solvers.inequalities"]], "almostlinear (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.AlmostLinear"]], "bernoulli (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.Bernoulli"]], "factorable (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.Factorable"]], "firstexact (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.FirstExact"]], "firstlinear (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.FirstLinear"]], "homogeneouscoeffbest (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.HomogeneousCoeffBest"]], "homogeneouscoeffsubsdepdivindep (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep"]], "homogeneouscoeffsubsindepdivdep (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep"]], "liegroup (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.LieGroup"]], "linearcoefficients (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.LinearCoefficients"]], "liouville (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.Liouville"]], "nthalgebraic (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.NthAlgebraic"]], "nthlinearconstantcoeffhomogeneous (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.NthLinearConstantCoeffHomogeneous"]], "nthlinearconstantcoeffundeterminedcoefficients (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.NthLinearConstantCoeffUndeterminedCoefficients"]], "nthlinearconstantcoeffvariationofparameters (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.NthLinearConstantCoeffVariationOfParameters"]], "nthlineareulereqhomogeneous (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.NthLinearEulerEqHomogeneous"]], "nthlineareulereqnonhomogeneousundeterminedcoefficients (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"]], "nthlineareulereqnonhomogeneousvariationofparameters (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousVariationOfParameters"]], "nthorderreducible (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.NthOrderReducible"]], "rationalriccati (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.RationalRiccati"]], "riccatispecial (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.RiccatiSpecial"]], "secondhypergeometric (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.SecondHypergeometric"]], "secondlinearairy (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.SecondLinearAiry"]], "secondlinearbessel (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.SecondLinearBessel"]], "separable (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.Separable"]], "separablereduced (class in sympy.solvers.ode.single)": [[233, "sympy.solvers.ode.single.SeparableReduced"]], "_handle_integral() (in module sympy.solvers.ode.ode)": [[233, "sympy.solvers.ode.ode._handle_Integral"]], "_linear_2eq_order1_type6() (in module sympy.solvers.ode.ode)": [[233, "sympy.solvers.ode.ode._linear_2eq_order1_type6"]], "_linear_2eq_order1_type7() (in module sympy.solvers.ode.ode)": [[233, "sympy.solvers.ode.ode._linear_2eq_order1_type7"]], "_nonlinear_2eq_order1_type1() (in module sympy.solvers.ode.ode)": [[233, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type1"]], "_nonlinear_2eq_order1_type2() (in module sympy.solvers.ode.ode)": [[233, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type2"]], "_nonlinear_2eq_order1_type3() (in module sympy.solvers.ode.ode)": [[233, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type3"]], "_nonlinear_2eq_order1_type4() (in module sympy.solvers.ode.ode)": [[233, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type4"]], "_nonlinear_2eq_order1_type5() (in module sympy.solvers.ode.ode)": [[233, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type5"]], "_nonlinear_3eq_order1_type1() (in module sympy.solvers.ode.ode)": [[233, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type1"]], "_nonlinear_3eq_order1_type2() (in module sympy.solvers.ode.ode)": [[233, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type2"]], "_nonlinear_3eq_order1_type3() (in module sympy.solvers.ode.ode)": [[233, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type3"]], "_nonlinear_3eq_order1_type4() (in module sympy.solvers.ode.ode)": [[233, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type4"]], "_nonlinear_3eq_order1_type5() (in module sympy.solvers.ode.ode)": [[233, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type5"]], "allhints (in module sympy.solvers.ode)": [[233, "sympy.solvers.ode.allhints"]], "canonical_odes() (in module sympy.solvers.ode.systems)": [[233, "sympy.solvers.ode.systems.canonical_odes"]], "checkinfsol() (in module sympy.solvers.ode)": [[233, "sympy.solvers.ode.checkinfsol"]], "checkodesol() (in module sympy.solvers.ode)": [[233, "sympy.solvers.ode.checkodesol"]], "classify_ode() (in module sympy.solvers.ode)": [[233, "sympy.solvers.ode.classify_ode"]], "compute_m_ybar() (in module sympy.solvers.ode.riccati)": [[233, "sympy.solvers.ode.riccati.compute_m_ybar"]], "constant_renumber() (in module sympy.solvers.ode.ode)": [[233, "sympy.solvers.ode.ode.constant_renumber"]], "constantsimp() (in module sympy.solvers.ode)": [[233, "sympy.solvers.ode.constantsimp"]], "construct_c() (in module sympy.solvers.ode.riccati)": [[233, "sympy.solvers.ode.riccati.construct_c"]], "construct_d() (in module sympy.solvers.ode.riccati)": [[233, "sympy.solvers.ode.riccati.construct_d"]], "dsolve() (in module sympy.solvers.ode)": [[233, "sympy.solvers.ode.dsolve"]], "dsolve_system() (in module sympy.solvers.ode.systems)": [[233, "sympy.solvers.ode.systems.dsolve_system"]], "get_gen_sol_from_part_sol() (in module sympy.solvers.ode.riccati)": [[233, "sympy.solvers.ode.riccati.get_gen_sol_from_part_sol"]], "homogeneous_order() (in module sympy.solvers.ode)": [[233, "sympy.solvers.ode.homogeneous_order"]], "infinitesimals() (in module sympy.solvers.ode)": [[233, "sympy.solvers.ode.infinitesimals"]], "lie_heuristic_abaco1_product() (in module sympy.solvers.ode.lie_group)": [[233, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_product"]], "lie_heuristic_abaco1_simple() (in module sympy.solvers.ode.lie_group)": [[233, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_simple"]], "lie_heuristic_abaco2_similar() (in module sympy.solvers.ode.lie_group)": [[233, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_similar"]], "lie_heuristic_abaco2_unique_general() (in module sympy.solvers.ode.lie_group)": [[233, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_general"]], "lie_heuristic_abaco2_unique_unknown() (in module sympy.solvers.ode.lie_group)": [[233, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_unknown"]], "lie_heuristic_bivariate() (in module sympy.solvers.ode.lie_group)": [[233, "sympy.solvers.ode.lie_group.lie_heuristic_bivariate"]], "lie_heuristic_chi() (in module sympy.solvers.ode.lie_group)": [[233, "sympy.solvers.ode.lie_group.lie_heuristic_chi"]], "lie_heuristic_function_sum() (in module sympy.solvers.ode.lie_group)": [[233, "sympy.solvers.ode.lie_group.lie_heuristic_function_sum"]], "lie_heuristic_linear() (in module sympy.solvers.ode.lie_group)": [[233, "sympy.solvers.ode.lie_group.lie_heuristic_linear"]], "linear_ode_to_matrix() (in module sympy.solvers.ode.systems)": [[233, "sympy.solvers.ode.systems.linear_ode_to_matrix"]], "linodesolve() (in module sympy.solvers.ode.systems)": [[233, "sympy.solvers.ode.systems.linodesolve"]], "linodesolve_type() (in module sympy.solvers.ode.systems)": [[233, "sympy.solvers.ode.systems.linodesolve_type"]], "matrix_exp() (in module sympy.solvers.ode.systems)": [[233, "sympy.solvers.ode.systems.matrix_exp"]], "matrix_exp_jordan_form() (in module sympy.solvers.ode.systems)": [[233, "sympy.solvers.ode.systems.matrix_exp_jordan_form"]], "ode_1st_power_series() (in module sympy.solvers.ode.ode)": [[233, "sympy.solvers.ode.ode.ode_1st_power_series"]], "ode_2nd_power_series_ordinary() (in module sympy.solvers.ode.ode)": [[233, "sympy.solvers.ode.ode.ode_2nd_power_series_ordinary"]], "ode_2nd_power_series_regular() (in module sympy.solvers.ode.ode)": [[233, "sympy.solvers.ode.ode.ode_2nd_power_series_regular"]], "ode_sol_simplicity() (in module sympy.solvers.ode.ode)": [[233, "sympy.solvers.ode.ode.ode_sol_simplicity"]], "odesimp() (in module sympy.solvers.ode.ode)": [[233, "sympy.solvers.ode.ode.odesimp"]], "rational_laurent_series() (in module sympy.solvers.ode.riccati)": [[233, "sympy.solvers.ode.riccati.rational_laurent_series"]], "remove_redundant_sols() (in module sympy.solvers.ode.riccati)": [[233, "sympy.solvers.ode.riccati.remove_redundant_sols"]], "riccati_inverse_normal() (in module sympy.solvers.ode.riccati)": [[233, "sympy.solvers.ode.riccati.riccati_inverse_normal"]], "riccati_normal() (in module sympy.solvers.ode.riccati)": [[233, "sympy.solvers.ode.riccati.riccati_normal"]], "riccati_reduced() (in module sympy.solvers.ode.riccati)": [[233, "sympy.solvers.ode.riccati.riccati_reduced"]], "solve_aux_eq() (in module sympy.solvers.ode.riccati)": [[233, "sympy.solvers.ode.riccati.solve_aux_eq"]], "solve_riccati() (in module sympy.solvers.ode.riccati)": [[233, "sympy.solvers.ode.riccati.solve_riccati"]], "sympy.solvers.ode": [[233, "module-sympy.solvers.ode"]], "sympy.solvers.ode.ode": [[233, "module-sympy.solvers.ode.ode"]], "checkpdesol() (in module sympy.solvers.pde)": [[234, "sympy.solvers.pde.checkpdesol"]], "classify_pde() (in module sympy.solvers.pde)": [[234, "sympy.solvers.pde.classify_pde"]], "pde_1st_linear_constant_coeff() (in module sympy.solvers.pde)": [[234, "sympy.solvers.pde.pde_1st_linear_constant_coeff"]], "pde_1st_linear_constant_coeff_homogeneous() (in module sympy.solvers.pde)": [[234, "sympy.solvers.pde.pde_1st_linear_constant_coeff_homogeneous"]], "pde_1st_linear_variable_coeff() (in module sympy.solvers.pde)": [[234, "sympy.solvers.pde.pde_1st_linear_variable_coeff"]], "pde_separate() (in module sympy.solvers.pde)": [[234, "sympy.solvers.pde.pde_separate"]], "pde_separate_add() (in module sympy.solvers.pde)": [[234, "sympy.solvers.pde.pde_separate_add"]], "pde_separate_mul() (in module sympy.solvers.pde)": [[234, "sympy.solvers.pde.pde_separate_mul"]], "pdsolve() (in module sympy.solvers.pde)": [[234, "sympy.solvers.pde.pdsolve"]], "sympy.solvers.pde": [[234, "module-sympy.solvers.pde"]], "checksol() (in module sympy.solvers.solvers)": [[235, "sympy.solvers.solvers.checksol"]], "nsolve() (in module sympy.solvers.solvers)": [[235, "sympy.solvers.solvers.nsolve"]], "ode_order() (in module sympy.solvers.deutils)": [[235, "sympy.solvers.deutils.ode_order"]], "rsolve() (in module sympy.solvers.recurr)": [[235, "sympy.solvers.recurr.rsolve"]], "rsolve_hyper() (in module sympy.solvers.recurr)": [[235, "sympy.solvers.recurr.rsolve_hyper"]], "rsolve_poly() (in module sympy.solvers.recurr)": [[235, "sympy.solvers.recurr.rsolve_poly"]], "rsolve_ratio() (in module sympy.solvers.recurr)": [[235, "sympy.solvers.recurr.rsolve_ratio"]], "solve() (in module sympy.solvers.solvers)": [[235, "sympy.solvers.solvers.solve"]], "solve_linear() (in module sympy.solvers.solvers)": [[235, "sympy.solvers.solvers.solve_linear"]], "solve_linear_system() (in module sympy.solvers.solvers)": [[235, "sympy.solvers.solvers.solve_linear_system"]], "solve_linear_system_lu() (in module sympy.solvers.solvers)": [[235, "sympy.solvers.solvers.solve_linear_system_LU"]], "solve_poly_system() (in module sympy.solvers.polysys)": [[235, "sympy.solvers.polysys.solve_poly_system"]], "solve_triangulated() (in module sympy.solvers.polysys)": [[235, "sympy.solvers.polysys.solve_triangulated"]], "solve_undetermined_coeffs() (in module sympy.solvers.solvers)": [[235, "sympy.solvers.solvers.solve_undetermined_coeffs"]], "sympy.solvers": [[235, "module-sympy.solvers"]], "sympy.solvers.recurr": [[235, "module-sympy.solvers.recurr"]], "unrad() (in module sympy.solvers.solvers)": [[235, "sympy.solvers.solvers.unrad"]], "_is_exponential() (in module sympy.solvers.solveset)": [[236, "sympy.solvers.solveset._is_exponential"]], "_is_logarithmic() (in module sympy.solvers.solveset)": [[236, "sympy.solvers.solveset._is_logarithmic"]], "_solve_exponential() (in module sympy.solvers.solveset)": [[236, "sympy.solvers.solveset._solve_exponential"]], "_solve_logarithm() (in module sympy.solvers.solveset)": [[236, "sympy.solvers.solveset._solve_logarithm"]], "_transolve() (in module sympy.solvers.solveset)": [[236, "sympy.solvers.solveset._transolve"]], "domain_check() (in module sympy.solvers.solveset)": [[236, "sympy.solvers.solveset.domain_check"]], "invert_complex() (in module sympy.solvers.solveset)": [[236, "sympy.solvers.solveset.invert_complex"]], "invert_real() (in module sympy.solvers.solveset)": [[236, "sympy.solvers.solveset.invert_real"]], "linear_eq_to_matrix() (in module sympy.solvers.solveset)": [[236, "sympy.solvers.solveset.linear_eq_to_matrix"]], "linsolve() (in module sympy.solvers.solveset)": [[236, "sympy.solvers.solveset.linsolve"]], "nonlinsolve() (in module sympy.solvers.solveset)": [[236, "sympy.solvers.solveset.nonlinsolve"]], "solveset() (in module sympy.solvers.solveset)": [[236, "sympy.solvers.solveset.solveset"]], "solveset_complex() (in module sympy.solvers.solveset)": [[236, "sympy.solvers.solveset.solveset_complex"]], "solveset_real() (in module sympy.solvers.solveset)": [[236, "sympy.solvers.solveset.solveset_real"]], "solvify() (in module sympy.solvers.solveset)": [[236, "sympy.solvers.solveset.solvify"]], "sympy.solvers.solveset": [[236, "module-sympy.solvers.solveset"]], "arcsin() (in module sympy.stats)": [[237, "sympy.stats.Arcsin"]], "benini() (in module sympy.stats)": [[237, "sympy.stats.Benini"]], "bernoulli() (in module sympy.stats)": [[237, "sympy.stats.Bernoulli"]], "bernoulliprocess (class in sympy.stats)": [[237, "sympy.stats.BernoulliProcess"]], "beta() (in module sympy.stats)": [[237, "sympy.stats.Beta"]], "betabinomial() (in module sympy.stats)": [[237, "sympy.stats.BetaBinomial"]], "betanoncentral() (in module sympy.stats)": [[237, "sympy.stats.BetaNoncentral"]], "betaprime() (in module sympy.stats)": [[237, "sympy.stats.BetaPrime"]], "binomial() (in module sympy.stats)": [[237, "sympy.stats.Binomial"]], "boundedpareto() (in module sympy.stats)": [[237, "sympy.stats.BoundedPareto"]], "cauchy() (in module sympy.stats)": [[237, "sympy.stats.Cauchy"]], "centralmoment (class in sympy.stats)": [[237, "sympy.stats.CentralMoment"]], "chi() (in module sympy.stats)": [[237, "sympy.stats.Chi"]], "chinoncentral() (in module sympy.stats)": [[237, "sympy.stats.ChiNoncentral"]], "chisquared() (in module sympy.stats)": [[237, "sympy.stats.ChiSquared"]], "coin() (in module sympy.stats)": [[237, "sympy.stats.Coin"]], "compounddistribution (class in sympy.stats.compound_rv)": [[237, "sympy.stats.compound_rv.CompoundDistribution"]], "conditionaldomain (class in sympy.stats.rv)": [[237, "sympy.stats.rv.ConditionalDomain"]], "continuousdomain (class in sympy.stats.crv)": [[237, "sympy.stats.crv.ContinuousDomain"]], "continuousmarkovchain (class in sympy.stats)": [[237, "sympy.stats.ContinuousMarkovChain"]], "continuouspspace (class in sympy.stats.crv)": [[237, "sympy.stats.crv.ContinuousPSpace"]], "continuousrv() (in module sympy.stats)": [[237, "sympy.stats.ContinuousRV"]], "covariance (class in sympy.stats)": [[237, "sympy.stats.Covariance"]], "crosscovariancematrix (class in sympy.stats)": [[237, "sympy.stats.CrossCovarianceMatrix"]], "dagum() (in module sympy.stats)": [[237, "sympy.stats.Dagum"]], "davis() (in module sympy.stats)": [[237, "sympy.stats.Davis"]], "die() (in module sympy.stats)": [[237, "sympy.stats.Die"]], "diepspace (class in sympy.stats.frv_types)": [[237, "sympy.stats.frv_types.DiePSpace"]], "discretemarkovchain (class in sympy.stats)": [[237, "sympy.stats.DiscreteMarkovChain"]], "discreteuniform() (in module sympy.stats)": [[237, "sympy.stats.DiscreteUniform"]], "e() (in module sympy.stats)": [[237, "sympy.stats.E"]], "erlang() (in module sympy.stats)": [[237, "sympy.stats.Erlang"]], "exgaussian() (in module sympy.stats)": [[237, "sympy.stats.ExGaussian"]], "expectation (class in sympy.stats)": [[237, "sympy.stats.Expectation"]], "expectationmatrix (class in sympy.stats)": [[237, "sympy.stats.ExpectationMatrix"]], "exponential() (in module sympy.stats)": [[237, "sympy.stats.Exponential"]], "fdistribution() (in module sympy.stats)": [[237, "sympy.stats.FDistribution"]], "finitedomain (class in sympy.stats.frv)": [[237, "sympy.stats.frv.FiniteDomain"]], "finitepspace (class in sympy.stats.frv)": [[237, "sympy.stats.frv.FinitePSpace"]], "finiterv() (in module sympy.stats)": [[237, "sympy.stats.FiniteRV"]], "fisherz() (in module sympy.stats)": [[237, "sympy.stats.FisherZ"]], "frechet() (in module sympy.stats)": [[237, "sympy.stats.Frechet"]], "gamma() (in module sympy.stats)": [[237, "sympy.stats.Gamma"]], "gammainverse() (in module sympy.stats)": [[237, "sympy.stats.GammaInverse"]], "gammaprocess (class in sympy.stats)": [[237, "sympy.stats.GammaProcess"]], "generalizedmultivariateloggamma() (in module sympy.stats)": [[237, "sympy.stats.GeneralizedMultivariateLogGamma"]], "generalizedmultivariateloggammaomega() (in module sympy.stats)": [[237, "sympy.stats.GeneralizedMultivariateLogGammaOmega"]], "geometric() (in module sympy.stats)": [[237, "sympy.stats.Geometric"]], "gompertz() (in module sympy.stats)": [[237, "sympy.stats.Gompertz"]], "gumbel() (in module sympy.stats)": [[237, "sympy.stats.Gumbel"]], "hermite() (in module sympy.stats)": [[237, "sympy.stats.Hermite"]], "hypergeometric() (in module sympy.stats)": [[237, "sympy.stats.Hypergeometric"]], "jointrv() (in module sympy.stats)": [[237, "sympy.stats.JointRV"]], "kumaraswamy() (in module sympy.stats)": [[237, "sympy.stats.Kumaraswamy"]], "laplace() (in module sympy.stats)": [[237, "sympy.stats.Laplace"]], "levy() (in module sympy.stats)": [[237, "sympy.stats.Levy"]], "loglogistic() (in module sympy.stats)": [[237, "sympy.stats.LogLogistic"]], "lognormal() (in module sympy.stats)": [[237, "sympy.stats.LogNormal"]], "logarithmic() (in module sympy.stats)": [[237, "sympy.stats.Logarithmic"]], "logistic() (in module sympy.stats)": [[237, "sympy.stats.Logistic"]], "lomax() (in module sympy.stats)": [[237, "sympy.stats.Lomax"]], "matrixgamma() (in module sympy.stats)": [[237, "sympy.stats.MatrixGamma"]], "matrixnormal() (in module sympy.stats)": [[237, "sympy.stats.MatrixNormal"]], "maxwell() (in module sympy.stats)": [[237, "sympy.stats.Maxwell"]], "moment (class in sympy.stats)": [[237, "sympy.stats.Moment"]], "moyal() (in module sympy.stats)": [[237, "sympy.stats.Moyal"]], "multinomial() (in module sympy.stats)": [[237, "sympy.stats.Multinomial"]], "multivariatebeta() (in module sympy.stats)": [[237, "sympy.stats.MultivariateBeta"]], "multivariateewens() (in module sympy.stats)": [[237, "sympy.stats.MultivariateEwens"]], "multivariatelaplace() (in module sympy.stats)": [[237, "sympy.stats.MultivariateLaplace"]], "multivariatenormal() (in module sympy.stats)": [[237, "sympy.stats.MultivariateNormal"]], "multivariatet() (in module sympy.stats)": [[237, "sympy.stats.MultivariateT"]], "nakagami() (in module sympy.stats)": [[237, "sympy.stats.Nakagami"]], "negativebinomial() (in module sympy.stats)": [[237, "sympy.stats.NegativeBinomial"]], "negativemultinomial() (in module sympy.stats)": [[237, "sympy.stats.NegativeMultinomial"]], "normal() (in module sympy.stats)": [[237, "sympy.stats.Normal"]], "normalgamma() (in module sympy.stats)": [[237, "sympy.stats.NormalGamma"]], "normalpspace (class in sympy.stats.crv_types)": [[237, "sympy.stats.crv_types.NormalPSpace"]], "p() (in module sympy.stats)": [[237, "sympy.stats.P"]], "pspace (class in sympy.stats.rv)": [[237, "sympy.stats.rv.PSpace"]], "pareto() (in module sympy.stats)": [[237, "sympy.stats.Pareto"]], "poisson() (in module sympy.stats)": [[237, "sympy.stats.Poisson"]], "poissonprocess (class in sympy.stats)": [[237, "sympy.stats.PoissonProcess"]], "powerfunction() (in module sympy.stats)": [[237, "sympy.stats.PowerFunction"]], "probability (class in sympy.stats)": [[237, "sympy.stats.Probability"]], "productdomain (class in sympy.stats.rv)": [[237, "sympy.stats.rv.ProductDomain"]], "productpspace (class in sympy.stats.rv)": [[237, "sympy.stats.rv.ProductPSpace"]], "quadraticu() (in module sympy.stats)": [[237, "sympy.stats.QuadraticU"]], "rademacher() (in module sympy.stats)": [[237, "sympy.stats.Rademacher"]], "raisedcosine() (in module sympy.stats)": [[237, "sympy.stats.RaisedCosine"]], "randomdomain (class in sympy.stats.rv)": [[237, "sympy.stats.rv.RandomDomain"]], "randomsymbol (class in sympy.stats.rv)": [[237, "sympy.stats.rv.RandomSymbol"]], "rayleigh() (in module sympy.stats)": [[237, "sympy.stats.Rayleigh"]], "reciprocal() (in module sympy.stats)": [[237, "sympy.stats.Reciprocal"]], "shiftedgompertz() (in module sympy.stats)": [[237, "sympy.stats.ShiftedGompertz"]], "singledomain (class in sympy.stats.rv)": [[237, "sympy.stats.rv.SingleDomain"]], "singlepspace (class in sympy.stats.rv)": [[237, "sympy.stats.rv.SinglePSpace"]], "skellam() (in module sympy.stats)": [[237, "sympy.stats.Skellam"]], "studentt() (in module sympy.stats)": [[237, "sympy.stats.StudentT"]], "trapezoidal() (in module sympy.stats)": [[237, "sympy.stats.Trapezoidal"]], "triangular() (in module sympy.stats)": [[237, "sympy.stats.Triangular"]], "uniform() (in module sympy.stats)": [[237, "sympy.stats.Uniform"]], "uniformsum() (in module sympy.stats)": [[237, "sympy.stats.UniformSum"]], "variance (class in sympy.stats)": [[237, "sympy.stats.Variance"]], "variancematrix (class in sympy.stats)": [[237, "sympy.stats.VarianceMatrix"]], "vonmises() (in module sympy.stats)": [[237, "sympy.stats.VonMises"]], "wald() (in module sympy.stats)": [[237, "sympy.stats.Wald"]], "weibull() (in module sympy.stats)": [[237, "sympy.stats.Weibull"]], "wienerprocess (class in sympy.stats)": [[237, "sympy.stats.WienerProcess"]], "wignersemicircle() (in module sympy.stats)": [[237, "sympy.stats.WignerSemicircle"]], "wishart() (in module sympy.stats)": [[237, "sympy.stats.Wishart"]], "yulesimon() (in module sympy.stats)": [[237, "sympy.stats.YuleSimon"]], "zeta() (in module sympy.stats)": [[237, "sympy.stats.Zeta"]], "absorbing_probabilities() (sympy.stats.discretemarkovchain method)": [[237, "sympy.stats.DiscreteMarkovChain.absorbing_probabilities"]], "canonical_form() (sympy.stats.discretemarkovchain method)": [[237, "sympy.stats.DiscreteMarkovChain.canonical_form"]], "cmoment() (in module sympy.stats)": [[237, "sympy.stats.cmoment"]], "communication_classes() (sympy.stats.discretemarkovchain method)": [[237, "sympy.stats.DiscreteMarkovChain.communication_classes"]], "correlation() (in module sympy.stats)": [[237, "sympy.stats.correlation"]], "coskewness() (in module sympy.stats)": [[237, "sympy.stats.coskewness"]], "covariance() (in module sympy.stats)": [[237, "sympy.stats.covariance"]], "decompose() (sympy.stats.discretemarkovchain method)": [[237, "sympy.stats.DiscreteMarkovChain.decompose"]], "density() (in module sympy.stats)": [[237, "sympy.stats.density"]], "entropy() (in module sympy.stats)": [[237, "sympy.stats.entropy"]], "expectation() (sympy.stats.bernoulliprocess method)": [[237, "sympy.stats.BernoulliProcess.expectation"]], "factorial_moment() (in module sympy.stats)": [[237, "sympy.stats.factorial_moment"]], "fixed_row_vector() (sympy.stats.discretemarkovchain method)": [[237, "sympy.stats.DiscreteMarkovChain.fixed_row_vector"]], "fundamental_matrix() (sympy.stats.discretemarkovchain method)": [[237, "sympy.stats.DiscreteMarkovChain.fundamental_matrix"]], "given() (in module sympy.stats)": [[237, "sympy.stats.given"]], "kurtosis() (in module sympy.stats)": [[237, "sympy.stats.kurtosis"]], "limiting_distribution (sympy.stats.discretemarkovchain property)": [[237, "sympy.stats.DiscreteMarkovChain.limiting_distribution"]], "marginal_distribution() (in module sympy.stats)": [[237, "sympy.stats.marginal_distribution"]], "median() (in module sympy.stats)": [[237, "sympy.stats.median"]], "moment() (in module sympy.stats)": [[237, "sympy.stats.moment"]], "probability() (sympy.stats.bernoulliprocess method)": [[237, "sympy.stats.BernoulliProcess.probability"]], "pspace() (in module sympy.stats.rv)": [[237, "sympy.stats.rv.pspace"]], "quantile() (in module sympy.stats)": [[237, "sympy.stats.quantile"]], "random_symbols() (in module sympy.stats.rv)": [[237, "sympy.stats.rv.random_symbols"]], "rs_swap() (in module sympy.stats.rv)": [[237, "sympy.stats.rv.rs_swap"]], "sample() (in module sympy.stats)": [[237, "sympy.stats.sample"]], "sample() (sympy.stats.discretemarkovchain method)": [[237, "sympy.stats.DiscreteMarkovChain.sample"]], "sample_iter() (in module sympy.stats)": [[237, "sympy.stats.sample_iter"]], "sampling_e() (in module sympy.stats.rv)": [[237, "sympy.stats.rv.sampling_E"]], "sampling_p() (in module sympy.stats.rv)": [[237, "sympy.stats.rv.sampling_P"]], "sampling_density() (in module sympy.stats.rv)": [[237, "sympy.stats.rv.sampling_density"]], "skewness() (in module sympy.stats)": [[237, "sympy.stats.skewness"]], "stationary_distribution() (sympy.stats.discretemarkovchain method)": [[237, "sympy.stats.DiscreteMarkovChain.stationary_distribution"]], "std() (in module sympy.stats)": [[237, "sympy.stats.std"]], "sympy.stats": [[237, "module-sympy.stats"]], "sympy.stats.die() (in module sympy.stats.crv_types)": [[237, "sympy.stats.crv_types.sympy.stats.Die"]], "sympy.stats.normal() (in module sympy.stats.crv_types)": [[237, "sympy.stats.crv_types.sympy.stats.Normal"]], "sympy.stats.crv": [[237, "module-sympy.stats.crv"]], "sympy.stats.crv_types": [[237, "module-sympy.stats.crv_types"]], "sympy.stats.frv": [[237, "module-sympy.stats.frv"]], "sympy.stats.frv_types": [[237, "module-sympy.stats.frv_types"]], "sympy.stats.rv": [[237, "module-sympy.stats.rv"]], "transition_probabilities (sympy.stats.discretemarkovchain property)": [[237, "sympy.stats.DiscreteMarkovChain.transition_probabilities"]], "variance() (in module sympy.stats)": [[237, "sympy.stats.variance"]], "where() (in module sympy.stats)": [[237, "sympy.stats.where"]], "immutabledensendimarray (class in sympy.tensor.array)": [[238, "sympy.tensor.array.ImmutableDenseNDimArray"]], "immutablesparsendimarray (class in sympy.tensor.array)": [[238, "sympy.tensor.array.ImmutableSparseNDimArray"]], "mutabledensendimarray (class in sympy.tensor.array)": [[238, "sympy.tensor.array.MutableDenseNDimArray"]], "mutablesparsendimarray (class in sympy.tensor.array)": [[238, "sympy.tensor.array.MutableSparseNDimArray"]], "derive_by_array() (in module sympy.tensor.array)": [[238, "sympy.tensor.array.derive_by_array"]], "permutedims() (in module sympy.tensor.array)": [[238, "sympy.tensor.array.permutedims"]], "sympy.tensor.array": [[238, "module-sympy.tensor.array"]], "tensorcontraction() (in module sympy.tensor.array)": [[238, "sympy.tensor.array.tensorcontraction"]], "tensordiagonal() (in module sympy.tensor.array)": [[238, "sympy.tensor.array.tensordiagonal"]], "tensorproduct() (in module sympy.tensor.array)": [[238, "sympy.tensor.array.tensorproduct"]], "arraycontraction (class in sympy.tensor.array.expressions)": [[239, "sympy.tensor.array.expressions.ArrayContraction"]], "arraydiagonal (class in sympy.tensor.array.expressions)": [[239, "sympy.tensor.array.expressions.ArrayDiagonal"]], "arraytensorproduct (class in sympy.tensor.array.expressions)": [[239, "sympy.tensor.array.expressions.ArrayTensorProduct"]], "permutedims (class in sympy.tensor.array.expressions)": [[239, "sympy.tensor.array.expressions.PermuteDims"]], "sympy.tensor.array.expressions": [[239, "module-sympy.tensor.array.expressions"]], "sympy.tensor": [[240, "module-sympy.tensor"]], "get_contraction_structure() (in module sympy.tensor.index_methods)": [[241, "sympy.tensor.index_methods.get_contraction_structure"]], "get_indices() (in module sympy.tensor.index_methods)": [[241, "sympy.tensor.index_methods.get_indices"]], "sympy.tensor.index_methods": [[241, "module-sympy.tensor.index_methods"]], "idx (class in sympy.tensor.indexed)": [[242, "sympy.tensor.indexed.Idx"]], "indexed (class in sympy.tensor.indexed)": [[242, "sympy.tensor.indexed.Indexed"]], "indexedbase (class in sympy.tensor.indexed)": [[242, "sympy.tensor.indexed.IndexedBase"]], "base (sympy.tensor.indexed.indexed property)": [[242, "sympy.tensor.indexed.Indexed.base"]], "indices (sympy.tensor.indexed.indexed property)": [[242, "sympy.tensor.indexed.Indexed.indices"]], "label (sympy.tensor.indexed.idx property)": [[242, "sympy.tensor.indexed.Idx.label"]], "label (sympy.tensor.indexed.indexedbase property)": [[242, "sympy.tensor.indexed.IndexedBase.label"]], "lower (sympy.tensor.indexed.idx property)": [[242, "sympy.tensor.indexed.Idx.lower"]], "offset (sympy.tensor.indexed.indexedbase property)": [[242, "sympy.tensor.indexed.IndexedBase.offset"]], "ranges (sympy.tensor.indexed.indexed property)": [[242, "sympy.tensor.indexed.Indexed.ranges"]], "rank (sympy.tensor.indexed.indexed property)": [[242, "sympy.tensor.indexed.Indexed.rank"]], "shape (sympy.tensor.indexed.indexed property)": [[242, "sympy.tensor.indexed.Indexed.shape"]], "shape (sympy.tensor.indexed.indexedbase property)": [[242, "sympy.tensor.indexed.IndexedBase.shape"]], "strides (sympy.tensor.indexed.indexedbase property)": [[242, "sympy.tensor.indexed.IndexedBase.strides"]], "sympy.tensor.indexed": [[242, "module-sympy.tensor.indexed"]], "upper (sympy.tensor.indexed.idx property)": [[242, "sympy.tensor.indexed.Idx.upper"]], "tensadd (class in sympy.tensor.tensor)": [[243, "sympy.tensor.tensor.TensAdd"]], "tensexpr (class in sympy.tensor.tensor)": [[243, "sympy.tensor.tensor.TensExpr"]], "tensmul (class in sympy.tensor.tensor)": [[243, "sympy.tensor.tensor.TensMul"]], "tensorhead (class in sympy.tensor.tensor)": [[243, "sympy.tensor.tensor.TensorHead"]], "tensorindex (class in sympy.tensor.tensor)": [[243, "sympy.tensor.tensor.TensorIndex"]], "tensorindextype (class in sympy.tensor.tensor)": [[243, "sympy.tensor.tensor.TensorIndexType"]], "tensorsymmetry (class in sympy.tensor.tensor)": [[243, "sympy.tensor.tensor.TensorSymmetry"]], "tensortype (class in sympy.tensor.tensor)": [[243, "sympy.tensor.tensor.TensorType"]], "_tensormanager (class in sympy.tensor.tensor)": [[243, "sympy.tensor.tensor._TensorManager"]], "canon_bp() (in module sympy.tensor.tensor)": [[243, "sympy.tensor.tensor.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensadd method)": [[243, "sympy.tensor.tensor.TensAdd.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensmul method)": [[243, "sympy.tensor.tensor.TensMul.canon_bp"]], "clear() (sympy.tensor.tensor._tensormanager method)": [[243, "sympy.tensor.tensor._TensorManager.clear"]], "comm_i2symbol() (sympy.tensor.tensor._tensormanager method)": [[243, "sympy.tensor.tensor._TensorManager.comm_i2symbol"]], "comm_symbols2i() (sympy.tensor.tensor._tensormanager method)": [[243, "sympy.tensor.tensor._TensorManager.comm_symbols2i"]], "commutes_with() (sympy.tensor.tensor.tensorhead method)": [[243, "sympy.tensor.tensor.TensorHead.commutes_with"]], "contract_metric() (sympy.tensor.tensor.tensadd method)": [[243, "sympy.tensor.tensor.TensAdd.contract_metric"]], "contract_metric() (sympy.tensor.tensor.tensmul method)": [[243, "sympy.tensor.tensor.TensMul.contract_metric"]], "direct_product() (sympy.tensor.tensor.tensorsymmetry class method)": [[243, "sympy.tensor.tensor.TensorSymmetry.direct_product"]], "fully_symmetric() (sympy.tensor.tensor.tensorsymmetry class method)": [[243, "sympy.tensor.tensor.TensorSymmetry.fully_symmetric"]], "get_comm() (sympy.tensor.tensor._tensormanager method)": [[243, "sympy.tensor.tensor._TensorManager.get_comm"]], "get_free_indices() (sympy.tensor.tensor.tensmul method)": [[243, "sympy.tensor.tensor.TensMul.get_free_indices"]], "get_indices() (sympy.tensor.tensor.tensmul method)": [[243, "sympy.tensor.tensor.TensMul.get_indices"]], "get_matrix() (sympy.tensor.tensor.tensexpr method)": [[243, "sympy.tensor.tensor.TensExpr.get_matrix"]], "no_symmetry() (sympy.tensor.tensor.tensorsymmetry class method)": [[243, "sympy.tensor.tensor.TensorSymmetry.no_symmetry"]], "perm2tensor() (sympy.tensor.tensor.tensmul method)": [[243, "sympy.tensor.tensor.TensMul.perm2tensor"]], "replace_with_arrays() (sympy.tensor.tensor.tensexpr method)": [[243, "sympy.tensor.tensor.TensExpr.replace_with_arrays"]], "riemann() (sympy.tensor.tensor.tensorsymmetry class method)": [[243, "sympy.tensor.tensor.TensorSymmetry.riemann"]], "riemann_cyclic() (in module sympy.tensor.tensor)": [[243, "sympy.tensor.tensor.riemann_cyclic"]], "riemann_cyclic_replace() (in module sympy.tensor.tensor)": [[243, "sympy.tensor.tensor.riemann_cyclic_replace"]], "set_comm() (sympy.tensor.tensor._tensormanager method)": [[243, "sympy.tensor.tensor._TensorManager.set_comm"]], "set_comms() (sympy.tensor.tensor._tensormanager method)": [[243, "sympy.tensor.tensor._TensorManager.set_comms"]], "sorted_components() (sympy.tensor.tensor.tensmul method)": [[243, "sympy.tensor.tensor.TensMul.sorted_components"]], "split() (sympy.tensor.tensor.tensmul method)": [[243, "sympy.tensor.tensor.TensMul.split"]], "sympy.tensor.tensor": [[243, "module-sympy.tensor.tensor"]], "tensor_heads() (in module sympy.tensor.tensor)": [[243, "sympy.tensor.tensor.tensor_heads"]], "tensorsymmetry() (in module sympy.tensor.tensor)": [[243, "sympy.tensor.tensor.tensorsymmetry"]], "partialderivative (class in sympy.tensor.toperators)": [[244, "sympy.tensor.toperators.PartialDerivative"]], "sympy.tensor.toperators": [[244, "module-sympy.tensor.toperators"]], "sympy.testing": [[245, "module-sympy.testing"]], "skip() (in module sympy.testing.pytest)": [[246, "sympy.testing.pytest.SKIP"]], "nocache_fail() (in module sympy.testing.pytest)": [[246, "sympy.testing.pytest.nocache_fail"]], "raises() (in module sympy.testing.pytest)": [[246, "sympy.testing.pytest.raises"]], "skip_under_pyodide() (in module sympy.testing.pytest)": [[246, "sympy.testing.pytest.skip_under_pyodide"]], "sympy.testing.pytest": [[246, "module-sympy.testing.pytest"]], "warns() (in module sympy.testing.pytest)": [[246, "sympy.testing.pytest.warns"]], "warns_deprecated_sympy() (in module sympy.testing.pytest)": [[246, "sympy.testing.pytest.warns_deprecated_sympy"]], "sympy.testing.randtest": [[247, "module-sympy.testing.randtest"]], "pytestreporter (class in sympy.testing.runtests)": [[248, "sympy.testing.runtests.PyTestReporter"]], "reporter (class in sympy.testing.runtests)": [[248, "sympy.testing.runtests.Reporter"]], "sympydoctestfinder (class in sympy.testing.runtests)": [[248, "sympy.testing.runtests.SymPyDocTestFinder"]], "sympydoctestrunner (class in sympy.testing.runtests)": [[248, "sympy.testing.runtests.SymPyDocTestRunner"]], "sympyoutputchecker (class in sympy.testing.runtests)": [[248, "sympy.testing.runtests.SymPyOutputChecker"]], "sympytestresults (class in sympy.testing.runtests)": [[248, "sympy.testing.runtests.SymPyTestResults"]], "attempted (sympy.testing.runtests.sympytestresults attribute)": [[248, "sympy.testing.runtests.SymPyTestResults.attempted"]], "check_output() (sympy.testing.runtests.sympyoutputchecker method)": [[248, "sympy.testing.runtests.SymPyOutputChecker.check_output"]], "convert_to_native_paths() (in module sympy.testing.runtests)": [[248, "sympy.testing.runtests.convert_to_native_paths"]], "doctest() (in module sympy.testing.runtests)": [[248, "sympy.testing.runtests.doctest"]], "failed (sympy.testing.runtests.sympytestresults attribute)": [[248, "sympy.testing.runtests.SymPyTestResults.failed"]], "get_sympy_dir() (in module sympy.testing.runtests)": [[248, "sympy.testing.runtests.get_sympy_dir"]], "raise_on_deprecated() (in module sympy.testing.runtests)": [[248, "sympy.testing.runtests.raise_on_deprecated"]], "run() (sympy.testing.runtests.sympydoctestrunner method)": [[248, "sympy.testing.runtests.SymPyDocTestRunner.run"]], "run_all_tests() (in module sympy.testing.runtests)": [[248, "sympy.testing.runtests.run_all_tests"]], "run_in_subprocess_with_hash_randomization() (in module sympy.testing.runtests)": [[248, "sympy.testing.runtests.run_in_subprocess_with_hash_randomization"]], "split_list() (in module sympy.testing.runtests)": [[248, "sympy.testing.runtests.split_list"]], "sympy.testing.runtests": [[248, "module-sympy.testing.runtests"]], "sympytestfile() (in module sympy.testing.runtests)": [[248, "sympy.testing.runtests.sympytestfile"]], "test() (in module sympy.testing.runtests)": [[248, "sympy.testing.runtests.test"]], "write() (sympy.testing.runtests.pytestreporter method)": [[248, "sympy.testing.runtests.PyTestReporter.write"]], "codewrapper (class in sympy.utilities.autowrap)": [[249, "sympy.utilities.autowrap.CodeWrapper"]], "cythoncodewrapper (class in sympy.utilities.autowrap)": [[249, "sympy.utilities.autowrap.CythonCodeWrapper"]], "dummywrapper (class in sympy.utilities.autowrap)": [[249, "sympy.utilities.autowrap.DummyWrapper"]], "f2pycodewrapper (class in sympy.utilities.autowrap)": [[249, "sympy.utilities.autowrap.F2PyCodeWrapper"]], "ufuncifycodewrapper (class in sympy.utilities.autowrap)": [[249, "sympy.utilities.autowrap.UfuncifyCodeWrapper"]], "autowrap() (in module sympy.utilities.autowrap)": [[249, "sympy.utilities.autowrap.autowrap"]], "binary_function() (in module sympy.utilities.autowrap)": [[249, "sympy.utilities.autowrap.binary_function"]], "dump_c() (sympy.utilities.autowrap.ufuncifycodewrapper method)": [[249, "sympy.utilities.autowrap.UfuncifyCodeWrapper.dump_c"]], "dump_pyx() (sympy.utilities.autowrap.cythoncodewrapper method)": [[249, "sympy.utilities.autowrap.CythonCodeWrapper.dump_pyx"]], "sympy.utilities.autowrap": [[249, "module-sympy.utilities.autowrap"]], "ufuncify() (in module sympy.utilities.autowrap)": [[249, "sympy.utilities.autowrap.ufuncify"]], "argument (class in sympy.utilities.codegen)": [[250, "sympy.utilities.codegen.Argument"]], "ccodegen (class in sympy.utilities.codegen)": [[250, "sympy.utilities.codegen.CCodeGen"]], "codegen (class in sympy.utilities.codegen)": [[250, "sympy.utilities.codegen.CodeGen"]], "datatype (class in sympy.utilities.codegen)": [[250, "sympy.utilities.codegen.DataType"]], "fcodegen (class in sympy.utilities.codegen)": [[250, "sympy.utilities.codegen.FCodeGen"]], "juliacodegen (class in sympy.utilities.codegen)": [[250, "sympy.utilities.codegen.JuliaCodeGen"]], "octavecodegen (class in sympy.utilities.codegen)": [[250, "sympy.utilities.codegen.OctaveCodeGen"]], "outputargument (class in sympy.utilities.codegen)": [[250, "sympy.utilities.codegen.OutputArgument"]], "result (class in sympy.utilities.codegen)": [[250, "sympy.utilities.codegen.Result"]], "routine (class in sympy.utilities.codegen)": [[250, "sympy.utilities.codegen.Routine"]], "rustcodegen (class in sympy.utilities.codegen)": [[250, "sympy.utilities.codegen.RustCodeGen"]], "codegen() (in module sympy.utilities.codegen)": [[250, "sympy.utilities.codegen.codegen"]], "dump_c() (sympy.utilities.codegen.ccodegen method)": [[250, "sympy.utilities.codegen.CCodeGen.dump_c"]], "dump_code() (sympy.utilities.codegen.codegen method)": [[250, "sympy.utilities.codegen.CodeGen.dump_code"]], "dump_f95() (sympy.utilities.codegen.fcodegen method)": [[250, "sympy.utilities.codegen.FCodeGen.dump_f95"]], "dump_h() (sympy.utilities.codegen.ccodegen method)": [[250, "sympy.utilities.codegen.CCodeGen.dump_h"]], "dump_h() (sympy.utilities.codegen.fcodegen method)": [[250, "sympy.utilities.codegen.FCodeGen.dump_h"]], "dump_jl() (sympy.utilities.codegen.juliacodegen method)": [[250, "sympy.utilities.codegen.JuliaCodeGen.dump_jl"]], "dump_m() (sympy.utilities.codegen.octavecodegen method)": [[250, "sympy.utilities.codegen.OctaveCodeGen.dump_m"]], "dump_rs() (sympy.utilities.codegen.rustcodegen method)": [[250, "sympy.utilities.codegen.RustCodeGen.dump_rs"]], "get_default_datatype() (in module sympy.utilities.codegen)": [[250, "sympy.utilities.codegen.get_default_datatype"]], "get_interface() (sympy.utilities.codegen.fcodegen method)": [[250, "sympy.utilities.codegen.FCodeGen.get_interface"]], "get_prototype() (sympy.utilities.codegen.ccodegen method)": [[250, "sympy.utilities.codegen.CCodeGen.get_prototype"]], "get_prototype() (sympy.utilities.codegen.rustcodegen method)": [[250, "sympy.utilities.codegen.RustCodeGen.get_prototype"]], "make_routine() (in module sympy.utilities.codegen)": [[250, "sympy.utilities.codegen.make_routine"]], "result_variables (sympy.utilities.codegen.routine property)": [[250, "sympy.utilities.codegen.Routine.result_variables"]], "routine() (sympy.utilities.codegen.codegen method)": [[250, "sympy.utilities.codegen.CodeGen.routine"]], "routine() (sympy.utilities.codegen.juliacodegen method)": [[250, "sympy.utilities.codegen.JuliaCodeGen.routine"]], "routine() (sympy.utilities.codegen.octavecodegen method)": [[250, "sympy.utilities.codegen.OctaveCodeGen.routine"]], "routine() (sympy.utilities.codegen.rustcodegen method)": [[250, "sympy.utilities.codegen.RustCodeGen.routine"]], "sympy.utilities.codegen": [[250, "module-sympy.utilities.codegen"]], "variables (sympy.utilities.codegen.routine property)": [[250, "sympy.utilities.codegen.Routine.variables"]], "write() (sympy.utilities.codegen.codegen method)": [[250, "sympy.utilities.codegen.CodeGen.write"]], "conserve_mpmath_dps() (in module sympy.utilities.decorator)": [[251, "sympy.utilities.decorator.conserve_mpmath_dps"]], "deprecated() (in module sympy.utilities.decorator)": [[251, "sympy.utilities.decorator.deprecated"]], "doctest_depends_on() (in module sympy.utilities.decorator)": [[251, "sympy.utilities.decorator.doctest_depends_on"]], "memoize_property() (in module sympy.utilities.decorator)": [[251, "sympy.utilities.decorator.memoize_property"]], "no_attrs_in_subclass (class in sympy.utilities.decorator)": [[251, "sympy.utilities.decorator.no_attrs_in_subclass"]], "public() (in module sympy.utilities.decorator)": [[251, "sympy.utilities.decorator.public"]], "sympy.utilities.decorator": [[251, "module-sympy.utilities.decorator"]], "threaded() (in module sympy.utilities.decorator)": [[251, "sympy.utilities.decorator.threaded"]], "threaded_factory() (in module sympy.utilities.decorator)": [[251, "sympy.utilities.decorator.threaded_factory"]], "xthreaded() (in module sympy.utilities.decorator)": [[251, "sympy.utilities.decorator.xthreaded"]], "multisetpartitiontraverser (class in sympy.utilities.enumerative)": [[252, "sympy.utilities.enumerative.MultisetPartitionTraverser"]], "count_partitions() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[252, "sympy.utilities.enumerative.MultisetPartitionTraverser.count_partitions"]], "enum_all() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[252, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all"]], "enum_large() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[252, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large"]], "enum_range() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[252, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range"]], "enum_small() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[252, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small"]], "factoring_visitor() (in module sympy.utilities.enumerative)": [[252, "sympy.utilities.enumerative.factoring_visitor"]], "list_visitor() (in module sympy.utilities.enumerative)": [[252, "sympy.utilities.enumerative.list_visitor"]], "multiset_partitions_taocp() (in module sympy.utilities.enumerative)": [[252, "sympy.utilities.enumerative.multiset_partitions_taocp"]], "sympy.utilities.enumerative": [[252, "module-sympy.utilities.enumerative"]], "sympydeprecationwarning": [[253, "sympy.utilities.exceptions.SymPyDeprecationWarning"]], "ignore_warnings() (in module sympy.utilities.exceptions)": [[253, "sympy.utilities.exceptions.ignore_warnings"]], "sympy.utilities.exceptions": [[253, "module-sympy.utilities.exceptions"]], "sympy_deprecation_warning() (in module sympy.utilities.exceptions)": [[253, "sympy.utilities.exceptions.sympy_deprecation_warning"]], "sympy.utilities": [[254, "module-sympy.utilities"]], "notiterable (class in sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.NotIterable"]], "binary_partitions() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.binary_partitions"]], "bracelets() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.bracelets"]], "capture() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.capture"]], "common_prefix() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.common_prefix"]], "common_suffix() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.common_suffix"]], "connected_components() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.connected_components"]], "dict_merge() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.dict_merge"]], "filter_symbols() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.filter_symbols"]], "flatten() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.flatten"]], "generate_bell() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.generate_bell"]], "generate_derangements() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.generate_derangements"]], "generate_involutions() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.generate_involutions"]], "generate_oriented_forest() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.generate_oriented_forest"]], "group() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.group"]], "has_dups() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.has_dups"]], "has_variety() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.has_variety"]], "ibin() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.ibin"]], "iproduct() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.iproduct"]], "is_palindromic() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.is_palindromic"]], "is_sequence() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.is_sequence"]], "iterable() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.iterable"]], "kbins() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.kbins"]], "least_rotation() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.least_rotation"]], "minlex() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.minlex"]], "multiset() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.multiset"]], "multiset_combinations() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.multiset_combinations"]], "multiset_derangements() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.multiset_derangements"]], "multiset_partitions() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.multiset_partitions"]], "multiset_permutations() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.multiset_permutations"]], "necklaces() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.necklaces"]], "numbered_symbols() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.numbered_symbols"]], "ordered_partitions() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.ordered_partitions"]], "partitions() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.partitions"]], "permute_signs() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.permute_signs"]], "postfixes() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.postfixes"]], "prefixes() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.prefixes"]], "random_derangement() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.random_derangement"]], "reshape() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.reshape"]], "rotate_left() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.rotate_left"]], "rotate_right() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.rotate_right"]], "rotations() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.rotations"]], "roundrobin() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.roundrobin"]], "runs() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.runs"]], "sequence_partitions() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.sequence_partitions"]], "sequence_partitions_empty() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.sequence_partitions_empty"]], "sift() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.sift"]], "signed_permutations() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.signed_permutations"]], "strongly_connected_components() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.strongly_connected_components"]], "subsets() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.subsets"]], "sympy.utilities.iterables": [[255, "module-sympy.utilities.iterables"]], "take() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.take"]], "topological_sort() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.topological_sort"]], "unflatten() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.unflatten"]], "uniq() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.uniq"]], "variations() (in module sympy.utilities.iterables)": [[255, "sympy.utilities.iterables.variations"]], "implemented_function() (in module sympy.utilities.lambdify)": [[256, "sympy.utilities.lambdify.implemented_function"]], "lambdastr() (in module sympy.utilities.lambdify)": [[256, "sympy.utilities.lambdify.lambdastr"]], "lambdify() (in module sympy.utilities.lambdify)": [[256, "sympy.utilities.lambdify.lambdify"]], "sympy.utilities.lambdify": [[256, "module-sympy.utilities.lambdify"]], "assoc_recurrence_memo() (in module sympy.utilities.memoization)": [[257, "sympy.utilities.memoization.assoc_recurrence_memo"]], "recurrence_memo() (in module sympy.utilities.memoization)": [[257, "sympy.utilities.memoization.recurrence_memo"]], "sympy.utilities.memoization": [[257, "module-sympy.utilities.memoization"]], "as_int() (in module sympy.utilities.misc)": [[258, "sympy.utilities.misc.as_int"]], "debug() (in module sympy.utilities.misc)": [[258, "sympy.utilities.misc.debug"]], "debug_decorator() (in module sympy.utilities.misc)": [[258, "sympy.utilities.misc.debug_decorator"]], "debugf() (in module sympy.utilities.misc)": [[258, "sympy.utilities.misc.debugf"]], "filldedent() (in module sympy.utilities.misc)": [[258, "sympy.utilities.misc.filldedent"]], "find_executable() (in module sympy.utilities.misc)": [[258, "sympy.utilities.misc.find_executable"]], "func_name() (in module sympy.utilities.misc)": [[258, "sympy.utilities.misc.func_name"]], "ordinal() (in module sympy.utilities.misc)": [[258, "sympy.utilities.misc.ordinal"]], "rawlines() (in module sympy.utilities.misc)": [[258, "sympy.utilities.misc.rawlines"]], "replace() (in module sympy.utilities.misc)": [[258, "sympy.utilities.misc.replace"]], "strlines() (in module sympy.utilities.misc)": [[258, "sympy.utilities.misc.strlines"]], "sympy.utilities.misc": [[258, "module-sympy.utilities.misc"]], "translate() (in module sympy.utilities.misc)": [[258, "sympy.utilities.misc.translate"]], "get_resource() (in module sympy.utilities.pkgdata)": [[259, "sympy.utilities.pkgdata.get_resource"]], "sympy.utilities.pkgdata": [[259, "module-sympy.utilities.pkgdata"]], "get_class() (in module sympy.utilities.source)": [[260, "sympy.utilities.source.get_class"]], "get_mod_func() (in module sympy.utilities.source)": [[260, "sympy.utilities.source.get_mod_func"]], "sympy.utilities.source": [[260, "module-sympy.utilities.source"]], "sympy.utilities.timeutils": [[261, "module-sympy.utilities.timeutils"]], "timed() (in module sympy.utilities.timeutils)": [[261, "sympy.utilities.timeutils.timed"]], "coordsys3d (class in sympy.vector.coordsysrect)": [[262, "sympy.vector.coordsysrect.CoordSys3D"]], "del (class in sympy.vector.deloperator)": [[262, "sympy.vector.deloperator.Del"]], "dyadic (class in sympy.vector.dyadic)": [[262, "sympy.vector.dyadic.Dyadic"]], "implicitregion (class in sympy.vector.implicitregion)": [[262, "sympy.vector.implicitregion.ImplicitRegion"]], "parametricintegral (class in sympy.vector.integrals)": [[262, "sympy.vector.integrals.ParametricIntegral"]], "parametricregion (class in sympy.vector.parametricregion)": [[262, "sympy.vector.parametricregion.ParametricRegion"]], "vector (class in sympy.vector.vector)": [[262, "sympy.vector.vector.Vector"]], "__init__() (sympy.vector.coordsysrect.coordsys3d method)": [[262, "sympy.vector.coordsysrect.CoordSys3D.__init__"]], "components (sympy.vector.dyadic.dyadic property)": [[262, "sympy.vector.dyadic.Dyadic.components"]], "components (sympy.vector.vector.vector property)": [[262, "sympy.vector.vector.Vector.components"]], "create_new() (sympy.vector.coordsysrect.coordsys3d method)": [[262, "sympy.vector.coordsysrect.CoordSys3D.create_new"]], "cross() (sympy.vector.deloperator.del method)": [[262, "sympy.vector.deloperator.Del.cross"]], "cross() (sympy.vector.dyadic.dyadic method)": [[262, "sympy.vector.dyadic.Dyadic.cross"]], "cross() (sympy.vector.vector.vector method)": [[262, "sympy.vector.vector.Vector.cross"]], "dot() (sympy.vector.deloperator.del method)": [[262, "sympy.vector.deloperator.Del.dot"]], "dot() (sympy.vector.dyadic.dyadic method)": [[262, "sympy.vector.dyadic.Dyadic.dot"]], "dot() (sympy.vector.vector.vector method)": [[262, "sympy.vector.vector.Vector.dot"]], "gradient() (sympy.vector.deloperator.del method)": [[262, "sympy.vector.deloperator.Del.gradient"]], "locate_new() (sympy.vector.coordsysrect.coordsys3d method)": [[262, "sympy.vector.coordsysrect.CoordSys3D.locate_new"]], "magnitude() (sympy.vector.vector.vector method)": [[262, "sympy.vector.vector.Vector.magnitude"]], "multiplicity() (sympy.vector.implicitregion.implicitregion method)": [[262, "sympy.vector.implicitregion.ImplicitRegion.multiplicity"]], "normalize() (sympy.vector.vector.vector method)": [[262, "sympy.vector.vector.Vector.normalize"]], "orient_new() (sympy.vector.coordsysrect.coordsys3d method)": [[262, "sympy.vector.coordsysrect.CoordSys3D.orient_new"]], "orient_new_axis() (sympy.vector.coordsysrect.coordsys3d method)": [[262, "sympy.vector.coordsysrect.CoordSys3D.orient_new_axis"]], "orient_new_body() (sympy.vector.coordsysrect.coordsys3d method)": [[262, "sympy.vector.coordsysrect.CoordSys3D.orient_new_body"]], "orient_new_quaternion() (sympy.vector.coordsysrect.coordsys3d method)": [[262, "sympy.vector.coordsysrect.CoordSys3D.orient_new_quaternion"]], "orient_new_space() (sympy.vector.coordsysrect.coordsys3d method)": [[262, "sympy.vector.coordsysrect.CoordSys3D.orient_new_space"]], "outer() (sympy.vector.vector.vector method)": [[262, "sympy.vector.vector.Vector.outer"]], "position_wrt() (sympy.vector.coordsysrect.coordsys3d method)": [[262, "sympy.vector.coordsysrect.CoordSys3D.position_wrt"]], "projection() (sympy.vector.vector.vector method)": [[262, "sympy.vector.vector.Vector.projection"]], "rational_parametrization() (sympy.vector.implicitregion.implicitregion method)": [[262, "sympy.vector.implicitregion.ImplicitRegion.rational_parametrization"]], "regular_point() (sympy.vector.implicitregion.implicitregion method)": [[262, "sympy.vector.implicitregion.ImplicitRegion.regular_point"]], "rotation_matrix() (sympy.vector.coordsysrect.coordsys3d method)": [[262, "sympy.vector.coordsysrect.CoordSys3D.rotation_matrix"]], "scalar_map() (sympy.vector.coordsysrect.coordsys3d method)": [[262, "sympy.vector.coordsysrect.CoordSys3D.scalar_map"]], "separate() (sympy.vector.vector.vector method)": [[262, "sympy.vector.vector.Vector.separate"]], "singular_points() (sympy.vector.implicitregion.implicitregion method)": [[262, "sympy.vector.implicitregion.ImplicitRegion.singular_points"]], "to_matrix() (sympy.vector.dyadic.dyadic method)": [[262, "sympy.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.vector.vector.vector method)": [[262, "sympy.vector.vector.Vector.to_matrix"]], "axisorienter (class in sympy.vector.orienters)": [[264, "sympy.vector.orienters.AxisOrienter"]], "bodyorienter (class in sympy.vector.orienters)": [[264, "sympy.vector.orienters.BodyOrienter"]], "orienter (class in sympy.vector.orienters)": [[264, "sympy.vector.orienters.Orienter"]], "quaternionorienter (class in sympy.vector.orienters)": [[264, "sympy.vector.orienters.QuaternionOrienter"]], "spaceorienter (class in sympy.vector.orienters)": [[264, "sympy.vector.orienters.SpaceOrienter"]], "__init__() (sympy.vector.orienters.axisorienter method)": [[264, "sympy.vector.orienters.AxisOrienter.__init__"]], "__init__() (sympy.vector.orienters.bodyorienter method)": [[264, "sympy.vector.orienters.BodyOrienter.__init__"]], "__init__() (sympy.vector.orienters.quaternionorienter method)": [[264, "sympy.vector.orienters.QuaternionOrienter.__init__"]], "__init__() (sympy.vector.orienters.spaceorienter method)": [[264, "sympy.vector.orienters.SpaceOrienter.__init__"]], "rotation_matrix() (sympy.vector.orienters.axisorienter method)": [[264, "sympy.vector.orienters.AxisOrienter.rotation_matrix"]], "rotation_matrix() (sympy.vector.orienters.orienter method)": [[264, "sympy.vector.orienters.Orienter.rotation_matrix"]], "curl() (in module sympy.vector)": [[265, "sympy.vector.curl"]], "divergence() (in module sympy.vector)": [[265, "sympy.vector.divergence"]], "express() (in module sympy.vector)": [[265, "sympy.vector.express"]], "gradient() (in module sympy.vector)": [[265, "sympy.vector.gradient"]], "is_conservative() (in module sympy.vector)": [[265, "sympy.vector.is_conservative"]], "is_solenoidal() (in module sympy.vector)": [[265, "sympy.vector.is_solenoidal"]], "matrix_to_vector() (in module sympy.vector)": [[265, "sympy.vector.matrix_to_vector"]], "scalar_potential() (in module sympy.vector)": [[265, "sympy.vector.scalar_potential"]], "scalar_potential_difference() (in module sympy.vector)": [[265, "sympy.vector.scalar_potential_difference"]], "vector_integrate() (in module sympy.vector.integrals)": [[265, "sympy.vector.integrals.vector_integrate"]], "sympy.vector": [[270, "module-sympy.vector"]], "sympy.physics": [[279, "module-sympy.physics"]]}})